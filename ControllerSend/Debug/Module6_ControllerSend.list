
Module6_ControllerSend.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006724  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080068e0  080068e0  000168e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006958  08006958  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006958  08006958  00016958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006960  08006960  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006960  08006960  00016960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006964  08006964  00016964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006968  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  2000000c  08006974  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000504  08006974  00020504  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001926e  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c29  00000000  00000000  000392ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b0  00000000  00000000  0003bf18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010ea  00000000  00000000  0003d4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d3df  00000000  00000000  0003e5b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019cd3  00000000  00000000  0006b991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011c01a  00000000  00000000  00085664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d50  00000000  00000000  001a1680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001a73d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080068c8 	.word	0x080068c8

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	080068c8 	.word	0x080068c8

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fe:	f001 f940 	bl	8001782 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000502:	f000 f83b 	bl	800057c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000506:	f000 f897 	bl	8000638 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050a:	f000 fbe9 	bl	8000ce0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800050e:	f000 f8c3 	bl	8000698 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8000512:	f000 f925 	bl	8000760 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 8000516:	f000 f95b 	bl	80007d0 <MX_I2C1_Init>
  MX_I2C2_Init();
 800051a:	f000 f997 	bl	800084c <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 800051e:	f000 f9d3 	bl	80008c8 <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 8000522:	f000 fa27 	bl	8000974 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000526:	f000 fa63 	bl	80009f0 <MX_SPI3_Init>
  MX_UART4_Init();
 800052a:	f000 fa9f 	bl	8000a6c <MX_UART4_Init>
  MX_USART1_UART_Init();
 800052e:	f000 fae9 	bl	8000b04 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000532:	f000 fb33 	bl	8000b9c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000536:	f000 fb7f 	bl	8000c38 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 800053a:	f000 fbc9 	bl	8000cd0 <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */

  uint8_t TxBuf[7] = "Hello\r\n";
 800053e:	4a0d      	ldr	r2, [pc, #52]	; (8000574 <main+0x7c>)
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000546:	6018      	str	r0, [r3, #0]
 8000548:	3304      	adds	r3, #4
 800054a:	8019      	strh	r1, [r3, #0]
 800054c:	3302      	adds	r3, #2
 800054e:	0c0a      	lsrs	r2, r1, #16
 8000550:	701a      	strb	r2, [r3, #0]
  uint16_t targetADDR = 0x16<<1;
 8000552:	232c      	movs	r3, #44	; 0x2c
 8000554:	81fb      	strh	r3, [r7, #14]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_I2C_Master_Transmit(&hi2c1, targetADDR, TxBuf, 7, 1000);
 8000556:	1d3a      	adds	r2, r7, #4
 8000558:	89f9      	ldrh	r1, [r7, #14]
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	9300      	str	r3, [sp, #0]
 8000560:	2307      	movs	r3, #7
 8000562:	4805      	ldr	r0, [pc, #20]	; (8000578 <main+0x80>)
 8000564:	f002 fd0e 	bl	8002f84 <HAL_I2C_Master_Transmit>
	  HAL_Delay(5000);
 8000568:	f241 3088 	movw	r0, #5000	; 0x1388
 800056c:	f001 f97e 	bl	800186c <HAL_Delay>
	  HAL_I2C_Master_Transmit(&hi2c1, targetADDR, TxBuf, 7, 1000);
 8000570:	e7f1      	b.n	8000556 <main+0x5e>
 8000572:	bf00      	nop
 8000574:	080068e0 	.word	0x080068e0
 8000578:	200000c8 	.word	0x200000c8

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b096      	sub	sp, #88	; 0x58
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	2244      	movs	r2, #68	; 0x44
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f006 f970 	bl	8006870 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	463b      	mov	r3, r7
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800059e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005a2:	f003 fdb5 	bl	8004110 <HAL_PWREx_ControlVoltageScaling>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005ac:	f000 fcda 	bl	8000f64 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005b0:	f003 fd7e 	bl	80040b0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005b4:	4b1f      	ldr	r3, [pc, #124]	; (8000634 <SystemClock_Config+0xb8>)
 80005b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005ba:	4a1e      	ldr	r2, [pc, #120]	; (8000634 <SystemClock_Config+0xb8>)
 80005bc:	f023 0318 	bic.w	r3, r3, #24
 80005c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 80005c4:	2316      	movs	r3, #22
 80005c6:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005c8:	2301      	movs	r3, #1
 80005ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d2:	2340      	movs	r3, #64	; 0x40
 80005d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005d6:	2301      	movs	r3, #1
 80005d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005de:	2360      	movs	r3, #96	; 0x60
 80005e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005e2:	2300      	movs	r3, #0
 80005e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	4618      	mov	r0, r3
 80005ec:	f003 fe34 	bl	8004258 <HAL_RCC_OscConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80005f6:	f000 fcb5 	bl	8000f64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fa:	230f      	movs	r3, #15
 80005fc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005fe:	2301      	movs	r3, #1
 8000600:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000606:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800060a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 800060c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000610:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000612:	463b      	mov	r3, r7
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f004 fa38 	bl	8004a8c <HAL_RCC_ClockConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000622:	f000 fc9f 	bl	8000f64 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000626:	f005 f81f 	bl	8005668 <HAL_RCCEx_EnableMSIPLLMode>
}
 800062a:	bf00      	nop
 800062c:	3758      	adds	r7, #88	; 0x58
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40021000 	.word	0x40021000

08000638 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b0a6      	sub	sp, #152	; 0x98
 800063c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	2294      	movs	r2, #148	; 0x94
 8000642:	2100      	movs	r1, #0
 8000644:	4618      	mov	r0, r3
 8000646:	f006 f913 	bl	8006870 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 800064a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800064e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000650:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000654:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000658:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800065c:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800065e:	2301      	movs	r3, #1
 8000660:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000662:	2301      	movs	r3, #1
 8000664:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000666:	2318      	movs	r3, #24
 8000668:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800066a:	2302      	movs	r3, #2
 800066c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800066e:	2302      	movs	r3, #2
 8000670:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000672:	2302      	movs	r3, #2
 8000674:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8000676:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 800067a:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	4618      	mov	r0, r3
 8000680:	f004 fcc2 	bl	8005008 <HAL_RCCEx_PeriphCLKConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800068a:	f000 fc6b 	bl	8000f64 <Error_Handler>
  }
}
 800068e:	bf00      	nop
 8000690:	3798      	adds	r7, #152	; 0x98
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
	...

08000698 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800069e:	463b      	mov	r3, r7
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]
 80006ac:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006ae:	4b29      	ldr	r3, [pc, #164]	; (8000754 <MX_ADC1_Init+0xbc>)
 80006b0:	4a29      	ldr	r2, [pc, #164]	; (8000758 <MX_ADC1_Init+0xc0>)
 80006b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006b4:	4b27      	ldr	r3, [pc, #156]	; (8000754 <MX_ADC1_Init+0xbc>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ba:	4b26      	ldr	r3, [pc, #152]	; (8000754 <MX_ADC1_Init+0xbc>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006c0:	4b24      	ldr	r3, [pc, #144]	; (8000754 <MX_ADC1_Init+0xbc>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006c6:	4b23      	ldr	r3, [pc, #140]	; (8000754 <MX_ADC1_Init+0xbc>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006cc:	4b21      	ldr	r3, [pc, #132]	; (8000754 <MX_ADC1_Init+0xbc>)
 80006ce:	2204      	movs	r2, #4
 80006d0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006d2:	4b20      	ldr	r3, [pc, #128]	; (8000754 <MX_ADC1_Init+0xbc>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006d8:	4b1e      	ldr	r3, [pc, #120]	; (8000754 <MX_ADC1_Init+0xbc>)
 80006da:	2200      	movs	r2, #0
 80006dc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80006de:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <MX_ADC1_Init+0xbc>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006e4:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <MX_ADC1_Init+0xbc>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006ec:	4b19      	ldr	r3, [pc, #100]	; (8000754 <MX_ADC1_Init+0xbc>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006f2:	4b18      	ldr	r3, [pc, #96]	; (8000754 <MX_ADC1_Init+0xbc>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006f8:	4b16      	ldr	r3, [pc, #88]	; (8000754 <MX_ADC1_Init+0xbc>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <MX_ADC1_Init+0xbc>)
 8000702:	2200      	movs	r2, #0
 8000704:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000706:	4b13      	ldr	r3, [pc, #76]	; (8000754 <MX_ADC1_Init+0xbc>)
 8000708:	2200      	movs	r2, #0
 800070a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800070e:	4811      	ldr	r0, [pc, #68]	; (8000754 <MX_ADC1_Init+0xbc>)
 8000710:	f001 fa70 	bl	8001bf4 <HAL_ADC_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800071a:	f000 fc23 	bl	8000f64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800071e:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_ADC1_Init+0xc4>)
 8000720:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000722:	2306      	movs	r3, #6
 8000724:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800072a:	237f      	movs	r3, #127	; 0x7f
 800072c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800072e:	2304      	movs	r3, #4
 8000730:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000736:	463b      	mov	r3, r7
 8000738:	4619      	mov	r1, r3
 800073a:	4806      	ldr	r0, [pc, #24]	; (8000754 <MX_ADC1_Init+0xbc>)
 800073c:	f001 fba0 	bl	8001e80 <HAL_ADC_ConfigChannel>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000746:	f000 fc0d 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	3718      	adds	r7, #24
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000028 	.word	0x20000028
 8000758:	50040000 	.word	0x50040000
 800075c:	04300002 	.word	0x04300002

08000760 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000764:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <MX_DFSDM1_Init+0x68>)
 8000766:	4a19      	ldr	r2, [pc, #100]	; (80007cc <MX_DFSDM1_Init+0x6c>)
 8000768:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <MX_DFSDM1_Init+0x68>)
 800076c:	2201      	movs	r2, #1
 800076e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000770:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <MX_DFSDM1_Init+0x68>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_DFSDM1_Init+0x68>)
 8000778:	2202      	movs	r2, #2
 800077a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <MX_DFSDM1_Init+0x68>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_DFSDM1_Init+0x68>)
 8000784:	2200      	movs	r2, #0
 8000786:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_DFSDM1_Init+0x68>)
 800078a:	2200      	movs	r2, #0
 800078c:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_DFSDM1_Init+0x68>)
 8000790:	2200      	movs	r2, #0
 8000792:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_DFSDM1_Init+0x68>)
 8000796:	2204      	movs	r2, #4
 8000798:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <MX_DFSDM1_Init+0x68>)
 800079c:	2200      	movs	r2, #0
 800079e:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_DFSDM1_Init+0x68>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <MX_DFSDM1_Init+0x68>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_DFSDM1_Init+0x68>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_DFSDM1_Init+0x68>)
 80007b4:	f002 f872 	bl	800289c <HAL_DFSDM_ChannelInit>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 80007be:	f000 fbd1 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000090 	.word	0x20000090
 80007cc:	40016040 	.word	0x40016040

080007d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007d4:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <MX_I2C1_Init+0x74>)
 80007d6:	4a1c      	ldr	r2, [pc, #112]	; (8000848 <MX_I2C1_Init+0x78>)
 80007d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80007da:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <MX_I2C1_Init+0x74>)
 80007dc:	f640 6214 	movw	r2, #3604	; 0xe14
 80007e0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <MX_I2C1_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007e8:	4b16      	ldr	r3, [pc, #88]	; (8000844 <MX_I2C1_Init+0x74>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <MX_I2C1_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007f4:	4b13      	ldr	r3, [pc, #76]	; (8000844 <MX_I2C1_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007fa:	4b12      	ldr	r3, [pc, #72]	; (8000844 <MX_I2C1_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000800:	4b10      	ldr	r3, [pc, #64]	; (8000844 <MX_I2C1_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000806:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_I2C1_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800080c:	480d      	ldr	r0, [pc, #52]	; (8000844 <MX_I2C1_Init+0x74>)
 800080e:	f002 fb1e 	bl	8002e4e <HAL_I2C_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000818:	f000 fba4 	bl	8000f64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800081c:	2100      	movs	r1, #0
 800081e:	4809      	ldr	r0, [pc, #36]	; (8000844 <MX_I2C1_Init+0x74>)
 8000820:	f002 fed8 	bl	80035d4 <HAL_I2CEx_ConfigAnalogFilter>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800082a:	f000 fb9b 	bl	8000f64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800082e:	2100      	movs	r1, #0
 8000830:	4804      	ldr	r0, [pc, #16]	; (8000844 <MX_I2C1_Init+0x74>)
 8000832:	f002 ff1a 	bl	800366a <HAL_I2CEx_ConfigDigitalFilter>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800083c:	f000 fb92 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	200000c8 	.word	0x200000c8
 8000848:	40005400 	.word	0x40005400

0800084c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000850:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000852:	4a1c      	ldr	r2, [pc, #112]	; (80008c4 <MX_I2C2_Init+0x78>)
 8000854:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000856:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000858:	f640 6214 	movw	r2, #3604	; 0xe14
 800085c:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800085e:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000864:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000866:	2201      	movs	r2, #1
 8000868:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800086a:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <MX_I2C2_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000870:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000876:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087c:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <MX_I2C2_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000882:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000884:	2200      	movs	r2, #0
 8000886:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000888:	480d      	ldr	r0, [pc, #52]	; (80008c0 <MX_I2C2_Init+0x74>)
 800088a:	f002 fae0 	bl	8002e4e <HAL_I2C_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000894:	f000 fb66 	bl	8000f64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000898:	2100      	movs	r1, #0
 800089a:	4809      	ldr	r0, [pc, #36]	; (80008c0 <MX_I2C2_Init+0x74>)
 800089c:	f002 fe9a 	bl	80035d4 <HAL_I2CEx_ConfigAnalogFilter>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80008a6:	f000 fb5d 	bl	8000f64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008aa:	2100      	movs	r1, #0
 80008ac:	4804      	ldr	r0, [pc, #16]	; (80008c0 <MX_I2C2_Init+0x74>)
 80008ae:	f002 fedc 	bl	800366a <HAL_I2CEx_ConfigDigitalFilter>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80008b8:	f000 fb54 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	2000011c 	.word	0x2000011c
 80008c4:	40005800 	.word	0x40005800

080008c8 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80008dc:	4b23      	ldr	r3, [pc, #140]	; (800096c <MX_OCTOSPI1_Init+0xa4>)
 80008de:	4a24      	ldr	r2, [pc, #144]	; (8000970 <MX_OCTOSPI1_Init+0xa8>)
 80008e0:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80008e2:	4b22      	ldr	r3, [pc, #136]	; (800096c <MX_OCTOSPI1_Init+0xa4>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80008e8:	4b20      	ldr	r3, [pc, #128]	; (800096c <MX_OCTOSPI1_Init+0xa4>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 80008ee:	4b1f      	ldr	r3, [pc, #124]	; (800096c <MX_OCTOSPI1_Init+0xa4>)
 80008f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80008f4:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 80008f6:	4b1d      	ldr	r3, [pc, #116]	; (800096c <MX_OCTOSPI1_Init+0xa4>)
 80008f8:	2220      	movs	r2, #32
 80008fa:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 80008fc:	4b1b      	ldr	r3, [pc, #108]	; (800096c <MX_OCTOSPI1_Init+0xa4>)
 80008fe:	2201      	movs	r2, #1
 8000900:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000902:	4b1a      	ldr	r3, [pc, #104]	; (800096c <MX_OCTOSPI1_Init+0xa4>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000908:	4b18      	ldr	r3, [pc, #96]	; (800096c <MX_OCTOSPI1_Init+0xa4>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 800090e:	4b17      	ldr	r3, [pc, #92]	; (800096c <MX_OCTOSPI1_Init+0xa4>)
 8000910:	2201      	movs	r2, #1
 8000912:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000914:	4b15      	ldr	r3, [pc, #84]	; (800096c <MX_OCTOSPI1_Init+0xa4>)
 8000916:	2200      	movs	r2, #0
 8000918:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800091a:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_OCTOSPI1_Init+0xa4>)
 800091c:	2200      	movs	r2, #0
 800091e:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <MX_OCTOSPI1_Init+0xa4>)
 8000922:	2200      	movs	r2, #0
 8000924:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_OCTOSPI1_Init+0xa4>)
 8000928:	2208      	movs	r2, #8
 800092a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 800092c:	480f      	ldr	r0, [pc, #60]	; (800096c <MX_OCTOSPI1_Init+0xa4>)
 800092e:	f002 fee9 	bl	8003704 <HAL_OSPI_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8000938:	f000 fb14 	bl	8000f64 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 800093c:	2301      	movs	r3, #1
 800093e:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8000940:	2301      	movs	r3, #1
 8000942:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000944:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8000948:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000950:	4619      	mov	r1, r3
 8000952:	4806      	ldr	r0, [pc, #24]	; (800096c <MX_OCTOSPI1_Init+0xa4>)
 8000954:	f002 ff90 	bl	8003878 <HAL_OSPIM_Config>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 800095e:	f000 fb01 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	3718      	adds	r7, #24
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000170 	.word	0x20000170
 8000970:	a0001000 	.word	0xa0001000

08000974 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000978:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <MX_SPI1_Init+0x74>)
 800097a:	4a1c      	ldr	r2, [pc, #112]	; (80009ec <MX_SPI1_Init+0x78>)
 800097c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800097e:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <MX_SPI1_Init+0x74>)
 8000980:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000984:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000986:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <MX_SPI1_Init+0x74>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800098c:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <MX_SPI1_Init+0x74>)
 800098e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000992:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000994:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <MX_SPI1_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800099a:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <MX_SPI1_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_SPI1_Init+0x74>)
 80009a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009a6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80009a8:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <MX_SPI1_Init+0x74>)
 80009aa:	2208      	movs	r2, #8
 80009ac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <MX_SPI1_Init+0x74>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009b4:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <MX_SPI1_Init+0x74>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <MX_SPI1_Init+0x74>)
 80009bc:	2200      	movs	r2, #0
 80009be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009c0:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <MX_SPI1_Init+0x74>)
 80009c2:	2207      	movs	r2, #7
 80009c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <MX_SPI1_Init+0x74>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <MX_SPI1_Init+0x74>)
 80009ce:	2208      	movs	r2, #8
 80009d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009d2:	4805      	ldr	r0, [pc, #20]	; (80009e8 <MX_SPI1_Init+0x74>)
 80009d4:	f005 f840 	bl	8005a58 <HAL_SPI_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009de:	f000 fac1 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200001c0 	.word	0x200001c0
 80009ec:	40013000 	.word	0x40013000

080009f0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80009f4:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <MX_SPI3_Init+0x74>)
 80009f6:	4a1c      	ldr	r2, [pc, #112]	; (8000a68 <MX_SPI3_Init+0x78>)
 80009f8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80009fa:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <MX_SPI3_Init+0x74>)
 80009fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a00:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a02:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <MX_SPI3_Init+0x74>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a08:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <MX_SPI3_Init+0x74>)
 8000a0a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a0e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a10:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <MX_SPI3_Init+0x74>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a16:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <MX_SPI3_Init+0x74>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_SPI3_Init+0x74>)
 8000a1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a22:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_SPI3_Init+0x74>)
 8000a26:	2208      	movs	r2, #8
 8000a28:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <MX_SPI3_Init+0x74>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <MX_SPI3_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <MX_SPI3_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a3c:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <MX_SPI3_Init+0x74>)
 8000a3e:	2207      	movs	r2, #7
 8000a40:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <MX_SPI3_Init+0x74>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <MX_SPI3_Init+0x74>)
 8000a4a:	2208      	movs	r2, #8
 8000a4c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_SPI3_Init+0x74>)
 8000a50:	f005 f802 	bl	8005a58 <HAL_SPI_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000a5a:	f000 fa83 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000224 	.word	0x20000224
 8000a68:	40003c00 	.word	0x40003c00

08000a6c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a70:	4b22      	ldr	r3, [pc, #136]	; (8000afc <MX_UART4_Init+0x90>)
 8000a72:	4a23      	ldr	r2, [pc, #140]	; (8000b00 <MX_UART4_Init+0x94>)
 8000a74:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a76:	4b21      	ldr	r3, [pc, #132]	; (8000afc <MX_UART4_Init+0x90>)
 8000a78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a7c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7e:	4b1f      	ldr	r3, [pc, #124]	; (8000afc <MX_UART4_Init+0x90>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a84:	4b1d      	ldr	r3, [pc, #116]	; (8000afc <MX_UART4_Init+0x90>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a8a:	4b1c      	ldr	r3, [pc, #112]	; (8000afc <MX_UART4_Init+0x90>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a90:	4b1a      	ldr	r3, [pc, #104]	; (8000afc <MX_UART4_Init+0x90>)
 8000a92:	220c      	movs	r2, #12
 8000a94:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a96:	4b19      	ldr	r3, [pc, #100]	; (8000afc <MX_UART4_Init+0x90>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a9c:	4b17      	ldr	r3, [pc, #92]	; (8000afc <MX_UART4_Init+0x90>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aa2:	4b16      	ldr	r3, [pc, #88]	; (8000afc <MX_UART4_Init+0x90>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000aa8:	4b14      	ldr	r3, [pc, #80]	; (8000afc <MX_UART4_Init+0x90>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aae:	4b13      	ldr	r3, [pc, #76]	; (8000afc <MX_UART4_Init+0x90>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000ab4:	4811      	ldr	r0, [pc, #68]	; (8000afc <MX_UART4_Init+0x90>)
 8000ab6:	f005 f872 	bl	8005b9e <HAL_UART_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000ac0:	f000 fa50 	bl	8000f64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	480d      	ldr	r0, [pc, #52]	; (8000afc <MX_UART4_Init+0x90>)
 8000ac8:	f005 fe08 	bl	80066dc <HAL_UARTEx_SetTxFifoThreshold>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000ad2:	f000 fa47 	bl	8000f64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	4808      	ldr	r0, [pc, #32]	; (8000afc <MX_UART4_Init+0x90>)
 8000ada:	f005 fe3d 	bl	8006758 <HAL_UARTEx_SetRxFifoThreshold>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000ae4:	f000 fa3e 	bl	8000f64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000ae8:	4804      	ldr	r0, [pc, #16]	; (8000afc <MX_UART4_Init+0x90>)
 8000aea:	f005 fdbe 	bl	800666a <HAL_UARTEx_DisableFifoMode>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000af4:	f000 fa36 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000288 	.word	0x20000288
 8000b00:	40004c00 	.word	0x40004c00

08000b04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b08:	4b22      	ldr	r3, [pc, #136]	; (8000b94 <MX_USART1_UART_Init+0x90>)
 8000b0a:	4a23      	ldr	r2, [pc, #140]	; (8000b98 <MX_USART1_UART_Init+0x94>)
 8000b0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b0e:	4b21      	ldr	r3, [pc, #132]	; (8000b94 <MX_USART1_UART_Init+0x90>)
 8000b10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b16:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <MX_USART1_UART_Init+0x90>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b1c:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <MX_USART1_UART_Init+0x90>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b22:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <MX_USART1_UART_Init+0x90>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b28:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <MX_USART1_UART_Init+0x90>)
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2e:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <MX_USART1_UART_Init+0x90>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b34:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <MX_USART1_UART_Init+0x90>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b3a:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <MX_USART1_UART_Init+0x90>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b40:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <MX_USART1_UART_Init+0x90>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b46:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <MX_USART1_UART_Init+0x90>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b4c:	4811      	ldr	r0, [pc, #68]	; (8000b94 <MX_USART1_UART_Init+0x90>)
 8000b4e:	f005 f826 	bl	8005b9e <HAL_UART_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b58:	f000 fa04 	bl	8000f64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	480d      	ldr	r0, [pc, #52]	; (8000b94 <MX_USART1_UART_Init+0x90>)
 8000b60:	f005 fdbc 	bl	80066dc <HAL_UARTEx_SetTxFifoThreshold>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b6a:	f000 f9fb 	bl	8000f64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4808      	ldr	r0, [pc, #32]	; (8000b94 <MX_USART1_UART_Init+0x90>)
 8000b72:	f005 fdf1 	bl	8006758 <HAL_UARTEx_SetRxFifoThreshold>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b7c:	f000 f9f2 	bl	8000f64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b80:	4804      	ldr	r0, [pc, #16]	; (8000b94 <MX_USART1_UART_Init+0x90>)
 8000b82:	f005 fd72 	bl	800666a <HAL_UARTEx_DisableFifoMode>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b8c:	f000 f9ea 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	2000031c 	.word	0x2000031c
 8000b98:	40013800 	.word	0x40013800

08000b9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ba0:	4b23      	ldr	r3, [pc, #140]	; (8000c30 <MX_USART2_UART_Init+0x94>)
 8000ba2:	4a24      	ldr	r2, [pc, #144]	; (8000c34 <MX_USART2_UART_Init+0x98>)
 8000ba4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ba6:	4b22      	ldr	r3, [pc, #136]	; (8000c30 <MX_USART2_UART_Init+0x94>)
 8000ba8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bae:	4b20      	ldr	r3, [pc, #128]	; (8000c30 <MX_USART2_UART_Init+0x94>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bb4:	4b1e      	ldr	r3, [pc, #120]	; (8000c30 <MX_USART2_UART_Init+0x94>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bba:	4b1d      	ldr	r3, [pc, #116]	; (8000c30 <MX_USART2_UART_Init+0x94>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bc0:	4b1b      	ldr	r3, [pc, #108]	; (8000c30 <MX_USART2_UART_Init+0x94>)
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000bc6:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <MX_USART2_UART_Init+0x94>)
 8000bc8:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000bcc:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bce:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <MX_USART2_UART_Init+0x94>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bd4:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <MX_USART2_UART_Init+0x94>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bda:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <MX_USART2_UART_Init+0x94>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000be0:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <MX_USART2_UART_Init+0x94>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000be6:	4812      	ldr	r0, [pc, #72]	; (8000c30 <MX_USART2_UART_Init+0x94>)
 8000be8:	f004 ffd9 	bl	8005b9e <HAL_UART_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000bf2:	f000 f9b7 	bl	8000f64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	480d      	ldr	r0, [pc, #52]	; (8000c30 <MX_USART2_UART_Init+0x94>)
 8000bfa:	f005 fd6f 	bl	80066dc <HAL_UARTEx_SetTxFifoThreshold>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000c04:	f000 f9ae 	bl	8000f64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4809      	ldr	r0, [pc, #36]	; (8000c30 <MX_USART2_UART_Init+0x94>)
 8000c0c:	f005 fda4 	bl	8006758 <HAL_UARTEx_SetRxFifoThreshold>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000c16:	f000 f9a5 	bl	8000f64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c1a:	4805      	ldr	r0, [pc, #20]	; (8000c30 <MX_USART2_UART_Init+0x94>)
 8000c1c:	f005 fd25 	bl	800666a <HAL_UARTEx_DisableFifoMode>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000c26:	f000 f99d 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200003b0 	.word	0x200003b0
 8000c34:	40004400 	.word	0x40004400

08000c38 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c3c:	4b22      	ldr	r3, [pc, #136]	; (8000cc8 <MX_USART3_UART_Init+0x90>)
 8000c3e:	4a23      	ldr	r2, [pc, #140]	; (8000ccc <MX_USART3_UART_Init+0x94>)
 8000c40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c42:	4b21      	ldr	r3, [pc, #132]	; (8000cc8 <MX_USART3_UART_Init+0x90>)
 8000c44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4a:	4b1f      	ldr	r3, [pc, #124]	; (8000cc8 <MX_USART3_UART_Init+0x90>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c50:	4b1d      	ldr	r3, [pc, #116]	; (8000cc8 <MX_USART3_UART_Init+0x90>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c56:	4b1c      	ldr	r3, [pc, #112]	; (8000cc8 <MX_USART3_UART_Init+0x90>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c5c:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <MX_USART3_UART_Init+0x90>)
 8000c5e:	220c      	movs	r2, #12
 8000c60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c62:	4b19      	ldr	r3, [pc, #100]	; (8000cc8 <MX_USART3_UART_Init+0x90>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c68:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <MX_USART3_UART_Init+0x90>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c6e:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <MX_USART3_UART_Init+0x90>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c74:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <MX_USART3_UART_Init+0x90>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c7a:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <MX_USART3_UART_Init+0x90>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c80:	4811      	ldr	r0, [pc, #68]	; (8000cc8 <MX_USART3_UART_Init+0x90>)
 8000c82:	f004 ff8c 	bl	8005b9e <HAL_UART_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c8c:	f000 f96a 	bl	8000f64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c90:	2100      	movs	r1, #0
 8000c92:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <MX_USART3_UART_Init+0x90>)
 8000c94:	f005 fd22 	bl	80066dc <HAL_UARTEx_SetTxFifoThreshold>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c9e:	f000 f961 	bl	8000f64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4808      	ldr	r0, [pc, #32]	; (8000cc8 <MX_USART3_UART_Init+0x90>)
 8000ca6:	f005 fd57 	bl	8006758 <HAL_UARTEx_SetRxFifoThreshold>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000cb0:	f000 f958 	bl	8000f64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000cb4:	4804      	ldr	r0, [pc, #16]	; (8000cc8 <MX_USART3_UART_Init+0x90>)
 8000cb6:	f005 fcd8 	bl	800666a <HAL_UARTEx_DisableFifoMode>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000cc0:	f000 f950 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000444 	.word	0x20000444
 8000ccc:	40004800 	.word	0x40004800

08000cd0 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
	...

08000ce0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08c      	sub	sp, #48	; 0x30
 8000ce4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce6:	f107 031c 	add.w	r3, r7, #28
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]
 8000cf4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cf6:	4b96      	ldr	r3, [pc, #600]	; (8000f50 <MX_GPIO_Init+0x270>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfa:	4a95      	ldr	r2, [pc, #596]	; (8000f50 <MX_GPIO_Init+0x270>)
 8000cfc:	f043 0310 	orr.w	r3, r3, #16
 8000d00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d02:	4b93      	ldr	r3, [pc, #588]	; (8000f50 <MX_GPIO_Init+0x270>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d06:	f003 0310 	and.w	r3, r3, #16
 8000d0a:	61bb      	str	r3, [r7, #24]
 8000d0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0e:	4b90      	ldr	r3, [pc, #576]	; (8000f50 <MX_GPIO_Init+0x270>)
 8000d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d12:	4a8f      	ldr	r2, [pc, #572]	; (8000f50 <MX_GPIO_Init+0x270>)
 8000d14:	f043 0304 	orr.w	r3, r3, #4
 8000d18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d1a:	4b8d      	ldr	r3, [pc, #564]	; (8000f50 <MX_GPIO_Init+0x270>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1e:	f003 0304 	and.w	r3, r3, #4
 8000d22:	617b      	str	r3, [r7, #20]
 8000d24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d26:	4b8a      	ldr	r3, [pc, #552]	; (8000f50 <MX_GPIO_Init+0x270>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2a:	4a89      	ldr	r2, [pc, #548]	; (8000f50 <MX_GPIO_Init+0x270>)
 8000d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d32:	4b87      	ldr	r3, [pc, #540]	; (8000f50 <MX_GPIO_Init+0x270>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3e:	4b84      	ldr	r3, [pc, #528]	; (8000f50 <MX_GPIO_Init+0x270>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d42:	4a83      	ldr	r2, [pc, #524]	; (8000f50 <MX_GPIO_Init+0x270>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d4a:	4b81      	ldr	r3, [pc, #516]	; (8000f50 <MX_GPIO_Init+0x270>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d56:	4b7e      	ldr	r3, [pc, #504]	; (8000f50 <MX_GPIO_Init+0x270>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5a:	4a7d      	ldr	r2, [pc, #500]	; (8000f50 <MX_GPIO_Init+0x270>)
 8000d5c:	f043 0302 	orr.w	r3, r3, #2
 8000d60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d62:	4b7b      	ldr	r3, [pc, #492]	; (8000f50 <MX_GPIO_Init+0x270>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d66:	f003 0302 	and.w	r3, r3, #2
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d6e:	4b78      	ldr	r3, [pc, #480]	; (8000f50 <MX_GPIO_Init+0x270>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d72:	4a77      	ldr	r2, [pc, #476]	; (8000f50 <MX_GPIO_Init+0x270>)
 8000d74:	f043 0308 	orr.w	r3, r3, #8
 8000d78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d7a:	4b75      	ldr	r3, [pc, #468]	; (8000f50 <MX_GPIO_Init+0x270>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7e:	f003 0308 	and.w	r3, r3, #8
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	f240 1105 	movw	r1, #261	; 0x105
 8000d8c:	4871      	ldr	r0, [pc, #452]	; (8000f54 <MX_GPIO_Init+0x274>)
 8000d8e:	f002 f823 	bl	8002dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8000d92:	2200      	movs	r2, #0
 8000d94:	f248 111c 	movw	r1, #33052	; 0x811c
 8000d98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d9c:	f002 f81c 	bl	8002dd8 <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000da0:	2200      	movs	r2, #0
 8000da2:	f24f 0134 	movw	r1, #61492	; 0xf034
 8000da6:	486c      	ldr	r0, [pc, #432]	; (8000f58 <MX_GPIO_Init+0x278>)
 8000da8:	f002 f816 	bl	8002dd8 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8000dac:	2200      	movs	r2, #0
 8000dae:	f242 0183 	movw	r1, #8323	; 0x2083
 8000db2:	486a      	ldr	r0, [pc, #424]	; (8000f5c <MX_GPIO_Init+0x27c>)
 8000db4:	f002 f810 	bl	8002dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000dbe:	4868      	ldr	r0, [pc, #416]	; (8000f60 <MX_GPIO_Init+0x280>)
 8000dc0:	f002 f80a 	bl	8002dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000dc4:	f240 1305 	movw	r3, #261	; 0x105
 8000dc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dd6:	f107 031c 	add.w	r3, r7, #28
 8000dda:	4619      	mov	r1, r3
 8000ddc:	485d      	ldr	r0, [pc, #372]	; (8000f54 <MX_GPIO_Init+0x274>)
 8000dde:	f001 fe69 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8000de2:	237a      	movs	r3, #122	; 0x7a
 8000de4:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000de6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000dea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000df0:	f107 031c 	add.w	r3, r7, #28
 8000df4:	4619      	mov	r1, r3
 8000df6:	4857      	ldr	r0, [pc, #348]	; (8000f54 <MX_GPIO_Init+0x274>)
 8000df8:	f001 fe5c 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000dfc:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8000e00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e02:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0c:	f107 031c 	add.w	r3, r7, #28
 8000e10:	4619      	mov	r1, r3
 8000e12:	4853      	ldr	r0, [pc, #332]	; (8000f60 <MX_GPIO_Init+0x280>)
 8000e14:	f001 fe4e 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8000e18:	f248 131c 	movw	r3, #33052	; 0x811c
 8000e1c:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2a:	f107 031c 	add.w	r3, r7, #28
 8000e2e:	4619      	mov	r1, r3
 8000e30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e34:	f001 fe3e 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e3c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000e46:	f107 031c 	add.w	r3, r7, #28
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4842      	ldr	r0, [pc, #264]	; (8000f58 <MX_GPIO_Init+0x278>)
 8000e4e:	f001 fe31 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000e52:	2302      	movs	r3, #2
 8000e54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	2302      	movs	r3, #2
 8000e58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e62:	2302      	movs	r3, #2
 8000e64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000e66:	f107 031c 	add.w	r3, r7, #28
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	483a      	ldr	r0, [pc, #232]	; (8000f58 <MX_GPIO_Init+0x278>)
 8000e6e:	f001 fe21 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000e72:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000e76:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e84:	f107 031c 	add.w	r3, r7, #28
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4833      	ldr	r0, [pc, #204]	; (8000f58 <MX_GPIO_Init+0x278>)
 8000e8c:	f001 fe12 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8000e90:	f64d 4304 	movw	r3, #56324	; 0xdc04
 8000e94:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e96:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea0:	f107 031c 	add.w	r3, r7, #28
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	482d      	ldr	r0, [pc, #180]	; (8000f5c <MX_GPIO_Init+0x27c>)
 8000ea8:	f001 fe04 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8000eac:	f242 0383 	movw	r3, #8323	; 0x2083
 8000eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ebe:	f107 031c 	add.w	r3, r7, #28
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4825      	ldr	r0, [pc, #148]	; (8000f5c <MX_GPIO_Init+0x27c>)
 8000ec6:	f001 fdf5 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000eca:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ece:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000edc:	f107 031c 	add.w	r3, r7, #28
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	481f      	ldr	r0, [pc, #124]	; (8000f60 <MX_GPIO_Init+0x280>)
 8000ee4:	f001 fde6 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000ee8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ef6:	f107 031c 	add.w	r3, r7, #28
 8000efa:	4619      	mov	r1, r3
 8000efc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f00:	f001 fdd8 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000f04:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f12:	2303      	movs	r3, #3
 8000f14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f16:	230a      	movs	r3, #10
 8000f18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1a:	f107 031c 	add.w	r3, r7, #28
 8000f1e:	4619      	mov	r1, r3
 8000f20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f24:	f001 fdc6 	bl	8002ab4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	2017      	movs	r0, #23
 8000f2e:	f001 fc7e 	bl	800282e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f32:	2017      	movs	r0, #23
 8000f34:	f001 fc97 	bl	8002866 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	2028      	movs	r0, #40	; 0x28
 8000f3e:	f001 fc76 	bl	800282e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f42:	2028      	movs	r0, #40	; 0x28
 8000f44:	f001 fc8f 	bl	8002866 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f48:	bf00      	nop
 8000f4a:	3730      	adds	r7, #48	; 0x30
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40021000 	.word	0x40021000
 8000f54:	48001000 	.word	0x48001000
 8000f58:	48000400 	.word	0x48000400
 8000f5c:	48000c00 	.word	0x48000c00
 8000f60:	48000800 	.word	0x48000800

08000f64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f68:	b672      	cpsid	i
}
 8000f6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <Error_Handler+0x8>
	...

08000f70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f76:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <HAL_MspInit+0x44>)
 8000f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f7a:	4a0e      	ldr	r2, [pc, #56]	; (8000fb4 <HAL_MspInit+0x44>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	6613      	str	r3, [r2, #96]	; 0x60
 8000f82:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <HAL_MspInit+0x44>)
 8000f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <HAL_MspInit+0x44>)
 8000f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f92:	4a08      	ldr	r2, [pc, #32]	; (8000fb4 <HAL_MspInit+0x44>)
 8000f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f98:	6593      	str	r3, [r2, #88]	; 0x58
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_MspInit+0x44>)
 8000f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa2:	603b      	str	r3, [r7, #0]
 8000fa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	40021000 	.word	0x40021000

08000fb8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	; 0x28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a15      	ldr	r2, [pc, #84]	; (800102c <HAL_ADC_MspInit+0x74>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d123      	bne.n	8001022 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <HAL_ADC_MspInit+0x78>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	4a14      	ldr	r2, [pc, #80]	; (8001030 <HAL_ADC_MspInit+0x78>)
 8000fe0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe6:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_ADC_MspInit+0x78>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <HAL_ADC_MspInit+0x78>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	4a0e      	ldr	r2, [pc, #56]	; (8001030 <HAL_ADC_MspInit+0x78>)
 8000ff8:	f043 0304 	orr.w	r3, r3, #4
 8000ffc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <HAL_ADC_MspInit+0x78>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	f003 0304 	and.w	r3, r3, #4
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 800100a:	233f      	movs	r3, #63	; 0x3f
 800100c:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800100e:	230b      	movs	r3, #11
 8001010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	4805      	ldr	r0, [pc, #20]	; (8001034 <HAL_ADC_MspInit+0x7c>)
 800101e:	f001 fd49 	bl	8002ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001022:	bf00      	nop
 8001024:	3728      	adds	r7, #40	; 0x28
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	50040000 	.word	0x50040000
 8001030:	40021000 	.word	0x40021000
 8001034:	48000800 	.word	0x48000800

08001038 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b0ae      	sub	sp, #184	; 0xb8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001050:	f107 0310 	add.w	r3, r7, #16
 8001054:	2294      	movs	r2, #148	; 0x94
 8001056:	2100      	movs	r1, #0
 8001058:	4618      	mov	r0, r3
 800105a:	f005 fc09 	bl	8006870 <memset>
  if(DFSDM1_Init == 0)
 800105e:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d142      	bne.n	80010ec <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001066:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800106a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800106c:	2300      	movs	r3, #0
 800106e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001072:	f107 0310 	add.w	r3, r7, #16
 8001076:	4618      	mov	r0, r3
 8001078:	f003 ffc6 	bl	8005008 <HAL_RCCEx_PeriphCLKConfig>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001082:	f7ff ff6f 	bl	8000f64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001086:	4b1c      	ldr	r3, [pc, #112]	; (80010f8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800108a:	4a1b      	ldr	r2, [pc, #108]	; (80010f8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800108c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001090:	6613      	str	r3, [r2, #96]	; 0x60
 8001092:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001096:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800109e:	4b16      	ldr	r3, [pc, #88]	; (80010f8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	4a15      	ldr	r2, [pc, #84]	; (80010f8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010a4:	f043 0310 	orr.w	r3, r3, #16
 80010a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010aa:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ae:	f003 0310 	and.w	r3, r3, #16
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80010b6:	f44f 7320 	mov.w	r3, #640	; 0x280
 80010ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80010d0:	2306      	movs	r3, #6
 80010d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010d6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010da:	4619      	mov	r1, r3
 80010dc:	4807      	ldr	r0, [pc, #28]	; (80010fc <HAL_DFSDM_ChannelMspInit+0xc4>)
 80010de:	f001 fce9 	bl	8002ab4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80010e2:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	3301      	adds	r3, #1
 80010e8:	4a02      	ldr	r2, [pc, #8]	; (80010f4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80010ea:	6013      	str	r3, [r2, #0]
  }

}
 80010ec:	bf00      	nop
 80010ee:	37b8      	adds	r7, #184	; 0xb8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200004d8 	.word	0x200004d8
 80010f8:	40021000 	.word	0x40021000
 80010fc:	48001000 	.word	0x48001000

08001100 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b0b0      	sub	sp, #192	; 0xc0
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001118:	f107 0318 	add.w	r3, r7, #24
 800111c:	2294      	movs	r2, #148	; 0x94
 800111e:	2100      	movs	r1, #0
 8001120:	4618      	mov	r0, r3
 8001122:	f005 fba5 	bl	8006870 <memset>
  if(hi2c->Instance==I2C1)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a42      	ldr	r2, [pc, #264]	; (8001234 <HAL_I2C_MspInit+0x134>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d13c      	bne.n	80011aa <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001130:	2340      	movs	r3, #64	; 0x40
 8001132:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001134:	2300      	movs	r3, #0
 8001136:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001138:	f107 0318 	add.w	r3, r7, #24
 800113c:	4618      	mov	r0, r3
 800113e:	f003 ff63 	bl	8005008 <HAL_RCCEx_PeriphCLKConfig>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001148:	f7ff ff0c 	bl	8000f64 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800114c:	4b3a      	ldr	r3, [pc, #232]	; (8001238 <HAL_I2C_MspInit+0x138>)
 800114e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001150:	4a39      	ldr	r2, [pc, #228]	; (8001238 <HAL_I2C_MspInit+0x138>)
 8001152:	f043 0302 	orr.w	r3, r3, #2
 8001156:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001158:	4b37      	ldr	r3, [pc, #220]	; (8001238 <HAL_I2C_MspInit+0x138>)
 800115a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	617b      	str	r3, [r7, #20]
 8001162:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001164:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001168:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800116c:	2312      	movs	r3, #18
 800116e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001172:	2301      	movs	r3, #1
 8001174:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001178:	2303      	movs	r3, #3
 800117a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800117e:	2304      	movs	r3, #4
 8001180:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001184:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001188:	4619      	mov	r1, r3
 800118a:	482c      	ldr	r0, [pc, #176]	; (800123c <HAL_I2C_MspInit+0x13c>)
 800118c:	f001 fc92 	bl	8002ab4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001190:	4b29      	ldr	r3, [pc, #164]	; (8001238 <HAL_I2C_MspInit+0x138>)
 8001192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001194:	4a28      	ldr	r2, [pc, #160]	; (8001238 <HAL_I2C_MspInit+0x138>)
 8001196:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800119a:	6593      	str	r3, [r2, #88]	; 0x58
 800119c:	4b26      	ldr	r3, [pc, #152]	; (8001238 <HAL_I2C_MspInit+0x138>)
 800119e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80011a8:	e040      	b.n	800122c <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a24      	ldr	r2, [pc, #144]	; (8001240 <HAL_I2C_MspInit+0x140>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d13b      	bne.n	800122c <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80011b4:	2380      	movs	r3, #128	; 0x80
 80011b6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80011b8:	2300      	movs	r3, #0
 80011ba:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011bc:	f107 0318 	add.w	r3, r7, #24
 80011c0:	4618      	mov	r0, r3
 80011c2:	f003 ff21 	bl	8005008 <HAL_RCCEx_PeriphCLKConfig>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 80011cc:	f7ff feca 	bl	8000f64 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d0:	4b19      	ldr	r3, [pc, #100]	; (8001238 <HAL_I2C_MspInit+0x138>)
 80011d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d4:	4a18      	ldr	r2, [pc, #96]	; (8001238 <HAL_I2C_MspInit+0x138>)
 80011d6:	f043 0302 	orr.w	r3, r3, #2
 80011da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011dc:	4b16      	ldr	r3, [pc, #88]	; (8001238 <HAL_I2C_MspInit+0x138>)
 80011de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80011e8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011f0:	2312      	movs	r3, #18
 80011f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f6:	2301      	movs	r3, #1
 80011f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fc:	2303      	movs	r3, #3
 80011fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001202:	2304      	movs	r3, #4
 8001204:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001208:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800120c:	4619      	mov	r1, r3
 800120e:	480b      	ldr	r0, [pc, #44]	; (800123c <HAL_I2C_MspInit+0x13c>)
 8001210:	f001 fc50 	bl	8002ab4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <HAL_I2C_MspInit+0x138>)
 8001216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001218:	4a07      	ldr	r2, [pc, #28]	; (8001238 <HAL_I2C_MspInit+0x138>)
 800121a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800121e:	6593      	str	r3, [r2, #88]	; 0x58
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <HAL_I2C_MspInit+0x138>)
 8001222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001224:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]
}
 800122c:	bf00      	nop
 800122e:	37c0      	adds	r7, #192	; 0xc0
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40005400 	.word	0x40005400
 8001238:	40021000 	.word	0x40021000
 800123c:	48000400 	.word	0x48000400
 8001240:	40005800 	.word	0x40005800

08001244 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b0b0      	sub	sp, #192	; 0xc0
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800125c:	f107 0318 	add.w	r3, r7, #24
 8001260:	2294      	movs	r2, #148	; 0x94
 8001262:	2100      	movs	r1, #0
 8001264:	4618      	mov	r0, r3
 8001266:	f005 fb03 	bl	8006870 <memset>
  if(hospi->Instance==OCTOSPI1)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a28      	ldr	r2, [pc, #160]	; (8001310 <HAL_OSPI_MspInit+0xcc>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d149      	bne.n	8001308 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001274:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001278:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800127a:	2300      	movs	r3, #0
 800127c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001280:	f107 0318 	add.w	r3, r7, #24
 8001284:	4618      	mov	r0, r3
 8001286:	f003 febf 	bl	8005008 <HAL_RCCEx_PeriphCLKConfig>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8001290:	f7ff fe68 	bl	8000f64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8001294:	4b1f      	ldr	r3, [pc, #124]	; (8001314 <HAL_OSPI_MspInit+0xd0>)
 8001296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001298:	4a1e      	ldr	r2, [pc, #120]	; (8001314 <HAL_OSPI_MspInit+0xd0>)
 800129a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800129e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a0:	4b1c      	ldr	r3, [pc, #112]	; (8001314 <HAL_OSPI_MspInit+0xd0>)
 80012a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012a8:	617b      	str	r3, [r7, #20]
 80012aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80012ac:	4b19      	ldr	r3, [pc, #100]	; (8001314 <HAL_OSPI_MspInit+0xd0>)
 80012ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012b0:	4a18      	ldr	r2, [pc, #96]	; (8001314 <HAL_OSPI_MspInit+0xd0>)
 80012b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b6:	6513      	str	r3, [r2, #80]	; 0x50
 80012b8:	4b16      	ldr	r3, [pc, #88]	; (8001314 <HAL_OSPI_MspInit+0xd0>)
 80012ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012c4:	4b13      	ldr	r3, [pc, #76]	; (8001314 <HAL_OSPI_MspInit+0xd0>)
 80012c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c8:	4a12      	ldr	r2, [pc, #72]	; (8001314 <HAL_OSPI_MspInit+0xd0>)
 80012ca:	f043 0310 	orr.w	r3, r3, #16
 80012ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d0:	4b10      	ldr	r3, [pc, #64]	; (8001314 <HAL_OSPI_MspInit+0xd0>)
 80012d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d4:	f003 0310 	and.w	r3, r3, #16
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80012dc:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80012e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f0:	2303      	movs	r3, #3
 80012f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80012f6:	230a      	movs	r3, #10
 80012f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012fc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001300:	4619      	mov	r1, r3
 8001302:	4805      	ldr	r0, [pc, #20]	; (8001318 <HAL_OSPI_MspInit+0xd4>)
 8001304:	f001 fbd6 	bl	8002ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8001308:	bf00      	nop
 800130a:	37c0      	adds	r7, #192	; 0xc0
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	a0001000 	.word	0xa0001000
 8001314:	40021000 	.word	0x40021000
 8001318:	48001000 	.word	0x48001000

0800131c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08c      	sub	sp, #48	; 0x30
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001324:	f107 031c 	add.w	r3, r7, #28
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a2f      	ldr	r2, [pc, #188]	; (80013f8 <HAL_SPI_MspInit+0xdc>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d129      	bne.n	8001392 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800133e:	4b2f      	ldr	r3, [pc, #188]	; (80013fc <HAL_SPI_MspInit+0xe0>)
 8001340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001342:	4a2e      	ldr	r2, [pc, #184]	; (80013fc <HAL_SPI_MspInit+0xe0>)
 8001344:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001348:	6613      	str	r3, [r2, #96]	; 0x60
 800134a:	4b2c      	ldr	r3, [pc, #176]	; (80013fc <HAL_SPI_MspInit+0xe0>)
 800134c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800134e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001352:	61bb      	str	r3, [r7, #24]
 8001354:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	4b29      	ldr	r3, [pc, #164]	; (80013fc <HAL_SPI_MspInit+0xe0>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135a:	4a28      	ldr	r2, [pc, #160]	; (80013fc <HAL_SPI_MspInit+0xe0>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001362:	4b26      	ldr	r3, [pc, #152]	; (80013fc <HAL_SPI_MspInit+0xe0>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	617b      	str	r3, [r7, #20]
 800136c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800136e:	23e0      	movs	r3, #224	; 0xe0
 8001370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	2302      	movs	r3, #2
 8001374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137a:	2303      	movs	r3, #3
 800137c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800137e:	2305      	movs	r3, #5
 8001380:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001382:	f107 031c 	add.w	r3, r7, #28
 8001386:	4619      	mov	r1, r3
 8001388:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138c:	f001 fb92 	bl	8002ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001390:	e02d      	b.n	80013ee <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a1a      	ldr	r2, [pc, #104]	; (8001400 <HAL_SPI_MspInit+0xe4>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d128      	bne.n	80013ee <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800139c:	4b17      	ldr	r3, [pc, #92]	; (80013fc <HAL_SPI_MspInit+0xe0>)
 800139e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a0:	4a16      	ldr	r2, [pc, #88]	; (80013fc <HAL_SPI_MspInit+0xe0>)
 80013a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013a6:	6593      	str	r3, [r2, #88]	; 0x58
 80013a8:	4b14      	ldr	r3, [pc, #80]	; (80013fc <HAL_SPI_MspInit+0xe0>)
 80013aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <HAL_SPI_MspInit+0xe0>)
 80013b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b8:	4a10      	ldr	r2, [pc, #64]	; (80013fc <HAL_SPI_MspInit+0xe0>)
 80013ba:	f043 0304 	orr.w	r3, r3, #4
 80013be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c0:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <HAL_SPI_MspInit+0xe0>)
 80013c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c4:	f003 0304 	and.w	r3, r3, #4
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80013cc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80013d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d2:	2302      	movs	r3, #2
 80013d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013da:	2303      	movs	r3, #3
 80013dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013de:	2306      	movs	r3, #6
 80013e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e2:	f107 031c 	add.w	r3, r7, #28
 80013e6:	4619      	mov	r1, r3
 80013e8:	4806      	ldr	r0, [pc, #24]	; (8001404 <HAL_SPI_MspInit+0xe8>)
 80013ea:	f001 fb63 	bl	8002ab4 <HAL_GPIO_Init>
}
 80013ee:	bf00      	nop
 80013f0:	3730      	adds	r7, #48	; 0x30
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40013000 	.word	0x40013000
 80013fc:	40021000 	.word	0x40021000
 8001400:	40003c00 	.word	0x40003c00
 8001404:	48000800 	.word	0x48000800

08001408 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b0b4      	sub	sp, #208	; 0xd0
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001420:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001424:	2294      	movs	r2, #148	; 0x94
 8001426:	2100      	movs	r1, #0
 8001428:	4618      	mov	r0, r3
 800142a:	f005 fa21 	bl	8006870 <memset>
  if(huart->Instance==UART4)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a83      	ldr	r2, [pc, #524]	; (8001640 <HAL_UART_MspInit+0x238>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d13c      	bne.n	80014b2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001438:	2308      	movs	r3, #8
 800143a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800143c:	2300      	movs	r3, #0
 800143e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001440:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001444:	4618      	mov	r0, r3
 8001446:	f003 fddf 	bl	8005008 <HAL_RCCEx_PeriphCLKConfig>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001450:	f7ff fd88 	bl	8000f64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001454:	4b7b      	ldr	r3, [pc, #492]	; (8001644 <HAL_UART_MspInit+0x23c>)
 8001456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001458:	4a7a      	ldr	r2, [pc, #488]	; (8001644 <HAL_UART_MspInit+0x23c>)
 800145a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800145e:	6593      	str	r3, [r2, #88]	; 0x58
 8001460:	4b78      	ldr	r3, [pc, #480]	; (8001644 <HAL_UART_MspInit+0x23c>)
 8001462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001464:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146c:	4b75      	ldr	r3, [pc, #468]	; (8001644 <HAL_UART_MspInit+0x23c>)
 800146e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001470:	4a74      	ldr	r2, [pc, #464]	; (8001644 <HAL_UART_MspInit+0x23c>)
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001478:	4b72      	ldr	r3, [pc, #456]	; (8001644 <HAL_UART_MspInit+0x23c>)
 800147a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	623b      	str	r3, [r7, #32]
 8001482:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001484:	2303      	movs	r3, #3
 8001486:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001496:	2303      	movs	r3, #3
 8001498:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800149c:	2308      	movs	r3, #8
 800149e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80014a6:	4619      	mov	r1, r3
 80014a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ac:	f001 fb02 	bl	8002ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014b0:	e0c2      	b.n	8001638 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART1)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a64      	ldr	r2, [pc, #400]	; (8001648 <HAL_UART_MspInit+0x240>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d13b      	bne.n	8001534 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014bc:	2301      	movs	r3, #1
 80014be:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014c0:	2300      	movs	r3, #0
 80014c2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014c8:	4618      	mov	r0, r3
 80014ca:	f003 fd9d 	bl	8005008 <HAL_RCCEx_PeriphCLKConfig>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80014d4:	f7ff fd46 	bl	8000f64 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80014d8:	4b5a      	ldr	r3, [pc, #360]	; (8001644 <HAL_UART_MspInit+0x23c>)
 80014da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014dc:	4a59      	ldr	r2, [pc, #356]	; (8001644 <HAL_UART_MspInit+0x23c>)
 80014de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e2:	6613      	str	r3, [r2, #96]	; 0x60
 80014e4:	4b57      	ldr	r3, [pc, #348]	; (8001644 <HAL_UART_MspInit+0x23c>)
 80014e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ec:	61fb      	str	r3, [r7, #28]
 80014ee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f0:	4b54      	ldr	r3, [pc, #336]	; (8001644 <HAL_UART_MspInit+0x23c>)
 80014f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f4:	4a53      	ldr	r2, [pc, #332]	; (8001644 <HAL_UART_MspInit+0x23c>)
 80014f6:	f043 0302 	orr.w	r3, r3, #2
 80014fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014fc:	4b51      	ldr	r3, [pc, #324]	; (8001644 <HAL_UART_MspInit+0x23c>)
 80014fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	61bb      	str	r3, [r7, #24]
 8001506:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001508:	23c0      	movs	r3, #192	; 0xc0
 800150a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	2302      	movs	r3, #2
 8001510:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151a:	2303      	movs	r3, #3
 800151c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001520:	2307      	movs	r3, #7
 8001522:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001526:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800152a:	4619      	mov	r1, r3
 800152c:	4847      	ldr	r0, [pc, #284]	; (800164c <HAL_UART_MspInit+0x244>)
 800152e:	f001 fac1 	bl	8002ab4 <HAL_GPIO_Init>
}
 8001532:	e081      	b.n	8001638 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a45      	ldr	r2, [pc, #276]	; (8001650 <HAL_UART_MspInit+0x248>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d13b      	bne.n	80015b6 <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800153e:	2302      	movs	r3, #2
 8001540:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001542:	2300      	movs	r3, #0
 8001544:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001546:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800154a:	4618      	mov	r0, r3
 800154c:	f003 fd5c 	bl	8005008 <HAL_RCCEx_PeriphCLKConfig>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <HAL_UART_MspInit+0x152>
      Error_Handler();
 8001556:	f7ff fd05 	bl	8000f64 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800155a:	4b3a      	ldr	r3, [pc, #232]	; (8001644 <HAL_UART_MspInit+0x23c>)
 800155c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155e:	4a39      	ldr	r2, [pc, #228]	; (8001644 <HAL_UART_MspInit+0x23c>)
 8001560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001564:	6593      	str	r3, [r2, #88]	; 0x58
 8001566:	4b37      	ldr	r3, [pc, #220]	; (8001644 <HAL_UART_MspInit+0x23c>)
 8001568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001572:	4b34      	ldr	r3, [pc, #208]	; (8001644 <HAL_UART_MspInit+0x23c>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001576:	4a33      	ldr	r2, [pc, #204]	; (8001644 <HAL_UART_MspInit+0x23c>)
 8001578:	f043 0308 	orr.w	r3, r3, #8
 800157c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800157e:	4b31      	ldr	r3, [pc, #196]	; (8001644 <HAL_UART_MspInit+0x23c>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001582:	f003 0308 	and.w	r3, r3, #8
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800158a:	2378      	movs	r3, #120	; 0x78
 800158c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159c:	2303      	movs	r3, #3
 800159e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015a2:	2307      	movs	r3, #7
 80015a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015a8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80015ac:	4619      	mov	r1, r3
 80015ae:	4829      	ldr	r0, [pc, #164]	; (8001654 <HAL_UART_MspInit+0x24c>)
 80015b0:	f001 fa80 	bl	8002ab4 <HAL_GPIO_Init>
}
 80015b4:	e040      	b.n	8001638 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART3)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a27      	ldr	r2, [pc, #156]	; (8001658 <HAL_UART_MspInit+0x250>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d13b      	bne.n	8001638 <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015c0:	2304      	movs	r3, #4
 80015c2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80015c4:	2300      	movs	r3, #0
 80015c6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015cc:	4618      	mov	r0, r3
 80015ce:	f003 fd1b 	bl	8005008 <HAL_RCCEx_PeriphCLKConfig>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 80015d8:	f7ff fcc4 	bl	8000f64 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015dc:	4b19      	ldr	r3, [pc, #100]	; (8001644 <HAL_UART_MspInit+0x23c>)
 80015de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e0:	4a18      	ldr	r2, [pc, #96]	; (8001644 <HAL_UART_MspInit+0x23c>)
 80015e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015e6:	6593      	str	r3, [r2, #88]	; 0x58
 80015e8:	4b16      	ldr	r3, [pc, #88]	; (8001644 <HAL_UART_MspInit+0x23c>)
 80015ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015f4:	4b13      	ldr	r3, [pc, #76]	; (8001644 <HAL_UART_MspInit+0x23c>)
 80015f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f8:	4a12      	ldr	r2, [pc, #72]	; (8001644 <HAL_UART_MspInit+0x23c>)
 80015fa:	f043 0308 	orr.w	r3, r3, #8
 80015fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001600:	4b10      	ldr	r3, [pc, #64]	; (8001644 <HAL_UART_MspInit+0x23c>)
 8001602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001604:	f003 0308 	and.w	r3, r3, #8
 8001608:	60bb      	str	r3, [r7, #8]
 800160a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800160c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001610:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001614:	2302      	movs	r3, #2
 8001616:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001620:	2303      	movs	r3, #3
 8001622:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001626:	2307      	movs	r3, #7
 8001628:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800162c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001630:	4619      	mov	r1, r3
 8001632:	4808      	ldr	r0, [pc, #32]	; (8001654 <HAL_UART_MspInit+0x24c>)
 8001634:	f001 fa3e 	bl	8002ab4 <HAL_GPIO_Init>
}
 8001638:	bf00      	nop
 800163a:	37d0      	adds	r7, #208	; 0xd0
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40004c00 	.word	0x40004c00
 8001644:	40021000 	.word	0x40021000
 8001648:	40013800 	.word	0x40013800
 800164c:	48000400 	.word	0x48000400
 8001650:	40004400 	.word	0x40004400
 8001654:	48000c00 	.word	0x48000c00
 8001658:	40004800 	.word	0x40004800

0800165c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001660:	e7fe      	b.n	8001660 <NMI_Handler+0x4>

08001662 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001666:	e7fe      	b.n	8001666 <HardFault_Handler+0x4>

08001668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800166c:	e7fe      	b.n	800166c <MemManage_Handler+0x4>

0800166e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001672:	e7fe      	b.n	8001672 <BusFault_Handler+0x4>

08001674 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001678:	e7fe      	b.n	8001678 <UsageFault_Handler+0x4>

0800167a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a8:	f000 f8c0 	bl	800182c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80016b4:	2020      	movs	r0, #32
 80016b6:	f001 fba7 	bl	8002e08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80016ba:	2040      	movs	r0, #64	; 0x40
 80016bc:	f001 fba4 	bl	8002e08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80016c0:	2080      	movs	r0, #128	; 0x80
 80016c2:	f001 fba1 	bl	8002e08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80016c6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80016ca:	f001 fb9d 	bl	8002e08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 80016d6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80016da:	f001 fb95 	bl	8002e08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80016de:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80016e2:	f001 fb91 	bl	8002e08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 80016e6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80016ea:	f001 fb8d 	bl	8002e08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80016ee:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016f2:	f001 fb89 	bl	8002e08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80016f6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80016fa:	f001 fb85 	bl	8002e08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80016fe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001702:	f001 fb81 	bl	8002e08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <SystemInit+0x20>)
 8001712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001716:	4a05      	ldr	r2, [pc, #20]	; (800172c <SystemInit+0x20>)
 8001718:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800171c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001730:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001768 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001734:	f7ff ffea 	bl	800170c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001738:	480c      	ldr	r0, [pc, #48]	; (800176c <LoopForever+0x6>)
  ldr r1, =_edata
 800173a:	490d      	ldr	r1, [pc, #52]	; (8001770 <LoopForever+0xa>)
  ldr r2, =_sidata
 800173c:	4a0d      	ldr	r2, [pc, #52]	; (8001774 <LoopForever+0xe>)
  movs r3, #0
 800173e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001740:	e002      	b.n	8001748 <LoopCopyDataInit>

08001742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001746:	3304      	adds	r3, #4

08001748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800174a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800174c:	d3f9      	bcc.n	8001742 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800174e:	4a0a      	ldr	r2, [pc, #40]	; (8001778 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001750:	4c0a      	ldr	r4, [pc, #40]	; (800177c <LoopForever+0x16>)
  movs r3, #0
 8001752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001754:	e001      	b.n	800175a <LoopFillZerobss>

08001756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001758:	3204      	adds	r2, #4

0800175a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800175a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800175c:	d3fb      	bcc.n	8001756 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800175e:	f005 f88f 	bl	8006880 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001762:	f7fe fec9 	bl	80004f8 <main>

08001766 <LoopForever>:

LoopForever:
    b LoopForever
 8001766:	e7fe      	b.n	8001766 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001768:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800176c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001770:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001774:	08006968 	.word	0x08006968
  ldr r2, =_sbss
 8001778:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800177c:	20000504 	.word	0x20000504

08001780 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001780:	e7fe      	b.n	8001780 <ADC1_IRQHandler>

08001782 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001788:	2300      	movs	r3, #0
 800178a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800178c:	2003      	movs	r0, #3
 800178e:	f001 f843 	bl	8002818 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001792:	2000      	movs	r0, #0
 8001794:	f000 f80e 	bl	80017b4 <HAL_InitTick>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d002      	beq.n	80017a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	71fb      	strb	r3, [r7, #7]
 80017a2:	e001      	b.n	80017a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017a4:	f7ff fbe4 	bl	8000f70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017a8:	79fb      	ldrb	r3, [r7, #7]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017bc:	2300      	movs	r3, #0
 80017be:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80017c0:	4b17      	ldr	r3, [pc, #92]	; (8001820 <HAL_InitTick+0x6c>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d023      	beq.n	8001810 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80017c8:	4b16      	ldr	r3, [pc, #88]	; (8001824 <HAL_InitTick+0x70>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b14      	ldr	r3, [pc, #80]	; (8001820 <HAL_InitTick+0x6c>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	4619      	mov	r1, r3
 80017d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017da:	fbb2 f3f3 	udiv	r3, r2, r3
 80017de:	4618      	mov	r0, r3
 80017e0:	f001 f84f 	bl	8002882 <HAL_SYSTICK_Config>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d10f      	bne.n	800180a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b0f      	cmp	r3, #15
 80017ee:	d809      	bhi.n	8001804 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f0:	2200      	movs	r2, #0
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	f04f 30ff 	mov.w	r0, #4294967295
 80017f8:	f001 f819 	bl	800282e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017fc:	4a0a      	ldr	r2, [pc, #40]	; (8001828 <HAL_InitTick+0x74>)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6013      	str	r3, [r2, #0]
 8001802:	e007      	b.n	8001814 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	73fb      	strb	r3, [r7, #15]
 8001808:	e004      	b.n	8001814 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	73fb      	strb	r3, [r7, #15]
 800180e:	e001      	b.n	8001814 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001814:	7bfb      	ldrb	r3, [r7, #15]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000008 	.word	0x20000008
 8001824:	20000000 	.word	0x20000000
 8001828:	20000004 	.word	0x20000004

0800182c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_IncTick+0x20>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	461a      	mov	r2, r3
 8001836:	4b06      	ldr	r3, [pc, #24]	; (8001850 <HAL_IncTick+0x24>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4413      	add	r3, r2
 800183c:	4a04      	ldr	r2, [pc, #16]	; (8001850 <HAL_IncTick+0x24>)
 800183e:	6013      	str	r3, [r2, #0]
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	20000008 	.word	0x20000008
 8001850:	200004dc 	.word	0x200004dc

08001854 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return uwTick;
 8001858:	4b03      	ldr	r3, [pc, #12]	; (8001868 <HAL_GetTick+0x14>)
 800185a:	681b      	ldr	r3, [r3, #0]
}
 800185c:	4618      	mov	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	200004dc 	.word	0x200004dc

0800186c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001874:	f7ff ffee 	bl	8001854 <HAL_GetTick>
 8001878:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001884:	d005      	beq.n	8001892 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001886:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <HAL_Delay+0x44>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	461a      	mov	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4413      	add	r3, r2
 8001890:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001892:	bf00      	nop
 8001894:	f7ff ffde 	bl	8001854 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d8f7      	bhi.n	8001894 <HAL_Delay+0x28>
  {
  }
}
 80018a4:	bf00      	nop
 80018a6:	bf00      	nop
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000008 	.word	0x20000008

080018b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	431a      	orrs	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	609a      	str	r2, [r3, #8]
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
 80018e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	431a      	orrs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	609a      	str	r2, [r3, #8]
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001910:	4618      	mov	r0, r3
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800191c:	b480      	push	{r7}
 800191e:	b087      	sub	sp, #28
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
 8001928:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	3360      	adds	r3, #96	; 0x60
 800192e:	461a      	mov	r2, r3
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <LL_ADC_SetOffset+0x44>)
 800193e:	4013      	ands	r3, r2
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	430a      	orrs	r2, r1
 800194a:	4313      	orrs	r3, r2
 800194c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001954:	bf00      	nop
 8001956:	371c      	adds	r7, #28
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	03fff000 	.word	0x03fff000

08001964 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	3360      	adds	r3, #96	; 0x60
 8001972:	461a      	mov	r2, r3
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001984:	4618      	mov	r0, r3
 8001986:	3714      	adds	r7, #20
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001990:	b480      	push	{r7}
 8001992:	b087      	sub	sp, #28
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	3360      	adds	r3, #96	; 0x60
 80019a0:	461a      	mov	r2, r3
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	431a      	orrs	r2, r3
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80019ba:	bf00      	nop
 80019bc:	371c      	adds	r7, #28
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
 80019ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	695b      	ldr	r3, [r3, #20]
 80019d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	431a      	orrs	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	615a      	str	r2, [r3, #20]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b087      	sub	sp, #28
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	3330      	adds	r3, #48	; 0x30
 80019fc:	461a      	mov	r2, r3
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	0a1b      	lsrs	r3, r3, #8
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	f003 030c 	and.w	r3, r3, #12
 8001a08:	4413      	add	r3, r2
 8001a0a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	f003 031f 	and.w	r3, r3, #31
 8001a16:	211f      	movs	r1, #31
 8001a18:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	401a      	ands	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	0e9b      	lsrs	r3, r3, #26
 8001a24:	f003 011f 	and.w	r1, r3, #31
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	f003 031f 	and.w	r3, r3, #31
 8001a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a32:	431a      	orrs	r2, r3
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a38:	bf00      	nop
 8001a3a:	371c      	adds	r7, #28
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b087      	sub	sp, #28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	3314      	adds	r3, #20
 8001a54:	461a      	mov	r2, r3
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	0e5b      	lsrs	r3, r3, #25
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	4413      	add	r3, r2
 8001a62:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	0d1b      	lsrs	r3, r3, #20
 8001a6c:	f003 031f 	and.w	r3, r3, #31
 8001a70:	2107      	movs	r1, #7
 8001a72:	fa01 f303 	lsl.w	r3, r1, r3
 8001a76:	43db      	mvns	r3, r3
 8001a78:	401a      	ands	r2, r3
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	0d1b      	lsrs	r3, r3, #20
 8001a7e:	f003 031f 	and.w	r3, r3, #31
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	fa01 f303 	lsl.w	r3, r1, r3
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a8e:	bf00      	nop
 8001a90:	371c      	adds	r7, #28
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
	...

08001a9c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f003 0318 	and.w	r3, r3, #24
 8001abe:	4908      	ldr	r1, [pc, #32]	; (8001ae0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ac0:	40d9      	lsrs	r1, r3
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	400b      	ands	r3, r1
 8001ac6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aca:	431a      	orrs	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001ad2:	bf00      	nop
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	0007ffff 	.word	0x0007ffff

08001ae4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001af4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	6093      	str	r3, [r2, #8]
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b1c:	d101      	bne.n	8001b22 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e000      	b.n	8001b24 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001b40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b44:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b6c:	d101      	bne.n	8001b72 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d101      	bne.n	8001b98 <LL_ADC_IsEnabled+0x18>
 8001b94:	2301      	movs	r3, #1
 8001b96:	e000      	b.n	8001b9a <LL_ADC_IsEnabled+0x1a>
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 0304 	and.w	r3, r3, #4
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	d101      	bne.n	8001bbe <LL_ADC_REG_IsConversionOngoing+0x18>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e000      	b.n	8001bc0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 0308 	and.w	r3, r3, #8
 8001bdc:	2b08      	cmp	r3, #8
 8001bde:	d101      	bne.n	8001be4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001be0:	2301      	movs	r3, #1
 8001be2:	e000      	b.n	8001be6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
	...

08001bf4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b088      	sub	sp, #32
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e129      	b.n	8001e62 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d109      	bne.n	8001c30 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7ff f9cb 	bl	8000fb8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff ff67 	bl	8001b08 <LL_ADC_IsDeepPowerDownEnabled>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d004      	beq.n	8001c4a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff ff4d 	bl	8001ae4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff ff82 	bl	8001b58 <LL_ADC_IsInternalRegulatorEnabled>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d115      	bne.n	8001c86 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff ff66 	bl	8001b30 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c64:	4b81      	ldr	r3, [pc, #516]	; (8001e6c <HAL_ADC_Init+0x278>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	099b      	lsrs	r3, r3, #6
 8001c6a:	4a81      	ldr	r2, [pc, #516]	; (8001e70 <HAL_ADC_Init+0x27c>)
 8001c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c70:	099b      	lsrs	r3, r3, #6
 8001c72:	3301      	adds	r3, #1
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c78:	e002      	b.n	8001c80 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f9      	bne.n	8001c7a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff ff64 	bl	8001b58 <LL_ADC_IsInternalRegulatorEnabled>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10d      	bne.n	8001cb2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9a:	f043 0210 	orr.w	r2, r3, #16
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca6:	f043 0201 	orr.w	r2, r3, #1
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff ff75 	bl	8001ba6 <LL_ADC_REG_IsConversionOngoing>
 8001cbc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc2:	f003 0310 	and.w	r3, r3, #16
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f040 80c2 	bne.w	8001e50 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f040 80be 	bne.w	8001e50 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001cdc:	f043 0202 	orr.w	r2, r3, #2
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff ff49 	bl	8001b80 <LL_ADC_IsEnabled>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d10b      	bne.n	8001d0c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cf4:	485f      	ldr	r0, [pc, #380]	; (8001e74 <HAL_ADC_Init+0x280>)
 8001cf6:	f7ff ff43 	bl	8001b80 <LL_ADC_IsEnabled>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d105      	bne.n	8001d0c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	4619      	mov	r1, r3
 8001d06:	485c      	ldr	r0, [pc, #368]	; (8001e78 <HAL_ADC_Init+0x284>)
 8001d08:	f7ff fdd4 	bl	80018b4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	7e5b      	ldrb	r3, [r3, #25]
 8001d10:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d16:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001d1c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001d22:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d2a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d106      	bne.n	8001d48 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	045b      	lsls	r3, r3, #17
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d009      	beq.n	8001d64 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d54:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68da      	ldr	r2, [r3, #12]
 8001d6a:	4b44      	ldr	r3, [pc, #272]	; (8001e7c <HAL_ADC_Init+0x288>)
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	6812      	ldr	r2, [r2, #0]
 8001d72:	69b9      	ldr	r1, [r7, #24]
 8001d74:	430b      	orrs	r3, r1
 8001d76:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff ff25 	bl	8001bcc <LL_ADC_INJ_IsConversionOngoing>
 8001d82:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d140      	bne.n	8001e0c <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d13d      	bne.n	8001e0c <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	7e1b      	ldrb	r3, [r3, #24]
 8001d98:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d9a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001da2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001da4:	4313      	orrs	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001db2:	f023 0306 	bic.w	r3, r3, #6
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6812      	ldr	r2, [r2, #0]
 8001dba:	69b9      	ldr	r1, [r7, #24]
 8001dbc:	430b      	orrs	r3, r1
 8001dbe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d118      	bne.n	8001dfc <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001dd4:	f023 0304 	bic.w	r3, r3, #4
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001de0:	4311      	orrs	r1, r2
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001de6:	4311      	orrs	r1, r2
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001dec:	430a      	orrs	r2, r1
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f042 0201 	orr.w	r2, r2, #1
 8001df8:	611a      	str	r2, [r3, #16]
 8001dfa:	e007      	b.n	8001e0c <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	691a      	ldr	r2, [r3, #16]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 0201 	bic.w	r2, r2, #1
 8001e0a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d10c      	bne.n	8001e2e <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	f023 010f 	bic.w	r1, r3, #15
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	1e5a      	subs	r2, r3, #1
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	631a      	str	r2, [r3, #48]	; 0x30
 8001e2c:	e007      	b.n	8001e3e <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 020f 	bic.w	r2, r2, #15
 8001e3c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e42:	f023 0303 	bic.w	r3, r3, #3
 8001e46:	f043 0201 	orr.w	r2, r3, #1
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	659a      	str	r2, [r3, #88]	; 0x58
 8001e4e:	e007      	b.n	8001e60 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e54:	f043 0210 	orr.w	r2, r3, #16
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e60:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3720      	adds	r7, #32
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20000000 	.word	0x20000000
 8001e70:	053e2d63 	.word	0x053e2d63
 8001e74:	50040000 	.word	0x50040000
 8001e78:	50040300 	.word	0x50040300
 8001e7c:	fff0c007 	.word	0xfff0c007

08001e80 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b0b6      	sub	sp, #216	; 0xd8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d101      	bne.n	8001ea2 <HAL_ADC_ConfigChannel+0x22>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e3d5      	b.n	800264e <HAL_ADC_ConfigChannel+0x7ce>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff fe79 	bl	8001ba6 <LL_ADC_REG_IsConversionOngoing>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f040 83ba 	bne.w	8002630 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b05      	cmp	r3, #5
 8001eca:	d824      	bhi.n	8001f16 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	3b02      	subs	r3, #2
 8001ed2:	2b03      	cmp	r3, #3
 8001ed4:	d81b      	bhi.n	8001f0e <HAL_ADC_ConfigChannel+0x8e>
 8001ed6:	a201      	add	r2, pc, #4	; (adr r2, 8001edc <HAL_ADC_ConfigChannel+0x5c>)
 8001ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001edc:	08001eed 	.word	0x08001eed
 8001ee0:	08001ef5 	.word	0x08001ef5
 8001ee4:	08001efd 	.word	0x08001efd
 8001ee8:	08001f05 	.word	0x08001f05
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001eec:	230c      	movs	r3, #12
 8001eee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001ef2:	e010      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001ef4:	2312      	movs	r3, #18
 8001ef6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001efa:	e00c      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001efc:	2318      	movs	r3, #24
 8001efe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001f02:	e008      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001f04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001f0c:	e003      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001f0e:	2306      	movs	r3, #6
 8001f10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001f14:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6818      	ldr	r0, [r3, #0]
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001f24:	f7ff fd62 	bl	80019ec <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff fe3a 	bl	8001ba6 <LL_ADC_REG_IsConversionOngoing>
 8001f32:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff fe46 	bl	8001bcc <LL_ADC_INJ_IsConversionOngoing>
 8001f40:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f040 81bf 	bne.w	80022cc <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f040 81ba 	bne.w	80022cc <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f60:	d10f      	bne.n	8001f82 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6818      	ldr	r0, [r3, #0]
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f7ff fd69 	bl	8001a44 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff fd23 	bl	80019c6 <LL_ADC_SetSamplingTimeCommonConfig>
 8001f80:	e00e      	b.n	8001fa0 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6818      	ldr	r0, [r3, #0]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	6819      	ldr	r1, [r3, #0]
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	f7ff fd58 	bl	8001a44 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2100      	movs	r1, #0
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff fd13 	bl	80019c6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	695a      	ldr	r2, [r3, #20]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	08db      	lsrs	r3, r3, #3
 8001fac:	f003 0303 	and.w	r3, r3, #3
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	d00a      	beq.n	8001fd8 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6818      	ldr	r0, [r3, #0]
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	6919      	ldr	r1, [r3, #16]
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fd2:	f7ff fca3 	bl	800191c <LL_ADC_SetOffset>
 8001fd6:	e179      	b.n	80022cc <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff fcc0 	bl	8001964 <LL_ADC_GetOffsetChannel>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d10a      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x184>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff fcb5 	bl	8001964 <LL_ADC_GetOffsetChannel>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	0e9b      	lsrs	r3, r3, #26
 8001ffe:	f003 021f 	and.w	r2, r3, #31
 8002002:	e01e      	b.n	8002042 <HAL_ADC_ConfigChannel+0x1c2>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2100      	movs	r1, #0
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff fcaa 	bl	8001964 <LL_ADC_GetOffsetChannel>
 8002010:	4603      	mov	r3, r0
 8002012:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002016:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800201a:	fa93 f3a3 	rbit	r3, r3
 800201e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002022:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002026:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800202a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002032:	2320      	movs	r3, #32
 8002034:	e004      	b.n	8002040 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002036:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800203a:	fab3 f383 	clz	r3, r3
 800203e:	b2db      	uxtb	r3, r3
 8002040:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800204a:	2b00      	cmp	r3, #0
 800204c:	d105      	bne.n	800205a <HAL_ADC_ConfigChannel+0x1da>
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	0e9b      	lsrs	r3, r3, #26
 8002054:	f003 031f 	and.w	r3, r3, #31
 8002058:	e018      	b.n	800208c <HAL_ADC_ConfigChannel+0x20c>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002062:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002066:	fa93 f3a3 	rbit	r3, r3
 800206a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 800206e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002072:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002076:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800207e:	2320      	movs	r3, #32
 8002080:	e004      	b.n	800208c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002082:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002086:	fab3 f383 	clz	r3, r3
 800208a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800208c:	429a      	cmp	r2, r3
 800208e:	d106      	bne.n	800209e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2200      	movs	r2, #0
 8002096:	2100      	movs	r1, #0
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff fc79 	bl	8001990 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2101      	movs	r1, #1
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff fc5d 	bl	8001964 <LL_ADC_GetOffsetChannel>
 80020aa:	4603      	mov	r3, r0
 80020ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d10a      	bne.n	80020ca <HAL_ADC_ConfigChannel+0x24a>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2101      	movs	r1, #1
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff fc52 	bl	8001964 <LL_ADC_GetOffsetChannel>
 80020c0:	4603      	mov	r3, r0
 80020c2:	0e9b      	lsrs	r3, r3, #26
 80020c4:	f003 021f 	and.w	r2, r3, #31
 80020c8:	e01e      	b.n	8002108 <HAL_ADC_ConfigChannel+0x288>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2101      	movs	r1, #1
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff fc47 	bl	8001964 <LL_ADC_GetOffsetChannel>
 80020d6:	4603      	mov	r3, r0
 80020d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80020e0:	fa93 f3a3 	rbit	r3, r3
 80020e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80020e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80020f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d101      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80020f8:	2320      	movs	r3, #32
 80020fa:	e004      	b.n	8002106 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80020fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002100:	fab3 f383 	clz	r3, r3
 8002104:	b2db      	uxtb	r3, r3
 8002106:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002110:	2b00      	cmp	r3, #0
 8002112:	d105      	bne.n	8002120 <HAL_ADC_ConfigChannel+0x2a0>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	0e9b      	lsrs	r3, r3, #26
 800211a:	f003 031f 	and.w	r3, r3, #31
 800211e:	e018      	b.n	8002152 <HAL_ADC_ConfigChannel+0x2d2>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002128:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800212c:	fa93 f3a3 	rbit	r3, r3
 8002130:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002134:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002138:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800213c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002144:	2320      	movs	r3, #32
 8002146:	e004      	b.n	8002152 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002148:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800214c:	fab3 f383 	clz	r3, r3
 8002150:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002152:	429a      	cmp	r2, r3
 8002154:	d106      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2200      	movs	r2, #0
 800215c:	2101      	movs	r1, #1
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff fc16 	bl	8001990 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2102      	movs	r1, #2
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff fbfa 	bl	8001964 <LL_ADC_GetOffsetChannel>
 8002170:	4603      	mov	r3, r0
 8002172:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10a      	bne.n	8002190 <HAL_ADC_ConfigChannel+0x310>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2102      	movs	r1, #2
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff fbef 	bl	8001964 <LL_ADC_GetOffsetChannel>
 8002186:	4603      	mov	r3, r0
 8002188:	0e9b      	lsrs	r3, r3, #26
 800218a:	f003 021f 	and.w	r2, r3, #31
 800218e:	e01e      	b.n	80021ce <HAL_ADC_ConfigChannel+0x34e>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2102      	movs	r1, #2
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff fbe4 	bl	8001964 <LL_ADC_GetOffsetChannel>
 800219c:	4603      	mov	r3, r0
 800219e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021a6:	fa93 f3a3 	rbit	r3, r3
 80021aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80021ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80021b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80021be:	2320      	movs	r3, #32
 80021c0:	e004      	b.n	80021cc <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80021c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021c6:	fab3 f383 	clz	r3, r3
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d105      	bne.n	80021e6 <HAL_ADC_ConfigChannel+0x366>
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	0e9b      	lsrs	r3, r3, #26
 80021e0:	f003 031f 	and.w	r3, r3, #31
 80021e4:	e014      	b.n	8002210 <HAL_ADC_ConfigChannel+0x390>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021ee:	fa93 f3a3 	rbit	r3, r3
 80021f2:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80021f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80021fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002202:	2320      	movs	r3, #32
 8002204:	e004      	b.n	8002210 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002206:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800220a:	fab3 f383 	clz	r3, r3
 800220e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002210:	429a      	cmp	r2, r3
 8002212:	d106      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2200      	movs	r2, #0
 800221a:	2102      	movs	r1, #2
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff fbb7 	bl	8001990 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2103      	movs	r1, #3
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff fb9b 	bl	8001964 <LL_ADC_GetOffsetChannel>
 800222e:	4603      	mov	r3, r0
 8002230:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10a      	bne.n	800224e <HAL_ADC_ConfigChannel+0x3ce>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2103      	movs	r1, #3
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff fb90 	bl	8001964 <LL_ADC_GetOffsetChannel>
 8002244:	4603      	mov	r3, r0
 8002246:	0e9b      	lsrs	r3, r3, #26
 8002248:	f003 021f 	and.w	r2, r3, #31
 800224c:	e017      	b.n	800227e <HAL_ADC_ConfigChannel+0x3fe>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2103      	movs	r1, #3
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff fb85 	bl	8001964 <LL_ADC_GetOffsetChannel>
 800225a:	4603      	mov	r3, r0
 800225c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002260:	fa93 f3a3 	rbit	r3, r3
 8002264:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002268:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800226a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002270:	2320      	movs	r3, #32
 8002272:	e003      	b.n	800227c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002274:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002276:	fab3 f383 	clz	r3, r3
 800227a:	b2db      	uxtb	r3, r3
 800227c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002286:	2b00      	cmp	r3, #0
 8002288:	d105      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x416>
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	0e9b      	lsrs	r3, r3, #26
 8002290:	f003 031f 	and.w	r3, r3, #31
 8002294:	e011      	b.n	80022ba <HAL_ADC_ConfigChannel+0x43a>
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800229e:	fa93 f3a3 	rbit	r3, r3
 80022a2:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80022a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022a6:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80022a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80022ae:	2320      	movs	r3, #32
 80022b0:	e003      	b.n	80022ba <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80022b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022b4:	fab3 f383 	clz	r3, r3
 80022b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d106      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2200      	movs	r2, #0
 80022c4:	2103      	movs	r1, #3
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff fb62 	bl	8001990 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff fc55 	bl	8001b80 <LL_ADC_IsEnabled>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f040 813f 	bne.w	800255c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6818      	ldr	r0, [r3, #0]
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	6819      	ldr	r1, [r3, #0]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	461a      	mov	r2, r3
 80022ec:	f7ff fbd6 	bl	8001a9c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	4a8e      	ldr	r2, [pc, #568]	; (8002530 <HAL_ADC_ConfigChannel+0x6b0>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	f040 8130 	bne.w	800255c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10b      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x4a4>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	0e9b      	lsrs	r3, r3, #26
 8002312:	3301      	adds	r3, #1
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	2b09      	cmp	r3, #9
 800231a:	bf94      	ite	ls
 800231c:	2301      	movls	r3, #1
 800231e:	2300      	movhi	r3, #0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	e019      	b.n	8002358 <HAL_ADC_ConfigChannel+0x4d8>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800232c:	fa93 f3a3 	rbit	r3, r3
 8002330:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002334:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002336:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 800233c:	2320      	movs	r3, #32
 800233e:	e003      	b.n	8002348 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002340:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002342:	fab3 f383 	clz	r3, r3
 8002346:	b2db      	uxtb	r3, r3
 8002348:	3301      	adds	r3, #1
 800234a:	f003 031f 	and.w	r3, r3, #31
 800234e:	2b09      	cmp	r3, #9
 8002350:	bf94      	ite	ls
 8002352:	2301      	movls	r3, #1
 8002354:	2300      	movhi	r3, #0
 8002356:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002358:	2b00      	cmp	r3, #0
 800235a:	d079      	beq.n	8002450 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002364:	2b00      	cmp	r3, #0
 8002366:	d107      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x4f8>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	0e9b      	lsrs	r3, r3, #26
 800236e:	3301      	adds	r3, #1
 8002370:	069b      	lsls	r3, r3, #26
 8002372:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002376:	e015      	b.n	80023a4 <HAL_ADC_ConfigChannel+0x524>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002380:	fa93 f3a3 	rbit	r3, r3
 8002384:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002388:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800238a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002390:	2320      	movs	r3, #32
 8002392:	e003      	b.n	800239c <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002396:	fab3 f383 	clz	r3, r3
 800239a:	b2db      	uxtb	r3, r3
 800239c:	3301      	adds	r3, #1
 800239e:	069b      	lsls	r3, r3, #26
 80023a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d109      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x544>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	0e9b      	lsrs	r3, r3, #26
 80023b6:	3301      	adds	r3, #1
 80023b8:	f003 031f 	and.w	r3, r3, #31
 80023bc:	2101      	movs	r1, #1
 80023be:	fa01 f303 	lsl.w	r3, r1, r3
 80023c2:	e017      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x574>
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023cc:	fa93 f3a3 	rbit	r3, r3
 80023d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80023d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023d4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80023d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80023dc:	2320      	movs	r3, #32
 80023de:	e003      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80023e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023e2:	fab3 f383 	clz	r3, r3
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	3301      	adds	r3, #1
 80023ea:	f003 031f 	and.w	r3, r3, #31
 80023ee:	2101      	movs	r1, #1
 80023f0:	fa01 f303 	lsl.w	r3, r1, r3
 80023f4:	ea42 0103 	orr.w	r1, r2, r3
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10a      	bne.n	800241a <HAL_ADC_ConfigChannel+0x59a>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	0e9b      	lsrs	r3, r3, #26
 800240a:	3301      	adds	r3, #1
 800240c:	f003 021f 	and.w	r2, r3, #31
 8002410:	4613      	mov	r3, r2
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	4413      	add	r3, r2
 8002416:	051b      	lsls	r3, r3, #20
 8002418:	e018      	b.n	800244c <HAL_ADC_ConfigChannel+0x5cc>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002422:	fa93 f3a3 	rbit	r3, r3
 8002426:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800242a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800242c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002432:	2320      	movs	r3, #32
 8002434:	e003      	b.n	800243e <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002438:	fab3 f383 	clz	r3, r3
 800243c:	b2db      	uxtb	r3, r3
 800243e:	3301      	adds	r3, #1
 8002440:	f003 021f 	and.w	r2, r3, #31
 8002444:	4613      	mov	r3, r2
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	4413      	add	r3, r2
 800244a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800244c:	430b      	orrs	r3, r1
 800244e:	e080      	b.n	8002552 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002458:	2b00      	cmp	r3, #0
 800245a:	d107      	bne.n	800246c <HAL_ADC_ConfigChannel+0x5ec>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	0e9b      	lsrs	r3, r3, #26
 8002462:	3301      	adds	r3, #1
 8002464:	069b      	lsls	r3, r3, #26
 8002466:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800246a:	e015      	b.n	8002498 <HAL_ADC_ConfigChannel+0x618>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002474:	fa93 f3a3 	rbit	r3, r3
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800247e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002484:	2320      	movs	r3, #32
 8002486:	e003      	b.n	8002490 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248a:	fab3 f383 	clz	r3, r3
 800248e:	b2db      	uxtb	r3, r3
 8002490:	3301      	adds	r3, #1
 8002492:	069b      	lsls	r3, r3, #26
 8002494:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d109      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x638>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	0e9b      	lsrs	r3, r3, #26
 80024aa:	3301      	adds	r3, #1
 80024ac:	f003 031f 	and.w	r3, r3, #31
 80024b0:	2101      	movs	r1, #1
 80024b2:	fa01 f303 	lsl.w	r3, r1, r3
 80024b6:	e017      	b.n	80024e8 <HAL_ADC_ConfigChannel+0x668>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	fa93 f3a3 	rbit	r3, r3
 80024c4:	61bb      	str	r3, [r7, #24]
  return result;
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80024ca:	6a3b      	ldr	r3, [r7, #32]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80024d0:	2320      	movs	r3, #32
 80024d2:	e003      	b.n	80024dc <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80024d4:	6a3b      	ldr	r3, [r7, #32]
 80024d6:	fab3 f383 	clz	r3, r3
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	3301      	adds	r3, #1
 80024de:	f003 031f 	and.w	r3, r3, #31
 80024e2:	2101      	movs	r1, #1
 80024e4:	fa01 f303 	lsl.w	r3, r1, r3
 80024e8:	ea42 0103 	orr.w	r1, r2, r3
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10d      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x694>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	0e9b      	lsrs	r3, r3, #26
 80024fe:	3301      	adds	r3, #1
 8002500:	f003 021f 	and.w	r2, r3, #31
 8002504:	4613      	mov	r3, r2
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	4413      	add	r3, r2
 800250a:	3b1e      	subs	r3, #30
 800250c:	051b      	lsls	r3, r3, #20
 800250e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002512:	e01d      	b.n	8002550 <HAL_ADC_ConfigChannel+0x6d0>
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	fa93 f3a3 	rbit	r3, r3
 8002520:	60fb      	str	r3, [r7, #12]
  return result;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d103      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800252c:	2320      	movs	r3, #32
 800252e:	e005      	b.n	800253c <HAL_ADC_ConfigChannel+0x6bc>
 8002530:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	fab3 f383 	clz	r3, r3
 800253a:	b2db      	uxtb	r3, r3
 800253c:	3301      	adds	r3, #1
 800253e:	f003 021f 	and.w	r2, r3, #31
 8002542:	4613      	mov	r3, r2
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	4413      	add	r3, r2
 8002548:	3b1e      	subs	r3, #30
 800254a:	051b      	lsls	r3, r3, #20
 800254c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002550:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002556:	4619      	mov	r1, r3
 8002558:	f7ff fa74 	bl	8001a44 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	4b3d      	ldr	r3, [pc, #244]	; (8002658 <HAL_ADC_ConfigChannel+0x7d8>)
 8002562:	4013      	ands	r3, r2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d06c      	beq.n	8002642 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002568:	483c      	ldr	r0, [pc, #240]	; (800265c <HAL_ADC_ConfigChannel+0x7dc>)
 800256a:	f7ff f9c9 	bl	8001900 <LL_ADC_GetCommonPathInternalCh>
 800256e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a3a      	ldr	r2, [pc, #232]	; (8002660 <HAL_ADC_ConfigChannel+0x7e0>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d127      	bne.n	80025cc <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800257c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002580:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d121      	bne.n	80025cc <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a35      	ldr	r2, [pc, #212]	; (8002664 <HAL_ADC_ConfigChannel+0x7e4>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d157      	bne.n	8002642 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002592:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002596:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800259a:	4619      	mov	r1, r3
 800259c:	482f      	ldr	r0, [pc, #188]	; (800265c <HAL_ADC_ConfigChannel+0x7dc>)
 800259e:	f7ff f99c 	bl	80018da <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025a2:	4b31      	ldr	r3, [pc, #196]	; (8002668 <HAL_ADC_ConfigChannel+0x7e8>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	099b      	lsrs	r3, r3, #6
 80025a8:	4a30      	ldr	r2, [pc, #192]	; (800266c <HAL_ADC_ConfigChannel+0x7ec>)
 80025aa:	fba2 2303 	umull	r2, r3, r2, r3
 80025ae:	099b      	lsrs	r3, r3, #6
 80025b0:	1c5a      	adds	r2, r3, #1
 80025b2:	4613      	mov	r3, r2
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	4413      	add	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80025bc:	e002      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	3b01      	subs	r3, #1
 80025c2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f9      	bne.n	80025be <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025ca:	e03a      	b.n	8002642 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a27      	ldr	r2, [pc, #156]	; (8002670 <HAL_ADC_ConfigChannel+0x7f0>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d113      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80025d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10d      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a1f      	ldr	r2, [pc, #124]	; (8002664 <HAL_ADC_ConfigChannel+0x7e4>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d12a      	bne.n	8002642 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025f4:	4619      	mov	r1, r3
 80025f6:	4819      	ldr	r0, [pc, #100]	; (800265c <HAL_ADC_ConfigChannel+0x7dc>)
 80025f8:	f7ff f96f 	bl	80018da <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025fc:	e021      	b.n	8002642 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a1c      	ldr	r2, [pc, #112]	; (8002674 <HAL_ADC_ConfigChannel+0x7f4>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d11c      	bne.n	8002642 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002608:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800260c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d116      	bne.n	8002642 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a12      	ldr	r2, [pc, #72]	; (8002664 <HAL_ADC_ConfigChannel+0x7e4>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d111      	bne.n	8002642 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800261e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002622:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002626:	4619      	mov	r1, r3
 8002628:	480c      	ldr	r0, [pc, #48]	; (800265c <HAL_ADC_ConfigChannel+0x7dc>)
 800262a:	f7ff f956 	bl	80018da <LL_ADC_SetCommonPathInternalCh>
 800262e:	e008      	b.n	8002642 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002634:	f043 0220 	orr.w	r2, r3, #32
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800264a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800264e:	4618      	mov	r0, r3
 8002650:	37d8      	adds	r7, #216	; 0xd8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	80080000 	.word	0x80080000
 800265c:	50040300 	.word	0x50040300
 8002660:	c7520000 	.word	0xc7520000
 8002664:	50040000 	.word	0x50040000
 8002668:	20000000 	.word	0x20000000
 800266c:	053e2d63 	.word	0x053e2d63
 8002670:	cb840000 	.word	0xcb840000
 8002674:	80000001 	.word	0x80000001

08002678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002688:	4b0c      	ldr	r3, [pc, #48]	; (80026bc <__NVIC_SetPriorityGrouping+0x44>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002694:	4013      	ands	r3, r2
 8002696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026aa:	4a04      	ldr	r2, [pc, #16]	; (80026bc <__NVIC_SetPriorityGrouping+0x44>)
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	60d3      	str	r3, [r2, #12]
}
 80026b0:	bf00      	nop
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	e000ed00 	.word	0xe000ed00

080026c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026c4:	4b04      	ldr	r3, [pc, #16]	; (80026d8 <__NVIC_GetPriorityGrouping+0x18>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	0a1b      	lsrs	r3, r3, #8
 80026ca:	f003 0307 	and.w	r3, r3, #7
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	e000ed00 	.word	0xe000ed00

080026dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	db0b      	blt.n	8002706 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	f003 021f 	and.w	r2, r3, #31
 80026f4:	4907      	ldr	r1, [pc, #28]	; (8002714 <__NVIC_EnableIRQ+0x38>)
 80026f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fa:	095b      	lsrs	r3, r3, #5
 80026fc:	2001      	movs	r0, #1
 80026fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	e000e100 	.word	0xe000e100

08002718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	6039      	str	r1, [r7, #0]
 8002722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002728:	2b00      	cmp	r3, #0
 800272a:	db0a      	blt.n	8002742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	b2da      	uxtb	r2, r3
 8002730:	490c      	ldr	r1, [pc, #48]	; (8002764 <__NVIC_SetPriority+0x4c>)
 8002732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002736:	0112      	lsls	r2, r2, #4
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	440b      	add	r3, r1
 800273c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002740:	e00a      	b.n	8002758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	b2da      	uxtb	r2, r3
 8002746:	4908      	ldr	r1, [pc, #32]	; (8002768 <__NVIC_SetPriority+0x50>)
 8002748:	79fb      	ldrb	r3, [r7, #7]
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	3b04      	subs	r3, #4
 8002750:	0112      	lsls	r2, r2, #4
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	440b      	add	r3, r1
 8002756:	761a      	strb	r2, [r3, #24]
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	e000e100 	.word	0xe000e100
 8002768:	e000ed00 	.word	0xe000ed00

0800276c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800276c:	b480      	push	{r7}
 800276e:	b089      	sub	sp, #36	; 0x24
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	f1c3 0307 	rsb	r3, r3, #7
 8002786:	2b04      	cmp	r3, #4
 8002788:	bf28      	it	cs
 800278a:	2304      	movcs	r3, #4
 800278c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	3304      	adds	r3, #4
 8002792:	2b06      	cmp	r3, #6
 8002794:	d902      	bls.n	800279c <NVIC_EncodePriority+0x30>
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	3b03      	subs	r3, #3
 800279a:	e000      	b.n	800279e <NVIC_EncodePriority+0x32>
 800279c:	2300      	movs	r3, #0
 800279e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a0:	f04f 32ff 	mov.w	r2, #4294967295
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	43da      	mvns	r2, r3
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	401a      	ands	r2, r3
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027b4:	f04f 31ff 	mov.w	r1, #4294967295
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	fa01 f303 	lsl.w	r3, r1, r3
 80027be:	43d9      	mvns	r1, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c4:	4313      	orrs	r3, r2
         );
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3724      	adds	r7, #36	; 0x24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
	...

080027d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3b01      	subs	r3, #1
 80027e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027e4:	d301      	bcc.n	80027ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027e6:	2301      	movs	r3, #1
 80027e8:	e00f      	b.n	800280a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ea:	4a0a      	ldr	r2, [pc, #40]	; (8002814 <SysTick_Config+0x40>)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027f2:	210f      	movs	r1, #15
 80027f4:	f04f 30ff 	mov.w	r0, #4294967295
 80027f8:	f7ff ff8e 	bl	8002718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027fc:	4b05      	ldr	r3, [pc, #20]	; (8002814 <SysTick_Config+0x40>)
 80027fe:	2200      	movs	r2, #0
 8002800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002802:	4b04      	ldr	r3, [pc, #16]	; (8002814 <SysTick_Config+0x40>)
 8002804:	2207      	movs	r2, #7
 8002806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	e000e010 	.word	0xe000e010

08002818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7ff ff29 	bl	8002678 <__NVIC_SetPriorityGrouping>
}
 8002826:	bf00      	nop
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b086      	sub	sp, #24
 8002832:	af00      	add	r7, sp, #0
 8002834:	4603      	mov	r3, r0
 8002836:	60b9      	str	r1, [r7, #8]
 8002838:	607a      	str	r2, [r7, #4]
 800283a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002840:	f7ff ff3e 	bl	80026c0 <__NVIC_GetPriorityGrouping>
 8002844:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	68b9      	ldr	r1, [r7, #8]
 800284a:	6978      	ldr	r0, [r7, #20]
 800284c:	f7ff ff8e 	bl	800276c <NVIC_EncodePriority>
 8002850:	4602      	mov	r2, r0
 8002852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002856:	4611      	mov	r1, r2
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff ff5d 	bl	8002718 <__NVIC_SetPriority>
}
 800285e:	bf00      	nop
 8002860:	3718      	adds	r7, #24
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b082      	sub	sp, #8
 800286a:	af00      	add	r7, sp, #0
 800286c:	4603      	mov	r3, r0
 800286e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff ff31 	bl	80026dc <__NVIC_EnableIRQ>
}
 800287a:	bf00      	nop
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b082      	sub	sp, #8
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7ff ffa2 	bl	80027d4 <SysTick_Config>
 8002890:	4603      	mov	r3, r0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
	...

0800289c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e0ac      	b.n	8002a08 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 f8b2 	bl	8002a1c <DFSDM_GetChannelFromInstance>
 80028b8:	4603      	mov	r3, r0
 80028ba:	4a55      	ldr	r2, [pc, #340]	; (8002a10 <HAL_DFSDM_ChannelInit+0x174>)
 80028bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e09f      	b.n	8002a08 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f7fe fbb5 	bl	8001038 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80028ce:	4b51      	ldr	r3, [pc, #324]	; (8002a14 <HAL_DFSDM_ChannelInit+0x178>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	3301      	adds	r3, #1
 80028d4:	4a4f      	ldr	r2, [pc, #316]	; (8002a14 <HAL_DFSDM_ChannelInit+0x178>)
 80028d6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80028d8:	4b4e      	ldr	r3, [pc, #312]	; (8002a14 <HAL_DFSDM_ChannelInit+0x178>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d125      	bne.n	800292c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80028e0:	4b4d      	ldr	r3, [pc, #308]	; (8002a18 <HAL_DFSDM_ChannelInit+0x17c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a4c      	ldr	r2, [pc, #304]	; (8002a18 <HAL_DFSDM_ChannelInit+0x17c>)
 80028e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80028ea:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80028ec:	4b4a      	ldr	r3, [pc, #296]	; (8002a18 <HAL_DFSDM_ChannelInit+0x17c>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	4948      	ldr	r1, [pc, #288]	; (8002a18 <HAL_DFSDM_ChannelInit+0x17c>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80028fa:	4b47      	ldr	r3, [pc, #284]	; (8002a18 <HAL_DFSDM_ChannelInit+0x17c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a46      	ldr	r2, [pc, #280]	; (8002a18 <HAL_DFSDM_ChannelInit+0x17c>)
 8002900:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002904:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	791b      	ldrb	r3, [r3, #4]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d108      	bne.n	8002920 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800290e:	4b42      	ldr	r3, [pc, #264]	; (8002a18 <HAL_DFSDM_ChannelInit+0x17c>)
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	3b01      	subs	r3, #1
 8002918:	041b      	lsls	r3, r3, #16
 800291a:	493f      	ldr	r1, [pc, #252]	; (8002a18 <HAL_DFSDM_ChannelInit+0x17c>)
 800291c:	4313      	orrs	r3, r2
 800291e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002920:	4b3d      	ldr	r3, [pc, #244]	; (8002a18 <HAL_DFSDM_ChannelInit+0x17c>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a3c      	ldr	r2, [pc, #240]	; (8002a18 <HAL_DFSDM_ChannelInit+0x17c>)
 8002926:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800292a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800293a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6819      	ldr	r1, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800294a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002950:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 020f 	bic.w	r2, r2, #15
 8002968:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6819      	ldr	r1, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002978:	431a      	orrs	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	430a      	orrs	r2, r1
 8002980:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002990:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6899      	ldr	r1, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a0:	3b01      	subs	r3, #1
 80029a2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80029a4:	431a      	orrs	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f002 0207 	and.w	r2, r2, #7
 80029bc:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6859      	ldr	r1, [r3, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80029d0:	431a      	orrs	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029e8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f000 f810 	bl	8002a1c <DFSDM_GetChannelFromInstance>
 80029fc:	4602      	mov	r2, r0
 80029fe:	4904      	ldr	r1, [pc, #16]	; (8002a10 <HAL_DFSDM_ChannelInit+0x174>)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	200004e4 	.word	0x200004e4
 8002a14:	200004e0 	.word	0x200004e0
 8002a18:	40016000 	.word	0x40016000

08002a1c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a1c      	ldr	r2, [pc, #112]	; (8002a98 <DFSDM_GetChannelFromInstance+0x7c>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d102      	bne.n	8002a32 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	e02b      	b.n	8002a8a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a19      	ldr	r2, [pc, #100]	; (8002a9c <DFSDM_GetChannelFromInstance+0x80>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d102      	bne.n	8002a40 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	e024      	b.n	8002a8a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a17      	ldr	r2, [pc, #92]	; (8002aa0 <DFSDM_GetChannelFromInstance+0x84>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d102      	bne.n	8002a4e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	e01d      	b.n	8002a8a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a14      	ldr	r2, [pc, #80]	; (8002aa4 <DFSDM_GetChannelFromInstance+0x88>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d102      	bne.n	8002a5c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002a56:	2304      	movs	r3, #4
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	e016      	b.n	8002a8a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a12      	ldr	r2, [pc, #72]	; (8002aa8 <DFSDM_GetChannelFromInstance+0x8c>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d102      	bne.n	8002a6a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002a64:	2305      	movs	r3, #5
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	e00f      	b.n	8002a8a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a0f      	ldr	r2, [pc, #60]	; (8002aac <DFSDM_GetChannelFromInstance+0x90>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d102      	bne.n	8002a78 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002a72:	2306      	movs	r3, #6
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	e008      	b.n	8002a8a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a0d      	ldr	r2, [pc, #52]	; (8002ab0 <DFSDM_GetChannelFromInstance+0x94>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d102      	bne.n	8002a86 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002a80:	2307      	movs	r3, #7
 8002a82:	60fb      	str	r3, [r7, #12]
 8002a84:	e001      	b.n	8002a8a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002a86:	2303      	movs	r3, #3
 8002a88:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	40016000 	.word	0x40016000
 8002a9c:	40016020 	.word	0x40016020
 8002aa0:	40016040 	.word	0x40016040
 8002aa4:	40016080 	.word	0x40016080
 8002aa8:	400160a0 	.word	0x400160a0
 8002aac:	400160c0 	.word	0x400160c0
 8002ab0:	400160e0 	.word	0x400160e0

08002ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b087      	sub	sp, #28
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ac2:	e166      	b.n	8002d92 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	2101      	movs	r1, #1
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 8158 	beq.w	8002d8c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f003 0303 	and.w	r3, r3, #3
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d005      	beq.n	8002af4 <HAL_GPIO_Init+0x40>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d130      	bne.n	8002b56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	2203      	movs	r2, #3
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	68da      	ldr	r2, [r3, #12]
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	43db      	mvns	r3, r3
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	4013      	ands	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	091b      	lsrs	r3, r3, #4
 8002b40:	f003 0201 	and.w	r2, r3, #1
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	2b03      	cmp	r3, #3
 8002b60:	d017      	beq.n	8002b92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	2203      	movs	r2, #3
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43db      	mvns	r3, r3
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	4013      	ands	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	689a      	ldr	r2, [r3, #8]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d123      	bne.n	8002be6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	08da      	lsrs	r2, r3, #3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	3208      	adds	r2, #8
 8002ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002baa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	220f      	movs	r2, #15
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	691a      	ldr	r2, [r3, #16]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	08da      	lsrs	r2, r3, #3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3208      	adds	r2, #8
 8002be0:	6939      	ldr	r1, [r7, #16]
 8002be2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	2203      	movs	r2, #3
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f003 0203 	and.w	r2, r3, #3
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 80b2 	beq.w	8002d8c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c28:	4b61      	ldr	r3, [pc, #388]	; (8002db0 <HAL_GPIO_Init+0x2fc>)
 8002c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c2c:	4a60      	ldr	r2, [pc, #384]	; (8002db0 <HAL_GPIO_Init+0x2fc>)
 8002c2e:	f043 0301 	orr.w	r3, r3, #1
 8002c32:	6613      	str	r3, [r2, #96]	; 0x60
 8002c34:	4b5e      	ldr	r3, [pc, #376]	; (8002db0 <HAL_GPIO_Init+0x2fc>)
 8002c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	60bb      	str	r3, [r7, #8]
 8002c3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c40:	4a5c      	ldr	r2, [pc, #368]	; (8002db4 <HAL_GPIO_Init+0x300>)
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	089b      	lsrs	r3, r3, #2
 8002c46:	3302      	adds	r3, #2
 8002c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	220f      	movs	r2, #15
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	4013      	ands	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c6a:	d02b      	beq.n	8002cc4 <HAL_GPIO_Init+0x210>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a52      	ldr	r2, [pc, #328]	; (8002db8 <HAL_GPIO_Init+0x304>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d025      	beq.n	8002cc0 <HAL_GPIO_Init+0x20c>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a51      	ldr	r2, [pc, #324]	; (8002dbc <HAL_GPIO_Init+0x308>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d01f      	beq.n	8002cbc <HAL_GPIO_Init+0x208>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a50      	ldr	r2, [pc, #320]	; (8002dc0 <HAL_GPIO_Init+0x30c>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d019      	beq.n	8002cb8 <HAL_GPIO_Init+0x204>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a4f      	ldr	r2, [pc, #316]	; (8002dc4 <HAL_GPIO_Init+0x310>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d013      	beq.n	8002cb4 <HAL_GPIO_Init+0x200>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a4e      	ldr	r2, [pc, #312]	; (8002dc8 <HAL_GPIO_Init+0x314>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d00d      	beq.n	8002cb0 <HAL_GPIO_Init+0x1fc>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a4d      	ldr	r2, [pc, #308]	; (8002dcc <HAL_GPIO_Init+0x318>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d007      	beq.n	8002cac <HAL_GPIO_Init+0x1f8>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a4c      	ldr	r2, [pc, #304]	; (8002dd0 <HAL_GPIO_Init+0x31c>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d101      	bne.n	8002ca8 <HAL_GPIO_Init+0x1f4>
 8002ca4:	2307      	movs	r3, #7
 8002ca6:	e00e      	b.n	8002cc6 <HAL_GPIO_Init+0x212>
 8002ca8:	2308      	movs	r3, #8
 8002caa:	e00c      	b.n	8002cc6 <HAL_GPIO_Init+0x212>
 8002cac:	2306      	movs	r3, #6
 8002cae:	e00a      	b.n	8002cc6 <HAL_GPIO_Init+0x212>
 8002cb0:	2305      	movs	r3, #5
 8002cb2:	e008      	b.n	8002cc6 <HAL_GPIO_Init+0x212>
 8002cb4:	2304      	movs	r3, #4
 8002cb6:	e006      	b.n	8002cc6 <HAL_GPIO_Init+0x212>
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e004      	b.n	8002cc6 <HAL_GPIO_Init+0x212>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e002      	b.n	8002cc6 <HAL_GPIO_Init+0x212>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e000      	b.n	8002cc6 <HAL_GPIO_Init+0x212>
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	f002 0203 	and.w	r2, r2, #3
 8002ccc:	0092      	lsls	r2, r2, #2
 8002cce:	4093      	lsls	r3, r2
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cd6:	4937      	ldr	r1, [pc, #220]	; (8002db4 <HAL_GPIO_Init+0x300>)
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	089b      	lsrs	r3, r3, #2
 8002cdc:	3302      	adds	r3, #2
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ce4:	4b3b      	ldr	r3, [pc, #236]	; (8002dd4 <HAL_GPIO_Init+0x320>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	43db      	mvns	r3, r3
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d08:	4a32      	ldr	r2, [pc, #200]	; (8002dd4 <HAL_GPIO_Init+0x320>)
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d0e:	4b31      	ldr	r3, [pc, #196]	; (8002dd4 <HAL_GPIO_Init+0x320>)
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	43db      	mvns	r3, r3
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d32:	4a28      	ldr	r2, [pc, #160]	; (8002dd4 <HAL_GPIO_Init+0x320>)
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d38:	4b26      	ldr	r3, [pc, #152]	; (8002dd4 <HAL_GPIO_Init+0x320>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	43db      	mvns	r3, r3
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	4013      	ands	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d003      	beq.n	8002d5c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d5c:	4a1d      	ldr	r2, [pc, #116]	; (8002dd4 <HAL_GPIO_Init+0x320>)
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002d62:	4b1c      	ldr	r3, [pc, #112]	; (8002dd4 <HAL_GPIO_Init+0x320>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d86:	4a13      	ldr	r2, [pc, #76]	; (8002dd4 <HAL_GPIO_Init+0x320>)
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	fa22 f303 	lsr.w	r3, r2, r3
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f47f ae91 	bne.w	8002ac4 <HAL_GPIO_Init+0x10>
  }
}
 8002da2:	bf00      	nop
 8002da4:	bf00      	nop
 8002da6:	371c      	adds	r7, #28
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	40021000 	.word	0x40021000
 8002db4:	40010000 	.word	0x40010000
 8002db8:	48000400 	.word	0x48000400
 8002dbc:	48000800 	.word	0x48000800
 8002dc0:	48000c00 	.word	0x48000c00
 8002dc4:	48001000 	.word	0x48001000
 8002dc8:	48001400 	.word	0x48001400
 8002dcc:	48001800 	.word	0x48001800
 8002dd0:	48001c00 	.word	0x48001c00
 8002dd4:	40010400 	.word	0x40010400

08002dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	460b      	mov	r3, r1
 8002de2:	807b      	strh	r3, [r7, #2]
 8002de4:	4613      	mov	r3, r2
 8002de6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002de8:	787b      	ldrb	r3, [r7, #1]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dee:	887a      	ldrh	r2, [r7, #2]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002df4:	e002      	b.n	8002dfc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002df6:	887a      	ldrh	r2, [r7, #2]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e12:	4b08      	ldr	r3, [pc, #32]	; (8002e34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e14:	695a      	ldr	r2, [r3, #20]
 8002e16:	88fb      	ldrh	r3, [r7, #6]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d006      	beq.n	8002e2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e1e:	4a05      	ldr	r2, [pc, #20]	; (8002e34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e20:	88fb      	ldrh	r3, [r7, #6]
 8002e22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e24:	88fb      	ldrh	r3, [r7, #6]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 f806 	bl	8002e38 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e2c:	bf00      	nop
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40010400 	.word	0x40010400

08002e38 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	4603      	mov	r3, r0
 8002e40:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b082      	sub	sp, #8
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e08d      	b.n	8002f7c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d106      	bne.n	8002e7a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f7fe f943 	bl	8001100 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2224      	movs	r2, #36	; 0x24
 8002e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 0201 	bic.w	r2, r2, #1
 8002e90:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e9e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002eae:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d107      	bne.n	8002ec8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ec4:	609a      	str	r2, [r3, #8]
 8002ec6:	e006      	b.n	8002ed6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002ed4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d108      	bne.n	8002ef0 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002eec:	605a      	str	r2, [r3, #4]
 8002eee:	e007      	b.n	8002f00 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002efe:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	6812      	ldr	r2, [r2, #0]
 8002f0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f12:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68da      	ldr	r2, [r3, #12]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f22:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	691a      	ldr	r2, [r3, #16]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	69d9      	ldr	r1, [r3, #28]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a1a      	ldr	r2, [r3, #32]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f042 0201 	orr.w	r2, r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2220      	movs	r2, #32
 8002f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b088      	sub	sp, #32
 8002f88:	af02      	add	r7, sp, #8
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	607a      	str	r2, [r7, #4]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	460b      	mov	r3, r1
 8002f92:	817b      	strh	r3, [r7, #10]
 8002f94:	4613      	mov	r3, r2
 8002f96:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b20      	cmp	r3, #32
 8002fa2:	f040 80fd 	bne.w	80031a0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d101      	bne.n	8002fb4 <HAL_I2C_Master_Transmit+0x30>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	e0f6      	b.n	80031a2 <HAL_I2C_Master_Transmit+0x21e>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002fbc:	f7fe fc4a 	bl	8001854 <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	2319      	movs	r3, #25
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 f914 	bl	80031fc <I2C_WaitOnFlagUntilTimeout>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e0e1      	b.n	80031a2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2221      	movs	r2, #33	; 0x21
 8002fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2210      	movs	r2, #16
 8002fea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	893a      	ldrh	r2, [r7, #8]
 8002ffe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300a:	b29b      	uxth	r3, r3
 800300c:	2bff      	cmp	r3, #255	; 0xff
 800300e:	d906      	bls.n	800301e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	22ff      	movs	r2, #255	; 0xff
 8003014:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003016:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800301a:	617b      	str	r3, [r7, #20]
 800301c:	e007      	b.n	800302e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003022:	b29a      	uxth	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003028:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800302c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003032:	2b00      	cmp	r3, #0
 8003034:	d024      	beq.n	8003080 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303a:	781a      	ldrb	r2, [r3, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003046:	1c5a      	adds	r2, r3, #1
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003050:	b29b      	uxth	r3, r3
 8003052:	3b01      	subs	r3, #1
 8003054:	b29a      	uxth	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800305e:	3b01      	subs	r3, #1
 8003060:	b29a      	uxth	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306a:	b2db      	uxtb	r3, r3
 800306c:	3301      	adds	r3, #1
 800306e:	b2da      	uxtb	r2, r3
 8003070:	8979      	ldrh	r1, [r7, #10]
 8003072:	4b4e      	ldr	r3, [pc, #312]	; (80031ac <HAL_I2C_Master_Transmit+0x228>)
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f000 fa79 	bl	8003570 <I2C_TransferConfig>
 800307e:	e066      	b.n	800314e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003084:	b2da      	uxtb	r2, r3
 8003086:	8979      	ldrh	r1, [r7, #10]
 8003088:	4b48      	ldr	r3, [pc, #288]	; (80031ac <HAL_I2C_Master_Transmit+0x228>)
 800308a:	9300      	str	r3, [sp, #0]
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 fa6e 	bl	8003570 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003094:	e05b      	b.n	800314e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	6a39      	ldr	r1, [r7, #32]
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 f8fd 	bl	800329a <I2C_WaitOnTXISFlagUntilTimeout>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e07b      	b.n	80031a2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ae:	781a      	ldrb	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	3b01      	subs	r3, #1
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d2:	3b01      	subs	r3, #1
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030de:	b29b      	uxth	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d034      	beq.n	800314e <HAL_I2C_Master_Transmit+0x1ca>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d130      	bne.n	800314e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	6a3b      	ldr	r3, [r7, #32]
 80030f2:	2200      	movs	r2, #0
 80030f4:	2180      	movs	r1, #128	; 0x80
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 f880 	bl	80031fc <I2C_WaitOnFlagUntilTimeout>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e04d      	b.n	80031a2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800310a:	b29b      	uxth	r3, r3
 800310c:	2bff      	cmp	r3, #255	; 0xff
 800310e:	d90e      	bls.n	800312e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	22ff      	movs	r2, #255	; 0xff
 8003114:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311a:	b2da      	uxtb	r2, r3
 800311c:	8979      	ldrh	r1, [r7, #10]
 800311e:	2300      	movs	r3, #0
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 fa22 	bl	8003570 <I2C_TransferConfig>
 800312c:	e00f      	b.n	800314e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003132:	b29a      	uxth	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800313c:	b2da      	uxtb	r2, r3
 800313e:	8979      	ldrh	r1, [r7, #10]
 8003140:	2300      	movs	r3, #0
 8003142:	9300      	str	r3, [sp, #0]
 8003144:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f000 fa11 	bl	8003570 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003152:	b29b      	uxth	r3, r3
 8003154:	2b00      	cmp	r3, #0
 8003156:	d19e      	bne.n	8003096 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	6a39      	ldr	r1, [r7, #32]
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 f8e3 	bl	8003328 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e01a      	b.n	80031a2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2220      	movs	r2, #32
 8003172:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6859      	ldr	r1, [r3, #4]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	4b0c      	ldr	r3, [pc, #48]	; (80031b0 <HAL_I2C_Master_Transmit+0x22c>)
 8003180:	400b      	ands	r3, r1
 8003182:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2220      	movs	r2, #32
 8003188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800319c:	2300      	movs	r3, #0
 800319e:	e000      	b.n	80031a2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80031a0:	2302      	movs	r3, #2
  }
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3718      	adds	r7, #24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	80002000 	.word	0x80002000
 80031b0:	fe00e800 	.word	0xfe00e800

080031b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d103      	bne.n	80031d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2200      	movs	r2, #0
 80031d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d007      	beq.n	80031f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	699a      	ldr	r2, [r3, #24]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0201 	orr.w	r2, r2, #1
 80031ee:	619a      	str	r2, [r3, #24]
  }
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	603b      	str	r3, [r7, #0]
 8003208:	4613      	mov	r3, r2
 800320a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800320c:	e031      	b.n	8003272 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003214:	d02d      	beq.n	8003272 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003216:	f7fe fb1d 	bl	8001854 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	429a      	cmp	r2, r3
 8003224:	d302      	bcc.n	800322c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d122      	bne.n	8003272 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	699a      	ldr	r2, [r3, #24]
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	4013      	ands	r3, r2
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	429a      	cmp	r2, r3
 800323a:	bf0c      	ite	eq
 800323c:	2301      	moveq	r3, #1
 800323e:	2300      	movne	r3, #0
 8003240:	b2db      	uxtb	r3, r3
 8003242:	461a      	mov	r2, r3
 8003244:	79fb      	ldrb	r3, [r7, #7]
 8003246:	429a      	cmp	r2, r3
 8003248:	d113      	bne.n	8003272 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324e:	f043 0220 	orr.w	r2, r3, #32
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2220      	movs	r2, #32
 800325a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e00f      	b.n	8003292 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	699a      	ldr	r2, [r3, #24]
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	4013      	ands	r3, r2
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	429a      	cmp	r2, r3
 8003280:	bf0c      	ite	eq
 8003282:	2301      	moveq	r3, #1
 8003284:	2300      	movne	r3, #0
 8003286:	b2db      	uxtb	r3, r3
 8003288:	461a      	mov	r2, r3
 800328a:	79fb      	ldrb	r3, [r7, #7]
 800328c:	429a      	cmp	r2, r3
 800328e:	d0be      	beq.n	800320e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b084      	sub	sp, #16
 800329e:	af00      	add	r7, sp, #0
 80032a0:	60f8      	str	r0, [r7, #12]
 80032a2:	60b9      	str	r1, [r7, #8]
 80032a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032a6:	e033      	b.n	8003310 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	68b9      	ldr	r1, [r7, #8]
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f000 f87f 	bl	80033b0 <I2C_IsErrorOccurred>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e031      	b.n	8003320 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c2:	d025      	beq.n	8003310 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c4:	f7fe fac6 	bl	8001854 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d302      	bcc.n	80032da <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d11a      	bne.n	8003310 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d013      	beq.n	8003310 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ec:	f043 0220 	orr.w	r2, r3, #32
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2220      	movs	r2, #32
 80032f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e007      	b.n	8003320 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b02      	cmp	r3, #2
 800331c:	d1c4      	bne.n	80032a8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003334:	e02f      	b.n	8003396 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	68b9      	ldr	r1, [r7, #8]
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f000 f838 	bl	80033b0 <I2C_IsErrorOccurred>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e02d      	b.n	80033a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800334a:	f7fe fa83 	bl	8001854 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	429a      	cmp	r2, r3
 8003358:	d302      	bcc.n	8003360 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d11a      	bne.n	8003396 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	f003 0320 	and.w	r3, r3, #32
 800336a:	2b20      	cmp	r3, #32
 800336c:	d013      	beq.n	8003396 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003372:	f043 0220 	orr.w	r2, r3, #32
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2220      	movs	r2, #32
 800337e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e007      	b.n	80033a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	f003 0320 	and.w	r3, r3, #32
 80033a0:	2b20      	cmp	r3, #32
 80033a2:	d1c8      	bne.n	8003336 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
	...

080033b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b08a      	sub	sp, #40	; 0x28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033bc:	2300      	movs	r3, #0
 80033be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80033ca:	2300      	movs	r3, #0
 80033cc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	f003 0310 	and.w	r3, r3, #16
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d068      	beq.n	80034ae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2210      	movs	r2, #16
 80033e2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80033e4:	e049      	b.n	800347a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ec:	d045      	beq.n	800347a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033ee:	f7fe fa31 	bl	8001854 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d302      	bcc.n	8003404 <I2C_IsErrorOccurred+0x54>
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d13a      	bne.n	800347a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800340e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003416:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003422:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003426:	d121      	bne.n	800346c <I2C_IsErrorOccurred+0xbc>
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800342e:	d01d      	beq.n	800346c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003430:	7cfb      	ldrb	r3, [r7, #19]
 8003432:	2b20      	cmp	r3, #32
 8003434:	d01a      	beq.n	800346c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003444:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003446:	f7fe fa05 	bl	8001854 <HAL_GetTick>
 800344a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800344c:	e00e      	b.n	800346c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800344e:	f7fe fa01 	bl	8001854 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b19      	cmp	r3, #25
 800345a:	d907      	bls.n	800346c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	f043 0320 	orr.w	r3, r3, #32
 8003462:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800346a:	e006      	b.n	800347a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	f003 0320 	and.w	r3, r3, #32
 8003476:	2b20      	cmp	r3, #32
 8003478:	d1e9      	bne.n	800344e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	f003 0320 	and.w	r3, r3, #32
 8003484:	2b20      	cmp	r3, #32
 8003486:	d003      	beq.n	8003490 <I2C_IsErrorOccurred+0xe0>
 8003488:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0aa      	beq.n	80033e6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003490:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003494:	2b00      	cmp	r3, #0
 8003496:	d103      	bne.n	80034a0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2220      	movs	r2, #32
 800349e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	f043 0304 	orr.w	r3, r3, #4
 80034a6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00b      	beq.n	80034d8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	f043 0301 	orr.w	r3, r3, #1
 80034c6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00b      	beq.n	80034fa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80034e2:	6a3b      	ldr	r3, [r7, #32]
 80034e4:	f043 0308 	orr.w	r3, r3, #8
 80034e8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00b      	beq.n	800351c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	f043 0302 	orr.w	r3, r3, #2
 800350a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003514:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800351c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003520:	2b00      	cmp	r3, #0
 8003522:	d01c      	beq.n	800355e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f7ff fe45 	bl	80031b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6859      	ldr	r1, [r3, #4]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	4b0d      	ldr	r3, [pc, #52]	; (800356c <I2C_IsErrorOccurred+0x1bc>)
 8003536:	400b      	ands	r3, r1
 8003538:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800353e:	6a3b      	ldr	r3, [r7, #32]
 8003540:	431a      	orrs	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2220      	movs	r2, #32
 800354a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800355e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003562:	4618      	mov	r0, r3
 8003564:	3728      	adds	r7, #40	; 0x28
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	fe00e800 	.word	0xfe00e800

08003570 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003570:	b480      	push	{r7}
 8003572:	b087      	sub	sp, #28
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	607b      	str	r3, [r7, #4]
 800357a:	460b      	mov	r3, r1
 800357c:	817b      	strh	r3, [r7, #10]
 800357e:	4613      	mov	r3, r2
 8003580:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003582:	897b      	ldrh	r3, [r7, #10]
 8003584:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003588:	7a7b      	ldrb	r3, [r7, #9]
 800358a:	041b      	lsls	r3, r3, #16
 800358c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003590:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	4313      	orrs	r3, r2
 800359a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800359e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	0d5b      	lsrs	r3, r3, #21
 80035aa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80035ae:	4b08      	ldr	r3, [pc, #32]	; (80035d0 <I2C_TransferConfig+0x60>)
 80035b0:	430b      	orrs	r3, r1
 80035b2:	43db      	mvns	r3, r3
 80035b4:	ea02 0103 	and.w	r1, r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	430a      	orrs	r2, r1
 80035c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80035c2:	bf00      	nop
 80035c4:	371c      	adds	r7, #28
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	03ff63ff 	.word	0x03ff63ff

080035d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b20      	cmp	r3, #32
 80035e8:	d138      	bne.n	800365c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d101      	bne.n	80035f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80035f4:	2302      	movs	r3, #2
 80035f6:	e032      	b.n	800365e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2224      	movs	r2, #36	; 0x24
 8003604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0201 	bic.w	r2, r2, #1
 8003616:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003626:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6819      	ldr	r1, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0201 	orr.w	r2, r2, #1
 8003646:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2220      	movs	r2, #32
 800364c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003658:	2300      	movs	r3, #0
 800365a:	e000      	b.n	800365e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800365c:	2302      	movs	r3, #2
  }
}
 800365e:	4618      	mov	r0, r3
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr

0800366a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800366a:	b480      	push	{r7}
 800366c:	b085      	sub	sp, #20
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
 8003672:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b20      	cmp	r3, #32
 800367e:	d139      	bne.n	80036f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003686:	2b01      	cmp	r3, #1
 8003688:	d101      	bne.n	800368e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800368a:	2302      	movs	r3, #2
 800368c:	e033      	b.n	80036f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2224      	movs	r2, #36	; 0x24
 800369a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 0201 	bic.w	r2, r2, #1
 80036ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80036bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	021b      	lsls	r3, r3, #8
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0201 	orr.w	r2, r2, #1
 80036de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2220      	movs	r2, #32
 80036e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036f0:	2300      	movs	r3, #0
 80036f2:	e000      	b.n	80036f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80036f4:	2302      	movs	r3, #2
  }
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
	...

08003704 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af02      	add	r7, sp, #8
 800370a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800370c:	2300      	movs	r3, #0
 800370e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8003710:	f7fe f8a0 	bl	8001854 <HAL_GetTick>
 8003714:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d102      	bne.n	8003722 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	73fb      	strb	r3, [r7, #15]
 8003720:	e092      	b.n	8003848 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372c:	2b00      	cmp	r3, #0
 800372e:	f040 808b 	bne.w	8003848 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7fd fd86 	bl	8001244 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8003738:	f241 3188 	movw	r1, #5000	; 0x1388
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f88b 	bl	8003858 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	4b42      	ldr	r3, [pc, #264]	; (8003854 <HAL_OSPI_Init+0x150>)
 800374a:	4013      	ands	r3, r2
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	68d1      	ldr	r1, [r2, #12]
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	6912      	ldr	r2, [r2, #16]
 8003754:	3a01      	subs	r2, #1
 8003756:	0412      	lsls	r2, r2, #16
 8003758:	4311      	orrs	r1, r2
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6952      	ldr	r2, [r2, #20]
 800375e:	3a01      	subs	r2, #1
 8003760:	0212      	lsls	r2, r2, #8
 8003762:	4311      	orrs	r1, r2
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003768:	4311      	orrs	r1, r2
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	69d2      	ldr	r2, [r2, #28]
 800376e:	4311      	orrs	r1, r2
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	6812      	ldr	r2, [r2, #0]
 8003774:	430b      	orrs	r3, r1
 8003776:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	0412      	lsls	r2, r2, #16
 8003782:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	3b01      	subs	r3, #1
 8003794:	021a      	lsls	r2, r3, #8
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	2200      	movs	r2, #0
 80037a8:	2120      	movs	r1, #32
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 fb98 	bl	8003ee0 <OSPI_WaitFlagStateUntilTimeout>
 80037b0:	4603      	mov	r3, r0
 80037b2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80037b4:	7bfb      	ldrb	r3, [r7, #15]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d146      	bne.n	8003848 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	1e5a      	subs	r2, r3, #1
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80037f0:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fc:	431a      	orrs	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 0201 	orr.w	r2, r2, #1
 8003816:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	2b02      	cmp	r3, #2
 800381e:	d107      	bne.n	8003830 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 0202 	orr.w	r2, r2, #2
 800382e:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003838:	d103      	bne.n	8003842 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	645a      	str	r2, [r3, #68]	; 0x44
 8003840:	e002      	b.n	8003848 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2202      	movs	r2, #2
 8003846:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8003848:	7bfb      	ldrb	r3, [r7, #15]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	f8e0f8f4 	.word	0xf8e0f8f4

08003858 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
	...

08003878 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b092      	sub	sp, #72	; 0x48
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003884:	2300      	movs	r3, #0
 8003886:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800388a:	2300      	movs	r3, #0
 800388c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a08      	ldr	r2, [pc, #32]	; (80038b8 <HAL_OSPIM_Config+0x40>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d105      	bne.n	80038a6 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800389a:	2300      	movs	r3, #0
 800389c:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 800389e:	2301      	movs	r3, #1
 80038a0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80038a4:	e004      	b.n	80038b0 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80038a6:	2301      	movs	r3, #1
 80038a8:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80038b0:	2300      	movs	r3, #0
 80038b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80038b6:	e01f      	b.n	80038f8 <HAL_OSPIM_Config+0x80>
 80038b8:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 80038bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80038c0:	3301      	adds	r3, #1
 80038c2:	b2d8      	uxtb	r0, r3
 80038c4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80038c8:	f107 0114 	add.w	r1, r7, #20
 80038cc:	4613      	mov	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	440b      	add	r3, r1
 80038d6:	4619      	mov	r1, r3
 80038d8:	f000 fb3a 	bl	8003f50 <OSPIM_GetConfig>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d005      	beq.n	80038ee <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2208      	movs	r2, #8
 80038ec:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80038ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80038f2:	3301      	adds	r3, #1
 80038f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80038f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d9dd      	bls.n	80038bc <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8003900:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003904:	2b00      	cmp	r3, #0
 8003906:	f040 82de 	bne.w	8003ec6 <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800390a:	4bc6      	ldr	r3, [pc, #792]	; (8003c24 <HAL_OSPIM_Config+0x3ac>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00b      	beq.n	800392e <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003916:	4bc3      	ldr	r3, [pc, #780]	; (8003c24 <HAL_OSPIM_Config+0x3ac>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4ac2      	ldr	r2, [pc, #776]	; (8003c24 <HAL_OSPIM_Config+0x3ac>)
 800391c:	f023 0301 	bic.w	r3, r3, #1
 8003920:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8003922:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003926:	f043 0301 	orr.w	r3, r3, #1
 800392a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800392e:	4bbe      	ldr	r3, [pc, #760]	; (8003c28 <HAL_OSPIM_Config+0x3b0>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00b      	beq.n	8003952 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800393a:	4bbb      	ldr	r3, [pc, #748]	; (8003c28 <HAL_OSPIM_Config+0x3b0>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4aba      	ldr	r2, [pc, #744]	; (8003c28 <HAL_OSPIM_Config+0x3b0>)
 8003940:	f023 0301 	bic.w	r3, r3, #1
 8003944:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8003946:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800394a:	f043 0302 	orr.w	r3, r3, #2
 800394e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8003952:	49b6      	ldr	r1, [pc, #728]	; (8003c2c <HAL_OSPIM_Config+0x3b4>)
 8003954:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003956:	4613      	mov	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4413      	add	r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	3348      	adds	r3, #72	; 0x48
 8003960:	443b      	add	r3, r7
 8003962:	3b2c      	subs	r3, #44	; 0x2c
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	3b01      	subs	r3, #1
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	440b      	add	r3, r1
 800396c:	6859      	ldr	r1, [r3, #4]
 800396e:	48af      	ldr	r0, [pc, #700]	; (8003c2c <HAL_OSPIM_Config+0x3b4>)
 8003970:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003972:	4613      	mov	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4413      	add	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	3348      	adds	r3, #72	; 0x48
 800397c:	443b      	add	r3, r7
 800397e:	3b2c      	subs	r3, #44	; 0x2c
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	3b01      	subs	r3, #1
 8003984:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4403      	add	r3, r0
 800398c:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 800398e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003990:	4613      	mov	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4413      	add	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	3348      	adds	r3, #72	; 0x48
 800399a:	443b      	add	r3, r7
 800399c:	3b34      	subs	r3, #52	; 0x34
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 80a1 	beq.w	8003ae8 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80039a6:	49a1      	ldr	r1, [pc, #644]	; (8003c2c <HAL_OSPIM_Config+0x3b4>)
 80039a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039aa:	4613      	mov	r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	4413      	add	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	3348      	adds	r3, #72	; 0x48
 80039b4:	443b      	add	r3, r7
 80039b6:	3b34      	subs	r3, #52	; 0x34
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	3b01      	subs	r3, #1
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	440b      	add	r3, r1
 80039c0:	6859      	ldr	r1, [r3, #4]
 80039c2:	489a      	ldr	r0, [pc, #616]	; (8003c2c <HAL_OSPIM_Config+0x3b4>)
 80039c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039c6:	4613      	mov	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4413      	add	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	3348      	adds	r3, #72	; 0x48
 80039d0:	443b      	add	r3, r7
 80039d2:	3b34      	subs	r3, #52	; 0x34
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	3b01      	subs	r3, #1
 80039d8:	f021 0201 	bic.w	r2, r1, #1
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	4403      	add	r3, r0
 80039e0:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80039e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039e4:	4613      	mov	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	3348      	adds	r3, #72	; 0x48
 80039ee:	443b      	add	r3, r7
 80039f0:	3b30      	subs	r3, #48	; 0x30
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d01d      	beq.n	8003a34 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80039f8:	498c      	ldr	r1, [pc, #560]	; (8003c2c <HAL_OSPIM_Config+0x3b4>)
 80039fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039fc:	4613      	mov	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4413      	add	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	3348      	adds	r3, #72	; 0x48
 8003a06:	443b      	add	r3, r7
 8003a08:	3b30      	subs	r3, #48	; 0x30
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	440b      	add	r3, r1
 8003a12:	6859      	ldr	r1, [r3, #4]
 8003a14:	4885      	ldr	r0, [pc, #532]	; (8003c2c <HAL_OSPIM_Config+0x3b4>)
 8003a16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a18:	4613      	mov	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	4413      	add	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	3348      	adds	r3, #72	; 0x48
 8003a22:	443b      	add	r3, r7
 8003a24:	3b30      	subs	r3, #48	; 0x30
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	f021 0210 	bic.w	r2, r1, #16
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4403      	add	r3, r0
 8003a32:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003a34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a36:	4613      	mov	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4413      	add	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	3348      	adds	r3, #72	; 0x48
 8003a40:	443b      	add	r3, r7
 8003a42:	3b28      	subs	r3, #40	; 0x28
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d021      	beq.n	8003a8e <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8003a4a:	4978      	ldr	r1, [pc, #480]	; (8003c2c <HAL_OSPIM_Config+0x3b4>)
 8003a4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a4e:	4613      	mov	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4413      	add	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	3348      	adds	r3, #72	; 0x48
 8003a58:	443b      	add	r3, r7
 8003a5a:	3b28      	subs	r3, #40	; 0x28
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	440b      	add	r3, r1
 8003a68:	6859      	ldr	r1, [r3, #4]
 8003a6a:	4870      	ldr	r0, [pc, #448]	; (8003c2c <HAL_OSPIM_Config+0x3b4>)
 8003a6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a6e:	4613      	mov	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4413      	add	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	3348      	adds	r3, #72	; 0x48
 8003a78:	443b      	add	r3, r7
 8003a7a:	3b28      	subs	r3, #40	; 0x28
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4403      	add	r3, r0
 8003a8c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003a8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a90:	4613      	mov	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	3348      	adds	r3, #72	; 0x48
 8003a9a:	443b      	add	r3, r7
 8003a9c:	3b24      	subs	r3, #36	; 0x24
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d021      	beq.n	8003ae8 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8003aa4:	4961      	ldr	r1, [pc, #388]	; (8003c2c <HAL_OSPIM_Config+0x3b4>)
 8003aa6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4413      	add	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	3348      	adds	r3, #72	; 0x48
 8003ab2:	443b      	add	r3, r7
 8003ab4:	3b24      	subs	r3, #36	; 0x24
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	440b      	add	r3, r1
 8003ac2:	6859      	ldr	r1, [r3, #4]
 8003ac4:	4859      	ldr	r0, [pc, #356]	; (8003c2c <HAL_OSPIM_Config+0x3b4>)
 8003ac6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ac8:	4613      	mov	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4413      	add	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	3348      	adds	r3, #72	; 0x48
 8003ad2:	443b      	add	r3, r7
 8003ad4:	3b24      	subs	r3, #36	; 0x24
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4403      	add	r3, r0
 8003ae6:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	6819      	ldr	r1, [r3, #0]
 8003aec:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003af0:	4613      	mov	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	3348      	adds	r3, #72	; 0x48
 8003afa:	443b      	add	r3, r7
 8003afc:	3b34      	subs	r3, #52	; 0x34
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4299      	cmp	r1, r3
 8003b02:	d038      	beq.n	8003b76 <HAL_OSPIM_Config+0x2fe>
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	6859      	ldr	r1, [r3, #4]
 8003b08:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	3348      	adds	r3, #72	; 0x48
 8003b16:	443b      	add	r3, r7
 8003b18:	3b30      	subs	r3, #48	; 0x30
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4299      	cmp	r1, r3
 8003b1e:	d02a      	beq.n	8003b76 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	6899      	ldr	r1, [r3, #8]
 8003b24:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003b28:	4613      	mov	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	3348      	adds	r3, #72	; 0x48
 8003b32:	443b      	add	r3, r7
 8003b34:	3b2c      	subs	r3, #44	; 0x2c
 8003b36:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003b38:	4299      	cmp	r1, r3
 8003b3a:	d01c      	beq.n	8003b76 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	68d9      	ldr	r1, [r3, #12]
 8003b40:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003b44:	4613      	mov	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4413      	add	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	3348      	adds	r3, #72	; 0x48
 8003b4e:	443b      	add	r3, r7
 8003b50:	3b28      	subs	r3, #40	; 0x28
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4299      	cmp	r1, r3
 8003b56:	d00e      	beq.n	8003b76 <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	6919      	ldr	r1, [r3, #16]
 8003b5c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003b60:	4613      	mov	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4413      	add	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	3348      	adds	r3, #72	; 0x48
 8003b6a:	443b      	add	r3, r7
 8003b6c:	3b24      	subs	r3, #36	; 0x24
 8003b6e:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003b70:	4299      	cmp	r1, r3
 8003b72:	f040 80d3 	bne.w	8003d1c <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8003b76:	492d      	ldr	r1, [pc, #180]	; (8003c2c <HAL_OSPIM_Config+0x3b4>)
 8003b78:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	3348      	adds	r3, #72	; 0x48
 8003b86:	443b      	add	r3, r7
 8003b88:	3b34      	subs	r3, #52	; 0x34
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	440b      	add	r3, r1
 8003b92:	6859      	ldr	r1, [r3, #4]
 8003b94:	4825      	ldr	r0, [pc, #148]	; (8003c2c <HAL_OSPIM_Config+0x3b4>)
 8003b96:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	3348      	adds	r3, #72	; 0x48
 8003ba4:	443b      	add	r3, r7
 8003ba6:	3b34      	subs	r3, #52	; 0x34
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	3b01      	subs	r3, #1
 8003bac:	f021 0201 	bic.w	r2, r1, #1
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4403      	add	r3, r0
 8003bb4:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8003bb6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003bba:	4613      	mov	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4413      	add	r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	3348      	adds	r3, #72	; 0x48
 8003bc4:	443b      	add	r3, r7
 8003bc6:	3b30      	subs	r3, #48	; 0x30
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d01f      	beq.n	8003c0e <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8003bce:	4917      	ldr	r1, [pc, #92]	; (8003c2c <HAL_OSPIM_Config+0x3b4>)
 8003bd0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4413      	add	r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	3348      	adds	r3, #72	; 0x48
 8003bde:	443b      	add	r3, r7
 8003be0:	3b30      	subs	r3, #48	; 0x30
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	3b01      	subs	r3, #1
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	440b      	add	r3, r1
 8003bea:	6859      	ldr	r1, [r3, #4]
 8003bec:	480f      	ldr	r0, [pc, #60]	; (8003c2c <HAL_OSPIM_Config+0x3b4>)
 8003bee:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4413      	add	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	3348      	adds	r3, #72	; 0x48
 8003bfc:	443b      	add	r3, r7
 8003bfe:	3b30      	subs	r3, #48	; 0x30
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	3b01      	subs	r3, #1
 8003c04:	f021 0210 	bic.w	r2, r1, #16
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4403      	add	r3, r0
 8003c0c:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8003c0e:	4907      	ldr	r1, [pc, #28]	; (8003c2c <HAL_OSPIM_Config+0x3b4>)
 8003c10:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003c14:	4613      	mov	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4413      	add	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	3348      	adds	r3, #72	; 0x48
 8003c1e:	443b      	add	r3, r7
 8003c20:	3b2c      	subs	r3, #44	; 0x2c
 8003c22:	e005      	b.n	8003c30 <HAL_OSPIM_Config+0x3b8>
 8003c24:	a0001000 	.word	0xa0001000
 8003c28:	a0001400 	.word	0xa0001400
 8003c2c:	50061c00 	.word	0x50061c00
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	3b01      	subs	r3, #1
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	440b      	add	r3, r1
 8003c38:	6859      	ldr	r1, [r3, #4]
 8003c3a:	48a6      	ldr	r0, [pc, #664]	; (8003ed4 <HAL_OSPIM_Config+0x65c>)
 8003c3c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003c40:	4613      	mov	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	3348      	adds	r3, #72	; 0x48
 8003c4a:	443b      	add	r3, r7
 8003c4c:	3b2c      	subs	r3, #44	; 0x2c
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	3b01      	subs	r3, #1
 8003c52:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4403      	add	r3, r0
 8003c5a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003c5c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003c60:	4613      	mov	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	3348      	adds	r3, #72	; 0x48
 8003c6a:	443b      	add	r3, r7
 8003c6c:	3b28      	subs	r3, #40	; 0x28
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d023      	beq.n	8003cbc <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003c74:	4997      	ldr	r1, [pc, #604]	; (8003ed4 <HAL_OSPIM_Config+0x65c>)
 8003c76:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	4413      	add	r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	3348      	adds	r3, #72	; 0x48
 8003c84:	443b      	add	r3, r7
 8003c86:	3b28      	subs	r3, #40	; 0x28
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	440b      	add	r3, r1
 8003c94:	6859      	ldr	r1, [r3, #4]
 8003c96:	488f      	ldr	r0, [pc, #572]	; (8003ed4 <HAL_OSPIM_Config+0x65c>)
 8003c98:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	3348      	adds	r3, #72	; 0x48
 8003ca6:	443b      	add	r3, r7
 8003ca8:	3b28      	subs	r3, #40	; 0x28
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	3b01      	subs	r3, #1
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4403      	add	r3, r0
 8003cba:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003cbc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	4413      	add	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	3348      	adds	r3, #72	; 0x48
 8003cca:	443b      	add	r3, r7
 8003ccc:	3b24      	subs	r3, #36	; 0x24
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d023      	beq.n	8003d1c <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003cd4:	497f      	ldr	r1, [pc, #508]	; (8003ed4 <HAL_OSPIM_Config+0x65c>)
 8003cd6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003cda:	4613      	mov	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	4413      	add	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	3348      	adds	r3, #72	; 0x48
 8003ce4:	443b      	add	r3, r7
 8003ce6:	3b24      	subs	r3, #36	; 0x24
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	3b01      	subs	r3, #1
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	440b      	add	r3, r1
 8003cf4:	6859      	ldr	r1, [r3, #4]
 8003cf6:	4877      	ldr	r0, [pc, #476]	; (8003ed4 <HAL_OSPIM_Config+0x65c>)
 8003cf8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	4413      	add	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	3348      	adds	r3, #72	; 0x48
 8003d06:	443b      	add	r3, r7
 8003d08:	3b24      	subs	r3, #36	; 0x24
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	4403      	add	r3, r0
 8003d1a:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8003d1c:	4a6d      	ldr	r2, [pc, #436]	; (8003ed4 <HAL_OSPIM_Config+0x65c>)
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	3b01      	subs	r3, #1
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4413      	add	r3, r2
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d30:	025b      	lsls	r3, r3, #9
 8003d32:	431a      	orrs	r2, r3
 8003d34:	4967      	ldr	r1, [pc, #412]	; (8003ed4 <HAL_OSPIM_Config+0x65c>)
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	440b      	add	r3, r1
 8003d44:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8003d46:	4a63      	ldr	r2, [pc, #396]	; (8003ed4 <HAL_OSPIM_Config+0x65c>)
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	4413      	add	r3, r2
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f023 0203 	bic.w	r2, r3, #3
 8003d58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	495d      	ldr	r1, [pc, #372]	; (8003ed4 <HAL_OSPIM_Config+0x65c>)
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	3b01      	subs	r3, #1
 8003d66:	f042 0201 	orr.w	r2, r2, #1
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	440b      	add	r3, r1
 8003d6e:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d014      	beq.n	8003da2 <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8003d78:	4a56      	ldr	r2, [pc, #344]	; (8003ed4 <HAL_OSPIM_Config+0x65c>)
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4413      	add	r3, r2
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d8c:	015b      	lsls	r3, r3, #5
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	4950      	ldr	r1, [pc, #320]	; (8003ed4 <HAL_OSPIM_Config+0x65c>)
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	3b01      	subs	r3, #1
 8003d98:	f042 0210 	orr.w	r2, r2, #16
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	440b      	add	r3, r1
 8003da0:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d019      	beq.n	8003de2 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003dae:	4a49      	ldr	r2, [pc, #292]	; (8003ed4 <HAL_OSPIM_Config+0x65c>)
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	3b01      	subs	r3, #1
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4413      	add	r3, r2
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dc6:	049b      	lsls	r3, r3, #18
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	4942      	ldr	r1, [pc, #264]	; (8003ed4 <HAL_OSPIM_Config+0x65c>)
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	440b      	add	r3, r1
 8003dde:	605a      	str	r2, [r3, #4]
 8003de0:	e01c      	b.n	8003e1c <HAL_OSPIM_Config+0x5a4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d018      	beq.n	8003e1c <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003dea:	4a3a      	ldr	r2, [pc, #232]	; (8003ed4 <HAL_OSPIM_Config+0x65c>)
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	3b01      	subs	r3, #1
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e02:	069b      	lsls	r3, r3, #26
 8003e04:	431a      	orrs	r2, r3
 8003e06:	4933      	ldr	r1, [pc, #204]	; (8003ed4 <HAL_OSPIM_Config+0x65c>)
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	440b      	add	r3, r1
 8003e1a:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d019      	beq.n	8003e5c <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003e28:	4a2a      	ldr	r2, [pc, #168]	; (8003ed4 <HAL_OSPIM_Config+0x65c>)
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4413      	add	r3, r2
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003e3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e40:	049b      	lsls	r3, r3, #18
 8003e42:	431a      	orrs	r2, r3
 8003e44:	4923      	ldr	r1, [pc, #140]	; (8003ed4 <HAL_OSPIM_Config+0x65c>)
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	440b      	add	r3, r1
 8003e58:	605a      	str	r2, [r3, #4]
 8003e5a:	e01c      	b.n	8003e96 <HAL_OSPIM_Config+0x61e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d018      	beq.n	8003e96 <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003e64:	4a1b      	ldr	r2, [pc, #108]	; (8003ed4 <HAL_OSPIM_Config+0x65c>)
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	4413      	add	r3, r2
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003e7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e7c:	069b      	lsls	r3, r3, #26
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	4914      	ldr	r1, [pc, #80]	; (8003ed4 <HAL_OSPIM_Config+0x65c>)
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	3b01      	subs	r3, #1
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	440b      	add	r3, r1
 8003e94:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8003e96:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d005      	beq.n	8003eae <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003ea2:	4b0d      	ldr	r3, [pc, #52]	; (8003ed8 <HAL_OSPIM_Config+0x660>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a0c      	ldr	r2, [pc, #48]	; (8003ed8 <HAL_OSPIM_Config+0x660>)
 8003ea8:	f043 0301 	orr.w	r3, r3, #1
 8003eac:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8003eae:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d005      	beq.n	8003ec6 <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003eba:	4b08      	ldr	r3, [pc, #32]	; (8003edc <HAL_OSPIM_Config+0x664>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a07      	ldr	r2, [pc, #28]	; (8003edc <HAL_OSPIM_Config+0x664>)
 8003ec0:	f043 0301 	orr.w	r3, r3, #1
 8003ec4:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8003ec6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3748      	adds	r7, #72	; 0x48
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	50061c00 	.word	0x50061c00
 8003ed8:	a0001000 	.word	0xa0001000
 8003edc:	a0001400 	.word	0xa0001400

08003ee0 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	603b      	str	r3, [r7, #0]
 8003eec:	4613      	mov	r3, r2
 8003eee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003ef0:	e01a      	b.n	8003f28 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef8:	d016      	beq.n	8003f28 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003efa:	f7fd fcab 	bl	8001854 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d302      	bcc.n	8003f10 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10b      	bne.n	8003f28 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f16:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f1c:	f043 0201 	orr.w	r2, r3, #1
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e00e      	b.n	8003f46 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6a1a      	ldr	r2, [r3, #32]
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	4013      	ands	r3, r2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	bf14      	ite	ne
 8003f36:	2301      	movne	r3, #1
 8003f38:	2300      	moveq	r3, #0
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	79fb      	ldrb	r3, [r7, #7]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d1d6      	bne.n	8003ef2 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
	...

08003f50 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b087      	sub	sp, #28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	4603      	mov	r3, r0
 8003f58:	6039      	str	r1, [r7, #0]
 8003f5a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8003f60:	2300      	movs	r3, #0
 8003f62:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8003f64:	79fb      	ldrb	r3, [r7, #7]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d005      	beq.n	8003f76 <OSPIM_GetConfig+0x26>
 8003f6a:	79fb      	ldrb	r3, [r7, #7]
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d802      	bhi.n	8003f76 <OSPIM_GetConfig+0x26>
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d102      	bne.n	8003f7c <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	75fb      	strb	r3, [r7, #23]
 8003f7a:	e08e      	b.n	800409a <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2200      	movs	r2, #0
 8003f86:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	2200      	movs	r2, #0
 8003f92:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	2200      	movs	r2, #0
 8003f98:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8003f9a:	79fb      	ldrb	r3, [r7, #7]
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d101      	bne.n	8003fa4 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8003fa0:	4b41      	ldr	r3, [pc, #260]	; (80040a8 <OSPIM_GetConfig+0x158>)
 8003fa2:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	e074      	b.n	8004094 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8003faa:	4a40      	ldr	r2, [pc, #256]	; (80040ac <OSPIM_GetConfig+0x15c>)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	f003 0301 	and.w	r3, r3, #1
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00a      	beq.n	8003fd6 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	4053      	eors	r3, r2
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d103      	bne.n	8003fd6 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	1c5a      	adds	r2, r3, #1
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	f003 0310 	and.w	r3, r3, #16
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00a      	beq.n	8003ff6 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	4053      	eors	r3, r2
 8003fe6:	f003 0320 	and.w	r3, r3, #32
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d103      	bne.n	8003ff6 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	1c5a      	adds	r2, r3, #1
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00a      	beq.n	8004016 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	4053      	eors	r3, r2
 8004006:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800400a:	2b00      	cmp	r3, #0
 800400c:	d103      	bne.n	8004016 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	1c5a      	adds	r2, r3, #1
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d018      	beq.n	8004052 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8004020:	68ba      	ldr	r2, [r7, #8]
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	4053      	eors	r3, r2
 8004026:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d111      	bne.n	8004052 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d106      	bne.n	8004046 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	3301      	adds	r3, #1
 800403c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	60da      	str	r2, [r3, #12]
 8004044:	e005      	b.n	8004052 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	3301      	adds	r3, #1
 800404a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d018      	beq.n	800408e <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 800405c:	68ba      	ldr	r2, [r7, #8]
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	4053      	eors	r3, r2
 8004062:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d111      	bne.n	800408e <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d106      	bne.n	8004082 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	3301      	adds	r3, #1
 8004078:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	611a      	str	r2, [r3, #16]
 8004080:	e005      	b.n	800408e <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	3301      	adds	r3, #1
 8004086:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	3301      	adds	r3, #1
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d987      	bls.n	8003faa <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 800409a:	7dfb      	ldrb	r3, [r7, #23]
}
 800409c:	4618      	mov	r0, r3
 800409e:	371c      	adds	r7, #28
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	04040222 	.word	0x04040222
 80040ac:	50061c00 	.word	0x50061c00

080040b0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040b4:	4b05      	ldr	r3, [pc, #20]	; (80040cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a04      	ldr	r2, [pc, #16]	; (80040cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040be:	6013      	str	r3, [r2, #0]
}
 80040c0:	bf00      	nop
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	40007000 	.word	0x40007000

080040d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040d4:	4b0d      	ldr	r3, [pc, #52]	; (800410c <HAL_PWREx_GetVoltageRange+0x3c>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040e0:	d102      	bne.n	80040e8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80040e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040e6:	e00b      	b.n	8004100 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80040e8:	4b08      	ldr	r3, [pc, #32]	; (800410c <HAL_PWREx_GetVoltageRange+0x3c>)
 80040ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040f6:	d102      	bne.n	80040fe <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80040f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040fc:	e000      	b.n	8004100 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80040fe:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004100:	4618      	mov	r0, r3
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	40007000 	.word	0x40007000

08004110 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d141      	bne.n	80041a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800411e:	4b4b      	ldr	r3, [pc, #300]	; (800424c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800412a:	d131      	bne.n	8004190 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800412c:	4b47      	ldr	r3, [pc, #284]	; (800424c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800412e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004132:	4a46      	ldr	r2, [pc, #280]	; (800424c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004138:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800413c:	4b43      	ldr	r3, [pc, #268]	; (800424c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004144:	4a41      	ldr	r2, [pc, #260]	; (800424c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004146:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800414a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800414c:	4b40      	ldr	r3, [pc, #256]	; (8004250 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2232      	movs	r2, #50	; 0x32
 8004152:	fb02 f303 	mul.w	r3, r2, r3
 8004156:	4a3f      	ldr	r2, [pc, #252]	; (8004254 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004158:	fba2 2303 	umull	r2, r3, r2, r3
 800415c:	0c9b      	lsrs	r3, r3, #18
 800415e:	3301      	adds	r3, #1
 8004160:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004162:	e002      	b.n	800416a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	3b01      	subs	r3, #1
 8004168:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800416a:	4b38      	ldr	r3, [pc, #224]	; (800424c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004176:	d102      	bne.n	800417e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1f2      	bne.n	8004164 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800417e:	4b33      	ldr	r3, [pc, #204]	; (800424c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800418a:	d158      	bne.n	800423e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e057      	b.n	8004240 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004190:	4b2e      	ldr	r3, [pc, #184]	; (800424c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004192:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004196:	4a2d      	ldr	r2, [pc, #180]	; (800424c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004198:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800419c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80041a0:	e04d      	b.n	800423e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041a8:	d141      	bne.n	800422e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80041aa:	4b28      	ldr	r3, [pc, #160]	; (800424c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041b6:	d131      	bne.n	800421c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041b8:	4b24      	ldr	r3, [pc, #144]	; (800424c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041be:	4a23      	ldr	r2, [pc, #140]	; (800424c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041c8:	4b20      	ldr	r3, [pc, #128]	; (800424c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041d0:	4a1e      	ldr	r2, [pc, #120]	; (800424c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80041d8:	4b1d      	ldr	r3, [pc, #116]	; (8004250 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2232      	movs	r2, #50	; 0x32
 80041de:	fb02 f303 	mul.w	r3, r2, r3
 80041e2:	4a1c      	ldr	r2, [pc, #112]	; (8004254 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80041e4:	fba2 2303 	umull	r2, r3, r2, r3
 80041e8:	0c9b      	lsrs	r3, r3, #18
 80041ea:	3301      	adds	r3, #1
 80041ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041ee:	e002      	b.n	80041f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	3b01      	subs	r3, #1
 80041f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041f6:	4b15      	ldr	r3, [pc, #84]	; (800424c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004202:	d102      	bne.n	800420a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1f2      	bne.n	80041f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800420a:	4b10      	ldr	r3, [pc, #64]	; (800424c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004216:	d112      	bne.n	800423e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e011      	b.n	8004240 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800421c:	4b0b      	ldr	r3, [pc, #44]	; (800424c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800421e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004222:	4a0a      	ldr	r2, [pc, #40]	; (800424c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004228:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800422c:	e007      	b.n	800423e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800422e:	4b07      	ldr	r3, [pc, #28]	; (800424c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004236:	4a05      	ldr	r2, [pc, #20]	; (800424c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004238:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800423c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	40007000 	.word	0x40007000
 8004250:	20000000 	.word	0x20000000
 8004254:	431bde83 	.word	0x431bde83

08004258 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b088      	sub	sp, #32
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d102      	bne.n	800426c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	f000 bc08 	b.w	8004a7c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800426c:	4b96      	ldr	r3, [pc, #600]	; (80044c8 <HAL_RCC_OscConfig+0x270>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f003 030c 	and.w	r3, r3, #12
 8004274:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004276:	4b94      	ldr	r3, [pc, #592]	; (80044c8 <HAL_RCC_OscConfig+0x270>)
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f003 0303 	and.w	r3, r3, #3
 800427e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0310 	and.w	r3, r3, #16
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 80e4 	beq.w	8004456 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d007      	beq.n	80042a4 <HAL_RCC_OscConfig+0x4c>
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	2b0c      	cmp	r3, #12
 8004298:	f040 808b 	bne.w	80043b2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	f040 8087 	bne.w	80043b2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042a4:	4b88      	ldr	r3, [pc, #544]	; (80044c8 <HAL_RCC_OscConfig+0x270>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0302 	and.w	r3, r3, #2
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d005      	beq.n	80042bc <HAL_RCC_OscConfig+0x64>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d101      	bne.n	80042bc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e3df      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a1a      	ldr	r2, [r3, #32]
 80042c0:	4b81      	ldr	r3, [pc, #516]	; (80044c8 <HAL_RCC_OscConfig+0x270>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0308 	and.w	r3, r3, #8
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d004      	beq.n	80042d6 <HAL_RCC_OscConfig+0x7e>
 80042cc:	4b7e      	ldr	r3, [pc, #504]	; (80044c8 <HAL_RCC_OscConfig+0x270>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042d4:	e005      	b.n	80042e2 <HAL_RCC_OscConfig+0x8a>
 80042d6:	4b7c      	ldr	r3, [pc, #496]	; (80044c8 <HAL_RCC_OscConfig+0x270>)
 80042d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042dc:	091b      	lsrs	r3, r3, #4
 80042de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d223      	bcs.n	800432e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f000 fdcc 	bl	8004e88 <RCC_SetFlashLatencyFromMSIRange>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e3c0      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042fa:	4b73      	ldr	r3, [pc, #460]	; (80044c8 <HAL_RCC_OscConfig+0x270>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a72      	ldr	r2, [pc, #456]	; (80044c8 <HAL_RCC_OscConfig+0x270>)
 8004300:	f043 0308 	orr.w	r3, r3, #8
 8004304:	6013      	str	r3, [r2, #0]
 8004306:	4b70      	ldr	r3, [pc, #448]	; (80044c8 <HAL_RCC_OscConfig+0x270>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	496d      	ldr	r1, [pc, #436]	; (80044c8 <HAL_RCC_OscConfig+0x270>)
 8004314:	4313      	orrs	r3, r2
 8004316:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004318:	4b6b      	ldr	r3, [pc, #428]	; (80044c8 <HAL_RCC_OscConfig+0x270>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	69db      	ldr	r3, [r3, #28]
 8004324:	021b      	lsls	r3, r3, #8
 8004326:	4968      	ldr	r1, [pc, #416]	; (80044c8 <HAL_RCC_OscConfig+0x270>)
 8004328:	4313      	orrs	r3, r2
 800432a:	604b      	str	r3, [r1, #4]
 800432c:	e025      	b.n	800437a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800432e:	4b66      	ldr	r3, [pc, #408]	; (80044c8 <HAL_RCC_OscConfig+0x270>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a65      	ldr	r2, [pc, #404]	; (80044c8 <HAL_RCC_OscConfig+0x270>)
 8004334:	f043 0308 	orr.w	r3, r3, #8
 8004338:	6013      	str	r3, [r2, #0]
 800433a:	4b63      	ldr	r3, [pc, #396]	; (80044c8 <HAL_RCC_OscConfig+0x270>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	4960      	ldr	r1, [pc, #384]	; (80044c8 <HAL_RCC_OscConfig+0x270>)
 8004348:	4313      	orrs	r3, r2
 800434a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800434c:	4b5e      	ldr	r3, [pc, #376]	; (80044c8 <HAL_RCC_OscConfig+0x270>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	69db      	ldr	r3, [r3, #28]
 8004358:	021b      	lsls	r3, r3, #8
 800435a:	495b      	ldr	r1, [pc, #364]	; (80044c8 <HAL_RCC_OscConfig+0x270>)
 800435c:	4313      	orrs	r3, r2
 800435e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d109      	bne.n	800437a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	4618      	mov	r0, r3
 800436c:	f000 fd8c 	bl	8004e88 <RCC_SetFlashLatencyFromMSIRange>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e380      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800437a:	f000 fcc1 	bl	8004d00 <HAL_RCC_GetSysClockFreq>
 800437e:	4602      	mov	r2, r0
 8004380:	4b51      	ldr	r3, [pc, #324]	; (80044c8 <HAL_RCC_OscConfig+0x270>)
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	091b      	lsrs	r3, r3, #4
 8004386:	f003 030f 	and.w	r3, r3, #15
 800438a:	4950      	ldr	r1, [pc, #320]	; (80044cc <HAL_RCC_OscConfig+0x274>)
 800438c:	5ccb      	ldrb	r3, [r1, r3]
 800438e:	f003 031f 	and.w	r3, r3, #31
 8004392:	fa22 f303 	lsr.w	r3, r2, r3
 8004396:	4a4e      	ldr	r2, [pc, #312]	; (80044d0 <HAL_RCC_OscConfig+0x278>)
 8004398:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800439a:	4b4e      	ldr	r3, [pc, #312]	; (80044d4 <HAL_RCC_OscConfig+0x27c>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4618      	mov	r0, r3
 80043a0:	f7fd fa08 	bl	80017b4 <HAL_InitTick>
 80043a4:	4603      	mov	r3, r0
 80043a6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80043a8:	7bfb      	ldrb	r3, [r7, #15]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d052      	beq.n	8004454 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80043ae:	7bfb      	ldrb	r3, [r7, #15]
 80043b0:	e364      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d032      	beq.n	8004420 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80043ba:	4b43      	ldr	r3, [pc, #268]	; (80044c8 <HAL_RCC_OscConfig+0x270>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a42      	ldr	r2, [pc, #264]	; (80044c8 <HAL_RCC_OscConfig+0x270>)
 80043c0:	f043 0301 	orr.w	r3, r3, #1
 80043c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80043c6:	f7fd fa45 	bl	8001854 <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043cc:	e008      	b.n	80043e0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043ce:	f7fd fa41 	bl	8001854 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e34d      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043e0:	4b39      	ldr	r3, [pc, #228]	; (80044c8 <HAL_RCC_OscConfig+0x270>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0f0      	beq.n	80043ce <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043ec:	4b36      	ldr	r3, [pc, #216]	; (80044c8 <HAL_RCC_OscConfig+0x270>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a35      	ldr	r2, [pc, #212]	; (80044c8 <HAL_RCC_OscConfig+0x270>)
 80043f2:	f043 0308 	orr.w	r3, r3, #8
 80043f6:	6013      	str	r3, [r2, #0]
 80043f8:	4b33      	ldr	r3, [pc, #204]	; (80044c8 <HAL_RCC_OscConfig+0x270>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	4930      	ldr	r1, [pc, #192]	; (80044c8 <HAL_RCC_OscConfig+0x270>)
 8004406:	4313      	orrs	r3, r2
 8004408:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800440a:	4b2f      	ldr	r3, [pc, #188]	; (80044c8 <HAL_RCC_OscConfig+0x270>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	021b      	lsls	r3, r3, #8
 8004418:	492b      	ldr	r1, [pc, #172]	; (80044c8 <HAL_RCC_OscConfig+0x270>)
 800441a:	4313      	orrs	r3, r2
 800441c:	604b      	str	r3, [r1, #4]
 800441e:	e01a      	b.n	8004456 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004420:	4b29      	ldr	r3, [pc, #164]	; (80044c8 <HAL_RCC_OscConfig+0x270>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a28      	ldr	r2, [pc, #160]	; (80044c8 <HAL_RCC_OscConfig+0x270>)
 8004426:	f023 0301 	bic.w	r3, r3, #1
 800442a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800442c:	f7fd fa12 	bl	8001854 <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004434:	f7fd fa0e 	bl	8001854 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e31a      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004446:	4b20      	ldr	r3, [pc, #128]	; (80044c8 <HAL_RCC_OscConfig+0x270>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1f0      	bne.n	8004434 <HAL_RCC_OscConfig+0x1dc>
 8004452:	e000      	b.n	8004456 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004454:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d073      	beq.n	800454a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	2b08      	cmp	r3, #8
 8004466:	d005      	beq.n	8004474 <HAL_RCC_OscConfig+0x21c>
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	2b0c      	cmp	r3, #12
 800446c:	d10e      	bne.n	800448c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	2b03      	cmp	r3, #3
 8004472:	d10b      	bne.n	800448c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004474:	4b14      	ldr	r3, [pc, #80]	; (80044c8 <HAL_RCC_OscConfig+0x270>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d063      	beq.n	8004548 <HAL_RCC_OscConfig+0x2f0>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d15f      	bne.n	8004548 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e2f7      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004494:	d106      	bne.n	80044a4 <HAL_RCC_OscConfig+0x24c>
 8004496:	4b0c      	ldr	r3, [pc, #48]	; (80044c8 <HAL_RCC_OscConfig+0x270>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a0b      	ldr	r2, [pc, #44]	; (80044c8 <HAL_RCC_OscConfig+0x270>)
 800449c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a0:	6013      	str	r3, [r2, #0]
 80044a2:	e025      	b.n	80044f0 <HAL_RCC_OscConfig+0x298>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044ac:	d114      	bne.n	80044d8 <HAL_RCC_OscConfig+0x280>
 80044ae:	4b06      	ldr	r3, [pc, #24]	; (80044c8 <HAL_RCC_OscConfig+0x270>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a05      	ldr	r2, [pc, #20]	; (80044c8 <HAL_RCC_OscConfig+0x270>)
 80044b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044b8:	6013      	str	r3, [r2, #0]
 80044ba:	4b03      	ldr	r3, [pc, #12]	; (80044c8 <HAL_RCC_OscConfig+0x270>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a02      	ldr	r2, [pc, #8]	; (80044c8 <HAL_RCC_OscConfig+0x270>)
 80044c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c4:	6013      	str	r3, [r2, #0]
 80044c6:	e013      	b.n	80044f0 <HAL_RCC_OscConfig+0x298>
 80044c8:	40021000 	.word	0x40021000
 80044cc:	080068e8 	.word	0x080068e8
 80044d0:	20000000 	.word	0x20000000
 80044d4:	20000004 	.word	0x20000004
 80044d8:	4ba0      	ldr	r3, [pc, #640]	; (800475c <HAL_RCC_OscConfig+0x504>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a9f      	ldr	r2, [pc, #636]	; (800475c <HAL_RCC_OscConfig+0x504>)
 80044de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044e2:	6013      	str	r3, [r2, #0]
 80044e4:	4b9d      	ldr	r3, [pc, #628]	; (800475c <HAL_RCC_OscConfig+0x504>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a9c      	ldr	r2, [pc, #624]	; (800475c <HAL_RCC_OscConfig+0x504>)
 80044ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d013      	beq.n	8004520 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f8:	f7fd f9ac 	bl	8001854 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004500:	f7fd f9a8 	bl	8001854 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b64      	cmp	r3, #100	; 0x64
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e2b4      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004512:	4b92      	ldr	r3, [pc, #584]	; (800475c <HAL_RCC_OscConfig+0x504>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d0f0      	beq.n	8004500 <HAL_RCC_OscConfig+0x2a8>
 800451e:	e014      	b.n	800454a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004520:	f7fd f998 	bl	8001854 <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004528:	f7fd f994 	bl	8001854 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b64      	cmp	r3, #100	; 0x64
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e2a0      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800453a:	4b88      	ldr	r3, [pc, #544]	; (800475c <HAL_RCC_OscConfig+0x504>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1f0      	bne.n	8004528 <HAL_RCC_OscConfig+0x2d0>
 8004546:	e000      	b.n	800454a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d060      	beq.n	8004618 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	2b04      	cmp	r3, #4
 800455a:	d005      	beq.n	8004568 <HAL_RCC_OscConfig+0x310>
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	2b0c      	cmp	r3, #12
 8004560:	d119      	bne.n	8004596 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2b02      	cmp	r3, #2
 8004566:	d116      	bne.n	8004596 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004568:	4b7c      	ldr	r3, [pc, #496]	; (800475c <HAL_RCC_OscConfig+0x504>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004570:	2b00      	cmp	r3, #0
 8004572:	d005      	beq.n	8004580 <HAL_RCC_OscConfig+0x328>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d101      	bne.n	8004580 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e27d      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004580:	4b76      	ldr	r3, [pc, #472]	; (800475c <HAL_RCC_OscConfig+0x504>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	061b      	lsls	r3, r3, #24
 800458e:	4973      	ldr	r1, [pc, #460]	; (800475c <HAL_RCC_OscConfig+0x504>)
 8004590:	4313      	orrs	r3, r2
 8004592:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004594:	e040      	b.n	8004618 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d023      	beq.n	80045e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800459e:	4b6f      	ldr	r3, [pc, #444]	; (800475c <HAL_RCC_OscConfig+0x504>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a6e      	ldr	r2, [pc, #440]	; (800475c <HAL_RCC_OscConfig+0x504>)
 80045a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045aa:	f7fd f953 	bl	8001854 <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045b0:	e008      	b.n	80045c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045b2:	f7fd f94f 	bl	8001854 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e25b      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045c4:	4b65      	ldr	r3, [pc, #404]	; (800475c <HAL_RCC_OscConfig+0x504>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0f0      	beq.n	80045b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d0:	4b62      	ldr	r3, [pc, #392]	; (800475c <HAL_RCC_OscConfig+0x504>)
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	061b      	lsls	r3, r3, #24
 80045de:	495f      	ldr	r1, [pc, #380]	; (800475c <HAL_RCC_OscConfig+0x504>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	604b      	str	r3, [r1, #4]
 80045e4:	e018      	b.n	8004618 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045e6:	4b5d      	ldr	r3, [pc, #372]	; (800475c <HAL_RCC_OscConfig+0x504>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a5c      	ldr	r2, [pc, #368]	; (800475c <HAL_RCC_OscConfig+0x504>)
 80045ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f2:	f7fd f92f 	bl	8001854 <HAL_GetTick>
 80045f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045f8:	e008      	b.n	800460c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045fa:	f7fd f92b 	bl	8001854 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d901      	bls.n	800460c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e237      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800460c:	4b53      	ldr	r3, [pc, #332]	; (800475c <HAL_RCC_OscConfig+0x504>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1f0      	bne.n	80045fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0308 	and.w	r3, r3, #8
 8004620:	2b00      	cmp	r3, #0
 8004622:	d03c      	beq.n	800469e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d01c      	beq.n	8004666 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800462c:	4b4b      	ldr	r3, [pc, #300]	; (800475c <HAL_RCC_OscConfig+0x504>)
 800462e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004632:	4a4a      	ldr	r2, [pc, #296]	; (800475c <HAL_RCC_OscConfig+0x504>)
 8004634:	f043 0301 	orr.w	r3, r3, #1
 8004638:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800463c:	f7fd f90a 	bl	8001854 <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004644:	f7fd f906 	bl	8001854 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e212      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004656:	4b41      	ldr	r3, [pc, #260]	; (800475c <HAL_RCC_OscConfig+0x504>)
 8004658:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0ef      	beq.n	8004644 <HAL_RCC_OscConfig+0x3ec>
 8004664:	e01b      	b.n	800469e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004666:	4b3d      	ldr	r3, [pc, #244]	; (800475c <HAL_RCC_OscConfig+0x504>)
 8004668:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800466c:	4a3b      	ldr	r2, [pc, #236]	; (800475c <HAL_RCC_OscConfig+0x504>)
 800466e:	f023 0301 	bic.w	r3, r3, #1
 8004672:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004676:	f7fd f8ed 	bl	8001854 <HAL_GetTick>
 800467a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800467c:	e008      	b.n	8004690 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800467e:	f7fd f8e9 	bl	8001854 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e1f5      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004690:	4b32      	ldr	r3, [pc, #200]	; (800475c <HAL_RCC_OscConfig+0x504>)
 8004692:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1ef      	bne.n	800467e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0304 	and.w	r3, r3, #4
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f000 80a6 	beq.w	80047f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046ac:	2300      	movs	r3, #0
 80046ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80046b0:	4b2a      	ldr	r3, [pc, #168]	; (800475c <HAL_RCC_OscConfig+0x504>)
 80046b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10d      	bne.n	80046d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046bc:	4b27      	ldr	r3, [pc, #156]	; (800475c <HAL_RCC_OscConfig+0x504>)
 80046be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c0:	4a26      	ldr	r2, [pc, #152]	; (800475c <HAL_RCC_OscConfig+0x504>)
 80046c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046c6:	6593      	str	r3, [r2, #88]	; 0x58
 80046c8:	4b24      	ldr	r3, [pc, #144]	; (800475c <HAL_RCC_OscConfig+0x504>)
 80046ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d0:	60bb      	str	r3, [r7, #8]
 80046d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046d4:	2301      	movs	r3, #1
 80046d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046d8:	4b21      	ldr	r3, [pc, #132]	; (8004760 <HAL_RCC_OscConfig+0x508>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d118      	bne.n	8004716 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046e4:	4b1e      	ldr	r3, [pc, #120]	; (8004760 <HAL_RCC_OscConfig+0x508>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a1d      	ldr	r2, [pc, #116]	; (8004760 <HAL_RCC_OscConfig+0x508>)
 80046ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046f0:	f7fd f8b0 	bl	8001854 <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046f6:	e008      	b.n	800470a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046f8:	f7fd f8ac 	bl	8001854 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e1b8      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800470a:	4b15      	ldr	r3, [pc, #84]	; (8004760 <HAL_RCC_OscConfig+0x508>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004712:	2b00      	cmp	r3, #0
 8004714:	d0f0      	beq.n	80046f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d108      	bne.n	8004730 <HAL_RCC_OscConfig+0x4d8>
 800471e:	4b0f      	ldr	r3, [pc, #60]	; (800475c <HAL_RCC_OscConfig+0x504>)
 8004720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004724:	4a0d      	ldr	r2, [pc, #52]	; (800475c <HAL_RCC_OscConfig+0x504>)
 8004726:	f043 0301 	orr.w	r3, r3, #1
 800472a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800472e:	e029      	b.n	8004784 <HAL_RCC_OscConfig+0x52c>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	2b05      	cmp	r3, #5
 8004736:	d115      	bne.n	8004764 <HAL_RCC_OscConfig+0x50c>
 8004738:	4b08      	ldr	r3, [pc, #32]	; (800475c <HAL_RCC_OscConfig+0x504>)
 800473a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800473e:	4a07      	ldr	r2, [pc, #28]	; (800475c <HAL_RCC_OscConfig+0x504>)
 8004740:	f043 0304 	orr.w	r3, r3, #4
 8004744:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004748:	4b04      	ldr	r3, [pc, #16]	; (800475c <HAL_RCC_OscConfig+0x504>)
 800474a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474e:	4a03      	ldr	r2, [pc, #12]	; (800475c <HAL_RCC_OscConfig+0x504>)
 8004750:	f043 0301 	orr.w	r3, r3, #1
 8004754:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004758:	e014      	b.n	8004784 <HAL_RCC_OscConfig+0x52c>
 800475a:	bf00      	nop
 800475c:	40021000 	.word	0x40021000
 8004760:	40007000 	.word	0x40007000
 8004764:	4b9d      	ldr	r3, [pc, #628]	; (80049dc <HAL_RCC_OscConfig+0x784>)
 8004766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476a:	4a9c      	ldr	r2, [pc, #624]	; (80049dc <HAL_RCC_OscConfig+0x784>)
 800476c:	f023 0301 	bic.w	r3, r3, #1
 8004770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004774:	4b99      	ldr	r3, [pc, #612]	; (80049dc <HAL_RCC_OscConfig+0x784>)
 8004776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800477a:	4a98      	ldr	r2, [pc, #608]	; (80049dc <HAL_RCC_OscConfig+0x784>)
 800477c:	f023 0304 	bic.w	r3, r3, #4
 8004780:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d016      	beq.n	80047ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800478c:	f7fd f862 	bl	8001854 <HAL_GetTick>
 8004790:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004792:	e00a      	b.n	80047aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004794:	f7fd f85e 	bl	8001854 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e168      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047aa:	4b8c      	ldr	r3, [pc, #560]	; (80049dc <HAL_RCC_OscConfig+0x784>)
 80047ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d0ed      	beq.n	8004794 <HAL_RCC_OscConfig+0x53c>
 80047b8:	e015      	b.n	80047e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ba:	f7fd f84b 	bl	8001854 <HAL_GetTick>
 80047be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047c0:	e00a      	b.n	80047d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c2:	f7fd f847 	bl	8001854 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d901      	bls.n	80047d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e151      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047d8:	4b80      	ldr	r3, [pc, #512]	; (80049dc <HAL_RCC_OscConfig+0x784>)
 80047da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1ed      	bne.n	80047c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047e6:	7ffb      	ldrb	r3, [r7, #31]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d105      	bne.n	80047f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047ec:	4b7b      	ldr	r3, [pc, #492]	; (80049dc <HAL_RCC_OscConfig+0x784>)
 80047ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f0:	4a7a      	ldr	r2, [pc, #488]	; (80049dc <HAL_RCC_OscConfig+0x784>)
 80047f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047f6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0320 	and.w	r3, r3, #32
 8004800:	2b00      	cmp	r3, #0
 8004802:	d03c      	beq.n	800487e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004808:	2b00      	cmp	r3, #0
 800480a:	d01c      	beq.n	8004846 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800480c:	4b73      	ldr	r3, [pc, #460]	; (80049dc <HAL_RCC_OscConfig+0x784>)
 800480e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004812:	4a72      	ldr	r2, [pc, #456]	; (80049dc <HAL_RCC_OscConfig+0x784>)
 8004814:	f043 0301 	orr.w	r3, r3, #1
 8004818:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800481c:	f7fd f81a 	bl	8001854 <HAL_GetTick>
 8004820:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004822:	e008      	b.n	8004836 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004824:	f7fd f816 	bl	8001854 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b02      	cmp	r3, #2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e122      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004836:	4b69      	ldr	r3, [pc, #420]	; (80049dc <HAL_RCC_OscConfig+0x784>)
 8004838:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d0ef      	beq.n	8004824 <HAL_RCC_OscConfig+0x5cc>
 8004844:	e01b      	b.n	800487e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004846:	4b65      	ldr	r3, [pc, #404]	; (80049dc <HAL_RCC_OscConfig+0x784>)
 8004848:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800484c:	4a63      	ldr	r2, [pc, #396]	; (80049dc <HAL_RCC_OscConfig+0x784>)
 800484e:	f023 0301 	bic.w	r3, r3, #1
 8004852:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004856:	f7fc fffd 	bl	8001854 <HAL_GetTick>
 800485a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800485c:	e008      	b.n	8004870 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800485e:	f7fc fff9 	bl	8001854 <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	2b02      	cmp	r3, #2
 800486a:	d901      	bls.n	8004870 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e105      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004870:	4b5a      	ldr	r3, [pc, #360]	; (80049dc <HAL_RCC_OscConfig+0x784>)
 8004872:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1ef      	bne.n	800485e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004882:	2b00      	cmp	r3, #0
 8004884:	f000 80f9 	beq.w	8004a7a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488c:	2b02      	cmp	r3, #2
 800488e:	f040 80cf 	bne.w	8004a30 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004892:	4b52      	ldr	r3, [pc, #328]	; (80049dc <HAL_RCC_OscConfig+0x784>)
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f003 0203 	and.w	r2, r3, #3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d12c      	bne.n	8004900 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b0:	3b01      	subs	r3, #1
 80048b2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d123      	bne.n	8004900 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d11b      	bne.n	8004900 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d113      	bne.n	8004900 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e2:	085b      	lsrs	r3, r3, #1
 80048e4:	3b01      	subs	r3, #1
 80048e6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d109      	bne.n	8004900 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f6:	085b      	lsrs	r3, r3, #1
 80048f8:	3b01      	subs	r3, #1
 80048fa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d071      	beq.n	80049e4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	2b0c      	cmp	r3, #12
 8004904:	d068      	beq.n	80049d8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004906:	4b35      	ldr	r3, [pc, #212]	; (80049dc <HAL_RCC_OscConfig+0x784>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d105      	bne.n	800491e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004912:	4b32      	ldr	r3, [pc, #200]	; (80049dc <HAL_RCC_OscConfig+0x784>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d001      	beq.n	8004922 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e0ac      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004922:	4b2e      	ldr	r3, [pc, #184]	; (80049dc <HAL_RCC_OscConfig+0x784>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a2d      	ldr	r2, [pc, #180]	; (80049dc <HAL_RCC_OscConfig+0x784>)
 8004928:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800492c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800492e:	f7fc ff91 	bl	8001854 <HAL_GetTick>
 8004932:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004934:	e008      	b.n	8004948 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004936:	f7fc ff8d 	bl	8001854 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d901      	bls.n	8004948 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e099      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004948:	4b24      	ldr	r3, [pc, #144]	; (80049dc <HAL_RCC_OscConfig+0x784>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1f0      	bne.n	8004936 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004954:	4b21      	ldr	r3, [pc, #132]	; (80049dc <HAL_RCC_OscConfig+0x784>)
 8004956:	68da      	ldr	r2, [r3, #12]
 8004958:	4b21      	ldr	r3, [pc, #132]	; (80049e0 <HAL_RCC_OscConfig+0x788>)
 800495a:	4013      	ands	r3, r2
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004964:	3a01      	subs	r2, #1
 8004966:	0112      	lsls	r2, r2, #4
 8004968:	4311      	orrs	r1, r2
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800496e:	0212      	lsls	r2, r2, #8
 8004970:	4311      	orrs	r1, r2
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004976:	0852      	lsrs	r2, r2, #1
 8004978:	3a01      	subs	r2, #1
 800497a:	0552      	lsls	r2, r2, #21
 800497c:	4311      	orrs	r1, r2
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004982:	0852      	lsrs	r2, r2, #1
 8004984:	3a01      	subs	r2, #1
 8004986:	0652      	lsls	r2, r2, #25
 8004988:	4311      	orrs	r1, r2
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800498e:	06d2      	lsls	r2, r2, #27
 8004990:	430a      	orrs	r2, r1
 8004992:	4912      	ldr	r1, [pc, #72]	; (80049dc <HAL_RCC_OscConfig+0x784>)
 8004994:	4313      	orrs	r3, r2
 8004996:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004998:	4b10      	ldr	r3, [pc, #64]	; (80049dc <HAL_RCC_OscConfig+0x784>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a0f      	ldr	r2, [pc, #60]	; (80049dc <HAL_RCC_OscConfig+0x784>)
 800499e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049a4:	4b0d      	ldr	r3, [pc, #52]	; (80049dc <HAL_RCC_OscConfig+0x784>)
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	4a0c      	ldr	r2, [pc, #48]	; (80049dc <HAL_RCC_OscConfig+0x784>)
 80049aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049b0:	f7fc ff50 	bl	8001854 <HAL_GetTick>
 80049b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049b6:	e008      	b.n	80049ca <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049b8:	f7fc ff4c 	bl	8001854 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e058      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ca:	4b04      	ldr	r3, [pc, #16]	; (80049dc <HAL_RCC_OscConfig+0x784>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d0f0      	beq.n	80049b8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049d6:	e050      	b.n	8004a7a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e04f      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
 80049dc:	40021000 	.word	0x40021000
 80049e0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049e4:	4b27      	ldr	r3, [pc, #156]	; (8004a84 <HAL_RCC_OscConfig+0x82c>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d144      	bne.n	8004a7a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80049f0:	4b24      	ldr	r3, [pc, #144]	; (8004a84 <HAL_RCC_OscConfig+0x82c>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a23      	ldr	r2, [pc, #140]	; (8004a84 <HAL_RCC_OscConfig+0x82c>)
 80049f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049fc:	4b21      	ldr	r3, [pc, #132]	; (8004a84 <HAL_RCC_OscConfig+0x82c>)
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	4a20      	ldr	r2, [pc, #128]	; (8004a84 <HAL_RCC_OscConfig+0x82c>)
 8004a02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a06:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a08:	f7fc ff24 	bl	8001854 <HAL_GetTick>
 8004a0c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a0e:	e008      	b.n	8004a22 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a10:	f7fc ff20 	bl	8001854 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e02c      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a22:	4b18      	ldr	r3, [pc, #96]	; (8004a84 <HAL_RCC_OscConfig+0x82c>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d0f0      	beq.n	8004a10 <HAL_RCC_OscConfig+0x7b8>
 8004a2e:	e024      	b.n	8004a7a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	2b0c      	cmp	r3, #12
 8004a34:	d01f      	beq.n	8004a76 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a36:	4b13      	ldr	r3, [pc, #76]	; (8004a84 <HAL_RCC_OscConfig+0x82c>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a12      	ldr	r2, [pc, #72]	; (8004a84 <HAL_RCC_OscConfig+0x82c>)
 8004a3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a42:	f7fc ff07 	bl	8001854 <HAL_GetTick>
 8004a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a48:	e008      	b.n	8004a5c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a4a:	f7fc ff03 	bl	8001854 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d901      	bls.n	8004a5c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e00f      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a5c:	4b09      	ldr	r3, [pc, #36]	; (8004a84 <HAL_RCC_OscConfig+0x82c>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1f0      	bne.n	8004a4a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004a68:	4b06      	ldr	r3, [pc, #24]	; (8004a84 <HAL_RCC_OscConfig+0x82c>)
 8004a6a:	68da      	ldr	r2, [r3, #12]
 8004a6c:	4905      	ldr	r1, [pc, #20]	; (8004a84 <HAL_RCC_OscConfig+0x82c>)
 8004a6e:	4b06      	ldr	r3, [pc, #24]	; (8004a88 <HAL_RCC_OscConfig+0x830>)
 8004a70:	4013      	ands	r3, r2
 8004a72:	60cb      	str	r3, [r1, #12]
 8004a74:	e001      	b.n	8004a7a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e000      	b.n	8004a7c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3720      	adds	r7, #32
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	40021000 	.word	0x40021000
 8004a88:	feeefffc 	.word	0xfeeefffc

08004a8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004a96:	2300      	movs	r3, #0
 8004a98:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d101      	bne.n	8004aa4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e11d      	b.n	8004ce0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004aa4:	4b90      	ldr	r3, [pc, #576]	; (8004ce8 <HAL_RCC_ClockConfig+0x25c>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 030f 	and.w	r3, r3, #15
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d910      	bls.n	8004ad4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ab2:	4b8d      	ldr	r3, [pc, #564]	; (8004ce8 <HAL_RCC_ClockConfig+0x25c>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f023 020f 	bic.w	r2, r3, #15
 8004aba:	498b      	ldr	r1, [pc, #556]	; (8004ce8 <HAL_RCC_ClockConfig+0x25c>)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ac2:	4b89      	ldr	r3, [pc, #548]	; (8004ce8 <HAL_RCC_ClockConfig+0x25c>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 030f 	and.w	r3, r3, #15
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d001      	beq.n	8004ad4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e105      	b.n	8004ce0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d010      	beq.n	8004b02 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	4b81      	ldr	r3, [pc, #516]	; (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d908      	bls.n	8004b02 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004af0:	4b7e      	ldr	r3, [pc, #504]	; (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	497b      	ldr	r1, [pc, #492]	; (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d079      	beq.n	8004c02 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	2b03      	cmp	r3, #3
 8004b14:	d11e      	bne.n	8004b54 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b16:	4b75      	ldr	r3, [pc, #468]	; (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e0dc      	b.n	8004ce0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004b26:	f000 fa09 	bl	8004f3c <RCC_GetSysClockFreqFromPLLSource>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	4a70      	ldr	r2, [pc, #448]	; (8004cf0 <HAL_RCC_ClockConfig+0x264>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d946      	bls.n	8004bc0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004b32:	4b6e      	ldr	r3, [pc, #440]	; (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d140      	bne.n	8004bc0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b3e:	4b6b      	ldr	r3, [pc, #428]	; (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b46:	4a69      	ldr	r2, [pc, #420]	; (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b4c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004b4e:	2380      	movs	r3, #128	; 0x80
 8004b50:	617b      	str	r3, [r7, #20]
 8004b52:	e035      	b.n	8004bc0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d107      	bne.n	8004b6c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b5c:	4b63      	ldr	r3, [pc, #396]	; (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d115      	bne.n	8004b94 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e0b9      	b.n	8004ce0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d107      	bne.n	8004b84 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b74:	4b5d      	ldr	r3, [pc, #372]	; (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d109      	bne.n	8004b94 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e0ad      	b.n	8004ce0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b84:	4b59      	ldr	r3, [pc, #356]	; (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e0a5      	b.n	8004ce0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004b94:	f000 f8b4 	bl	8004d00 <HAL_RCC_GetSysClockFreq>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	4a55      	ldr	r2, [pc, #340]	; (8004cf0 <HAL_RCC_ClockConfig+0x264>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d90f      	bls.n	8004bc0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004ba0:	4b52      	ldr	r3, [pc, #328]	; (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d109      	bne.n	8004bc0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004bac:	4b4f      	ldr	r3, [pc, #316]	; (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bb4:	4a4d      	ldr	r2, [pc, #308]	; (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004bb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bba:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004bbc:	2380      	movs	r3, #128	; 0x80
 8004bbe:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004bc0:	4b4a      	ldr	r3, [pc, #296]	; (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f023 0203 	bic.w	r2, r3, #3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	4947      	ldr	r1, [pc, #284]	; (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bd2:	f7fc fe3f 	bl	8001854 <HAL_GetTick>
 8004bd6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bd8:	e00a      	b.n	8004bf0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bda:	f7fc fe3b 	bl	8001854 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d901      	bls.n	8004bf0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e077      	b.n	8004ce0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bf0:	4b3e      	ldr	r3, [pc, #248]	; (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f003 020c 	and.w	r2, r3, #12
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d1eb      	bne.n	8004bda <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	2b80      	cmp	r3, #128	; 0x80
 8004c06:	d105      	bne.n	8004c14 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004c08:	4b38      	ldr	r3, [pc, #224]	; (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	4a37      	ldr	r2, [pc, #220]	; (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004c0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c12:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d010      	beq.n	8004c42 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689a      	ldr	r2, [r3, #8]
 8004c24:	4b31      	ldr	r3, [pc, #196]	; (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d208      	bcs.n	8004c42 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c30:	4b2e      	ldr	r3, [pc, #184]	; (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	492b      	ldr	r1, [pc, #172]	; (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c42:	4b29      	ldr	r3, [pc, #164]	; (8004ce8 <HAL_RCC_ClockConfig+0x25c>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 030f 	and.w	r3, r3, #15
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d210      	bcs.n	8004c72 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c50:	4b25      	ldr	r3, [pc, #148]	; (8004ce8 <HAL_RCC_ClockConfig+0x25c>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f023 020f 	bic.w	r2, r3, #15
 8004c58:	4923      	ldr	r1, [pc, #140]	; (8004ce8 <HAL_RCC_ClockConfig+0x25c>)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c60:	4b21      	ldr	r3, [pc, #132]	; (8004ce8 <HAL_RCC_ClockConfig+0x25c>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 030f 	and.w	r3, r3, #15
 8004c68:	683a      	ldr	r2, [r7, #0]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d001      	beq.n	8004c72 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e036      	b.n	8004ce0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0304 	and.w	r3, r3, #4
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d008      	beq.n	8004c90 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c7e:	4b1b      	ldr	r3, [pc, #108]	; (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	4918      	ldr	r1, [pc, #96]	; (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0308 	and.w	r3, r3, #8
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d009      	beq.n	8004cb0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c9c:	4b13      	ldr	r3, [pc, #76]	; (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	00db      	lsls	r3, r3, #3
 8004caa:	4910      	ldr	r1, [pc, #64]	; (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004cb0:	f000 f826 	bl	8004d00 <HAL_RCC_GetSysClockFreq>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	4b0d      	ldr	r3, [pc, #52]	; (8004cec <HAL_RCC_ClockConfig+0x260>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	091b      	lsrs	r3, r3, #4
 8004cbc:	f003 030f 	and.w	r3, r3, #15
 8004cc0:	490c      	ldr	r1, [pc, #48]	; (8004cf4 <HAL_RCC_ClockConfig+0x268>)
 8004cc2:	5ccb      	ldrb	r3, [r1, r3]
 8004cc4:	f003 031f 	and.w	r3, r3, #31
 8004cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8004ccc:	4a0a      	ldr	r2, [pc, #40]	; (8004cf8 <HAL_RCC_ClockConfig+0x26c>)
 8004cce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004cd0:	4b0a      	ldr	r3, [pc, #40]	; (8004cfc <HAL_RCC_ClockConfig+0x270>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7fc fd6d 	bl	80017b4 <HAL_InitTick>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	73fb      	strb	r3, [r7, #15]

  return status;
 8004cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3718      	adds	r7, #24
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	40022000 	.word	0x40022000
 8004cec:	40021000 	.word	0x40021000
 8004cf0:	04c4b400 	.word	0x04c4b400
 8004cf4:	080068e8 	.word	0x080068e8
 8004cf8:	20000000 	.word	0x20000000
 8004cfc:	20000004 	.word	0x20000004

08004d00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b089      	sub	sp, #36	; 0x24
 8004d04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d06:	2300      	movs	r3, #0
 8004d08:	61fb      	str	r3, [r7, #28]
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d0e:	4b3e      	ldr	r3, [pc, #248]	; (8004e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f003 030c 	and.w	r3, r3, #12
 8004d16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d18:	4b3b      	ldr	r3, [pc, #236]	; (8004e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f003 0303 	and.w	r3, r3, #3
 8004d20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d005      	beq.n	8004d34 <HAL_RCC_GetSysClockFreq+0x34>
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	2b0c      	cmp	r3, #12
 8004d2c:	d121      	bne.n	8004d72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d11e      	bne.n	8004d72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d34:	4b34      	ldr	r3, [pc, #208]	; (8004e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0308 	and.w	r3, r3, #8
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d107      	bne.n	8004d50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d40:	4b31      	ldr	r3, [pc, #196]	; (8004e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d46:	0a1b      	lsrs	r3, r3, #8
 8004d48:	f003 030f 	and.w	r3, r3, #15
 8004d4c:	61fb      	str	r3, [r7, #28]
 8004d4e:	e005      	b.n	8004d5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d50:	4b2d      	ldr	r3, [pc, #180]	; (8004e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	091b      	lsrs	r3, r3, #4
 8004d56:	f003 030f 	and.w	r3, r3, #15
 8004d5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d5c:	4a2b      	ldr	r2, [pc, #172]	; (8004e0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d10d      	bne.n	8004d88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d70:	e00a      	b.n	8004d88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	2b04      	cmp	r3, #4
 8004d76:	d102      	bne.n	8004d7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d78:	4b25      	ldr	r3, [pc, #148]	; (8004e10 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d7a:	61bb      	str	r3, [r7, #24]
 8004d7c:	e004      	b.n	8004d88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	2b08      	cmp	r3, #8
 8004d82:	d101      	bne.n	8004d88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d84:	4b23      	ldr	r3, [pc, #140]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	2b0c      	cmp	r3, #12
 8004d8c:	d134      	bne.n	8004df8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d8e:	4b1e      	ldr	r3, [pc, #120]	; (8004e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	f003 0303 	and.w	r3, r3, #3
 8004d96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d003      	beq.n	8004da6 <HAL_RCC_GetSysClockFreq+0xa6>
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	2b03      	cmp	r3, #3
 8004da2:	d003      	beq.n	8004dac <HAL_RCC_GetSysClockFreq+0xac>
 8004da4:	e005      	b.n	8004db2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004da6:	4b1a      	ldr	r3, [pc, #104]	; (8004e10 <HAL_RCC_GetSysClockFreq+0x110>)
 8004da8:	617b      	str	r3, [r7, #20]
      break;
 8004daa:	e005      	b.n	8004db8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004dac:	4b19      	ldr	r3, [pc, #100]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x114>)
 8004dae:	617b      	str	r3, [r7, #20]
      break;
 8004db0:	e002      	b.n	8004db8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	617b      	str	r3, [r7, #20]
      break;
 8004db6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004db8:	4b13      	ldr	r3, [pc, #76]	; (8004e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	091b      	lsrs	r3, r3, #4
 8004dbe:	f003 030f 	and.w	r3, r3, #15
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004dc6:	4b10      	ldr	r3, [pc, #64]	; (8004e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	0a1b      	lsrs	r3, r3, #8
 8004dcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	fb03 f202 	mul.w	r2, r3, r2
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ddc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004dde:	4b0a      	ldr	r3, [pc, #40]	; (8004e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	0e5b      	lsrs	r3, r3, #25
 8004de4:	f003 0303 	and.w	r3, r3, #3
 8004de8:	3301      	adds	r3, #1
 8004dea:	005b      	lsls	r3, r3, #1
 8004dec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004df8:	69bb      	ldr	r3, [r7, #24]
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3724      	adds	r7, #36	; 0x24
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	40021000 	.word	0x40021000
 8004e0c:	08006900 	.word	0x08006900
 8004e10:	00f42400 	.word	0x00f42400
 8004e14:	007a1200 	.word	0x007a1200

08004e18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e1c:	4b03      	ldr	r3, [pc, #12]	; (8004e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	20000000 	.word	0x20000000

08004e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e34:	f7ff fff0 	bl	8004e18 <HAL_RCC_GetHCLKFreq>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	4b06      	ldr	r3, [pc, #24]	; (8004e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	0a1b      	lsrs	r3, r3, #8
 8004e40:	f003 0307 	and.w	r3, r3, #7
 8004e44:	4904      	ldr	r1, [pc, #16]	; (8004e58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e46:	5ccb      	ldrb	r3, [r1, r3]
 8004e48:	f003 031f 	and.w	r3, r3, #31
 8004e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	40021000 	.word	0x40021000
 8004e58:	080068f8 	.word	0x080068f8

08004e5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e60:	f7ff ffda 	bl	8004e18 <HAL_RCC_GetHCLKFreq>
 8004e64:	4602      	mov	r2, r0
 8004e66:	4b06      	ldr	r3, [pc, #24]	; (8004e80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	0adb      	lsrs	r3, r3, #11
 8004e6c:	f003 0307 	and.w	r3, r3, #7
 8004e70:	4904      	ldr	r1, [pc, #16]	; (8004e84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e72:	5ccb      	ldrb	r3, [r1, r3]
 8004e74:	f003 031f 	and.w	r3, r3, #31
 8004e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	40021000 	.word	0x40021000
 8004e84:	080068f8 	.word	0x080068f8

08004e88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e90:	2300      	movs	r3, #0
 8004e92:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004e94:	4b27      	ldr	r3, [pc, #156]	; (8004f34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d003      	beq.n	8004ea8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ea0:	f7ff f916 	bl	80040d0 <HAL_PWREx_GetVoltageRange>
 8004ea4:	6178      	str	r0, [r7, #20]
 8004ea6:	e014      	b.n	8004ed2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ea8:	4b22      	ldr	r3, [pc, #136]	; (8004f34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eac:	4a21      	ldr	r2, [pc, #132]	; (8004f34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004eae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eb2:	6593      	str	r3, [r2, #88]	; 0x58
 8004eb4:	4b1f      	ldr	r3, [pc, #124]	; (8004f34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ebc:	60fb      	str	r3, [r7, #12]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ec0:	f7ff f906 	bl	80040d0 <HAL_PWREx_GetVoltageRange>
 8004ec4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004ec6:	4b1b      	ldr	r3, [pc, #108]	; (8004f34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eca:	4a1a      	ldr	r2, [pc, #104]	; (8004f34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004ecc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ed0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ed8:	d10b      	bne.n	8004ef2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2b80      	cmp	r3, #128	; 0x80
 8004ede:	d913      	bls.n	8004f08 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2ba0      	cmp	r3, #160	; 0xa0
 8004ee4:	d902      	bls.n	8004eec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	613b      	str	r3, [r7, #16]
 8004eea:	e00d      	b.n	8004f08 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004eec:	2301      	movs	r3, #1
 8004eee:	613b      	str	r3, [r7, #16]
 8004ef0:	e00a      	b.n	8004f08 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b7f      	cmp	r3, #127	; 0x7f
 8004ef6:	d902      	bls.n	8004efe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004ef8:	2302      	movs	r3, #2
 8004efa:	613b      	str	r3, [r7, #16]
 8004efc:	e004      	b.n	8004f08 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b70      	cmp	r3, #112	; 0x70
 8004f02:	d101      	bne.n	8004f08 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f04:	2301      	movs	r3, #1
 8004f06:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f08:	4b0b      	ldr	r3, [pc, #44]	; (8004f38 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f023 020f 	bic.w	r2, r3, #15
 8004f10:	4909      	ldr	r1, [pc, #36]	; (8004f38 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f18:	4b07      	ldr	r3, [pc, #28]	; (8004f38 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 030f 	and.w	r3, r3, #15
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d001      	beq.n	8004f2a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e000      	b.n	8004f2c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3718      	adds	r7, #24
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	40021000 	.word	0x40021000
 8004f38:	40022000 	.word	0x40022000

08004f3c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b087      	sub	sp, #28
 8004f40:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f42:	4b2d      	ldr	r3, [pc, #180]	; (8004ff8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	f003 0303 	and.w	r3, r3, #3
 8004f4a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2b03      	cmp	r3, #3
 8004f50:	d00b      	beq.n	8004f6a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2b03      	cmp	r3, #3
 8004f56:	d825      	bhi.n	8004fa4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d008      	beq.n	8004f70 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d11f      	bne.n	8004fa4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004f64:	4b25      	ldr	r3, [pc, #148]	; (8004ffc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004f66:	613b      	str	r3, [r7, #16]
    break;
 8004f68:	e01f      	b.n	8004faa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004f6a:	4b25      	ldr	r3, [pc, #148]	; (8005000 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004f6c:	613b      	str	r3, [r7, #16]
    break;
 8004f6e:	e01c      	b.n	8004faa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004f70:	4b21      	ldr	r3, [pc, #132]	; (8004ff8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0308 	and.w	r3, r3, #8
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d107      	bne.n	8004f8c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004f7c:	4b1e      	ldr	r3, [pc, #120]	; (8004ff8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f82:	0a1b      	lsrs	r3, r3, #8
 8004f84:	f003 030f 	and.w	r3, r3, #15
 8004f88:	617b      	str	r3, [r7, #20]
 8004f8a:	e005      	b.n	8004f98 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004f8c:	4b1a      	ldr	r3, [pc, #104]	; (8004ff8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	091b      	lsrs	r3, r3, #4
 8004f92:	f003 030f 	and.w	r3, r3, #15
 8004f96:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004f98:	4a1a      	ldr	r2, [pc, #104]	; (8005004 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fa0:	613b      	str	r3, [r7, #16]
    break;
 8004fa2:	e002      	b.n	8004faa <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	613b      	str	r3, [r7, #16]
    break;
 8004fa8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004faa:	4b13      	ldr	r3, [pc, #76]	; (8004ff8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	091b      	lsrs	r3, r3, #4
 8004fb0:	f003 030f 	and.w	r3, r3, #15
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004fb8:	4b0f      	ldr	r3, [pc, #60]	; (8004ff8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	0a1b      	lsrs	r3, r3, #8
 8004fbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	fb03 f202 	mul.w	r2, r3, r2
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fce:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004fd0:	4b09      	ldr	r3, [pc, #36]	; (8004ff8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	0e5b      	lsrs	r3, r3, #25
 8004fd6:	f003 0303 	and.w	r3, r3, #3
 8004fda:	3301      	adds	r3, #1
 8004fdc:	005b      	lsls	r3, r3, #1
 8004fde:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004fea:	683b      	ldr	r3, [r7, #0]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	371c      	adds	r7, #28
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr
 8004ff8:	40021000 	.word	0x40021000
 8004ffc:	00f42400 	.word	0x00f42400
 8005000:	007a1200 	.word	0x007a1200
 8005004:	08006900 	.word	0x08006900

08005008 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b086      	sub	sp, #24
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005010:	2300      	movs	r3, #0
 8005012:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005014:	2300      	movs	r3, #0
 8005016:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005020:	2b00      	cmp	r3, #0
 8005022:	d040      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005028:	2b80      	cmp	r3, #128	; 0x80
 800502a:	d02a      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800502c:	2b80      	cmp	r3, #128	; 0x80
 800502e:	d825      	bhi.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005030:	2b60      	cmp	r3, #96	; 0x60
 8005032:	d026      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005034:	2b60      	cmp	r3, #96	; 0x60
 8005036:	d821      	bhi.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005038:	2b40      	cmp	r3, #64	; 0x40
 800503a:	d006      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800503c:	2b40      	cmp	r3, #64	; 0x40
 800503e:	d81d      	bhi.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005040:	2b00      	cmp	r3, #0
 8005042:	d009      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005044:	2b20      	cmp	r3, #32
 8005046:	d010      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005048:	e018      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800504a:	4b89      	ldr	r3, [pc, #548]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	4a88      	ldr	r2, [pc, #544]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005054:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005056:	e015      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	3304      	adds	r3, #4
 800505c:	2100      	movs	r1, #0
 800505e:	4618      	mov	r0, r3
 8005060:	f000 fb12 	bl	8005688 <RCCEx_PLLSAI1_Config>
 8005064:	4603      	mov	r3, r0
 8005066:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005068:	e00c      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	3320      	adds	r3, #32
 800506e:	2100      	movs	r1, #0
 8005070:	4618      	mov	r0, r3
 8005072:	f000 fbfd 	bl	8005870 <RCCEx_PLLSAI2_Config>
 8005076:	4603      	mov	r3, r0
 8005078:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800507a:	e003      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	74fb      	strb	r3, [r7, #19]
      break;
 8005080:	e000      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005082:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005084:	7cfb      	ldrb	r3, [r7, #19]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10b      	bne.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800508a:	4b79      	ldr	r3, [pc, #484]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800508c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005090:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005098:	4975      	ldr	r1, [pc, #468]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800509a:	4313      	orrs	r3, r2
 800509c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80050a0:	e001      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a2:	7cfb      	ldrb	r3, [r7, #19]
 80050a4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d047      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050ba:	d030      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80050bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050c0:	d82a      	bhi.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80050c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050c6:	d02a      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80050c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050cc:	d824      	bhi.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80050ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050d2:	d008      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80050d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050d8:	d81e      	bhi.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00a      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80050de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050e2:	d010      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80050e4:	e018      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80050e6:	4b62      	ldr	r3, [pc, #392]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	4a61      	ldr	r2, [pc, #388]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050f0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050f2:	e015      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	3304      	adds	r3, #4
 80050f8:	2100      	movs	r1, #0
 80050fa:	4618      	mov	r0, r3
 80050fc:	f000 fac4 	bl	8005688 <RCCEx_PLLSAI1_Config>
 8005100:	4603      	mov	r3, r0
 8005102:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005104:	e00c      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	3320      	adds	r3, #32
 800510a:	2100      	movs	r1, #0
 800510c:	4618      	mov	r0, r3
 800510e:	f000 fbaf 	bl	8005870 <RCCEx_PLLSAI2_Config>
 8005112:	4603      	mov	r3, r0
 8005114:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005116:	e003      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	74fb      	strb	r3, [r7, #19]
      break;
 800511c:	e000      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800511e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005120:	7cfb      	ldrb	r3, [r7, #19]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10b      	bne.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005126:	4b52      	ldr	r3, [pc, #328]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005128:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800512c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005134:	494e      	ldr	r1, [pc, #312]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005136:	4313      	orrs	r3, r2
 8005138:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800513c:	e001      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800513e:	7cfb      	ldrb	r3, [r7, #19]
 8005140:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800514a:	2b00      	cmp	r3, #0
 800514c:	f000 809f 	beq.w	800528e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005150:	2300      	movs	r3, #0
 8005152:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005154:	4b46      	ldr	r3, [pc, #280]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d101      	bne.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005160:	2301      	movs	r3, #1
 8005162:	e000      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005164:	2300      	movs	r3, #0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00d      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800516a:	4b41      	ldr	r3, [pc, #260]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800516c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800516e:	4a40      	ldr	r2, [pc, #256]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005174:	6593      	str	r3, [r2, #88]	; 0x58
 8005176:	4b3e      	ldr	r3, [pc, #248]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800517a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800517e:	60bb      	str	r3, [r7, #8]
 8005180:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005182:	2301      	movs	r3, #1
 8005184:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005186:	4b3b      	ldr	r3, [pc, #236]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a3a      	ldr	r2, [pc, #232]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800518c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005190:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005192:	f7fc fb5f 	bl	8001854 <HAL_GetTick>
 8005196:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005198:	e009      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800519a:	f7fc fb5b 	bl	8001854 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d902      	bls.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	74fb      	strb	r3, [r7, #19]
        break;
 80051ac:	e005      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80051ae:	4b31      	ldr	r3, [pc, #196]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d0ef      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80051ba:	7cfb      	ldrb	r3, [r7, #19]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d15b      	bne.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80051c0:	4b2b      	ldr	r3, [pc, #172]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051ca:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d01f      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d019      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80051de:	4b24      	ldr	r3, [pc, #144]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051e8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051ea:	4b21      	ldr	r3, [pc, #132]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051f0:	4a1f      	ldr	r2, [pc, #124]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051fa:	4b1d      	ldr	r3, [pc, #116]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005200:	4a1b      	ldr	r2, [pc, #108]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005206:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800520a:	4a19      	ldr	r2, [pc, #100]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f003 0301 	and.w	r3, r3, #1
 8005218:	2b00      	cmp	r3, #0
 800521a:	d016      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800521c:	f7fc fb1a 	bl	8001854 <HAL_GetTick>
 8005220:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005222:	e00b      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005224:	f7fc fb16 	bl	8001854 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005232:	4293      	cmp	r3, r2
 8005234:	d902      	bls.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	74fb      	strb	r3, [r7, #19]
            break;
 800523a:	e006      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800523c:	4b0c      	ldr	r3, [pc, #48]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800523e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d0ec      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800524a:	7cfb      	ldrb	r3, [r7, #19]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10c      	bne.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005250:	4b07      	ldr	r3, [pc, #28]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005256:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005260:	4903      	ldr	r1, [pc, #12]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005262:	4313      	orrs	r3, r2
 8005264:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005268:	e008      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800526a:	7cfb      	ldrb	r3, [r7, #19]
 800526c:	74bb      	strb	r3, [r7, #18]
 800526e:	e005      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005270:	40021000 	.word	0x40021000
 8005274:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005278:	7cfb      	ldrb	r3, [r7, #19]
 800527a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800527c:	7c7b      	ldrb	r3, [r7, #17]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d105      	bne.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005282:	4ba0      	ldr	r3, [pc, #640]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005286:	4a9f      	ldr	r2, [pc, #636]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005288:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800528c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00a      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800529a:	4b9a      	ldr	r3, [pc, #616]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800529c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a0:	f023 0203 	bic.w	r2, r3, #3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a8:	4996      	ldr	r1, [pc, #600]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0302 	and.w	r3, r3, #2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00a      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80052bc:	4b91      	ldr	r3, [pc, #580]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c2:	f023 020c 	bic.w	r2, r3, #12
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ca:	498e      	ldr	r1, [pc, #568]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0304 	and.w	r3, r3, #4
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00a      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80052de:	4b89      	ldr	r3, [pc, #548]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ec:	4985      	ldr	r1, [pc, #532]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0308 	and.w	r3, r3, #8
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00a      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005300:	4b80      	ldr	r3, [pc, #512]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005306:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800530e:	497d      	ldr	r1, [pc, #500]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005310:	4313      	orrs	r3, r2
 8005312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0310 	and.w	r3, r3, #16
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00a      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005322:	4b78      	ldr	r3, [pc, #480]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005328:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005330:	4974      	ldr	r1, [pc, #464]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005332:	4313      	orrs	r3, r2
 8005334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0320 	and.w	r3, r3, #32
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00a      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005344:	4b6f      	ldr	r3, [pc, #444]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800534a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005352:	496c      	ldr	r1, [pc, #432]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005354:	4313      	orrs	r3, r2
 8005356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00a      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005366:	4b67      	ldr	r3, [pc, #412]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800536c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005374:	4963      	ldr	r1, [pc, #396]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005376:	4313      	orrs	r3, r2
 8005378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00a      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005388:	4b5e      	ldr	r3, [pc, #376]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800538a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800538e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005396:	495b      	ldr	r1, [pc, #364]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005398:	4313      	orrs	r3, r2
 800539a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00a      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053aa:	4b56      	ldr	r3, [pc, #344]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b8:	4952      	ldr	r1, [pc, #328]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00a      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80053cc:	4b4d      	ldr	r3, [pc, #308]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053da:	494a      	ldr	r1, [pc, #296]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00a      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80053ee:	4b45      	ldr	r3, [pc, #276]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053fc:	4941      	ldr	r1, [pc, #260]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00a      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005410:	4b3c      	ldr	r3, [pc, #240]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005412:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005416:	f023 0203 	bic.w	r2, r3, #3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800541e:	4939      	ldr	r1, [pc, #228]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005420:	4313      	orrs	r3, r2
 8005422:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d028      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005432:	4b34      	ldr	r3, [pc, #208]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005438:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005440:	4930      	ldr	r1, [pc, #192]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005442:	4313      	orrs	r3, r2
 8005444:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800544c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005450:	d106      	bne.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005452:	4b2c      	ldr	r3, [pc, #176]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	4a2b      	ldr	r2, [pc, #172]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005458:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800545c:	60d3      	str	r3, [r2, #12]
 800545e:	e011      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005464:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005468:	d10c      	bne.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	3304      	adds	r3, #4
 800546e:	2101      	movs	r1, #1
 8005470:	4618      	mov	r0, r3
 8005472:	f000 f909 	bl	8005688 <RCCEx_PLLSAI1_Config>
 8005476:	4603      	mov	r3, r0
 8005478:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800547a:	7cfb      	ldrb	r3, [r7, #19]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d001      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005480:	7cfb      	ldrb	r3, [r7, #19]
 8005482:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d04d      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005494:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005498:	d108      	bne.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800549a:	4b1a      	ldr	r3, [pc, #104]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800549c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054a0:	4a18      	ldr	r2, [pc, #96]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054a6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80054aa:	e012      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80054ac:	4b15      	ldr	r3, [pc, #84]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054b2:	4a14      	ldr	r2, [pc, #80]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054b8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80054bc:	4b11      	ldr	r3, [pc, #68]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054ca:	490e      	ldr	r1, [pc, #56]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054da:	d106      	bne.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054dc:	4b09      	ldr	r3, [pc, #36]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	4a08      	ldr	r2, [pc, #32]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054e6:	60d3      	str	r3, [r2, #12]
 80054e8:	e020      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054f2:	d109      	bne.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80054f4:	4b03      	ldr	r3, [pc, #12]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	4a02      	ldr	r2, [pc, #8]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054fe:	60d3      	str	r3, [r2, #12]
 8005500:	e014      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005502:	bf00      	nop
 8005504:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800550c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005510:	d10c      	bne.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	3304      	adds	r3, #4
 8005516:	2101      	movs	r1, #1
 8005518:	4618      	mov	r0, r3
 800551a:	f000 f8b5 	bl	8005688 <RCCEx_PLLSAI1_Config>
 800551e:	4603      	mov	r3, r0
 8005520:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005522:	7cfb      	ldrb	r3, [r7, #19]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d001      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005528:	7cfb      	ldrb	r3, [r7, #19]
 800552a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d028      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005538:	4b4a      	ldr	r3, [pc, #296]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800553a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800553e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005546:	4947      	ldr	r1, [pc, #284]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005548:	4313      	orrs	r3, r2
 800554a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005552:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005556:	d106      	bne.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005558:	4b42      	ldr	r3, [pc, #264]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	4a41      	ldr	r2, [pc, #260]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800555e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005562:	60d3      	str	r3, [r2, #12]
 8005564:	e011      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800556a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800556e:	d10c      	bne.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	3304      	adds	r3, #4
 8005574:	2101      	movs	r1, #1
 8005576:	4618      	mov	r0, r3
 8005578:	f000 f886 	bl	8005688 <RCCEx_PLLSAI1_Config>
 800557c:	4603      	mov	r3, r0
 800557e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005580:	7cfb      	ldrb	r3, [r7, #19]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005586:	7cfb      	ldrb	r3, [r7, #19]
 8005588:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d01e      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005596:	4b33      	ldr	r3, [pc, #204]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800559c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055a6:	492f      	ldr	r1, [pc, #188]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055b8:	d10c      	bne.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	3304      	adds	r3, #4
 80055be:	2102      	movs	r1, #2
 80055c0:	4618      	mov	r0, r3
 80055c2:	f000 f861 	bl	8005688 <RCCEx_PLLSAI1_Config>
 80055c6:	4603      	mov	r3, r0
 80055c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055ca:	7cfb      	ldrb	r3, [r7, #19]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d001      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80055d0:	7cfb      	ldrb	r3, [r7, #19]
 80055d2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00b      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80055e0:	4b20      	ldr	r3, [pc, #128]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055e6:	f023 0204 	bic.w	r2, r3, #4
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055f0:	491c      	ldr	r1, [pc, #112]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00b      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005604:	4b17      	ldr	r3, [pc, #92]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005606:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800560a:	f023 0218 	bic.w	r2, r3, #24
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005614:	4913      	ldr	r1, [pc, #76]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005616:	4313      	orrs	r3, r2
 8005618:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d017      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005628:	4b0e      	ldr	r3, [pc, #56]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800562a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800562e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005638:	490a      	ldr	r1, [pc, #40]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800563a:	4313      	orrs	r3, r2
 800563c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005646:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800564a:	d105      	bne.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800564c:	4b05      	ldr	r3, [pc, #20]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	4a04      	ldr	r2, [pc, #16]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005652:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005656:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005658:	7cbb      	ldrb	r3, [r7, #18]
}
 800565a:	4618      	mov	r0, r3
 800565c:	3718      	adds	r7, #24
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	40021000 	.word	0x40021000

08005668 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005668:	b480      	push	{r7}
 800566a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800566c:	4b05      	ldr	r3, [pc, #20]	; (8005684 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a04      	ldr	r2, [pc, #16]	; (8005684 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005672:	f043 0304 	orr.w	r3, r3, #4
 8005676:	6013      	str	r3, [r2, #0]
}
 8005678:	bf00      	nop
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	40021000 	.word	0x40021000

08005688 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005692:	2300      	movs	r3, #0
 8005694:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005696:	4b72      	ldr	r3, [pc, #456]	; (8005860 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	f003 0303 	and.w	r3, r3, #3
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00e      	beq.n	80056c0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80056a2:	4b6f      	ldr	r3, [pc, #444]	; (8005860 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	f003 0203 	and.w	r2, r3, #3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d103      	bne.n	80056ba <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
       ||
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d142      	bne.n	8005740 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	73fb      	strb	r3, [r7, #15]
 80056be:	e03f      	b.n	8005740 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2b03      	cmp	r3, #3
 80056c6:	d018      	beq.n	80056fa <RCCEx_PLLSAI1_Config+0x72>
 80056c8:	2b03      	cmp	r3, #3
 80056ca:	d825      	bhi.n	8005718 <RCCEx_PLLSAI1_Config+0x90>
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d002      	beq.n	80056d6 <RCCEx_PLLSAI1_Config+0x4e>
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d009      	beq.n	80056e8 <RCCEx_PLLSAI1_Config+0x60>
 80056d4:	e020      	b.n	8005718 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80056d6:	4b62      	ldr	r3, [pc, #392]	; (8005860 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d11d      	bne.n	800571e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056e6:	e01a      	b.n	800571e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80056e8:	4b5d      	ldr	r3, [pc, #372]	; (8005860 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d116      	bne.n	8005722 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056f8:	e013      	b.n	8005722 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80056fa:	4b59      	ldr	r3, [pc, #356]	; (8005860 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10f      	bne.n	8005726 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005706:	4b56      	ldr	r3, [pc, #344]	; (8005860 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d109      	bne.n	8005726 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005716:	e006      	b.n	8005726 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	73fb      	strb	r3, [r7, #15]
      break;
 800571c:	e004      	b.n	8005728 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800571e:	bf00      	nop
 8005720:	e002      	b.n	8005728 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005722:	bf00      	nop
 8005724:	e000      	b.n	8005728 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005726:	bf00      	nop
    }

    if(status == HAL_OK)
 8005728:	7bfb      	ldrb	r3, [r7, #15]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d108      	bne.n	8005740 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800572e:	4b4c      	ldr	r3, [pc, #304]	; (8005860 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	f023 0203 	bic.w	r2, r3, #3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4949      	ldr	r1, [pc, #292]	; (8005860 <RCCEx_PLLSAI1_Config+0x1d8>)
 800573c:	4313      	orrs	r3, r2
 800573e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005740:	7bfb      	ldrb	r3, [r7, #15]
 8005742:	2b00      	cmp	r3, #0
 8005744:	f040 8086 	bne.w	8005854 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005748:	4b45      	ldr	r3, [pc, #276]	; (8005860 <RCCEx_PLLSAI1_Config+0x1d8>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a44      	ldr	r2, [pc, #272]	; (8005860 <RCCEx_PLLSAI1_Config+0x1d8>)
 800574e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005752:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005754:	f7fc f87e 	bl	8001854 <HAL_GetTick>
 8005758:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800575a:	e009      	b.n	8005770 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800575c:	f7fc f87a 	bl	8001854 <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	2b02      	cmp	r3, #2
 8005768:	d902      	bls.n	8005770 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	73fb      	strb	r3, [r7, #15]
        break;
 800576e:	e005      	b.n	800577c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005770:	4b3b      	ldr	r3, [pc, #236]	; (8005860 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1ef      	bne.n	800575c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800577c:	7bfb      	ldrb	r3, [r7, #15]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d168      	bne.n	8005854 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d113      	bne.n	80057b0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005788:	4b35      	ldr	r3, [pc, #212]	; (8005860 <RCCEx_PLLSAI1_Config+0x1d8>)
 800578a:	691a      	ldr	r2, [r3, #16]
 800578c:	4b35      	ldr	r3, [pc, #212]	; (8005864 <RCCEx_PLLSAI1_Config+0x1dc>)
 800578e:	4013      	ands	r3, r2
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	6892      	ldr	r2, [r2, #8]
 8005794:	0211      	lsls	r1, r2, #8
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	68d2      	ldr	r2, [r2, #12]
 800579a:	06d2      	lsls	r2, r2, #27
 800579c:	4311      	orrs	r1, r2
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	6852      	ldr	r2, [r2, #4]
 80057a2:	3a01      	subs	r2, #1
 80057a4:	0112      	lsls	r2, r2, #4
 80057a6:	430a      	orrs	r2, r1
 80057a8:	492d      	ldr	r1, [pc, #180]	; (8005860 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057aa:	4313      	orrs	r3, r2
 80057ac:	610b      	str	r3, [r1, #16]
 80057ae:	e02d      	b.n	800580c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d115      	bne.n	80057e2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057b6:	4b2a      	ldr	r3, [pc, #168]	; (8005860 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057b8:	691a      	ldr	r2, [r3, #16]
 80057ba:	4b2b      	ldr	r3, [pc, #172]	; (8005868 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057bc:	4013      	ands	r3, r2
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	6892      	ldr	r2, [r2, #8]
 80057c2:	0211      	lsls	r1, r2, #8
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	6912      	ldr	r2, [r2, #16]
 80057c8:	0852      	lsrs	r2, r2, #1
 80057ca:	3a01      	subs	r2, #1
 80057cc:	0552      	lsls	r2, r2, #21
 80057ce:	4311      	orrs	r1, r2
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	6852      	ldr	r2, [r2, #4]
 80057d4:	3a01      	subs	r2, #1
 80057d6:	0112      	lsls	r2, r2, #4
 80057d8:	430a      	orrs	r2, r1
 80057da:	4921      	ldr	r1, [pc, #132]	; (8005860 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	610b      	str	r3, [r1, #16]
 80057e0:	e014      	b.n	800580c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057e2:	4b1f      	ldr	r3, [pc, #124]	; (8005860 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057e4:	691a      	ldr	r2, [r3, #16]
 80057e6:	4b21      	ldr	r3, [pc, #132]	; (800586c <RCCEx_PLLSAI1_Config+0x1e4>)
 80057e8:	4013      	ands	r3, r2
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	6892      	ldr	r2, [r2, #8]
 80057ee:	0211      	lsls	r1, r2, #8
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	6952      	ldr	r2, [r2, #20]
 80057f4:	0852      	lsrs	r2, r2, #1
 80057f6:	3a01      	subs	r2, #1
 80057f8:	0652      	lsls	r2, r2, #25
 80057fa:	4311      	orrs	r1, r2
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	6852      	ldr	r2, [r2, #4]
 8005800:	3a01      	subs	r2, #1
 8005802:	0112      	lsls	r2, r2, #4
 8005804:	430a      	orrs	r2, r1
 8005806:	4916      	ldr	r1, [pc, #88]	; (8005860 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005808:	4313      	orrs	r3, r2
 800580a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800580c:	4b14      	ldr	r3, [pc, #80]	; (8005860 <RCCEx_PLLSAI1_Config+0x1d8>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a13      	ldr	r2, [pc, #76]	; (8005860 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005812:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005816:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005818:	f7fc f81c 	bl	8001854 <HAL_GetTick>
 800581c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800581e:	e009      	b.n	8005834 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005820:	f7fc f818 	bl	8001854 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2b02      	cmp	r3, #2
 800582c:	d902      	bls.n	8005834 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	73fb      	strb	r3, [r7, #15]
          break;
 8005832:	e005      	b.n	8005840 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005834:	4b0a      	ldr	r3, [pc, #40]	; (8005860 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d0ef      	beq.n	8005820 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005840:	7bfb      	ldrb	r3, [r7, #15]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d106      	bne.n	8005854 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005846:	4b06      	ldr	r3, [pc, #24]	; (8005860 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005848:	691a      	ldr	r2, [r3, #16]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	4904      	ldr	r1, [pc, #16]	; (8005860 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005850:	4313      	orrs	r3, r2
 8005852:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005854:	7bfb      	ldrb	r3, [r7, #15]
}
 8005856:	4618      	mov	r0, r3
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	40021000 	.word	0x40021000
 8005864:	07ff800f 	.word	0x07ff800f
 8005868:	ff9f800f 	.word	0xff9f800f
 800586c:	f9ff800f 	.word	0xf9ff800f

08005870 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800587a:	2300      	movs	r3, #0
 800587c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800587e:	4b72      	ldr	r3, [pc, #456]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	f003 0303 	and.w	r3, r3, #3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00e      	beq.n	80058a8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800588a:	4b6f      	ldr	r3, [pc, #444]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	f003 0203 	and.w	r2, r3, #3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	429a      	cmp	r2, r3
 8005898:	d103      	bne.n	80058a2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
       ||
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d142      	bne.n	8005928 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	73fb      	strb	r3, [r7, #15]
 80058a6:	e03f      	b.n	8005928 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2b03      	cmp	r3, #3
 80058ae:	d018      	beq.n	80058e2 <RCCEx_PLLSAI2_Config+0x72>
 80058b0:	2b03      	cmp	r3, #3
 80058b2:	d825      	bhi.n	8005900 <RCCEx_PLLSAI2_Config+0x90>
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d002      	beq.n	80058be <RCCEx_PLLSAI2_Config+0x4e>
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d009      	beq.n	80058d0 <RCCEx_PLLSAI2_Config+0x60>
 80058bc:	e020      	b.n	8005900 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80058be:	4b62      	ldr	r3, [pc, #392]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0302 	and.w	r3, r3, #2
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d11d      	bne.n	8005906 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058ce:	e01a      	b.n	8005906 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80058d0:	4b5d      	ldr	r3, [pc, #372]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d116      	bne.n	800590a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058e0:	e013      	b.n	800590a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80058e2:	4b59      	ldr	r3, [pc, #356]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10f      	bne.n	800590e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80058ee:	4b56      	ldr	r3, [pc, #344]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d109      	bne.n	800590e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80058fe:	e006      	b.n	800590e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	73fb      	strb	r3, [r7, #15]
      break;
 8005904:	e004      	b.n	8005910 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005906:	bf00      	nop
 8005908:	e002      	b.n	8005910 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800590a:	bf00      	nop
 800590c:	e000      	b.n	8005910 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800590e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005910:	7bfb      	ldrb	r3, [r7, #15]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d108      	bne.n	8005928 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005916:	4b4c      	ldr	r3, [pc, #304]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	f023 0203 	bic.w	r2, r3, #3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4949      	ldr	r1, [pc, #292]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005924:	4313      	orrs	r3, r2
 8005926:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005928:	7bfb      	ldrb	r3, [r7, #15]
 800592a:	2b00      	cmp	r3, #0
 800592c:	f040 8086 	bne.w	8005a3c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005930:	4b45      	ldr	r3, [pc, #276]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a44      	ldr	r2, [pc, #272]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005936:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800593a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800593c:	f7fb ff8a 	bl	8001854 <HAL_GetTick>
 8005940:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005942:	e009      	b.n	8005958 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005944:	f7fb ff86 	bl	8001854 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	2b02      	cmp	r3, #2
 8005950:	d902      	bls.n	8005958 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	73fb      	strb	r3, [r7, #15]
        break;
 8005956:	e005      	b.n	8005964 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005958:	4b3b      	ldr	r3, [pc, #236]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1ef      	bne.n	8005944 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005964:	7bfb      	ldrb	r3, [r7, #15]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d168      	bne.n	8005a3c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d113      	bne.n	8005998 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005970:	4b35      	ldr	r3, [pc, #212]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005972:	695a      	ldr	r2, [r3, #20]
 8005974:	4b35      	ldr	r3, [pc, #212]	; (8005a4c <RCCEx_PLLSAI2_Config+0x1dc>)
 8005976:	4013      	ands	r3, r2
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	6892      	ldr	r2, [r2, #8]
 800597c:	0211      	lsls	r1, r2, #8
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	68d2      	ldr	r2, [r2, #12]
 8005982:	06d2      	lsls	r2, r2, #27
 8005984:	4311      	orrs	r1, r2
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	6852      	ldr	r2, [r2, #4]
 800598a:	3a01      	subs	r2, #1
 800598c:	0112      	lsls	r2, r2, #4
 800598e:	430a      	orrs	r2, r1
 8005990:	492d      	ldr	r1, [pc, #180]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005992:	4313      	orrs	r3, r2
 8005994:	614b      	str	r3, [r1, #20]
 8005996:	e02d      	b.n	80059f4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	2b01      	cmp	r3, #1
 800599c:	d115      	bne.n	80059ca <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800599e:	4b2a      	ldr	r3, [pc, #168]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059a0:	695a      	ldr	r2, [r3, #20]
 80059a2:	4b2b      	ldr	r3, [pc, #172]	; (8005a50 <RCCEx_PLLSAI2_Config+0x1e0>)
 80059a4:	4013      	ands	r3, r2
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	6892      	ldr	r2, [r2, #8]
 80059aa:	0211      	lsls	r1, r2, #8
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	6912      	ldr	r2, [r2, #16]
 80059b0:	0852      	lsrs	r2, r2, #1
 80059b2:	3a01      	subs	r2, #1
 80059b4:	0552      	lsls	r2, r2, #21
 80059b6:	4311      	orrs	r1, r2
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	6852      	ldr	r2, [r2, #4]
 80059bc:	3a01      	subs	r2, #1
 80059be:	0112      	lsls	r2, r2, #4
 80059c0:	430a      	orrs	r2, r1
 80059c2:	4921      	ldr	r1, [pc, #132]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	614b      	str	r3, [r1, #20]
 80059c8:	e014      	b.n	80059f4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80059ca:	4b1f      	ldr	r3, [pc, #124]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059cc:	695a      	ldr	r2, [r3, #20]
 80059ce:	4b21      	ldr	r3, [pc, #132]	; (8005a54 <RCCEx_PLLSAI2_Config+0x1e4>)
 80059d0:	4013      	ands	r3, r2
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	6892      	ldr	r2, [r2, #8]
 80059d6:	0211      	lsls	r1, r2, #8
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	6952      	ldr	r2, [r2, #20]
 80059dc:	0852      	lsrs	r2, r2, #1
 80059de:	3a01      	subs	r2, #1
 80059e0:	0652      	lsls	r2, r2, #25
 80059e2:	4311      	orrs	r1, r2
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	6852      	ldr	r2, [r2, #4]
 80059e8:	3a01      	subs	r2, #1
 80059ea:	0112      	lsls	r2, r2, #4
 80059ec:	430a      	orrs	r2, r1
 80059ee:	4916      	ldr	r1, [pc, #88]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80059f4:	4b14      	ldr	r3, [pc, #80]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a13      	ldr	r2, [pc, #76]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a00:	f7fb ff28 	bl	8001854 <HAL_GetTick>
 8005a04:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a06:	e009      	b.n	8005a1c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a08:	f7fb ff24 	bl	8001854 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d902      	bls.n	8005a1c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	73fb      	strb	r3, [r7, #15]
          break;
 8005a1a:	e005      	b.n	8005a28 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a1c:	4b0a      	ldr	r3, [pc, #40]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d0ef      	beq.n	8005a08 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005a28:	7bfb      	ldrb	r3, [r7, #15]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d106      	bne.n	8005a3c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005a2e:	4b06      	ldr	r3, [pc, #24]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a30:	695a      	ldr	r2, [r3, #20]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	4904      	ldr	r1, [pc, #16]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	40021000 	.word	0x40021000
 8005a4c:	07ff800f 	.word	0x07ff800f
 8005a50:	ff9f800f 	.word	0xff9f800f
 8005a54:	f9ff800f 	.word	0xf9ff800f

08005a58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d101      	bne.n	8005a6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e095      	b.n	8005b96 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d108      	bne.n	8005a84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a7a:	d009      	beq.n	8005a90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	61da      	str	r2, [r3, #28]
 8005a82:	e005      	b.n	8005a90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d106      	bne.n	8005ab0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f7fb fc36 	bl	800131c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ac6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ad0:	d902      	bls.n	8005ad8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	60fb      	str	r3, [r7, #12]
 8005ad6:	e002      	b.n	8005ade <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005adc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005ae6:	d007      	beq.n	8005af8 <HAL_SPI_Init+0xa0>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005af0:	d002      	beq.n	8005af8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005b08:	431a      	orrs	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	f003 0302 	and.w	r3, r3, #2
 8005b12:	431a      	orrs	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	f003 0301 	and.w	r3, r3, #1
 8005b1c:	431a      	orrs	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b26:	431a      	orrs	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	69db      	ldr	r3, [r3, #28]
 8005b2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b30:	431a      	orrs	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b3a:	ea42 0103 	orr.w	r1, r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b42:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	0c1b      	lsrs	r3, r3, #16
 8005b54:	f003 0204 	and.w	r2, r3, #4
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5c:	f003 0310 	and.w	r3, r3, #16
 8005b60:	431a      	orrs	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b66:	f003 0308 	and.w	r3, r3, #8
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005b74:	ea42 0103 	orr.w	r1, r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	430a      	orrs	r2, r1
 8005b84:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b082      	sub	sp, #8
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d101      	bne.n	8005bb0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e042      	b.n	8005c36 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d106      	bne.n	8005bc8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f7fb fc20 	bl	8001408 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2224      	movs	r2, #36	; 0x24
 8005bcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f022 0201 	bic.w	r2, r2, #1
 8005bde:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d002      	beq.n	8005bee <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 fb25 	bl	8006238 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 f826 	bl	8005c40 <UART_SetConfig>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d101      	bne.n	8005bfe <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e01b      	b.n	8005c36 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	685a      	ldr	r2, [r3, #4]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c0c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	689a      	ldr	r2, [r3, #8]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c1c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f042 0201 	orr.w	r2, r2, #1
 8005c2c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 fba4 	bl	800637c <UART_CheckIdleState>
 8005c34:	4603      	mov	r3, r0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3708      	adds	r7, #8
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
	...

08005c40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c44:	b08c      	sub	sp, #48	; 0x30
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	431a      	orrs	r2, r3
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	431a      	orrs	r2, r3
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	69db      	ldr	r3, [r3, #28]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	4baa      	ldr	r3, [pc, #680]	; (8005f18 <UART_SetConfig+0x2d8>)
 8005c70:	4013      	ands	r3, r2
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	6812      	ldr	r2, [r2, #0]
 8005c76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c78:	430b      	orrs	r3, r1
 8005c7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	68da      	ldr	r2, [r3, #12]
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a9f      	ldr	r2, [pc, #636]	; (8005f1c <UART_SetConfig+0x2dc>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d004      	beq.n	8005cac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005cb6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	6812      	ldr	r2, [r2, #0]
 8005cbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cc0:	430b      	orrs	r3, r1
 8005cc2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cca:	f023 010f 	bic.w	r1, r3, #15
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a90      	ldr	r2, [pc, #576]	; (8005f20 <UART_SetConfig+0x2e0>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d125      	bne.n	8005d30 <UART_SetConfig+0xf0>
 8005ce4:	4b8f      	ldr	r3, [pc, #572]	; (8005f24 <UART_SetConfig+0x2e4>)
 8005ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cea:	f003 0303 	and.w	r3, r3, #3
 8005cee:	2b03      	cmp	r3, #3
 8005cf0:	d81a      	bhi.n	8005d28 <UART_SetConfig+0xe8>
 8005cf2:	a201      	add	r2, pc, #4	; (adr r2, 8005cf8 <UART_SetConfig+0xb8>)
 8005cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf8:	08005d09 	.word	0x08005d09
 8005cfc:	08005d19 	.word	0x08005d19
 8005d00:	08005d11 	.word	0x08005d11
 8005d04:	08005d21 	.word	0x08005d21
 8005d08:	2301      	movs	r3, #1
 8005d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d0e:	e116      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005d10:	2302      	movs	r3, #2
 8005d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d16:	e112      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005d18:	2304      	movs	r3, #4
 8005d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d1e:	e10e      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005d20:	2308      	movs	r3, #8
 8005d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d26:	e10a      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005d28:	2310      	movs	r3, #16
 8005d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d2e:	e106      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a7c      	ldr	r2, [pc, #496]	; (8005f28 <UART_SetConfig+0x2e8>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d138      	bne.n	8005dac <UART_SetConfig+0x16c>
 8005d3a:	4b7a      	ldr	r3, [pc, #488]	; (8005f24 <UART_SetConfig+0x2e4>)
 8005d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d40:	f003 030c 	and.w	r3, r3, #12
 8005d44:	2b0c      	cmp	r3, #12
 8005d46:	d82d      	bhi.n	8005da4 <UART_SetConfig+0x164>
 8005d48:	a201      	add	r2, pc, #4	; (adr r2, 8005d50 <UART_SetConfig+0x110>)
 8005d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4e:	bf00      	nop
 8005d50:	08005d85 	.word	0x08005d85
 8005d54:	08005da5 	.word	0x08005da5
 8005d58:	08005da5 	.word	0x08005da5
 8005d5c:	08005da5 	.word	0x08005da5
 8005d60:	08005d95 	.word	0x08005d95
 8005d64:	08005da5 	.word	0x08005da5
 8005d68:	08005da5 	.word	0x08005da5
 8005d6c:	08005da5 	.word	0x08005da5
 8005d70:	08005d8d 	.word	0x08005d8d
 8005d74:	08005da5 	.word	0x08005da5
 8005d78:	08005da5 	.word	0x08005da5
 8005d7c:	08005da5 	.word	0x08005da5
 8005d80:	08005d9d 	.word	0x08005d9d
 8005d84:	2300      	movs	r3, #0
 8005d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d8a:	e0d8      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d92:	e0d4      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005d94:	2304      	movs	r3, #4
 8005d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d9a:	e0d0      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005d9c:	2308      	movs	r3, #8
 8005d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005da2:	e0cc      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005da4:	2310      	movs	r3, #16
 8005da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005daa:	e0c8      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a5e      	ldr	r2, [pc, #376]	; (8005f2c <UART_SetConfig+0x2ec>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d125      	bne.n	8005e02 <UART_SetConfig+0x1c2>
 8005db6:	4b5b      	ldr	r3, [pc, #364]	; (8005f24 <UART_SetConfig+0x2e4>)
 8005db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dbc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005dc0:	2b30      	cmp	r3, #48	; 0x30
 8005dc2:	d016      	beq.n	8005df2 <UART_SetConfig+0x1b2>
 8005dc4:	2b30      	cmp	r3, #48	; 0x30
 8005dc6:	d818      	bhi.n	8005dfa <UART_SetConfig+0x1ba>
 8005dc8:	2b20      	cmp	r3, #32
 8005dca:	d00a      	beq.n	8005de2 <UART_SetConfig+0x1a2>
 8005dcc:	2b20      	cmp	r3, #32
 8005dce:	d814      	bhi.n	8005dfa <UART_SetConfig+0x1ba>
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d002      	beq.n	8005dda <UART_SetConfig+0x19a>
 8005dd4:	2b10      	cmp	r3, #16
 8005dd6:	d008      	beq.n	8005dea <UART_SetConfig+0x1aa>
 8005dd8:	e00f      	b.n	8005dfa <UART_SetConfig+0x1ba>
 8005dda:	2300      	movs	r3, #0
 8005ddc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005de0:	e0ad      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005de2:	2302      	movs	r3, #2
 8005de4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005de8:	e0a9      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005dea:	2304      	movs	r3, #4
 8005dec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005df0:	e0a5      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005df2:	2308      	movs	r3, #8
 8005df4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005df8:	e0a1      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005dfa:	2310      	movs	r3, #16
 8005dfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e00:	e09d      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a4a      	ldr	r2, [pc, #296]	; (8005f30 <UART_SetConfig+0x2f0>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d125      	bne.n	8005e58 <UART_SetConfig+0x218>
 8005e0c:	4b45      	ldr	r3, [pc, #276]	; (8005f24 <UART_SetConfig+0x2e4>)
 8005e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005e16:	2bc0      	cmp	r3, #192	; 0xc0
 8005e18:	d016      	beq.n	8005e48 <UART_SetConfig+0x208>
 8005e1a:	2bc0      	cmp	r3, #192	; 0xc0
 8005e1c:	d818      	bhi.n	8005e50 <UART_SetConfig+0x210>
 8005e1e:	2b80      	cmp	r3, #128	; 0x80
 8005e20:	d00a      	beq.n	8005e38 <UART_SetConfig+0x1f8>
 8005e22:	2b80      	cmp	r3, #128	; 0x80
 8005e24:	d814      	bhi.n	8005e50 <UART_SetConfig+0x210>
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d002      	beq.n	8005e30 <UART_SetConfig+0x1f0>
 8005e2a:	2b40      	cmp	r3, #64	; 0x40
 8005e2c:	d008      	beq.n	8005e40 <UART_SetConfig+0x200>
 8005e2e:	e00f      	b.n	8005e50 <UART_SetConfig+0x210>
 8005e30:	2300      	movs	r3, #0
 8005e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e36:	e082      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005e38:	2302      	movs	r3, #2
 8005e3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e3e:	e07e      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005e40:	2304      	movs	r3, #4
 8005e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e46:	e07a      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005e48:	2308      	movs	r3, #8
 8005e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e4e:	e076      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005e50:	2310      	movs	r3, #16
 8005e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e56:	e072      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a35      	ldr	r2, [pc, #212]	; (8005f34 <UART_SetConfig+0x2f4>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d12a      	bne.n	8005eb8 <UART_SetConfig+0x278>
 8005e62:	4b30      	ldr	r3, [pc, #192]	; (8005f24 <UART_SetConfig+0x2e4>)
 8005e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e70:	d01a      	beq.n	8005ea8 <UART_SetConfig+0x268>
 8005e72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e76:	d81b      	bhi.n	8005eb0 <UART_SetConfig+0x270>
 8005e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e7c:	d00c      	beq.n	8005e98 <UART_SetConfig+0x258>
 8005e7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e82:	d815      	bhi.n	8005eb0 <UART_SetConfig+0x270>
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d003      	beq.n	8005e90 <UART_SetConfig+0x250>
 8005e88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e8c:	d008      	beq.n	8005ea0 <UART_SetConfig+0x260>
 8005e8e:	e00f      	b.n	8005eb0 <UART_SetConfig+0x270>
 8005e90:	2300      	movs	r3, #0
 8005e92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e96:	e052      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005e98:	2302      	movs	r3, #2
 8005e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e9e:	e04e      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005ea0:	2304      	movs	r3, #4
 8005ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ea6:	e04a      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005ea8:	2308      	movs	r3, #8
 8005eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eae:	e046      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005eb0:	2310      	movs	r3, #16
 8005eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eb6:	e042      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a17      	ldr	r2, [pc, #92]	; (8005f1c <UART_SetConfig+0x2dc>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d13a      	bne.n	8005f38 <UART_SetConfig+0x2f8>
 8005ec2:	4b18      	ldr	r3, [pc, #96]	; (8005f24 <UART_SetConfig+0x2e4>)
 8005ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ec8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ecc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ed0:	d01a      	beq.n	8005f08 <UART_SetConfig+0x2c8>
 8005ed2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ed6:	d81b      	bhi.n	8005f10 <UART_SetConfig+0x2d0>
 8005ed8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005edc:	d00c      	beq.n	8005ef8 <UART_SetConfig+0x2b8>
 8005ede:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ee2:	d815      	bhi.n	8005f10 <UART_SetConfig+0x2d0>
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d003      	beq.n	8005ef0 <UART_SetConfig+0x2b0>
 8005ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eec:	d008      	beq.n	8005f00 <UART_SetConfig+0x2c0>
 8005eee:	e00f      	b.n	8005f10 <UART_SetConfig+0x2d0>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ef6:	e022      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005ef8:	2302      	movs	r3, #2
 8005efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005efe:	e01e      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005f00:	2304      	movs	r3, #4
 8005f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f06:	e01a      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005f08:	2308      	movs	r3, #8
 8005f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f0e:	e016      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005f10:	2310      	movs	r3, #16
 8005f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f16:	e012      	b.n	8005f3e <UART_SetConfig+0x2fe>
 8005f18:	cfff69f3 	.word	0xcfff69f3
 8005f1c:	40008000 	.word	0x40008000
 8005f20:	40013800 	.word	0x40013800
 8005f24:	40021000 	.word	0x40021000
 8005f28:	40004400 	.word	0x40004400
 8005f2c:	40004800 	.word	0x40004800
 8005f30:	40004c00 	.word	0x40004c00
 8005f34:	40005000 	.word	0x40005000
 8005f38:	2310      	movs	r3, #16
 8005f3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4aae      	ldr	r2, [pc, #696]	; (80061fc <UART_SetConfig+0x5bc>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	f040 8097 	bne.w	8006078 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005f4e:	2b08      	cmp	r3, #8
 8005f50:	d823      	bhi.n	8005f9a <UART_SetConfig+0x35a>
 8005f52:	a201      	add	r2, pc, #4	; (adr r2, 8005f58 <UART_SetConfig+0x318>)
 8005f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f58:	08005f7d 	.word	0x08005f7d
 8005f5c:	08005f9b 	.word	0x08005f9b
 8005f60:	08005f85 	.word	0x08005f85
 8005f64:	08005f9b 	.word	0x08005f9b
 8005f68:	08005f8b 	.word	0x08005f8b
 8005f6c:	08005f9b 	.word	0x08005f9b
 8005f70:	08005f9b 	.word	0x08005f9b
 8005f74:	08005f9b 	.word	0x08005f9b
 8005f78:	08005f93 	.word	0x08005f93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f7c:	f7fe ff58 	bl	8004e30 <HAL_RCC_GetPCLK1Freq>
 8005f80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f82:	e010      	b.n	8005fa6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f84:	4b9e      	ldr	r3, [pc, #632]	; (8006200 <UART_SetConfig+0x5c0>)
 8005f86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f88:	e00d      	b.n	8005fa6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f8a:	f7fe feb9 	bl	8004d00 <HAL_RCC_GetSysClockFreq>
 8005f8e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f90:	e009      	b.n	8005fa6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f98:	e005      	b.n	8005fa6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005fa4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f000 8130 	beq.w	800620e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb2:	4a94      	ldr	r2, [pc, #592]	; (8006204 <UART_SetConfig+0x5c4>)
 8005fb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fb8:	461a      	mov	r2, r3
 8005fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fc0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	685a      	ldr	r2, [r3, #4]
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	005b      	lsls	r3, r3, #1
 8005fca:	4413      	add	r3, r2
 8005fcc:	69ba      	ldr	r2, [r7, #24]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d305      	bcc.n	8005fde <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005fd8:	69ba      	ldr	r2, [r7, #24]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d903      	bls.n	8005fe6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005fe4:	e113      	b.n	800620e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe8:	2200      	movs	r2, #0
 8005fea:	60bb      	str	r3, [r7, #8]
 8005fec:	60fa      	str	r2, [r7, #12]
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff2:	4a84      	ldr	r2, [pc, #528]	; (8006204 <UART_SetConfig+0x5c4>)
 8005ff4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	603b      	str	r3, [r7, #0]
 8005ffe:	607a      	str	r2, [r7, #4]
 8006000:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006004:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006008:	f7fa f8f8 	bl	80001fc <__aeabi_uldivmod>
 800600c:	4602      	mov	r2, r0
 800600e:	460b      	mov	r3, r1
 8006010:	4610      	mov	r0, r2
 8006012:	4619      	mov	r1, r3
 8006014:	f04f 0200 	mov.w	r2, #0
 8006018:	f04f 0300 	mov.w	r3, #0
 800601c:	020b      	lsls	r3, r1, #8
 800601e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006022:	0202      	lsls	r2, r0, #8
 8006024:	6979      	ldr	r1, [r7, #20]
 8006026:	6849      	ldr	r1, [r1, #4]
 8006028:	0849      	lsrs	r1, r1, #1
 800602a:	2000      	movs	r0, #0
 800602c:	460c      	mov	r4, r1
 800602e:	4605      	mov	r5, r0
 8006030:	eb12 0804 	adds.w	r8, r2, r4
 8006034:	eb43 0905 	adc.w	r9, r3, r5
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	469a      	mov	sl, r3
 8006040:	4693      	mov	fp, r2
 8006042:	4652      	mov	r2, sl
 8006044:	465b      	mov	r3, fp
 8006046:	4640      	mov	r0, r8
 8006048:	4649      	mov	r1, r9
 800604a:	f7fa f8d7 	bl	80001fc <__aeabi_uldivmod>
 800604e:	4602      	mov	r2, r0
 8006050:	460b      	mov	r3, r1
 8006052:	4613      	mov	r3, r2
 8006054:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006056:	6a3b      	ldr	r3, [r7, #32]
 8006058:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800605c:	d308      	bcc.n	8006070 <UART_SetConfig+0x430>
 800605e:	6a3b      	ldr	r3, [r7, #32]
 8006060:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006064:	d204      	bcs.n	8006070 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6a3a      	ldr	r2, [r7, #32]
 800606c:	60da      	str	r2, [r3, #12]
 800606e:	e0ce      	b.n	800620e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006076:	e0ca      	b.n	800620e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	69db      	ldr	r3, [r3, #28]
 800607c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006080:	d166      	bne.n	8006150 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006082:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006086:	2b08      	cmp	r3, #8
 8006088:	d827      	bhi.n	80060da <UART_SetConfig+0x49a>
 800608a:	a201      	add	r2, pc, #4	; (adr r2, 8006090 <UART_SetConfig+0x450>)
 800608c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006090:	080060b5 	.word	0x080060b5
 8006094:	080060bd 	.word	0x080060bd
 8006098:	080060c5 	.word	0x080060c5
 800609c:	080060db 	.word	0x080060db
 80060a0:	080060cb 	.word	0x080060cb
 80060a4:	080060db 	.word	0x080060db
 80060a8:	080060db 	.word	0x080060db
 80060ac:	080060db 	.word	0x080060db
 80060b0:	080060d3 	.word	0x080060d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060b4:	f7fe febc 	bl	8004e30 <HAL_RCC_GetPCLK1Freq>
 80060b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80060ba:	e014      	b.n	80060e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060bc:	f7fe fece 	bl	8004e5c <HAL_RCC_GetPCLK2Freq>
 80060c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80060c2:	e010      	b.n	80060e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060c4:	4b4e      	ldr	r3, [pc, #312]	; (8006200 <UART_SetConfig+0x5c0>)
 80060c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80060c8:	e00d      	b.n	80060e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060ca:	f7fe fe19 	bl	8004d00 <HAL_RCC_GetSysClockFreq>
 80060ce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80060d0:	e009      	b.n	80060e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80060d8:	e005      	b.n	80060e6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80060da:	2300      	movs	r3, #0
 80060dc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80060e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f000 8090 	beq.w	800620e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f2:	4a44      	ldr	r2, [pc, #272]	; (8006204 <UART_SetConfig+0x5c4>)
 80060f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060f8:	461a      	mov	r2, r3
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006100:	005a      	lsls	r2, r3, #1
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	085b      	lsrs	r3, r3, #1
 8006108:	441a      	add	r2, r3
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006112:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006114:	6a3b      	ldr	r3, [r7, #32]
 8006116:	2b0f      	cmp	r3, #15
 8006118:	d916      	bls.n	8006148 <UART_SetConfig+0x508>
 800611a:	6a3b      	ldr	r3, [r7, #32]
 800611c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006120:	d212      	bcs.n	8006148 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006122:	6a3b      	ldr	r3, [r7, #32]
 8006124:	b29b      	uxth	r3, r3
 8006126:	f023 030f 	bic.w	r3, r3, #15
 800612a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800612c:	6a3b      	ldr	r3, [r7, #32]
 800612e:	085b      	lsrs	r3, r3, #1
 8006130:	b29b      	uxth	r3, r3
 8006132:	f003 0307 	and.w	r3, r3, #7
 8006136:	b29a      	uxth	r2, r3
 8006138:	8bfb      	ldrh	r3, [r7, #30]
 800613a:	4313      	orrs	r3, r2
 800613c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	8bfa      	ldrh	r2, [r7, #30]
 8006144:	60da      	str	r2, [r3, #12]
 8006146:	e062      	b.n	800620e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800614e:	e05e      	b.n	800620e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006150:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006154:	2b08      	cmp	r3, #8
 8006156:	d828      	bhi.n	80061aa <UART_SetConfig+0x56a>
 8006158:	a201      	add	r2, pc, #4	; (adr r2, 8006160 <UART_SetConfig+0x520>)
 800615a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800615e:	bf00      	nop
 8006160:	08006185 	.word	0x08006185
 8006164:	0800618d 	.word	0x0800618d
 8006168:	08006195 	.word	0x08006195
 800616c:	080061ab 	.word	0x080061ab
 8006170:	0800619b 	.word	0x0800619b
 8006174:	080061ab 	.word	0x080061ab
 8006178:	080061ab 	.word	0x080061ab
 800617c:	080061ab 	.word	0x080061ab
 8006180:	080061a3 	.word	0x080061a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006184:	f7fe fe54 	bl	8004e30 <HAL_RCC_GetPCLK1Freq>
 8006188:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800618a:	e014      	b.n	80061b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800618c:	f7fe fe66 	bl	8004e5c <HAL_RCC_GetPCLK2Freq>
 8006190:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006192:	e010      	b.n	80061b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006194:	4b1a      	ldr	r3, [pc, #104]	; (8006200 <UART_SetConfig+0x5c0>)
 8006196:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006198:	e00d      	b.n	80061b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800619a:	f7fe fdb1 	bl	8004d00 <HAL_RCC_GetSysClockFreq>
 800619e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80061a0:	e009      	b.n	80061b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80061a8:	e005      	b.n	80061b6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80061aa:	2300      	movs	r3, #0
 80061ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80061b4:	bf00      	nop
    }

    if (pclk != 0U)
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d028      	beq.n	800620e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c0:	4a10      	ldr	r2, [pc, #64]	; (8006204 <UART_SetConfig+0x5c4>)
 80061c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061c6:	461a      	mov	r2, r3
 80061c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	085b      	lsrs	r3, r3, #1
 80061d4:	441a      	add	r2, r3
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	fbb2 f3f3 	udiv	r3, r2, r3
 80061de:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061e0:	6a3b      	ldr	r3, [r7, #32]
 80061e2:	2b0f      	cmp	r3, #15
 80061e4:	d910      	bls.n	8006208 <UART_SetConfig+0x5c8>
 80061e6:	6a3b      	ldr	r3, [r7, #32]
 80061e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061ec:	d20c      	bcs.n	8006208 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80061ee:	6a3b      	ldr	r3, [r7, #32]
 80061f0:	b29a      	uxth	r2, r3
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	60da      	str	r2, [r3, #12]
 80061f8:	e009      	b.n	800620e <UART_SetConfig+0x5ce>
 80061fa:	bf00      	nop
 80061fc:	40008000 	.word	0x40008000
 8006200:	00f42400 	.word	0x00f42400
 8006204:	08006930 	.word	0x08006930
      }
      else
      {
        ret = HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	2201      	movs	r2, #1
 8006212:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	2201      	movs	r2, #1
 800621a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	2200      	movs	r2, #0
 8006222:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	2200      	movs	r2, #0
 8006228:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800622a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800622e:	4618      	mov	r0, r3
 8006230:	3730      	adds	r7, #48	; 0x30
 8006232:	46bd      	mov	sp, r7
 8006234:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006238 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006244:	f003 0308 	and.w	r3, r3, #8
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00a      	beq.n	8006262 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	430a      	orrs	r2, r1
 8006260:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006266:	f003 0301 	and.w	r3, r3, #1
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00a      	beq.n	8006284 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	430a      	orrs	r2, r1
 8006282:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006288:	f003 0302 	and.w	r3, r3, #2
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00a      	beq.n	80062a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	430a      	orrs	r2, r1
 80062a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062aa:	f003 0304 	and.w	r3, r3, #4
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00a      	beq.n	80062c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	430a      	orrs	r2, r1
 80062c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062cc:	f003 0310 	and.w	r3, r3, #16
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00a      	beq.n	80062ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	430a      	orrs	r2, r1
 80062e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ee:	f003 0320 	and.w	r3, r3, #32
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00a      	beq.n	800630c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	430a      	orrs	r2, r1
 800630a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006314:	2b00      	cmp	r3, #0
 8006316:	d01a      	beq.n	800634e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	430a      	orrs	r2, r1
 800632c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006332:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006336:	d10a      	bne.n	800634e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	430a      	orrs	r2, r1
 800634c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00a      	beq.n	8006370 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	430a      	orrs	r2, r1
 800636e:	605a      	str	r2, [r3, #4]
  }
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b098      	sub	sp, #96	; 0x60
 8006380:	af02      	add	r7, sp, #8
 8006382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800638c:	f7fb fa62 	bl	8001854 <HAL_GetTick>
 8006390:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 0308 	and.w	r3, r3, #8
 800639c:	2b08      	cmp	r3, #8
 800639e:	d12f      	bne.n	8006400 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063a8:	2200      	movs	r2, #0
 80063aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f88e 	bl	80064d0 <UART_WaitOnFlagUntilTimeout>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d022      	beq.n	8006400 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c2:	e853 3f00 	ldrex	r3, [r3]
 80063c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80063c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063ce:	653b      	str	r3, [r7, #80]	; 0x50
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	461a      	mov	r2, r3
 80063d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063d8:	647b      	str	r3, [r7, #68]	; 0x44
 80063da:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063e0:	e841 2300 	strex	r3, r2, [r1]
 80063e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d1e6      	bne.n	80063ba <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2220      	movs	r2, #32
 80063f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063fc:	2303      	movs	r3, #3
 80063fe:	e063      	b.n	80064c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 0304 	and.w	r3, r3, #4
 800640a:	2b04      	cmp	r3, #4
 800640c:	d149      	bne.n	80064a2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800640e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006412:	9300      	str	r3, [sp, #0]
 8006414:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006416:	2200      	movs	r2, #0
 8006418:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 f857 	bl	80064d0 <UART_WaitOnFlagUntilTimeout>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d03c      	beq.n	80064a2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006430:	e853 3f00 	ldrex	r3, [r3]
 8006434:	623b      	str	r3, [r7, #32]
   return(result);
 8006436:	6a3b      	ldr	r3, [r7, #32]
 8006438:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800643c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	461a      	mov	r2, r3
 8006444:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006446:	633b      	str	r3, [r7, #48]	; 0x30
 8006448:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800644c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800644e:	e841 2300 	strex	r3, r2, [r1]
 8006452:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1e6      	bne.n	8006428 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	3308      	adds	r3, #8
 8006460:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	e853 3f00 	ldrex	r3, [r3]
 8006468:	60fb      	str	r3, [r7, #12]
   return(result);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f023 0301 	bic.w	r3, r3, #1
 8006470:	64bb      	str	r3, [r7, #72]	; 0x48
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	3308      	adds	r3, #8
 8006478:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800647a:	61fa      	str	r2, [r7, #28]
 800647c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647e:	69b9      	ldr	r1, [r7, #24]
 8006480:	69fa      	ldr	r2, [r7, #28]
 8006482:	e841 2300 	strex	r3, r2, [r1]
 8006486:	617b      	str	r3, [r7, #20]
   return(result);
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d1e5      	bne.n	800645a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2220      	movs	r2, #32
 8006492:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800649e:	2303      	movs	r3, #3
 80064a0:	e012      	b.n	80064c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2220      	movs	r2, #32
 80064a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2220      	movs	r2, #32
 80064ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3758      	adds	r7, #88	; 0x58
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	603b      	str	r3, [r7, #0]
 80064dc:	4613      	mov	r3, r2
 80064de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064e0:	e049      	b.n	8006576 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e8:	d045      	beq.n	8006576 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064ea:	f7fb f9b3 	bl	8001854 <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	69ba      	ldr	r2, [r7, #24]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d302      	bcc.n	8006500 <UART_WaitOnFlagUntilTimeout+0x30>
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d101      	bne.n	8006504 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e048      	b.n	8006596 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 0304 	and.w	r3, r3, #4
 800650e:	2b00      	cmp	r3, #0
 8006510:	d031      	beq.n	8006576 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	69db      	ldr	r3, [r3, #28]
 8006518:	f003 0308 	and.w	r3, r3, #8
 800651c:	2b08      	cmp	r3, #8
 800651e:	d110      	bne.n	8006542 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2208      	movs	r2, #8
 8006526:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006528:	68f8      	ldr	r0, [r7, #12]
 800652a:	f000 f838 	bl	800659e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2208      	movs	r2, #8
 8006532:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e029      	b.n	8006596 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	69db      	ldr	r3, [r3, #28]
 8006548:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800654c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006550:	d111      	bne.n	8006576 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800655a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f000 f81e 	bl	800659e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2220      	movs	r2, #32
 8006566:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e00f      	b.n	8006596 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	69da      	ldr	r2, [r3, #28]
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	4013      	ands	r3, r2
 8006580:	68ba      	ldr	r2, [r7, #8]
 8006582:	429a      	cmp	r2, r3
 8006584:	bf0c      	ite	eq
 8006586:	2301      	moveq	r3, #1
 8006588:	2300      	movne	r3, #0
 800658a:	b2db      	uxtb	r3, r3
 800658c:	461a      	mov	r2, r3
 800658e:	79fb      	ldrb	r3, [r7, #7]
 8006590:	429a      	cmp	r2, r3
 8006592:	d0a6      	beq.n	80064e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3710      	adds	r7, #16
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800659e:	b480      	push	{r7}
 80065a0:	b095      	sub	sp, #84	; 0x54
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ae:	e853 3f00 	ldrex	r3, [r3]
 80065b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80065b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	461a      	mov	r2, r3
 80065c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065c4:	643b      	str	r3, [r7, #64]	; 0x40
 80065c6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065cc:	e841 2300 	strex	r3, r2, [r1]
 80065d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d1e6      	bne.n	80065a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	3308      	adds	r3, #8
 80065de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e0:	6a3b      	ldr	r3, [r7, #32]
 80065e2:	e853 3f00 	ldrex	r3, [r3]
 80065e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065ee:	f023 0301 	bic.w	r3, r3, #1
 80065f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	3308      	adds	r3, #8
 80065fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006600:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006604:	e841 2300 	strex	r3, r2, [r1]
 8006608:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800660a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660c:	2b00      	cmp	r3, #0
 800660e:	d1e3      	bne.n	80065d8 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006614:	2b01      	cmp	r3, #1
 8006616:	d118      	bne.n	800664a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	e853 3f00 	ldrex	r3, [r3]
 8006624:	60bb      	str	r3, [r7, #8]
   return(result);
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	f023 0310 	bic.w	r3, r3, #16
 800662c:	647b      	str	r3, [r7, #68]	; 0x44
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	461a      	mov	r2, r3
 8006634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006636:	61bb      	str	r3, [r7, #24]
 8006638:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663a:	6979      	ldr	r1, [r7, #20]
 800663c:	69ba      	ldr	r2, [r7, #24]
 800663e:	e841 2300 	strex	r3, r2, [r1]
 8006642:	613b      	str	r3, [r7, #16]
   return(result);
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1e6      	bne.n	8006618 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2220      	movs	r2, #32
 800664e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800665e:	bf00      	nop
 8006660:	3754      	adds	r7, #84	; 0x54
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr

0800666a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800666a:	b480      	push	{r7}
 800666c:	b085      	sub	sp, #20
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006678:	2b01      	cmp	r3, #1
 800667a:	d101      	bne.n	8006680 <HAL_UARTEx_DisableFifoMode+0x16>
 800667c:	2302      	movs	r3, #2
 800667e:	e027      	b.n	80066d0 <HAL_UARTEx_DisableFifoMode+0x66>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2224      	movs	r2, #36	; 0x24
 800668c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f022 0201 	bic.w	r2, r2, #1
 80066a6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80066ae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2220      	movs	r2, #32
 80066c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3714      	adds	r7, #20
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d101      	bne.n	80066f4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80066f0:	2302      	movs	r3, #2
 80066f2:	e02d      	b.n	8006750 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2224      	movs	r2, #36	; 0x24
 8006700:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f022 0201 	bic.w	r2, r2, #1
 800671a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	683a      	ldr	r2, [r7, #0]
 800672c:	430a      	orrs	r2, r1
 800672e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 f84f 	bl	80067d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2220      	movs	r2, #32
 8006742:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3710      	adds	r7, #16
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006768:	2b01      	cmp	r3, #1
 800676a:	d101      	bne.n	8006770 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800676c:	2302      	movs	r3, #2
 800676e:	e02d      	b.n	80067cc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2224      	movs	r2, #36	; 0x24
 800677c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f022 0201 	bic.w	r2, r2, #1
 8006796:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	683a      	ldr	r2, [r7, #0]
 80067a8:	430a      	orrs	r2, r1
 80067aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 f811 	bl	80067d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2220      	movs	r2, #32
 80067be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3710      	adds	r7, #16
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d108      	bne.n	80067f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80067f4:	e031      	b.n	800685a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80067f6:	2308      	movs	r3, #8
 80067f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80067fa:	2308      	movs	r3, #8
 80067fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	0e5b      	lsrs	r3, r3, #25
 8006806:	b2db      	uxtb	r3, r3
 8006808:	f003 0307 	and.w	r3, r3, #7
 800680c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	0f5b      	lsrs	r3, r3, #29
 8006816:	b2db      	uxtb	r3, r3
 8006818:	f003 0307 	and.w	r3, r3, #7
 800681c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800681e:	7bbb      	ldrb	r3, [r7, #14]
 8006820:	7b3a      	ldrb	r2, [r7, #12]
 8006822:	4911      	ldr	r1, [pc, #68]	; (8006868 <UARTEx_SetNbDataToProcess+0x94>)
 8006824:	5c8a      	ldrb	r2, [r1, r2]
 8006826:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800682a:	7b3a      	ldrb	r2, [r7, #12]
 800682c:	490f      	ldr	r1, [pc, #60]	; (800686c <UARTEx_SetNbDataToProcess+0x98>)
 800682e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006830:	fb93 f3f2 	sdiv	r3, r3, r2
 8006834:	b29a      	uxth	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800683c:	7bfb      	ldrb	r3, [r7, #15]
 800683e:	7b7a      	ldrb	r2, [r7, #13]
 8006840:	4909      	ldr	r1, [pc, #36]	; (8006868 <UARTEx_SetNbDataToProcess+0x94>)
 8006842:	5c8a      	ldrb	r2, [r1, r2]
 8006844:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006848:	7b7a      	ldrb	r2, [r7, #13]
 800684a:	4908      	ldr	r1, [pc, #32]	; (800686c <UARTEx_SetNbDataToProcess+0x98>)
 800684c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800684e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006852:	b29a      	uxth	r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800685a:	bf00      	nop
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	08006948 	.word	0x08006948
 800686c:	08006950 	.word	0x08006950

08006870 <memset>:
 8006870:	4402      	add	r2, r0
 8006872:	4603      	mov	r3, r0
 8006874:	4293      	cmp	r3, r2
 8006876:	d100      	bne.n	800687a <memset+0xa>
 8006878:	4770      	bx	lr
 800687a:	f803 1b01 	strb.w	r1, [r3], #1
 800687e:	e7f9      	b.n	8006874 <memset+0x4>

08006880 <__libc_init_array>:
 8006880:	b570      	push	{r4, r5, r6, lr}
 8006882:	4d0d      	ldr	r5, [pc, #52]	; (80068b8 <__libc_init_array+0x38>)
 8006884:	4c0d      	ldr	r4, [pc, #52]	; (80068bc <__libc_init_array+0x3c>)
 8006886:	1b64      	subs	r4, r4, r5
 8006888:	10a4      	asrs	r4, r4, #2
 800688a:	2600      	movs	r6, #0
 800688c:	42a6      	cmp	r6, r4
 800688e:	d109      	bne.n	80068a4 <__libc_init_array+0x24>
 8006890:	4d0b      	ldr	r5, [pc, #44]	; (80068c0 <__libc_init_array+0x40>)
 8006892:	4c0c      	ldr	r4, [pc, #48]	; (80068c4 <__libc_init_array+0x44>)
 8006894:	f000 f818 	bl	80068c8 <_init>
 8006898:	1b64      	subs	r4, r4, r5
 800689a:	10a4      	asrs	r4, r4, #2
 800689c:	2600      	movs	r6, #0
 800689e:	42a6      	cmp	r6, r4
 80068a0:	d105      	bne.n	80068ae <__libc_init_array+0x2e>
 80068a2:	bd70      	pop	{r4, r5, r6, pc}
 80068a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80068a8:	4798      	blx	r3
 80068aa:	3601      	adds	r6, #1
 80068ac:	e7ee      	b.n	800688c <__libc_init_array+0xc>
 80068ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80068b2:	4798      	blx	r3
 80068b4:	3601      	adds	r6, #1
 80068b6:	e7f2      	b.n	800689e <__libc_init_array+0x1e>
 80068b8:	08006960 	.word	0x08006960
 80068bc:	08006960 	.word	0x08006960
 80068c0:	08006960 	.word	0x08006960
 80068c4:	08006964 	.word	0x08006964

080068c8 <_init>:
 80068c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ca:	bf00      	nop
 80068cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ce:	bc08      	pop	{r3}
 80068d0:	469e      	mov	lr, r3
 80068d2:	4770      	bx	lr

080068d4 <_fini>:
 80068d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068d6:	bf00      	nop
 80068d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068da:	bc08      	pop	{r3}
 80068dc:	469e      	mov	lr, r3
 80068de:	4770      	bx	lr

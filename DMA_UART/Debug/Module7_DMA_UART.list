
Module7_DMA_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5fc  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000940  0800a7bc  0800a7bc  0001a7bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0fc  0800b0fc  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  0800b0fc  0800b0fc  0001b0fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b104  0800b104  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b104  0800b104  0001b104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b108  0800b108  0001b108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800b10c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001388  20000024  0800b130  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013ac  0800b130  000213ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024dd6  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004370  00000000  00000000  00044e6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002078  00000000  00000000  000491e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000196d  00000000  00000000  0004b258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e8b3  00000000  00000000  0004cbc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026cd7  00000000  00000000  0007b478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00131f1c  00000000  00000000  000a214f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008ba4  00000000  00000000  001d406c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  001dcc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000024 	.word	0x20000024
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800a7a4 	.word	0x0800a7a4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000028 	.word	0x20000028
 80001fc:	0800a7a4 	.word	0x0800a7a4

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b970 	b.w	80004f8 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9e08      	ldr	r6, [sp, #32]
 8000236:	460d      	mov	r5, r1
 8000238:	4604      	mov	r4, r0
 800023a:	460f      	mov	r7, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14a      	bne.n	80002d6 <__udivmoddi4+0xa6>
 8000240:	428a      	cmp	r2, r1
 8000242:	4694      	mov	ip, r2
 8000244:	d965      	bls.n	8000312 <__udivmoddi4+0xe2>
 8000246:	fab2 f382 	clz	r3, r2
 800024a:	b143      	cbz	r3, 800025e <__udivmoddi4+0x2e>
 800024c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000250:	f1c3 0220 	rsb	r2, r3, #32
 8000254:	409f      	lsls	r7, r3
 8000256:	fa20 f202 	lsr.w	r2, r0, r2
 800025a:	4317      	orrs	r7, r2
 800025c:	409c      	lsls	r4, r3
 800025e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000262:	fa1f f58c 	uxth.w	r5, ip
 8000266:	fbb7 f1fe 	udiv	r1, r7, lr
 800026a:	0c22      	lsrs	r2, r4, #16
 800026c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000270:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000274:	fb01 f005 	mul.w	r0, r1, r5
 8000278:	4290      	cmp	r0, r2
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x62>
 800027c:	eb1c 0202 	adds.w	r2, ip, r2
 8000280:	f101 37ff 	add.w	r7, r1, #4294967295
 8000284:	f080 811c 	bcs.w	80004c0 <__udivmoddi4+0x290>
 8000288:	4290      	cmp	r0, r2
 800028a:	f240 8119 	bls.w	80004c0 <__udivmoddi4+0x290>
 800028e:	3902      	subs	r1, #2
 8000290:	4462      	add	r2, ip
 8000292:	1a12      	subs	r2, r2, r0
 8000294:	b2a4      	uxth	r4, r4
 8000296:	fbb2 f0fe 	udiv	r0, r2, lr
 800029a:	fb0e 2210 	mls	r2, lr, r0, r2
 800029e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a2:	fb00 f505 	mul.w	r5, r0, r5
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x90>
 80002aa:	eb1c 0404 	adds.w	r4, ip, r4
 80002ae:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x294>
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x294>
 80002bc:	4464      	add	r4, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c4:	1b64      	subs	r4, r4, r5
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11e      	cbz	r6, 80002d2 <__udivmoddi4+0xa2>
 80002ca:	40dc      	lsrs	r4, r3
 80002cc:	2300      	movs	r3, #0
 80002ce:	e9c6 4300 	strd	r4, r3, [r6]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d908      	bls.n	80002ec <__udivmoddi4+0xbc>
 80002da:	2e00      	cmp	r6, #0
 80002dc:	f000 80ed 	beq.w	80004ba <__udivmoddi4+0x28a>
 80002e0:	2100      	movs	r1, #0
 80002e2:	e9c6 0500 	strd	r0, r5, [r6]
 80002e6:	4608      	mov	r0, r1
 80002e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ec:	fab3 f183 	clz	r1, r3
 80002f0:	2900      	cmp	r1, #0
 80002f2:	d149      	bne.n	8000388 <__udivmoddi4+0x158>
 80002f4:	42ab      	cmp	r3, r5
 80002f6:	d302      	bcc.n	80002fe <__udivmoddi4+0xce>
 80002f8:	4282      	cmp	r2, r0
 80002fa:	f200 80f8 	bhi.w	80004ee <__udivmoddi4+0x2be>
 80002fe:	1a84      	subs	r4, r0, r2
 8000300:	eb65 0203 	sbc.w	r2, r5, r3
 8000304:	2001      	movs	r0, #1
 8000306:	4617      	mov	r7, r2
 8000308:	2e00      	cmp	r6, #0
 800030a:	d0e2      	beq.n	80002d2 <__udivmoddi4+0xa2>
 800030c:	e9c6 4700 	strd	r4, r7, [r6]
 8000310:	e7df      	b.n	80002d2 <__udivmoddi4+0xa2>
 8000312:	b902      	cbnz	r2, 8000316 <__udivmoddi4+0xe6>
 8000314:	deff      	udf	#255	; 0xff
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8090 	bne.w	8000440 <__udivmoddi4+0x210>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000326:	fa1f fe8c 	uxth.w	lr, ip
 800032a:	2101      	movs	r1, #1
 800032c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000330:	fb07 2015 	mls	r0, r7, r5, r2
 8000334:	0c22      	lsrs	r2, r4, #16
 8000336:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033a:	fb0e f005 	mul.w	r0, lr, r5
 800033e:	4290      	cmp	r0, r2
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x124>
 8000342:	eb1c 0202 	adds.w	r2, ip, r2
 8000346:	f105 38ff 	add.w	r8, r5, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x122>
 800034c:	4290      	cmp	r0, r2
 800034e:	f200 80cb 	bhi.w	80004e8 <__udivmoddi4+0x2b8>
 8000352:	4645      	mov	r5, r8
 8000354:	1a12      	subs	r2, r2, r0
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb2 f0f7 	udiv	r0, r2, r7
 800035c:	fb07 2210 	mls	r2, r7, r0, r2
 8000360:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000364:	fb0e fe00 	mul.w	lr, lr, r0
 8000368:	45a6      	cmp	lr, r4
 800036a:	d908      	bls.n	800037e <__udivmoddi4+0x14e>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 32ff 	add.w	r2, r0, #4294967295
 8000374:	d202      	bcs.n	800037c <__udivmoddi4+0x14c>
 8000376:	45a6      	cmp	lr, r4
 8000378:	f200 80bb 	bhi.w	80004f2 <__udivmoddi4+0x2c2>
 800037c:	4610      	mov	r0, r2
 800037e:	eba4 040e 	sub.w	r4, r4, lr
 8000382:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000386:	e79f      	b.n	80002c8 <__udivmoddi4+0x98>
 8000388:	f1c1 0720 	rsb	r7, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000392:	ea4c 0c03 	orr.w	ip, ip, r3
 8000396:	fa05 f401 	lsl.w	r4, r5, r1
 800039a:	fa20 f307 	lsr.w	r3, r0, r7
 800039e:	40fd      	lsrs	r5, r7
 80003a0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a4:	4323      	orrs	r3, r4
 80003a6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003aa:	fa1f fe8c 	uxth.w	lr, ip
 80003ae:	fb09 5518 	mls	r5, r9, r8, r5
 80003b2:	0c1c      	lsrs	r4, r3, #16
 80003b4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b8:	fb08 f50e 	mul.w	r5, r8, lr
 80003bc:	42a5      	cmp	r5, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	fa00 f001 	lsl.w	r0, r0, r1
 80003c6:	d90b      	bls.n	80003e0 <__udivmoddi4+0x1b0>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d0:	f080 8088 	bcs.w	80004e4 <__udivmoddi4+0x2b4>
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	f240 8085 	bls.w	80004e4 <__udivmoddi4+0x2b4>
 80003da:	f1a8 0802 	sub.w	r8, r8, #2
 80003de:	4464      	add	r4, ip
 80003e0:	1b64      	subs	r4, r4, r5
 80003e2:	b29d      	uxth	r5, r3
 80003e4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e8:	fb09 4413 	mls	r4, r9, r3, r4
 80003ec:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x1da>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f103 35ff 	add.w	r5, r3, #4294967295
 8000400:	d26c      	bcs.n	80004dc <__udivmoddi4+0x2ac>
 8000402:	45a6      	cmp	lr, r4
 8000404:	d96a      	bls.n	80004dc <__udivmoddi4+0x2ac>
 8000406:	3b02      	subs	r3, #2
 8000408:	4464      	add	r4, ip
 800040a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040e:	fba3 9502 	umull	r9, r5, r3, r2
 8000412:	eba4 040e 	sub.w	r4, r4, lr
 8000416:	42ac      	cmp	r4, r5
 8000418:	46c8      	mov	r8, r9
 800041a:	46ae      	mov	lr, r5
 800041c:	d356      	bcc.n	80004cc <__udivmoddi4+0x29c>
 800041e:	d053      	beq.n	80004c8 <__udivmoddi4+0x298>
 8000420:	b156      	cbz	r6, 8000438 <__udivmoddi4+0x208>
 8000422:	ebb0 0208 	subs.w	r2, r0, r8
 8000426:	eb64 040e 	sbc.w	r4, r4, lr
 800042a:	fa04 f707 	lsl.w	r7, r4, r7
 800042e:	40ca      	lsrs	r2, r1
 8000430:	40cc      	lsrs	r4, r1
 8000432:	4317      	orrs	r7, r2
 8000434:	e9c6 7400 	strd	r7, r4, [r6]
 8000438:	4618      	mov	r0, r3
 800043a:	2100      	movs	r1, #0
 800043c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000440:	f1c3 0120 	rsb	r1, r3, #32
 8000444:	fa02 fc03 	lsl.w	ip, r2, r3
 8000448:	fa20 f201 	lsr.w	r2, r0, r1
 800044c:	fa25 f101 	lsr.w	r1, r5, r1
 8000450:	409d      	lsls	r5, r3
 8000452:	432a      	orrs	r2, r5
 8000454:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000460:	fb07 1510 	mls	r5, r7, r0, r1
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046a:	fb00 f50e 	mul.w	r5, r0, lr
 800046e:	428d      	cmp	r5, r1
 8000470:	fa04 f403 	lsl.w	r4, r4, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x258>
 8000476:	eb1c 0101 	adds.w	r1, ip, r1
 800047a:	f100 38ff 	add.w	r8, r0, #4294967295
 800047e:	d22f      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 8000480:	428d      	cmp	r5, r1
 8000482:	d92d      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 8000484:	3802      	subs	r0, #2
 8000486:	4461      	add	r1, ip
 8000488:	1b49      	subs	r1, r1, r5
 800048a:	b292      	uxth	r2, r2
 800048c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000490:	fb07 1115 	mls	r1, r7, r5, r1
 8000494:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000498:	fb05 f10e 	mul.w	r1, r5, lr
 800049c:	4291      	cmp	r1, r2
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x282>
 80004a0:	eb1c 0202 	adds.w	r2, ip, r2
 80004a4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a8:	d216      	bcs.n	80004d8 <__udivmoddi4+0x2a8>
 80004aa:	4291      	cmp	r1, r2
 80004ac:	d914      	bls.n	80004d8 <__udivmoddi4+0x2a8>
 80004ae:	3d02      	subs	r5, #2
 80004b0:	4462      	add	r2, ip
 80004b2:	1a52      	subs	r2, r2, r1
 80004b4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b8:	e738      	b.n	800032c <__udivmoddi4+0xfc>
 80004ba:	4631      	mov	r1, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xa2>
 80004c0:	4639      	mov	r1, r7
 80004c2:	e6e6      	b.n	8000292 <__udivmoddi4+0x62>
 80004c4:	4610      	mov	r0, r2
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x90>
 80004c8:	4548      	cmp	r0, r9
 80004ca:	d2a9      	bcs.n	8000420 <__udivmoddi4+0x1f0>
 80004cc:	ebb9 0802 	subs.w	r8, r9, r2
 80004d0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d4:	3b01      	subs	r3, #1
 80004d6:	e7a3      	b.n	8000420 <__udivmoddi4+0x1f0>
 80004d8:	4645      	mov	r5, r8
 80004da:	e7ea      	b.n	80004b2 <__udivmoddi4+0x282>
 80004dc:	462b      	mov	r3, r5
 80004de:	e794      	b.n	800040a <__udivmoddi4+0x1da>
 80004e0:	4640      	mov	r0, r8
 80004e2:	e7d1      	b.n	8000488 <__udivmoddi4+0x258>
 80004e4:	46d0      	mov	r8, sl
 80004e6:	e77b      	b.n	80003e0 <__udivmoddi4+0x1b0>
 80004e8:	3d02      	subs	r5, #2
 80004ea:	4462      	add	r2, ip
 80004ec:	e732      	b.n	8000354 <__udivmoddi4+0x124>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e70a      	b.n	8000308 <__udivmoddi4+0xd8>
 80004f2:	4464      	add	r4, ip
 80004f4:	3802      	subs	r0, #2
 80004f6:	e742      	b.n	800037e <__udivmoddi4+0x14e>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	f103 0208 	add.w	r2, r3, #8
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	f04f 32ff 	mov.w	r2, #4294967295
 8000514:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	f103 0208 	add.w	r2, r3, #8
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	f103 0208 	add.w	r2, r3, #8
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000530:	bf00      	nop
 8000532:	370c      	adds	r7, #12
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr

0800053c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2200      	movs	r2, #0
 8000548:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800054a:	bf00      	nop
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr

08000556 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000556:	b480      	push	{r7}
 8000558:	b085      	sub	sp, #20
 800055a:	af00      	add	r7, sp, #0
 800055c:	6078      	str	r0, [r7, #4]
 800055e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000566:	68bb      	ldr	r3, [r7, #8]
 8000568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800056c:	d103      	bne.n	8000576 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	691b      	ldr	r3, [r3, #16]
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	e00c      	b.n	8000590 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	3308      	adds	r3, #8
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	e002      	b.n	8000584 <vListInsert+0x2e>
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	685b      	ldr	r3, [r3, #4]
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	685b      	ldr	r3, [r3, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	68ba      	ldr	r2, [r7, #8]
 800058c:	429a      	cmp	r2, r3
 800058e:	d2f6      	bcs.n	800057e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	685a      	ldr	r2, [r3, #4]
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	683a      	ldr	r2, [r7, #0]
 800059e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	68fa      	ldr	r2, [r7, #12]
 80005a4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	683a      	ldr	r2, [r7, #0]
 80005aa:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	1c5a      	adds	r2, r3, #1
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	601a      	str	r2, [r3, #0]
}
 80005bc:	bf00      	nop
 80005be:	3714      	adds	r7, #20
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr

080005c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	691b      	ldr	r3, [r3, #16]
 80005d4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	6892      	ldr	r2, [r2, #8]
 80005de:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	6852      	ldr	r2, [r2, #4]
 80005e8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d103      	bne.n	80005fc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	689a      	ldr	r2, [r3, #8]
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2200      	movs	r2, #0
 8000600:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	1e5a      	subs	r2, r3, #1
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	681b      	ldr	r3, [r3, #0]
}
 8000610:	4618      	mov	r0, r3
 8000612:	3714      	adds	r7, #20
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr

0800061c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800061c:	b580      	push	{r7, lr}
 800061e:	b08c      	sub	sp, #48	; 0x30
 8000620:	af04      	add	r7, sp, #16
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	4613      	mov	r3, r2
 800062a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800062c:	88fb      	ldrh	r3, [r7, #6]
 800062e:	009b      	lsls	r3, r3, #2
 8000630:	4618      	mov	r0, r3
 8000632:	f001 f943 	bl	80018bc <pvPortMalloc>
 8000636:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d013      	beq.n	8000666 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800063e:	2054      	movs	r0, #84	; 0x54
 8000640:	f001 f93c 	bl	80018bc <pvPortMalloc>
 8000644:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8000646:	69fb      	ldr	r3, [r7, #28]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d008      	beq.n	800065e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800064c:	2254      	movs	r2, #84	; 0x54
 800064e:	2100      	movs	r1, #0
 8000650:	69f8      	ldr	r0, [r7, #28]
 8000652:	f00a f87b 	bl	800a74c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000656:	69fb      	ldr	r3, [r7, #28]
 8000658:	697a      	ldr	r2, [r7, #20]
 800065a:	631a      	str	r2, [r3, #48]	; 0x30
 800065c:	e005      	b.n	800066a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800065e:	6978      	ldr	r0, [r7, #20]
 8000660:	f001 f9e6 	bl	8001a30 <vPortFree>
 8000664:	e001      	b.n	800066a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800066a:	69fb      	ldr	r3, [r7, #28]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d013      	beq.n	8000698 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000670:	88fa      	ldrh	r2, [r7, #6]
 8000672:	2300      	movs	r3, #0
 8000674:	9303      	str	r3, [sp, #12]
 8000676:	69fb      	ldr	r3, [r7, #28]
 8000678:	9302      	str	r3, [sp, #8]
 800067a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800067c:	9301      	str	r3, [sp, #4]
 800067e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	68b9      	ldr	r1, [r7, #8]
 8000686:	68f8      	ldr	r0, [r7, #12]
 8000688:	f000 f80e 	bl	80006a8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800068c:	69f8      	ldr	r0, [r7, #28]
 800068e:	f000 f891 	bl	80007b4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000692:	2301      	movs	r3, #1
 8000694:	61bb      	str	r3, [r7, #24]
 8000696:	e002      	b.n	800069e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000698:	f04f 33ff 	mov.w	r3, #4294967295
 800069c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800069e:	69bb      	ldr	r3, [r7, #24]
    }
 80006a0:	4618      	mov	r0, r3
 80006a2:	3720      	adds	r7, #32
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b088      	sub	sp, #32
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]
 80006b4:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80006b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80006c0:	3b01      	subs	r3, #1
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	4413      	add	r3, r2
 80006c6:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80006c8:	69bb      	ldr	r3, [r7, #24]
 80006ca:	f023 0307 	bic.w	r3, r3, #7
 80006ce:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80006d0:	69bb      	ldr	r3, [r7, #24]
 80006d2:	f003 0307 	and.w	r3, r3, #7
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d00a      	beq.n	80006f0 <prvInitialiseNewTask+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80006da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006de:	f383 8811 	msr	BASEPRI, r3
 80006e2:	f3bf 8f6f 	isb	sy
 80006e6:	f3bf 8f4f 	dsb	sy
 80006ea:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80006ec:	bf00      	nop
 80006ee:	e7fe      	b.n	80006ee <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d01e      	beq.n	8000734 <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80006f6:	2300      	movs	r3, #0
 80006f8:	61fb      	str	r3, [r7, #28]
 80006fa:	e012      	b.n	8000722 <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80006fc:	68ba      	ldr	r2, [r7, #8]
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	4413      	add	r3, r2
 8000702:	7819      	ldrb	r1, [r3, #0]
 8000704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	4413      	add	r3, r2
 800070a:	3334      	adds	r3, #52	; 0x34
 800070c:	460a      	mov	r2, r1
 800070e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000710:	68ba      	ldr	r2, [r7, #8]
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	4413      	add	r3, r2
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d006      	beq.n	800072a <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	3301      	adds	r3, #1
 8000720:	61fb      	str	r3, [r7, #28]
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	2b0f      	cmp	r3, #15
 8000726:	d9e9      	bls.n	80006fc <prvInitialiseNewTask+0x54>
 8000728:	e000      	b.n	800072c <prvInitialiseNewTask+0x84>
            {
                break;
 800072a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800072c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800072e:	2200      	movs	r2, #0
 8000730:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000736:	2b06      	cmp	r3, #6
 8000738:	d90a      	bls.n	8000750 <prvInitialiseNewTask+0xa8>
        __asm volatile
 800073a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800073e:	f383 8811 	msr	BASEPRI, r3
 8000742:	f3bf 8f6f 	isb	sy
 8000746:	f3bf 8f4f 	dsb	sy
 800074a:	613b      	str	r3, [r7, #16]
    }
 800074c:	bf00      	nop
 800074e:	e7fe      	b.n	800074e <prvInitialiseNewTask+0xa6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000752:	2b06      	cmp	r3, #6
 8000754:	d901      	bls.n	800075a <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000756:	2306      	movs	r3, #6
 8000758:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800075a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800075c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800075e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000762:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000764:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000768:	3304      	adds	r3, #4
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff fee6 	bl	800053c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000772:	3318      	adds	r3, #24
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff fee1 	bl	800053c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800077a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800077c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800077e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000782:	f1c3 0207 	rsb	r2, r3, #7
 8000786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000788:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800078a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800078c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800078e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000790:	683a      	ldr	r2, [r7, #0]
 8000792:	68f9      	ldr	r1, [r7, #12]
 8000794:	69b8      	ldr	r0, [r7, #24]
 8000796:	f000 fe3f 	bl	8001418 <pxPortInitialiseStack>
 800079a:	4602      	mov	r2, r0
 800079c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800079e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80007a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d002      	beq.n	80007ac <prvInitialiseNewTask+0x104>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80007a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80007aa:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80007ac:	bf00      	nop
 80007ae:	3720      	adds	r7, #32
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80007bc:	f000 ff5c 	bl	8001678 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80007c0:	4b3e      	ldr	r3, [pc, #248]	; (80008bc <prvAddNewTaskToReadyList+0x108>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	3301      	adds	r3, #1
 80007c6:	4a3d      	ldr	r2, [pc, #244]	; (80008bc <prvAddNewTaskToReadyList+0x108>)
 80007c8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80007ca:	4b3d      	ldr	r3, [pc, #244]	; (80008c0 <prvAddNewTaskToReadyList+0x10c>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d109      	bne.n	80007e6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80007d2:	4a3b      	ldr	r2, [pc, #236]	; (80008c0 <prvAddNewTaskToReadyList+0x10c>)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80007d8:	4b38      	ldr	r3, [pc, #224]	; (80008bc <prvAddNewTaskToReadyList+0x108>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d110      	bne.n	8000802 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80007e0:	f000 fb9e 	bl	8000f20 <prvInitialiseTaskLists>
 80007e4:	e00d      	b.n	8000802 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80007e6:	4b37      	ldr	r3, [pc, #220]	; (80008c4 <prvAddNewTaskToReadyList+0x110>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d109      	bne.n	8000802 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80007ee:	4b34      	ldr	r3, [pc, #208]	; (80008c0 <prvAddNewTaskToReadyList+0x10c>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d802      	bhi.n	8000802 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80007fc:	4a30      	ldr	r2, [pc, #192]	; (80008c0 <prvAddNewTaskToReadyList+0x10c>)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000802:	4b31      	ldr	r3, [pc, #196]	; (80008c8 <prvAddNewTaskToReadyList+0x114>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	3301      	adds	r3, #1
 8000808:	4a2f      	ldr	r2, [pc, #188]	; (80008c8 <prvAddNewTaskToReadyList+0x114>)
 800080a:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000810:	2201      	movs	r2, #1
 8000812:	409a      	lsls	r2, r3
 8000814:	4b2d      	ldr	r3, [pc, #180]	; (80008cc <prvAddNewTaskToReadyList+0x118>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4313      	orrs	r3, r2
 800081a:	4a2c      	ldr	r2, [pc, #176]	; (80008cc <prvAddNewTaskToReadyList+0x118>)
 800081c:	6013      	str	r3, [r2, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000822:	492b      	ldr	r1, [pc, #172]	; (80008d0 <prvAddNewTaskToReadyList+0x11c>)
 8000824:	4613      	mov	r3, r2
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	4413      	add	r3, r2
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	440b      	add	r3, r1
 800082e:	3304      	adds	r3, #4
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	68fa      	ldr	r2, [r7, #12]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	689a      	ldr	r2, [r3, #8]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	689b      	ldr	r3, [r3, #8]
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	3204      	adds	r2, #4
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	1d1a      	adds	r2, r3, #4
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000858:	4613      	mov	r3, r2
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	4413      	add	r3, r2
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	4a1b      	ldr	r2, [pc, #108]	; (80008d0 <prvAddNewTaskToReadyList+0x11c>)
 8000862:	441a      	add	r2, r3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	615a      	str	r2, [r3, #20]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800086c:	4918      	ldr	r1, [pc, #96]	; (80008d0 <prvAddNewTaskToReadyList+0x11c>)
 800086e:	4613      	mov	r3, r2
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	4413      	add	r3, r2
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	440b      	add	r3, r1
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	1c59      	adds	r1, r3, #1
 800087c:	4814      	ldr	r0, [pc, #80]	; (80008d0 <prvAddNewTaskToReadyList+0x11c>)
 800087e:	4613      	mov	r3, r2
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	4413      	add	r3, r2
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	4403      	add	r3, r0
 8000888:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800088a:	f000 ff25 	bl	80016d8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800088e:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <prvAddNewTaskToReadyList+0x110>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d00e      	beq.n	80008b4 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000896:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <prvAddNewTaskToReadyList+0x10c>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d207      	bcs.n	80008b4 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80008a4:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <prvAddNewTaskToReadyList+0x120>)
 80008a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	f3bf 8f4f 	dsb	sy
 80008b0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000140 	.word	0x20000140
 80008c0:	20000040 	.word	0x20000040
 80008c4:	2000014c 	.word	0x2000014c
 80008c8:	2000015c 	.word	0x2000015c
 80008cc:	20000148 	.word	0x20000148
 80008d0:	20000044 	.word	0x20000044
 80008d4:	e000ed04 	.word	0xe000ed04

080008d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d017      	beq.n	800091a <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80008ea:	4b13      	ldr	r3, [pc, #76]	; (8000938 <vTaskDelay+0x60>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d00a      	beq.n	8000908 <vTaskDelay+0x30>
        __asm volatile
 80008f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008f6:	f383 8811 	msr	BASEPRI, r3
 80008fa:	f3bf 8f6f 	isb	sy
 80008fe:	f3bf 8f4f 	dsb	sy
 8000902:	60bb      	str	r3, [r7, #8]
    }
 8000904:	bf00      	nop
 8000906:	e7fe      	b.n	8000906 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8000908:	f000 f866 	bl	80009d8 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800090c:	2100      	movs	r1, #0
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f000 fd02 	bl	8001318 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8000914:	f000 f86e 	bl	80009f4 <xTaskResumeAll>
 8000918:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d107      	bne.n	8000930 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <vTaskDelay+0x64>)
 8000922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	f3bf 8f4f 	dsb	sy
 800092c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000930:	bf00      	nop
 8000932:	3710      	adds	r7, #16
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000168 	.word	0x20000168
 800093c:	e000ed04 	.word	0xe000ed04

08000940 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8000946:	4b1d      	ldr	r3, [pc, #116]	; (80009bc <vTaskStartScheduler+0x7c>)
 8000948:	9301      	str	r3, [sp, #4]
 800094a:	2300      	movs	r3, #0
 800094c:	9300      	str	r3, [sp, #0]
 800094e:	2300      	movs	r3, #0
 8000950:	2280      	movs	r2, #128	; 0x80
 8000952:	491b      	ldr	r1, [pc, #108]	; (80009c0 <vTaskStartScheduler+0x80>)
 8000954:	481b      	ldr	r0, [pc, #108]	; (80009c4 <vTaskStartScheduler+0x84>)
 8000956:	f7ff fe61 	bl	800061c <xTaskCreate>
 800095a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	2b01      	cmp	r3, #1
 8000960:	d116      	bne.n	8000990 <vTaskStartScheduler+0x50>
        __asm volatile
 8000962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000966:	f383 8811 	msr	BASEPRI, r3
 800096a:	f3bf 8f6f 	isb	sy
 800096e:	f3bf 8f4f 	dsb	sy
 8000972:	60bb      	str	r3, [r7, #8]
    }
 8000974:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8000976:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <vTaskStartScheduler+0x88>)
 8000978:	f04f 32ff 	mov.w	r2, #4294967295
 800097c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800097e:	4b13      	ldr	r3, [pc, #76]	; (80009cc <vTaskStartScheduler+0x8c>)
 8000980:	2201      	movs	r2, #1
 8000982:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <vTaskStartScheduler+0x90>)
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800098a:	f000 fdd3 	bl	8001534 <xPortStartScheduler>
 800098e:	e00e      	b.n	80009ae <vTaskStartScheduler+0x6e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000996:	d10a      	bne.n	80009ae <vTaskStartScheduler+0x6e>
        __asm volatile
 8000998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800099c:	f383 8811 	msr	BASEPRI, r3
 80009a0:	f3bf 8f6f 	isb	sy
 80009a4:	f3bf 8f4f 	dsb	sy
 80009a8:	607b      	str	r3, [r7, #4]
    }
 80009aa:	bf00      	nop
 80009ac:	e7fe      	b.n	80009ac <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80009ae:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <vTaskStartScheduler+0x94>)
 80009b0:	681b      	ldr	r3, [r3, #0]
}
 80009b2:	bf00      	nop
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000164 	.word	0x20000164
 80009c0:	0800a7bc 	.word	0x0800a7bc
 80009c4:	08000ef1 	.word	0x08000ef1
 80009c8:	20000160 	.word	0x20000160
 80009cc:	2000014c 	.word	0x2000014c
 80009d0:	20000144 	.word	0x20000144
 80009d4:	20000000 	.word	0x20000000

080009d8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80009dc:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <vTaskSuspendAll+0x18>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	3301      	adds	r3, #1
 80009e2:	4a03      	ldr	r2, [pc, #12]	; (80009f0 <vTaskSuspendAll+0x18>)
 80009e4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80009e6:	bf00      	nop
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	20000168 	.word	0x20000168

080009f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b088      	sub	sp, #32
 80009f8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8000a02:	4b71      	ldr	r3, [pc, #452]	; (8000bc8 <xTaskResumeAll+0x1d4>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d10a      	bne.n	8000a20 <xTaskResumeAll+0x2c>
        __asm volatile
 8000a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a0e:	f383 8811 	msr	BASEPRI, r3
 8000a12:	f3bf 8f6f 	isb	sy
 8000a16:	f3bf 8f4f 	dsb	sy
 8000a1a:	607b      	str	r3, [r7, #4]
    }
 8000a1c:	bf00      	nop
 8000a1e:	e7fe      	b.n	8000a1e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000a20:	f000 fe2a 	bl	8001678 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000a24:	4b68      	ldr	r3, [pc, #416]	; (8000bc8 <xTaskResumeAll+0x1d4>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	4a67      	ldr	r2, [pc, #412]	; (8000bc8 <xTaskResumeAll+0x1d4>)
 8000a2c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000a2e:	4b66      	ldr	r3, [pc, #408]	; (8000bc8 <xTaskResumeAll+0x1d4>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	f040 80c0 	bne.w	8000bb8 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000a38:	4b64      	ldr	r3, [pc, #400]	; (8000bcc <xTaskResumeAll+0x1d8>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	f000 80bb 	beq.w	8000bb8 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000a42:	e08a      	b.n	8000b5a <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000a44:	4b62      	ldr	r3, [pc, #392]	; (8000bd0 <xTaskResumeAll+0x1dc>)
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	68db      	ldr	r3, [r3, #12]
 8000a4a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000a4c:	69fb      	ldr	r3, [r7, #28]
 8000a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	69db      	ldr	r3, [r3, #28]
 8000a56:	69fa      	ldr	r2, [r7, #28]
 8000a58:	6a12      	ldr	r2, [r2, #32]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	69fb      	ldr	r3, [r7, #28]
 8000a5e:	6a1b      	ldr	r3, [r3, #32]
 8000a60:	69fa      	ldr	r2, [r7, #28]
 8000a62:	69d2      	ldr	r2, [r2, #28]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	693b      	ldr	r3, [r7, #16]
 8000a68:	685a      	ldr	r2, [r3, #4]
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	3318      	adds	r3, #24
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d103      	bne.n	8000a7a <xTaskResumeAll+0x86>
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	6a1a      	ldr	r2, [r3, #32]
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	629a      	str	r2, [r3, #40]	; 0x28
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	1e5a      	subs	r2, r3, #1
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	695b      	ldr	r3, [r3, #20]
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	69fa      	ldr	r2, [r7, #28]
 8000a96:	68d2      	ldr	r2, [r2, #12]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	68db      	ldr	r3, [r3, #12]
 8000a9e:	69fa      	ldr	r2, [r7, #28]
 8000aa0:	6892      	ldr	r2, [r2, #8]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	685a      	ldr	r2, [r3, #4]
 8000aa8:	69fb      	ldr	r3, [r7, #28]
 8000aaa:	3304      	adds	r3, #4
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d103      	bne.n	8000ab8 <xTaskResumeAll+0xc4>
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	68da      	ldr	r2, [r3, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	69fb      	ldr	r3, [r7, #28]
 8000aba:	2200      	movs	r2, #0
 8000abc:	615a      	str	r2, [r3, #20]
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	1e5a      	subs	r2, r3, #1
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8000ac8:	69fb      	ldr	r3, [r7, #28]
 8000aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000acc:	2201      	movs	r2, #1
 8000ace:	409a      	lsls	r2, r3
 8000ad0:	4b40      	ldr	r3, [pc, #256]	; (8000bd4 <xTaskResumeAll+0x1e0>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	4a3f      	ldr	r2, [pc, #252]	; (8000bd4 <xTaskResumeAll+0x1e0>)
 8000ad8:	6013      	str	r3, [r2, #0]
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ade:	493e      	ldr	r1, [pc, #248]	; (8000bd8 <xTaskResumeAll+0x1e4>)
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	4413      	add	r3, r2
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	440b      	add	r3, r1
 8000aea:	3304      	adds	r3, #4
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	69fb      	ldr	r3, [r7, #28]
 8000af2:	68ba      	ldr	r2, [r7, #8]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	689a      	ldr	r2, [r3, #8]
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	689b      	ldr	r3, [r3, #8]
 8000b02:	69fa      	ldr	r2, [r7, #28]
 8000b04:	3204      	adds	r2, #4
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	1d1a      	adds	r2, r3, #4
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b14:	4613      	mov	r3, r2
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	4413      	add	r3, r2
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	4a2e      	ldr	r2, [pc, #184]	; (8000bd8 <xTaskResumeAll+0x1e4>)
 8000b1e:	441a      	add	r2, r3
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	615a      	str	r2, [r3, #20]
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b28:	492b      	ldr	r1, [pc, #172]	; (8000bd8 <xTaskResumeAll+0x1e4>)
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	4413      	add	r3, r2
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	440b      	add	r3, r1
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	1c59      	adds	r1, r3, #1
 8000b38:	4827      	ldr	r0, [pc, #156]	; (8000bd8 <xTaskResumeAll+0x1e4>)
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	4413      	add	r3, r2
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	4403      	add	r3, r0
 8000b44:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b4a:	4b24      	ldr	r3, [pc, #144]	; (8000bdc <xTaskResumeAll+0x1e8>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d302      	bcc.n	8000b5a <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8000b54:	4b22      	ldr	r3, [pc, #136]	; (8000be0 <xTaskResumeAll+0x1ec>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000b5a:	4b1d      	ldr	r3, [pc, #116]	; (8000bd0 <xTaskResumeAll+0x1dc>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	f47f af70 	bne.w	8000a44 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000b6a:	f000 fa57 	bl	800101c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000b6e:	4b1d      	ldr	r3, [pc, #116]	; (8000be4 <xTaskResumeAll+0x1f0>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d010      	beq.n	8000b9c <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000b7a:	f000 f847 	bl	8000c0c <xTaskIncrementTick>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d002      	beq.n	8000b8a <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8000b84:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <xTaskResumeAll+0x1ec>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	3b01      	subs	r3, #1
 8000b8e:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d1f1      	bne.n	8000b7a <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8000b96:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <xTaskResumeAll+0x1f0>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000b9c:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <xTaskResumeAll+0x1ec>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d009      	beq.n	8000bb8 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <xTaskResumeAll+0x1f4>)
 8000baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	f3bf 8f4f 	dsb	sy
 8000bb4:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000bb8:	f000 fd8e 	bl	80016d8 <vPortExitCritical>

    return xAlreadyYielded;
 8000bbc:	69bb      	ldr	r3, [r7, #24]
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3720      	adds	r7, #32
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000168 	.word	0x20000168
 8000bcc:	20000140 	.word	0x20000140
 8000bd0:	20000100 	.word	0x20000100
 8000bd4:	20000148 	.word	0x20000148
 8000bd8:	20000044 	.word	0x20000044
 8000bdc:	20000040 	.word	0x20000040
 8000be0:	20000154 	.word	0x20000154
 8000be4:	20000150 	.word	0x20000150
 8000be8:	e000ed04 	.word	0xe000ed04

08000bec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8000bf2:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <xTaskGetTickCount+0x1c>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8000bf8:	687b      	ldr	r3, [r7, #4]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	20000144 	.word	0x20000144

08000c0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08a      	sub	sp, #40	; 0x28
 8000c10:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000c12:	2300      	movs	r3, #0
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000c16:	4b7d      	ldr	r3, [pc, #500]	; (8000e0c <xTaskIncrementTick+0x200>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	f040 80ec 	bne.w	8000df8 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000c20:	4b7b      	ldr	r3, [pc, #492]	; (8000e10 <xTaskIncrementTick+0x204>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	3301      	adds	r3, #1
 8000c26:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000c28:	4a79      	ldr	r2, [pc, #484]	; (8000e10 <xTaskIncrementTick+0x204>)
 8000c2a:	6a3b      	ldr	r3, [r7, #32]
 8000c2c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000c2e:	6a3b      	ldr	r3, [r7, #32]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d120      	bne.n	8000c76 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8000c34:	4b77      	ldr	r3, [pc, #476]	; (8000e14 <xTaskIncrementTick+0x208>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d00a      	beq.n	8000c54 <xTaskIncrementTick+0x48>
        __asm volatile
 8000c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c42:	f383 8811 	msr	BASEPRI, r3
 8000c46:	f3bf 8f6f 	isb	sy
 8000c4a:	f3bf 8f4f 	dsb	sy
 8000c4e:	607b      	str	r3, [r7, #4]
    }
 8000c50:	bf00      	nop
 8000c52:	e7fe      	b.n	8000c52 <xTaskIncrementTick+0x46>
 8000c54:	4b6f      	ldr	r3, [pc, #444]	; (8000e14 <xTaskIncrementTick+0x208>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	61fb      	str	r3, [r7, #28]
 8000c5a:	4b6f      	ldr	r3, [pc, #444]	; (8000e18 <xTaskIncrementTick+0x20c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a6d      	ldr	r2, [pc, #436]	; (8000e14 <xTaskIncrementTick+0x208>)
 8000c60:	6013      	str	r3, [r2, #0]
 8000c62:	4a6d      	ldr	r2, [pc, #436]	; (8000e18 <xTaskIncrementTick+0x20c>)
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	6013      	str	r3, [r2, #0]
 8000c68:	4b6c      	ldr	r3, [pc, #432]	; (8000e1c <xTaskIncrementTick+0x210>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	4a6b      	ldr	r2, [pc, #428]	; (8000e1c <xTaskIncrementTick+0x210>)
 8000c70:	6013      	str	r3, [r2, #0]
 8000c72:	f000 f9d3 	bl	800101c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000c76:	4b6a      	ldr	r3, [pc, #424]	; (8000e20 <xTaskIncrementTick+0x214>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	6a3a      	ldr	r2, [r7, #32]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	f0c0 80a6 	bcc.w	8000dce <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000c82:	4b64      	ldr	r3, [pc, #400]	; (8000e14 <xTaskIncrementTick+0x208>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d104      	bne.n	8000c96 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000c8c:	4b64      	ldr	r3, [pc, #400]	; (8000e20 <xTaskIncrementTick+0x214>)
 8000c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8000c92:	601a      	str	r2, [r3, #0]
                    break;
 8000c94:	e09b      	b.n	8000dce <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000c96:	4b5f      	ldr	r3, [pc, #380]	; (8000e14 <xTaskIncrementTick+0x208>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8000ca6:	6a3a      	ldr	r2, [r7, #32]
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d203      	bcs.n	8000cb6 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000cae:	4a5c      	ldr	r2, [pc, #368]	; (8000e20 <xTaskIncrementTick+0x214>)
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8000cb4:	e08b      	b.n	8000dce <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000cb6:	69bb      	ldr	r3, [r7, #24]
 8000cb8:	695b      	ldr	r3, [r3, #20]
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	68d2      	ldr	r2, [r2, #12]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	68db      	ldr	r3, [r3, #12]
 8000cca:	69ba      	ldr	r2, [r7, #24]
 8000ccc:	6892      	ldr	r2, [r2, #8]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	685a      	ldr	r2, [r3, #4]
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	3304      	adds	r3, #4
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d103      	bne.n	8000ce4 <xTaskIncrementTick+0xd8>
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	68da      	ldr	r2, [r3, #12]
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	615a      	str	r2, [r3, #20]
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	1e5a      	subs	r2, r3, #1
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d01e      	beq.n	8000d3a <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	69db      	ldr	r3, [r3, #28]
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	6a12      	ldr	r2, [r2, #32]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	6a1b      	ldr	r3, [r3, #32]
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	69d2      	ldr	r2, [r2, #28]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	685a      	ldr	r2, [r3, #4]
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	3318      	adds	r3, #24
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d103      	bne.n	8000d2a <xTaskIncrementTick+0x11e>
 8000d22:	69bb      	ldr	r3, [r7, #24]
 8000d24:	6a1a      	ldr	r2, [r3, #32]
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	629a      	str	r2, [r3, #40]	; 0x28
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	1e5a      	subs	r2, r3, #1
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d3e:	2201      	movs	r2, #1
 8000d40:	409a      	lsls	r2, r3
 8000d42:	4b38      	ldr	r3, [pc, #224]	; (8000e24 <xTaskIncrementTick+0x218>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	4a36      	ldr	r2, [pc, #216]	; (8000e24 <xTaskIncrementTick+0x218>)
 8000d4a:	6013      	str	r3, [r2, #0]
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d50:	4935      	ldr	r1, [pc, #212]	; (8000e28 <xTaskIncrementTick+0x21c>)
 8000d52:	4613      	mov	r3, r2
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	4413      	add	r3, r2
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	440b      	add	r3, r1
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	68ba      	ldr	r2, [r7, #8]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	689a      	ldr	r2, [r3, #8]
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	60da      	str	r2, [r3, #12]
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	3204      	adds	r2, #4
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	1d1a      	adds	r2, r3, #4
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d86:	4613      	mov	r3, r2
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	4413      	add	r3, r2
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	4a26      	ldr	r2, [pc, #152]	; (8000e28 <xTaskIncrementTick+0x21c>)
 8000d90:	441a      	add	r2, r3
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	615a      	str	r2, [r3, #20]
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d9a:	4923      	ldr	r1, [pc, #140]	; (8000e28 <xTaskIncrementTick+0x21c>)
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	4413      	add	r3, r2
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	440b      	add	r3, r1
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	1c59      	adds	r1, r3, #1
 8000daa:	481f      	ldr	r0, [pc, #124]	; (8000e28 <xTaskIncrementTick+0x21c>)
 8000dac:	4613      	mov	r3, r2
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	4413      	add	r3, r2
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	4403      	add	r3, r0
 8000db6:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dbc:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <xTaskIncrementTick+0x220>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	f67f af5d 	bls.w	8000c82 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000dcc:	e759      	b.n	8000c82 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000dce:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <xTaskIncrementTick+0x220>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dd4:	4914      	ldr	r1, [pc, #80]	; (8000e28 <xTaskIncrementTick+0x21c>)
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	4413      	add	r3, r2
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	440b      	add	r3, r1
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d901      	bls.n	8000dea <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8000de6:	2301      	movs	r3, #1
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8000dea:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <xTaskIncrementTick+0x224>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d007      	beq.n	8000e02 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8000df2:	2301      	movs	r3, #1
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
 8000df6:	e004      	b.n	8000e02 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000df8:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <xTaskIncrementTick+0x228>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	4a0d      	ldr	r2, [pc, #52]	; (8000e34 <xTaskIncrementTick+0x228>)
 8000e00:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8000e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3728      	adds	r7, #40	; 0x28
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000168 	.word	0x20000168
 8000e10:	20000144 	.word	0x20000144
 8000e14:	200000f8 	.word	0x200000f8
 8000e18:	200000fc 	.word	0x200000fc
 8000e1c:	20000158 	.word	0x20000158
 8000e20:	20000160 	.word	0x20000160
 8000e24:	20000148 	.word	0x20000148
 8000e28:	20000044 	.word	0x20000044
 8000e2c:	20000040 	.word	0x20000040
 8000e30:	20000154 	.word	0x20000154
 8000e34:	20000150 	.word	0x20000150

08000e38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b087      	sub	sp, #28
 8000e3c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000e3e:	4b27      	ldr	r3, [pc, #156]	; (8000edc <vTaskSwitchContext+0xa4>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d003      	beq.n	8000e4e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8000e46:	4b26      	ldr	r3, [pc, #152]	; (8000ee0 <vTaskSwitchContext+0xa8>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8000e4c:	e03f      	b.n	8000ece <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8000e4e:	4b24      	ldr	r3, [pc, #144]	; (8000ee0 <vTaskSwitchContext+0xa8>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000e54:	4b23      	ldr	r3, [pc, #140]	; (8000ee4 <vTaskSwitchContext+0xac>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	fab3 f383 	clz	r3, r3
 8000e60:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8000e62:	7afb      	ldrb	r3, [r7, #11]
 8000e64:	f1c3 031f 	rsb	r3, r3, #31
 8000e68:	617b      	str	r3, [r7, #20]
 8000e6a:	491f      	ldr	r1, [pc, #124]	; (8000ee8 <vTaskSwitchContext+0xb0>)
 8000e6c:	697a      	ldr	r2, [r7, #20]
 8000e6e:	4613      	mov	r3, r2
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	4413      	add	r3, r2
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	440b      	add	r3, r1
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d10a      	bne.n	8000e94 <vTaskSwitchContext+0x5c>
        __asm volatile
 8000e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e82:	f383 8811 	msr	BASEPRI, r3
 8000e86:	f3bf 8f6f 	isb	sy
 8000e8a:	f3bf 8f4f 	dsb	sy
 8000e8e:	607b      	str	r3, [r7, #4]
    }
 8000e90:	bf00      	nop
 8000e92:	e7fe      	b.n	8000e92 <vTaskSwitchContext+0x5a>
 8000e94:	697a      	ldr	r2, [r7, #20]
 8000e96:	4613      	mov	r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	4413      	add	r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	4a12      	ldr	r2, [pc, #72]	; (8000ee8 <vTaskSwitchContext+0xb0>)
 8000ea0:	4413      	add	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	685a      	ldr	r2, [r3, #4]
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	685a      	ldr	r2, [r3, #4]
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	3308      	adds	r3, #8
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d104      	bne.n	8000ec4 <vTaskSwitchContext+0x8c>
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	685a      	ldr	r2, [r3, #4]
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	68db      	ldr	r3, [r3, #12]
 8000eca:	4a08      	ldr	r2, [pc, #32]	; (8000eec <vTaskSwitchContext+0xb4>)
 8000ecc:	6013      	str	r3, [r2, #0]
}
 8000ece:	bf00      	nop
 8000ed0:	371c      	adds	r7, #28
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	20000168 	.word	0x20000168
 8000ee0:	20000154 	.word	0x20000154
 8000ee4:	20000148 	.word	0x20000148
 8000ee8:	20000044 	.word	0x20000044
 8000eec:	20000040 	.word	0x20000040

08000ef0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8000ef8:	f000 f852 	bl	8000fa0 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <prvIdleTask+0x28>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d9f9      	bls.n	8000ef8 <prvIdleTask+0x8>
            {
                taskYIELD();
 8000f04:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <prvIdleTask+0x2c>)
 8000f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	f3bf 8f4f 	dsb	sy
 8000f10:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8000f14:	e7f0      	b.n	8000ef8 <prvIdleTask+0x8>
 8000f16:	bf00      	nop
 8000f18:	20000044 	.word	0x20000044
 8000f1c:	e000ed04 	.word	0xe000ed04

08000f20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000f26:	2300      	movs	r3, #0
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	e00c      	b.n	8000f46 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4413      	add	r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	4a12      	ldr	r2, [pc, #72]	; (8000f80 <prvInitialiseTaskLists+0x60>)
 8000f38:	4413      	add	r3, r2
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fade 	bl	80004fc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3301      	adds	r3, #1
 8000f44:	607b      	str	r3, [r7, #4]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b06      	cmp	r3, #6
 8000f4a:	d9ef      	bls.n	8000f2c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8000f4c:	480d      	ldr	r0, [pc, #52]	; (8000f84 <prvInitialiseTaskLists+0x64>)
 8000f4e:	f7ff fad5 	bl	80004fc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8000f52:	480d      	ldr	r0, [pc, #52]	; (8000f88 <prvInitialiseTaskLists+0x68>)
 8000f54:	f7ff fad2 	bl	80004fc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8000f58:	480c      	ldr	r0, [pc, #48]	; (8000f8c <prvInitialiseTaskLists+0x6c>)
 8000f5a:	f7ff facf 	bl	80004fc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8000f5e:	480c      	ldr	r0, [pc, #48]	; (8000f90 <prvInitialiseTaskLists+0x70>)
 8000f60:	f7ff facc 	bl	80004fc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8000f64:	480b      	ldr	r0, [pc, #44]	; (8000f94 <prvInitialiseTaskLists+0x74>)
 8000f66:	f7ff fac9 	bl	80004fc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <prvInitialiseTaskLists+0x78>)
 8000f6c:	4a05      	ldr	r2, [pc, #20]	; (8000f84 <prvInitialiseTaskLists+0x64>)
 8000f6e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000f70:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <prvInitialiseTaskLists+0x7c>)
 8000f72:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <prvInitialiseTaskLists+0x68>)
 8000f74:	601a      	str	r2, [r3, #0]
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000044 	.word	0x20000044
 8000f84:	200000d0 	.word	0x200000d0
 8000f88:	200000e4 	.word	0x200000e4
 8000f8c:	20000100 	.word	0x20000100
 8000f90:	20000114 	.word	0x20000114
 8000f94:	2000012c 	.word	0x2000012c
 8000f98:	200000f8 	.word	0x200000f8
 8000f9c:	200000fc 	.word	0x200000fc

08000fa0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000fa6:	e019      	b.n	8000fdc <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8000fa8:	f000 fb66 	bl	8001678 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000fac:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <prvCheckTasksWaitingTermination+0x50>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	68db      	ldr	r3, [r3, #12]
 8000fb2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3304      	adds	r3, #4
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff fb05 	bl	80005c8 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8000fbe:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <prvCheckTasksWaitingTermination+0x54>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <prvCheckTasksWaitingTermination+0x54>)
 8000fc6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8000fc8:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <prvCheckTasksWaitingTermination+0x58>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <prvCheckTasksWaitingTermination+0x58>)
 8000fd0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8000fd2:	f000 fb81 	bl	80016d8 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f000 f810 	bl	8000ffc <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <prvCheckTasksWaitingTermination+0x58>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d1e1      	bne.n	8000fa8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8000fe4:	bf00      	nop
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000114 	.word	0x20000114
 8000ff4:	20000140 	.word	0x20000140
 8000ff8:	20000128 	.word	0x20000128

08000ffc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001008:	4618      	mov	r0, r3
 800100a:	f000 fd11 	bl	8001a30 <vPortFree>
            vPortFree( pxTCB );
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 fd0e 	bl	8001a30 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001020:	4b0a      	ldr	r3, [pc, #40]	; (800104c <prvResetNextTaskUnblockTime+0x30>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d104      	bne.n	8001034 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <prvResetNextTaskUnblockTime+0x34>)
 800102c:	f04f 32ff 	mov.w	r2, #4294967295
 8001030:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001032:	e005      	b.n	8001040 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001034:	4b05      	ldr	r3, [pc, #20]	; (800104c <prvResetNextTaskUnblockTime+0x30>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <prvResetNextTaskUnblockTime+0x34>)
 800103e:	6013      	str	r3, [r2, #0]
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	200000f8 	.word	0x200000f8
 8001050:	20000160 	.word	0x20000160

08001054 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8001054:	b580      	push	{r7, lr}
 8001056:	b092      	sub	sp, #72	; 0x48
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
 8001060:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8001062:	2301      	movs	r3, #1
 8001064:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d10a      	bne.n	8001082 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 800106c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001070:	f383 8811 	msr	BASEPRI, r3
 8001074:	f3bf 8f6f 	isb	sy
 8001078:	f3bf 8f4f 	dsb	sy
 800107c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800107e:	bf00      	nop
 8001080:	e7fe      	b.n	8001080 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d00a      	beq.n	800109e <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8001088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800108c:	f383 8811 	msr	BASEPRI, r3
 8001090:	f3bf 8f6f 	isb	sy
 8001094:	f3bf 8f4f 	dsb	sy
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800109a:	bf00      	nop
 800109c:	e7fe      	b.n	800109c <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800109e:	f000 fbcd 	bl	800183c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	643b      	str	r3, [r7, #64]	; 0x40

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80010a6:	f3ef 8211 	mrs	r2, BASEPRI
 80010aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010ae:	f383 8811 	msr	BASEPRI, r3
 80010b2:	f3bf 8f6f 	isb	sy
 80010b6:	f3bf 8f4f 	dsb	sy
 80010ba:	623a      	str	r2, [r7, #32]
 80010bc:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80010be:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80010c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 80010c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d007      	beq.n	80010d8 <xTaskGenericNotifyFromISR+0x84>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80010c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	3312      	adds	r3, #18
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	685a      	ldr	r2, [r3, #4]
 80010d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010d6:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80010d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	4413      	add	r3, r2
 80010de:	3350      	adds	r3, #80	; 0x50
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80010e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	4413      	add	r3, r2
 80010ec:	3350      	adds	r3, #80	; 0x50
 80010ee:	2202      	movs	r2, #2
 80010f0:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80010f2:	78fb      	ldrb	r3, [r7, #3]
 80010f4:	2b04      	cmp	r3, #4
 80010f6:	d841      	bhi.n	800117c <xTaskGenericNotifyFromISR+0x128>
 80010f8:	a201      	add	r2, pc, #4	; (adr r2, 8001100 <xTaskGenericNotifyFromISR+0xac>)
 80010fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010fe:	bf00      	nop
 8001100:	0800119b 	.word	0x0800119b
 8001104:	08001115 	.word	0x08001115
 8001108:	08001133 	.word	0x08001133
 800110c:	0800114f 	.word	0x0800114f
 8001110:	0800115f 	.word	0x0800115f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8001114:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	3312      	adds	r3, #18
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	4413      	add	r3, r2
 800111e:	685a      	ldr	r2, [r3, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	431a      	orrs	r2, r3
 8001124:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	3312      	adds	r3, #18
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	440b      	add	r3, r1
 800112e:	605a      	str	r2, [r3, #4]
                    break;
 8001130:	e036      	b.n	80011a0 <xTaskGenericNotifyFromISR+0x14c>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8001132:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	3312      	adds	r3, #18
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	4413      	add	r3, r2
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	1c5a      	adds	r2, r3, #1
 8001140:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	3312      	adds	r3, #18
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	440b      	add	r3, r1
 800114a:	605a      	str	r2, [r3, #4]
                    break;
 800114c:	e028      	b.n	80011a0 <xTaskGenericNotifyFromISR+0x14c>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800114e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	3312      	adds	r3, #18
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	4413      	add	r3, r2
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	605a      	str	r2, [r3, #4]
                    break;
 800115c:	e020      	b.n	80011a0 <xTaskGenericNotifyFromISR+0x14c>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800115e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001162:	2b02      	cmp	r3, #2
 8001164:	d007      	beq.n	8001176 <xTaskGenericNotifyFromISR+0x122>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001166:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	3312      	adds	r3, #18
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	4413      	add	r3, r2
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8001174:	e014      	b.n	80011a0 <xTaskGenericNotifyFromISR+0x14c>
                        xReturn = pdFAIL;
 8001176:	2300      	movs	r3, #0
 8001178:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 800117a:	e011      	b.n	80011a0 <xTaskGenericNotifyFromISR+0x14c>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800117c:	4b5f      	ldr	r3, [pc, #380]	; (80012fc <xTaskGenericNotifyFromISR+0x2a8>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d00c      	beq.n	800119e <xTaskGenericNotifyFromISR+0x14a>
        __asm volatile
 8001184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001188:	f383 8811 	msr	BASEPRI, r3
 800118c:	f3bf 8f6f 	isb	sy
 8001190:	f3bf 8f4f 	dsb	sy
 8001194:	61bb      	str	r3, [r7, #24]
    }
 8001196:	bf00      	nop
 8001198:	e7fe      	b.n	8001198 <xTaskGenericNotifyFromISR+0x144>
                    break;
 800119a:	bf00      	nop
 800119c:	e000      	b.n	80011a0 <xTaskGenericNotifyFromISR+0x14c>
                    break;
 800119e:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80011a0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	f040 809e 	bne.w	80012e6 <xTaskGenericNotifyFromISR+0x292>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80011aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d00a      	beq.n	80011c8 <xTaskGenericNotifyFromISR+0x174>
        __asm volatile
 80011b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011b6:	f383 8811 	msr	BASEPRI, r3
 80011ba:	f3bf 8f6f 	isb	sy
 80011be:	f3bf 8f4f 	dsb	sy
 80011c2:	617b      	str	r3, [r7, #20]
    }
 80011c4:	bf00      	nop
 80011c6:	e7fe      	b.n	80011c6 <xTaskGenericNotifyFromISR+0x172>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80011c8:	4b4d      	ldr	r3, [pc, #308]	; (8001300 <xTaskGenericNotifyFromISR+0x2ac>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d15e      	bne.n	800128e <xTaskGenericNotifyFromISR+0x23a>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80011d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011d2:	695b      	ldr	r3, [r3, #20]
 80011d4:	633b      	str	r3, [r7, #48]	; 0x30
 80011d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80011dc:	68d2      	ldr	r2, [r2, #12]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80011e6:	6892      	ldr	r2, [r2, #8]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011ec:	685a      	ldr	r2, [r3, #4]
 80011ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011f0:	3304      	adds	r3, #4
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d103      	bne.n	80011fe <xTaskGenericNotifyFromISR+0x1aa>
 80011f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011f8:	68da      	ldr	r2, [r3, #12]
 80011fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001200:	2200      	movs	r2, #0
 8001202:	615a      	str	r2, [r3, #20]
 8001204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	1e5a      	subs	r2, r3, #1
 800120a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800120c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800120e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001212:	2201      	movs	r2, #1
 8001214:	409a      	lsls	r2, r3
 8001216:	4b3b      	ldr	r3, [pc, #236]	; (8001304 <xTaskGenericNotifyFromISR+0x2b0>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4313      	orrs	r3, r2
 800121c:	4a39      	ldr	r2, [pc, #228]	; (8001304 <xTaskGenericNotifyFromISR+0x2b0>)
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001224:	4938      	ldr	r1, [pc, #224]	; (8001308 <xTaskGenericNotifyFromISR+0x2b4>)
 8001226:	4613      	mov	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4413      	add	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	440b      	add	r3, r1
 8001230:	3304      	adds	r3, #4
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001238:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001242:	60da      	str	r2, [r3, #12]
 8001244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800124a:	3204      	adds	r2, #4
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001250:	1d1a      	adds	r2, r3, #4
 8001252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800125a:	4613      	mov	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4413      	add	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	4a29      	ldr	r2, [pc, #164]	; (8001308 <xTaskGenericNotifyFromISR+0x2b4>)
 8001264:	441a      	add	r2, r3
 8001266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001268:	615a      	str	r2, [r3, #20]
 800126a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800126c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800126e:	4926      	ldr	r1, [pc, #152]	; (8001308 <xTaskGenericNotifyFromISR+0x2b4>)
 8001270:	4613      	mov	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	4413      	add	r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	440b      	add	r3, r1
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	1c59      	adds	r1, r3, #1
 800127e:	4822      	ldr	r0, [pc, #136]	; (8001308 <xTaskGenericNotifyFromISR+0x2b4>)
 8001280:	4613      	mov	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4413      	add	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	4403      	add	r3, r0
 800128a:	6019      	str	r1, [r3, #0]
 800128c:	e01b      	b.n	80012c6 <xTaskGenericNotifyFromISR+0x272>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800128e:	4b1f      	ldr	r3, [pc, #124]	; (800130c <xTaskGenericNotifyFromISR+0x2b8>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	637b      	str	r3, [r7, #52]	; 0x34
 8001294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001296:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001298:	61da      	str	r2, [r3, #28]
 800129a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800129c:	689a      	ldr	r2, [r3, #8]
 800129e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012a0:	621a      	str	r2, [r3, #32]
 80012a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80012a8:	3218      	adds	r2, #24
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012ae:	f103 0218 	add.w	r2, r3, #24
 80012b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012b8:	4a14      	ldr	r2, [pc, #80]	; (800130c <xTaskGenericNotifyFromISR+0x2b8>)
 80012ba:	629a      	str	r2, [r3, #40]	; 0x28
 80012bc:	4b13      	ldr	r3, [pc, #76]	; (800130c <xTaskGenericNotifyFromISR+0x2b8>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	3301      	adds	r3, #1
 80012c2:	4a12      	ldr	r2, [pc, #72]	; (800130c <xTaskGenericNotifyFromISR+0x2b8>)
 80012c4:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80012c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012ca:	4b11      	ldr	r3, [pc, #68]	; (8001310 <xTaskGenericNotifyFromISR+0x2bc>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d908      	bls.n	80012e6 <xTaskGenericNotifyFromISR+0x292>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 80012d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d002      	beq.n	80012e0 <xTaskGenericNotifyFromISR+0x28c>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 80012da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012dc:	2201      	movs	r2, #1
 80012de:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <xTaskGenericNotifyFromISR+0x2c0>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012e8:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80012f0:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 80012f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 80012f4:	4618      	mov	r0, r3
 80012f6:	3748      	adds	r7, #72	; 0x48
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000144 	.word	0x20000144
 8001300:	20000168 	.word	0x20000168
 8001304:	20000148 	.word	0x20000148
 8001308:	20000044 	.word	0x20000044
 800130c:	20000100 	.word	0x20000100
 8001310:	20000040 	.word	0x20000040
 8001314:	20000154 	.word	0x20000154

08001318 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001322:	4b36      	ldr	r3, [pc, #216]	; (80013fc <prvAddCurrentTaskToDelayedList+0xe4>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001328:	4b35      	ldr	r3, [pc, #212]	; (8001400 <prvAddCurrentTaskToDelayedList+0xe8>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	3304      	adds	r3, #4
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f94a 	bl	80005c8 <uxListRemove>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d10b      	bne.n	8001352 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800133a:	4b31      	ldr	r3, [pc, #196]	; (8001400 <prvAddCurrentTaskToDelayedList+0xe8>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001340:	2201      	movs	r2, #1
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43da      	mvns	r2, r3
 8001348:	4b2e      	ldr	r3, [pc, #184]	; (8001404 <prvAddCurrentTaskToDelayedList+0xec>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4013      	ands	r3, r2
 800134e:	4a2d      	ldr	r2, [pc, #180]	; (8001404 <prvAddCurrentTaskToDelayedList+0xec>)
 8001350:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001358:	d124      	bne.n	80013a4 <prvAddCurrentTaskToDelayedList+0x8c>
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d021      	beq.n	80013a4 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001360:	4b29      	ldr	r3, [pc, #164]	; (8001408 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	4b26      	ldr	r3, [pc, #152]	; (8001400 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	4b24      	ldr	r3, [pc, #144]	; (8001400 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	6892      	ldr	r2, [r2, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	4b21      	ldr	r3, [pc, #132]	; (8001400 <prvAddCurrentTaskToDelayedList+0xe8>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	3204      	adds	r2, #4
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	4b1e      	ldr	r3, [pc, #120]	; (8001400 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	1d1a      	adds	r2, r3, #4
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a1d      	ldr	r2, [pc, #116]	; (8001408 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001394:	615a      	str	r2, [r3, #20]
 8001396:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	3301      	adds	r3, #1
 800139c:	4a1a      	ldr	r2, [pc, #104]	; (8001408 <prvAddCurrentTaskToDelayedList+0xf0>)
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80013a2:	e026      	b.n	80013f2 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80013a4:	697a      	ldr	r2, [r7, #20]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80013ac:	4b14      	ldr	r3, [pc, #80]	; (8001400 <prvAddCurrentTaskToDelayedList+0xe8>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	68fa      	ldr	r2, [r7, #12]
 80013b2:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80013b4:	68fa      	ldr	r2, [r7, #12]
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d209      	bcs.n	80013d0 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80013bc:	4b13      	ldr	r3, [pc, #76]	; (800140c <prvAddCurrentTaskToDelayedList+0xf4>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <prvAddCurrentTaskToDelayedList+0xe8>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	3304      	adds	r3, #4
 80013c6:	4619      	mov	r1, r3
 80013c8:	4610      	mov	r0, r2
 80013ca:	f7ff f8c4 	bl	8000556 <vListInsert>
}
 80013ce:	e010      	b.n	80013f2 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <prvAddCurrentTaskToDelayedList+0xf8>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <prvAddCurrentTaskToDelayedList+0xe8>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	3304      	adds	r3, #4
 80013da:	4619      	mov	r1, r3
 80013dc:	4610      	mov	r0, r2
 80013de:	f7ff f8ba 	bl	8000556 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80013e2:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <prvAddCurrentTaskToDelayedList+0xfc>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d202      	bcs.n	80013f2 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80013ec:	4a09      	ldr	r2, [pc, #36]	; (8001414 <prvAddCurrentTaskToDelayedList+0xfc>)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	6013      	str	r3, [r2, #0]
}
 80013f2:	bf00      	nop
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000144 	.word	0x20000144
 8001400:	20000040 	.word	0x20000040
 8001404:	20000148 	.word	0x20000148
 8001408:	2000012c 	.word	0x2000012c
 800140c:	200000fc 	.word	0x200000fc
 8001410:	200000f8 	.word	0x200000f8
 8001414:	20000160 	.word	0x20000160

08001418 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	3b04      	subs	r3, #4
 8001428:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001430:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	3b04      	subs	r3, #4
 8001436:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	f023 0201 	bic.w	r2, r3, #1
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	3b04      	subs	r3, #4
 8001446:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001448:	4a0c      	ldr	r2, [pc, #48]	; (800147c <pxPortInitialiseStack+0x64>)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	3b14      	subs	r3, #20
 8001452:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	3b04      	subs	r3, #4
 800145e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f06f 0202 	mvn.w	r2, #2
 8001466:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	3b20      	subs	r3, #32
 800146c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800146e:	68fb      	ldr	r3, [r7, #12]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	08001481 	.word	0x08001481

08001480 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800148a:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <prvTaskExitError+0x54>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001492:	d00a      	beq.n	80014aa <prvTaskExitError+0x2a>
        __asm volatile
 8001494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001498:	f383 8811 	msr	BASEPRI, r3
 800149c:	f3bf 8f6f 	isb	sy
 80014a0:	f3bf 8f4f 	dsb	sy
 80014a4:	60fb      	str	r3, [r7, #12]
    }
 80014a6:	bf00      	nop
 80014a8:	e7fe      	b.n	80014a8 <prvTaskExitError+0x28>
        __asm volatile
 80014aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014ae:	f383 8811 	msr	BASEPRI, r3
 80014b2:	f3bf 8f6f 	isb	sy
 80014b6:	f3bf 8f4f 	dsb	sy
 80014ba:	60bb      	str	r3, [r7, #8]
    }
 80014bc:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80014be:	bf00      	nop
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0fc      	beq.n	80014c0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80014c6:	bf00      	nop
 80014c8:	bf00      	nop
 80014ca:	3714      	adds	r7, #20
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	20000004 	.word	0x20000004
	...

080014e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80014e0:	4b07      	ldr	r3, [pc, #28]	; (8001500 <pxCurrentTCBConst2>)
 80014e2:	6819      	ldr	r1, [r3, #0]
 80014e4:	6808      	ldr	r0, [r1, #0]
 80014e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014ea:	f380 8809 	msr	PSP, r0
 80014ee:	f3bf 8f6f 	isb	sy
 80014f2:	f04f 0000 	mov.w	r0, #0
 80014f6:	f380 8811 	msr	BASEPRI, r0
 80014fa:	4770      	bx	lr
 80014fc:	f3af 8000 	nop.w

08001500 <pxCurrentTCBConst2>:
 8001500:	20000040 	.word	0x20000040
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001504:	bf00      	nop
 8001506:	bf00      	nop

08001508 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8001508:	4808      	ldr	r0, [pc, #32]	; (800152c <prvPortStartFirstTask+0x24>)
 800150a:	6800      	ldr	r0, [r0, #0]
 800150c:	6800      	ldr	r0, [r0, #0]
 800150e:	f380 8808 	msr	MSP, r0
 8001512:	f04f 0000 	mov.w	r0, #0
 8001516:	f380 8814 	msr	CONTROL, r0
 800151a:	b662      	cpsie	i
 800151c:	b661      	cpsie	f
 800151e:	f3bf 8f4f 	dsb	sy
 8001522:	f3bf 8f6f 	isb	sy
 8001526:	df00      	svc	0
 8001528:	bf00      	nop
 800152a:	0000      	.short	0x0000
 800152c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001530:	bf00      	nop
 8001532:	bf00      	nop

08001534 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800153a:	4b46      	ldr	r3, [pc, #280]	; (8001654 <xPortStartScheduler+0x120>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a46      	ldr	r2, [pc, #280]	; (8001658 <xPortStartScheduler+0x124>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d10a      	bne.n	800155a <xPortStartScheduler+0x26>
        __asm volatile
 8001544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001548:	f383 8811 	msr	BASEPRI, r3
 800154c:	f3bf 8f6f 	isb	sy
 8001550:	f3bf 8f4f 	dsb	sy
 8001554:	613b      	str	r3, [r7, #16]
    }
 8001556:	bf00      	nop
 8001558:	e7fe      	b.n	8001558 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800155a:	4b3e      	ldr	r3, [pc, #248]	; (8001654 <xPortStartScheduler+0x120>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a3f      	ldr	r2, [pc, #252]	; (800165c <xPortStartScheduler+0x128>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d10a      	bne.n	800157a <xPortStartScheduler+0x46>
        __asm volatile
 8001564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001568:	f383 8811 	msr	BASEPRI, r3
 800156c:	f3bf 8f6f 	isb	sy
 8001570:	f3bf 8f4f 	dsb	sy
 8001574:	60fb      	str	r3, [r7, #12]
    }
 8001576:	bf00      	nop
 8001578:	e7fe      	b.n	8001578 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800157a:	4b39      	ldr	r3, [pc, #228]	; (8001660 <xPortStartScheduler+0x12c>)
 800157c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	b2db      	uxtb	r3, r3
 8001584:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	22ff      	movs	r2, #255	; 0xff
 800158a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001594:	78fb      	ldrb	r3, [r7, #3]
 8001596:	b2db      	uxtb	r3, r3
 8001598:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800159c:	b2da      	uxtb	r2, r3
 800159e:	4b31      	ldr	r3, [pc, #196]	; (8001664 <xPortStartScheduler+0x130>)
 80015a0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80015a2:	4b31      	ldr	r3, [pc, #196]	; (8001668 <xPortStartScheduler+0x134>)
 80015a4:	2207      	movs	r2, #7
 80015a6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80015a8:	e009      	b.n	80015be <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 80015aa:	4b2f      	ldr	r3, [pc, #188]	; (8001668 <xPortStartScheduler+0x134>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	4a2d      	ldr	r2, [pc, #180]	; (8001668 <xPortStartScheduler+0x134>)
 80015b2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80015b4:	78fb      	ldrb	r3, [r7, #3]
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80015be:	78fb      	ldrb	r3, [r7, #3]
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c6:	2b80      	cmp	r3, #128	; 0x80
 80015c8:	d0ef      	beq.n	80015aa <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80015ca:	4b27      	ldr	r3, [pc, #156]	; (8001668 <xPortStartScheduler+0x134>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f1c3 0307 	rsb	r3, r3, #7
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	d00a      	beq.n	80015ec <xPortStartScheduler+0xb8>
        __asm volatile
 80015d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015da:	f383 8811 	msr	BASEPRI, r3
 80015de:	f3bf 8f6f 	isb	sy
 80015e2:	f3bf 8f4f 	dsb	sy
 80015e6:	60bb      	str	r3, [r7, #8]
    }
 80015e8:	bf00      	nop
 80015ea:	e7fe      	b.n	80015ea <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80015ec:	4b1e      	ldr	r3, [pc, #120]	; (8001668 <xPortStartScheduler+0x134>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	021b      	lsls	r3, r3, #8
 80015f2:	4a1d      	ldr	r2, [pc, #116]	; (8001668 <xPortStartScheduler+0x134>)
 80015f4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80015f6:	4b1c      	ldr	r3, [pc, #112]	; (8001668 <xPortStartScheduler+0x134>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80015fe:	4a1a      	ldr	r2, [pc, #104]	; (8001668 <xPortStartScheduler+0x134>)
 8001600:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	b2da      	uxtb	r2, r3
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800160a:	4b18      	ldr	r3, [pc, #96]	; (800166c <xPortStartScheduler+0x138>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a17      	ldr	r2, [pc, #92]	; (800166c <xPortStartScheduler+0x138>)
 8001610:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001614:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001616:	4b15      	ldr	r3, [pc, #84]	; (800166c <xPortStartScheduler+0x138>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a14      	ldr	r2, [pc, #80]	; (800166c <xPortStartScheduler+0x138>)
 800161c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001620:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001622:	f000 f8db 	bl	80017dc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001626:	4b12      	ldr	r3, [pc, #72]	; (8001670 <xPortStartScheduler+0x13c>)
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800162c:	f000 f8fa 	bl	8001824 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001630:	4b10      	ldr	r3, [pc, #64]	; (8001674 <xPortStartScheduler+0x140>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a0f      	ldr	r2, [pc, #60]	; (8001674 <xPortStartScheduler+0x140>)
 8001636:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800163a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800163c:	f7ff ff64 	bl	8001508 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001640:	f7ff fbfa 	bl	8000e38 <vTaskSwitchContext>
    prvTaskExitError();
 8001644:	f7ff ff1c 	bl	8001480 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	e000ed00 	.word	0xe000ed00
 8001658:	410fc271 	.word	0x410fc271
 800165c:	410fc270 	.word	0x410fc270
 8001660:	e000e400 	.word	0xe000e400
 8001664:	2000016c 	.word	0x2000016c
 8001668:	20000170 	.word	0x20000170
 800166c:	e000ed20 	.word	0xe000ed20
 8001670:	20000004 	.word	0x20000004
 8001674:	e000ef34 	.word	0xe000ef34

08001678 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
        __asm volatile
 800167e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001682:	f383 8811 	msr	BASEPRI, r3
 8001686:	f3bf 8f6f 	isb	sy
 800168a:	f3bf 8f4f 	dsb	sy
 800168e:	607b      	str	r3, [r7, #4]
    }
 8001690:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8001692:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <vPortEnterCritical+0x58>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	3301      	adds	r3, #1
 8001698:	4a0d      	ldr	r2, [pc, #52]	; (80016d0 <vPortEnterCritical+0x58>)
 800169a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <vPortEnterCritical+0x58>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d10f      	bne.n	80016c4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80016a4:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <vPortEnterCritical+0x5c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d00a      	beq.n	80016c4 <vPortEnterCritical+0x4c>
        __asm volatile
 80016ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016b2:	f383 8811 	msr	BASEPRI, r3
 80016b6:	f3bf 8f6f 	isb	sy
 80016ba:	f3bf 8f4f 	dsb	sy
 80016be:	603b      	str	r3, [r7, #0]
    }
 80016c0:	bf00      	nop
 80016c2:	e7fe      	b.n	80016c2 <vPortEnterCritical+0x4a>
    }
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	20000004 	.word	0x20000004
 80016d4:	e000ed04 	.word	0xe000ed04

080016d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80016de:	4b12      	ldr	r3, [pc, #72]	; (8001728 <vPortExitCritical+0x50>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d10a      	bne.n	80016fc <vPortExitCritical+0x24>
        __asm volatile
 80016e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016ea:	f383 8811 	msr	BASEPRI, r3
 80016ee:	f3bf 8f6f 	isb	sy
 80016f2:	f3bf 8f4f 	dsb	sy
 80016f6:	607b      	str	r3, [r7, #4]
    }
 80016f8:	bf00      	nop
 80016fa:	e7fe      	b.n	80016fa <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80016fc:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <vPortExitCritical+0x50>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	3b01      	subs	r3, #1
 8001702:	4a09      	ldr	r2, [pc, #36]	; (8001728 <vPortExitCritical+0x50>)
 8001704:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001706:	4b08      	ldr	r3, [pc, #32]	; (8001728 <vPortExitCritical+0x50>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d105      	bne.n	800171a <vPortExitCritical+0x42>
 800170e:	2300      	movs	r3, #0
 8001710:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	f383 8811 	msr	BASEPRI, r3
    }
 8001718:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	20000004 	.word	0x20000004
 800172c:	00000000 	.word	0x00000000

08001730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001730:	f3ef 8009 	mrs	r0, PSP
 8001734:	f3bf 8f6f 	isb	sy
 8001738:	4b15      	ldr	r3, [pc, #84]	; (8001790 <pxCurrentTCBConst>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	f01e 0f10 	tst.w	lr, #16
 8001740:	bf08      	it	eq
 8001742:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001746:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800174a:	6010      	str	r0, [r2, #0]
 800174c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001750:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001754:	f380 8811 	msr	BASEPRI, r0
 8001758:	f3bf 8f4f 	dsb	sy
 800175c:	f3bf 8f6f 	isb	sy
 8001760:	f7ff fb6a 	bl	8000e38 <vTaskSwitchContext>
 8001764:	f04f 0000 	mov.w	r0, #0
 8001768:	f380 8811 	msr	BASEPRI, r0
 800176c:	bc09      	pop	{r0, r3}
 800176e:	6819      	ldr	r1, [r3, #0]
 8001770:	6808      	ldr	r0, [r1, #0]
 8001772:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001776:	f01e 0f10 	tst.w	lr, #16
 800177a:	bf08      	it	eq
 800177c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001780:	f380 8809 	msr	PSP, r0
 8001784:	f3bf 8f6f 	isb	sy
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	f3af 8000 	nop.w

08001790 <pxCurrentTCBConst>:
 8001790:	20000040 	.word	0x20000040
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001794:	bf00      	nop
 8001796:	bf00      	nop

08001798 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
        __asm volatile
 800179e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017a2:	f383 8811 	msr	BASEPRI, r3
 80017a6:	f3bf 8f6f 	isb	sy
 80017aa:	f3bf 8f4f 	dsb	sy
 80017ae:	607b      	str	r3, [r7, #4]
    }
 80017b0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80017b2:	f7ff fa2b 	bl	8000c0c <xTaskIncrementTick>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d003      	beq.n	80017c4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <SysTick_Handler+0x40>)
 80017be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	2300      	movs	r3, #0
 80017c6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	f383 8811 	msr	BASEPRI, r3
    }
 80017ce:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80017d0:	bf00      	nop
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	e000ed04 	.word	0xe000ed04

080017dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80017e0:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <vPortSetupTimerInterrupt+0x34>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80017e6:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <vPortSetupTimerInterrupt+0x38>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80017ec:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <vPortSetupTimerInterrupt+0x3c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a0a      	ldr	r2, [pc, #40]	; (800181c <vPortSetupTimerInterrupt+0x40>)
 80017f2:	fba2 2303 	umull	r2, r3, r2, r3
 80017f6:	099b      	lsrs	r3, r3, #6
 80017f8:	4a09      	ldr	r2, [pc, #36]	; (8001820 <vPortSetupTimerInterrupt+0x44>)
 80017fa:	3b01      	subs	r3, #1
 80017fc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80017fe:	4b04      	ldr	r3, [pc, #16]	; (8001810 <vPortSetupTimerInterrupt+0x34>)
 8001800:	2207      	movs	r2, #7
 8001802:	601a      	str	r2, [r3, #0]
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	e000e010 	.word	0xe000e010
 8001814:	e000e018 	.word	0xe000e018
 8001818:	20000018 	.word	0x20000018
 800181c:	10624dd3 	.word	0x10624dd3
 8001820:	e000e014 	.word	0xe000e014

08001824 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8001824:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001834 <vPortEnableVFP+0x10>
 8001828:	6801      	ldr	r1, [r0, #0]
 800182a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800182e:	6001      	str	r1, [r0, #0]
 8001830:	4770      	bx	lr
 8001832:	0000      	.short	0x0000
 8001834:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8001838:	bf00      	nop
 800183a:	bf00      	nop

0800183c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8001842:	f3ef 8305 	mrs	r3, IPSR
 8001846:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2b0f      	cmp	r3, #15
 800184c:	d914      	bls.n	8001878 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800184e:	4a17      	ldr	r2, [pc, #92]	; (80018ac <vPortValidateInterruptPriority+0x70>)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4413      	add	r3, r2
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001858:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <vPortValidateInterruptPriority+0x74>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	7afa      	ldrb	r2, [r7, #11]
 800185e:	429a      	cmp	r2, r3
 8001860:	d20a      	bcs.n	8001878 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8001862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001866:	f383 8811 	msr	BASEPRI, r3
 800186a:	f3bf 8f6f 	isb	sy
 800186e:	f3bf 8f4f 	dsb	sy
 8001872:	607b      	str	r3, [r7, #4]
    }
 8001874:	bf00      	nop
 8001876:	e7fe      	b.n	8001876 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001878:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <vPortValidateInterruptPriority+0x78>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001880:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <vPortValidateInterruptPriority+0x7c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	429a      	cmp	r2, r3
 8001886:	d90a      	bls.n	800189e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8001888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800188c:	f383 8811 	msr	BASEPRI, r3
 8001890:	f3bf 8f6f 	isb	sy
 8001894:	f3bf 8f4f 	dsb	sy
 8001898:	603b      	str	r3, [r7, #0]
    }
 800189a:	bf00      	nop
 800189c:	e7fe      	b.n	800189c <vPortValidateInterruptPriority+0x60>
    }
 800189e:	bf00      	nop
 80018a0:	3714      	adds	r7, #20
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	e000e3f0 	.word	0xe000e3f0
 80018b0:	2000016c 	.word	0x2000016c
 80018b4:	e000ed0c 	.word	0xe000ed0c
 80018b8:	20000170 	.word	0x20000170

080018bc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08a      	sub	sp, #40	; 0x28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80018c8:	f7ff f886 	bl	80009d8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80018cc:	4b53      	ldr	r3, [pc, #332]	; (8001a1c <pvPortMalloc+0x160>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80018d4:	f000 f908 	bl	8001ae8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d012      	beq.n	8001904 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80018de:	2208      	movs	r2, #8
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	3308      	adds	r3, #8
 80018ea:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	43db      	mvns	r3, r3
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d804      	bhi.n	8001900 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	4413      	add	r3, r2
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	e001      	b.n	8001904 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	db70      	blt.n	80019ec <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d06d      	beq.n	80019ec <pvPortMalloc+0x130>
 8001910:	4b43      	ldr	r3, [pc, #268]	; (8001a20 <pvPortMalloc+0x164>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	429a      	cmp	r2, r3
 8001918:	d868      	bhi.n	80019ec <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800191a:	4b42      	ldr	r3, [pc, #264]	; (8001a24 <pvPortMalloc+0x168>)
 800191c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800191e:	4b41      	ldr	r3, [pc, #260]	; (8001a24 <pvPortMalloc+0x168>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001924:	e004      	b.n	8001930 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8001926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001928:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	429a      	cmp	r2, r3
 8001938:	d903      	bls.n	8001942 <pvPortMalloc+0x86>
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1f1      	bne.n	8001926 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001942:	4b36      	ldr	r3, [pc, #216]	; (8001a1c <pvPortMalloc+0x160>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001948:	429a      	cmp	r2, r3
 800194a:	d04f      	beq.n	80019ec <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800194c:	6a3b      	ldr	r3, [r7, #32]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2208      	movs	r2, #8
 8001952:	4413      	add	r3, r2
 8001954:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	6a3b      	ldr	r3, [r7, #32]
 800195c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	1ad2      	subs	r2, r2, r3
 8001966:	2308      	movs	r3, #8
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	429a      	cmp	r2, r3
 800196c:	d91f      	bls.n	80019ae <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800196e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4413      	add	r3, r2
 8001974:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	2b00      	cmp	r3, #0
 800197e:	d00a      	beq.n	8001996 <pvPortMalloc+0xda>
        __asm volatile
 8001980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001984:	f383 8811 	msr	BASEPRI, r3
 8001988:	f3bf 8f6f 	isb	sy
 800198c:	f3bf 8f4f 	dsb	sy
 8001990:	613b      	str	r3, [r7, #16]
    }
 8001992:	bf00      	nop
 8001994:	e7fe      	b.n	8001994 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	1ad2      	subs	r2, r2, r3
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80019a8:	6978      	ldr	r0, [r7, #20]
 80019aa:	f000 f8f9 	bl	8001ba0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80019ae:	4b1c      	ldr	r3, [pc, #112]	; (8001a20 <pvPortMalloc+0x164>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	4a19      	ldr	r2, [pc, #100]	; (8001a20 <pvPortMalloc+0x164>)
 80019ba:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80019bc:	4b18      	ldr	r3, [pc, #96]	; (8001a20 <pvPortMalloc+0x164>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	4b19      	ldr	r3, [pc, #100]	; (8001a28 <pvPortMalloc+0x16c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d203      	bcs.n	80019d0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80019c8:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <pvPortMalloc+0x164>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a16      	ldr	r2, [pc, #88]	; (8001a28 <pvPortMalloc+0x16c>)
 80019ce:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80019d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80019e2:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <pvPortMalloc+0x170>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	3301      	adds	r3, #1
 80019e8:	4a10      	ldr	r2, [pc, #64]	; (8001a2c <pvPortMalloc+0x170>)
 80019ea:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80019ec:	f7ff f802 	bl	80009f4 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00a      	beq.n	8001a10 <pvPortMalloc+0x154>
        __asm volatile
 80019fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019fe:	f383 8811 	msr	BASEPRI, r3
 8001a02:	f3bf 8f6f 	isb	sy
 8001a06:	f3bf 8f4f 	dsb	sy
 8001a0a:	60fb      	str	r3, [r7, #12]
    }
 8001a0c:	bf00      	nop
 8001a0e:	e7fe      	b.n	8001a0e <pvPortMalloc+0x152>
    return pvReturn;
 8001a10:	69fb      	ldr	r3, [r7, #28]
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3728      	adds	r7, #40	; 0x28
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000d34 	.word	0x20000d34
 8001a20:	20000d38 	.word	0x20000d38
 8001a24:	20000d2c 	.word	0x20000d2c
 8001a28:	20000d3c 	.word	0x20000d3c
 8001a2c:	20000d40 	.word	0x20000d40

08001a30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d049      	beq.n	8001ad6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8001a42:	2308      	movs	r3, #8
 8001a44:	425b      	negs	r3, r3
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	4413      	add	r3, r2
 8001a4a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	db0a      	blt.n	8001a6e <vPortFree+0x3e>
        __asm volatile
 8001a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a5c:	f383 8811 	msr	BASEPRI, r3
 8001a60:	f3bf 8f6f 	isb	sy
 8001a64:	f3bf 8f4f 	dsb	sy
 8001a68:	60fb      	str	r3, [r7, #12]
    }
 8001a6a:	bf00      	nop
 8001a6c:	e7fe      	b.n	8001a6c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d00a      	beq.n	8001a8c <vPortFree+0x5c>
        __asm volatile
 8001a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a7a:	f383 8811 	msr	BASEPRI, r3
 8001a7e:	f3bf 8f6f 	isb	sy
 8001a82:	f3bf 8f4f 	dsb	sy
 8001a86:	60bb      	str	r3, [r7, #8]
    }
 8001a88:	bf00      	nop
 8001a8a:	e7fe      	b.n	8001a8a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	0fdb      	lsrs	r3, r3, #31
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d01c      	beq.n	8001ad6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d118      	bne.n	8001ad6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8001ab0:	f7fe ff92 	bl	80009d8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <vPortFree+0xb0>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4413      	add	r3, r2
 8001abe:	4a08      	ldr	r2, [pc, #32]	; (8001ae0 <vPortFree+0xb0>)
 8001ac0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001ac2:	6938      	ldr	r0, [r7, #16]
 8001ac4:	f000 f86c 	bl	8001ba0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8001ac8:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <vPortFree+0xb4>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	3301      	adds	r3, #1
 8001ace:	4a05      	ldr	r2, [pc, #20]	; (8001ae4 <vPortFree+0xb4>)
 8001ad0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8001ad2:	f7fe ff8f 	bl	80009f4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8001ad6:	bf00      	nop
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000d38 	.word	0x20000d38
 8001ae4:	20000d44 	.word	0x20000d44

08001ae8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001aee:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001af2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8001af4:	4b25      	ldr	r3, [pc, #148]	; (8001b8c <prvHeapInit+0xa4>)
 8001af6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d00c      	beq.n	8001b1c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	3307      	adds	r3, #7
 8001b06:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f023 0307 	bic.w	r3, r3, #7
 8001b0e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8001b10:	68ba      	ldr	r2, [r7, #8]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	4a1d      	ldr	r2, [pc, #116]	; (8001b8c <prvHeapInit+0xa4>)
 8001b18:	4413      	add	r3, r2
 8001b1a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001b20:	4a1b      	ldr	r2, [pc, #108]	; (8001b90 <prvHeapInit+0xa8>)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8001b26:	4b1a      	ldr	r3, [pc, #104]	; (8001b90 <prvHeapInit+0xa8>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	4413      	add	r3, r2
 8001b32:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8001b34:	2208      	movs	r2, #8
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	1a9b      	subs	r3, r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f023 0307 	bic.w	r3, r3, #7
 8001b42:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	4a13      	ldr	r2, [pc, #76]	; (8001b94 <prvHeapInit+0xac>)
 8001b48:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8001b4a:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <prvHeapInit+0xac>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <prvHeapInit+0xac>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	1ad2      	subs	r2, r2, r3
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001b68:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <prvHeapInit+0xac>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	4a08      	ldr	r2, [pc, #32]	; (8001b98 <prvHeapInit+0xb0>)
 8001b76:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	4a07      	ldr	r2, [pc, #28]	; (8001b9c <prvHeapInit+0xb4>)
 8001b7e:	6013      	str	r3, [r2, #0]
}
 8001b80:	bf00      	nop
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	20000174 	.word	0x20000174
 8001b90:	20000d2c 	.word	0x20000d2c
 8001b94:	20000d34 	.word	0x20000d34
 8001b98:	20000d3c 	.word	0x20000d3c
 8001b9c:	20000d38 	.word	0x20000d38

08001ba0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001ba8:	4b28      	ldr	r3, [pc, #160]	; (8001c4c <prvInsertBlockIntoFreeList+0xac>)
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	e002      	b.n	8001bb4 <prvInsertBlockIntoFreeList+0x14>
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d8f7      	bhi.n	8001bae <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	4413      	add	r3, r2
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d108      	bne.n	8001be2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	441a      	add	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	441a      	add	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d118      	bne.n	8001c28 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <prvInsertBlockIntoFreeList+0xb0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d00d      	beq.n	8001c1e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	441a      	add	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	e008      	b.n	8001c30 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001c1e:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <prvInsertBlockIntoFreeList+0xb0>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	e003      	b.n	8001c30 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d002      	beq.n	8001c3e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001c3e:	bf00      	nop
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	20000d2c 	.word	0x20000d2c
 8001c50:	20000d34 	.word	0x20000d34

08001c54 <ST7735_Reset>:


}

static void ST7735_Reset()
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  TFT_RES_L();
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2110      	movs	r1, #16
 8001c5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c60:	f003 fcfe 	bl	8005660 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 8001c64:	2014      	movs	r0, #20
 8001c66:	f001 ff95 	bl	8003b94 <HAL_Delay>
  TFT_RES_H();
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	2110      	movs	r1, #16
 8001c6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c72:	f003 fcf5 	bl	8005660 <HAL_GPIO_WritePin>
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	71fb      	strb	r3, [r7, #7]
  TFT_DC_C();
 8001c86:	2200      	movs	r2, #0
 8001c88:	2104      	movs	r1, #4
 8001c8a:	4806      	ldr	r0, [pc, #24]	; (8001ca4 <ST7735_WriteCommand+0x28>)
 8001c8c:	f003 fce8 	bl	8005660 <HAL_GPIO_WritePin>
#ifdef USE_SPI_DMA
  HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, &cmd, sizeof(cmd));
 8001c90:	1dfb      	adds	r3, r7, #7
 8001c92:	2201      	movs	r2, #1
 8001c94:	4619      	mov	r1, r3
 8001c96:	4804      	ldr	r0, [pc, #16]	; (8001ca8 <ST7735_WriteCommand+0x2c>)
 8001c98:	f006 fe6e 	bl	8008978 <HAL_SPI_Transmit_DMA>
  //while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
#else
  HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
#endif
}
 8001c9c:	bf00      	nop
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	48000400 	.word	0x48000400
 8001ca8:	20000f5c 	.word	0x20000f5c

08001cac <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  TFT_DC_D();
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	2104      	movs	r1, #4
 8001cba:	480b      	ldr	r0, [pc, #44]	; (8001ce8 <ST7735_WriteData+0x3c>)
 8001cbc:	f003 fcd0 	bl	8005660 <HAL_GPIO_WritePin>
#ifdef USE_SPI_DMA
  HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, buff, buff_size);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	4808      	ldr	r0, [pc, #32]	; (8001cec <ST7735_WriteData+0x40>)
 8001cca:	f006 fe55 	bl	8008978 <HAL_SPI_Transmit_DMA>
  while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
 8001cce:	bf00      	nop
 8001cd0:	4b06      	ldr	r3, [pc, #24]	; (8001cec <ST7735_WriteData+0x40>)
 8001cd2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b03      	cmp	r3, #3
 8001cda:	d0f9      	beq.n	8001cd0 <ST7735_WriteData+0x24>

#else
  HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
#endif
}
 8001cdc:	bf00      	nop
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	48000400 	.word	0x48000400
 8001cec:	20000f5c 	.word	0x20000f5c

08001cf0 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	1c5a      	adds	r2, r3, #1
 8001cfc:	607a      	str	r2, [r7, #4]
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	73fb      	strb	r3, [r7, #15]
    while(numCommands--)
 8001d02:	e034      	b.n	8001d6e <ST7735_ExecuteCommandList+0x7e>
    {
      uint8_t cmd = *addr++;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	607a      	str	r2, [r7, #4]
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8001d0e:	7afb      	ldrb	r3, [r7, #11]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff ffb3 	bl	8001c7c <ST7735_WriteCommand>

        numArgs = *addr++;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	1c5a      	adds	r2, r3, #1
 8001d1a:	607a      	str	r2, [r7, #4]
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8001d20:	7abb      	ldrb	r3, [r7, #10]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d28:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8001d2a:	7abb      	ldrb	r3, [r7, #10]
 8001d2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d30:	72bb      	strb	r3, [r7, #10]
        if(numArgs)
 8001d32:	7abb      	ldrb	r3, [r7, #10]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d008      	beq.n	8001d4a <ST7735_ExecuteCommandList+0x5a>
        {
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8001d38:	7abb      	ldrb	r3, [r7, #10]
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff ffb5 	bl	8001cac <ST7735_WriteData>
            addr += numArgs;
 8001d42:	7abb      	ldrb	r3, [r7, #10]
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	4413      	add	r3, r2
 8001d48:	607b      	str	r3, [r7, #4]
        }

        if(ms)
 8001d4a:	89bb      	ldrh	r3, [r7, #12]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d00e      	beq.n	8001d6e <ST7735_ExecuteCommandList+0x7e>
        {
            ms = *addr++;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	1c5a      	adds	r2, r3, #1
 8001d54:	607a      	str	r2, [r7, #4]
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8001d5a:	89bb      	ldrh	r3, [r7, #12]
 8001d5c:	2bff      	cmp	r3, #255	; 0xff
 8001d5e:	d102      	bne.n	8001d66 <ST7735_ExecuteCommandList+0x76>
 8001d60:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001d64:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8001d66:	89bb      	ldrh	r3, [r7, #12]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f001 ff13 	bl	8003b94 <HAL_Delay>
    while(numCommands--)
 8001d6e:	7bfb      	ldrb	r3, [r7, #15]
 8001d70:	1e5a      	subs	r2, r3, #1
 8001d72:	73fa      	strb	r2, [r7, #15]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1c5      	bne.n	8001d04 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8001d78:	bf00      	nop
 8001d7a:	bf00      	nop
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
	...

08001d84 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8001d84:	b590      	push	{r4, r7, lr}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4604      	mov	r4, r0
 8001d8c:	4608      	mov	r0, r1
 8001d8e:	4611      	mov	r1, r2
 8001d90:	461a      	mov	r2, r3
 8001d92:	4623      	mov	r3, r4
 8001d94:	71fb      	strb	r3, [r7, #7]
 8001d96:	4603      	mov	r3, r0
 8001d98:	71bb      	strb	r3, [r7, #6]
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	717b      	strb	r3, [r7, #5]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001da2:	202a      	movs	r0, #42	; 0x2a
 8001da4:	f7ff ff6a 	bl	8001c7c <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8001da8:	2300      	movs	r3, #0
 8001daa:	733b      	strb	r3, [r7, #12]
 8001dac:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <ST7735_SetAddressWindow+0x88>)
 8001dae:	781a      	ldrb	r2, [r3, #0]
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	4413      	add	r3, r2
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	737b      	strb	r3, [r7, #13]
 8001db8:	2300      	movs	r3, #0
 8001dba:	73bb      	strb	r3, [r7, #14]
 8001dbc:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <ST7735_SetAddressWindow+0x88>)
 8001dbe:	781a      	ldrb	r2, [r3, #0]
 8001dc0:	797b      	ldrb	r3, [r7, #5]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001dc8:	f107 030c 	add.w	r3, r7, #12
 8001dcc:	2104      	movs	r1, #4
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff ff6c 	bl	8001cac <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001dd4:	202b      	movs	r0, #43	; 0x2b
 8001dd6:	f7ff ff51 	bl	8001c7c <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8001dda:	4b0d      	ldr	r3, [pc, #52]	; (8001e10 <ST7735_SetAddressWindow+0x8c>)
 8001ddc:	781a      	ldrb	r2, [r3, #0]
 8001dde:	79bb      	ldrb	r3, [r7, #6]
 8001de0:	4413      	add	r3, r2
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8001de6:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <ST7735_SetAddressWindow+0x8c>)
 8001de8:	781a      	ldrb	r2, [r3, #0]
 8001dea:	793b      	ldrb	r3, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001df2:	f107 030c 	add.w	r3, r7, #12
 8001df6:	2104      	movs	r1, #4
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff ff57 	bl	8001cac <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001dfe:	202c      	movs	r0, #44	; 0x2c
 8001e00:	f7ff ff3c 	bl	8001c7c <ST7735_WriteCommand>
}
 8001e04:	bf00      	nop
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd90      	pop	{r4, r7, pc}
 8001e0c:	20000014 	.word	0x20000014
 8001e10:	20000015 	.word	0x20000015

08001e14 <ST7735_WriteChar>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001e14:	b082      	sub	sp, #8
 8001e16:	b590      	push	{r4, r7, lr}
 8001e18:	b089      	sub	sp, #36	; 0x24
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	637b      	str	r3, [r7, #52]	; 0x34
 8001e1e:	4603      	mov	r3, r0
 8001e20:	80fb      	strh	r3, [r7, #6]
 8001e22:	460b      	mov	r3, r1
 8001e24:	80bb      	strh	r3, [r7, #4]
 8001e26:	4613      	mov	r3, r2
 8001e28:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8001e2a:	88fb      	ldrh	r3, [r7, #6]
 8001e2c:	b2d8      	uxtb	r0, r3
 8001e2e:	88bb      	ldrh	r3, [r7, #4]
 8001e30:	b2d9      	uxtb	r1, r3
 8001e32:	88fb      	ldrh	r3, [r7, #6]
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001e3a:	4413      	add	r3, r2
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	b2dc      	uxtb	r4, r3
 8001e42:	88bb      	ldrh	r3, [r7, #4]
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001e4a:	4413      	add	r3, r2
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	4622      	mov	r2, r4
 8001e54:	f7ff ff96 	bl	8001d84 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++)
 8001e58:	2300      	movs	r3, #0
 8001e5a:	61fb      	str	r3, [r7, #28]
 8001e5c:	e043      	b.n	8001ee6 <ST7735_WriteChar+0xd2>
    {
        b = font.data[(ch - 32) * font.height + i];
 8001e5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e60:	78fb      	ldrb	r3, [r7, #3]
 8001e62:	3b20      	subs	r3, #32
 8001e64:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8001e68:	fb01 f303 	mul.w	r3, r1, r3
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	440b      	add	r3, r1
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	4413      	add	r3, r2
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++)
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61bb      	str	r3, [r7, #24]
 8001e7e:	e029      	b.n	8001ed4 <ST7735_WriteChar+0xc0>
        {
            if((b << j) & 0x8000)
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00e      	beq.n	8001eae <ST7735_WriteChar+0x9a>
            {
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001e90:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001e92:	0a1b      	lsrs	r3, r3, #8
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	743b      	strb	r3, [r7, #16]
 8001e9a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8001ea0:	f107 0310 	add.w	r3, r7, #16
 8001ea4:	2102      	movs	r1, #2
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff ff00 	bl	8001cac <ST7735_WriteData>
 8001eac:	e00f      	b.n	8001ece <ST7735_WriteChar+0xba>
            }
            else
            {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001eae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001eb2:	0a1b      	lsrs	r3, r3, #8
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	733b      	strb	r3, [r7, #12]
 8001eba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8001ec2:	f107 030c 	add.w	r3, r7, #12
 8001ec6:	2102      	movs	r1, #2
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff feef 	bl	8001cac <ST7735_WriteData>
        for(j = 0; j < font.width; j++)
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	61bb      	str	r3, [r7, #24]
 8001ed4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001ed8:	461a      	mov	r2, r3
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d3cf      	bcc.n	8001e80 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++)
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	61fb      	str	r3, [r7, #28]
 8001ee6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001eea:	461a      	mov	r2, r3
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d3b5      	bcc.n	8001e5e <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8001ef2:	bf00      	nop
 8001ef4:	bf00      	nop
 8001ef6:	3724      	adds	r7, #36	; 0x24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001efe:	b002      	add	sp, #8
 8001f00:	4770      	bx	lr
	...

08001f04 <ST7735_Init>:

void ST7735_Init()
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  //ST7735_GPIO_Init();
    TFT_CS_L();
 8001f08:	2200      	movs	r2, #0
 8001f0a:	2104      	movs	r1, #4
 8001f0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f10:	f003 fba6 	bl	8005660 <HAL_GPIO_WritePin>

    ST7735_Reset();
 8001f14:	f7ff fe9e 	bl	8001c54 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8001f18:	4808      	ldr	r0, [pc, #32]	; (8001f3c <ST7735_Init+0x38>)
 8001f1a:	f7ff fee9 	bl	8001cf0 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8001f1e:	4808      	ldr	r0, [pc, #32]	; (8001f40 <ST7735_Init+0x3c>)
 8001f20:	f7ff fee6 	bl	8001cf0 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8001f24:	4807      	ldr	r0, [pc, #28]	; (8001f44 <ST7735_Init+0x40>)
 8001f26:	f7ff fee3 	bl	8001cf0 <ST7735_ExecuteCommandList>
    TFT_CS_H();
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	2104      	movs	r1, #4
 8001f2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f32:	f003 fb95 	bl	8005660 <HAL_GPIO_WritePin>
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	0800b014 	.word	0x0800b014
 8001f40:	0800b050 	.word	0x0800b050
 8001f44:	0800b060 	.word	0x0800b060

08001f48 <ST7735_DrawString>:

    TFT_CS_H();
}

void ST7735_DrawString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001f48:	b082      	sub	sp, #8
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b086      	sub	sp, #24
 8001f4e:	af04      	add	r7, sp, #16
 8001f50:	603a      	str	r2, [r7, #0]
 8001f52:	617b      	str	r3, [r7, #20]
 8001f54:	4603      	mov	r3, r0
 8001f56:	80fb      	strh	r3, [r7, #6]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	80bb      	strh	r3, [r7, #4]
  TFT_CS_L();
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	2104      	movs	r1, #4
 8001f60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f64:	f003 fb7c 	bl	8005660 <HAL_GPIO_WritePin>

    while(*str)
 8001f68:	e033      	b.n	8001fd2 <ST7735_DrawString+0x8a>
    {
        if(x + font.width >= _width)
 8001f6a:	88fb      	ldrh	r3, [r7, #6]
 8001f6c:	7d3a      	ldrb	r2, [r7, #20]
 8001f6e:	4413      	add	r3, r2
 8001f70:	4a21      	ldr	r2, [pc, #132]	; (8001ff8 <ST7735_DrawString+0xb0>)
 8001f72:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001f76:	4293      	cmp	r3, r2
 8001f78:	db16      	blt.n	8001fa8 <ST7735_DrawString+0x60>
        {
            x = 0;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8001f7e:	7d7b      	ldrb	r3, [r7, #21]
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	88bb      	ldrh	r3, [r7, #4]
 8001f84:	4413      	add	r3, r2
 8001f86:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height)
 8001f88:	88bb      	ldrh	r3, [r7, #4]
 8001f8a:	7d7a      	ldrb	r2, [r7, #21]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	4a1b      	ldr	r2, [pc, #108]	; (8001ffc <ST7735_DrawString+0xb4>)
 8001f90:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001f94:	4293      	cmp	r3, r2
 8001f96:	da21      	bge.n	8001fdc <ST7735_DrawString+0x94>
            {
                break;
            }

            if(*str == ' ')
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b20      	cmp	r3, #32
 8001f9e:	d103      	bne.n	8001fa8 <ST7735_DrawString+0x60>
            {
                // skip spaces in the beginning of the new line
                str++;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	603b      	str	r3, [r7, #0]
                continue;
 8001fa6:	e014      	b.n	8001fd2 <ST7735_DrawString+0x8a>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	781a      	ldrb	r2, [r3, #0]
 8001fac:	88b9      	ldrh	r1, [r7, #4]
 8001fae:	88f8      	ldrh	r0, [r7, #6]
 8001fb0:	8c3b      	ldrh	r3, [r7, #32]
 8001fb2:	9302      	str	r3, [sp, #8]
 8001fb4:	8bbb      	ldrh	r3, [r7, #28]
 8001fb6:	9301      	str	r3, [sp, #4]
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	f7ff ff29 	bl	8001e14 <ST7735_WriteChar>
        x += font.width;
 8001fc2:	7d3b      	ldrb	r3, [r7, #20]
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	88fb      	ldrh	r3, [r7, #6]
 8001fc8:	4413      	add	r3, r2
 8001fca:	80fb      	strh	r3, [r7, #6]
        str++;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	603b      	str	r3, [r7, #0]
    while(*str)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1c7      	bne.n	8001f6a <ST7735_DrawString+0x22>
 8001fda:	e000      	b.n	8001fde <ST7735_DrawString+0x96>
                break;
 8001fdc:	bf00      	nop
    }
    TFT_CS_H();
 8001fde:	2201      	movs	r2, #1
 8001fe0:	2104      	movs	r1, #4
 8001fe2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fe6:	f003 fb3b 	bl	8005660 <HAL_GPIO_WritePin>
}
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ff4:	b002      	add	sp, #8
 8001ff6:	4770      	bx	lr
 8001ff8:	20000012 	.word	0x20000012
 8001ffc:	20000010 	.word	0x20000010

08002000 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8002000:	b590      	push	{r4, r7, lr}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	4604      	mov	r4, r0
 8002008:	4608      	mov	r0, r1
 800200a:	4611      	mov	r1, r2
 800200c:	461a      	mov	r2, r3
 800200e:	4623      	mov	r3, r4
 8002010:	80fb      	strh	r3, [r7, #6]
 8002012:	4603      	mov	r3, r0
 8002014:	80bb      	strh	r3, [r7, #4]
 8002016:	460b      	mov	r3, r1
 8002018:	807b      	strh	r3, [r7, #2]
 800201a:	4613      	mov	r3, r2
 800201c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= _width) || (y >= _height)) return;
 800201e:	88fb      	ldrh	r3, [r7, #6]
 8002020:	4a3b      	ldr	r2, [pc, #236]	; (8002110 <ST7735_FillRectangle+0x110>)
 8002022:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002026:	4293      	cmp	r3, r2
 8002028:	da6d      	bge.n	8002106 <ST7735_FillRectangle+0x106>
 800202a:	88bb      	ldrh	r3, [r7, #4]
 800202c:	4a39      	ldr	r2, [pc, #228]	; (8002114 <ST7735_FillRectangle+0x114>)
 800202e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002032:	4293      	cmp	r3, r2
 8002034:	da67      	bge.n	8002106 <ST7735_FillRectangle+0x106>
    if((x + w - 1) >= _width) w = _width - x;
 8002036:	88fa      	ldrh	r2, [r7, #6]
 8002038:	887b      	ldrh	r3, [r7, #2]
 800203a:	4413      	add	r3, r2
 800203c:	4a34      	ldr	r2, [pc, #208]	; (8002110 <ST7735_FillRectangle+0x110>)
 800203e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002042:	4293      	cmp	r3, r2
 8002044:	dd06      	ble.n	8002054 <ST7735_FillRectangle+0x54>
 8002046:	4b32      	ldr	r3, [pc, #200]	; (8002110 <ST7735_FillRectangle+0x110>)
 8002048:	f9b3 3000 	ldrsh.w	r3, [r3]
 800204c:	b29a      	uxth	r2, r3
 800204e:	88fb      	ldrh	r3, [r7, #6]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8002054:	88ba      	ldrh	r2, [r7, #4]
 8002056:	883b      	ldrh	r3, [r7, #0]
 8002058:	4413      	add	r3, r2
 800205a:	4a2e      	ldr	r2, [pc, #184]	; (8002114 <ST7735_FillRectangle+0x114>)
 800205c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002060:	4293      	cmp	r3, r2
 8002062:	dd06      	ble.n	8002072 <ST7735_FillRectangle+0x72>
 8002064:	4b2b      	ldr	r3, [pc, #172]	; (8002114 <ST7735_FillRectangle+0x114>)
 8002066:	f9b3 3000 	ldrsh.w	r3, [r3]
 800206a:	b29a      	uxth	r2, r3
 800206c:	88bb      	ldrh	r3, [r7, #4]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	803b      	strh	r3, [r7, #0]

    TFT_CS_L();
 8002072:	2200      	movs	r2, #0
 8002074:	2104      	movs	r1, #4
 8002076:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800207a:	f003 faf1 	bl	8005660 <HAL_GPIO_WritePin>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800207e:	88fb      	ldrh	r3, [r7, #6]
 8002080:	b2d8      	uxtb	r0, r3
 8002082:	88bb      	ldrh	r3, [r7, #4]
 8002084:	b2d9      	uxtb	r1, r3
 8002086:	88fb      	ldrh	r3, [r7, #6]
 8002088:	b2da      	uxtb	r2, r3
 800208a:	887b      	ldrh	r3, [r7, #2]
 800208c:	b2db      	uxtb	r3, r3
 800208e:	4413      	add	r3, r2
 8002090:	b2db      	uxtb	r3, r3
 8002092:	3b01      	subs	r3, #1
 8002094:	b2dc      	uxtb	r4, r3
 8002096:	88bb      	ldrh	r3, [r7, #4]
 8002098:	b2da      	uxtb	r2, r3
 800209a:	883b      	ldrh	r3, [r7, #0]
 800209c:	b2db      	uxtb	r3, r3
 800209e:	4413      	add	r3, r2
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	3b01      	subs	r3, #1
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	4622      	mov	r2, r4
 80020a8:	f7ff fe6c 	bl	8001d84 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80020ac:	8c3b      	ldrh	r3, [r7, #32]
 80020ae:	0a1b      	lsrs	r3, r3, #8
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	733b      	strb	r3, [r7, #12]
 80020b6:	8c3b      	ldrh	r3, [r7, #32]
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	737b      	strb	r3, [r7, #13]
    TFT_DC_D();
 80020bc:	2201      	movs	r2, #1
 80020be:	2104      	movs	r1, #4
 80020c0:	4815      	ldr	r0, [pc, #84]	; (8002118 <ST7735_FillRectangle+0x118>)
 80020c2:	f003 facd 	bl	8005660 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 80020c6:	883b      	ldrh	r3, [r7, #0]
 80020c8:	80bb      	strh	r3, [r7, #4]
 80020ca:	e012      	b.n	80020f2 <ST7735_FillRectangle+0xf2>
    {
        for(x = w; x > 0; x--)
 80020cc:	887b      	ldrh	r3, [r7, #2]
 80020ce:	80fb      	strh	r3, [r7, #6]
 80020d0:	e009      	b.n	80020e6 <ST7735_FillRectangle+0xe6>
        {
#ifdef USE_SPI_DMA
          HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, data, sizeof(data));
 80020d2:	f107 030c 	add.w	r3, r7, #12
 80020d6:	2202      	movs	r2, #2
 80020d8:	4619      	mov	r1, r3
 80020da:	4810      	ldr	r0, [pc, #64]	; (800211c <ST7735_FillRectangle+0x11c>)
 80020dc:	f006 fc4c 	bl	8008978 <HAL_SPI_Transmit_DMA>
        for(x = w; x > 0; x--)
 80020e0:	88fb      	ldrh	r3, [r7, #6]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	80fb      	strh	r3, [r7, #6]
 80020e6:	88fb      	ldrh	r3, [r7, #6]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1f2      	bne.n	80020d2 <ST7735_FillRectangle+0xd2>
    for(y = h; y > 0; y--)
 80020ec:	88bb      	ldrh	r3, [r7, #4]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	80bb      	strh	r3, [r7, #4]
 80020f2:	88bb      	ldrh	r3, [r7, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1e9      	bne.n	80020cc <ST7735_FillRectangle+0xcc>
#else
          HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
#endif
        }
    }
    TFT_CS_H();
 80020f8:	2201      	movs	r2, #1
 80020fa:	2104      	movs	r1, #4
 80020fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002100:	f003 faae 	bl	8005660 <HAL_GPIO_WritePin>
 8002104:	e000      	b.n	8002108 <ST7735_FillRectangle+0x108>
    if((x >= _width) || (y >= _height)) return;
 8002106:	bf00      	nop
}
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	bd90      	pop	{r4, r7, pc}
 800210e:	bf00      	nop
 8002110:	20000012 	.word	0x20000012
 8002114:	20000010 	.word	0x20000010
 8002118:	48000400 	.word	0x48000400
 800211c:	20000f5c 	.word	0x20000f5c

08002120 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af02      	add	r7, sp, #8
 8002126:	4603      	mov	r3, r0
 8002128:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, _width, _height, color);
 800212a:	4b09      	ldr	r3, [pc, #36]	; (8002150 <ST7735_FillScreen+0x30>)
 800212c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002130:	b29a      	uxth	r2, r3
 8002132:	4b08      	ldr	r3, [pc, #32]	; (8002154 <ST7735_FillScreen+0x34>)
 8002134:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002138:	b299      	uxth	r1, r3
 800213a:	88fb      	ldrh	r3, [r7, #6]
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	460b      	mov	r3, r1
 8002140:	2100      	movs	r1, #0
 8002142:	2000      	movs	r0, #0
 8002144:	f7ff ff5c 	bl	8002000 <ST7735_FillRectangle>
}
 8002148:	bf00      	nop
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	20000012 	.word	0x20000012
 8002154:	20000010 	.word	0x20000010

08002158 <ST7735_Backlight_On>:
    ST7735_WriteCommand(invert ? ST7735_INVON : ST7735_INVOFF);
    TFT_CS_H();
}

void ST7735_Backlight_On(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  TFT_BL_H();
 800215c:	2201      	movs	r2, #1
 800215e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002162:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002166:	f003 fa7b 	bl	8005660 <HAL_GPIO_WritePin>
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
	...

08002170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002170:	b5b0      	push	{r4, r5, r7, lr}
 8002172:	b08e      	sub	sp, #56	; 0x38
 8002174:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
BaseType_t flag;
BaseType_t flag_uart;
BaseType_t flag_tempSensor;
BaseType_t flag_lcd;
char msg_lcd2[] = "Hello World - Display on SPI TFT LCD!\n";
 8002176:	4b30      	ldr	r3, [pc, #192]	; (8002238 <main+0xc8>)
 8002178:	463c      	mov	r4, r7
 800217a:	461d      	mov	r5, r3
 800217c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800217e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002180:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002182:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002184:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002188:	6020      	str	r0, [r4, #0]
 800218a:	3404      	adds	r4, #4
 800218c:	8021      	strh	r1, [r4, #0]
 800218e:	3402      	adds	r4, #2
 8002190:	0c0b      	lsrs	r3, r1, #16
 8002192:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002194:	f001 fcc5 	bl	8003b22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002198:	f000 f860 	bl	800225c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800219c:	f000 f8bc 	bl	8002318 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021a0:	f000 fc4c 	bl	8002a3c <MX_GPIO_Init>
  MX_DMA_Init();
 80021a4:	f000 fc0c 	bl	80029c0 <MX_DMA_Init>
  MX_ADC1_Init();
 80021a8:	f000 f8e6 	bl	8002378 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 80021ac:	f000 f948 	bl	8002440 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 80021b0:	f000 f97e 	bl	80024b0 <MX_I2C1_Init>
  MX_I2C2_Init();
 80021b4:	f000 f9ba 	bl	800252c <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 80021b8:	f000 f9f6 	bl	80025a8 <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 80021bc:	f000 fa4a 	bl	8002654 <MX_SPI1_Init>
  MX_SPI3_Init();
 80021c0:	f000 fa86 	bl	80026d0 <MX_SPI3_Init>
  MX_UART4_Init();
 80021c4:	f000 fac2 	bl	800274c <MX_UART4_Init>
  MX_USART1_UART_Init();
 80021c8:	f000 fb0c 	bl	80027e4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80021cc:	f000 fb56 	bl	800287c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80021d0:	f000 fba2 	bl	8002918 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 80021d4:	f000 fbec 	bl	80029b0 <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
 MyLED2_init();
 80021d8:	f000 fd82 	bl	8002ce0 <MyLED2_init>
 MyButton_init();
 80021dc:	f000 fdb2 	bl	8002d44 <MyButton_init>
 MyUART1_init();
 80021e0:	f000 fdf8 	bl	8002dd4 <MyUART1_init>
 //BSP_TSENSOR_Init();
 //ST7735_Init();

 //HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), 1000);

 flag = xTaskCreate(SOS_Transmit, "SOS_Transmit", 200, (void *) 300, 3, &pSOS_Transmit);
 80021e4:	4b15      	ldr	r3, [pc, #84]	; (800223c <main+0xcc>)
 80021e6:	9301      	str	r3, [sp, #4]
 80021e8:	2303      	movs	r3, #3
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80021f0:	22c8      	movs	r2, #200	; 0xc8
 80021f2:	4913      	ldr	r1, [pc, #76]	; (8002240 <main+0xd0>)
 80021f4:	4813      	ldr	r0, [pc, #76]	; (8002244 <main+0xd4>)
 80021f6:	f7fe fa11 	bl	800061c <xTaskCreate>
 80021fa:	62f8      	str	r0, [r7, #44]	; 0x2c
 if(flag!=pdPASS)
 80021fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d001      	beq.n	8002206 <main+0x96>
 {
	 Error_Handler();
 8002202:	f000 ff7d 	bl	8003100 <Error_Handler>
 }
 LastWakeTime=xTaskGetTickCount();
 8002206:	f7fe fcf1 	bl	8000bec <xTaskGetTickCount>
 800220a:	4603      	mov	r3, r0
 800220c:	4a0e      	ldr	r2, [pc, #56]	; (8002248 <main+0xd8>)
 800220e:	6013      	str	r3, [r2, #0]
 if(flag_tempSensor!=pdPASS)
  {
 	 Error_Handler();
  }*/

 flag_lcd = xTaskCreate(LCDDisplay, "LCDDisplay", 200, "\r\nDisplaying on LCD!!!\r\n", 3, &pLCDDisplay);
 8002210:	4b0e      	ldr	r3, [pc, #56]	; (800224c <main+0xdc>)
 8002212:	9301      	str	r3, [sp, #4]
 8002214:	2303      	movs	r3, #3
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	4b0d      	ldr	r3, [pc, #52]	; (8002250 <main+0xe0>)
 800221a:	22c8      	movs	r2, #200	; 0xc8
 800221c:	490d      	ldr	r1, [pc, #52]	; (8002254 <main+0xe4>)
 800221e:	480e      	ldr	r0, [pc, #56]	; (8002258 <main+0xe8>)
 8002220:	f7fe f9fc 	bl	800061c <xTaskCreate>
 8002224:	62b8      	str	r0, [r7, #40]	; 0x28
  if(flag_lcd!=pdPASS)
 8002226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002228:	2b01      	cmp	r3, #1
 800222a:	d001      	beq.n	8002230 <main+0xc0>
   {
  	 Error_Handler();
 800222c:	f000 ff68 	bl	8003100 <Error_Handler>
   }
 //start Scheduler
 vTaskStartScheduler();
 8002230:	f7fe fb86 	bl	8000940 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002234:	e7fe      	b.n	8002234 <main+0xc4>
 8002236:	bf00      	nop
 8002238:	0800a7fc 	.word	0x0800a7fc
 800223c:	20000d48 	.word	0x20000d48
 8002240:	0800a7c4 	.word	0x0800a7c4
 8002244:	08002e95 	.word	0x08002e95
 8002248:	20000d4c 	.word	0x20000d4c
 800224c:	20000d58 	.word	0x20000d58
 8002250:	0800a7d4 	.word	0x0800a7d4
 8002254:	0800a7f0 	.word	0x0800a7f0
 8002258:	08002f81 	.word	0x08002f81

0800225c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b096      	sub	sp, #88	; 0x58
 8002260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002262:	f107 0314 	add.w	r3, r7, #20
 8002266:	2244      	movs	r2, #68	; 0x44
 8002268:	2100      	movs	r1, #0
 800226a:	4618      	mov	r0, r3
 800226c:	f008 fa6e 	bl	800a74c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002270:	463b      	mov	r3, r7
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	605a      	str	r2, [r3, #4]
 8002278:	609a      	str	r2, [r3, #8]
 800227a:	60da      	str	r2, [r3, #12]
 800227c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800227e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002282:	f004 fdff 	bl	8006e84 <HAL_PWREx_ControlVoltageScaling>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800228c:	f000 ff38 	bl	8003100 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002290:	f004 fdc8 	bl	8006e24 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002294:	4b1f      	ldr	r3, [pc, #124]	; (8002314 <SystemClock_Config+0xb8>)
 8002296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229a:	4a1e      	ldr	r2, [pc, #120]	; (8002314 <SystemClock_Config+0xb8>)
 800229c:	f023 0318 	bic.w	r3, r3, #24
 80022a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 80022a4:	2316      	movs	r3, #22
 80022a6:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80022a8:	2301      	movs	r3, #1
 80022aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022b2:	2340      	movs	r3, #64	; 0x40
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80022b6:	2301      	movs	r3, #1
 80022b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80022ba:	2300      	movs	r3, #0
 80022bc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80022be:	2360      	movs	r3, #96	; 0x60
 80022c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80022c2:	2300      	movs	r3, #0
 80022c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022c6:	f107 0314 	add.w	r3, r7, #20
 80022ca:	4618      	mov	r0, r3
 80022cc:	f004 fe7e 	bl	8006fcc <HAL_RCC_OscConfig>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80022d6:	f000 ff13 	bl	8003100 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022da:	230f      	movs	r3, #15
 80022dc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80022de:	2301      	movs	r3, #1
 80022e0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022e2:	2300      	movs	r3, #0
 80022e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80022e6:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80022ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 80022ec:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022f0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80022f2:	463b      	mov	r3, r7
 80022f4:	2100      	movs	r1, #0
 80022f6:	4618      	mov	r0, r3
 80022f8:	f005 fa82 	bl	8007800 <HAL_RCC_ClockConfig>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002302:	f000 fefd 	bl	8003100 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002306:	f006 f89b 	bl	8008440 <HAL_RCCEx_EnableMSIPLLMode>
}
 800230a:	bf00      	nop
 800230c:	3758      	adds	r7, #88	; 0x58
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40021000 	.word	0x40021000

08002318 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b0a6      	sub	sp, #152	; 0x98
 800231c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800231e:	1d3b      	adds	r3, r7, #4
 8002320:	2294      	movs	r2, #148	; 0x94
 8002322:	2100      	movs	r1, #0
 8002324:	4618      	mov	r0, r3
 8002326:	f008 fa11 	bl	800a74c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 800232a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800232e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002330:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002334:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002338:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800233c:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800233e:	2301      	movs	r3, #1
 8002340:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002342:	2301      	movs	r3, #1
 8002344:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002346:	2318      	movs	r3, #24
 8002348:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800234a:	2302      	movs	r3, #2
 800234c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800234e:	2302      	movs	r3, #2
 8002350:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002352:	2302      	movs	r3, #2
 8002354:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8002356:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 800235a:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800235c:	1d3b      	adds	r3, r7, #4
 800235e:	4618      	mov	r0, r3
 8002360:	f005 fd3e 	bl	8007de0 <HAL_RCCEx_PeriphCLKConfig>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800236a:	f000 fec9 	bl	8003100 <Error_Handler>
  }
}
 800236e:	bf00      	nop
 8002370:	3798      	adds	r7, #152	; 0x98
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800237e:	463b      	mov	r3, r7
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	609a      	str	r2, [r3, #8]
 8002388:	60da      	str	r2, [r3, #12]
 800238a:	611a      	str	r2, [r3, #16]
 800238c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800238e:	4b29      	ldr	r3, [pc, #164]	; (8002434 <MX_ADC1_Init+0xbc>)
 8002390:	4a29      	ldr	r2, [pc, #164]	; (8002438 <MX_ADC1_Init+0xc0>)
 8002392:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002394:	4b27      	ldr	r3, [pc, #156]	; (8002434 <MX_ADC1_Init+0xbc>)
 8002396:	2200      	movs	r2, #0
 8002398:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800239a:	4b26      	ldr	r3, [pc, #152]	; (8002434 <MX_ADC1_Init+0xbc>)
 800239c:	2200      	movs	r2, #0
 800239e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023a0:	4b24      	ldr	r3, [pc, #144]	; (8002434 <MX_ADC1_Init+0xbc>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80023a6:	4b23      	ldr	r3, [pc, #140]	; (8002434 <MX_ADC1_Init+0xbc>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80023ac:	4b21      	ldr	r3, [pc, #132]	; (8002434 <MX_ADC1_Init+0xbc>)
 80023ae:	2204      	movs	r2, #4
 80023b0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80023b2:	4b20      	ldr	r3, [pc, #128]	; (8002434 <MX_ADC1_Init+0xbc>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80023b8:	4b1e      	ldr	r3, [pc, #120]	; (8002434 <MX_ADC1_Init+0xbc>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80023be:	4b1d      	ldr	r3, [pc, #116]	; (8002434 <MX_ADC1_Init+0xbc>)
 80023c0:	2201      	movs	r2, #1
 80023c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80023c4:	4b1b      	ldr	r3, [pc, #108]	; (8002434 <MX_ADC1_Init+0xbc>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023cc:	4b19      	ldr	r3, [pc, #100]	; (8002434 <MX_ADC1_Init+0xbc>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80023d2:	4b18      	ldr	r3, [pc, #96]	; (8002434 <MX_ADC1_Init+0xbc>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80023d8:	4b16      	ldr	r3, [pc, #88]	; (8002434 <MX_ADC1_Init+0xbc>)
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80023e0:	4b14      	ldr	r3, [pc, #80]	; (8002434 <MX_ADC1_Init+0xbc>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80023e6:	4b13      	ldr	r3, [pc, #76]	; (8002434 <MX_ADC1_Init+0xbc>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80023ee:	4811      	ldr	r0, [pc, #68]	; (8002434 <MX_ADC1_Init+0xbc>)
 80023f0:	f001 fd94 	bl	8003f1c <HAL_ADC_Init>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80023fa:	f000 fe81 	bl	8003100 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80023fe:	4b0f      	ldr	r3, [pc, #60]	; (800243c <MX_ADC1_Init+0xc4>)
 8002400:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002402:	2306      	movs	r3, #6
 8002404:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002406:	2300      	movs	r3, #0
 8002408:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800240a:	237f      	movs	r3, #127	; 0x7f
 800240c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800240e:	2304      	movs	r3, #4
 8002410:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002416:	463b      	mov	r3, r7
 8002418:	4619      	mov	r1, r3
 800241a:	4806      	ldr	r0, [pc, #24]	; (8002434 <MX_ADC1_Init+0xbc>)
 800241c:	f001 fec4 	bl	80041a8 <HAL_ADC_ConfigChannel>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002426:	f000 fe6b 	bl	8003100 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800242a:	bf00      	nop
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20000dc4 	.word	0x20000dc4
 8002438:	50040000 	.word	0x50040000
 800243c:	04300002 	.word	0x04300002

08002440 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8002444:	4b18      	ldr	r3, [pc, #96]	; (80024a8 <MX_DFSDM1_Init+0x68>)
 8002446:	4a19      	ldr	r2, [pc, #100]	; (80024ac <MX_DFSDM1_Init+0x6c>)
 8002448:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 800244a:	4b17      	ldr	r3, [pc, #92]	; (80024a8 <MX_DFSDM1_Init+0x68>)
 800244c:	2201      	movs	r2, #1
 800244e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8002450:	4b15      	ldr	r3, [pc, #84]	; (80024a8 <MX_DFSDM1_Init+0x68>)
 8002452:	2200      	movs	r2, #0
 8002454:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8002456:	4b14      	ldr	r3, [pc, #80]	; (80024a8 <MX_DFSDM1_Init+0x68>)
 8002458:	2202      	movs	r2, #2
 800245a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800245c:	4b12      	ldr	r3, [pc, #72]	; (80024a8 <MX_DFSDM1_Init+0x68>)
 800245e:	2200      	movs	r2, #0
 8002460:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8002462:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <MX_DFSDM1_Init+0x68>)
 8002464:	2200      	movs	r2, #0
 8002466:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8002468:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <MX_DFSDM1_Init+0x68>)
 800246a:	2200      	movs	r2, #0
 800246c:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800246e:	4b0e      	ldr	r3, [pc, #56]	; (80024a8 <MX_DFSDM1_Init+0x68>)
 8002470:	2200      	movs	r2, #0
 8002472:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8002474:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <MX_DFSDM1_Init+0x68>)
 8002476:	2204      	movs	r2, #4
 8002478:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800247a:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <MX_DFSDM1_Init+0x68>)
 800247c:	2200      	movs	r2, #0
 800247e:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8002480:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <MX_DFSDM1_Init+0x68>)
 8002482:	2201      	movs	r2, #1
 8002484:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8002486:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <MX_DFSDM1_Init+0x68>)
 8002488:	2200      	movs	r2, #0
 800248a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <MX_DFSDM1_Init+0x68>)
 800248e:	2200      	movs	r2, #0
 8002490:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8002492:	4805      	ldr	r0, [pc, #20]	; (80024a8 <MX_DFSDM1_Init+0x68>)
 8002494:	f002 fb66 	bl	8004b64 <HAL_DFSDM_ChannelInit>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 800249e:	f000 fe2f 	bl	8003100 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000e2c 	.word	0x20000e2c
 80024ac:	40016040 	.word	0x40016040

080024b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80024b4:	4b1b      	ldr	r3, [pc, #108]	; (8002524 <MX_I2C1_Init+0x74>)
 80024b6:	4a1c      	ldr	r2, [pc, #112]	; (8002528 <MX_I2C1_Init+0x78>)
 80024b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80024ba:	4b1a      	ldr	r3, [pc, #104]	; (8002524 <MX_I2C1_Init+0x74>)
 80024bc:	f640 6214 	movw	r2, #3604	; 0xe14
 80024c0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80024c2:	4b18      	ldr	r3, [pc, #96]	; (8002524 <MX_I2C1_Init+0x74>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024c8:	4b16      	ldr	r3, [pc, #88]	; (8002524 <MX_I2C1_Init+0x74>)
 80024ca:	2201      	movs	r2, #1
 80024cc:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024ce:	4b15      	ldr	r3, [pc, #84]	; (8002524 <MX_I2C1_Init+0x74>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80024d4:	4b13      	ldr	r3, [pc, #76]	; (8002524 <MX_I2C1_Init+0x74>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80024da:	4b12      	ldr	r3, [pc, #72]	; (8002524 <MX_I2C1_Init+0x74>)
 80024dc:	2200      	movs	r2, #0
 80024de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024e0:	4b10      	ldr	r3, [pc, #64]	; (8002524 <MX_I2C1_Init+0x74>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024e6:	4b0f      	ldr	r3, [pc, #60]	; (8002524 <MX_I2C1_Init+0x74>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024ec:	480d      	ldr	r0, [pc, #52]	; (8002524 <MX_I2C1_Init+0x74>)
 80024ee:	f003 f8e7 	bl	80056c0 <HAL_I2C_Init>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80024f8:	f000 fe02 	bl	8003100 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80024fc:	2100      	movs	r1, #0
 80024fe:	4809      	ldr	r0, [pc, #36]	; (8002524 <MX_I2C1_Init+0x74>)
 8002500:	f003 ff23 	bl	800634a <HAL_I2CEx_ConfigAnalogFilter>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800250a:	f000 fdf9 	bl	8003100 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800250e:	2100      	movs	r1, #0
 8002510:	4804      	ldr	r0, [pc, #16]	; (8002524 <MX_I2C1_Init+0x74>)
 8002512:	f003 ff65 	bl	80063e0 <HAL_I2CEx_ConfigDigitalFilter>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800251c:	f000 fdf0 	bl	8003100 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002520:	bf00      	nop
 8002522:	bd80      	pop	{r7, pc}
 8002524:	20000e64 	.word	0x20000e64
 8002528:	40005400 	.word	0x40005400

0800252c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002530:	4b1b      	ldr	r3, [pc, #108]	; (80025a0 <MX_I2C2_Init+0x74>)
 8002532:	4a1c      	ldr	r2, [pc, #112]	; (80025a4 <MX_I2C2_Init+0x78>)
 8002534:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8002536:	4b1a      	ldr	r3, [pc, #104]	; (80025a0 <MX_I2C2_Init+0x74>)
 8002538:	f640 6214 	movw	r2, #3604	; 0xe14
 800253c:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800253e:	4b18      	ldr	r3, [pc, #96]	; (80025a0 <MX_I2C2_Init+0x74>)
 8002540:	2200      	movs	r2, #0
 8002542:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002544:	4b16      	ldr	r3, [pc, #88]	; (80025a0 <MX_I2C2_Init+0x74>)
 8002546:	2201      	movs	r2, #1
 8002548:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800254a:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <MX_I2C2_Init+0x74>)
 800254c:	2200      	movs	r2, #0
 800254e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002550:	4b13      	ldr	r3, [pc, #76]	; (80025a0 <MX_I2C2_Init+0x74>)
 8002552:	2200      	movs	r2, #0
 8002554:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002556:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <MX_I2C2_Init+0x74>)
 8002558:	2200      	movs	r2, #0
 800255a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800255c:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <MX_I2C2_Init+0x74>)
 800255e:	2200      	movs	r2, #0
 8002560:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002562:	4b0f      	ldr	r3, [pc, #60]	; (80025a0 <MX_I2C2_Init+0x74>)
 8002564:	2200      	movs	r2, #0
 8002566:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002568:	480d      	ldr	r0, [pc, #52]	; (80025a0 <MX_I2C2_Init+0x74>)
 800256a:	f003 f8a9 	bl	80056c0 <HAL_I2C_Init>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002574:	f000 fdc4 	bl	8003100 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002578:	2100      	movs	r1, #0
 800257a:	4809      	ldr	r0, [pc, #36]	; (80025a0 <MX_I2C2_Init+0x74>)
 800257c:	f003 fee5 	bl	800634a <HAL_I2CEx_ConfigAnalogFilter>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8002586:	f000 fdbb 	bl	8003100 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800258a:	2100      	movs	r1, #0
 800258c:	4804      	ldr	r0, [pc, #16]	; (80025a0 <MX_I2C2_Init+0x74>)
 800258e:	f003 ff27 	bl	80063e0 <HAL_I2CEx_ConfigDigitalFilter>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8002598:	f000 fdb2 	bl	8003100 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800259c:	bf00      	nop
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	20000eb8 	.word	0x20000eb8
 80025a4:	40005800 	.word	0x40005800

080025a8 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 80025ae:	1d3b      	adds	r3, r7, #4
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	60da      	str	r2, [r3, #12]
 80025ba:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80025bc:	4b23      	ldr	r3, [pc, #140]	; (800264c <MX_OCTOSPI1_Init+0xa4>)
 80025be:	4a24      	ldr	r2, [pc, #144]	; (8002650 <MX_OCTOSPI1_Init+0xa8>)
 80025c0:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80025c2:	4b22      	ldr	r3, [pc, #136]	; (800264c <MX_OCTOSPI1_Init+0xa4>)
 80025c4:	2201      	movs	r2, #1
 80025c6:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80025c8:	4b20      	ldr	r3, [pc, #128]	; (800264c <MX_OCTOSPI1_Init+0xa4>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 80025ce:	4b1f      	ldr	r3, [pc, #124]	; (800264c <MX_OCTOSPI1_Init+0xa4>)
 80025d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025d4:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 80025d6:	4b1d      	ldr	r3, [pc, #116]	; (800264c <MX_OCTOSPI1_Init+0xa4>)
 80025d8:	2220      	movs	r2, #32
 80025da:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 80025dc:	4b1b      	ldr	r3, [pc, #108]	; (800264c <MX_OCTOSPI1_Init+0xa4>)
 80025de:	2201      	movs	r2, #1
 80025e0:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80025e2:	4b1a      	ldr	r3, [pc, #104]	; (800264c <MX_OCTOSPI1_Init+0xa4>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80025e8:	4b18      	ldr	r3, [pc, #96]	; (800264c <MX_OCTOSPI1_Init+0xa4>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 80025ee:	4b17      	ldr	r3, [pc, #92]	; (800264c <MX_OCTOSPI1_Init+0xa4>)
 80025f0:	2201      	movs	r2, #1
 80025f2:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80025f4:	4b15      	ldr	r3, [pc, #84]	; (800264c <MX_OCTOSPI1_Init+0xa4>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80025fa:	4b14      	ldr	r3, [pc, #80]	; (800264c <MX_OCTOSPI1_Init+0xa4>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8002600:	4b12      	ldr	r3, [pc, #72]	; (800264c <MX_OCTOSPI1_Init+0xa4>)
 8002602:	2200      	movs	r2, #0
 8002604:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8002606:	4b11      	ldr	r3, [pc, #68]	; (800264c <MX_OCTOSPI1_Init+0xa4>)
 8002608:	2208      	movs	r2, #8
 800260a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 800260c:	480f      	ldr	r0, [pc, #60]	; (800264c <MX_OCTOSPI1_Init+0xa4>)
 800260e:	f003 ff33 	bl	8006478 <HAL_OSPI_Init>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8002618:	f000 fd72 	bl	8003100 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 800261c:	2301      	movs	r3, #1
 800261e:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8002620:	2301      	movs	r3, #1
 8002622:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8002624:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002628:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800262a:	1d3b      	adds	r3, r7, #4
 800262c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002630:	4619      	mov	r1, r3
 8002632:	4806      	ldr	r0, [pc, #24]	; (800264c <MX_OCTOSPI1_Init+0xa4>)
 8002634:	f003 ffda 	bl	80065ec <HAL_OSPIM_Config>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 800263e:	f000 fd5f 	bl	8003100 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8002642:	bf00      	nop
 8002644:	3718      	adds	r7, #24
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000f0c 	.word	0x20000f0c
 8002650:	a0001000 	.word	0xa0001000

08002654 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002658:	4b1b      	ldr	r3, [pc, #108]	; (80026c8 <MX_SPI1_Init+0x74>)
 800265a:	4a1c      	ldr	r2, [pc, #112]	; (80026cc <MX_SPI1_Init+0x78>)
 800265c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800265e:	4b1a      	ldr	r3, [pc, #104]	; (80026c8 <MX_SPI1_Init+0x74>)
 8002660:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002664:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002666:	4b18      	ldr	r3, [pc, #96]	; (80026c8 <MX_SPI1_Init+0x74>)
 8002668:	2200      	movs	r2, #0
 800266a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800266c:	4b16      	ldr	r3, [pc, #88]	; (80026c8 <MX_SPI1_Init+0x74>)
 800266e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002672:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002674:	4b14      	ldr	r3, [pc, #80]	; (80026c8 <MX_SPI1_Init+0x74>)
 8002676:	2200      	movs	r2, #0
 8002678:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800267a:	4b13      	ldr	r3, [pc, #76]	; (80026c8 <MX_SPI1_Init+0x74>)
 800267c:	2200      	movs	r2, #0
 800267e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002680:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <MX_SPI1_Init+0x74>)
 8002682:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002686:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002688:	4b0f      	ldr	r3, [pc, #60]	; (80026c8 <MX_SPI1_Init+0x74>)
 800268a:	2200      	movs	r2, #0
 800268c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800268e:	4b0e      	ldr	r3, [pc, #56]	; (80026c8 <MX_SPI1_Init+0x74>)
 8002690:	2200      	movs	r2, #0
 8002692:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002694:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <MX_SPI1_Init+0x74>)
 8002696:	2200      	movs	r2, #0
 8002698:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800269a:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <MX_SPI1_Init+0x74>)
 800269c:	2200      	movs	r2, #0
 800269e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80026a0:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <MX_SPI1_Init+0x74>)
 80026a2:	2207      	movs	r2, #7
 80026a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80026a6:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <MX_SPI1_Init+0x74>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80026ac:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <MX_SPI1_Init+0x74>)
 80026ae:	2208      	movs	r2, #8
 80026b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80026b2:	4805      	ldr	r0, [pc, #20]	; (80026c8 <MX_SPI1_Init+0x74>)
 80026b4:	f006 f8bc 	bl	8008830 <HAL_SPI_Init>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80026be:	f000 fd1f 	bl	8003100 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20000f5c 	.word	0x20000f5c
 80026cc:	40013000 	.word	0x40013000

080026d0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80026d4:	4b1b      	ldr	r3, [pc, #108]	; (8002744 <MX_SPI3_Init+0x74>)
 80026d6:	4a1c      	ldr	r2, [pc, #112]	; (8002748 <MX_SPI3_Init+0x78>)
 80026d8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80026da:	4b1a      	ldr	r3, [pc, #104]	; (8002744 <MX_SPI3_Init+0x74>)
 80026dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80026e0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80026e2:	4b18      	ldr	r3, [pc, #96]	; (8002744 <MX_SPI3_Init+0x74>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80026e8:	4b16      	ldr	r3, [pc, #88]	; (8002744 <MX_SPI3_Init+0x74>)
 80026ea:	f44f 7240 	mov.w	r2, #768	; 0x300
 80026ee:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026f0:	4b14      	ldr	r3, [pc, #80]	; (8002744 <MX_SPI3_Init+0x74>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026f6:	4b13      	ldr	r3, [pc, #76]	; (8002744 <MX_SPI3_Init+0x74>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80026fc:	4b11      	ldr	r3, [pc, #68]	; (8002744 <MX_SPI3_Init+0x74>)
 80026fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002702:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002704:	4b0f      	ldr	r3, [pc, #60]	; (8002744 <MX_SPI3_Init+0x74>)
 8002706:	2208      	movs	r2, #8
 8002708:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800270a:	4b0e      	ldr	r3, [pc, #56]	; (8002744 <MX_SPI3_Init+0x74>)
 800270c:	2200      	movs	r2, #0
 800270e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002710:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <MX_SPI3_Init+0x74>)
 8002712:	2200      	movs	r2, #0
 8002714:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002716:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <MX_SPI3_Init+0x74>)
 8002718:	2200      	movs	r2, #0
 800271a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800271c:	4b09      	ldr	r3, [pc, #36]	; (8002744 <MX_SPI3_Init+0x74>)
 800271e:	2207      	movs	r2, #7
 8002720:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002722:	4b08      	ldr	r3, [pc, #32]	; (8002744 <MX_SPI3_Init+0x74>)
 8002724:	2200      	movs	r2, #0
 8002726:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002728:	4b06      	ldr	r3, [pc, #24]	; (8002744 <MX_SPI3_Init+0x74>)
 800272a:	2208      	movs	r2, #8
 800272c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800272e:	4805      	ldr	r0, [pc, #20]	; (8002744 <MX_SPI3_Init+0x74>)
 8002730:	f006 f87e 	bl	8008830 <HAL_SPI_Init>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800273a:	f000 fce1 	bl	8003100 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800273e:	bf00      	nop
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	20000fc0 	.word	0x20000fc0
 8002748:	40003c00 	.word	0x40003c00

0800274c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002750:	4b22      	ldr	r3, [pc, #136]	; (80027dc <MX_UART4_Init+0x90>)
 8002752:	4a23      	ldr	r2, [pc, #140]	; (80027e0 <MX_UART4_Init+0x94>)
 8002754:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002756:	4b21      	ldr	r3, [pc, #132]	; (80027dc <MX_UART4_Init+0x90>)
 8002758:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800275c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800275e:	4b1f      	ldr	r3, [pc, #124]	; (80027dc <MX_UART4_Init+0x90>)
 8002760:	2200      	movs	r2, #0
 8002762:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002764:	4b1d      	ldr	r3, [pc, #116]	; (80027dc <MX_UART4_Init+0x90>)
 8002766:	2200      	movs	r2, #0
 8002768:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800276a:	4b1c      	ldr	r3, [pc, #112]	; (80027dc <MX_UART4_Init+0x90>)
 800276c:	2200      	movs	r2, #0
 800276e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002770:	4b1a      	ldr	r3, [pc, #104]	; (80027dc <MX_UART4_Init+0x90>)
 8002772:	220c      	movs	r2, #12
 8002774:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002776:	4b19      	ldr	r3, [pc, #100]	; (80027dc <MX_UART4_Init+0x90>)
 8002778:	2200      	movs	r2, #0
 800277a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800277c:	4b17      	ldr	r3, [pc, #92]	; (80027dc <MX_UART4_Init+0x90>)
 800277e:	2200      	movs	r2, #0
 8002780:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002782:	4b16      	ldr	r3, [pc, #88]	; (80027dc <MX_UART4_Init+0x90>)
 8002784:	2200      	movs	r2, #0
 8002786:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002788:	4b14      	ldr	r3, [pc, #80]	; (80027dc <MX_UART4_Init+0x90>)
 800278a:	2200      	movs	r2, #0
 800278c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800278e:	4b13      	ldr	r3, [pc, #76]	; (80027dc <MX_UART4_Init+0x90>)
 8002790:	2200      	movs	r2, #0
 8002792:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002794:	4811      	ldr	r0, [pc, #68]	; (80027dc <MX_UART4_Init+0x90>)
 8002796:	f006 fe97 	bl	80094c8 <HAL_UART_Init>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80027a0:	f000 fcae 	bl	8003100 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027a4:	2100      	movs	r1, #0
 80027a6:	480d      	ldr	r0, [pc, #52]	; (80027dc <MX_UART4_Init+0x90>)
 80027a8:	f007 ff05 	bl	800a5b6 <HAL_UARTEx_SetTxFifoThreshold>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80027b2:	f000 fca5 	bl	8003100 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027b6:	2100      	movs	r1, #0
 80027b8:	4808      	ldr	r0, [pc, #32]	; (80027dc <MX_UART4_Init+0x90>)
 80027ba:	f007 ff3a 	bl	800a632 <HAL_UARTEx_SetRxFifoThreshold>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80027c4:	f000 fc9c 	bl	8003100 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80027c8:	4804      	ldr	r0, [pc, #16]	; (80027dc <MX_UART4_Init+0x90>)
 80027ca:	f007 febb 	bl	800a544 <HAL_UARTEx_DisableFifoMode>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80027d4:	f000 fc94 	bl	8003100 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80027d8:	bf00      	nop
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	20001084 	.word	0x20001084
 80027e0:	40004c00 	.word	0x40004c00

080027e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027e8:	4b22      	ldr	r3, [pc, #136]	; (8002874 <MX_USART1_UART_Init+0x90>)
 80027ea:	4a23      	ldr	r2, [pc, #140]	; (8002878 <MX_USART1_UART_Init+0x94>)
 80027ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80027ee:	4b21      	ldr	r3, [pc, #132]	; (8002874 <MX_USART1_UART_Init+0x90>)
 80027f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027f6:	4b1f      	ldr	r3, [pc, #124]	; (8002874 <MX_USART1_UART_Init+0x90>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027fc:	4b1d      	ldr	r3, [pc, #116]	; (8002874 <MX_USART1_UART_Init+0x90>)
 80027fe:	2200      	movs	r2, #0
 8002800:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002802:	4b1c      	ldr	r3, [pc, #112]	; (8002874 <MX_USART1_UART_Init+0x90>)
 8002804:	2200      	movs	r2, #0
 8002806:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002808:	4b1a      	ldr	r3, [pc, #104]	; (8002874 <MX_USART1_UART_Init+0x90>)
 800280a:	220c      	movs	r2, #12
 800280c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800280e:	4b19      	ldr	r3, [pc, #100]	; (8002874 <MX_USART1_UART_Init+0x90>)
 8002810:	2200      	movs	r2, #0
 8002812:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002814:	4b17      	ldr	r3, [pc, #92]	; (8002874 <MX_USART1_UART_Init+0x90>)
 8002816:	2200      	movs	r2, #0
 8002818:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800281a:	4b16      	ldr	r3, [pc, #88]	; (8002874 <MX_USART1_UART_Init+0x90>)
 800281c:	2200      	movs	r2, #0
 800281e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002820:	4b14      	ldr	r3, [pc, #80]	; (8002874 <MX_USART1_UART_Init+0x90>)
 8002822:	2200      	movs	r2, #0
 8002824:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002826:	4b13      	ldr	r3, [pc, #76]	; (8002874 <MX_USART1_UART_Init+0x90>)
 8002828:	2200      	movs	r2, #0
 800282a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800282c:	4811      	ldr	r0, [pc, #68]	; (8002874 <MX_USART1_UART_Init+0x90>)
 800282e:	f006 fe4b 	bl	80094c8 <HAL_UART_Init>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002838:	f000 fc62 	bl	8003100 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800283c:	2100      	movs	r1, #0
 800283e:	480d      	ldr	r0, [pc, #52]	; (8002874 <MX_USART1_UART_Init+0x90>)
 8002840:	f007 feb9 	bl	800a5b6 <HAL_UARTEx_SetTxFifoThreshold>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800284a:	f000 fc59 	bl	8003100 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800284e:	2100      	movs	r1, #0
 8002850:	4808      	ldr	r0, [pc, #32]	; (8002874 <MX_USART1_UART_Init+0x90>)
 8002852:	f007 feee 	bl	800a632 <HAL_UARTEx_SetRxFifoThreshold>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800285c:	f000 fc50 	bl	8003100 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002860:	4804      	ldr	r0, [pc, #16]	; (8002874 <MX_USART1_UART_Init+0x90>)
 8002862:	f007 fe6f 	bl	800a544 <HAL_UARTEx_DisableFifoMode>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800286c:	f000 fc48 	bl	8003100 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002870:	bf00      	nop
 8002872:	bd80      	pop	{r7, pc}
 8002874:	20001118 	.word	0x20001118
 8002878:	40013800 	.word	0x40013800

0800287c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002880:	4b23      	ldr	r3, [pc, #140]	; (8002910 <MX_USART2_UART_Init+0x94>)
 8002882:	4a24      	ldr	r2, [pc, #144]	; (8002914 <MX_USART2_UART_Init+0x98>)
 8002884:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002886:	4b22      	ldr	r3, [pc, #136]	; (8002910 <MX_USART2_UART_Init+0x94>)
 8002888:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800288c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800288e:	4b20      	ldr	r3, [pc, #128]	; (8002910 <MX_USART2_UART_Init+0x94>)
 8002890:	2200      	movs	r2, #0
 8002892:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002894:	4b1e      	ldr	r3, [pc, #120]	; (8002910 <MX_USART2_UART_Init+0x94>)
 8002896:	2200      	movs	r2, #0
 8002898:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800289a:	4b1d      	ldr	r3, [pc, #116]	; (8002910 <MX_USART2_UART_Init+0x94>)
 800289c:	2200      	movs	r2, #0
 800289e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028a0:	4b1b      	ldr	r3, [pc, #108]	; (8002910 <MX_USART2_UART_Init+0x94>)
 80028a2:	220c      	movs	r2, #12
 80028a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80028a6:	4b1a      	ldr	r3, [pc, #104]	; (8002910 <MX_USART2_UART_Init+0x94>)
 80028a8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80028ac:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028ae:	4b18      	ldr	r3, [pc, #96]	; (8002910 <MX_USART2_UART_Init+0x94>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028b4:	4b16      	ldr	r3, [pc, #88]	; (8002910 <MX_USART2_UART_Init+0x94>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028ba:	4b15      	ldr	r3, [pc, #84]	; (8002910 <MX_USART2_UART_Init+0x94>)
 80028bc:	2200      	movs	r2, #0
 80028be:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028c0:	4b13      	ldr	r3, [pc, #76]	; (8002910 <MX_USART2_UART_Init+0x94>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028c6:	4812      	ldr	r0, [pc, #72]	; (8002910 <MX_USART2_UART_Init+0x94>)
 80028c8:	f006 fdfe 	bl	80094c8 <HAL_UART_Init>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80028d2:	f000 fc15 	bl	8003100 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028d6:	2100      	movs	r1, #0
 80028d8:	480d      	ldr	r0, [pc, #52]	; (8002910 <MX_USART2_UART_Init+0x94>)
 80028da:	f007 fe6c 	bl	800a5b6 <HAL_UARTEx_SetTxFifoThreshold>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 80028e4:	f000 fc0c 	bl	8003100 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028e8:	2100      	movs	r1, #0
 80028ea:	4809      	ldr	r0, [pc, #36]	; (8002910 <MX_USART2_UART_Init+0x94>)
 80028ec:	f007 fea1 	bl	800a632 <HAL_UARTEx_SetRxFifoThreshold>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 80028f6:	f000 fc03 	bl	8003100 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80028fa:	4805      	ldr	r0, [pc, #20]	; (8002910 <MX_USART2_UART_Init+0x94>)
 80028fc:	f007 fe22 	bl	800a544 <HAL_UARTEx_DisableFifoMode>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8002906:	f000 fbfb 	bl	8003100 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800290a:	bf00      	nop
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	200011ac 	.word	0x200011ac
 8002914:	40004400 	.word	0x40004400

08002918 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800291c:	4b22      	ldr	r3, [pc, #136]	; (80029a8 <MX_USART3_UART_Init+0x90>)
 800291e:	4a23      	ldr	r2, [pc, #140]	; (80029ac <MX_USART3_UART_Init+0x94>)
 8002920:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002922:	4b21      	ldr	r3, [pc, #132]	; (80029a8 <MX_USART3_UART_Init+0x90>)
 8002924:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002928:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800292a:	4b1f      	ldr	r3, [pc, #124]	; (80029a8 <MX_USART3_UART_Init+0x90>)
 800292c:	2200      	movs	r2, #0
 800292e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002930:	4b1d      	ldr	r3, [pc, #116]	; (80029a8 <MX_USART3_UART_Init+0x90>)
 8002932:	2200      	movs	r2, #0
 8002934:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002936:	4b1c      	ldr	r3, [pc, #112]	; (80029a8 <MX_USART3_UART_Init+0x90>)
 8002938:	2200      	movs	r2, #0
 800293a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800293c:	4b1a      	ldr	r3, [pc, #104]	; (80029a8 <MX_USART3_UART_Init+0x90>)
 800293e:	220c      	movs	r2, #12
 8002940:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002942:	4b19      	ldr	r3, [pc, #100]	; (80029a8 <MX_USART3_UART_Init+0x90>)
 8002944:	2200      	movs	r2, #0
 8002946:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002948:	4b17      	ldr	r3, [pc, #92]	; (80029a8 <MX_USART3_UART_Init+0x90>)
 800294a:	2200      	movs	r2, #0
 800294c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800294e:	4b16      	ldr	r3, [pc, #88]	; (80029a8 <MX_USART3_UART_Init+0x90>)
 8002950:	2200      	movs	r2, #0
 8002952:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002954:	4b14      	ldr	r3, [pc, #80]	; (80029a8 <MX_USART3_UART_Init+0x90>)
 8002956:	2200      	movs	r2, #0
 8002958:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800295a:	4b13      	ldr	r3, [pc, #76]	; (80029a8 <MX_USART3_UART_Init+0x90>)
 800295c:	2200      	movs	r2, #0
 800295e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002960:	4811      	ldr	r0, [pc, #68]	; (80029a8 <MX_USART3_UART_Init+0x90>)
 8002962:	f006 fdb1 	bl	80094c8 <HAL_UART_Init>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800296c:	f000 fbc8 	bl	8003100 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002970:	2100      	movs	r1, #0
 8002972:	480d      	ldr	r0, [pc, #52]	; (80029a8 <MX_USART3_UART_Init+0x90>)
 8002974:	f007 fe1f 	bl	800a5b6 <HAL_UARTEx_SetTxFifoThreshold>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800297e:	f000 fbbf 	bl	8003100 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002982:	2100      	movs	r1, #0
 8002984:	4808      	ldr	r0, [pc, #32]	; (80029a8 <MX_USART3_UART_Init+0x90>)
 8002986:	f007 fe54 	bl	800a632 <HAL_UARTEx_SetRxFifoThreshold>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002990:	f000 fbb6 	bl	8003100 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002994:	4804      	ldr	r0, [pc, #16]	; (80029a8 <MX_USART3_UART_Init+0x90>)
 8002996:	f007 fdd5 	bl	800a544 <HAL_UARTEx_DisableFifoMode>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80029a0:	f000 fbae 	bl	8003100 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80029a4:	bf00      	nop
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	20001240 	.word	0x20001240
 80029ac:	40004800 	.word	0x40004800

080029b0 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80029b4:	bf00      	nop
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
	...

080029c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80029c6:	4b1c      	ldr	r3, [pc, #112]	; (8002a38 <MX_DMA_Init+0x78>)
 80029c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ca:	4a1b      	ldr	r2, [pc, #108]	; (8002a38 <MX_DMA_Init+0x78>)
 80029cc:	f043 0304 	orr.w	r3, r3, #4
 80029d0:	6493      	str	r3, [r2, #72]	; 0x48
 80029d2:	4b19      	ldr	r3, [pc, #100]	; (8002a38 <MX_DMA_Init+0x78>)
 80029d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029d6:	f003 0304 	and.w	r3, r3, #4
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80029de:	4b16      	ldr	r3, [pc, #88]	; (8002a38 <MX_DMA_Init+0x78>)
 80029e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029e2:	4a15      	ldr	r2, [pc, #84]	; (8002a38 <MX_DMA_Init+0x78>)
 80029e4:	f043 0301 	orr.w	r3, r3, #1
 80029e8:	6493      	str	r3, [r2, #72]	; 0x48
 80029ea:	4b13      	ldr	r3, [pc, #76]	; (8002a38 <MX_DMA_Init+0x78>)
 80029ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	60bb      	str	r3, [r7, #8]
 80029f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80029f6:	4b10      	ldr	r3, [pc, #64]	; (8002a38 <MX_DMA_Init+0x78>)
 80029f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029fa:	4a0f      	ldr	r2, [pc, #60]	; (8002a38 <MX_DMA_Init+0x78>)
 80029fc:	f043 0302 	orr.w	r3, r3, #2
 8002a00:	6493      	str	r3, [r2, #72]	; 0x48
 8002a02:	4b0d      	ldr	r3, [pc, #52]	; (8002a38 <MX_DMA_Init+0x78>)
 8002a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	607b      	str	r3, [r7, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002a0e:	2200      	movs	r2, #0
 8002a10:	2100      	movs	r1, #0
 8002a12:	200b      	movs	r0, #11
 8002a14:	f002 f87c 	bl	8004b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002a18:	200b      	movs	r0, #11
 8002a1a:	f002 f895 	bl	8004b48 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 6, 0);
 8002a1e:	2200      	movs	r2, #0
 8002a20:	2106      	movs	r1, #6
 8002a22:	2038      	movs	r0, #56	; 0x38
 8002a24:	f002 f874 	bl	8004b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8002a28:	2038      	movs	r0, #56	; 0x38
 8002a2a:	f002 f88d 	bl	8004b48 <HAL_NVIC_EnableIRQ>

}
 8002a2e:	bf00      	nop
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40021000 	.word	0x40021000

08002a3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b08c      	sub	sp, #48	; 0x30
 8002a40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a42:	f107 031c 	add.w	r3, r7, #28
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	605a      	str	r2, [r3, #4]
 8002a4c:	609a      	str	r2, [r3, #8]
 8002a4e:	60da      	str	r2, [r3, #12]
 8002a50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a52:	4b9e      	ldr	r3, [pc, #632]	; (8002ccc <MX_GPIO_Init+0x290>)
 8002a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a56:	4a9d      	ldr	r2, [pc, #628]	; (8002ccc <MX_GPIO_Init+0x290>)
 8002a58:	f043 0310 	orr.w	r3, r3, #16
 8002a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a5e:	4b9b      	ldr	r3, [pc, #620]	; (8002ccc <MX_GPIO_Init+0x290>)
 8002a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a62:	f003 0310 	and.w	r3, r3, #16
 8002a66:	61bb      	str	r3, [r7, #24]
 8002a68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a6a:	4b98      	ldr	r3, [pc, #608]	; (8002ccc <MX_GPIO_Init+0x290>)
 8002a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a6e:	4a97      	ldr	r2, [pc, #604]	; (8002ccc <MX_GPIO_Init+0x290>)
 8002a70:	f043 0304 	orr.w	r3, r3, #4
 8002a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a76:	4b95      	ldr	r3, [pc, #596]	; (8002ccc <MX_GPIO_Init+0x290>)
 8002a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7a:	f003 0304 	and.w	r3, r3, #4
 8002a7e:	617b      	str	r3, [r7, #20]
 8002a80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a82:	4b92      	ldr	r3, [pc, #584]	; (8002ccc <MX_GPIO_Init+0x290>)
 8002a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a86:	4a91      	ldr	r2, [pc, #580]	; (8002ccc <MX_GPIO_Init+0x290>)
 8002a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a8e:	4b8f      	ldr	r3, [pc, #572]	; (8002ccc <MX_GPIO_Init+0x290>)
 8002a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a96:	613b      	str	r3, [r7, #16]
 8002a98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9a:	4b8c      	ldr	r3, [pc, #560]	; (8002ccc <MX_GPIO_Init+0x290>)
 8002a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a9e:	4a8b      	ldr	r2, [pc, #556]	; (8002ccc <MX_GPIO_Init+0x290>)
 8002aa0:	f043 0301 	orr.w	r3, r3, #1
 8002aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aa6:	4b89      	ldr	r3, [pc, #548]	; (8002ccc <MX_GPIO_Init+0x290>)
 8002aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab2:	4b86      	ldr	r3, [pc, #536]	; (8002ccc <MX_GPIO_Init+0x290>)
 8002ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab6:	4a85      	ldr	r2, [pc, #532]	; (8002ccc <MX_GPIO_Init+0x290>)
 8002ab8:	f043 0302 	orr.w	r3, r3, #2
 8002abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002abe:	4b83      	ldr	r3, [pc, #524]	; (8002ccc <MX_GPIO_Init+0x290>)
 8002ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	60bb      	str	r3, [r7, #8]
 8002ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002aca:	4b80      	ldr	r3, [pc, #512]	; (8002ccc <MX_GPIO_Init+0x290>)
 8002acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ace:	4a7f      	ldr	r2, [pc, #508]	; (8002ccc <MX_GPIO_Init+0x290>)
 8002ad0:	f043 0308 	orr.w	r3, r3, #8
 8002ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ad6:	4b7d      	ldr	r3, [pc, #500]	; (8002ccc <MX_GPIO_Init+0x290>)
 8002ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	607b      	str	r3, [r7, #4]
 8002ae0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f240 1105 	movw	r1, #261	; 0x105
 8002ae8:	4879      	ldr	r0, [pc, #484]	; (8002cd0 <MX_GPIO_Init+0x294>)
 8002aea:	f002 fdb9 	bl	8005660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8002aee:	2200      	movs	r2, #0
 8002af0:	f248 111c 	movw	r1, #33052	; 0x811c
 8002af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002af8:	f002 fdb2 	bl	8005660 <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8002afc:	2200      	movs	r2, #0
 8002afe:	f24f 0134 	movw	r1, #61492	; 0xf034
 8002b02:	4874      	ldr	r0, [pc, #464]	; (8002cd4 <MX_GPIO_Init+0x298>)
 8002b04:	f002 fdac 	bl	8005660 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f242 0183 	movw	r1, #8323	; 0x2083
 8002b0e:	4872      	ldr	r0, [pc, #456]	; (8002cd8 <MX_GPIO_Init+0x29c>)
 8002b10:	f002 fda6 	bl	8005660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8002b14:	2200      	movs	r2, #0
 8002b16:	f44f 7110 	mov.w	r1, #576	; 0x240
 8002b1a:	4870      	ldr	r0, [pc, #448]	; (8002cdc <MX_GPIO_Init+0x2a0>)
 8002b1c:	f002 fda0 	bl	8005660 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8002b20:	f240 1305 	movw	r3, #261	; 0x105
 8002b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b26:	2301      	movs	r3, #1
 8002b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b32:	f107 031c 	add.w	r3, r7, #28
 8002b36:	4619      	mov	r1, r3
 8002b38:	4865      	ldr	r0, [pc, #404]	; (8002cd0 <MX_GPIO_Init+0x294>)
 8002b3a:	f002 fbff 	bl	800533c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8002b3e:	237a      	movs	r3, #122	; 0x7a
 8002b40:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b42:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002b46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b4c:	f107 031c 	add.w	r3, r7, #28
 8002b50:	4619      	mov	r1, r3
 8002b52:	485f      	ldr	r0, [pc, #380]	; (8002cd0 <MX_GPIO_Init+0x294>)
 8002b54:	f002 fbf2 	bl	800533c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8002b58:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8002b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b5e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b68:	f107 031c 	add.w	r3, r7, #28
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	485b      	ldr	r0, [pc, #364]	; (8002cdc <MX_GPIO_Init+0x2a0>)
 8002b70:	f002 fbe4 	bl	800533c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8002b74:	f248 131c 	movw	r3, #33052	; 0x811c
 8002b78:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b82:	2300      	movs	r3, #0
 8002b84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b86:	f107 031c 	add.w	r3, r7, #28
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b90:	f002 fbd4 	bl	800533c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8002b94:	2301      	movs	r3, #1
 8002b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b98:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002b9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8002ba2:	f107 031c 	add.w	r3, r7, #28
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	484a      	ldr	r0, [pc, #296]	; (8002cd4 <MX_GPIO_Init+0x298>)
 8002baa:	f002 fbc7 	bl	800533c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8002bae:	2302      	movs	r3, #2
 8002bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8002bc2:	f107 031c 	add.w	r3, r7, #28
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4842      	ldr	r0, [pc, #264]	; (8002cd4 <MX_GPIO_Init+0x298>)
 8002bca:	f002 fbb7 	bl	800533c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 8002bce:	f24b 0334 	movw	r3, #45108	; 0xb034
 8002bd2:	61fb      	str	r3, [r7, #28]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be0:	f107 031c 	add.w	r3, r7, #28
 8002be4:	4619      	mov	r1, r3
 8002be6:	483b      	ldr	r0, [pc, #236]	; (8002cd4 <MX_GPIO_Init+0x298>)
 8002be8:	f002 fba8 	bl	800533c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8002bec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8002bfe:	f107 031c 	add.w	r3, r7, #28
 8002c02:	4619      	mov	r1, r3
 8002c04:	4833      	ldr	r0, [pc, #204]	; (8002cd4 <MX_GPIO_Init+0x298>)
 8002c06:	f002 fb99 	bl	800533c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8002c0a:	f64d 4304 	movw	r3, #56324	; 0xdc04
 8002c0e:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c10:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c16:	2300      	movs	r3, #0
 8002c18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c1a:	f107 031c 	add.w	r3, r7, #28
 8002c1e:	4619      	mov	r1, r3
 8002c20:	482d      	ldr	r0, [pc, #180]	; (8002cd8 <MX_GPIO_Init+0x29c>)
 8002c22:	f002 fb8b 	bl	800533c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8002c26:	f242 0383 	movw	r3, #8323	; 0x2083
 8002c2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c34:	2300      	movs	r3, #0
 8002c36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c38:	f107 031c 	add.w	r3, r7, #28
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4826      	ldr	r0, [pc, #152]	; (8002cd8 <MX_GPIO_Init+0x29c>)
 8002c40:	f002 fb7c 	bl	800533c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8002c44:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c52:	2300      	movs	r3, #0
 8002c54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c56:	f107 031c 	add.w	r3, r7, #28
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	481f      	ldr	r0, [pc, #124]	; (8002cdc <MX_GPIO_Init+0x2a0>)
 8002c5e:	f002 fb6d 	bl	800533c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8002c62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002c70:	f107 031c 	add.w	r3, r7, #28
 8002c74:	4619      	mov	r1, r3
 8002c76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c7a:	f002 fb5f 	bl	800533c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8002c7e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002c82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c84:	2302      	movs	r3, #2
 8002c86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002c90:	230a      	movs	r3, #10
 8002c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c94:	f107 031c 	add.w	r3, r7, #28
 8002c98:	4619      	mov	r1, r3
 8002c9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c9e:	f002 fb4d 	bl	800533c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	2017      	movs	r0, #23
 8002ca8:	f001 ff32 	bl	8004b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002cac:	2017      	movs	r0, #23
 8002cae:	f001 ff4b 	bl	8004b48 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	2106      	movs	r1, #6
 8002cb6:	2028      	movs	r0, #40	; 0x28
 8002cb8:	f001 ff2a 	bl	8004b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002cbc:	2028      	movs	r0, #40	; 0x28
 8002cbe:	f001 ff43 	bl	8004b48 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002cc2:	bf00      	nop
 8002cc4:	3730      	adds	r7, #48	; 0x30
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	48001000 	.word	0x48001000
 8002cd4:	48000400 	.word	0x48000400
 8002cd8:	48000c00 	.word	0x48000c00
 8002cdc:	48000800 	.word	0x48000800

08002ce0 <MyLED2_init>:

/* USER CODE BEGIN 4 */
static void MyLED2_init(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  //Configure the MODE register
  //01:general purpose output
  //MODER Bit 29 and Bit 28
  //Reset both bits 28 and 29 to 0
	GPIOB->MODER &=~(0x3 <<28);
 8002ce4:	4b16      	ldr	r3, [pc, #88]	; (8002d40 <MyLED2_init+0x60>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a15      	ldr	r2, [pc, #84]	; (8002d40 <MyLED2_init+0x60>)
 8002cea:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002cee:	6013      	str	r3, [r2, #0]
  //Set the values to 1
	GPIOB->MODER |=(0x1 <<28);
 8002cf0:	4b13      	ldr	r3, [pc, #76]	; (8002d40 <MyLED2_init+0x60>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a12      	ldr	r2, [pc, #72]	; (8002d40 <MyLED2_init+0x60>)
 8002cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cfa:	6013      	str	r3, [r2, #0]

  //Configure the output type register
  //0:Push-Pull
  //OTYPER Bit 14 to 0
	GPIOB->OTYPER &=~(1<<14);
 8002cfc:	4b10      	ldr	r3, [pc, #64]	; (8002d40 <MyLED2_init+0x60>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	4a0f      	ldr	r2, [pc, #60]	; (8002d40 <MyLED2_init+0x60>)
 8002d02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d06:	6053      	str	r3, [r2, #4]

  //Configure the speed register
  //11:Very high speed
  //OSPEEDR Bit 29 and Bit 28
  //Reset both bits 28 and 29 to 0
	GPIOB->OSPEEDR &=~(0x3 <<28);
 8002d08:	4b0d      	ldr	r3, [pc, #52]	; (8002d40 <MyLED2_init+0x60>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	4a0c      	ldr	r2, [pc, #48]	; (8002d40 <MyLED2_init+0x60>)
 8002d0e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002d12:	6093      	str	r3, [r2, #8]
  //Set the values to 1
	GPIOB->OSPEEDR |=(0x1 <<28);
 8002d14:	4b0a      	ldr	r3, [pc, #40]	; (8002d40 <MyLED2_init+0x60>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	4a09      	ldr	r2, [pc, #36]	; (8002d40 <MyLED2_init+0x60>)
 8002d1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d1e:	6093      	str	r3, [r2, #8]

  //Configure pull-up/pull-down register
  //00: no pull-up/pull-down
  //PUPDR Bit 29 and Bit 28
  //Reset both bits 28 and 29 to 0
	GPIOB->PUPDR &=~(0x3 <<28);
 8002d20:	4b07      	ldr	r3, [pc, #28]	; (8002d40 <MyLED2_init+0x60>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	4a06      	ldr	r2, [pc, #24]	; (8002d40 <MyLED2_init+0x60>)
 8002d26:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002d2a:	60d3      	str	r3, [r2, #12]
  //Set the values to 0
	GPIOB->PUPDR |=(0x0 <<28);
 8002d2c:	4b04      	ldr	r3, [pc, #16]	; (8002d40 <MyLED2_init+0x60>)
 8002d2e:	4a04      	ldr	r2, [pc, #16]	; (8002d40 <MyLED2_init+0x60>)
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	60d3      	str	r3, [r2, #12]

}
 8002d34:	bf00      	nop
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	48000400 	.word	0x48000400

08002d44 <MyButton_init>:

static void MyButton_init(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
  //Button is Port C, Pin 13, EXTI13
  //Configure SYSCLK
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d4a:	4b1d      	ldr	r3, [pc, #116]	; (8002dc0 <MyButton_init+0x7c>)
 8002d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d4e:	4a1c      	ldr	r2, [pc, #112]	; (8002dc0 <MyButton_init+0x7c>)
 8002d50:	f043 0301 	orr.w	r3, r3, #1
 8002d54:	6613      	str	r3, [r2, #96]	; 0x60
 8002d56:	4b1a      	ldr	r3, [pc, #104]	; (8002dc0 <MyButton_init+0x7c>)
 8002d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	607b      	str	r3, [r7, #4]
 8002d60:	687b      	ldr	r3, [r7, #4]

  //Configure the MODE register
  //00:input mode
  //MODER Bit 27 and Bit 26
  //Reset both bits 27 and 26 to 0
	GPIOC->MODER &=~(0x3 <<26);
 8002d62:	4b18      	ldr	r3, [pc, #96]	; (8002dc4 <MyButton_init+0x80>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a17      	ldr	r2, [pc, #92]	; (8002dc4 <MyButton_init+0x80>)
 8002d68:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002d6c:	6013      	str	r3, [r2, #0]

  //Configure pull-up/pull-down register
  //00: no pull-up/pull-down
  //PUPDR Bit 27 and Bit 26
  //Reset both bits 27 and 26 to 0
	GPIOC->PUPDR &=~(0x3 <<26);
 8002d6e:	4b15      	ldr	r3, [pc, #84]	; (8002dc4 <MyButton_init+0x80>)
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	4a14      	ldr	r2, [pc, #80]	; (8002dc4 <MyButton_init+0x80>)
 8002d74:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002d78:	60d3      	str	r3, [r2, #12]
  //Set the values to 0
	GPIOC->PUPDR |=(0x0 <<26);
 8002d7a:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <MyButton_init+0x80>)
 8002d7c:	4a11      	ldr	r2, [pc, #68]	; (8002dc4 <MyButton_init+0x80>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	60d3      	str	r3, [r2, #12]

  //sysconfig Register
  //EXTI13, Choose port C
  //Configure the External Interrupt Configuration Register
  //SYSCFG_EXTICR4 :only 2nd bit in EXTICR[3] is set to 1
	SYSCFG->EXTICR[3]|=(0x1<<5);
 8002d82:	4b11      	ldr	r3, [pc, #68]	; (8002dc8 <MyButton_init+0x84>)
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	4a10      	ldr	r2, [pc, #64]	; (8002dc8 <MyButton_init+0x84>)
 8002d88:	f043 0320 	orr.w	r3, r3, #32
 8002d8c:	6153      	str	r3, [r2, #20]

  //Configure the falling trigger selection register
  //EXTI_FTSR
	EXTI->FTSR1 |=(0x1 <<13) ;
 8002d8e:	4b0f      	ldr	r3, [pc, #60]	; (8002dcc <MyButton_init+0x88>)
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	4a0e      	ldr	r2, [pc, #56]	; (8002dcc <MyButton_init+0x88>)
 8002d94:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d98:	60d3      	str	r3, [r2, #12]

  //Configure the Interrupt Mask Register
  //EXTI_IMR
	EXTI->IMR1 |=(0x1 <<13);
 8002d9a:	4b0c      	ldr	r3, [pc, #48]	; (8002dcc <MyButton_init+0x88>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a0b      	ldr	r2, [pc, #44]	; (8002dcc <MyButton_init+0x88>)
 8002da0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002da4:	6013      	str	r3, [r2, #0]

  //Configure NVIC Set Enable Register
  //NVIC_ISER
  //NVIC->ISER[] Register no. & location based on position
  //NVIC->ISER[(((uint32_t)EXTI15_10_IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)EXTI15_10_IRQn) & 0x1FUL));
	NVIC->ISER[1] |= (0x1 << 8);
 8002da6:	4b0a      	ldr	r3, [pc, #40]	; (8002dd0 <MyButton_init+0x8c>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	4a09      	ldr	r2, [pc, #36]	; (8002dd0 <MyButton_init+0x8c>)
 8002dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db0:	6053      	str	r3, [r2, #4]
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	48000800 	.word	0x48000800
 8002dc8:	40010000 	.word	0x40010000
 8002dcc:	40010400 	.word	0x40010400
 8002dd0:	e000e100 	.word	0xe000e100

08002dd4 <MyUART1_init>:

static void MyUART1_init(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
	//configure UART1 manually excluding Baud Rate Register
	//configuring M bits-Bits 12,28 to 0,0 for 1 start bit, 8 data bits, n stop bits in USART_CR1 register
	huart1.Instance->CR1 &=~(0x1 <<12);
 8002dd8:	4b22      	ldr	r3, [pc, #136]	; (8002e64 <MyUART1_init+0x90>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	4b21      	ldr	r3, [pc, #132]	; (8002e64 <MyUART1_init+0x90>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002de6:	601a      	str	r2, [r3, #0]
	huart1.Instance->CR1 &=~(0x1 <<28);
 8002de8:	4b1e      	ldr	r3, [pc, #120]	; (8002e64 <MyUART1_init+0x90>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	4b1d      	ldr	r3, [pc, #116]	; (8002e64 <MyUART1_init+0x90>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002df6:	601a      	str	r2, [r3, #0]
	//configuring Bit 15 to 1 for oversampling by 8 in USART_CR1 register
	huart1.Instance->CR1 |=(0x1 <<15);
 8002df8:	4b1a      	ldr	r3, [pc, #104]	; (8002e64 <MyUART1_init+0x90>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	4b19      	ldr	r3, [pc, #100]	; (8002e64 <MyUART1_init+0x90>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e06:	601a      	str	r2, [r3, #0]
	//configuring Bit 10 to 0 to disable parity control in USART_CR1 register
	huart1.Instance->CR1 &=~(0x1 <<10);
 8002e08:	4b16      	ldr	r3, [pc, #88]	; (8002e64 <MyUART1_init+0x90>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	4b15      	ldr	r3, [pc, #84]	; (8002e64 <MyUART1_init+0x90>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e16:	601a      	str	r2, [r3, #0]
	//configuring Bit 0 to 1 to enable UART in USART_CR1 register
	huart1.Instance->CR1 |=(0x1 <<0);
 8002e18:	4b12      	ldr	r3, [pc, #72]	; (8002e64 <MyUART1_init+0x90>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	4b11      	ldr	r3, [pc, #68]	; (8002e64 <MyUART1_init+0x90>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0201 	orr.w	r2, r2, #1
 8002e26:	601a      	str	r2, [r3, #0]
	//configuring Bit 3 to 1 to enable Transmitter in USART_CR1 register
	huart1.Instance->CR1 |=(0x1 <<3);
 8002e28:	4b0e      	ldr	r3, [pc, #56]	; (8002e64 <MyUART1_init+0x90>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	4b0d      	ldr	r3, [pc, #52]	; (8002e64 <MyUART1_init+0x90>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0208 	orr.w	r2, r2, #8
 8002e36:	601a      	str	r2, [r3, #0]
	//configuring Bit 2 to 1 to enable Receiver in USART_CR1 register
	huart1.Instance->CR1 |=(0x1 <<2);
 8002e38:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <MyUART1_init+0x90>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <MyUART1_init+0x90>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0204 	orr.w	r2, r2, #4
 8002e46:	601a      	str	r2, [r3, #0]
	//configuring Bits 12,13 to 0,0 for 1 stop bit in USART_CR2 register
	huart1.Instance->CR2 &=(0x3 <<12);
 8002e48:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <MyUART1_init+0x90>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <MyUART1_init+0x90>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8002e56:	605a      	str	r2, [r3, #4]

}
 8002e58:	bf00      	nop
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	20001118 	.word	0x20001118

08002e68 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af02      	add	r7, sp, #8
 8002e6e:	4603      	mov	r3, r0
 8002e70:	80fb      	strh	r3, [r7, #6]
	//activate the message transmission once a button is pushed
	xTaskNotifyFromISR(pUART_SendMsg, 0, eNoAction, NULL);
 8002e72:	4b07      	ldr	r3, [pc, #28]	; (8002e90 <HAL_GPIO_EXTI_Callback+0x28>)
 8002e74:	6818      	ldr	r0, [r3, #0]
 8002e76:	2300      	movs	r3, #0
 8002e78:	9301      	str	r3, [sp, #4]
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	2300      	movs	r3, #0
 8002e80:	2200      	movs	r2, #0
 8002e82:	2100      	movs	r1, #0
 8002e84:	f7fe f8e6 	bl	8001054 <xTaskGenericNotifyFromISR>
}
 8002e88:	bf00      	nop
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	20000d50 	.word	0x20000d50

08002e94 <SOS_Transmit>:
static void SOS_Transmit(void *parameter)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  repeat = 2;
 8002e9c:	4b36      	ldr	r3, [pc, #216]	; (8002f78 <SOS_Transmit+0xe4>)
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	701a      	strb	r2, [r3, #0]
	      //while(repeat>0)
	      while(1)
		  {

	        //sending 's'
	        for(int i=0; i<3; i++)
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	e016      	b.n	8002ed6 <SOS_Transmit+0x42>
	           {
		        //turning up the led for a dot
		        //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET); or
		        //write a 1 to Bit 14 of GPIOB ODR(output data register)
		          GPIOB->ODR |=(1<<14);
 8002ea8:	4b34      	ldr	r3, [pc, #208]	; (8002f7c <SOS_Transmit+0xe8>)
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	4a33      	ldr	r2, [pc, #204]	; (8002f7c <SOS_Transmit+0xe8>)
 8002eae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eb2:	6153      	str	r3, [r2, #20]
		          //HAL_Delay(300);
		          vTaskDelay(300);
 8002eb4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002eb8:	f7fd fd0e 	bl	80008d8 <vTaskDelay>

	            //turning the led off for spacing
		        //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET); or
		        //write a 0 to Bit 14 of GPIOB ODR(output data register)
		          GPIOB->ODR &=~(1<<14);
 8002ebc:	4b2f      	ldr	r3, [pc, #188]	; (8002f7c <SOS_Transmit+0xe8>)
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	4a2e      	ldr	r2, [pc, #184]	; (8002f7c <SOS_Transmit+0xe8>)
 8002ec2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ec6:	6153      	str	r3, [r2, #20]
		          vTaskDelay(300);
 8002ec8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002ecc:	f7fd fd04 	bl	80008d8 <vTaskDelay>
	        for(int i=0; i<3; i++)
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	613b      	str	r3, [r7, #16]
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	dde5      	ble.n	8002ea8 <SOS_Transmit+0x14>
	            }
	         //3 time units between characters
	         // HAL_Delay(300*2);
	         vTaskDelay(300*2);
 8002edc:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002ee0:	f7fd fcfa 	bl	80008d8 <vTaskDelay>

	         //sending 'o'
	         for(int i=0; i<3; i++)
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	e016      	b.n	8002f18 <SOS_Transmit+0x84>
	 	       {
	 		    //turning up the led for a dash
	 		    //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
		        //write a 1 to Bit 14 of GPIOB ODR(output data register)
		  	    GPIOB->ODR |=(1<<14);
 8002eea:	4b24      	ldr	r3, [pc, #144]	; (8002f7c <SOS_Transmit+0xe8>)
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	4a23      	ldr	r2, [pc, #140]	; (8002f7c <SOS_Transmit+0xe8>)
 8002ef0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ef4:	6153      	str	r3, [r2, #20]
	 		    //HAL_Delay(300*3);
		  	    vTaskDelay(300*3);
 8002ef6:	f44f 7061 	mov.w	r0, #900	; 0x384
 8002efa:	f7fd fced 	bl	80008d8 <vTaskDelay>
	 	        //turning the led off for spacing
	 		    //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
	 		    //write a 0 to Bit 14 of GPIOB ODR(output data register)
	 		    GPIOB->ODR &=~(1<<14);
 8002efe:	4b1f      	ldr	r3, [pc, #124]	; (8002f7c <SOS_Transmit+0xe8>)
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	4a1e      	ldr	r2, [pc, #120]	; (8002f7c <SOS_Transmit+0xe8>)
 8002f04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f08:	6153      	str	r3, [r2, #20]
	 		    //HAL_Delay(300);
	 		    vTaskDelay(300);
 8002f0a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002f0e:	f7fd fce3 	bl	80008d8 <vTaskDelay>
	         for(int i=0; i<3; i++)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	3301      	adds	r3, #1
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	dde5      	ble.n	8002eea <SOS_Transmit+0x56>
	 	       }
	 	     //3 time units between characters
	         //HAL_Delay(300*2);
	         vTaskDelay(300*2);
 8002f1e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002f22:	f7fd fcd9 	bl	80008d8 <vTaskDelay>
	         //sending 's'
	         for(int i=0; i<3; i++)
 8002f26:	2300      	movs	r3, #0
 8002f28:	617b      	str	r3, [r7, #20]
 8002f2a:	e016      	b.n	8002f5a <SOS_Transmit+0xc6>
	 		  {
	 			  //turning up the led for a dot
	 			  //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
		         //write a 1 to Bit 14 of GPIOB ODR(output data register)
		  		  GPIOB->ODR |=(1<<14);
 8002f2c:	4b13      	ldr	r3, [pc, #76]	; (8002f7c <SOS_Transmit+0xe8>)
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	4a12      	ldr	r2, [pc, #72]	; (8002f7c <SOS_Transmit+0xe8>)
 8002f32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f36:	6153      	str	r3, [r2, #20]
		       // HAL_Delay(300);
		  		vTaskDelay(300);
 8002f38:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002f3c:	f7fd fccc 	bl	80008d8 <vTaskDelay>
	 		      //turning the led off for spacing
	 			  //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
		          //write a 0 to Bit 14 of GPIOB ODR(output data register)
		          GPIOB->ODR &=~(1<<14);
 8002f40:	4b0e      	ldr	r3, [pc, #56]	; (8002f7c <SOS_Transmit+0xe8>)
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	4a0d      	ldr	r2, [pc, #52]	; (8002f7c <SOS_Transmit+0xe8>)
 8002f46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f4a:	6153      	str	r3, [r2, #20]
		        //HAL_Delay(300);
		          vTaskDelay(300);
 8002f4c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002f50:	f7fd fcc2 	bl	80008d8 <vTaskDelay>
	         for(int i=0; i<3; i++)
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	3301      	adds	r3, #1
 8002f58:	617b      	str	r3, [r7, #20]
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	dde5      	ble.n	8002f2c <SOS_Transmit+0x98>
	 		  }
	         //7 time units between words
	 	     // HAL_Delay(300*6);
	         vTaskDelay(300*6);
 8002f60:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8002f64:	f7fd fcb8 	bl	80008d8 <vTaskDelay>
             repeat--;
 8002f68:	4b03      	ldr	r3, [pc, #12]	; (8002f78 <SOS_Transmit+0xe4>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	b2da      	uxtb	r2, r3
 8002f70:	4b01      	ldr	r3, [pc, #4]	; (8002f78 <SOS_Transmit+0xe4>)
 8002f72:	701a      	strb	r2, [r3, #0]
	        for(int i=0; i<3; i++)
 8002f74:	e795      	b.n	8002ea2 <SOS_Transmit+0xe>
 8002f76:	bf00      	nop
 8002f78:	20000d54 	.word	0x20000d54
 8002f7c:	48000400 	.word	0x48000400

08002f80 <LCDDisplay>:

	  return tmp_f;
}

static void LCDDisplay(void *parameter)
{
 8002f80:	b5b0      	push	{r4, r5, r7, lr}
 8002f82:	b094      	sub	sp, #80	; 0x50
 8002f84:	af04      	add	r7, sp, #16
 8002f86:	6078      	str	r0, [r7, #4]
   char msg_lcd[] = "Hello World - Display on SPI TFT LCD from task!\n";
 8002f88:	4b45      	ldr	r3, [pc, #276]	; (80030a0 <LCDDisplay+0x120>)
 8002f8a:	f107 040c 	add.w	r4, r7, #12
 8002f8e:	461d      	mov	r5, r3
 8002f90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f9c:	682b      	ldr	r3, [r5, #0]
 8002f9e:	7023      	strb	r3, [r4, #0]

  ST7735_Init();
 8002fa0:	f7fe ffb0 	bl	8001f04 <ST7735_Init>
  ST7735_Backlight_On();
 8002fa4:	f7ff f8d8 	bl	8002158 <ST7735_Backlight_On>
  HAL_UART_Transmit(&huart1, "from LCDDisplay\n", strlen("from LCDDisplay\n"), 1000);
 8002fa8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fac:	2210      	movs	r2, #16
 8002fae:	493d      	ldr	r1, [pc, #244]	; (80030a4 <LCDDisplay+0x124>)
 8002fb0:	483d      	ldr	r0, [pc, #244]	; (80030a8 <LCDDisplay+0x128>)
 8002fb2:	f006 fad9 	bl	8009568 <HAL_UART_Transmit>

   while(1){
	   ST7735_FillScreen(ST7735_GREEN);
 8002fb6:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8002fba:	f7ff f8b1 	bl	8002120 <ST7735_FillScreen>
	   //ST7735_DrawString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor);
	   ST7735_DrawString(0, 0, msg_lcd, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002fbe:	4b3b      	ldr	r3, [pc, #236]	; (80030ac <LCDDisplay+0x12c>)
 8002fc0:	f107 010c 	add.w	r1, r7, #12
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	9202      	str	r2, [sp, #8]
 8002fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fcc:	9201      	str	r2, [sp, #4]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	9200      	str	r2, [sp, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	460a      	mov	r2, r1
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	2000      	movs	r0, #0
 8002fda:	f7fe ffb5 	bl	8001f48 <ST7735_DrawString>
	   vTaskDelay(5000);
 8002fde:	f241 3088 	movw	r0, #5000	; 0x1388
 8002fe2:	f7fd fc79 	bl	80008d8 <vTaskDelay>
	   ST7735_FillScreen(ST7735_BLUE);
 8002fe6:	201f      	movs	r0, #31
 8002fe8:	f7ff f89a 	bl	8002120 <ST7735_FillScreen>
	   ST7735_DrawString(0, 0, msg_lcd, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002fec:	4b2f      	ldr	r3, [pc, #188]	; (80030ac <LCDDisplay+0x12c>)
 8002fee:	f107 010c 	add.w	r1, r7, #12
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	9202      	str	r2, [sp, #8]
 8002ff6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ffa:	9201      	str	r2, [sp, #4]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	9200      	str	r2, [sp, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	460a      	mov	r2, r1
 8003004:	2100      	movs	r1, #0
 8003006:	2000      	movs	r0, #0
 8003008:	f7fe ff9e 	bl	8001f48 <ST7735_DrawString>
	   vTaskDelay(5000);
 800300c:	f241 3088 	movw	r0, #5000	; 0x1388
 8003010:	f7fd fc62 	bl	80008d8 <vTaskDelay>
	   ST7735_FillScreen(ST7735_RED);
 8003014:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8003018:	f7ff f882 	bl	8002120 <ST7735_FillScreen>
	   ST7735_DrawString(0, 0, msg_lcd, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800301c:	4b23      	ldr	r3, [pc, #140]	; (80030ac <LCDDisplay+0x12c>)
 800301e:	f107 010c 	add.w	r1, r7, #12
 8003022:	2200      	movs	r2, #0
 8003024:	9202      	str	r2, [sp, #8]
 8003026:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800302a:	9201      	str	r2, [sp, #4]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	9200      	str	r2, [sp, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	460a      	mov	r2, r1
 8003034:	2100      	movs	r1, #0
 8003036:	2000      	movs	r0, #0
 8003038:	f7fe ff86 	bl	8001f48 <ST7735_DrawString>
	   vTaskDelay(5000);
 800303c:	f241 3088 	movw	r0, #5000	; 0x1388
 8003040:	f7fd fc4a 	bl	80008d8 <vTaskDelay>

	   HAL_UART_Receive_DMA(&huart1, uart_receiveBuf, 16);
 8003044:	2210      	movs	r2, #16
 8003046:	491a      	ldr	r1, [pc, #104]	; (80030b0 <LCDDisplay+0x130>)
 8003048:	4817      	ldr	r0, [pc, #92]	; (80030a8 <LCDDisplay+0x128>)
 800304a:	f006 fb1d 	bl	8009688 <HAL_UART_Receive_DMA>
	   HAL_UART_Transmit(&huart1, "from LCDDisplay after DMA\n", strlen("from LCDDisplay after DMA\n"), 1000);
 800304e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003052:	221a      	movs	r2, #26
 8003054:	4917      	ldr	r1, [pc, #92]	; (80030b4 <LCDDisplay+0x134>)
 8003056:	4814      	ldr	r0, [pc, #80]	; (80030a8 <LCDDisplay+0x128>)
 8003058:	f006 fa86 	bl	8009568 <HAL_UART_Transmit>
	   while(uart_receiveComplete == 0);
 800305c:	bf00      	nop
 800305e:	4b16      	ldr	r3, [pc, #88]	; (80030b8 <LCDDisplay+0x138>)
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0fb      	beq.n	800305e <LCDDisplay+0xde>
	   uart_receiveComplete = 0;
 8003066:	4b14      	ldr	r3, [pc, #80]	; (80030b8 <LCDDisplay+0x138>)
 8003068:	2200      	movs	r2, #0
 800306a:	701a      	strb	r2, [r3, #0]
	   uart_receiveBuf[16] = '\0';
 800306c:	4b10      	ldr	r3, [pc, #64]	; (80030b0 <LCDDisplay+0x130>)
 800306e:	2200      	movs	r2, #0
 8003070:	741a      	strb	r2, [r3, #16]
	   ST7735_FillScreen(ST7735_MAGENTA);
 8003072:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8003076:	f7ff f853 	bl	8002120 <ST7735_FillScreen>
	   ST7735_DrawString(0, 0, uart_receiveBuf, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800307a:	4b0c      	ldr	r3, [pc, #48]	; (80030ac <LCDDisplay+0x12c>)
 800307c:	2200      	movs	r2, #0
 800307e:	9202      	str	r2, [sp, #8]
 8003080:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003084:	9201      	str	r2, [sp, #4]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	9200      	str	r2, [sp, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a08      	ldr	r2, [pc, #32]	; (80030b0 <LCDDisplay+0x130>)
 800308e:	2100      	movs	r1, #0
 8003090:	2000      	movs	r0, #0
 8003092:	f7fe ff59 	bl	8001f48 <ST7735_DrawString>
	   vTaskDelay(5000);
 8003096:	f241 3088 	movw	r0, #5000	; 0x1388
 800309a:	f7fd fc1d 	bl	80008d8 <vTaskDelay>
	   ST7735_FillScreen(ST7735_GREEN);
 800309e:	e78a      	b.n	8002fb6 <LCDDisplay+0x36>
 80030a0:	0800a874 	.word	0x0800a874
 80030a4:	0800a844 	.word	0x0800a844
 80030a8:	20001118 	.word	0x20001118
 80030ac:	20000008 	.word	0x20000008
 80030b0:	20000d5c 	.word	0x20000d5c
 80030b4:	0800a858 	.word	0x0800a858
 80030b8:	20000dc0 	.word	0x20000dc0

080030bc <HAL_UART_RxCpltCallback>:
   }
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
	xHigherPriorityTaskWoken = pdFALSE;

    xQueueSendFromISR(pUARTQueue, &receiveBuf, xHigherPriorityTaskWoken);
    HAL_UART_Receive_IT(&huart1, &receiveBuf, 1);*/

	uart_receiveComplete = 1;
 80030c4:	4b04      	ldr	r3, [pc, #16]	; (80030d8 <HAL_UART_RxCpltCallback+0x1c>)
 80030c6:	2201      	movs	r2, #1
 80030c8:	701a      	strb	r2, [r3, #0]
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	20000dc0 	.word	0x20000dc0

080030dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a04      	ldr	r2, [pc, #16]	; (80030fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d101      	bne.n	80030f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80030ee:	f000 fd31 	bl	8003b54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80030f2:	bf00      	nop
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40001000 	.word	0x40001000

08003100 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003104:	b672      	cpsid	i
}
 8003106:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003108:	e7fe      	b.n	8003108 <Error_Handler+0x8>
	...

0800310c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003112:	4b0f      	ldr	r3, [pc, #60]	; (8003150 <HAL_MspInit+0x44>)
 8003114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003116:	4a0e      	ldr	r2, [pc, #56]	; (8003150 <HAL_MspInit+0x44>)
 8003118:	f043 0301 	orr.w	r3, r3, #1
 800311c:	6613      	str	r3, [r2, #96]	; 0x60
 800311e:	4b0c      	ldr	r3, [pc, #48]	; (8003150 <HAL_MspInit+0x44>)
 8003120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	607b      	str	r3, [r7, #4]
 8003128:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800312a:	4b09      	ldr	r3, [pc, #36]	; (8003150 <HAL_MspInit+0x44>)
 800312c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312e:	4a08      	ldr	r2, [pc, #32]	; (8003150 <HAL_MspInit+0x44>)
 8003130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003134:	6593      	str	r3, [r2, #88]	; 0x58
 8003136:	4b06      	ldr	r3, [pc, #24]	; (8003150 <HAL_MspInit+0x44>)
 8003138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313e:	603b      	str	r3, [r7, #0]
 8003140:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	40021000 	.word	0x40021000

08003154 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b08a      	sub	sp, #40	; 0x28
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800315c:	f107 0314 	add.w	r3, r7, #20
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	605a      	str	r2, [r3, #4]
 8003166:	609a      	str	r2, [r3, #8]
 8003168:	60da      	str	r2, [r3, #12]
 800316a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a15      	ldr	r2, [pc, #84]	; (80031c8 <HAL_ADC_MspInit+0x74>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d123      	bne.n	80031be <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003176:	4b15      	ldr	r3, [pc, #84]	; (80031cc <HAL_ADC_MspInit+0x78>)
 8003178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800317a:	4a14      	ldr	r2, [pc, #80]	; (80031cc <HAL_ADC_MspInit+0x78>)
 800317c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003180:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003182:	4b12      	ldr	r3, [pc, #72]	; (80031cc <HAL_ADC_MspInit+0x78>)
 8003184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003186:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800318a:	613b      	str	r3, [r7, #16]
 800318c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800318e:	4b0f      	ldr	r3, [pc, #60]	; (80031cc <HAL_ADC_MspInit+0x78>)
 8003190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003192:	4a0e      	ldr	r2, [pc, #56]	; (80031cc <HAL_ADC_MspInit+0x78>)
 8003194:	f043 0304 	orr.w	r3, r3, #4
 8003198:	64d3      	str	r3, [r2, #76]	; 0x4c
 800319a:	4b0c      	ldr	r3, [pc, #48]	; (80031cc <HAL_ADC_MspInit+0x78>)
 800319c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800319e:	f003 0304 	and.w	r3, r3, #4
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80031a6:	233f      	movs	r3, #63	; 0x3f
 80031a8:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80031aa:	230b      	movs	r3, #11
 80031ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ae:	2300      	movs	r3, #0
 80031b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031b2:	f107 0314 	add.w	r3, r7, #20
 80031b6:	4619      	mov	r1, r3
 80031b8:	4805      	ldr	r0, [pc, #20]	; (80031d0 <HAL_ADC_MspInit+0x7c>)
 80031ba:	f002 f8bf 	bl	800533c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80031be:	bf00      	nop
 80031c0:	3728      	adds	r7, #40	; 0x28
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	50040000 	.word	0x50040000
 80031cc:	40021000 	.word	0x40021000
 80031d0:	48000800 	.word	0x48000800

080031d4 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b0ae      	sub	sp, #184	; 0xb8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031dc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	605a      	str	r2, [r3, #4]
 80031e6:	609a      	str	r2, [r3, #8]
 80031e8:	60da      	str	r2, [r3, #12]
 80031ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031ec:	f107 0310 	add.w	r3, r7, #16
 80031f0:	2294      	movs	r2, #148	; 0x94
 80031f2:	2100      	movs	r1, #0
 80031f4:	4618      	mov	r0, r3
 80031f6:	f007 faa9 	bl	800a74c <memset>
  if(DFSDM1_Init == 0)
 80031fa:	4b25      	ldr	r3, [pc, #148]	; (8003290 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d142      	bne.n	8003288 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8003202:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003206:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8003208:	2300      	movs	r3, #0
 800320a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800320e:	f107 0310 	add.w	r3, r7, #16
 8003212:	4618      	mov	r0, r3
 8003214:	f004 fde4 	bl	8007de0 <HAL_RCCEx_PeriphCLKConfig>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800321e:	f7ff ff6f 	bl	8003100 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8003222:	4b1c      	ldr	r3, [pc, #112]	; (8003294 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003226:	4a1b      	ldr	r2, [pc, #108]	; (8003294 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003228:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800322c:	6613      	str	r3, [r2, #96]	; 0x60
 800322e:	4b19      	ldr	r3, [pc, #100]	; (8003294 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003232:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003236:	60fb      	str	r3, [r7, #12]
 8003238:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800323a:	4b16      	ldr	r3, [pc, #88]	; (8003294 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800323c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800323e:	4a15      	ldr	r2, [pc, #84]	; (8003294 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003240:	f043 0310 	orr.w	r3, r3, #16
 8003244:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003246:	4b13      	ldr	r3, [pc, #76]	; (8003294 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800324a:	f003 0310 	and.w	r3, r3, #16
 800324e:	60bb      	str	r3, [r7, #8]
 8003250:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8003252:	f44f 7320 	mov.w	r3, #640	; 0x280
 8003256:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800325a:	2302      	movs	r3, #2
 800325c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003260:	2300      	movs	r3, #0
 8003262:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003266:	2300      	movs	r3, #0
 8003268:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800326c:	2306      	movs	r3, #6
 800326e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003272:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003276:	4619      	mov	r1, r3
 8003278:	4807      	ldr	r0, [pc, #28]	; (8003298 <HAL_DFSDM_ChannelMspInit+0xc4>)
 800327a:	f002 f85f 	bl	800533c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800327e:	4b04      	ldr	r3, [pc, #16]	; (8003290 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	3301      	adds	r3, #1
 8003284:	4a02      	ldr	r2, [pc, #8]	; (8003290 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8003286:	6013      	str	r3, [r2, #0]
  }

}
 8003288:	bf00      	nop
 800328a:	37b8      	adds	r7, #184	; 0xb8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	20001334 	.word	0x20001334
 8003294:	40021000 	.word	0x40021000
 8003298:	48001000 	.word	0x48001000

0800329c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b0b0      	sub	sp, #192	; 0xc0
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	605a      	str	r2, [r3, #4]
 80032ae:	609a      	str	r2, [r3, #8]
 80032b0:	60da      	str	r2, [r3, #12]
 80032b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032b4:	f107 0318 	add.w	r3, r7, #24
 80032b8:	2294      	movs	r2, #148	; 0x94
 80032ba:	2100      	movs	r1, #0
 80032bc:	4618      	mov	r0, r3
 80032be:	f007 fa45 	bl	800a74c <memset>
  if(hi2c->Instance==I2C1)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a4a      	ldr	r2, [pc, #296]	; (80033f0 <HAL_I2C_MspInit+0x154>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d13c      	bne.n	8003346 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80032cc:	2340      	movs	r3, #64	; 0x40
 80032ce:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80032d0:	2300      	movs	r3, #0
 80032d2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032d4:	f107 0318 	add.w	r3, r7, #24
 80032d8:	4618      	mov	r0, r3
 80032da:	f004 fd81 	bl	8007de0 <HAL_RCCEx_PeriphCLKConfig>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80032e4:	f7ff ff0c 	bl	8003100 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032e8:	4b42      	ldr	r3, [pc, #264]	; (80033f4 <HAL_I2C_MspInit+0x158>)
 80032ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ec:	4a41      	ldr	r2, [pc, #260]	; (80033f4 <HAL_I2C_MspInit+0x158>)
 80032ee:	f043 0302 	orr.w	r3, r3, #2
 80032f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032f4:	4b3f      	ldr	r3, [pc, #252]	; (80033f4 <HAL_I2C_MspInit+0x158>)
 80032f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	617b      	str	r3, [r7, #20]
 80032fe:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8003300:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003304:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003308:	2312      	movs	r3, #18
 800330a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800330e:	2301      	movs	r3, #1
 8003310:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003314:	2303      	movs	r3, #3
 8003316:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800331a:	2304      	movs	r3, #4
 800331c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003320:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003324:	4619      	mov	r1, r3
 8003326:	4834      	ldr	r0, [pc, #208]	; (80033f8 <HAL_I2C_MspInit+0x15c>)
 8003328:	f002 f808 	bl	800533c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800332c:	4b31      	ldr	r3, [pc, #196]	; (80033f4 <HAL_I2C_MspInit+0x158>)
 800332e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003330:	4a30      	ldr	r2, [pc, #192]	; (80033f4 <HAL_I2C_MspInit+0x158>)
 8003332:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003336:	6593      	str	r3, [r2, #88]	; 0x58
 8003338:	4b2e      	ldr	r3, [pc, #184]	; (80033f4 <HAL_I2C_MspInit+0x158>)
 800333a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003340:	613b      	str	r3, [r7, #16]
 8003342:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003344:	e050      	b.n	80033e8 <HAL_I2C_MspInit+0x14c>
  else if(hi2c->Instance==I2C2)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a2c      	ldr	r2, [pc, #176]	; (80033fc <HAL_I2C_MspInit+0x160>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d14b      	bne.n	80033e8 <HAL_I2C_MspInit+0x14c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003350:	2380      	movs	r3, #128	; 0x80
 8003352:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003354:	2300      	movs	r3, #0
 8003356:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003358:	f107 0318 	add.w	r3, r7, #24
 800335c:	4618      	mov	r0, r3
 800335e:	f004 fd3f 	bl	8007de0 <HAL_RCCEx_PeriphCLKConfig>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8003368:	f7ff feca 	bl	8003100 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800336c:	4b21      	ldr	r3, [pc, #132]	; (80033f4 <HAL_I2C_MspInit+0x158>)
 800336e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003370:	4a20      	ldr	r2, [pc, #128]	; (80033f4 <HAL_I2C_MspInit+0x158>)
 8003372:	f043 0302 	orr.w	r3, r3, #2
 8003376:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003378:	4b1e      	ldr	r3, [pc, #120]	; (80033f4 <HAL_I2C_MspInit+0x158>)
 800337a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	60fb      	str	r3, [r7, #12]
 8003382:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8003384:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003388:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800338c:	2312      	movs	r3, #18
 800338e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003392:	2301      	movs	r3, #1
 8003394:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003398:	2303      	movs	r3, #3
 800339a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800339e:	2304      	movs	r3, #4
 80033a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033a4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80033a8:	4619      	mov	r1, r3
 80033aa:	4813      	ldr	r0, [pc, #76]	; (80033f8 <HAL_I2C_MspInit+0x15c>)
 80033ac:	f001 ffc6 	bl	800533c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80033b0:	4b10      	ldr	r3, [pc, #64]	; (80033f4 <HAL_I2C_MspInit+0x158>)
 80033b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b4:	4a0f      	ldr	r2, [pc, #60]	; (80033f4 <HAL_I2C_MspInit+0x158>)
 80033b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033ba:	6593      	str	r3, [r2, #88]	; 0x58
 80033bc:	4b0d      	ldr	r3, [pc, #52]	; (80033f4 <HAL_I2C_MspInit+0x158>)
 80033be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033c4:	60bb      	str	r3, [r7, #8]
 80033c6:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 6, 0);
 80033c8:	2200      	movs	r2, #0
 80033ca:	2106      	movs	r1, #6
 80033cc:	2021      	movs	r0, #33	; 0x21
 80033ce:	f001 fb9f 	bl	8004b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80033d2:	2021      	movs	r0, #33	; 0x21
 80033d4:	f001 fbb8 	bl	8004b48 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 6, 0);
 80033d8:	2200      	movs	r2, #0
 80033da:	2106      	movs	r1, #6
 80033dc:	2022      	movs	r0, #34	; 0x22
 80033de:	f001 fb97 	bl	8004b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80033e2:	2022      	movs	r0, #34	; 0x22
 80033e4:	f001 fbb0 	bl	8004b48 <HAL_NVIC_EnableIRQ>
}
 80033e8:	bf00      	nop
 80033ea:	37c0      	adds	r7, #192	; 0xc0
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40005400 	.word	0x40005400
 80033f4:	40021000 	.word	0x40021000
 80033f8:	48000400 	.word	0x48000400
 80033fc:	40005800 	.word	0x40005800

08003400 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b0b0      	sub	sp, #192	; 0xc0
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003408:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	605a      	str	r2, [r3, #4]
 8003412:	609a      	str	r2, [r3, #8]
 8003414:	60da      	str	r2, [r3, #12]
 8003416:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003418:	f107 0318 	add.w	r3, r7, #24
 800341c:	2294      	movs	r2, #148	; 0x94
 800341e:	2100      	movs	r1, #0
 8003420:	4618      	mov	r0, r3
 8003422:	f007 f993 	bl	800a74c <memset>
  if(hospi->Instance==OCTOSPI1)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a28      	ldr	r2, [pc, #160]	; (80034cc <HAL_OSPI_MspInit+0xcc>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d149      	bne.n	80034c4 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8003430:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003434:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8003436:	2300      	movs	r3, #0
 8003438:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800343c:	f107 0318 	add.w	r3, r7, #24
 8003440:	4618      	mov	r0, r3
 8003442:	f004 fccd 	bl	8007de0 <HAL_RCCEx_PeriphCLKConfig>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 800344c:	f7ff fe58 	bl	8003100 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8003450:	4b1f      	ldr	r3, [pc, #124]	; (80034d0 <HAL_OSPI_MspInit+0xd0>)
 8003452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003454:	4a1e      	ldr	r2, [pc, #120]	; (80034d0 <HAL_OSPI_MspInit+0xd0>)
 8003456:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800345a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800345c:	4b1c      	ldr	r3, [pc, #112]	; (80034d0 <HAL_OSPI_MspInit+0xd0>)
 800345e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003460:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003464:	617b      	str	r3, [r7, #20]
 8003466:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8003468:	4b19      	ldr	r3, [pc, #100]	; (80034d0 <HAL_OSPI_MspInit+0xd0>)
 800346a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800346c:	4a18      	ldr	r2, [pc, #96]	; (80034d0 <HAL_OSPI_MspInit+0xd0>)
 800346e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003472:	6513      	str	r3, [r2, #80]	; 0x50
 8003474:	4b16      	ldr	r3, [pc, #88]	; (80034d0 <HAL_OSPI_MspInit+0xd0>)
 8003476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347c:	613b      	str	r3, [r7, #16]
 800347e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003480:	4b13      	ldr	r3, [pc, #76]	; (80034d0 <HAL_OSPI_MspInit+0xd0>)
 8003482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003484:	4a12      	ldr	r2, [pc, #72]	; (80034d0 <HAL_OSPI_MspInit+0xd0>)
 8003486:	f043 0310 	orr.w	r3, r3, #16
 800348a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800348c:	4b10      	ldr	r3, [pc, #64]	; (80034d0 <HAL_OSPI_MspInit+0xd0>)
 800348e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003490:	f003 0310 	and.w	r3, r3, #16
 8003494:	60fb      	str	r3, [r7, #12]
 8003496:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8003498:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800349c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a0:	2302      	movs	r3, #2
 80034a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a6:	2300      	movs	r3, #0
 80034a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ac:	2303      	movs	r3, #3
 80034ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80034b2:	230a      	movs	r3, #10
 80034b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034b8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80034bc:	4619      	mov	r1, r3
 80034be:	4805      	ldr	r0, [pc, #20]	; (80034d4 <HAL_OSPI_MspInit+0xd4>)
 80034c0:	f001 ff3c 	bl	800533c <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 80034c4:	bf00      	nop
 80034c6:	37c0      	adds	r7, #192	; 0xc0
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	a0001000 	.word	0xa0001000
 80034d0:	40021000 	.word	0x40021000
 80034d4:	48001000 	.word	0x48001000

080034d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08c      	sub	sp, #48	; 0x30
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e0:	f107 031c 	add.w	r3, r7, #28
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	605a      	str	r2, [r3, #4]
 80034ea:	609a      	str	r2, [r3, #8]
 80034ec:	60da      	str	r2, [r3, #12]
 80034ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a43      	ldr	r2, [pc, #268]	; (8003604 <HAL_SPI_MspInit+0x12c>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d152      	bne.n	80035a0 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80034fa:	4b43      	ldr	r3, [pc, #268]	; (8003608 <HAL_SPI_MspInit+0x130>)
 80034fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034fe:	4a42      	ldr	r2, [pc, #264]	; (8003608 <HAL_SPI_MspInit+0x130>)
 8003500:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003504:	6613      	str	r3, [r2, #96]	; 0x60
 8003506:	4b40      	ldr	r3, [pc, #256]	; (8003608 <HAL_SPI_MspInit+0x130>)
 8003508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800350a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800350e:	61bb      	str	r3, [r7, #24]
 8003510:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003512:	4b3d      	ldr	r3, [pc, #244]	; (8003608 <HAL_SPI_MspInit+0x130>)
 8003514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003516:	4a3c      	ldr	r2, [pc, #240]	; (8003608 <HAL_SPI_MspInit+0x130>)
 8003518:	f043 0301 	orr.w	r3, r3, #1
 800351c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800351e:	4b3a      	ldr	r3, [pc, #232]	; (8003608 <HAL_SPI_MspInit+0x130>)
 8003520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	617b      	str	r3, [r7, #20]
 8003528:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800352a:	23e0      	movs	r3, #224	; 0xe0
 800352c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352e:	2302      	movs	r3, #2
 8003530:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003532:	2300      	movs	r3, #0
 8003534:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003536:	2303      	movs	r3, #3
 8003538:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800353a:	2305      	movs	r3, #5
 800353c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800353e:	f107 031c 	add.w	r3, r7, #28
 8003542:	4619      	mov	r1, r3
 8003544:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003548:	f001 fef8 	bl	800533c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 800354c:	4b2f      	ldr	r3, [pc, #188]	; (800360c <HAL_SPI_MspInit+0x134>)
 800354e:	4a30      	ldr	r2, [pc, #192]	; (8003610 <HAL_SPI_MspInit+0x138>)
 8003550:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8003552:	4b2e      	ldr	r3, [pc, #184]	; (800360c <HAL_SPI_MspInit+0x134>)
 8003554:	220b      	movs	r2, #11
 8003556:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003558:	4b2c      	ldr	r3, [pc, #176]	; (800360c <HAL_SPI_MspInit+0x134>)
 800355a:	2210      	movs	r2, #16
 800355c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800355e:	4b2b      	ldr	r3, [pc, #172]	; (800360c <HAL_SPI_MspInit+0x134>)
 8003560:	2200      	movs	r2, #0
 8003562:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003564:	4b29      	ldr	r3, [pc, #164]	; (800360c <HAL_SPI_MspInit+0x134>)
 8003566:	2280      	movs	r2, #128	; 0x80
 8003568:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800356a:	4b28      	ldr	r3, [pc, #160]	; (800360c <HAL_SPI_MspInit+0x134>)
 800356c:	2200      	movs	r2, #0
 800356e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003570:	4b26      	ldr	r3, [pc, #152]	; (800360c <HAL_SPI_MspInit+0x134>)
 8003572:	2200      	movs	r2, #0
 8003574:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003576:	4b25      	ldr	r3, [pc, #148]	; (800360c <HAL_SPI_MspInit+0x134>)
 8003578:	2200      	movs	r2, #0
 800357a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800357c:	4b23      	ldr	r3, [pc, #140]	; (800360c <HAL_SPI_MspInit+0x134>)
 800357e:	2200      	movs	r2, #0
 8003580:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003582:	4822      	ldr	r0, [pc, #136]	; (800360c <HAL_SPI_MspInit+0x134>)
 8003584:	f001 fbfa 	bl	8004d7c <HAL_DMA_Init>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 800358e:	f7ff fdb7 	bl	8003100 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a1d      	ldr	r2, [pc, #116]	; (800360c <HAL_SPI_MspInit+0x134>)
 8003596:	655a      	str	r2, [r3, #84]	; 0x54
 8003598:	4a1c      	ldr	r2, [pc, #112]	; (800360c <HAL_SPI_MspInit+0x134>)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800359e:	e02d      	b.n	80035fc <HAL_SPI_MspInit+0x124>
  else if(hspi->Instance==SPI3)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a1b      	ldr	r2, [pc, #108]	; (8003614 <HAL_SPI_MspInit+0x13c>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d128      	bne.n	80035fc <HAL_SPI_MspInit+0x124>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80035aa:	4b17      	ldr	r3, [pc, #92]	; (8003608 <HAL_SPI_MspInit+0x130>)
 80035ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ae:	4a16      	ldr	r2, [pc, #88]	; (8003608 <HAL_SPI_MspInit+0x130>)
 80035b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035b4:	6593      	str	r3, [r2, #88]	; 0x58
 80035b6:	4b14      	ldr	r3, [pc, #80]	; (8003608 <HAL_SPI_MspInit+0x130>)
 80035b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035be:	613b      	str	r3, [r7, #16]
 80035c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035c2:	4b11      	ldr	r3, [pc, #68]	; (8003608 <HAL_SPI_MspInit+0x130>)
 80035c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c6:	4a10      	ldr	r2, [pc, #64]	; (8003608 <HAL_SPI_MspInit+0x130>)
 80035c8:	f043 0304 	orr.w	r3, r3, #4
 80035cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035ce:	4b0e      	ldr	r3, [pc, #56]	; (8003608 <HAL_SPI_MspInit+0x130>)
 80035d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d2:	f003 0304 	and.w	r3, r3, #4
 80035d6:	60fb      	str	r3, [r7, #12]
 80035d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80035da:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80035de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e0:	2302      	movs	r3, #2
 80035e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e4:	2300      	movs	r3, #0
 80035e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035e8:	2303      	movs	r3, #3
 80035ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80035ec:	2306      	movs	r3, #6
 80035ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035f0:	f107 031c 	add.w	r3, r7, #28
 80035f4:	4619      	mov	r1, r3
 80035f6:	4808      	ldr	r0, [pc, #32]	; (8003618 <HAL_SPI_MspInit+0x140>)
 80035f8:	f001 fea0 	bl	800533c <HAL_GPIO_Init>
}
 80035fc:	bf00      	nop
 80035fe:	3730      	adds	r7, #48	; 0x30
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40013000 	.word	0x40013000
 8003608:	40021000 	.word	0x40021000
 800360c:	20001024 	.word	0x20001024
 8003610:	40020008 	.word	0x40020008
 8003614:	40003c00 	.word	0x40003c00
 8003618:	48000800 	.word	0x48000800

0800361c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b0b4      	sub	sp, #208	; 0xd0
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003624:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	609a      	str	r2, [r3, #8]
 8003630:	60da      	str	r2, [r3, #12]
 8003632:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003634:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003638:	2294      	movs	r2, #148	; 0x94
 800363a:	2100      	movs	r1, #0
 800363c:	4618      	mov	r0, r3
 800363e:	f007 f885 	bl	800a74c <memset>
  if(huart->Instance==UART4)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a98      	ldr	r2, [pc, #608]	; (80038a8 <HAL_UART_MspInit+0x28c>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d13c      	bne.n	80036c6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800364c:	2308      	movs	r3, #8
 800364e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003650:	2300      	movs	r3, #0
 8003652:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003654:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003658:	4618      	mov	r0, r3
 800365a:	f004 fbc1 	bl	8007de0 <HAL_RCCEx_PeriphCLKConfig>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003664:	f7ff fd4c 	bl	8003100 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003668:	4b90      	ldr	r3, [pc, #576]	; (80038ac <HAL_UART_MspInit+0x290>)
 800366a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366c:	4a8f      	ldr	r2, [pc, #572]	; (80038ac <HAL_UART_MspInit+0x290>)
 800366e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003672:	6593      	str	r3, [r2, #88]	; 0x58
 8003674:	4b8d      	ldr	r3, [pc, #564]	; (80038ac <HAL_UART_MspInit+0x290>)
 8003676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003678:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800367c:	627b      	str	r3, [r7, #36]	; 0x24
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003680:	4b8a      	ldr	r3, [pc, #552]	; (80038ac <HAL_UART_MspInit+0x290>)
 8003682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003684:	4a89      	ldr	r2, [pc, #548]	; (80038ac <HAL_UART_MspInit+0x290>)
 8003686:	f043 0301 	orr.w	r3, r3, #1
 800368a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800368c:	4b87      	ldr	r3, [pc, #540]	; (80038ac <HAL_UART_MspInit+0x290>)
 800368e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	623b      	str	r3, [r7, #32]
 8003696:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8003698:	2303      	movs	r3, #3
 800369a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800369e:	2302      	movs	r3, #2
 80036a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a4:	2300      	movs	r3, #0
 80036a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036aa:	2303      	movs	r3, #3
 80036ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80036b0:	2308      	movs	r3, #8
 80036b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036b6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80036ba:	4619      	mov	r1, r3
 80036bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036c0:	f001 fe3c 	bl	800533c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80036c4:	e0ec      	b.n	80038a0 <HAL_UART_MspInit+0x284>
  else if(huart->Instance==USART1)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a79      	ldr	r2, [pc, #484]	; (80038b0 <HAL_UART_MspInit+0x294>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d165      	bne.n	800379c <HAL_UART_MspInit+0x180>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80036d0:	2301      	movs	r3, #1
 80036d2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80036d4:	2300      	movs	r3, #0
 80036d6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036dc:	4618      	mov	r0, r3
 80036de:	f004 fb7f 	bl	8007de0 <HAL_RCCEx_PeriphCLKConfig>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80036e8:	f7ff fd0a 	bl	8003100 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80036ec:	4b6f      	ldr	r3, [pc, #444]	; (80038ac <HAL_UART_MspInit+0x290>)
 80036ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036f0:	4a6e      	ldr	r2, [pc, #440]	; (80038ac <HAL_UART_MspInit+0x290>)
 80036f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036f6:	6613      	str	r3, [r2, #96]	; 0x60
 80036f8:	4b6c      	ldr	r3, [pc, #432]	; (80038ac <HAL_UART_MspInit+0x290>)
 80036fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003700:	61fb      	str	r3, [r7, #28]
 8003702:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003704:	4b69      	ldr	r3, [pc, #420]	; (80038ac <HAL_UART_MspInit+0x290>)
 8003706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003708:	4a68      	ldr	r2, [pc, #416]	; (80038ac <HAL_UART_MspInit+0x290>)
 800370a:	f043 0302 	orr.w	r3, r3, #2
 800370e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003710:	4b66      	ldr	r3, [pc, #408]	; (80038ac <HAL_UART_MspInit+0x290>)
 8003712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	61bb      	str	r3, [r7, #24]
 800371a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800371c:	23c0      	movs	r3, #192	; 0xc0
 800371e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003722:	2302      	movs	r3, #2
 8003724:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003728:	2300      	movs	r3, #0
 800372a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800372e:	2303      	movs	r3, #3
 8003730:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003734:	2307      	movs	r3, #7
 8003736:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800373a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800373e:	4619      	mov	r1, r3
 8003740:	485c      	ldr	r0, [pc, #368]	; (80038b4 <HAL_UART_MspInit+0x298>)
 8003742:	f001 fdfb 	bl	800533c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Channel1;
 8003746:	4b5c      	ldr	r3, [pc, #368]	; (80038b8 <HAL_UART_MspInit+0x29c>)
 8003748:	4a5c      	ldr	r2, [pc, #368]	; (80038bc <HAL_UART_MspInit+0x2a0>)
 800374a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800374c:	4b5a      	ldr	r3, [pc, #360]	; (80038b8 <HAL_UART_MspInit+0x29c>)
 800374e:	2218      	movs	r2, #24
 8003750:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003752:	4b59      	ldr	r3, [pc, #356]	; (80038b8 <HAL_UART_MspInit+0x29c>)
 8003754:	2200      	movs	r2, #0
 8003756:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003758:	4b57      	ldr	r3, [pc, #348]	; (80038b8 <HAL_UART_MspInit+0x29c>)
 800375a:	2200      	movs	r2, #0
 800375c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800375e:	4b56      	ldr	r3, [pc, #344]	; (80038b8 <HAL_UART_MspInit+0x29c>)
 8003760:	2280      	movs	r2, #128	; 0x80
 8003762:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003764:	4b54      	ldr	r3, [pc, #336]	; (80038b8 <HAL_UART_MspInit+0x29c>)
 8003766:	2200      	movs	r2, #0
 8003768:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800376a:	4b53      	ldr	r3, [pc, #332]	; (80038b8 <HAL_UART_MspInit+0x29c>)
 800376c:	2200      	movs	r2, #0
 800376e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003770:	4b51      	ldr	r3, [pc, #324]	; (80038b8 <HAL_UART_MspInit+0x29c>)
 8003772:	2200      	movs	r2, #0
 8003774:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003776:	4b50      	ldr	r3, [pc, #320]	; (80038b8 <HAL_UART_MspInit+0x29c>)
 8003778:	2200      	movs	r2, #0
 800377a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800377c:	484e      	ldr	r0, [pc, #312]	; (80038b8 <HAL_UART_MspInit+0x29c>)
 800377e:	f001 fafd 	bl	8004d7c <HAL_DMA_Init>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d001      	beq.n	800378c <HAL_UART_MspInit+0x170>
      Error_Handler();
 8003788:	f7ff fcba 	bl	8003100 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a4a      	ldr	r2, [pc, #296]	; (80038b8 <HAL_UART_MspInit+0x29c>)
 8003790:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003794:	4a48      	ldr	r2, [pc, #288]	; (80038b8 <HAL_UART_MspInit+0x29c>)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6293      	str	r3, [r2, #40]	; 0x28
}
 800379a:	e081      	b.n	80038a0 <HAL_UART_MspInit+0x284>
  else if(huart->Instance==USART2)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a47      	ldr	r2, [pc, #284]	; (80038c0 <HAL_UART_MspInit+0x2a4>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d13b      	bne.n	800381e <HAL_UART_MspInit+0x202>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80037a6:	2302      	movs	r3, #2
 80037a8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80037aa:	2300      	movs	r3, #0
 80037ac:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037b2:	4618      	mov	r0, r3
 80037b4:	f004 fb14 	bl	8007de0 <HAL_RCCEx_PeriphCLKConfig>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <HAL_UART_MspInit+0x1a6>
      Error_Handler();
 80037be:	f7ff fc9f 	bl	8003100 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80037c2:	4b3a      	ldr	r3, [pc, #232]	; (80038ac <HAL_UART_MspInit+0x290>)
 80037c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c6:	4a39      	ldr	r2, [pc, #228]	; (80038ac <HAL_UART_MspInit+0x290>)
 80037c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037cc:	6593      	str	r3, [r2, #88]	; 0x58
 80037ce:	4b37      	ldr	r3, [pc, #220]	; (80038ac <HAL_UART_MspInit+0x290>)
 80037d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d6:	617b      	str	r3, [r7, #20]
 80037d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80037da:	4b34      	ldr	r3, [pc, #208]	; (80038ac <HAL_UART_MspInit+0x290>)
 80037dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037de:	4a33      	ldr	r2, [pc, #204]	; (80038ac <HAL_UART_MspInit+0x290>)
 80037e0:	f043 0308 	orr.w	r3, r3, #8
 80037e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037e6:	4b31      	ldr	r3, [pc, #196]	; (80038ac <HAL_UART_MspInit+0x290>)
 80037e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ea:	f003 0308 	and.w	r3, r3, #8
 80037ee:	613b      	str	r3, [r7, #16]
 80037f0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80037f2:	2378      	movs	r3, #120	; 0x78
 80037f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f8:	2302      	movs	r3, #2
 80037fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fe:	2300      	movs	r3, #0
 8003800:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003804:	2303      	movs	r3, #3
 8003806:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800380a:	2307      	movs	r3, #7
 800380c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003810:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003814:	4619      	mov	r1, r3
 8003816:	482b      	ldr	r0, [pc, #172]	; (80038c4 <HAL_UART_MspInit+0x2a8>)
 8003818:	f001 fd90 	bl	800533c <HAL_GPIO_Init>
}
 800381c:	e040      	b.n	80038a0 <HAL_UART_MspInit+0x284>
  else if(huart->Instance==USART3)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a29      	ldr	r2, [pc, #164]	; (80038c8 <HAL_UART_MspInit+0x2ac>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d13b      	bne.n	80038a0 <HAL_UART_MspInit+0x284>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003828:	2304      	movs	r3, #4
 800382a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800382c:	2300      	movs	r3, #0
 800382e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003830:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003834:	4618      	mov	r0, r3
 8003836:	f004 fad3 	bl	8007de0 <HAL_RCCEx_PeriphCLKConfig>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <HAL_UART_MspInit+0x228>
      Error_Handler();
 8003840:	f7ff fc5e 	bl	8003100 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003844:	4b19      	ldr	r3, [pc, #100]	; (80038ac <HAL_UART_MspInit+0x290>)
 8003846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003848:	4a18      	ldr	r2, [pc, #96]	; (80038ac <HAL_UART_MspInit+0x290>)
 800384a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800384e:	6593      	str	r3, [r2, #88]	; 0x58
 8003850:	4b16      	ldr	r3, [pc, #88]	; (80038ac <HAL_UART_MspInit+0x290>)
 8003852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003854:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003858:	60fb      	str	r3, [r7, #12]
 800385a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800385c:	4b13      	ldr	r3, [pc, #76]	; (80038ac <HAL_UART_MspInit+0x290>)
 800385e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003860:	4a12      	ldr	r2, [pc, #72]	; (80038ac <HAL_UART_MspInit+0x290>)
 8003862:	f043 0308 	orr.w	r3, r3, #8
 8003866:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003868:	4b10      	ldr	r3, [pc, #64]	; (80038ac <HAL_UART_MspInit+0x290>)
 800386a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800386c:	f003 0308 	and.w	r3, r3, #8
 8003870:	60bb      	str	r3, [r7, #8]
 8003872:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8003874:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003878:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800387c:	2302      	movs	r3, #2
 800387e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003882:	2300      	movs	r3, #0
 8003884:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003888:	2303      	movs	r3, #3
 800388a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800388e:	2307      	movs	r3, #7
 8003890:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003894:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003898:	4619      	mov	r1, r3
 800389a:	480a      	ldr	r0, [pc, #40]	; (80038c4 <HAL_UART_MspInit+0x2a8>)
 800389c:	f001 fd4e 	bl	800533c <HAL_GPIO_Init>
}
 80038a0:	bf00      	nop
 80038a2:	37d0      	adds	r7, #208	; 0xd0
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	40004c00 	.word	0x40004c00
 80038ac:	40021000 	.word	0x40021000
 80038b0:	40013800 	.word	0x40013800
 80038b4:	48000400 	.word	0x48000400
 80038b8:	200012d4 	.word	0x200012d4
 80038bc:	40020408 	.word	0x40020408
 80038c0:	40004400 	.word	0x40004400
 80038c4:	48000c00 	.word	0x48000c00
 80038c8:	40004800 	.word	0x40004800

080038cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08e      	sub	sp, #56	; 0x38
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80038d4:	2300      	movs	r3, #0
 80038d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80038da:	4b34      	ldr	r3, [pc, #208]	; (80039ac <HAL_InitTick+0xe0>)
 80038dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038de:	4a33      	ldr	r2, [pc, #204]	; (80039ac <HAL_InitTick+0xe0>)
 80038e0:	f043 0310 	orr.w	r3, r3, #16
 80038e4:	6593      	str	r3, [r2, #88]	; 0x58
 80038e6:	4b31      	ldr	r3, [pc, #196]	; (80039ac <HAL_InitTick+0xe0>)
 80038e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ea:	f003 0310 	and.w	r3, r3, #16
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80038f2:	f107 0210 	add.w	r2, r7, #16
 80038f6:	f107 0314 	add.w	r3, r7, #20
 80038fa:	4611      	mov	r1, r2
 80038fc:	4618      	mov	r0, r3
 80038fe:	f004 f97d 	bl	8007bfc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003902:	6a3b      	ldr	r3, [r7, #32]
 8003904:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003908:	2b00      	cmp	r3, #0
 800390a:	d103      	bne.n	8003914 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800390c:	f004 f94a 	bl	8007ba4 <HAL_RCC_GetPCLK1Freq>
 8003910:	6378      	str	r0, [r7, #52]	; 0x34
 8003912:	e004      	b.n	800391e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003914:	f004 f946 	bl	8007ba4 <HAL_RCC_GetPCLK1Freq>
 8003918:	4603      	mov	r3, r0
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800391e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003920:	4a23      	ldr	r2, [pc, #140]	; (80039b0 <HAL_InitTick+0xe4>)
 8003922:	fba2 2303 	umull	r2, r3, r2, r3
 8003926:	0c9b      	lsrs	r3, r3, #18
 8003928:	3b01      	subs	r3, #1
 800392a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800392c:	4b21      	ldr	r3, [pc, #132]	; (80039b4 <HAL_InitTick+0xe8>)
 800392e:	4a22      	ldr	r2, [pc, #136]	; (80039b8 <HAL_InitTick+0xec>)
 8003930:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003932:	4b20      	ldr	r3, [pc, #128]	; (80039b4 <HAL_InitTick+0xe8>)
 8003934:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003938:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800393a:	4a1e      	ldr	r2, [pc, #120]	; (80039b4 <HAL_InitTick+0xe8>)
 800393c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003940:	4b1c      	ldr	r3, [pc, #112]	; (80039b4 <HAL_InitTick+0xe8>)
 8003942:	2200      	movs	r2, #0
 8003944:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003946:	4b1b      	ldr	r3, [pc, #108]	; (80039b4 <HAL_InitTick+0xe8>)
 8003948:	2200      	movs	r2, #0
 800394a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800394c:	4b19      	ldr	r3, [pc, #100]	; (80039b4 <HAL_InitTick+0xe8>)
 800394e:	2200      	movs	r2, #0
 8003950:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003952:	4818      	ldr	r0, [pc, #96]	; (80039b4 <HAL_InitTick+0xe8>)
 8003954:	f005 fb04 	bl	8008f60 <HAL_TIM_Base_Init>
 8003958:	4603      	mov	r3, r0
 800395a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800395e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003962:	2b00      	cmp	r3, #0
 8003964:	d11b      	bne.n	800399e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003966:	4813      	ldr	r0, [pc, #76]	; (80039b4 <HAL_InitTick+0xe8>)
 8003968:	f005 fb5c 	bl	8009024 <HAL_TIM_Base_Start_IT>
 800396c:	4603      	mov	r3, r0
 800396e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003972:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003976:	2b00      	cmp	r3, #0
 8003978:	d111      	bne.n	800399e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800397a:	2036      	movs	r0, #54	; 0x36
 800397c:	f001 f8e4 	bl	8004b48 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b0f      	cmp	r3, #15
 8003984:	d808      	bhi.n	8003998 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003986:	2200      	movs	r2, #0
 8003988:	6879      	ldr	r1, [r7, #4]
 800398a:	2036      	movs	r0, #54	; 0x36
 800398c:	f001 f8c0 	bl	8004b10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003990:	4a0a      	ldr	r2, [pc, #40]	; (80039bc <HAL_InitTick+0xf0>)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	e002      	b.n	800399e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800399e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3738      	adds	r7, #56	; 0x38
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	40021000 	.word	0x40021000
 80039b0:	431bde83 	.word	0x431bde83
 80039b4:	20001338 	.word	0x20001338
 80039b8:	40001000 	.word	0x40001000
 80039bc:	2000001c 	.word	0x2000001c

080039c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80039c4:	e7fe      	b.n	80039c4 <NMI_Handler+0x4>

080039c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039c6:	b480      	push	{r7}
 80039c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039ca:	e7fe      	b.n	80039ca <HardFault_Handler+0x4>

080039cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039d0:	e7fe      	b.n	80039d0 <MemManage_Handler+0x4>

080039d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039d2:	b480      	push	{r7}
 80039d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039d6:	e7fe      	b.n	80039d6 <BusFault_Handler+0x4>

080039d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039dc:	e7fe      	b.n	80039dc <UsageFault_Handler+0x4>

080039de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039de:	b480      	push	{r7}
 80039e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039e2:	bf00      	nop
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80039f0:	4802      	ldr	r0, [pc, #8]	; (80039fc <DMA1_Channel1_IRQHandler+0x10>)
 80039f2:	f001 fb45 	bl	8005080 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80039f6:	bf00      	nop
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	20001024 	.word	0x20001024

08003a00 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8003a04:	2020      	movs	r0, #32
 8003a06:	f001 fe43 	bl	8005690 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8003a0a:	2040      	movs	r0, #64	; 0x40
 8003a0c:	f001 fe40 	bl	8005690 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8003a10:	2080      	movs	r0, #128	; 0x80
 8003a12:	f001 fe3d 	bl	8005690 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8003a16:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003a1a:	f001 fe39 	bl	8005690 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003a1e:	bf00      	nop
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003a28:	4802      	ldr	r0, [pc, #8]	; (8003a34 <I2C2_EV_IRQHandler+0x10>)
 8003a2a:	f001 fee4 	bl	80057f6 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003a2e:	bf00      	nop
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	20000eb8 	.word	0x20000eb8

08003a38 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8003a3c:	4802      	ldr	r0, [pc, #8]	; (8003a48 <I2C2_ER_IRQHandler+0x10>)
 8003a3e:	f001 fef4 	bl	800582a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8003a42:	bf00      	nop
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	20000eb8 	.word	0x20000eb8

08003a4c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 8003a50:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003a54:	f001 fe1c 	bl	8005690 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8003a58:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003a5c:	f001 fe18 	bl	8005690 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 8003a60:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003a64:	f001 fe14 	bl	8005690 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8003a68:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003a6c:	f001 fe10 	bl	8005690 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8003a70:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003a74:	f001 fe0c 	bl	8005690 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8003a78:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003a7c:	f001 fe08 	bl	8005690 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003a80:	bf00      	nop
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003a88:	4802      	ldr	r0, [pc, #8]	; (8003a94 <TIM6_DAC_IRQHandler+0x10>)
 8003a8a:	f005 fb3b 	bl	8009104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003a8e:	bf00      	nop
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	20001338 	.word	0x20001338

08003a98 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003a9c:	4802      	ldr	r0, [pc, #8]	; (8003aa8 <DMA2_Channel1_IRQHandler+0x10>)
 8003a9e:	f001 faef 	bl	8005080 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8003aa2:	bf00      	nop
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	200012d4 	.word	0x200012d4

08003aac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003ab0:	4b06      	ldr	r3, [pc, #24]	; (8003acc <SystemInit+0x20>)
 8003ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab6:	4a05      	ldr	r2, [pc, #20]	; (8003acc <SystemInit+0x20>)
 8003ab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003abc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003ac0:	bf00      	nop
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	e000ed00 	.word	0xe000ed00

08003ad0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003ad0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b08 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003ad4:	f7ff ffea 	bl	8003aac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ad8:	480c      	ldr	r0, [pc, #48]	; (8003b0c <LoopForever+0x6>)
  ldr r1, =_edata
 8003ada:	490d      	ldr	r1, [pc, #52]	; (8003b10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003adc:	4a0d      	ldr	r2, [pc, #52]	; (8003b14 <LoopForever+0xe>)
  movs r3, #0
 8003ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ae0:	e002      	b.n	8003ae8 <LoopCopyDataInit>

08003ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ae6:	3304      	adds	r3, #4

08003ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003aec:	d3f9      	bcc.n	8003ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003aee:	4a0a      	ldr	r2, [pc, #40]	; (8003b18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003af0:	4c0a      	ldr	r4, [pc, #40]	; (8003b1c <LoopForever+0x16>)
  movs r3, #0
 8003af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003af4:	e001      	b.n	8003afa <LoopFillZerobss>

08003af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003af8:	3204      	adds	r2, #4

08003afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003afc:	d3fb      	bcc.n	8003af6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003afe:	f006 fe2d 	bl	800a75c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b02:	f7fe fb35 	bl	8002170 <main>

08003b06 <LoopForever>:

LoopForever:
    b LoopForever
 8003b06:	e7fe      	b.n	8003b06 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003b08:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8003b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b10:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8003b14:	0800b10c 	.word	0x0800b10c
  ldr r2, =_sbss
 8003b18:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8003b1c:	200013ac 	.word	0x200013ac

08003b20 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003b20:	e7fe      	b.n	8003b20 <ADC1_IRQHandler>

08003b22 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b082      	sub	sp, #8
 8003b26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b2c:	2003      	movs	r0, #3
 8003b2e:	f000 ffe4 	bl	8004afa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b32:	200f      	movs	r0, #15
 8003b34:	f7ff feca 	bl	80038cc <HAL_InitTick>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d002      	beq.n	8003b44 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	71fb      	strb	r3, [r7, #7]
 8003b42:	e001      	b.n	8003b48 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003b44:	f7ff fae2 	bl	800310c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003b48:	79fb      	ldrb	r3, [r7, #7]
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
	...

08003b54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b58:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <HAL_IncTick+0x20>)
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	4b06      	ldr	r3, [pc, #24]	; (8003b78 <HAL_IncTick+0x24>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4413      	add	r3, r2
 8003b64:	4a04      	ldr	r2, [pc, #16]	; (8003b78 <HAL_IncTick+0x24>)
 8003b66:	6013      	str	r3, [r2, #0]
}
 8003b68:	bf00      	nop
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	20000020 	.word	0x20000020
 8003b78:	20001384 	.word	0x20001384

08003b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8003b80:	4b03      	ldr	r3, [pc, #12]	; (8003b90 <HAL_GetTick+0x14>)
 8003b82:	681b      	ldr	r3, [r3, #0]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	20001384 	.word	0x20001384

08003b94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b9c:	f7ff ffee 	bl	8003b7c <HAL_GetTick>
 8003ba0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bac:	d005      	beq.n	8003bba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003bae:	4b0a      	ldr	r3, [pc, #40]	; (8003bd8 <HAL_Delay+0x44>)
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003bba:	bf00      	nop
 8003bbc:	f7ff ffde 	bl	8003b7c <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d8f7      	bhi.n	8003bbc <HAL_Delay+0x28>
  {
  }
}
 8003bcc:	bf00      	nop
 8003bce:	bf00      	nop
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	20000020 	.word	0x20000020

08003bdc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	609a      	str	r2, [r3, #8]
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
 8003c0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	431a      	orrs	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	609a      	str	r2, [r3, #8]
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b087      	sub	sp, #28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
 8003c50:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	3360      	adds	r3, #96	; 0x60
 8003c56:	461a      	mov	r2, r3
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	4413      	add	r3, r2
 8003c5e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	4b08      	ldr	r3, [pc, #32]	; (8003c88 <LL_ADC_SetOffset+0x44>)
 8003c66:	4013      	ands	r3, r2
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003c6e:	683a      	ldr	r2, [r7, #0]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	4313      	orrs	r3, r2
 8003c74:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003c7c:	bf00      	nop
 8003c7e:	371c      	adds	r7, #28
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	03fff000 	.word	0x03fff000

08003c8c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	3360      	adds	r3, #96	; 0x60
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3714      	adds	r7, #20
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b087      	sub	sp, #28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	3360      	adds	r3, #96	; 0x60
 8003cc8:	461a      	mov	r2, r3
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4413      	add	r3, r2
 8003cd0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003ce2:	bf00      	nop
 8003ce4:	371c      	adds	r7, #28
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b083      	sub	sp, #12
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
 8003cf6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	615a      	str	r2, [r3, #20]
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b087      	sub	sp, #28
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	3330      	adds	r3, #48	; 0x30
 8003d24:	461a      	mov	r2, r3
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	0a1b      	lsrs	r3, r3, #8
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	f003 030c 	and.w	r3, r3, #12
 8003d30:	4413      	add	r3, r2
 8003d32:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	f003 031f 	and.w	r3, r3, #31
 8003d3e:	211f      	movs	r1, #31
 8003d40:	fa01 f303 	lsl.w	r3, r1, r3
 8003d44:	43db      	mvns	r3, r3
 8003d46:	401a      	ands	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	0e9b      	lsrs	r3, r3, #26
 8003d4c:	f003 011f 	and.w	r1, r3, #31
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	f003 031f 	and.w	r3, r3, #31
 8003d56:	fa01 f303 	lsl.w	r3, r1, r3
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003d60:	bf00      	nop
 8003d62:	371c      	adds	r7, #28
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b087      	sub	sp, #28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	3314      	adds	r3, #20
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	0e5b      	lsrs	r3, r3, #25
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	4413      	add	r3, r2
 8003d8a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	0d1b      	lsrs	r3, r3, #20
 8003d94:	f003 031f 	and.w	r3, r3, #31
 8003d98:	2107      	movs	r1, #7
 8003d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d9e:	43db      	mvns	r3, r3
 8003da0:	401a      	ands	r2, r3
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	0d1b      	lsrs	r3, r3, #20
 8003da6:	f003 031f 	and.w	r3, r3, #31
 8003daa:	6879      	ldr	r1, [r7, #4]
 8003dac:	fa01 f303 	lsl.w	r3, r1, r3
 8003db0:	431a      	orrs	r2, r3
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003db6:	bf00      	nop
 8003db8:	371c      	adds	r7, #28
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
	...

08003dc4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ddc:	43db      	mvns	r3, r3
 8003dde:	401a      	ands	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f003 0318 	and.w	r3, r3, #24
 8003de6:	4908      	ldr	r1, [pc, #32]	; (8003e08 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003de8:	40d9      	lsrs	r1, r3
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	400b      	ands	r3, r1
 8003dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003df2:	431a      	orrs	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003dfa:	bf00      	nop
 8003dfc:	3714      	adds	r7, #20
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	0007ffff 	.word	0x0007ffff

08003e0c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003e1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6093      	str	r3, [r2, #8]
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e44:	d101      	bne.n	8003e4a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003e46:	2301      	movs	r3, #1
 8003e48:	e000      	b.n	8003e4c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003e68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e6c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e94:	d101      	bne.n	8003e9a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003e96:	2301      	movs	r3, #1
 8003e98:	e000      	b.n	8003e9c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d101      	bne.n	8003ec0 <LL_ADC_IsEnabled+0x18>
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e000      	b.n	8003ec2 <LL_ADC_IsEnabled+0x1a>
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 0304 	and.w	r3, r3, #4
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	d101      	bne.n	8003ee6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e000      	b.n	8003ee8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f003 0308 	and.w	r3, r3, #8
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d101      	bne.n	8003f0c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e000      	b.n	8003f0e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
	...

08003f1c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b088      	sub	sp, #32
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f24:	2300      	movs	r3, #0
 8003f26:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e129      	b.n	800418a <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d109      	bne.n	8003f58 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7ff f905 	bl	8003154 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff ff67 	bl	8003e30 <LL_ADC_IsDeepPowerDownEnabled>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d004      	beq.n	8003f72 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7ff ff4d 	bl	8003e0c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff ff82 	bl	8003e80 <LL_ADC_IsInternalRegulatorEnabled>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d115      	bne.n	8003fae <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7ff ff66 	bl	8003e58 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f8c:	4b81      	ldr	r3, [pc, #516]	; (8004194 <HAL_ADC_Init+0x278>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	099b      	lsrs	r3, r3, #6
 8003f92:	4a81      	ldr	r2, [pc, #516]	; (8004198 <HAL_ADC_Init+0x27c>)
 8003f94:	fba2 2303 	umull	r2, r3, r2, r3
 8003f98:	099b      	lsrs	r3, r3, #6
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003fa0:	e002      	b.n	8003fa8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1f9      	bne.n	8003fa2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7ff ff64 	bl	8003e80 <LL_ADC_IsInternalRegulatorEnabled>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10d      	bne.n	8003fda <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc2:	f043 0210 	orr.w	r2, r3, #16
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fce:	f043 0201 	orr.w	r2, r3, #1
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7ff ff75 	bl	8003ece <LL_ADC_REG_IsConversionOngoing>
 8003fe4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fea:	f003 0310 	and.w	r3, r3, #16
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	f040 80c2 	bne.w	8004178 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f040 80be 	bne.w	8004178 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004000:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004004:	f043 0202 	orr.w	r2, r3, #2
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4618      	mov	r0, r3
 8004012:	f7ff ff49 	bl	8003ea8 <LL_ADC_IsEnabled>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10b      	bne.n	8004034 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800401c:	485f      	ldr	r0, [pc, #380]	; (800419c <HAL_ADC_Init+0x280>)
 800401e:	f7ff ff43 	bl	8003ea8 <LL_ADC_IsEnabled>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d105      	bne.n	8004034 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	4619      	mov	r1, r3
 800402e:	485c      	ldr	r0, [pc, #368]	; (80041a0 <HAL_ADC_Init+0x284>)
 8004030:	f7ff fdd4 	bl	8003bdc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	7e5b      	ldrb	r3, [r3, #25]
 8004038:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800403e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004044:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800404a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004052:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004054:	4313      	orrs	r3, r2
 8004056:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d106      	bne.n	8004070 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004066:	3b01      	subs	r3, #1
 8004068:	045b      	lsls	r3, r3, #17
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	4313      	orrs	r3, r2
 800406e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004074:	2b00      	cmp	r3, #0
 8004076:	d009      	beq.n	800408c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004084:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004086:	69ba      	ldr	r2, [r7, #24]
 8004088:	4313      	orrs	r3, r2
 800408a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68da      	ldr	r2, [r3, #12]
 8004092:	4b44      	ldr	r3, [pc, #272]	; (80041a4 <HAL_ADC_Init+0x288>)
 8004094:	4013      	ands	r3, r2
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	6812      	ldr	r2, [r2, #0]
 800409a:	69b9      	ldr	r1, [r7, #24]
 800409c:	430b      	orrs	r3, r1
 800409e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7ff ff25 	bl	8003ef4 <LL_ADC_INJ_IsConversionOngoing>
 80040aa:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d140      	bne.n	8004134 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d13d      	bne.n	8004134 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	7e1b      	ldrb	r3, [r3, #24]
 80040c0:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80040c2:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80040ca:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80040cc:	4313      	orrs	r3, r2
 80040ce:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040da:	f023 0306 	bic.w	r3, r3, #6
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	6812      	ldr	r2, [r2, #0]
 80040e2:	69b9      	ldr	r1, [r7, #24]
 80040e4:	430b      	orrs	r3, r1
 80040e6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d118      	bne.n	8004124 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80040fc:	f023 0304 	bic.w	r3, r3, #4
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004108:	4311      	orrs	r1, r2
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800410e:	4311      	orrs	r1, r2
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004114:	430a      	orrs	r2, r1
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f042 0201 	orr.w	r2, r2, #1
 8004120:	611a      	str	r2, [r3, #16]
 8004122:	e007      	b.n	8004134 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	691a      	ldr	r2, [r3, #16]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0201 	bic.w	r2, r2, #1
 8004132:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d10c      	bne.n	8004156 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004142:	f023 010f 	bic.w	r1, r3, #15
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	1e5a      	subs	r2, r3, #1
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	430a      	orrs	r2, r1
 8004152:	631a      	str	r2, [r3, #48]	; 0x30
 8004154:	e007      	b.n	8004166 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 020f 	bic.w	r2, r2, #15
 8004164:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800416a:	f023 0303 	bic.w	r3, r3, #3
 800416e:	f043 0201 	orr.w	r2, r3, #1
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	659a      	str	r2, [r3, #88]	; 0x58
 8004176:	e007      	b.n	8004188 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417c:	f043 0210 	orr.w	r2, r3, #16
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004188:	7ffb      	ldrb	r3, [r7, #31]
}
 800418a:	4618      	mov	r0, r3
 800418c:	3720      	adds	r7, #32
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	20000018 	.word	0x20000018
 8004198:	053e2d63 	.word	0x053e2d63
 800419c:	50040000 	.word	0x50040000
 80041a0:	50040300 	.word	0x50040300
 80041a4:	fff0c007 	.word	0xfff0c007

080041a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b0b6      	sub	sp, #216	; 0xd8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041b2:	2300      	movs	r3, #0
 80041b4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80041b8:	2300      	movs	r3, #0
 80041ba:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d101      	bne.n	80041ca <HAL_ADC_ConfigChannel+0x22>
 80041c6:	2302      	movs	r3, #2
 80041c8:	e3d5      	b.n	8004976 <HAL_ADC_ConfigChannel+0x7ce>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7ff fe79 	bl	8003ece <LL_ADC_REG_IsConversionOngoing>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f040 83ba 	bne.w	8004958 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	2b05      	cmp	r3, #5
 80041f2:	d824      	bhi.n	800423e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	3b02      	subs	r3, #2
 80041fa:	2b03      	cmp	r3, #3
 80041fc:	d81b      	bhi.n	8004236 <HAL_ADC_ConfigChannel+0x8e>
 80041fe:	a201      	add	r2, pc, #4	; (adr r2, 8004204 <HAL_ADC_ConfigChannel+0x5c>)
 8004200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004204:	08004215 	.word	0x08004215
 8004208:	0800421d 	.word	0x0800421d
 800420c:	08004225 	.word	0x08004225
 8004210:	0800422d 	.word	0x0800422d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8004214:	230c      	movs	r3, #12
 8004216:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800421a:	e010      	b.n	800423e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800421c:	2312      	movs	r3, #18
 800421e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004222:	e00c      	b.n	800423e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8004224:	2318      	movs	r3, #24
 8004226:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800422a:	e008      	b.n	800423e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800422c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004230:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004234:	e003      	b.n	800423e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8004236:	2306      	movs	r3, #6
 8004238:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800423c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6818      	ldr	r0, [r3, #0]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	461a      	mov	r2, r3
 8004248:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800424c:	f7ff fd62 	bl	8003d14 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff fe3a 	bl	8003ece <LL_ADC_REG_IsConversionOngoing>
 800425a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4618      	mov	r0, r3
 8004264:	f7ff fe46 	bl	8003ef4 <LL_ADC_INJ_IsConversionOngoing>
 8004268:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800426c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004270:	2b00      	cmp	r3, #0
 8004272:	f040 81bf 	bne.w	80045f4 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004276:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800427a:	2b00      	cmp	r3, #0
 800427c:	f040 81ba 	bne.w	80045f4 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004288:	d10f      	bne.n	80042aa <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6818      	ldr	r0, [r3, #0]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2200      	movs	r2, #0
 8004294:	4619      	mov	r1, r3
 8004296:	f7ff fd69 	bl	8003d6c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7ff fd23 	bl	8003cee <LL_ADC_SetSamplingTimeCommonConfig>
 80042a8:	e00e      	b.n	80042c8 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6818      	ldr	r0, [r3, #0]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	6819      	ldr	r1, [r3, #0]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	461a      	mov	r2, r3
 80042b8:	f7ff fd58 	bl	8003d6c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2100      	movs	r1, #0
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7ff fd13 	bl	8003cee <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	695a      	ldr	r2, [r3, #20]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	08db      	lsrs	r3, r3, #3
 80042d4:	f003 0303 	and.w	r3, r3, #3
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	2b04      	cmp	r3, #4
 80042e8:	d00a      	beq.n	8004300 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6818      	ldr	r0, [r3, #0]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	6919      	ldr	r1, [r3, #16]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80042fa:	f7ff fca3 	bl	8003c44 <LL_ADC_SetOffset>
 80042fe:	e179      	b.n	80045f4 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2100      	movs	r1, #0
 8004306:	4618      	mov	r0, r3
 8004308:	f7ff fcc0 	bl	8003c8c <LL_ADC_GetOffsetChannel>
 800430c:	4603      	mov	r3, r0
 800430e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10a      	bne.n	800432c <HAL_ADC_ConfigChannel+0x184>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2100      	movs	r1, #0
 800431c:	4618      	mov	r0, r3
 800431e:	f7ff fcb5 	bl	8003c8c <LL_ADC_GetOffsetChannel>
 8004322:	4603      	mov	r3, r0
 8004324:	0e9b      	lsrs	r3, r3, #26
 8004326:	f003 021f 	and.w	r2, r3, #31
 800432a:	e01e      	b.n	800436a <HAL_ADC_ConfigChannel+0x1c2>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2100      	movs	r1, #0
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff fcaa 	bl	8003c8c <LL_ADC_GetOffsetChannel>
 8004338:	4603      	mov	r3, r0
 800433a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004342:	fa93 f3a3 	rbit	r3, r3
 8004346:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800434a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800434e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004352:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800435a:	2320      	movs	r3, #32
 800435c:	e004      	b.n	8004368 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800435e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004362:	fab3 f383 	clz	r3, r3
 8004366:	b2db      	uxtb	r3, r3
 8004368:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004372:	2b00      	cmp	r3, #0
 8004374:	d105      	bne.n	8004382 <HAL_ADC_ConfigChannel+0x1da>
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	0e9b      	lsrs	r3, r3, #26
 800437c:	f003 031f 	and.w	r3, r3, #31
 8004380:	e018      	b.n	80043b4 <HAL_ADC_ConfigChannel+0x20c>
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800438e:	fa93 f3a3 	rbit	r3, r3
 8004392:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004396:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800439a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800439e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80043a6:	2320      	movs	r3, #32
 80043a8:	e004      	b.n	80043b4 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80043aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80043ae:	fab3 f383 	clz	r3, r3
 80043b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d106      	bne.n	80043c6 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2200      	movs	r2, #0
 80043be:	2100      	movs	r1, #0
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff fc79 	bl	8003cb8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2101      	movs	r1, #1
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7ff fc5d 	bl	8003c8c <LL_ADC_GetOffsetChannel>
 80043d2:	4603      	mov	r3, r0
 80043d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10a      	bne.n	80043f2 <HAL_ADC_ConfigChannel+0x24a>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2101      	movs	r1, #1
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7ff fc52 	bl	8003c8c <LL_ADC_GetOffsetChannel>
 80043e8:	4603      	mov	r3, r0
 80043ea:	0e9b      	lsrs	r3, r3, #26
 80043ec:	f003 021f 	and.w	r2, r3, #31
 80043f0:	e01e      	b.n	8004430 <HAL_ADC_ConfigChannel+0x288>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2101      	movs	r1, #1
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff fc47 	bl	8003c8c <LL_ADC_GetOffsetChannel>
 80043fe:	4603      	mov	r3, r0
 8004400:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004404:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004408:	fa93 f3a3 	rbit	r3, r3
 800440c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004410:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004414:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004418:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8004420:	2320      	movs	r3, #32
 8004422:	e004      	b.n	800442e <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8004424:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004428:	fab3 f383 	clz	r3, r3
 800442c:	b2db      	uxtb	r3, r3
 800442e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004438:	2b00      	cmp	r3, #0
 800443a:	d105      	bne.n	8004448 <HAL_ADC_ConfigChannel+0x2a0>
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	0e9b      	lsrs	r3, r3, #26
 8004442:	f003 031f 	and.w	r3, r3, #31
 8004446:	e018      	b.n	800447a <HAL_ADC_ConfigChannel+0x2d2>
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004450:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004454:	fa93 f3a3 	rbit	r3, r3
 8004458:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800445c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004460:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004464:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 800446c:	2320      	movs	r3, #32
 800446e:	e004      	b.n	800447a <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8004470:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004474:	fab3 f383 	clz	r3, r3
 8004478:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800447a:	429a      	cmp	r2, r3
 800447c:	d106      	bne.n	800448c <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2200      	movs	r2, #0
 8004484:	2101      	movs	r1, #1
 8004486:	4618      	mov	r0, r3
 8004488:	f7ff fc16 	bl	8003cb8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2102      	movs	r1, #2
 8004492:	4618      	mov	r0, r3
 8004494:	f7ff fbfa 	bl	8003c8c <LL_ADC_GetOffsetChannel>
 8004498:	4603      	mov	r3, r0
 800449a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10a      	bne.n	80044b8 <HAL_ADC_ConfigChannel+0x310>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2102      	movs	r1, #2
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7ff fbef 	bl	8003c8c <LL_ADC_GetOffsetChannel>
 80044ae:	4603      	mov	r3, r0
 80044b0:	0e9b      	lsrs	r3, r3, #26
 80044b2:	f003 021f 	and.w	r2, r3, #31
 80044b6:	e01e      	b.n	80044f6 <HAL_ADC_ConfigChannel+0x34e>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2102      	movs	r1, #2
 80044be:	4618      	mov	r0, r3
 80044c0:	f7ff fbe4 	bl	8003c8c <LL_ADC_GetOffsetChannel>
 80044c4:	4603      	mov	r3, r0
 80044c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044ce:	fa93 f3a3 	rbit	r3, r3
 80044d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80044d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80044de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80044e6:	2320      	movs	r3, #32
 80044e8:	e004      	b.n	80044f4 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80044ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044ee:	fab3 f383 	clz	r3, r3
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d105      	bne.n	800450e <HAL_ADC_ConfigChannel+0x366>
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	0e9b      	lsrs	r3, r3, #26
 8004508:	f003 031f 	and.w	r3, r3, #31
 800450c:	e014      	b.n	8004538 <HAL_ADC_ConfigChannel+0x390>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004514:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004516:	fa93 f3a3 	rbit	r3, r3
 800451a:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800451c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800451e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004522:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800452a:	2320      	movs	r3, #32
 800452c:	e004      	b.n	8004538 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800452e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004532:	fab3 f383 	clz	r3, r3
 8004536:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004538:	429a      	cmp	r2, r3
 800453a:	d106      	bne.n	800454a <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2200      	movs	r2, #0
 8004542:	2102      	movs	r1, #2
 8004544:	4618      	mov	r0, r3
 8004546:	f7ff fbb7 	bl	8003cb8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2103      	movs	r1, #3
 8004550:	4618      	mov	r0, r3
 8004552:	f7ff fb9b 	bl	8003c8c <LL_ADC_GetOffsetChannel>
 8004556:	4603      	mov	r3, r0
 8004558:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10a      	bne.n	8004576 <HAL_ADC_ConfigChannel+0x3ce>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2103      	movs	r1, #3
 8004566:	4618      	mov	r0, r3
 8004568:	f7ff fb90 	bl	8003c8c <LL_ADC_GetOffsetChannel>
 800456c:	4603      	mov	r3, r0
 800456e:	0e9b      	lsrs	r3, r3, #26
 8004570:	f003 021f 	and.w	r2, r3, #31
 8004574:	e017      	b.n	80045a6 <HAL_ADC_ConfigChannel+0x3fe>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2103      	movs	r1, #3
 800457c:	4618      	mov	r0, r3
 800457e:	f7ff fb85 	bl	8003c8c <LL_ADC_GetOffsetChannel>
 8004582:	4603      	mov	r3, r0
 8004584:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004586:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004588:	fa93 f3a3 	rbit	r3, r3
 800458c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800458e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004590:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004592:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004594:	2b00      	cmp	r3, #0
 8004596:	d101      	bne.n	800459c <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8004598:	2320      	movs	r3, #32
 800459a:	e003      	b.n	80045a4 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 800459c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800459e:	fab3 f383 	clz	r3, r3
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d105      	bne.n	80045be <HAL_ADC_ConfigChannel+0x416>
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	0e9b      	lsrs	r3, r3, #26
 80045b8:	f003 031f 	and.w	r3, r3, #31
 80045bc:	e011      	b.n	80045e2 <HAL_ADC_ConfigChannel+0x43a>
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045c6:	fa93 f3a3 	rbit	r3, r3
 80045ca:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80045cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045ce:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80045d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80045d6:	2320      	movs	r3, #32
 80045d8:	e003      	b.n	80045e2 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80045da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045dc:	fab3 f383 	clz	r3, r3
 80045e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d106      	bne.n	80045f4 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2200      	movs	r2, #0
 80045ec:	2103      	movs	r1, #3
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7ff fb62 	bl	8003cb8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7ff fc55 	bl	8003ea8 <LL_ADC_IsEnabled>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	f040 813f 	bne.w	8004884 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6818      	ldr	r0, [r3, #0]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	6819      	ldr	r1, [r3, #0]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	461a      	mov	r2, r3
 8004614:	f7ff fbd6 	bl	8003dc4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	4a8e      	ldr	r2, [pc, #568]	; (8004858 <HAL_ADC_ConfigChannel+0x6b0>)
 800461e:	4293      	cmp	r3, r2
 8004620:	f040 8130 	bne.w	8004884 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10b      	bne.n	800464c <HAL_ADC_ConfigChannel+0x4a4>
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	0e9b      	lsrs	r3, r3, #26
 800463a:	3301      	adds	r3, #1
 800463c:	f003 031f 	and.w	r3, r3, #31
 8004640:	2b09      	cmp	r3, #9
 8004642:	bf94      	ite	ls
 8004644:	2301      	movls	r3, #1
 8004646:	2300      	movhi	r3, #0
 8004648:	b2db      	uxtb	r3, r3
 800464a:	e019      	b.n	8004680 <HAL_ADC_ConfigChannel+0x4d8>
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004652:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004654:	fa93 f3a3 	rbit	r3, r3
 8004658:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800465a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800465c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800465e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8004664:	2320      	movs	r3, #32
 8004666:	e003      	b.n	8004670 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8004668:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800466a:	fab3 f383 	clz	r3, r3
 800466e:	b2db      	uxtb	r3, r3
 8004670:	3301      	adds	r3, #1
 8004672:	f003 031f 	and.w	r3, r3, #31
 8004676:	2b09      	cmp	r3, #9
 8004678:	bf94      	ite	ls
 800467a:	2301      	movls	r3, #1
 800467c:	2300      	movhi	r3, #0
 800467e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004680:	2b00      	cmp	r3, #0
 8004682:	d079      	beq.n	8004778 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800468c:	2b00      	cmp	r3, #0
 800468e:	d107      	bne.n	80046a0 <HAL_ADC_ConfigChannel+0x4f8>
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	0e9b      	lsrs	r3, r3, #26
 8004696:	3301      	adds	r3, #1
 8004698:	069b      	lsls	r3, r3, #26
 800469a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800469e:	e015      	b.n	80046cc <HAL_ADC_ConfigChannel+0x524>
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046a8:	fa93 f3a3 	rbit	r3, r3
 80046ac:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80046ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046b0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80046b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80046b8:	2320      	movs	r3, #32
 80046ba:	e003      	b.n	80046c4 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80046bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046be:	fab3 f383 	clz	r3, r3
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	3301      	adds	r3, #1
 80046c6:	069b      	lsls	r3, r3, #26
 80046c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d109      	bne.n	80046ec <HAL_ADC_ConfigChannel+0x544>
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	0e9b      	lsrs	r3, r3, #26
 80046de:	3301      	adds	r3, #1
 80046e0:	f003 031f 	and.w	r3, r3, #31
 80046e4:	2101      	movs	r1, #1
 80046e6:	fa01 f303 	lsl.w	r3, r1, r3
 80046ea:	e017      	b.n	800471c <HAL_ADC_ConfigChannel+0x574>
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046f4:	fa93 f3a3 	rbit	r3, r3
 80046f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80046fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046fc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80046fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8004704:	2320      	movs	r3, #32
 8004706:	e003      	b.n	8004710 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8004708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800470a:	fab3 f383 	clz	r3, r3
 800470e:	b2db      	uxtb	r3, r3
 8004710:	3301      	adds	r3, #1
 8004712:	f003 031f 	and.w	r3, r3, #31
 8004716:	2101      	movs	r1, #1
 8004718:	fa01 f303 	lsl.w	r3, r1, r3
 800471c:	ea42 0103 	orr.w	r1, r2, r3
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10a      	bne.n	8004742 <HAL_ADC_ConfigChannel+0x59a>
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	0e9b      	lsrs	r3, r3, #26
 8004732:	3301      	adds	r3, #1
 8004734:	f003 021f 	and.w	r2, r3, #31
 8004738:	4613      	mov	r3, r2
 800473a:	005b      	lsls	r3, r3, #1
 800473c:	4413      	add	r3, r2
 800473e:	051b      	lsls	r3, r3, #20
 8004740:	e018      	b.n	8004774 <HAL_ADC_ConfigChannel+0x5cc>
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800474a:	fa93 f3a3 	rbit	r3, r3
 800474e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004752:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800475a:	2320      	movs	r3, #32
 800475c:	e003      	b.n	8004766 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800475e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004760:	fab3 f383 	clz	r3, r3
 8004764:	b2db      	uxtb	r3, r3
 8004766:	3301      	adds	r3, #1
 8004768:	f003 021f 	and.w	r2, r3, #31
 800476c:	4613      	mov	r3, r2
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	4413      	add	r3, r2
 8004772:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004774:	430b      	orrs	r3, r1
 8004776:	e080      	b.n	800487a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004780:	2b00      	cmp	r3, #0
 8004782:	d107      	bne.n	8004794 <HAL_ADC_ConfigChannel+0x5ec>
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	0e9b      	lsrs	r3, r3, #26
 800478a:	3301      	adds	r3, #1
 800478c:	069b      	lsls	r3, r3, #26
 800478e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004792:	e015      	b.n	80047c0 <HAL_ADC_ConfigChannel+0x618>
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800479a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479c:	fa93 f3a3 	rbit	r3, r3
 80047a0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80047a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d101      	bne.n	80047b0 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80047ac:	2320      	movs	r3, #32
 80047ae:	e003      	b.n	80047b8 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80047b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b2:	fab3 f383 	clz	r3, r3
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	3301      	adds	r3, #1
 80047ba:	069b      	lsls	r3, r3, #26
 80047bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d109      	bne.n	80047e0 <HAL_ADC_ConfigChannel+0x638>
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	0e9b      	lsrs	r3, r3, #26
 80047d2:	3301      	adds	r3, #1
 80047d4:	f003 031f 	and.w	r3, r3, #31
 80047d8:	2101      	movs	r1, #1
 80047da:	fa01 f303 	lsl.w	r3, r1, r3
 80047de:	e017      	b.n	8004810 <HAL_ADC_ConfigChannel+0x668>
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	fa93 f3a3 	rbit	r3, r3
 80047ec:	61bb      	str	r3, [r7, #24]
  return result;
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80047f2:	6a3b      	ldr	r3, [r7, #32]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d101      	bne.n	80047fc <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80047f8:	2320      	movs	r3, #32
 80047fa:	e003      	b.n	8004804 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80047fc:	6a3b      	ldr	r3, [r7, #32]
 80047fe:	fab3 f383 	clz	r3, r3
 8004802:	b2db      	uxtb	r3, r3
 8004804:	3301      	adds	r3, #1
 8004806:	f003 031f 	and.w	r3, r3, #31
 800480a:	2101      	movs	r1, #1
 800480c:	fa01 f303 	lsl.w	r3, r1, r3
 8004810:	ea42 0103 	orr.w	r1, r2, r3
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10d      	bne.n	800483c <HAL_ADC_ConfigChannel+0x694>
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	0e9b      	lsrs	r3, r3, #26
 8004826:	3301      	adds	r3, #1
 8004828:	f003 021f 	and.w	r2, r3, #31
 800482c:	4613      	mov	r3, r2
 800482e:	005b      	lsls	r3, r3, #1
 8004830:	4413      	add	r3, r2
 8004832:	3b1e      	subs	r3, #30
 8004834:	051b      	lsls	r3, r3, #20
 8004836:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800483a:	e01d      	b.n	8004878 <HAL_ADC_ConfigChannel+0x6d0>
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	fa93 f3a3 	rbit	r3, r3
 8004848:	60fb      	str	r3, [r7, #12]
  return result;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d103      	bne.n	800485c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8004854:	2320      	movs	r3, #32
 8004856:	e005      	b.n	8004864 <HAL_ADC_ConfigChannel+0x6bc>
 8004858:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	fab3 f383 	clz	r3, r3
 8004862:	b2db      	uxtb	r3, r3
 8004864:	3301      	adds	r3, #1
 8004866:	f003 021f 	and.w	r2, r3, #31
 800486a:	4613      	mov	r3, r2
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	4413      	add	r3, r2
 8004870:	3b1e      	subs	r3, #30
 8004872:	051b      	lsls	r3, r3, #20
 8004874:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004878:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800487e:	4619      	mov	r1, r3
 8004880:	f7ff fa74 	bl	8003d6c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	4b3d      	ldr	r3, [pc, #244]	; (8004980 <HAL_ADC_ConfigChannel+0x7d8>)
 800488a:	4013      	ands	r3, r2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d06c      	beq.n	800496a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004890:	483c      	ldr	r0, [pc, #240]	; (8004984 <HAL_ADC_ConfigChannel+0x7dc>)
 8004892:	f7ff f9c9 	bl	8003c28 <LL_ADC_GetCommonPathInternalCh>
 8004896:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a3a      	ldr	r2, [pc, #232]	; (8004988 <HAL_ADC_ConfigChannel+0x7e0>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d127      	bne.n	80048f4 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80048a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80048a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d121      	bne.n	80048f4 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a35      	ldr	r2, [pc, #212]	; (800498c <HAL_ADC_ConfigChannel+0x7e4>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d157      	bne.n	800496a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80048be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80048c2:	4619      	mov	r1, r3
 80048c4:	482f      	ldr	r0, [pc, #188]	; (8004984 <HAL_ADC_ConfigChannel+0x7dc>)
 80048c6:	f7ff f99c 	bl	8003c02 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80048ca:	4b31      	ldr	r3, [pc, #196]	; (8004990 <HAL_ADC_ConfigChannel+0x7e8>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	099b      	lsrs	r3, r3, #6
 80048d0:	4a30      	ldr	r2, [pc, #192]	; (8004994 <HAL_ADC_ConfigChannel+0x7ec>)
 80048d2:	fba2 2303 	umull	r2, r3, r2, r3
 80048d6:	099b      	lsrs	r3, r3, #6
 80048d8:	1c5a      	adds	r2, r3, #1
 80048da:	4613      	mov	r3, r2
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	4413      	add	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80048e4:	e002      	b.n	80048ec <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	3b01      	subs	r3, #1
 80048ea:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1f9      	bne.n	80048e6 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80048f2:	e03a      	b.n	800496a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a27      	ldr	r2, [pc, #156]	; (8004998 <HAL_ADC_ConfigChannel+0x7f0>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d113      	bne.n	8004926 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80048fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004902:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d10d      	bne.n	8004926 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a1f      	ldr	r2, [pc, #124]	; (800498c <HAL_ADC_ConfigChannel+0x7e4>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d12a      	bne.n	800496a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004914:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004918:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800491c:	4619      	mov	r1, r3
 800491e:	4819      	ldr	r0, [pc, #100]	; (8004984 <HAL_ADC_ConfigChannel+0x7dc>)
 8004920:	f7ff f96f 	bl	8003c02 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004924:	e021      	b.n	800496a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a1c      	ldr	r2, [pc, #112]	; (800499c <HAL_ADC_ConfigChannel+0x7f4>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d11c      	bne.n	800496a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004930:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004934:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d116      	bne.n	800496a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a12      	ldr	r2, [pc, #72]	; (800498c <HAL_ADC_ConfigChannel+0x7e4>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d111      	bne.n	800496a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004946:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800494a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800494e:	4619      	mov	r1, r3
 8004950:	480c      	ldr	r0, [pc, #48]	; (8004984 <HAL_ADC_ConfigChannel+0x7dc>)
 8004952:	f7ff f956 	bl	8003c02 <LL_ADC_SetCommonPathInternalCh>
 8004956:	e008      	b.n	800496a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800495c:	f043 0220 	orr.w	r2, r3, #32
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8004972:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004976:	4618      	mov	r0, r3
 8004978:	37d8      	adds	r7, #216	; 0xd8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	80080000 	.word	0x80080000
 8004984:	50040300 	.word	0x50040300
 8004988:	c7520000 	.word	0xc7520000
 800498c:	50040000 	.word	0x50040000
 8004990:	20000018 	.word	0x20000018
 8004994:	053e2d63 	.word	0x053e2d63
 8004998:	cb840000 	.word	0xcb840000
 800499c:	80000001 	.word	0x80000001

080049a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f003 0307 	and.w	r3, r3, #7
 80049ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049b0:	4b0c      	ldr	r3, [pc, #48]	; (80049e4 <__NVIC_SetPriorityGrouping+0x44>)
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049b6:	68ba      	ldr	r2, [r7, #8]
 80049b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80049bc:	4013      	ands	r3, r2
 80049be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80049cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049d2:	4a04      	ldr	r2, [pc, #16]	; (80049e4 <__NVIC_SetPriorityGrouping+0x44>)
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	60d3      	str	r3, [r2, #12]
}
 80049d8:	bf00      	nop
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr
 80049e4:	e000ed00 	.word	0xe000ed00

080049e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049e8:	b480      	push	{r7}
 80049ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049ec:	4b04      	ldr	r3, [pc, #16]	; (8004a00 <__NVIC_GetPriorityGrouping+0x18>)
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	0a1b      	lsrs	r3, r3, #8
 80049f2:	f003 0307 	and.w	r3, r3, #7
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr
 8004a00:	e000ed00 	.word	0xe000ed00

08004a04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	db0b      	blt.n	8004a2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a16:	79fb      	ldrb	r3, [r7, #7]
 8004a18:	f003 021f 	and.w	r2, r3, #31
 8004a1c:	4907      	ldr	r1, [pc, #28]	; (8004a3c <__NVIC_EnableIRQ+0x38>)
 8004a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a22:	095b      	lsrs	r3, r3, #5
 8004a24:	2001      	movs	r0, #1
 8004a26:	fa00 f202 	lsl.w	r2, r0, r2
 8004a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a2e:	bf00      	nop
 8004a30:	370c      	adds	r7, #12
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	e000e100 	.word	0xe000e100

08004a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	4603      	mov	r3, r0
 8004a48:	6039      	str	r1, [r7, #0]
 8004a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	db0a      	blt.n	8004a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	b2da      	uxtb	r2, r3
 8004a58:	490c      	ldr	r1, [pc, #48]	; (8004a8c <__NVIC_SetPriority+0x4c>)
 8004a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a5e:	0112      	lsls	r2, r2, #4
 8004a60:	b2d2      	uxtb	r2, r2
 8004a62:	440b      	add	r3, r1
 8004a64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a68:	e00a      	b.n	8004a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	4908      	ldr	r1, [pc, #32]	; (8004a90 <__NVIC_SetPriority+0x50>)
 8004a70:	79fb      	ldrb	r3, [r7, #7]
 8004a72:	f003 030f 	and.w	r3, r3, #15
 8004a76:	3b04      	subs	r3, #4
 8004a78:	0112      	lsls	r2, r2, #4
 8004a7a:	b2d2      	uxtb	r2, r2
 8004a7c:	440b      	add	r3, r1
 8004a7e:	761a      	strb	r2, [r3, #24]
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	e000e100 	.word	0xe000e100
 8004a90:	e000ed00 	.word	0xe000ed00

08004a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b089      	sub	sp, #36	; 0x24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f003 0307 	and.w	r3, r3, #7
 8004aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	f1c3 0307 	rsb	r3, r3, #7
 8004aae:	2b04      	cmp	r3, #4
 8004ab0:	bf28      	it	cs
 8004ab2:	2304      	movcs	r3, #4
 8004ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	3304      	adds	r3, #4
 8004aba:	2b06      	cmp	r3, #6
 8004abc:	d902      	bls.n	8004ac4 <NVIC_EncodePriority+0x30>
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	3b03      	subs	r3, #3
 8004ac2:	e000      	b.n	8004ac6 <NVIC_EncodePriority+0x32>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad2:	43da      	mvns	r2, r3
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	401a      	ands	r2, r3
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004adc:	f04f 31ff 	mov.w	r1, #4294967295
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae6:	43d9      	mvns	r1, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004aec:	4313      	orrs	r3, r2
         );
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3724      	adds	r7, #36	; 0x24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b082      	sub	sp, #8
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f7ff ff4c 	bl	80049a0 <__NVIC_SetPriorityGrouping>
}
 8004b08:	bf00      	nop
 8004b0a:	3708      	adds	r7, #8
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	4603      	mov	r3, r0
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
 8004b1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b22:	f7ff ff61 	bl	80049e8 <__NVIC_GetPriorityGrouping>
 8004b26:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	68b9      	ldr	r1, [r7, #8]
 8004b2c:	6978      	ldr	r0, [r7, #20]
 8004b2e:	f7ff ffb1 	bl	8004a94 <NVIC_EncodePriority>
 8004b32:	4602      	mov	r2, r0
 8004b34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b38:	4611      	mov	r1, r2
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7ff ff80 	bl	8004a40 <__NVIC_SetPriority>
}
 8004b40:	bf00      	nop
 8004b42:	3718      	adds	r7, #24
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	4603      	mov	r3, r0
 8004b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7ff ff54 	bl	8004a04 <__NVIC_EnableIRQ>
}
 8004b5c:	bf00      	nop
 8004b5e:	3708      	adds	r7, #8
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d101      	bne.n	8004b76 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e0ac      	b.n	8004cd0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 f8b2 	bl	8004ce4 <DFSDM_GetChannelFromInstance>
 8004b80:	4603      	mov	r3, r0
 8004b82:	4a55      	ldr	r2, [pc, #340]	; (8004cd8 <HAL_DFSDM_ChannelInit+0x174>)
 8004b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d001      	beq.n	8004b90 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e09f      	b.n	8004cd0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f7fe fb1f 	bl	80031d4 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8004b96:	4b51      	ldr	r3, [pc, #324]	; (8004cdc <HAL_DFSDM_ChannelInit+0x178>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	4a4f      	ldr	r2, [pc, #316]	; (8004cdc <HAL_DFSDM_ChannelInit+0x178>)
 8004b9e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8004ba0:	4b4e      	ldr	r3, [pc, #312]	; (8004cdc <HAL_DFSDM_ChannelInit+0x178>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d125      	bne.n	8004bf4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004ba8:	4b4d      	ldr	r3, [pc, #308]	; (8004ce0 <HAL_DFSDM_ChannelInit+0x17c>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a4c      	ldr	r2, [pc, #304]	; (8004ce0 <HAL_DFSDM_ChannelInit+0x17c>)
 8004bae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004bb2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8004bb4:	4b4a      	ldr	r3, [pc, #296]	; (8004ce0 <HAL_DFSDM_ChannelInit+0x17c>)
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	4948      	ldr	r1, [pc, #288]	; (8004ce0 <HAL_DFSDM_ChannelInit+0x17c>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8004bc2:	4b47      	ldr	r3, [pc, #284]	; (8004ce0 <HAL_DFSDM_ChannelInit+0x17c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a46      	ldr	r2, [pc, #280]	; (8004ce0 <HAL_DFSDM_ChannelInit+0x17c>)
 8004bc8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8004bcc:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	791b      	ldrb	r3, [r3, #4]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d108      	bne.n	8004be8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8004bd6:	4b42      	ldr	r3, [pc, #264]	; (8004ce0 <HAL_DFSDM_ChannelInit+0x17c>)
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	3b01      	subs	r3, #1
 8004be0:	041b      	lsls	r3, r3, #16
 8004be2:	493f      	ldr	r1, [pc, #252]	; (8004ce0 <HAL_DFSDM_ChannelInit+0x17c>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004be8:	4b3d      	ldr	r3, [pc, #244]	; (8004ce0 <HAL_DFSDM_ChannelInit+0x17c>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a3c      	ldr	r2, [pc, #240]	; (8004ce0 <HAL_DFSDM_ChannelInit+0x17c>)
 8004bee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004bf2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8004c02:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6819      	ldr	r1, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004c12:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004c18:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 020f 	bic.w	r2, r2, #15
 8004c30:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6819      	ldr	r1, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004c40:	431a      	orrs	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	430a      	orrs	r2, r1
 8004c48:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689a      	ldr	r2, [r3, #8]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8004c58:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	6899      	ldr	r1, [r3, #8]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004c6c:	431a      	orrs	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f002 0207 	and.w	r2, r2, #7
 8004c84:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	6859      	ldr	r1, [r3, #4]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c90:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c96:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004cb0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f000 f810 	bl	8004ce4 <DFSDM_GetChannelFromInstance>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	4904      	ldr	r1, [pc, #16]	; (8004cd8 <HAL_DFSDM_ChannelInit+0x174>)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	2000138c 	.word	0x2000138c
 8004cdc:	20001388 	.word	0x20001388
 8004ce0:	40016000 	.word	0x40016000

08004ce4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a1c      	ldr	r2, [pc, #112]	; (8004d60 <DFSDM_GetChannelFromInstance+0x7c>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d102      	bne.n	8004cfa <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	60fb      	str	r3, [r7, #12]
 8004cf8:	e02b      	b.n	8004d52 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a19      	ldr	r2, [pc, #100]	; (8004d64 <DFSDM_GetChannelFromInstance+0x80>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d102      	bne.n	8004d08 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8004d02:	2301      	movs	r3, #1
 8004d04:	60fb      	str	r3, [r7, #12]
 8004d06:	e024      	b.n	8004d52 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a17      	ldr	r2, [pc, #92]	; (8004d68 <DFSDM_GetChannelFromInstance+0x84>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d102      	bne.n	8004d16 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8004d10:	2302      	movs	r3, #2
 8004d12:	60fb      	str	r3, [r7, #12]
 8004d14:	e01d      	b.n	8004d52 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a14      	ldr	r2, [pc, #80]	; (8004d6c <DFSDM_GetChannelFromInstance+0x88>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d102      	bne.n	8004d24 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8004d1e:	2304      	movs	r3, #4
 8004d20:	60fb      	str	r3, [r7, #12]
 8004d22:	e016      	b.n	8004d52 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a12      	ldr	r2, [pc, #72]	; (8004d70 <DFSDM_GetChannelFromInstance+0x8c>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d102      	bne.n	8004d32 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8004d2c:	2305      	movs	r3, #5
 8004d2e:	60fb      	str	r3, [r7, #12]
 8004d30:	e00f      	b.n	8004d52 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a0f      	ldr	r2, [pc, #60]	; (8004d74 <DFSDM_GetChannelFromInstance+0x90>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d102      	bne.n	8004d40 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8004d3a:	2306      	movs	r3, #6
 8004d3c:	60fb      	str	r3, [r7, #12]
 8004d3e:	e008      	b.n	8004d52 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a0d      	ldr	r2, [pc, #52]	; (8004d78 <DFSDM_GetChannelFromInstance+0x94>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d102      	bne.n	8004d4e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8004d48:	2307      	movs	r3, #7
 8004d4a:	60fb      	str	r3, [r7, #12]
 8004d4c:	e001      	b.n	8004d52 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8004d52:	68fb      	ldr	r3, [r7, #12]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	40016000 	.word	0x40016000
 8004d64:	40016020 	.word	0x40016020
 8004d68:	40016040 	.word	0x40016040
 8004d6c:	40016080 	.word	0x40016080
 8004d70:	400160a0 	.word	0x400160a0
 8004d74:	400160c0 	.word	0x400160c0
 8004d78:	400160e0 	.word	0x400160e0

08004d7c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e08d      	b.n	8004eaa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	461a      	mov	r2, r3
 8004d94:	4b47      	ldr	r3, [pc, #284]	; (8004eb4 <HAL_DMA_Init+0x138>)
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d80f      	bhi.n	8004dba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	4b45      	ldr	r3, [pc, #276]	; (8004eb8 <HAL_DMA_Init+0x13c>)
 8004da2:	4413      	add	r3, r2
 8004da4:	4a45      	ldr	r2, [pc, #276]	; (8004ebc <HAL_DMA_Init+0x140>)
 8004da6:	fba2 2303 	umull	r2, r3, r2, r3
 8004daa:	091b      	lsrs	r3, r3, #4
 8004dac:	009a      	lsls	r2, r3, #2
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a42      	ldr	r2, [pc, #264]	; (8004ec0 <HAL_DMA_Init+0x144>)
 8004db6:	641a      	str	r2, [r3, #64]	; 0x40
 8004db8:	e00e      	b.n	8004dd8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	4b40      	ldr	r3, [pc, #256]	; (8004ec4 <HAL_DMA_Init+0x148>)
 8004dc2:	4413      	add	r3, r2
 8004dc4:	4a3d      	ldr	r2, [pc, #244]	; (8004ebc <HAL_DMA_Init+0x140>)
 8004dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dca:	091b      	lsrs	r3, r3, #4
 8004dcc:	009a      	lsls	r2, r3, #2
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a3c      	ldr	r2, [pc, #240]	; (8004ec8 <HAL_DMA_Init+0x14c>)
 8004dd6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2202      	movs	r2, #2
 8004ddc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004dfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 fa24 	bl	8005278 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e38:	d102      	bne.n	8004e40 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685a      	ldr	r2, [r3, #4]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e48:	b2d2      	uxtb	r2, r2
 8004e4a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004e54:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d010      	beq.n	8004e80 <HAL_DMA_Init+0x104>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	2b04      	cmp	r3, #4
 8004e64:	d80c      	bhi.n	8004e80 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 fa44 	bl	80052f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e70:	2200      	movs	r2, #0
 8004e72:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004e7c:	605a      	str	r2, [r3, #4]
 8004e7e:	e008      	b.n	8004e92 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	40020407 	.word	0x40020407
 8004eb8:	bffdfff8 	.word	0xbffdfff8
 8004ebc:	cccccccd 	.word	0xcccccccd
 8004ec0:	40020000 	.word	0x40020000
 8004ec4:	bffdfbf8 	.word	0xbffdfbf8
 8004ec8:	40020400 	.word	0x40020400

08004ecc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
 8004ed8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004eda:	2300      	movs	r3, #0
 8004edc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d101      	bne.n	8004eec <HAL_DMA_Start_IT+0x20>
 8004ee8:	2302      	movs	r3, #2
 8004eea:	e066      	b.n	8004fba <HAL_DMA_Start_IT+0xee>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d155      	bne.n	8004fac <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2202      	movs	r2, #2
 8004f04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f022 0201 	bic.w	r2, r2, #1
 8004f1c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	68b9      	ldr	r1, [r7, #8]
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f000 f968 	bl	80051fa <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d008      	beq.n	8004f44 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f042 020e 	orr.w	r2, r2, #14
 8004f40:	601a      	str	r2, [r3, #0]
 8004f42:	e00f      	b.n	8004f64 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f022 0204 	bic.w	r2, r2, #4
 8004f52:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 020a 	orr.w	r2, r2, #10
 8004f62:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d007      	beq.n	8004f82 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f80:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d007      	beq.n	8004f9a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f98:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f042 0201 	orr.w	r2, r2, #1
 8004fa8:	601a      	str	r2, [r3, #0]
 8004faa:	e005      	b.n	8004fb8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004fb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3718      	adds	r7, #24
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b084      	sub	sp, #16
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d005      	beq.n	8004fe6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2204      	movs	r2, #4
 8004fde:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	73fb      	strb	r3, [r7, #15]
 8004fe4:	e047      	b.n	8005076 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 020e 	bic.w	r2, r2, #14
 8004ff4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f022 0201 	bic.w	r2, r2, #1
 8005004:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005010:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005014:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800501a:	f003 021c 	and.w	r2, r3, #28
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005022:	2101      	movs	r1, #1
 8005024:	fa01 f202 	lsl.w	r2, r1, r2
 8005028:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005032:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00c      	beq.n	8005056 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005046:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800504a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005054:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	4798      	blx	r3
    }
  }
  return status;
 8005076:	7bfb      	ldrb	r3, [r7, #15]
}
 8005078:	4618      	mov	r0, r3
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509c:	f003 031c 	and.w	r3, r3, #28
 80050a0:	2204      	movs	r2, #4
 80050a2:	409a      	lsls	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4013      	ands	r3, r2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d026      	beq.n	80050fa <HAL_DMA_IRQHandler+0x7a>
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	f003 0304 	and.w	r3, r3, #4
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d021      	beq.n	80050fa <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0320 	and.w	r3, r3, #32
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d107      	bne.n	80050d4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 0204 	bic.w	r2, r2, #4
 80050d2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d8:	f003 021c 	and.w	r2, r3, #28
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e0:	2104      	movs	r1, #4
 80050e2:	fa01 f202 	lsl.w	r2, r1, r2
 80050e6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d071      	beq.n	80051d4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80050f8:	e06c      	b.n	80051d4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050fe:	f003 031c 	and.w	r3, r3, #28
 8005102:	2202      	movs	r2, #2
 8005104:	409a      	lsls	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	4013      	ands	r3, r2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d02e      	beq.n	800516c <HAL_DMA_IRQHandler+0xec>
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d029      	beq.n	800516c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0320 	and.w	r3, r3, #32
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10b      	bne.n	800513e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f022 020a 	bic.w	r2, r2, #10
 8005134:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005142:	f003 021c 	and.w	r2, r3, #28
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514a:	2102      	movs	r1, #2
 800514c:	fa01 f202 	lsl.w	r2, r1, r2
 8005150:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515e:	2b00      	cmp	r3, #0
 8005160:	d038      	beq.n	80051d4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800516a:	e033      	b.n	80051d4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005170:	f003 031c 	and.w	r3, r3, #28
 8005174:	2208      	movs	r2, #8
 8005176:	409a      	lsls	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	4013      	ands	r3, r2
 800517c:	2b00      	cmp	r3, #0
 800517e:	d02a      	beq.n	80051d6 <HAL_DMA_IRQHandler+0x156>
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f003 0308 	and.w	r3, r3, #8
 8005186:	2b00      	cmp	r3, #0
 8005188:	d025      	beq.n	80051d6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f022 020e 	bic.w	r2, r2, #14
 8005198:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800519e:	f003 021c 	and.w	r2, r3, #28
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a6:	2101      	movs	r1, #1
 80051a8:	fa01 f202 	lsl.w	r2, r1, r2
 80051ac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d004      	beq.n	80051d6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80051d4:	bf00      	nop
 80051d6:	bf00      	nop
}
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80051de:	b480      	push	{r7}
 80051e0:	b083      	sub	sp, #12
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80051ec:	b2db      	uxtb	r3, r3
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	370c      	adds	r7, #12
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b085      	sub	sp, #20
 80051fe:	af00      	add	r7, sp, #0
 8005200:	60f8      	str	r0, [r7, #12]
 8005202:	60b9      	str	r1, [r7, #8]
 8005204:	607a      	str	r2, [r7, #4]
 8005206:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005210:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005216:	2b00      	cmp	r3, #0
 8005218:	d004      	beq.n	8005224 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005222:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005228:	f003 021c 	and.w	r2, r3, #28
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005230:	2101      	movs	r1, #1
 8005232:	fa01 f202 	lsl.w	r2, r1, r2
 8005236:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	683a      	ldr	r2, [r7, #0]
 800523e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	2b10      	cmp	r3, #16
 8005246:	d108      	bne.n	800525a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68ba      	ldr	r2, [r7, #8]
 8005256:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005258:	e007      	b.n	800526a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	60da      	str	r2, [r3, #12]
}
 800526a:	bf00      	nop
 800526c:	3714      	adds	r7, #20
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
	...

08005278 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	461a      	mov	r2, r3
 8005286:	4b17      	ldr	r3, [pc, #92]	; (80052e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005288:	429a      	cmp	r2, r3
 800528a:	d80a      	bhi.n	80052a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005290:	089b      	lsrs	r3, r3, #2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005298:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	6493      	str	r3, [r2, #72]	; 0x48
 80052a0:	e007      	b.n	80052b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a6:	089b      	lsrs	r3, r3, #2
 80052a8:	009a      	lsls	r2, r3, #2
 80052aa:	4b0f      	ldr	r3, [pc, #60]	; (80052e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80052ac:	4413      	add	r3, r2
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	3b08      	subs	r3, #8
 80052ba:	4a0c      	ldr	r2, [pc, #48]	; (80052ec <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80052bc:	fba2 2303 	umull	r2, r3, r2, r3
 80052c0:	091b      	lsrs	r3, r3, #4
 80052c2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a0a      	ldr	r2, [pc, #40]	; (80052f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80052c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f003 031f 	and.w	r3, r3, #31
 80052d0:	2201      	movs	r2, #1
 80052d2:	409a      	lsls	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80052d8:	bf00      	nop
 80052da:	3714      	adds	r7, #20
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr
 80052e4:	40020407 	.word	0x40020407
 80052e8:	4002081c 	.word	0x4002081c
 80052ec:	cccccccd 	.word	0xcccccccd
 80052f0:	40020880 	.word	0x40020880

080052f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	b2db      	uxtb	r3, r3
 8005302:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	4b0b      	ldr	r3, [pc, #44]	; (8005334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005308:	4413      	add	r3, r2
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	461a      	mov	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a08      	ldr	r2, [pc, #32]	; (8005338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005316:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	3b01      	subs	r3, #1
 800531c:	f003 0303 	and.w	r3, r3, #3
 8005320:	2201      	movs	r2, #1
 8005322:	409a      	lsls	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005328:	bf00      	nop
 800532a:	3714      	adds	r7, #20
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr
 8005334:	1000823f 	.word	0x1000823f
 8005338:	40020940 	.word	0x40020940

0800533c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800533c:	b480      	push	{r7}
 800533e:	b087      	sub	sp, #28
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005346:	2300      	movs	r3, #0
 8005348:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800534a:	e166      	b.n	800561a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	2101      	movs	r1, #1
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	fa01 f303 	lsl.w	r3, r1, r3
 8005358:	4013      	ands	r3, r2
 800535a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2b00      	cmp	r3, #0
 8005360:	f000 8158 	beq.w	8005614 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f003 0303 	and.w	r3, r3, #3
 800536c:	2b01      	cmp	r3, #1
 800536e:	d005      	beq.n	800537c <HAL_GPIO_Init+0x40>
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f003 0303 	and.w	r3, r3, #3
 8005378:	2b02      	cmp	r3, #2
 800537a:	d130      	bne.n	80053de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	005b      	lsls	r3, r3, #1
 8005386:	2203      	movs	r2, #3
 8005388:	fa02 f303 	lsl.w	r3, r2, r3
 800538c:	43db      	mvns	r3, r3
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	4013      	ands	r3, r2
 8005392:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	68da      	ldr	r2, [r3, #12]
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	005b      	lsls	r3, r3, #1
 800539c:	fa02 f303 	lsl.w	r3, r2, r3
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80053b2:	2201      	movs	r2, #1
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ba:	43db      	mvns	r3, r3
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	4013      	ands	r3, r2
 80053c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	091b      	lsrs	r3, r3, #4
 80053c8:	f003 0201 	and.w	r2, r3, #1
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	fa02 f303 	lsl.w	r3, r2, r3
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f003 0303 	and.w	r3, r3, #3
 80053e6:	2b03      	cmp	r3, #3
 80053e8:	d017      	beq.n	800541a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	005b      	lsls	r3, r3, #1
 80053f4:	2203      	movs	r2, #3
 80053f6:	fa02 f303 	lsl.w	r3, r2, r3
 80053fa:	43db      	mvns	r3, r3
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	4013      	ands	r3, r2
 8005400:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	689a      	ldr	r2, [r3, #8]
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	005b      	lsls	r3, r3, #1
 800540a:	fa02 f303 	lsl.w	r3, r2, r3
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	4313      	orrs	r3, r2
 8005412:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f003 0303 	and.w	r3, r3, #3
 8005422:	2b02      	cmp	r3, #2
 8005424:	d123      	bne.n	800546e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	08da      	lsrs	r2, r3, #3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	3208      	adds	r2, #8
 800542e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005432:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	f003 0307 	and.w	r3, r3, #7
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	220f      	movs	r2, #15
 800543e:	fa02 f303 	lsl.w	r3, r2, r3
 8005442:	43db      	mvns	r3, r3
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	4013      	ands	r3, r2
 8005448:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	691a      	ldr	r2, [r3, #16]
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f003 0307 	and.w	r3, r3, #7
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	fa02 f303 	lsl.w	r3, r2, r3
 800545a:	693a      	ldr	r2, [r7, #16]
 800545c:	4313      	orrs	r3, r2
 800545e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	08da      	lsrs	r2, r3, #3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	3208      	adds	r2, #8
 8005468:	6939      	ldr	r1, [r7, #16]
 800546a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	005b      	lsls	r3, r3, #1
 8005478:	2203      	movs	r2, #3
 800547a:	fa02 f303 	lsl.w	r3, r2, r3
 800547e:	43db      	mvns	r3, r3
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	4013      	ands	r3, r2
 8005484:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f003 0203 	and.w	r2, r3, #3
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	005b      	lsls	r3, r3, #1
 8005492:	fa02 f303 	lsl.w	r3, r2, r3
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	4313      	orrs	r3, r2
 800549a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f000 80b2 	beq.w	8005614 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054b0:	4b61      	ldr	r3, [pc, #388]	; (8005638 <HAL_GPIO_Init+0x2fc>)
 80054b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054b4:	4a60      	ldr	r2, [pc, #384]	; (8005638 <HAL_GPIO_Init+0x2fc>)
 80054b6:	f043 0301 	orr.w	r3, r3, #1
 80054ba:	6613      	str	r3, [r2, #96]	; 0x60
 80054bc:	4b5e      	ldr	r3, [pc, #376]	; (8005638 <HAL_GPIO_Init+0x2fc>)
 80054be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054c0:	f003 0301 	and.w	r3, r3, #1
 80054c4:	60bb      	str	r3, [r7, #8]
 80054c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80054c8:	4a5c      	ldr	r2, [pc, #368]	; (800563c <HAL_GPIO_Init+0x300>)
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	089b      	lsrs	r3, r3, #2
 80054ce:	3302      	adds	r3, #2
 80054d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f003 0303 	and.w	r3, r3, #3
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	220f      	movs	r2, #15
 80054e0:	fa02 f303 	lsl.w	r3, r2, r3
 80054e4:	43db      	mvns	r3, r3
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	4013      	ands	r3, r2
 80054ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80054f2:	d02b      	beq.n	800554c <HAL_GPIO_Init+0x210>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a52      	ldr	r2, [pc, #328]	; (8005640 <HAL_GPIO_Init+0x304>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d025      	beq.n	8005548 <HAL_GPIO_Init+0x20c>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a51      	ldr	r2, [pc, #324]	; (8005644 <HAL_GPIO_Init+0x308>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d01f      	beq.n	8005544 <HAL_GPIO_Init+0x208>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a50      	ldr	r2, [pc, #320]	; (8005648 <HAL_GPIO_Init+0x30c>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d019      	beq.n	8005540 <HAL_GPIO_Init+0x204>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a4f      	ldr	r2, [pc, #316]	; (800564c <HAL_GPIO_Init+0x310>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d013      	beq.n	800553c <HAL_GPIO_Init+0x200>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a4e      	ldr	r2, [pc, #312]	; (8005650 <HAL_GPIO_Init+0x314>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d00d      	beq.n	8005538 <HAL_GPIO_Init+0x1fc>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a4d      	ldr	r2, [pc, #308]	; (8005654 <HAL_GPIO_Init+0x318>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d007      	beq.n	8005534 <HAL_GPIO_Init+0x1f8>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a4c      	ldr	r2, [pc, #304]	; (8005658 <HAL_GPIO_Init+0x31c>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d101      	bne.n	8005530 <HAL_GPIO_Init+0x1f4>
 800552c:	2307      	movs	r3, #7
 800552e:	e00e      	b.n	800554e <HAL_GPIO_Init+0x212>
 8005530:	2308      	movs	r3, #8
 8005532:	e00c      	b.n	800554e <HAL_GPIO_Init+0x212>
 8005534:	2306      	movs	r3, #6
 8005536:	e00a      	b.n	800554e <HAL_GPIO_Init+0x212>
 8005538:	2305      	movs	r3, #5
 800553a:	e008      	b.n	800554e <HAL_GPIO_Init+0x212>
 800553c:	2304      	movs	r3, #4
 800553e:	e006      	b.n	800554e <HAL_GPIO_Init+0x212>
 8005540:	2303      	movs	r3, #3
 8005542:	e004      	b.n	800554e <HAL_GPIO_Init+0x212>
 8005544:	2302      	movs	r3, #2
 8005546:	e002      	b.n	800554e <HAL_GPIO_Init+0x212>
 8005548:	2301      	movs	r3, #1
 800554a:	e000      	b.n	800554e <HAL_GPIO_Init+0x212>
 800554c:	2300      	movs	r3, #0
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	f002 0203 	and.w	r2, r2, #3
 8005554:	0092      	lsls	r2, r2, #2
 8005556:	4093      	lsls	r3, r2
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	4313      	orrs	r3, r2
 800555c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800555e:	4937      	ldr	r1, [pc, #220]	; (800563c <HAL_GPIO_Init+0x300>)
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	089b      	lsrs	r3, r3, #2
 8005564:	3302      	adds	r3, #2
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800556c:	4b3b      	ldr	r3, [pc, #236]	; (800565c <HAL_GPIO_Init+0x320>)
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	43db      	mvns	r3, r3
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	4013      	ands	r3, r2
 800557a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d003      	beq.n	8005590 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	4313      	orrs	r3, r2
 800558e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005590:	4a32      	ldr	r2, [pc, #200]	; (800565c <HAL_GPIO_Init+0x320>)
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005596:	4b31      	ldr	r3, [pc, #196]	; (800565c <HAL_GPIO_Init+0x320>)
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	43db      	mvns	r3, r3
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	4013      	ands	r3, r2
 80055a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80055ba:	4a28      	ldr	r2, [pc, #160]	; (800565c <HAL_GPIO_Init+0x320>)
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80055c0:	4b26      	ldr	r3, [pc, #152]	; (800565c <HAL_GPIO_Init+0x320>)
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	43db      	mvns	r3, r3
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	4013      	ands	r3, r2
 80055ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d003      	beq.n	80055e4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80055e4:	4a1d      	ldr	r2, [pc, #116]	; (800565c <HAL_GPIO_Init+0x320>)
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80055ea:	4b1c      	ldr	r3, [pc, #112]	; (800565c <HAL_GPIO_Init+0x320>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	43db      	mvns	r3, r3
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	4013      	ands	r3, r2
 80055f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d003      	beq.n	800560e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	4313      	orrs	r3, r2
 800560c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800560e:	4a13      	ldr	r2, [pc, #76]	; (800565c <HAL_GPIO_Init+0x320>)
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	3301      	adds	r3, #1
 8005618:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	fa22 f303 	lsr.w	r3, r2, r3
 8005624:	2b00      	cmp	r3, #0
 8005626:	f47f ae91 	bne.w	800534c <HAL_GPIO_Init+0x10>
  }
}
 800562a:	bf00      	nop
 800562c:	bf00      	nop
 800562e:	371c      	adds	r7, #28
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr
 8005638:	40021000 	.word	0x40021000
 800563c:	40010000 	.word	0x40010000
 8005640:	48000400 	.word	0x48000400
 8005644:	48000800 	.word	0x48000800
 8005648:	48000c00 	.word	0x48000c00
 800564c:	48001000 	.word	0x48001000
 8005650:	48001400 	.word	0x48001400
 8005654:	48001800 	.word	0x48001800
 8005658:	48001c00 	.word	0x48001c00
 800565c:	40010400 	.word	0x40010400

08005660 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	460b      	mov	r3, r1
 800566a:	807b      	strh	r3, [r7, #2]
 800566c:	4613      	mov	r3, r2
 800566e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005670:	787b      	ldrb	r3, [r7, #1]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d003      	beq.n	800567e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005676:	887a      	ldrh	r2, [r7, #2]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800567c:	e002      	b.n	8005684 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800567e:	887a      	ldrh	r2, [r7, #2]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	4603      	mov	r3, r0
 8005698:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800569a:	4b08      	ldr	r3, [pc, #32]	; (80056bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800569c:	695a      	ldr	r2, [r3, #20]
 800569e:	88fb      	ldrh	r3, [r7, #6]
 80056a0:	4013      	ands	r3, r2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d006      	beq.n	80056b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80056a6:	4a05      	ldr	r2, [pc, #20]	; (80056bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80056a8:	88fb      	ldrh	r3, [r7, #6]
 80056aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80056ac:	88fb      	ldrh	r3, [r7, #6]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7fd fbda 	bl	8002e68 <HAL_GPIO_EXTI_Callback>
  }
}
 80056b4:	bf00      	nop
 80056b6:	3708      	adds	r7, #8
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	40010400 	.word	0x40010400

080056c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d101      	bne.n	80056d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e08d      	b.n	80057ee <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d106      	bne.n	80056ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7fd fdd8 	bl	800329c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2224      	movs	r2, #36	; 0x24
 80056f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f022 0201 	bic.w	r2, r2, #1
 8005702:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685a      	ldr	r2, [r3, #4]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005710:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	689a      	ldr	r2, [r3, #8]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005720:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d107      	bne.n	800573a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	689a      	ldr	r2, [r3, #8]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005736:	609a      	str	r2, [r3, #8]
 8005738:	e006      	b.n	8005748 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	689a      	ldr	r2, [r3, #8]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005746:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	2b02      	cmp	r3, #2
 800574e:	d108      	bne.n	8005762 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800575e:	605a      	str	r2, [r3, #4]
 8005760:	e007      	b.n	8005772 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	685a      	ldr	r2, [r3, #4]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005770:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	6812      	ldr	r2, [r2, #0]
 800577c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005780:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005784:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68da      	ldr	r2, [r3, #12]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005794:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	691a      	ldr	r2, [r3, #16]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	430a      	orrs	r2, r1
 80057ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	69d9      	ldr	r1, [r3, #28]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a1a      	ldr	r2, [r3, #32]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	430a      	orrs	r2, r1
 80057be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f042 0201 	orr.w	r2, r2, #1
 80057ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2220      	movs	r2, #32
 80057da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b084      	sub	sp, #16
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005812:	2b00      	cmp	r3, #0
 8005814:	d005      	beq.n	8005822 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	68f9      	ldr	r1, [r7, #12]
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	4798      	blx	r3
  }
}
 8005822:	bf00      	nop
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b086      	sub	sp, #24
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	699b      	ldr	r3, [r3, #24]
 8005838:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00f      	beq.n	800586c <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800585a:	f043 0201 	orr.w	r2, r3, #1
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f44f 7280 	mov.w	r2, #256	; 0x100
 800586a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00f      	beq.n	8005896 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00a      	beq.n	8005896 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005884:	f043 0208 	orr.w	r2, r3, #8
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005894:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00f      	beq.n	80058c0 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00a      	beq.n	80058c0 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ae:	f043 0202 	orr.w	r2, r3, #2
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058be:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058c4:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f003 030b 	and.w	r3, r3, #11
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d003      	beq.n	80058d8 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80058d0:	68f9      	ldr	r1, [r7, #12]
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 fb82 	bl	8005fdc <I2C_ITError>
  }
}
 80058d8:	bf00      	nop
 80058da:	3718      	adds	r7, #24
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	460b      	mov	r3, r1
 8005912:	70fb      	strb	r3, [r7, #3]
 8005914:	4613      	mov	r3, r2
 8005916:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005940:	bf00      	nop
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b086      	sub	sp, #24
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005970:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800597c:	2b01      	cmp	r3, #1
 800597e:	d101      	bne.n	8005984 <I2C_Slave_ISR_IT+0x24>
 8005980:	2302      	movs	r3, #2
 8005982:	e0e1      	b.n	8005b48 <I2C_Slave_ISR_IT+0x1e8>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	f003 0320 	and.w	r3, r3, #32
 8005992:	2b00      	cmp	r3, #0
 8005994:	d008      	beq.n	80059a8 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800599c:	2b00      	cmp	r3, #0
 800599e:	d003      	beq.n	80059a8 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80059a0:	6939      	ldr	r1, [r7, #16]
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	f000 f9b4 	bl	8005d10 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	f003 0310 	and.w	r3, r3, #16
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d04b      	beq.n	8005a4a <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d046      	beq.n	8005a4a <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d128      	bne.n	8005a18 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b28      	cmp	r3, #40	; 0x28
 80059d0:	d108      	bne.n	80059e4 <I2C_Slave_ISR_IT+0x84>
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059d8:	d104      	bne.n	80059e4 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80059da:	6939      	ldr	r1, [r7, #16]
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f000 faa9 	bl	8005f34 <I2C_ITListenCplt>
 80059e2:	e031      	b.n	8005a48 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	2b29      	cmp	r3, #41	; 0x29
 80059ee:	d10e      	bne.n	8005a0e <I2C_Slave_ISR_IT+0xae>
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80059f6:	d00a      	beq.n	8005a0e <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2210      	movs	r2, #16
 80059fe:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	f000 fc02 	bl	800620a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f000 f926 	bl	8005c58 <I2C_ITSlaveSeqCplt>
 8005a0c:	e01c      	b.n	8005a48 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2210      	movs	r2, #16
 8005a14:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005a16:	e08f      	b.n	8005b38 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2210      	movs	r2, #16
 8005a1e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a24:	f043 0204 	orr.w	r2, r3, #4
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d003      	beq.n	8005a3a <I2C_Slave_ISR_IT+0xda>
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a38:	d17e      	bne.n	8005b38 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a3e:	4619      	mov	r1, r3
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	f000 facb 	bl	8005fdc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005a46:	e077      	b.n	8005b38 <I2C_Slave_ISR_IT+0x1d8>
 8005a48:	e076      	b.n	8005b38 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	f003 0304 	and.w	r3, r3, #4
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d02f      	beq.n	8005ab4 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d02a      	beq.n	8005ab4 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d018      	beq.n	8005a9a <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a72:	b2d2      	uxtb	r2, r2
 8005a74:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7a:	1c5a      	adds	r2, r3, #1
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a84:	3b01      	subs	r3, #1
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	3b01      	subs	r3, #1
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d14b      	bne.n	8005b3c <I2C_Slave_ISR_IT+0x1dc>
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005aaa:	d047      	beq.n	8005b3c <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f000 f8d3 	bl	8005c58 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005ab2:	e043      	b.n	8005b3c <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	f003 0308 	and.w	r3, r3, #8
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d009      	beq.n	8005ad2 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d004      	beq.n	8005ad2 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005ac8:	6939      	ldr	r1, [r7, #16]
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f000 f840 	bl	8005b50 <I2C_ITAddrCplt>
 8005ad0:	e035      	b.n	8005b3e <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	f003 0302 	and.w	r3, r3, #2
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d030      	beq.n	8005b3e <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d02b      	beq.n	8005b3e <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d018      	beq.n	8005b22 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	781a      	ldrb	r2, [r3, #0]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b00:	1c5a      	adds	r2, r3, #1
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	b29a      	uxth	r2, r3
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	851a      	strh	r2, [r3, #40]	; 0x28
 8005b20:	e00d      	b.n	8005b3e <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b28:	d002      	beq.n	8005b30 <I2C_Slave_ISR_IT+0x1d0>
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d106      	bne.n	8005b3e <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f000 f891 	bl	8005c58 <I2C_ITSlaveSeqCplt>
 8005b36:	e002      	b.n	8005b3e <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8005b38:	bf00      	nop
 8005b3a:	e000      	b.n	8005b3e <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8005b3c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3718      	adds	r7, #24
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005b66:	2b28      	cmp	r3, #40	; 0x28
 8005b68:	d16a      	bne.n	8005c40 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	0c1b      	lsrs	r3, r3, #16
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	0c1b      	lsrs	r3, r3, #16
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005b88:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b96:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005ba4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d138      	bne.n	8005c20 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005bae:	897b      	ldrh	r3, [r7, #10]
 8005bb0:	09db      	lsrs	r3, r3, #7
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	89bb      	ldrh	r3, [r7, #12]
 8005bb6:	4053      	eors	r3, r2
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	f003 0306 	and.w	r3, r3, #6
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d11c      	bne.n	8005bfc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005bc2:	897b      	ldrh	r3, [r7, #10]
 8005bc4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bca:	1c5a      	adds	r2, r3, #1
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d13b      	bne.n	8005c50 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2208      	movs	r2, #8
 8005be4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005bee:	89ba      	ldrh	r2, [r7, #12]
 8005bf0:	7bfb      	ldrb	r3, [r7, #15]
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f7ff fe87 	bl	8005908 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005bfa:	e029      	b.n	8005c50 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005bfc:	893b      	ldrh	r3, [r7, #8]
 8005bfe:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005c00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 fb42 	bl	800628e <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005c12:	89ba      	ldrh	r2, [r7, #12]
 8005c14:	7bfb      	ldrb	r3, [r7, #15]
 8005c16:	4619      	mov	r1, r3
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f7ff fe75 	bl	8005908 <HAL_I2C_AddrCallback>
}
 8005c1e:	e017      	b.n	8005c50 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005c20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 fb32 	bl	800628e <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005c32:	89ba      	ldrh	r2, [r7, #12]
 8005c34:	7bfb      	ldrb	r3, [r7, #15]
 8005c36:	4619      	mov	r1, r3
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f7ff fe65 	bl	8005908 <HAL_I2C_AddrCallback>
}
 8005c3e:	e007      	b.n	8005c50 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2208      	movs	r2, #8
 8005c46:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8005c50:	bf00      	nop
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d008      	beq.n	8005c8c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	e00c      	b.n	8005ca6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d007      	beq.n	8005ca6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ca4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b29      	cmp	r3, #41	; 0x29
 8005cb0:	d112      	bne.n	8005cd8 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2228      	movs	r2, #40	; 0x28
 8005cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2221      	movs	r2, #33	; 0x21
 8005cbe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005cc0:	2101      	movs	r1, #1
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 fae3 	bl	800628e <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f7ff fe05 	bl	80058e0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005cd6:	e017      	b.n	8005d08 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	2b2a      	cmp	r3, #42	; 0x2a
 8005ce2:	d111      	bne.n	8005d08 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2228      	movs	r2, #40	; 0x28
 8005ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2222      	movs	r2, #34	; 0x22
 8005cf0:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005cf2:	2102      	movs	r1, #2
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 faca 	bl	800628e <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7ff fdf6 	bl	80058f4 <HAL_I2C_SlaveRxCpltCallback>
}
 8005d08:	bf00      	nop
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b086      	sub	sp, #24
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d2c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2220      	movs	r2, #32
 8005d34:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005d36:	7bfb      	ldrb	r3, [r7, #15]
 8005d38:	2b21      	cmp	r3, #33	; 0x21
 8005d3a:	d002      	beq.n	8005d42 <I2C_ITSlaveCplt+0x32>
 8005d3c:	7bfb      	ldrb	r3, [r7, #15]
 8005d3e:	2b29      	cmp	r3, #41	; 0x29
 8005d40:	d108      	bne.n	8005d54 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005d42:	f248 0101 	movw	r1, #32769	; 0x8001
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 faa1 	bl	800628e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2221      	movs	r2, #33	; 0x21
 8005d50:	631a      	str	r2, [r3, #48]	; 0x30
 8005d52:	e019      	b.n	8005d88 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005d54:	7bfb      	ldrb	r3, [r7, #15]
 8005d56:	2b22      	cmp	r3, #34	; 0x22
 8005d58:	d002      	beq.n	8005d60 <I2C_ITSlaveCplt+0x50>
 8005d5a:	7bfb      	ldrb	r3, [r7, #15]
 8005d5c:	2b2a      	cmp	r3, #42	; 0x2a
 8005d5e:	d108      	bne.n	8005d72 <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005d60:	f248 0102 	movw	r1, #32770	; 0x8002
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 fa92 	bl	800628e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2222      	movs	r2, #34	; 0x22
 8005d6e:	631a      	str	r2, [r3, #48]	; 0x30
 8005d70:	e00a      	b.n	8005d88 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8005d72:	7bfb      	ldrb	r3, [r7, #15]
 8005d74:	2b28      	cmp	r3, #40	; 0x28
 8005d76:	d107      	bne.n	8005d88 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8005d78:	f248 0103 	movw	r1, #32771	; 0x8003
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 fa86 	bl	800628e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	685a      	ldr	r2, [r3, #4]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d96:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	6859      	ldr	r1, [r3, #4]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	4b62      	ldr	r3, [pc, #392]	; (8005f2c <I2C_ITSlaveCplt+0x21c>)
 8005da4:	400b      	ands	r3, r1
 8005da6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 fa2e 	bl	800620a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d013      	beq.n	8005de0 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005dc6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d01f      	beq.n	8005e10 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005dde:	e017      	b.n	8005e10 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d012      	beq.n	8005e10 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005df8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d006      	beq.n	8005e10 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	f003 0304 	and.w	r3, r3, #4
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d020      	beq.n	8005e5c <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	f023 0304 	bic.w	r3, r3, #4
 8005e20:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2c:	b2d2      	uxtb	r2, r2
 8005e2e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e34:	1c5a      	adds	r2, r3, #1
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00c      	beq.n	8005e5c <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e46:	3b01      	subs	r3, #1
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	3b01      	subs	r3, #1
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d005      	beq.n	8005e72 <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e6a:	f043 0204 	orr.w	r2, r3, #4
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d010      	beq.n	8005eaa <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 f8a4 	bl	8005fdc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	2b28      	cmp	r3, #40	; 0x28
 8005e9e:	d141      	bne.n	8005f24 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005ea0:	6979      	ldr	r1, [r7, #20]
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f846 	bl	8005f34 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005ea8:	e03c      	b.n	8005f24 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005eb2:	d014      	beq.n	8005ede <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f7ff fecf 	bl	8005c58 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a1c      	ldr	r2, [pc, #112]	; (8005f30 <I2C_ITSlaveCplt+0x220>)
 8005ebe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2220      	movs	r2, #32
 8005ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f7ff fd24 	bl	8005924 <HAL_I2C_ListenCpltCallback>
}
 8005edc:	e022      	b.n	8005f24 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	2b22      	cmp	r3, #34	; 0x22
 8005ee8:	d10e      	bne.n	8005f08 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2220      	movs	r2, #32
 8005eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f7ff fcf7 	bl	80058f4 <HAL_I2C_SlaveRxCpltCallback>
}
 8005f06:	e00d      	b.n	8005f24 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2220      	movs	r2, #32
 8005f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f7ff fcde 	bl	80058e0 <HAL_I2C_SlaveTxCpltCallback>
}
 8005f24:	bf00      	nop
 8005f26:	3718      	adds	r7, #24
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	fe00e800 	.word	0xfe00e800
 8005f30:	ffff0000 	.word	0xffff0000

08005f34 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a25      	ldr	r2, [pc, #148]	; (8005fd8 <I2C_ITListenCplt+0xa4>)
 8005f42:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	f003 0304 	and.w	r3, r3, #4
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d022      	beq.n	8005fb0 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f74:	b2d2      	uxtb	r2, r2
 8005f76:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7c:	1c5a      	adds	r2, r3, #1
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d012      	beq.n	8005fb0 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa8:	f043 0204 	orr.w	r2, r3, #4
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005fb0:	f248 0103 	movw	r1, #32771	; 0x8003
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 f96a 	bl	800628e <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2210      	movs	r2, #16
 8005fc0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f7ff fcaa 	bl	8005924 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005fd0:	bf00      	nop
 8005fd2:	3708      	adds	r7, #8
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	ffff0000 	.word	0xffff0000

08005fdc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fec:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a6d      	ldr	r2, [pc, #436]	; (80061b0 <I2C_ITError+0x1d4>)
 8005ffa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	431a      	orrs	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800600e:	7bfb      	ldrb	r3, [r7, #15]
 8006010:	2b28      	cmp	r3, #40	; 0x28
 8006012:	d005      	beq.n	8006020 <I2C_ITError+0x44>
 8006014:	7bfb      	ldrb	r3, [r7, #15]
 8006016:	2b29      	cmp	r3, #41	; 0x29
 8006018:	d002      	beq.n	8006020 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800601a:	7bfb      	ldrb	r3, [r7, #15]
 800601c:	2b2a      	cmp	r3, #42	; 0x2a
 800601e:	d10b      	bne.n	8006038 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006020:	2103      	movs	r1, #3
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 f933 	bl	800628e <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2228      	movs	r2, #40	; 0x28
 800602c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a60      	ldr	r2, [pc, #384]	; (80061b4 <I2C_ITError+0x1d8>)
 8006034:	635a      	str	r2, [r3, #52]	; 0x34
 8006036:	e030      	b.n	800609a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006038:	f248 0103 	movw	r1, #32771	; 0x8003
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 f926 	bl	800628e <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 f8e1 	bl	800620a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800604e:	b2db      	uxtb	r3, r3
 8006050:	2b60      	cmp	r3, #96	; 0x60
 8006052:	d01f      	beq.n	8006094 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2220      	movs	r2, #32
 8006058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	f003 0320 	and.w	r3, r3, #32
 8006066:	2b20      	cmp	r3, #32
 8006068:	d114      	bne.n	8006094 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	f003 0310 	and.w	r3, r3, #16
 8006074:	2b10      	cmp	r3, #16
 8006076:	d109      	bne.n	800608c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2210      	movs	r2, #16
 800607e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006084:	f043 0204 	orr.w	r2, r3, #4
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2220      	movs	r2, #32
 8006092:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800609e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d039      	beq.n	800611c <I2C_ITError+0x140>
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	2b11      	cmp	r3, #17
 80060ac:	d002      	beq.n	80060b4 <I2C_ITError+0xd8>
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	2b21      	cmp	r3, #33	; 0x21
 80060b2:	d133      	bne.n	800611c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060c2:	d107      	bne.n	80060d4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80060d2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d8:	4618      	mov	r0, r3
 80060da:	f7ff f880 	bl	80051de <HAL_DMA_GetState>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d017      	beq.n	8006114 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e8:	4a33      	ldr	r2, [pc, #204]	; (80061b8 <I2C_ITError+0x1dc>)
 80060ea:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7fe ff62 	bl	8004fc2 <HAL_DMA_Abort_IT>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d04d      	beq.n	80061a0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800610e:	4610      	mov	r0, r2
 8006110:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006112:	e045      	b.n	80061a0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 f851 	bl	80061bc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800611a:	e041      	b.n	80061a0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006120:	2b00      	cmp	r3, #0
 8006122:	d039      	beq.n	8006198 <I2C_ITError+0x1bc>
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	2b12      	cmp	r3, #18
 8006128:	d002      	beq.n	8006130 <I2C_ITError+0x154>
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	2b22      	cmp	r3, #34	; 0x22
 800612e:	d133      	bne.n	8006198 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800613a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800613e:	d107      	bne.n	8006150 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800614e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006154:	4618      	mov	r0, r3
 8006156:	f7ff f842 	bl	80051de <HAL_DMA_GetState>
 800615a:	4603      	mov	r3, r0
 800615c:	2b01      	cmp	r3, #1
 800615e:	d017      	beq.n	8006190 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006164:	4a14      	ldr	r2, [pc, #80]	; (80061b8 <I2C_ITError+0x1dc>)
 8006166:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006174:	4618      	mov	r0, r3
 8006176:	f7fe ff24 	bl	8004fc2 <HAL_DMA_Abort_IT>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d011      	beq.n	80061a4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800618a:	4610      	mov	r0, r2
 800618c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800618e:	e009      	b.n	80061a4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 f813 	bl	80061bc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006196:	e005      	b.n	80061a4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 f80f 	bl	80061bc <I2C_TreatErrorCallback>
  }
}
 800619e:	e002      	b.n	80061a6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80061a0:	bf00      	nop
 80061a2:	e000      	b.n	80061a6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80061a4:	bf00      	nop
}
 80061a6:	bf00      	nop
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	ffff0000 	.word	0xffff0000
 80061b4:	08005961 	.word	0x08005961
 80061b8:	08006253 	.word	0x08006253

080061bc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	2b60      	cmp	r3, #96	; 0x60
 80061ce:	d10e      	bne.n	80061ee <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2220      	movs	r2, #32
 80061d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f7ff fbb0 	bl	800594c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80061ec:	e009      	b.n	8006202 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f7ff fb9b 	bl	8005938 <HAL_I2C_ErrorCallback>
}
 8006202:	bf00      	nop
 8006204:	3708      	adds	r7, #8
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800620a:	b480      	push	{r7}
 800620c:	b083      	sub	sp, #12
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	699b      	ldr	r3, [r3, #24]
 8006218:	f003 0302 	and.w	r3, r3, #2
 800621c:	2b02      	cmp	r3, #2
 800621e:	d103      	bne.n	8006228 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2200      	movs	r2, #0
 8006226:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	2b01      	cmp	r3, #1
 8006234:	d007      	beq.n	8006246 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	699a      	ldr	r2, [r3, #24]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f042 0201 	orr.w	r2, r2, #1
 8006244:	619a      	str	r2, [r3, #24]
  }
}
 8006246:	bf00      	nop
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006252:	b580      	push	{r7, lr}
 8006254:	b084      	sub	sp, #16
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800625e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006264:	2b00      	cmp	r3, #0
 8006266:	d003      	beq.n	8006270 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626c:	2200      	movs	r2, #0
 800626e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006274:	2b00      	cmp	r3, #0
 8006276:	d003      	beq.n	8006280 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800627c:	2200      	movs	r2, #0
 800627e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f7ff ff9b 	bl	80061bc <I2C_TreatErrorCallback>
}
 8006286:	bf00      	nop
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800628e:	b480      	push	{r7}
 8006290:	b085      	sub	sp, #20
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
 8006296:	460b      	mov	r3, r1
 8006298:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800629a:	2300      	movs	r3, #0
 800629c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800629e:	887b      	ldrh	r3, [r7, #2]
 80062a0:	f003 0301 	and.w	r3, r3, #1
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00f      	beq.n	80062c8 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80062ae:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80062bc:	2b28      	cmp	r3, #40	; 0x28
 80062be:	d003      	beq.n	80062c8 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80062c6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80062c8:	887b      	ldrh	r3, [r7, #2]
 80062ca:	f003 0302 	and.w	r3, r3, #2
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00f      	beq.n	80062f2 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80062d8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80062e6:	2b28      	cmp	r3, #40	; 0x28
 80062e8:	d003      	beq.n	80062f2 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80062f0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80062f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	da03      	bge.n	8006302 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006300:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006302:	887b      	ldrh	r3, [r7, #2]
 8006304:	2b10      	cmp	r3, #16
 8006306:	d103      	bne.n	8006310 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800630e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006310:	887b      	ldrh	r3, [r7, #2]
 8006312:	2b20      	cmp	r3, #32
 8006314:	d103      	bne.n	800631e <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f043 0320 	orr.w	r3, r3, #32
 800631c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800631e:	887b      	ldrh	r3, [r7, #2]
 8006320:	2b40      	cmp	r3, #64	; 0x40
 8006322:	d103      	bne.n	800632c <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800632a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	6819      	ldr	r1, [r3, #0]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	43da      	mvns	r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	400a      	ands	r2, r1
 800633c:	601a      	str	r2, [r3, #0]
}
 800633e:	bf00      	nop
 8006340:	3714      	adds	r7, #20
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr

0800634a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800634a:	b480      	push	{r7}
 800634c:	b083      	sub	sp, #12
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
 8006352:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800635a:	b2db      	uxtb	r3, r3
 800635c:	2b20      	cmp	r3, #32
 800635e:	d138      	bne.n	80063d2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006366:	2b01      	cmp	r3, #1
 8006368:	d101      	bne.n	800636e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800636a:	2302      	movs	r3, #2
 800636c:	e032      	b.n	80063d4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2224      	movs	r2, #36	; 0x24
 800637a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f022 0201 	bic.w	r2, r2, #1
 800638c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800639c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	6819      	ldr	r1, [r3, #0]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	683a      	ldr	r2, [r7, #0]
 80063aa:	430a      	orrs	r2, r1
 80063ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f042 0201 	orr.w	r2, r2, #1
 80063bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2220      	movs	r2, #32
 80063c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80063ce:	2300      	movs	r3, #0
 80063d0:	e000      	b.n	80063d4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80063d2:	2302      	movs	r3, #2
  }
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b20      	cmp	r3, #32
 80063f4:	d139      	bne.n	800646a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d101      	bne.n	8006404 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006400:	2302      	movs	r3, #2
 8006402:	e033      	b.n	800646c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2224      	movs	r2, #36	; 0x24
 8006410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f022 0201 	bic.w	r2, r2, #1
 8006422:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006432:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	021b      	lsls	r3, r3, #8
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	4313      	orrs	r3, r2
 800643c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f042 0201 	orr.w	r2, r2, #1
 8006454:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2220      	movs	r2, #32
 800645a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006466:	2300      	movs	r3, #0
 8006468:	e000      	b.n	800646c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800646a:	2302      	movs	r3, #2
  }
}
 800646c:	4618      	mov	r0, r3
 800646e:	3714      	adds	r7, #20
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b086      	sub	sp, #24
 800647c:	af02      	add	r7, sp, #8
 800647e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006480:	2300      	movs	r3, #0
 8006482:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8006484:	f7fd fb7a 	bl	8003b7c <HAL_GetTick>
 8006488:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d102      	bne.n	8006496 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	73fb      	strb	r3, [r7, #15]
 8006494:	e092      	b.n	80065bc <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f040 808b 	bne.w	80065bc <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f7fc ffaa 	bl	8003400 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80064ac:	f241 3188 	movw	r1, #5000	; 0x1388
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 f88b 	bl	80065cc <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	689a      	ldr	r2, [r3, #8]
 80064bc:	4b42      	ldr	r3, [pc, #264]	; (80065c8 <HAL_OSPI_Init+0x150>)
 80064be:	4013      	ands	r3, r2
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	68d1      	ldr	r1, [r2, #12]
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	6912      	ldr	r2, [r2, #16]
 80064c8:	3a01      	subs	r2, #1
 80064ca:	0412      	lsls	r2, r2, #16
 80064cc:	4311      	orrs	r1, r2
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	6952      	ldr	r2, [r2, #20]
 80064d2:	3a01      	subs	r2, #1
 80064d4:	0212      	lsls	r2, r2, #8
 80064d6:	4311      	orrs	r1, r2
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80064dc:	4311      	orrs	r1, r2
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	69d2      	ldr	r2, [r2, #28]
 80064e2:	4311      	orrs	r1, r2
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	6812      	ldr	r2, [r2, #0]
 80064e8:	430b      	orrs	r3, r1
 80064ea:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	0412      	lsls	r2, r2, #16
 80064f6:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	3b01      	subs	r3, #1
 8006508:	021a      	lsls	r2, r3, #8
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	430a      	orrs	r2, r1
 8006510:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006516:	9300      	str	r3, [sp, #0]
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	2200      	movs	r2, #0
 800651c:	2120      	movs	r1, #32
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 fb98 	bl	8006c54 <OSPI_WaitFlagStateUntilTimeout>
 8006524:	4603      	mov	r3, r0
 8006526:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006528:	7bfb      	ldrb	r3, [r7, #15]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d146      	bne.n	80065bc <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a1b      	ldr	r3, [r3, #32]
 800653c:	1e5a      	subs	r2, r3, #1
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	430a      	orrs	r2, r1
 8006544:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	689a      	ldr	r2, [r3, #8]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	430a      	orrs	r2, r1
 800655a:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006564:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006570:	431a      	orrs	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	430a      	orrs	r2, r1
 8006578:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f042 0201 	orr.w	r2, r2, #1
 800658a:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	2b02      	cmp	r3, #2
 8006592:	d107      	bne.n	80065a4 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	689a      	ldr	r2, [r3, #8]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f042 0202 	orr.w	r2, r2, #2
 80065a2:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065ac:	d103      	bne.n	80065b6 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2201      	movs	r2, #1
 80065b2:	645a      	str	r2, [r3, #68]	; 0x44
 80065b4:	e002      	b.n	80065bc <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2202      	movs	r2, #2
 80065ba:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 80065bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	f8e0f8f4 	.word	0xf8e0f8f4

080065cc <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	683a      	ldr	r2, [r7, #0]
 80065da:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	370c      	adds	r7, #12
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
	...

080065ec <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b092      	sub	sp, #72	; 0x48
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065f8:	2300      	movs	r3, #0
 80065fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 80065fe:	2300      	movs	r3, #0
 8006600:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a08      	ldr	r2, [pc, #32]	; (800662c <HAL_OSPIM_Config+0x40>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d105      	bne.n	800661a <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800660e:	2300      	movs	r3, #0
 8006610:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 8006612:	2301      	movs	r3, #1
 8006614:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8006618:	e004      	b.n	8006624 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 800661a:	2301      	movs	r3, #1
 800661c:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 800661e:	2300      	movs	r3, #0
 8006620:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8006624:	2300      	movs	r3, #0
 8006626:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800662a:	e01f      	b.n	800666c <HAL_OSPIM_Config+0x80>
 800662c:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8006630:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006634:	3301      	adds	r3, #1
 8006636:	b2d8      	uxtb	r0, r3
 8006638:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800663c:	f107 0114 	add.w	r1, r7, #20
 8006640:	4613      	mov	r3, r2
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	4413      	add	r3, r2
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	440b      	add	r3, r1
 800664a:	4619      	mov	r1, r3
 800664c:	f000 fb3a 	bl	8006cc4 <OSPIM_GetConfig>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d005      	beq.n	8006662 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2208      	movs	r2, #8
 8006660:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8006662:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006666:	3301      	adds	r3, #1
 8006668:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800666c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006670:	2b01      	cmp	r3, #1
 8006672:	d9dd      	bls.n	8006630 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8006674:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006678:	2b00      	cmp	r3, #0
 800667a:	f040 82de 	bne.w	8006c3a <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800667e:	4bc6      	ldr	r3, [pc, #792]	; (8006998 <HAL_OSPIM_Config+0x3ac>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00b      	beq.n	80066a2 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800668a:	4bc3      	ldr	r3, [pc, #780]	; (8006998 <HAL_OSPIM_Config+0x3ac>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4ac2      	ldr	r2, [pc, #776]	; (8006998 <HAL_OSPIM_Config+0x3ac>)
 8006690:	f023 0301 	bic.w	r3, r3, #1
 8006694:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8006696:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800669a:	f043 0301 	orr.w	r3, r3, #1
 800669e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80066a2:	4bbe      	ldr	r3, [pc, #760]	; (800699c <HAL_OSPIM_Config+0x3b0>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00b      	beq.n	80066c6 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80066ae:	4bbb      	ldr	r3, [pc, #748]	; (800699c <HAL_OSPIM_Config+0x3b0>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4aba      	ldr	r2, [pc, #744]	; (800699c <HAL_OSPIM_Config+0x3b0>)
 80066b4:	f023 0301 	bic.w	r3, r3, #1
 80066b8:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80066ba:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80066be:	f043 0302 	orr.w	r3, r3, #2
 80066c2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80066c6:	49b6      	ldr	r1, [pc, #728]	; (80069a0 <HAL_OSPIM_Config+0x3b4>)
 80066c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066ca:	4613      	mov	r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	4413      	add	r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	3348      	adds	r3, #72	; 0x48
 80066d4:	443b      	add	r3, r7
 80066d6:	3b2c      	subs	r3, #44	; 0x2c
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	3b01      	subs	r3, #1
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	440b      	add	r3, r1
 80066e0:	6859      	ldr	r1, [r3, #4]
 80066e2:	48af      	ldr	r0, [pc, #700]	; (80069a0 <HAL_OSPIM_Config+0x3b4>)
 80066e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066e6:	4613      	mov	r3, r2
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	4413      	add	r3, r2
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	3348      	adds	r3, #72	; 0x48
 80066f0:	443b      	add	r3, r7
 80066f2:	3b2c      	subs	r3, #44	; 0x2c
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	3b01      	subs	r3, #1
 80066f8:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	4403      	add	r3, r0
 8006700:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8006702:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006704:	4613      	mov	r3, r2
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	4413      	add	r3, r2
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	3348      	adds	r3, #72	; 0x48
 800670e:	443b      	add	r3, r7
 8006710:	3b34      	subs	r3, #52	; 0x34
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	f000 80a1 	beq.w	800685c <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800671a:	49a1      	ldr	r1, [pc, #644]	; (80069a0 <HAL_OSPIM_Config+0x3b4>)
 800671c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800671e:	4613      	mov	r3, r2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	4413      	add	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	3348      	adds	r3, #72	; 0x48
 8006728:	443b      	add	r3, r7
 800672a:	3b34      	subs	r3, #52	; 0x34
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	3b01      	subs	r3, #1
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	440b      	add	r3, r1
 8006734:	6859      	ldr	r1, [r3, #4]
 8006736:	489a      	ldr	r0, [pc, #616]	; (80069a0 <HAL_OSPIM_Config+0x3b4>)
 8006738:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800673a:	4613      	mov	r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	4413      	add	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	3348      	adds	r3, #72	; 0x48
 8006744:	443b      	add	r3, r7
 8006746:	3b34      	subs	r3, #52	; 0x34
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	3b01      	subs	r3, #1
 800674c:	f021 0201 	bic.w	r2, r1, #1
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4403      	add	r3, r0
 8006754:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8006756:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006758:	4613      	mov	r3, r2
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	4413      	add	r3, r2
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	3348      	adds	r3, #72	; 0x48
 8006762:	443b      	add	r3, r7
 8006764:	3b30      	subs	r3, #48	; 0x30
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d01d      	beq.n	80067a8 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800676c:	498c      	ldr	r1, [pc, #560]	; (80069a0 <HAL_OSPIM_Config+0x3b4>)
 800676e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006770:	4613      	mov	r3, r2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4413      	add	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	3348      	adds	r3, #72	; 0x48
 800677a:	443b      	add	r3, r7
 800677c:	3b30      	subs	r3, #48	; 0x30
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	3b01      	subs	r3, #1
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	440b      	add	r3, r1
 8006786:	6859      	ldr	r1, [r3, #4]
 8006788:	4885      	ldr	r0, [pc, #532]	; (80069a0 <HAL_OSPIM_Config+0x3b4>)
 800678a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800678c:	4613      	mov	r3, r2
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	4413      	add	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	3348      	adds	r3, #72	; 0x48
 8006796:	443b      	add	r3, r7
 8006798:	3b30      	subs	r3, #48	; 0x30
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	3b01      	subs	r3, #1
 800679e:	f021 0210 	bic.w	r2, r1, #16
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	4403      	add	r3, r0
 80067a6:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80067a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067aa:	4613      	mov	r3, r2
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	4413      	add	r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	3348      	adds	r3, #72	; 0x48
 80067b4:	443b      	add	r3, r7
 80067b6:	3b28      	subs	r3, #40	; 0x28
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d021      	beq.n	8006802 <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80067be:	4978      	ldr	r1, [pc, #480]	; (80069a0 <HAL_OSPIM_Config+0x3b4>)
 80067c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067c2:	4613      	mov	r3, r2
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	4413      	add	r3, r2
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	3348      	adds	r3, #72	; 0x48
 80067cc:	443b      	add	r3, r7
 80067ce:	3b28      	subs	r3, #40	; 0x28
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3b01      	subs	r3, #1
 80067d4:	f003 0301 	and.w	r3, r3, #1
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	440b      	add	r3, r1
 80067dc:	6859      	ldr	r1, [r3, #4]
 80067de:	4870      	ldr	r0, [pc, #448]	; (80069a0 <HAL_OSPIM_Config+0x3b4>)
 80067e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067e2:	4613      	mov	r3, r2
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	4413      	add	r3, r2
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	3348      	adds	r3, #72	; 0x48
 80067ec:	443b      	add	r3, r7
 80067ee:	3b28      	subs	r3, #40	; 0x28
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	3b01      	subs	r3, #1
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	4403      	add	r3, r0
 8006800:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006802:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006804:	4613      	mov	r3, r2
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	4413      	add	r3, r2
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	3348      	adds	r3, #72	; 0x48
 800680e:	443b      	add	r3, r7
 8006810:	3b24      	subs	r3, #36	; 0x24
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d021      	beq.n	800685c <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8006818:	4961      	ldr	r1, [pc, #388]	; (80069a0 <HAL_OSPIM_Config+0x3b4>)
 800681a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800681c:	4613      	mov	r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4413      	add	r3, r2
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	3348      	adds	r3, #72	; 0x48
 8006826:	443b      	add	r3, r7
 8006828:	3b24      	subs	r3, #36	; 0x24
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	3b01      	subs	r3, #1
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	440b      	add	r3, r1
 8006836:	6859      	ldr	r1, [r3, #4]
 8006838:	4859      	ldr	r0, [pc, #356]	; (80069a0 <HAL_OSPIM_Config+0x3b4>)
 800683a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800683c:	4613      	mov	r3, r2
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4413      	add	r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	3348      	adds	r3, #72	; 0x48
 8006846:	443b      	add	r3, r7
 8006848:	3b24      	subs	r3, #36	; 0x24
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	3b01      	subs	r3, #1
 800684e:	f003 0301 	and.w	r3, r3, #1
 8006852:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4403      	add	r3, r0
 800685a:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	6819      	ldr	r1, [r3, #0]
 8006860:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006864:	4613      	mov	r3, r2
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	4413      	add	r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	3348      	adds	r3, #72	; 0x48
 800686e:	443b      	add	r3, r7
 8006870:	3b34      	subs	r3, #52	; 0x34
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4299      	cmp	r1, r3
 8006876:	d038      	beq.n	80068ea <HAL_OSPIM_Config+0x2fe>
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	6859      	ldr	r1, [r3, #4]
 800687c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006880:	4613      	mov	r3, r2
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	4413      	add	r3, r2
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	3348      	adds	r3, #72	; 0x48
 800688a:	443b      	add	r3, r7
 800688c:	3b30      	subs	r3, #48	; 0x30
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4299      	cmp	r1, r3
 8006892:	d02a      	beq.n	80068ea <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	6899      	ldr	r1, [r3, #8]
 8006898:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800689c:	4613      	mov	r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	4413      	add	r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	3348      	adds	r3, #72	; 0x48
 80068a6:	443b      	add	r3, r7
 80068a8:	3b2c      	subs	r3, #44	; 0x2c
 80068aa:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80068ac:	4299      	cmp	r1, r3
 80068ae:	d01c      	beq.n	80068ea <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	68d9      	ldr	r1, [r3, #12]
 80068b4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80068b8:	4613      	mov	r3, r2
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	4413      	add	r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	3348      	adds	r3, #72	; 0x48
 80068c2:	443b      	add	r3, r7
 80068c4:	3b28      	subs	r3, #40	; 0x28
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4299      	cmp	r1, r3
 80068ca:	d00e      	beq.n	80068ea <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	6919      	ldr	r1, [r3, #16]
 80068d0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80068d4:	4613      	mov	r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	4413      	add	r3, r2
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	3348      	adds	r3, #72	; 0x48
 80068de:	443b      	add	r3, r7
 80068e0:	3b24      	subs	r3, #36	; 0x24
 80068e2:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80068e4:	4299      	cmp	r1, r3
 80068e6:	f040 80d3 	bne.w	8006a90 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80068ea:	492d      	ldr	r1, [pc, #180]	; (80069a0 <HAL_OSPIM_Config+0x3b4>)
 80068ec:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80068f0:	4613      	mov	r3, r2
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4413      	add	r3, r2
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	3348      	adds	r3, #72	; 0x48
 80068fa:	443b      	add	r3, r7
 80068fc:	3b34      	subs	r3, #52	; 0x34
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	3b01      	subs	r3, #1
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	440b      	add	r3, r1
 8006906:	6859      	ldr	r1, [r3, #4]
 8006908:	4825      	ldr	r0, [pc, #148]	; (80069a0 <HAL_OSPIM_Config+0x3b4>)
 800690a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800690e:	4613      	mov	r3, r2
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	4413      	add	r3, r2
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	3348      	adds	r3, #72	; 0x48
 8006918:	443b      	add	r3, r7
 800691a:	3b34      	subs	r3, #52	; 0x34
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	3b01      	subs	r3, #1
 8006920:	f021 0201 	bic.w	r2, r1, #1
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4403      	add	r3, r0
 8006928:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800692a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800692e:	4613      	mov	r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	4413      	add	r3, r2
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	3348      	adds	r3, #72	; 0x48
 8006938:	443b      	add	r3, r7
 800693a:	3b30      	subs	r3, #48	; 0x30
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d01f      	beq.n	8006982 <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8006942:	4917      	ldr	r1, [pc, #92]	; (80069a0 <HAL_OSPIM_Config+0x3b4>)
 8006944:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006948:	4613      	mov	r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4413      	add	r3, r2
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	3348      	adds	r3, #72	; 0x48
 8006952:	443b      	add	r3, r7
 8006954:	3b30      	subs	r3, #48	; 0x30
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	3b01      	subs	r3, #1
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	440b      	add	r3, r1
 800695e:	6859      	ldr	r1, [r3, #4]
 8006960:	480f      	ldr	r0, [pc, #60]	; (80069a0 <HAL_OSPIM_Config+0x3b4>)
 8006962:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006966:	4613      	mov	r3, r2
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4413      	add	r3, r2
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	3348      	adds	r3, #72	; 0x48
 8006970:	443b      	add	r3, r7
 8006972:	3b30      	subs	r3, #48	; 0x30
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3b01      	subs	r3, #1
 8006978:	f021 0210 	bic.w	r2, r1, #16
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	4403      	add	r3, r0
 8006980:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8006982:	4907      	ldr	r1, [pc, #28]	; (80069a0 <HAL_OSPIM_Config+0x3b4>)
 8006984:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006988:	4613      	mov	r3, r2
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	4413      	add	r3, r2
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	3348      	adds	r3, #72	; 0x48
 8006992:	443b      	add	r3, r7
 8006994:	3b2c      	subs	r3, #44	; 0x2c
 8006996:	e005      	b.n	80069a4 <HAL_OSPIM_Config+0x3b8>
 8006998:	a0001000 	.word	0xa0001000
 800699c:	a0001400 	.word	0xa0001400
 80069a0:	50061c00 	.word	0x50061c00
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	3b01      	subs	r3, #1
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	440b      	add	r3, r1
 80069ac:	6859      	ldr	r1, [r3, #4]
 80069ae:	48a6      	ldr	r0, [pc, #664]	; (8006c48 <HAL_OSPIM_Config+0x65c>)
 80069b0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80069b4:	4613      	mov	r3, r2
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	4413      	add	r3, r2
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	3348      	adds	r3, #72	; 0x48
 80069be:	443b      	add	r3, r7
 80069c0:	3b2c      	subs	r3, #44	; 0x2c
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	3b01      	subs	r3, #1
 80069c6:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	4403      	add	r3, r0
 80069ce:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80069d0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80069d4:	4613      	mov	r3, r2
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	4413      	add	r3, r2
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	3348      	adds	r3, #72	; 0x48
 80069de:	443b      	add	r3, r7
 80069e0:	3b28      	subs	r3, #40	; 0x28
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d023      	beq.n	8006a30 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80069e8:	4997      	ldr	r1, [pc, #604]	; (8006c48 <HAL_OSPIM_Config+0x65c>)
 80069ea:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80069ee:	4613      	mov	r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	4413      	add	r3, r2
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	3348      	adds	r3, #72	; 0x48
 80069f8:	443b      	add	r3, r7
 80069fa:	3b28      	subs	r3, #40	; 0x28
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	3b01      	subs	r3, #1
 8006a00:	f003 0301 	and.w	r3, r3, #1
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	440b      	add	r3, r1
 8006a08:	6859      	ldr	r1, [r3, #4]
 8006a0a:	488f      	ldr	r0, [pc, #572]	; (8006c48 <HAL_OSPIM_Config+0x65c>)
 8006a0c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006a10:	4613      	mov	r3, r2
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	4413      	add	r3, r2
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	3348      	adds	r3, #72	; 0x48
 8006a1a:	443b      	add	r3, r7
 8006a1c:	3b28      	subs	r3, #40	; 0x28
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	3b01      	subs	r3, #1
 8006a22:	f003 0301 	and.w	r3, r3, #1
 8006a26:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	4403      	add	r3, r0
 8006a2e:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006a30:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006a34:	4613      	mov	r3, r2
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	4413      	add	r3, r2
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	3348      	adds	r3, #72	; 0x48
 8006a3e:	443b      	add	r3, r7
 8006a40:	3b24      	subs	r3, #36	; 0x24
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d023      	beq.n	8006a90 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006a48:	497f      	ldr	r1, [pc, #508]	; (8006c48 <HAL_OSPIM_Config+0x65c>)
 8006a4a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006a4e:	4613      	mov	r3, r2
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	4413      	add	r3, r2
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	3348      	adds	r3, #72	; 0x48
 8006a58:	443b      	add	r3, r7
 8006a5a:	3b24      	subs	r3, #36	; 0x24
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	f003 0301 	and.w	r3, r3, #1
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	440b      	add	r3, r1
 8006a68:	6859      	ldr	r1, [r3, #4]
 8006a6a:	4877      	ldr	r0, [pc, #476]	; (8006c48 <HAL_OSPIM_Config+0x65c>)
 8006a6c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006a70:	4613      	mov	r3, r2
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4413      	add	r3, r2
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	3348      	adds	r3, #72	; 0x48
 8006a7a:	443b      	add	r3, r7
 8006a7c:	3b24      	subs	r3, #36	; 0x24
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	3b01      	subs	r3, #1
 8006a82:	f003 0301 	and.w	r3, r3, #1
 8006a86:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	4403      	add	r3, r0
 8006a8e:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8006a90:	4a6d      	ldr	r2, [pc, #436]	; (8006c48 <HAL_OSPIM_Config+0x65c>)
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	3b01      	subs	r3, #1
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	4413      	add	r3, r2
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006aa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aa4:	025b      	lsls	r3, r3, #9
 8006aa6:	431a      	orrs	r2, r3
 8006aa8:	4967      	ldr	r1, [pc, #412]	; (8006c48 <HAL_OSPIM_Config+0x65c>)
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	440b      	add	r3, r1
 8006ab8:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8006aba:	4a63      	ldr	r2, [pc, #396]	; (8006c48 <HAL_OSPIM_Config+0x65c>)
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	4413      	add	r3, r2
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	f023 0203 	bic.w	r2, r3, #3
 8006acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ace:	005b      	lsls	r3, r3, #1
 8006ad0:	431a      	orrs	r2, r3
 8006ad2:	495d      	ldr	r1, [pc, #372]	; (8006c48 <HAL_OSPIM_Config+0x65c>)
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	f042 0201 	orr.w	r2, r2, #1
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	440b      	add	r3, r1
 8006ae2:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d014      	beq.n	8006b16 <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8006aec:	4a56      	ldr	r2, [pc, #344]	; (8006c48 <HAL_OSPIM_Config+0x65c>)
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	3b01      	subs	r3, #1
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	4413      	add	r3, r2
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006afe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b00:	015b      	lsls	r3, r3, #5
 8006b02:	431a      	orrs	r2, r3
 8006b04:	4950      	ldr	r1, [pc, #320]	; (8006c48 <HAL_OSPIM_Config+0x65c>)
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	f042 0210 	orr.w	r2, r2, #16
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	440b      	add	r3, r1
 8006b14:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d019      	beq.n	8006b56 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006b22:	4a49      	ldr	r2, [pc, #292]	; (8006c48 <HAL_OSPIM_Config+0x65c>)
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	4413      	add	r3, r2
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b3a:	049b      	lsls	r3, r3, #18
 8006b3c:	431a      	orrs	r2, r3
 8006b3e:	4942      	ldr	r1, [pc, #264]	; (8006c48 <HAL_OSPIM_Config+0x65c>)
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	3b01      	subs	r3, #1
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	440b      	add	r3, r1
 8006b52:	605a      	str	r2, [r3, #4]
 8006b54:	e01c      	b.n	8006b90 <HAL_OSPIM_Config+0x5a4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d018      	beq.n	8006b90 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006b5e:	4a3a      	ldr	r2, [pc, #232]	; (8006c48 <HAL_OSPIM_Config+0x65c>)
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	3b01      	subs	r3, #1
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006b74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b76:	069b      	lsls	r3, r3, #26
 8006b78:	431a      	orrs	r2, r3
 8006b7a:	4933      	ldr	r1, [pc, #204]	; (8006c48 <HAL_OSPIM_Config+0x65c>)
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	3b01      	subs	r3, #1
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	440b      	add	r3, r1
 8006b8e:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d019      	beq.n	8006bd0 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006b9c:	4a2a      	ldr	r2, [pc, #168]	; (8006c48 <HAL_OSPIM_Config+0x65c>)
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	f003 0301 	and.w	r3, r3, #1
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	4413      	add	r3, r2
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006bb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bb4:	049b      	lsls	r3, r3, #18
 8006bb6:	431a      	orrs	r2, r3
 8006bb8:	4923      	ldr	r1, [pc, #140]	; (8006c48 <HAL_OSPIM_Config+0x65c>)
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	f003 0301 	and.w	r3, r3, #1
 8006bc4:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	440b      	add	r3, r1
 8006bcc:	605a      	str	r2, [r3, #4]
 8006bce:	e01c      	b.n	8006c0a <HAL_OSPIM_Config+0x61e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d018      	beq.n	8006c0a <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006bd8:	4a1b      	ldr	r2, [pc, #108]	; (8006c48 <HAL_OSPIM_Config+0x65c>)
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	3b01      	subs	r3, #1
 8006be0:	f003 0301 	and.w	r3, r3, #1
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4413      	add	r3, r2
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006bee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bf0:	069b      	lsls	r3, r3, #26
 8006bf2:	431a      	orrs	r2, r3
 8006bf4:	4914      	ldr	r1, [pc, #80]	; (8006c48 <HAL_OSPIM_Config+0x65c>)
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	f003 0301 	and.w	r3, r3, #1
 8006c00:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	440b      	add	r3, r1
 8006c08:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8006c0a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006c0e:	f003 0301 	and.w	r3, r3, #1
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d005      	beq.n	8006c22 <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8006c16:	4b0d      	ldr	r3, [pc, #52]	; (8006c4c <HAL_OSPIM_Config+0x660>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a0c      	ldr	r2, [pc, #48]	; (8006c4c <HAL_OSPIM_Config+0x660>)
 8006c1c:	f043 0301 	orr.w	r3, r3, #1
 8006c20:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8006c22:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006c26:	f003 0302 	and.w	r3, r3, #2
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d005      	beq.n	8006c3a <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8006c2e:	4b08      	ldr	r3, [pc, #32]	; (8006c50 <HAL_OSPIM_Config+0x664>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a07      	ldr	r2, [pc, #28]	; (8006c50 <HAL_OSPIM_Config+0x664>)
 8006c34:	f043 0301 	orr.w	r3, r3, #1
 8006c38:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8006c3a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3748      	adds	r7, #72	; 0x48
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	50061c00 	.word	0x50061c00
 8006c4c:	a0001000 	.word	0xa0001000
 8006c50:	a0001400 	.word	0xa0001400

08006c54 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	603b      	str	r3, [r7, #0]
 8006c60:	4613      	mov	r3, r2
 8006c62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8006c64:	e01a      	b.n	8006c9c <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c6c:	d016      	beq.n	8006c9c <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c6e:	f7fc ff85 	bl	8003b7c <HAL_GetTick>
 8006c72:	4602      	mov	r2, r0
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	69ba      	ldr	r2, [r7, #24]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d302      	bcc.n	8006c84 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10b      	bne.n	8006c9c <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c8a:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c90:	f043 0201 	orr.w	r2, r3, #1
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e00e      	b.n	8006cba <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	6a1a      	ldr	r2, [r3, #32]
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	bf14      	ite	ne
 8006caa:	2301      	movne	r3, #1
 8006cac:	2300      	moveq	r3, #0
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	79fb      	ldrb	r3, [r7, #7]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d1d6      	bne.n	8006c66 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
	...

08006cc4 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b087      	sub	sp, #28
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	4603      	mov	r3, r0
 8006ccc:	6039      	str	r1, [r7, #0]
 8006cce:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8006cd8:	79fb      	ldrb	r3, [r7, #7]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d005      	beq.n	8006cea <OSPIM_GetConfig+0x26>
 8006cde:	79fb      	ldrb	r3, [r7, #7]
 8006ce0:	2b02      	cmp	r3, #2
 8006ce2:	d802      	bhi.n	8006cea <OSPIM_GetConfig+0x26>
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d102      	bne.n	8006cf0 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	75fb      	strb	r3, [r7, #23]
 8006cee:	e08e      	b.n	8006e0e <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	2200      	movs	r2, #0
 8006d06:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8006d0e:	79fb      	ldrb	r3, [r7, #7]
 8006d10:	2b02      	cmp	r3, #2
 8006d12:	d101      	bne.n	8006d18 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8006d14:	4b41      	ldr	r3, [pc, #260]	; (8006e1c <OSPIM_GetConfig+0x158>)
 8006d16:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8006d18:	2300      	movs	r3, #0
 8006d1a:	60fb      	str	r3, [r7, #12]
 8006d1c:	e074      	b.n	8006e08 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8006d1e:	4a40      	ldr	r2, [pc, #256]	; (8006e20 <OSPIM_GetConfig+0x15c>)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	4413      	add	r3, r2
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	f003 0301 	and.w	r3, r3, #1
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00a      	beq.n	8006d4a <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8006d34:	68ba      	ldr	r2, [r7, #8]
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	4053      	eors	r3, r2
 8006d3a:	f003 0302 	and.w	r3, r3, #2
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d103      	bne.n	8006d4a <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	1c5a      	adds	r2, r3, #1
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	f003 0310 	and.w	r3, r3, #16
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00a      	beq.n	8006d6a <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	4053      	eors	r3, r2
 8006d5a:	f003 0320 	and.w	r3, r3, #32
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d103      	bne.n	8006d6a <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	1c5a      	adds	r2, r3, #1
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00a      	beq.n	8006d8a <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8006d74:	68ba      	ldr	r2, [r7, #8]
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	4053      	eors	r3, r2
 8006d7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d103      	bne.n	8006d8a <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	1c5a      	adds	r2, r3, #1
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d018      	beq.n	8006dc6 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8006d94:	68ba      	ldr	r2, [r7, #8]
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	4053      	eors	r3, r2
 8006d9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d111      	bne.n	8006dc6 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d106      	bne.n	8006dba <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	3301      	adds	r3, #1
 8006db0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	60da      	str	r2, [r3, #12]
 8006db8:	e005      	b.n	8006dc6 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d018      	beq.n	8006e02 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8006dd0:	68ba      	ldr	r2, [r7, #8]
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	4053      	eors	r3, r2
 8006dd6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d111      	bne.n	8006e02 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d106      	bne.n	8006df6 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	3301      	adds	r3, #1
 8006dec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	611a      	str	r2, [r3, #16]
 8006df4:	e005      	b.n	8006e02 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	3301      	adds	r3, #1
 8006e06:	60fb      	str	r3, [r7, #12]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d987      	bls.n	8006d1e <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8006e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	371c      	adds	r7, #28
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	04040222 	.word	0x04040222
 8006e20:	50061c00 	.word	0x50061c00

08006e24 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006e24:	b480      	push	{r7}
 8006e26:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e28:	4b05      	ldr	r3, [pc, #20]	; (8006e40 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a04      	ldr	r2, [pc, #16]	; (8006e40 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e32:	6013      	str	r3, [r2, #0]
}
 8006e34:	bf00      	nop
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	40007000 	.word	0x40007000

08006e44 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006e44:	b480      	push	{r7}
 8006e46:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e48:	4b0d      	ldr	r3, [pc, #52]	; (8006e80 <HAL_PWREx_GetVoltageRange+0x3c>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e54:	d102      	bne.n	8006e5c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8006e56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e5a:	e00b      	b.n	8006e74 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8006e5c:	4b08      	ldr	r3, [pc, #32]	; (8006e80 <HAL_PWREx_GetVoltageRange+0x3c>)
 8006e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e6a:	d102      	bne.n	8006e72 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8006e6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e70:	e000      	b.n	8006e74 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8006e72:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr
 8006e7e:	bf00      	nop
 8006e80:	40007000 	.word	0x40007000

08006e84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b085      	sub	sp, #20
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d141      	bne.n	8006f16 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e92:	4b4b      	ldr	r3, [pc, #300]	; (8006fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e9e:	d131      	bne.n	8006f04 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ea0:	4b47      	ldr	r3, [pc, #284]	; (8006fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ea6:	4a46      	ldr	r2, [pc, #280]	; (8006fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ea8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006eac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006eb0:	4b43      	ldr	r3, [pc, #268]	; (8006fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006eb8:	4a41      	ldr	r2, [pc, #260]	; (8006fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ebe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8006ec0:	4b40      	ldr	r3, [pc, #256]	; (8006fc4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2232      	movs	r2, #50	; 0x32
 8006ec6:	fb02 f303 	mul.w	r3, r2, r3
 8006eca:	4a3f      	ldr	r2, [pc, #252]	; (8006fc8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ed0:	0c9b      	lsrs	r3, r3, #18
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ed6:	e002      	b.n	8006ede <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	3b01      	subs	r3, #1
 8006edc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ede:	4b38      	ldr	r3, [pc, #224]	; (8006fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ee0:	695b      	ldr	r3, [r3, #20]
 8006ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eea:	d102      	bne.n	8006ef2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1f2      	bne.n	8006ed8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006ef2:	4b33      	ldr	r3, [pc, #204]	; (8006fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ef4:	695b      	ldr	r3, [r3, #20]
 8006ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006efe:	d158      	bne.n	8006fb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006f00:	2303      	movs	r3, #3
 8006f02:	e057      	b.n	8006fb4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f04:	4b2e      	ldr	r3, [pc, #184]	; (8006fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f0a:	4a2d      	ldr	r2, [pc, #180]	; (8006fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006f14:	e04d      	b.n	8006fb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f1c:	d141      	bne.n	8006fa2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006f1e:	4b28      	ldr	r3, [pc, #160]	; (8006fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f2a:	d131      	bne.n	8006f90 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f2c:	4b24      	ldr	r3, [pc, #144]	; (8006fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f32:	4a23      	ldr	r2, [pc, #140]	; (8006fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006f3c:	4b20      	ldr	r3, [pc, #128]	; (8006fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006f44:	4a1e      	ldr	r2, [pc, #120]	; (8006fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006f4a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8006f4c:	4b1d      	ldr	r3, [pc, #116]	; (8006fc4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2232      	movs	r2, #50	; 0x32
 8006f52:	fb02 f303 	mul.w	r3, r2, r3
 8006f56:	4a1c      	ldr	r2, [pc, #112]	; (8006fc8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006f58:	fba2 2303 	umull	r2, r3, r2, r3
 8006f5c:	0c9b      	lsrs	r3, r3, #18
 8006f5e:	3301      	adds	r3, #1
 8006f60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f62:	e002      	b.n	8006f6a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	3b01      	subs	r3, #1
 8006f68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f6a:	4b15      	ldr	r3, [pc, #84]	; (8006fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f6c:	695b      	ldr	r3, [r3, #20]
 8006f6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f76:	d102      	bne.n	8006f7e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1f2      	bne.n	8006f64 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006f7e:	4b10      	ldr	r3, [pc, #64]	; (8006fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f80:	695b      	ldr	r3, [r3, #20]
 8006f82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f8a:	d112      	bne.n	8006fb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	e011      	b.n	8006fb4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f90:	4b0b      	ldr	r3, [pc, #44]	; (8006fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f96:	4a0a      	ldr	r2, [pc, #40]	; (8006fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006fa0:	e007      	b.n	8006fb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006fa2:	4b07      	ldr	r3, [pc, #28]	; (8006fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006faa:	4a05      	ldr	r2, [pc, #20]	; (8006fc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006fb0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3714      	adds	r7, #20
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr
 8006fc0:	40007000 	.word	0x40007000
 8006fc4:	20000018 	.word	0x20000018
 8006fc8:	431bde83 	.word	0x431bde83

08006fcc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b088      	sub	sp, #32
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d102      	bne.n	8006fe0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	f000 bc08 	b.w	80077f0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fe0:	4b96      	ldr	r3, [pc, #600]	; (800723c <HAL_RCC_OscConfig+0x270>)
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	f003 030c 	and.w	r3, r3, #12
 8006fe8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006fea:	4b94      	ldr	r3, [pc, #592]	; (800723c <HAL_RCC_OscConfig+0x270>)
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	f003 0303 	and.w	r3, r3, #3
 8006ff2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 0310 	and.w	r3, r3, #16
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f000 80e4 	beq.w	80071ca <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d007      	beq.n	8007018 <HAL_RCC_OscConfig+0x4c>
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	2b0c      	cmp	r3, #12
 800700c:	f040 808b 	bne.w	8007126 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	2b01      	cmp	r3, #1
 8007014:	f040 8087 	bne.w	8007126 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007018:	4b88      	ldr	r3, [pc, #544]	; (800723c <HAL_RCC_OscConfig+0x270>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 0302 	and.w	r3, r3, #2
 8007020:	2b00      	cmp	r3, #0
 8007022:	d005      	beq.n	8007030 <HAL_RCC_OscConfig+0x64>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	699b      	ldr	r3, [r3, #24]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d101      	bne.n	8007030 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e3df      	b.n	80077f0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a1a      	ldr	r2, [r3, #32]
 8007034:	4b81      	ldr	r3, [pc, #516]	; (800723c <HAL_RCC_OscConfig+0x270>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 0308 	and.w	r3, r3, #8
 800703c:	2b00      	cmp	r3, #0
 800703e:	d004      	beq.n	800704a <HAL_RCC_OscConfig+0x7e>
 8007040:	4b7e      	ldr	r3, [pc, #504]	; (800723c <HAL_RCC_OscConfig+0x270>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007048:	e005      	b.n	8007056 <HAL_RCC_OscConfig+0x8a>
 800704a:	4b7c      	ldr	r3, [pc, #496]	; (800723c <HAL_RCC_OscConfig+0x270>)
 800704c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007050:	091b      	lsrs	r3, r3, #4
 8007052:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007056:	4293      	cmp	r3, r2
 8007058:	d223      	bcs.n	80070a2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a1b      	ldr	r3, [r3, #32]
 800705e:	4618      	mov	r0, r3
 8007060:	f000 fdfe 	bl	8007c60 <RCC_SetFlashLatencyFromMSIRange>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d001      	beq.n	800706e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e3c0      	b.n	80077f0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800706e:	4b73      	ldr	r3, [pc, #460]	; (800723c <HAL_RCC_OscConfig+0x270>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a72      	ldr	r2, [pc, #456]	; (800723c <HAL_RCC_OscConfig+0x270>)
 8007074:	f043 0308 	orr.w	r3, r3, #8
 8007078:	6013      	str	r3, [r2, #0]
 800707a:	4b70      	ldr	r3, [pc, #448]	; (800723c <HAL_RCC_OscConfig+0x270>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	496d      	ldr	r1, [pc, #436]	; (800723c <HAL_RCC_OscConfig+0x270>)
 8007088:	4313      	orrs	r3, r2
 800708a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800708c:	4b6b      	ldr	r3, [pc, #428]	; (800723c <HAL_RCC_OscConfig+0x270>)
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	69db      	ldr	r3, [r3, #28]
 8007098:	021b      	lsls	r3, r3, #8
 800709a:	4968      	ldr	r1, [pc, #416]	; (800723c <HAL_RCC_OscConfig+0x270>)
 800709c:	4313      	orrs	r3, r2
 800709e:	604b      	str	r3, [r1, #4]
 80070a0:	e025      	b.n	80070ee <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80070a2:	4b66      	ldr	r3, [pc, #408]	; (800723c <HAL_RCC_OscConfig+0x270>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a65      	ldr	r2, [pc, #404]	; (800723c <HAL_RCC_OscConfig+0x270>)
 80070a8:	f043 0308 	orr.w	r3, r3, #8
 80070ac:	6013      	str	r3, [r2, #0]
 80070ae:	4b63      	ldr	r3, [pc, #396]	; (800723c <HAL_RCC_OscConfig+0x270>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a1b      	ldr	r3, [r3, #32]
 80070ba:	4960      	ldr	r1, [pc, #384]	; (800723c <HAL_RCC_OscConfig+0x270>)
 80070bc:	4313      	orrs	r3, r2
 80070be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80070c0:	4b5e      	ldr	r3, [pc, #376]	; (800723c <HAL_RCC_OscConfig+0x270>)
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	69db      	ldr	r3, [r3, #28]
 80070cc:	021b      	lsls	r3, r3, #8
 80070ce:	495b      	ldr	r1, [pc, #364]	; (800723c <HAL_RCC_OscConfig+0x270>)
 80070d0:	4313      	orrs	r3, r2
 80070d2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d109      	bne.n	80070ee <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a1b      	ldr	r3, [r3, #32]
 80070de:	4618      	mov	r0, r3
 80070e0:	f000 fdbe 	bl	8007c60 <RCC_SetFlashLatencyFromMSIRange>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d001      	beq.n	80070ee <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e380      	b.n	80077f0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80070ee:	f000 fcc1 	bl	8007a74 <HAL_RCC_GetSysClockFreq>
 80070f2:	4602      	mov	r2, r0
 80070f4:	4b51      	ldr	r3, [pc, #324]	; (800723c <HAL_RCC_OscConfig+0x270>)
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	091b      	lsrs	r3, r3, #4
 80070fa:	f003 030f 	and.w	r3, r3, #15
 80070fe:	4950      	ldr	r1, [pc, #320]	; (8007240 <HAL_RCC_OscConfig+0x274>)
 8007100:	5ccb      	ldrb	r3, [r1, r3]
 8007102:	f003 031f 	and.w	r3, r3, #31
 8007106:	fa22 f303 	lsr.w	r3, r2, r3
 800710a:	4a4e      	ldr	r2, [pc, #312]	; (8007244 <HAL_RCC_OscConfig+0x278>)
 800710c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800710e:	4b4e      	ldr	r3, [pc, #312]	; (8007248 <HAL_RCC_OscConfig+0x27c>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4618      	mov	r0, r3
 8007114:	f7fc fbda 	bl	80038cc <HAL_InitTick>
 8007118:	4603      	mov	r3, r0
 800711a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800711c:	7bfb      	ldrb	r3, [r7, #15]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d052      	beq.n	80071c8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8007122:	7bfb      	ldrb	r3, [r7, #15]
 8007124:	e364      	b.n	80077f0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	699b      	ldr	r3, [r3, #24]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d032      	beq.n	8007194 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800712e:	4b43      	ldr	r3, [pc, #268]	; (800723c <HAL_RCC_OscConfig+0x270>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a42      	ldr	r2, [pc, #264]	; (800723c <HAL_RCC_OscConfig+0x270>)
 8007134:	f043 0301 	orr.w	r3, r3, #1
 8007138:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800713a:	f7fc fd1f 	bl	8003b7c <HAL_GetTick>
 800713e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007140:	e008      	b.n	8007154 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007142:	f7fc fd1b 	bl	8003b7c <HAL_GetTick>
 8007146:	4602      	mov	r2, r0
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	2b02      	cmp	r3, #2
 800714e:	d901      	bls.n	8007154 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	e34d      	b.n	80077f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007154:	4b39      	ldr	r3, [pc, #228]	; (800723c <HAL_RCC_OscConfig+0x270>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 0302 	and.w	r3, r3, #2
 800715c:	2b00      	cmp	r3, #0
 800715e:	d0f0      	beq.n	8007142 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007160:	4b36      	ldr	r3, [pc, #216]	; (800723c <HAL_RCC_OscConfig+0x270>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a35      	ldr	r2, [pc, #212]	; (800723c <HAL_RCC_OscConfig+0x270>)
 8007166:	f043 0308 	orr.w	r3, r3, #8
 800716a:	6013      	str	r3, [r2, #0]
 800716c:	4b33      	ldr	r3, [pc, #204]	; (800723c <HAL_RCC_OscConfig+0x270>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6a1b      	ldr	r3, [r3, #32]
 8007178:	4930      	ldr	r1, [pc, #192]	; (800723c <HAL_RCC_OscConfig+0x270>)
 800717a:	4313      	orrs	r3, r2
 800717c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800717e:	4b2f      	ldr	r3, [pc, #188]	; (800723c <HAL_RCC_OscConfig+0x270>)
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	69db      	ldr	r3, [r3, #28]
 800718a:	021b      	lsls	r3, r3, #8
 800718c:	492b      	ldr	r1, [pc, #172]	; (800723c <HAL_RCC_OscConfig+0x270>)
 800718e:	4313      	orrs	r3, r2
 8007190:	604b      	str	r3, [r1, #4]
 8007192:	e01a      	b.n	80071ca <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007194:	4b29      	ldr	r3, [pc, #164]	; (800723c <HAL_RCC_OscConfig+0x270>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a28      	ldr	r2, [pc, #160]	; (800723c <HAL_RCC_OscConfig+0x270>)
 800719a:	f023 0301 	bic.w	r3, r3, #1
 800719e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80071a0:	f7fc fcec 	bl	8003b7c <HAL_GetTick>
 80071a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80071a6:	e008      	b.n	80071ba <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80071a8:	f7fc fce8 	bl	8003b7c <HAL_GetTick>
 80071ac:	4602      	mov	r2, r0
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d901      	bls.n	80071ba <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80071b6:	2303      	movs	r3, #3
 80071b8:	e31a      	b.n	80077f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80071ba:	4b20      	ldr	r3, [pc, #128]	; (800723c <HAL_RCC_OscConfig+0x270>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 0302 	and.w	r3, r3, #2
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d1f0      	bne.n	80071a8 <HAL_RCC_OscConfig+0x1dc>
 80071c6:	e000      	b.n	80071ca <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80071c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 0301 	and.w	r3, r3, #1
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d073      	beq.n	80072be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	2b08      	cmp	r3, #8
 80071da:	d005      	beq.n	80071e8 <HAL_RCC_OscConfig+0x21c>
 80071dc:	69bb      	ldr	r3, [r7, #24]
 80071de:	2b0c      	cmp	r3, #12
 80071e0:	d10e      	bne.n	8007200 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	2b03      	cmp	r3, #3
 80071e6:	d10b      	bne.n	8007200 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071e8:	4b14      	ldr	r3, [pc, #80]	; (800723c <HAL_RCC_OscConfig+0x270>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d063      	beq.n	80072bc <HAL_RCC_OscConfig+0x2f0>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d15f      	bne.n	80072bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e2f7      	b.n	80077f0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007208:	d106      	bne.n	8007218 <HAL_RCC_OscConfig+0x24c>
 800720a:	4b0c      	ldr	r3, [pc, #48]	; (800723c <HAL_RCC_OscConfig+0x270>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a0b      	ldr	r2, [pc, #44]	; (800723c <HAL_RCC_OscConfig+0x270>)
 8007210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007214:	6013      	str	r3, [r2, #0]
 8007216:	e025      	b.n	8007264 <HAL_RCC_OscConfig+0x298>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007220:	d114      	bne.n	800724c <HAL_RCC_OscConfig+0x280>
 8007222:	4b06      	ldr	r3, [pc, #24]	; (800723c <HAL_RCC_OscConfig+0x270>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a05      	ldr	r2, [pc, #20]	; (800723c <HAL_RCC_OscConfig+0x270>)
 8007228:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800722c:	6013      	str	r3, [r2, #0]
 800722e:	4b03      	ldr	r3, [pc, #12]	; (800723c <HAL_RCC_OscConfig+0x270>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a02      	ldr	r2, [pc, #8]	; (800723c <HAL_RCC_OscConfig+0x270>)
 8007234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007238:	6013      	str	r3, [r2, #0]
 800723a:	e013      	b.n	8007264 <HAL_RCC_OscConfig+0x298>
 800723c:	40021000 	.word	0x40021000
 8007240:	0800b08c 	.word	0x0800b08c
 8007244:	20000018 	.word	0x20000018
 8007248:	2000001c 	.word	0x2000001c
 800724c:	4ba0      	ldr	r3, [pc, #640]	; (80074d0 <HAL_RCC_OscConfig+0x504>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a9f      	ldr	r2, [pc, #636]	; (80074d0 <HAL_RCC_OscConfig+0x504>)
 8007252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007256:	6013      	str	r3, [r2, #0]
 8007258:	4b9d      	ldr	r3, [pc, #628]	; (80074d0 <HAL_RCC_OscConfig+0x504>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a9c      	ldr	r2, [pc, #624]	; (80074d0 <HAL_RCC_OscConfig+0x504>)
 800725e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007262:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d013      	beq.n	8007294 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800726c:	f7fc fc86 	bl	8003b7c <HAL_GetTick>
 8007270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007272:	e008      	b.n	8007286 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007274:	f7fc fc82 	bl	8003b7c <HAL_GetTick>
 8007278:	4602      	mov	r2, r0
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	2b64      	cmp	r3, #100	; 0x64
 8007280:	d901      	bls.n	8007286 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007282:	2303      	movs	r3, #3
 8007284:	e2b4      	b.n	80077f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007286:	4b92      	ldr	r3, [pc, #584]	; (80074d0 <HAL_RCC_OscConfig+0x504>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800728e:	2b00      	cmp	r3, #0
 8007290:	d0f0      	beq.n	8007274 <HAL_RCC_OscConfig+0x2a8>
 8007292:	e014      	b.n	80072be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007294:	f7fc fc72 	bl	8003b7c <HAL_GetTick>
 8007298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800729a:	e008      	b.n	80072ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800729c:	f7fc fc6e 	bl	8003b7c <HAL_GetTick>
 80072a0:	4602      	mov	r2, r0
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	2b64      	cmp	r3, #100	; 0x64
 80072a8:	d901      	bls.n	80072ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80072aa:	2303      	movs	r3, #3
 80072ac:	e2a0      	b.n	80077f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80072ae:	4b88      	ldr	r3, [pc, #544]	; (80074d0 <HAL_RCC_OscConfig+0x504>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d1f0      	bne.n	800729c <HAL_RCC_OscConfig+0x2d0>
 80072ba:	e000      	b.n	80072be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 0302 	and.w	r3, r3, #2
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d060      	beq.n	800738c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	2b04      	cmp	r3, #4
 80072ce:	d005      	beq.n	80072dc <HAL_RCC_OscConfig+0x310>
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	2b0c      	cmp	r3, #12
 80072d4:	d119      	bne.n	800730a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d116      	bne.n	800730a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072dc:	4b7c      	ldr	r3, [pc, #496]	; (80074d0 <HAL_RCC_OscConfig+0x504>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d005      	beq.n	80072f4 <HAL_RCC_OscConfig+0x328>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d101      	bne.n	80072f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	e27d      	b.n	80077f0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072f4:	4b76      	ldr	r3, [pc, #472]	; (80074d0 <HAL_RCC_OscConfig+0x504>)
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	691b      	ldr	r3, [r3, #16]
 8007300:	061b      	lsls	r3, r3, #24
 8007302:	4973      	ldr	r1, [pc, #460]	; (80074d0 <HAL_RCC_OscConfig+0x504>)
 8007304:	4313      	orrs	r3, r2
 8007306:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007308:	e040      	b.n	800738c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d023      	beq.n	800735a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007312:	4b6f      	ldr	r3, [pc, #444]	; (80074d0 <HAL_RCC_OscConfig+0x504>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a6e      	ldr	r2, [pc, #440]	; (80074d0 <HAL_RCC_OscConfig+0x504>)
 8007318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800731c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800731e:	f7fc fc2d 	bl	8003b7c <HAL_GetTick>
 8007322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007324:	e008      	b.n	8007338 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007326:	f7fc fc29 	bl	8003b7c <HAL_GetTick>
 800732a:	4602      	mov	r2, r0
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	1ad3      	subs	r3, r2, r3
 8007330:	2b02      	cmp	r3, #2
 8007332:	d901      	bls.n	8007338 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007334:	2303      	movs	r3, #3
 8007336:	e25b      	b.n	80077f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007338:	4b65      	ldr	r3, [pc, #404]	; (80074d0 <HAL_RCC_OscConfig+0x504>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007340:	2b00      	cmp	r3, #0
 8007342:	d0f0      	beq.n	8007326 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007344:	4b62      	ldr	r3, [pc, #392]	; (80074d0 <HAL_RCC_OscConfig+0x504>)
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	061b      	lsls	r3, r3, #24
 8007352:	495f      	ldr	r1, [pc, #380]	; (80074d0 <HAL_RCC_OscConfig+0x504>)
 8007354:	4313      	orrs	r3, r2
 8007356:	604b      	str	r3, [r1, #4]
 8007358:	e018      	b.n	800738c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800735a:	4b5d      	ldr	r3, [pc, #372]	; (80074d0 <HAL_RCC_OscConfig+0x504>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a5c      	ldr	r2, [pc, #368]	; (80074d0 <HAL_RCC_OscConfig+0x504>)
 8007360:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007364:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007366:	f7fc fc09 	bl	8003b7c <HAL_GetTick>
 800736a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800736c:	e008      	b.n	8007380 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800736e:	f7fc fc05 	bl	8003b7c <HAL_GetTick>
 8007372:	4602      	mov	r2, r0
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	2b02      	cmp	r3, #2
 800737a:	d901      	bls.n	8007380 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800737c:	2303      	movs	r3, #3
 800737e:	e237      	b.n	80077f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007380:	4b53      	ldr	r3, [pc, #332]	; (80074d0 <HAL_RCC_OscConfig+0x504>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007388:	2b00      	cmp	r3, #0
 800738a:	d1f0      	bne.n	800736e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 0308 	and.w	r3, r3, #8
 8007394:	2b00      	cmp	r3, #0
 8007396:	d03c      	beq.n	8007412 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	695b      	ldr	r3, [r3, #20]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d01c      	beq.n	80073da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073a0:	4b4b      	ldr	r3, [pc, #300]	; (80074d0 <HAL_RCC_OscConfig+0x504>)
 80073a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073a6:	4a4a      	ldr	r2, [pc, #296]	; (80074d0 <HAL_RCC_OscConfig+0x504>)
 80073a8:	f043 0301 	orr.w	r3, r3, #1
 80073ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073b0:	f7fc fbe4 	bl	8003b7c <HAL_GetTick>
 80073b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80073b6:	e008      	b.n	80073ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073b8:	f7fc fbe0 	bl	8003b7c <HAL_GetTick>
 80073bc:	4602      	mov	r2, r0
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d901      	bls.n	80073ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80073c6:	2303      	movs	r3, #3
 80073c8:	e212      	b.n	80077f0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80073ca:	4b41      	ldr	r3, [pc, #260]	; (80074d0 <HAL_RCC_OscConfig+0x504>)
 80073cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073d0:	f003 0302 	and.w	r3, r3, #2
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d0ef      	beq.n	80073b8 <HAL_RCC_OscConfig+0x3ec>
 80073d8:	e01b      	b.n	8007412 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073da:	4b3d      	ldr	r3, [pc, #244]	; (80074d0 <HAL_RCC_OscConfig+0x504>)
 80073dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073e0:	4a3b      	ldr	r2, [pc, #236]	; (80074d0 <HAL_RCC_OscConfig+0x504>)
 80073e2:	f023 0301 	bic.w	r3, r3, #1
 80073e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073ea:	f7fc fbc7 	bl	8003b7c <HAL_GetTick>
 80073ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80073f0:	e008      	b.n	8007404 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073f2:	f7fc fbc3 	bl	8003b7c <HAL_GetTick>
 80073f6:	4602      	mov	r2, r0
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	1ad3      	subs	r3, r2, r3
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	d901      	bls.n	8007404 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007400:	2303      	movs	r3, #3
 8007402:	e1f5      	b.n	80077f0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007404:	4b32      	ldr	r3, [pc, #200]	; (80074d0 <HAL_RCC_OscConfig+0x504>)
 8007406:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800740a:	f003 0302 	and.w	r3, r3, #2
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1ef      	bne.n	80073f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 0304 	and.w	r3, r3, #4
 800741a:	2b00      	cmp	r3, #0
 800741c:	f000 80a6 	beq.w	800756c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007420:	2300      	movs	r3, #0
 8007422:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007424:	4b2a      	ldr	r3, [pc, #168]	; (80074d0 <HAL_RCC_OscConfig+0x504>)
 8007426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800742c:	2b00      	cmp	r3, #0
 800742e:	d10d      	bne.n	800744c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007430:	4b27      	ldr	r3, [pc, #156]	; (80074d0 <HAL_RCC_OscConfig+0x504>)
 8007432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007434:	4a26      	ldr	r2, [pc, #152]	; (80074d0 <HAL_RCC_OscConfig+0x504>)
 8007436:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800743a:	6593      	str	r3, [r2, #88]	; 0x58
 800743c:	4b24      	ldr	r3, [pc, #144]	; (80074d0 <HAL_RCC_OscConfig+0x504>)
 800743e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007444:	60bb      	str	r3, [r7, #8]
 8007446:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007448:	2301      	movs	r3, #1
 800744a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800744c:	4b21      	ldr	r3, [pc, #132]	; (80074d4 <HAL_RCC_OscConfig+0x508>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007454:	2b00      	cmp	r3, #0
 8007456:	d118      	bne.n	800748a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007458:	4b1e      	ldr	r3, [pc, #120]	; (80074d4 <HAL_RCC_OscConfig+0x508>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a1d      	ldr	r2, [pc, #116]	; (80074d4 <HAL_RCC_OscConfig+0x508>)
 800745e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007462:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007464:	f7fc fb8a 	bl	8003b7c <HAL_GetTick>
 8007468:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800746a:	e008      	b.n	800747e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800746c:	f7fc fb86 	bl	8003b7c <HAL_GetTick>
 8007470:	4602      	mov	r2, r0
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	2b02      	cmp	r3, #2
 8007478:	d901      	bls.n	800747e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800747a:	2303      	movs	r3, #3
 800747c:	e1b8      	b.n	80077f0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800747e:	4b15      	ldr	r3, [pc, #84]	; (80074d4 <HAL_RCC_OscConfig+0x508>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007486:	2b00      	cmp	r3, #0
 8007488:	d0f0      	beq.n	800746c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	2b01      	cmp	r3, #1
 8007490:	d108      	bne.n	80074a4 <HAL_RCC_OscConfig+0x4d8>
 8007492:	4b0f      	ldr	r3, [pc, #60]	; (80074d0 <HAL_RCC_OscConfig+0x504>)
 8007494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007498:	4a0d      	ldr	r2, [pc, #52]	; (80074d0 <HAL_RCC_OscConfig+0x504>)
 800749a:	f043 0301 	orr.w	r3, r3, #1
 800749e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80074a2:	e029      	b.n	80074f8 <HAL_RCC_OscConfig+0x52c>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	2b05      	cmp	r3, #5
 80074aa:	d115      	bne.n	80074d8 <HAL_RCC_OscConfig+0x50c>
 80074ac:	4b08      	ldr	r3, [pc, #32]	; (80074d0 <HAL_RCC_OscConfig+0x504>)
 80074ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074b2:	4a07      	ldr	r2, [pc, #28]	; (80074d0 <HAL_RCC_OscConfig+0x504>)
 80074b4:	f043 0304 	orr.w	r3, r3, #4
 80074b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80074bc:	4b04      	ldr	r3, [pc, #16]	; (80074d0 <HAL_RCC_OscConfig+0x504>)
 80074be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074c2:	4a03      	ldr	r2, [pc, #12]	; (80074d0 <HAL_RCC_OscConfig+0x504>)
 80074c4:	f043 0301 	orr.w	r3, r3, #1
 80074c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80074cc:	e014      	b.n	80074f8 <HAL_RCC_OscConfig+0x52c>
 80074ce:	bf00      	nop
 80074d0:	40021000 	.word	0x40021000
 80074d4:	40007000 	.word	0x40007000
 80074d8:	4b9d      	ldr	r3, [pc, #628]	; (8007750 <HAL_RCC_OscConfig+0x784>)
 80074da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074de:	4a9c      	ldr	r2, [pc, #624]	; (8007750 <HAL_RCC_OscConfig+0x784>)
 80074e0:	f023 0301 	bic.w	r3, r3, #1
 80074e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80074e8:	4b99      	ldr	r3, [pc, #612]	; (8007750 <HAL_RCC_OscConfig+0x784>)
 80074ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ee:	4a98      	ldr	r2, [pc, #608]	; (8007750 <HAL_RCC_OscConfig+0x784>)
 80074f0:	f023 0304 	bic.w	r3, r3, #4
 80074f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d016      	beq.n	800752e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007500:	f7fc fb3c 	bl	8003b7c <HAL_GetTick>
 8007504:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007506:	e00a      	b.n	800751e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007508:	f7fc fb38 	bl	8003b7c <HAL_GetTick>
 800750c:	4602      	mov	r2, r0
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	1ad3      	subs	r3, r2, r3
 8007512:	f241 3288 	movw	r2, #5000	; 0x1388
 8007516:	4293      	cmp	r3, r2
 8007518:	d901      	bls.n	800751e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800751a:	2303      	movs	r3, #3
 800751c:	e168      	b.n	80077f0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800751e:	4b8c      	ldr	r3, [pc, #560]	; (8007750 <HAL_RCC_OscConfig+0x784>)
 8007520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007524:	f003 0302 	and.w	r3, r3, #2
 8007528:	2b00      	cmp	r3, #0
 800752a:	d0ed      	beq.n	8007508 <HAL_RCC_OscConfig+0x53c>
 800752c:	e015      	b.n	800755a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800752e:	f7fc fb25 	bl	8003b7c <HAL_GetTick>
 8007532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007534:	e00a      	b.n	800754c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007536:	f7fc fb21 	bl	8003b7c <HAL_GetTick>
 800753a:	4602      	mov	r2, r0
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	f241 3288 	movw	r2, #5000	; 0x1388
 8007544:	4293      	cmp	r3, r2
 8007546:	d901      	bls.n	800754c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	e151      	b.n	80077f0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800754c:	4b80      	ldr	r3, [pc, #512]	; (8007750 <HAL_RCC_OscConfig+0x784>)
 800754e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007552:	f003 0302 	and.w	r3, r3, #2
 8007556:	2b00      	cmp	r3, #0
 8007558:	d1ed      	bne.n	8007536 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800755a:	7ffb      	ldrb	r3, [r7, #31]
 800755c:	2b01      	cmp	r3, #1
 800755e:	d105      	bne.n	800756c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007560:	4b7b      	ldr	r3, [pc, #492]	; (8007750 <HAL_RCC_OscConfig+0x784>)
 8007562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007564:	4a7a      	ldr	r2, [pc, #488]	; (8007750 <HAL_RCC_OscConfig+0x784>)
 8007566:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800756a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 0320 	and.w	r3, r3, #32
 8007574:	2b00      	cmp	r3, #0
 8007576:	d03c      	beq.n	80075f2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757c:	2b00      	cmp	r3, #0
 800757e:	d01c      	beq.n	80075ba <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007580:	4b73      	ldr	r3, [pc, #460]	; (8007750 <HAL_RCC_OscConfig+0x784>)
 8007582:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007586:	4a72      	ldr	r2, [pc, #456]	; (8007750 <HAL_RCC_OscConfig+0x784>)
 8007588:	f043 0301 	orr.w	r3, r3, #1
 800758c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007590:	f7fc faf4 	bl	8003b7c <HAL_GetTick>
 8007594:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007596:	e008      	b.n	80075aa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007598:	f7fc faf0 	bl	8003b7c <HAL_GetTick>
 800759c:	4602      	mov	r2, r0
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d901      	bls.n	80075aa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80075a6:	2303      	movs	r3, #3
 80075a8:	e122      	b.n	80077f0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80075aa:	4b69      	ldr	r3, [pc, #420]	; (8007750 <HAL_RCC_OscConfig+0x784>)
 80075ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80075b0:	f003 0302 	and.w	r3, r3, #2
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d0ef      	beq.n	8007598 <HAL_RCC_OscConfig+0x5cc>
 80075b8:	e01b      	b.n	80075f2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80075ba:	4b65      	ldr	r3, [pc, #404]	; (8007750 <HAL_RCC_OscConfig+0x784>)
 80075bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80075c0:	4a63      	ldr	r2, [pc, #396]	; (8007750 <HAL_RCC_OscConfig+0x784>)
 80075c2:	f023 0301 	bic.w	r3, r3, #1
 80075c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075ca:	f7fc fad7 	bl	8003b7c <HAL_GetTick>
 80075ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80075d0:	e008      	b.n	80075e4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80075d2:	f7fc fad3 	bl	8003b7c <HAL_GetTick>
 80075d6:	4602      	mov	r2, r0
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	1ad3      	subs	r3, r2, r3
 80075dc:	2b02      	cmp	r3, #2
 80075de:	d901      	bls.n	80075e4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80075e0:	2303      	movs	r3, #3
 80075e2:	e105      	b.n	80077f0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80075e4:	4b5a      	ldr	r3, [pc, #360]	; (8007750 <HAL_RCC_OscConfig+0x784>)
 80075e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80075ea:	f003 0302 	and.w	r3, r3, #2
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1ef      	bne.n	80075d2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f000 80f9 	beq.w	80077ee <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007600:	2b02      	cmp	r3, #2
 8007602:	f040 80cf 	bne.w	80077a4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007606:	4b52      	ldr	r3, [pc, #328]	; (8007750 <HAL_RCC_OscConfig+0x784>)
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	f003 0203 	and.w	r2, r3, #3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007616:	429a      	cmp	r2, r3
 8007618:	d12c      	bne.n	8007674 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007624:	3b01      	subs	r3, #1
 8007626:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007628:	429a      	cmp	r2, r3
 800762a:	d123      	bne.n	8007674 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007636:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007638:	429a      	cmp	r2, r3
 800763a:	d11b      	bne.n	8007674 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007646:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007648:	429a      	cmp	r2, r3
 800764a:	d113      	bne.n	8007674 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007656:	085b      	lsrs	r3, r3, #1
 8007658:	3b01      	subs	r3, #1
 800765a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800765c:	429a      	cmp	r2, r3
 800765e:	d109      	bne.n	8007674 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800766a:	085b      	lsrs	r3, r3, #1
 800766c:	3b01      	subs	r3, #1
 800766e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007670:	429a      	cmp	r2, r3
 8007672:	d071      	beq.n	8007758 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	2b0c      	cmp	r3, #12
 8007678:	d068      	beq.n	800774c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800767a:	4b35      	ldr	r3, [pc, #212]	; (8007750 <HAL_RCC_OscConfig+0x784>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007682:	2b00      	cmp	r3, #0
 8007684:	d105      	bne.n	8007692 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007686:	4b32      	ldr	r3, [pc, #200]	; (8007750 <HAL_RCC_OscConfig+0x784>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800768e:	2b00      	cmp	r3, #0
 8007690:	d001      	beq.n	8007696 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	e0ac      	b.n	80077f0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007696:	4b2e      	ldr	r3, [pc, #184]	; (8007750 <HAL_RCC_OscConfig+0x784>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a2d      	ldr	r2, [pc, #180]	; (8007750 <HAL_RCC_OscConfig+0x784>)
 800769c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80076a0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80076a2:	f7fc fa6b 	bl	8003b7c <HAL_GetTick>
 80076a6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80076a8:	e008      	b.n	80076bc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076aa:	f7fc fa67 	bl	8003b7c <HAL_GetTick>
 80076ae:	4602      	mov	r2, r0
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d901      	bls.n	80076bc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80076b8:	2303      	movs	r3, #3
 80076ba:	e099      	b.n	80077f0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80076bc:	4b24      	ldr	r3, [pc, #144]	; (8007750 <HAL_RCC_OscConfig+0x784>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d1f0      	bne.n	80076aa <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80076c8:	4b21      	ldr	r3, [pc, #132]	; (8007750 <HAL_RCC_OscConfig+0x784>)
 80076ca:	68da      	ldr	r2, [r3, #12]
 80076cc:	4b21      	ldr	r3, [pc, #132]	; (8007754 <HAL_RCC_OscConfig+0x788>)
 80076ce:	4013      	ands	r3, r2
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80076d8:	3a01      	subs	r2, #1
 80076da:	0112      	lsls	r2, r2, #4
 80076dc:	4311      	orrs	r1, r2
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80076e2:	0212      	lsls	r2, r2, #8
 80076e4:	4311      	orrs	r1, r2
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80076ea:	0852      	lsrs	r2, r2, #1
 80076ec:	3a01      	subs	r2, #1
 80076ee:	0552      	lsls	r2, r2, #21
 80076f0:	4311      	orrs	r1, r2
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80076f6:	0852      	lsrs	r2, r2, #1
 80076f8:	3a01      	subs	r2, #1
 80076fa:	0652      	lsls	r2, r2, #25
 80076fc:	4311      	orrs	r1, r2
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007702:	06d2      	lsls	r2, r2, #27
 8007704:	430a      	orrs	r2, r1
 8007706:	4912      	ldr	r1, [pc, #72]	; (8007750 <HAL_RCC_OscConfig+0x784>)
 8007708:	4313      	orrs	r3, r2
 800770a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800770c:	4b10      	ldr	r3, [pc, #64]	; (8007750 <HAL_RCC_OscConfig+0x784>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a0f      	ldr	r2, [pc, #60]	; (8007750 <HAL_RCC_OscConfig+0x784>)
 8007712:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007716:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007718:	4b0d      	ldr	r3, [pc, #52]	; (8007750 <HAL_RCC_OscConfig+0x784>)
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	4a0c      	ldr	r2, [pc, #48]	; (8007750 <HAL_RCC_OscConfig+0x784>)
 800771e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007722:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007724:	f7fc fa2a 	bl	8003b7c <HAL_GetTick>
 8007728:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800772a:	e008      	b.n	800773e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800772c:	f7fc fa26 	bl	8003b7c <HAL_GetTick>
 8007730:	4602      	mov	r2, r0
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	2b02      	cmp	r3, #2
 8007738:	d901      	bls.n	800773e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800773a:	2303      	movs	r3, #3
 800773c:	e058      	b.n	80077f0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800773e:	4b04      	ldr	r3, [pc, #16]	; (8007750 <HAL_RCC_OscConfig+0x784>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007746:	2b00      	cmp	r3, #0
 8007748:	d0f0      	beq.n	800772c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800774a:	e050      	b.n	80077ee <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	e04f      	b.n	80077f0 <HAL_RCC_OscConfig+0x824>
 8007750:	40021000 	.word	0x40021000
 8007754:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007758:	4b27      	ldr	r3, [pc, #156]	; (80077f8 <HAL_RCC_OscConfig+0x82c>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007760:	2b00      	cmp	r3, #0
 8007762:	d144      	bne.n	80077ee <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007764:	4b24      	ldr	r3, [pc, #144]	; (80077f8 <HAL_RCC_OscConfig+0x82c>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a23      	ldr	r2, [pc, #140]	; (80077f8 <HAL_RCC_OscConfig+0x82c>)
 800776a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800776e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007770:	4b21      	ldr	r3, [pc, #132]	; (80077f8 <HAL_RCC_OscConfig+0x82c>)
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	4a20      	ldr	r2, [pc, #128]	; (80077f8 <HAL_RCC_OscConfig+0x82c>)
 8007776:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800777a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800777c:	f7fc f9fe 	bl	8003b7c <HAL_GetTick>
 8007780:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007782:	e008      	b.n	8007796 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007784:	f7fc f9fa 	bl	8003b7c <HAL_GetTick>
 8007788:	4602      	mov	r2, r0
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	1ad3      	subs	r3, r2, r3
 800778e:	2b02      	cmp	r3, #2
 8007790:	d901      	bls.n	8007796 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8007792:	2303      	movs	r3, #3
 8007794:	e02c      	b.n	80077f0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007796:	4b18      	ldr	r3, [pc, #96]	; (80077f8 <HAL_RCC_OscConfig+0x82c>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d0f0      	beq.n	8007784 <HAL_RCC_OscConfig+0x7b8>
 80077a2:	e024      	b.n	80077ee <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	2b0c      	cmp	r3, #12
 80077a8:	d01f      	beq.n	80077ea <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077aa:	4b13      	ldr	r3, [pc, #76]	; (80077f8 <HAL_RCC_OscConfig+0x82c>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a12      	ldr	r2, [pc, #72]	; (80077f8 <HAL_RCC_OscConfig+0x82c>)
 80077b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80077b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077b6:	f7fc f9e1 	bl	8003b7c <HAL_GetTick>
 80077ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80077bc:	e008      	b.n	80077d0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077be:	f7fc f9dd 	bl	8003b7c <HAL_GetTick>
 80077c2:	4602      	mov	r2, r0
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	1ad3      	subs	r3, r2, r3
 80077c8:	2b02      	cmp	r3, #2
 80077ca:	d901      	bls.n	80077d0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80077cc:	2303      	movs	r3, #3
 80077ce:	e00f      	b.n	80077f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80077d0:	4b09      	ldr	r3, [pc, #36]	; (80077f8 <HAL_RCC_OscConfig+0x82c>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1f0      	bne.n	80077be <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80077dc:	4b06      	ldr	r3, [pc, #24]	; (80077f8 <HAL_RCC_OscConfig+0x82c>)
 80077de:	68da      	ldr	r2, [r3, #12]
 80077e0:	4905      	ldr	r1, [pc, #20]	; (80077f8 <HAL_RCC_OscConfig+0x82c>)
 80077e2:	4b06      	ldr	r3, [pc, #24]	; (80077fc <HAL_RCC_OscConfig+0x830>)
 80077e4:	4013      	ands	r3, r2
 80077e6:	60cb      	str	r3, [r1, #12]
 80077e8:	e001      	b.n	80077ee <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e000      	b.n	80077f0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3720      	adds	r7, #32
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}
 80077f8:	40021000 	.word	0x40021000
 80077fc:	feeefffc 	.word	0xfeeefffc

08007800 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b086      	sub	sp, #24
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800780a:	2300      	movs	r3, #0
 800780c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d101      	bne.n	8007818 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e11d      	b.n	8007a54 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007818:	4b90      	ldr	r3, [pc, #576]	; (8007a5c <HAL_RCC_ClockConfig+0x25c>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 030f 	and.w	r3, r3, #15
 8007820:	683a      	ldr	r2, [r7, #0]
 8007822:	429a      	cmp	r2, r3
 8007824:	d910      	bls.n	8007848 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007826:	4b8d      	ldr	r3, [pc, #564]	; (8007a5c <HAL_RCC_ClockConfig+0x25c>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f023 020f 	bic.w	r2, r3, #15
 800782e:	498b      	ldr	r1, [pc, #556]	; (8007a5c <HAL_RCC_ClockConfig+0x25c>)
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	4313      	orrs	r3, r2
 8007834:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007836:	4b89      	ldr	r3, [pc, #548]	; (8007a5c <HAL_RCC_ClockConfig+0x25c>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f003 030f 	and.w	r3, r3, #15
 800783e:	683a      	ldr	r2, [r7, #0]
 8007840:	429a      	cmp	r2, r3
 8007842:	d001      	beq.n	8007848 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	e105      	b.n	8007a54 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 0302 	and.w	r3, r3, #2
 8007850:	2b00      	cmp	r3, #0
 8007852:	d010      	beq.n	8007876 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	689a      	ldr	r2, [r3, #8]
 8007858:	4b81      	ldr	r3, [pc, #516]	; (8007a60 <HAL_RCC_ClockConfig+0x260>)
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007860:	429a      	cmp	r2, r3
 8007862:	d908      	bls.n	8007876 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007864:	4b7e      	ldr	r3, [pc, #504]	; (8007a60 <HAL_RCC_ClockConfig+0x260>)
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	497b      	ldr	r1, [pc, #492]	; (8007a60 <HAL_RCC_ClockConfig+0x260>)
 8007872:	4313      	orrs	r3, r2
 8007874:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 0301 	and.w	r3, r3, #1
 800787e:	2b00      	cmp	r3, #0
 8007880:	d079      	beq.n	8007976 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	2b03      	cmp	r3, #3
 8007888:	d11e      	bne.n	80078c8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800788a:	4b75      	ldr	r3, [pc, #468]	; (8007a60 <HAL_RCC_ClockConfig+0x260>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007892:	2b00      	cmp	r3, #0
 8007894:	d101      	bne.n	800789a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	e0dc      	b.n	8007a54 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800789a:	f000 fa3b 	bl	8007d14 <RCC_GetSysClockFreqFromPLLSource>
 800789e:	4603      	mov	r3, r0
 80078a0:	4a70      	ldr	r2, [pc, #448]	; (8007a64 <HAL_RCC_ClockConfig+0x264>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d946      	bls.n	8007934 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80078a6:	4b6e      	ldr	r3, [pc, #440]	; (8007a60 <HAL_RCC_ClockConfig+0x260>)
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d140      	bne.n	8007934 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80078b2:	4b6b      	ldr	r3, [pc, #428]	; (8007a60 <HAL_RCC_ClockConfig+0x260>)
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078ba:	4a69      	ldr	r2, [pc, #420]	; (8007a60 <HAL_RCC_ClockConfig+0x260>)
 80078bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078c0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80078c2:	2380      	movs	r3, #128	; 0x80
 80078c4:	617b      	str	r3, [r7, #20]
 80078c6:	e035      	b.n	8007934 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	d107      	bne.n	80078e0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80078d0:	4b63      	ldr	r3, [pc, #396]	; (8007a60 <HAL_RCC_ClockConfig+0x260>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d115      	bne.n	8007908 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	e0b9      	b.n	8007a54 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d107      	bne.n	80078f8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80078e8:	4b5d      	ldr	r3, [pc, #372]	; (8007a60 <HAL_RCC_ClockConfig+0x260>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f003 0302 	and.w	r3, r3, #2
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d109      	bne.n	8007908 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	e0ad      	b.n	8007a54 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80078f8:	4b59      	ldr	r3, [pc, #356]	; (8007a60 <HAL_RCC_ClockConfig+0x260>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007900:	2b00      	cmp	r3, #0
 8007902:	d101      	bne.n	8007908 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	e0a5      	b.n	8007a54 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8007908:	f000 f8b4 	bl	8007a74 <HAL_RCC_GetSysClockFreq>
 800790c:	4603      	mov	r3, r0
 800790e:	4a55      	ldr	r2, [pc, #340]	; (8007a64 <HAL_RCC_ClockConfig+0x264>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d90f      	bls.n	8007934 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8007914:	4b52      	ldr	r3, [pc, #328]	; (8007a60 <HAL_RCC_ClockConfig+0x260>)
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d109      	bne.n	8007934 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007920:	4b4f      	ldr	r3, [pc, #316]	; (8007a60 <HAL_RCC_ClockConfig+0x260>)
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007928:	4a4d      	ldr	r2, [pc, #308]	; (8007a60 <HAL_RCC_ClockConfig+0x260>)
 800792a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800792e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007930:	2380      	movs	r3, #128	; 0x80
 8007932:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007934:	4b4a      	ldr	r3, [pc, #296]	; (8007a60 <HAL_RCC_ClockConfig+0x260>)
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	f023 0203 	bic.w	r2, r3, #3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	4947      	ldr	r1, [pc, #284]	; (8007a60 <HAL_RCC_ClockConfig+0x260>)
 8007942:	4313      	orrs	r3, r2
 8007944:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007946:	f7fc f919 	bl	8003b7c <HAL_GetTick>
 800794a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800794c:	e00a      	b.n	8007964 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800794e:	f7fc f915 	bl	8003b7c <HAL_GetTick>
 8007952:	4602      	mov	r2, r0
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	1ad3      	subs	r3, r2, r3
 8007958:	f241 3288 	movw	r2, #5000	; 0x1388
 800795c:	4293      	cmp	r3, r2
 800795e:	d901      	bls.n	8007964 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8007960:	2303      	movs	r3, #3
 8007962:	e077      	b.n	8007a54 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007964:	4b3e      	ldr	r3, [pc, #248]	; (8007a60 <HAL_RCC_ClockConfig+0x260>)
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	f003 020c 	and.w	r2, r3, #12
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	429a      	cmp	r2, r3
 8007974:	d1eb      	bne.n	800794e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	2b80      	cmp	r3, #128	; 0x80
 800797a:	d105      	bne.n	8007988 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800797c:	4b38      	ldr	r3, [pc, #224]	; (8007a60 <HAL_RCC_ClockConfig+0x260>)
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	4a37      	ldr	r2, [pc, #220]	; (8007a60 <HAL_RCC_ClockConfig+0x260>)
 8007982:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007986:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0302 	and.w	r3, r3, #2
 8007990:	2b00      	cmp	r3, #0
 8007992:	d010      	beq.n	80079b6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	689a      	ldr	r2, [r3, #8]
 8007998:	4b31      	ldr	r3, [pc, #196]	; (8007a60 <HAL_RCC_ClockConfig+0x260>)
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d208      	bcs.n	80079b6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079a4:	4b2e      	ldr	r3, [pc, #184]	; (8007a60 <HAL_RCC_ClockConfig+0x260>)
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	492b      	ldr	r1, [pc, #172]	; (8007a60 <HAL_RCC_ClockConfig+0x260>)
 80079b2:	4313      	orrs	r3, r2
 80079b4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80079b6:	4b29      	ldr	r3, [pc, #164]	; (8007a5c <HAL_RCC_ClockConfig+0x25c>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f003 030f 	and.w	r3, r3, #15
 80079be:	683a      	ldr	r2, [r7, #0]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d210      	bcs.n	80079e6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079c4:	4b25      	ldr	r3, [pc, #148]	; (8007a5c <HAL_RCC_ClockConfig+0x25c>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f023 020f 	bic.w	r2, r3, #15
 80079cc:	4923      	ldr	r1, [pc, #140]	; (8007a5c <HAL_RCC_ClockConfig+0x25c>)
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	4313      	orrs	r3, r2
 80079d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80079d4:	4b21      	ldr	r3, [pc, #132]	; (8007a5c <HAL_RCC_ClockConfig+0x25c>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 030f 	and.w	r3, r3, #15
 80079dc:	683a      	ldr	r2, [r7, #0]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d001      	beq.n	80079e6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e036      	b.n	8007a54 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 0304 	and.w	r3, r3, #4
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d008      	beq.n	8007a04 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80079f2:	4b1b      	ldr	r3, [pc, #108]	; (8007a60 <HAL_RCC_ClockConfig+0x260>)
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	4918      	ldr	r1, [pc, #96]	; (8007a60 <HAL_RCC_ClockConfig+0x260>)
 8007a00:	4313      	orrs	r3, r2
 8007a02:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 0308 	and.w	r3, r3, #8
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d009      	beq.n	8007a24 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007a10:	4b13      	ldr	r3, [pc, #76]	; (8007a60 <HAL_RCC_ClockConfig+0x260>)
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	691b      	ldr	r3, [r3, #16]
 8007a1c:	00db      	lsls	r3, r3, #3
 8007a1e:	4910      	ldr	r1, [pc, #64]	; (8007a60 <HAL_RCC_ClockConfig+0x260>)
 8007a20:	4313      	orrs	r3, r2
 8007a22:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007a24:	f000 f826 	bl	8007a74 <HAL_RCC_GetSysClockFreq>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	4b0d      	ldr	r3, [pc, #52]	; (8007a60 <HAL_RCC_ClockConfig+0x260>)
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	091b      	lsrs	r3, r3, #4
 8007a30:	f003 030f 	and.w	r3, r3, #15
 8007a34:	490c      	ldr	r1, [pc, #48]	; (8007a68 <HAL_RCC_ClockConfig+0x268>)
 8007a36:	5ccb      	ldrb	r3, [r1, r3]
 8007a38:	f003 031f 	and.w	r3, r3, #31
 8007a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8007a40:	4a0a      	ldr	r2, [pc, #40]	; (8007a6c <HAL_RCC_ClockConfig+0x26c>)
 8007a42:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007a44:	4b0a      	ldr	r3, [pc, #40]	; (8007a70 <HAL_RCC_ClockConfig+0x270>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f7fb ff3f 	bl	80038cc <HAL_InitTick>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	73fb      	strb	r3, [r7, #15]

  return status;
 8007a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3718      	adds	r7, #24
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}
 8007a5c:	40022000 	.word	0x40022000
 8007a60:	40021000 	.word	0x40021000
 8007a64:	04c4b400 	.word	0x04c4b400
 8007a68:	0800b08c 	.word	0x0800b08c
 8007a6c:	20000018 	.word	0x20000018
 8007a70:	2000001c 	.word	0x2000001c

08007a74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b089      	sub	sp, #36	; 0x24
 8007a78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	61fb      	str	r3, [r7, #28]
 8007a7e:	2300      	movs	r3, #0
 8007a80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a82:	4b3e      	ldr	r3, [pc, #248]	; (8007b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	f003 030c 	and.w	r3, r3, #12
 8007a8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007a8c:	4b3b      	ldr	r3, [pc, #236]	; (8007b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	f003 0303 	and.w	r3, r3, #3
 8007a94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d005      	beq.n	8007aa8 <HAL_RCC_GetSysClockFreq+0x34>
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	2b0c      	cmp	r3, #12
 8007aa0:	d121      	bne.n	8007ae6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d11e      	bne.n	8007ae6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007aa8:	4b34      	ldr	r3, [pc, #208]	; (8007b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 0308 	and.w	r3, r3, #8
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d107      	bne.n	8007ac4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007ab4:	4b31      	ldr	r3, [pc, #196]	; (8007b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8007ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007aba:	0a1b      	lsrs	r3, r3, #8
 8007abc:	f003 030f 	and.w	r3, r3, #15
 8007ac0:	61fb      	str	r3, [r7, #28]
 8007ac2:	e005      	b.n	8007ad0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007ac4:	4b2d      	ldr	r3, [pc, #180]	; (8007b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	091b      	lsrs	r3, r3, #4
 8007aca:	f003 030f 	and.w	r3, r3, #15
 8007ace:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007ad0:	4a2b      	ldr	r2, [pc, #172]	; (8007b80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007ad2:	69fb      	ldr	r3, [r7, #28]
 8007ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ad8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d10d      	bne.n	8007afc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007ae4:	e00a      	b.n	8007afc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	2b04      	cmp	r3, #4
 8007aea:	d102      	bne.n	8007af2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007aec:	4b25      	ldr	r3, [pc, #148]	; (8007b84 <HAL_RCC_GetSysClockFreq+0x110>)
 8007aee:	61bb      	str	r3, [r7, #24]
 8007af0:	e004      	b.n	8007afc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	2b08      	cmp	r3, #8
 8007af6:	d101      	bne.n	8007afc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007af8:	4b23      	ldr	r3, [pc, #140]	; (8007b88 <HAL_RCC_GetSysClockFreq+0x114>)
 8007afa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	2b0c      	cmp	r3, #12
 8007b00:	d134      	bne.n	8007b6c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007b02:	4b1e      	ldr	r3, [pc, #120]	; (8007b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8007b04:	68db      	ldr	r3, [r3, #12]
 8007b06:	f003 0303 	and.w	r3, r3, #3
 8007b0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	2b02      	cmp	r3, #2
 8007b10:	d003      	beq.n	8007b1a <HAL_RCC_GetSysClockFreq+0xa6>
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	2b03      	cmp	r3, #3
 8007b16:	d003      	beq.n	8007b20 <HAL_RCC_GetSysClockFreq+0xac>
 8007b18:	e005      	b.n	8007b26 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007b1a:	4b1a      	ldr	r3, [pc, #104]	; (8007b84 <HAL_RCC_GetSysClockFreq+0x110>)
 8007b1c:	617b      	str	r3, [r7, #20]
      break;
 8007b1e:	e005      	b.n	8007b2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007b20:	4b19      	ldr	r3, [pc, #100]	; (8007b88 <HAL_RCC_GetSysClockFreq+0x114>)
 8007b22:	617b      	str	r3, [r7, #20]
      break;
 8007b24:	e002      	b.n	8007b2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	617b      	str	r3, [r7, #20]
      break;
 8007b2a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007b2c:	4b13      	ldr	r3, [pc, #76]	; (8007b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	091b      	lsrs	r3, r3, #4
 8007b32:	f003 030f 	and.w	r3, r3, #15
 8007b36:	3301      	adds	r3, #1
 8007b38:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007b3a:	4b10      	ldr	r3, [pc, #64]	; (8007b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	0a1b      	lsrs	r3, r3, #8
 8007b40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b44:	697a      	ldr	r2, [r7, #20]
 8007b46:	fb03 f202 	mul.w	r2, r3, r2
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b50:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007b52:	4b0a      	ldr	r3, [pc, #40]	; (8007b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	0e5b      	lsrs	r3, r3, #25
 8007b58:	f003 0303 	and.w	r3, r3, #3
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	005b      	lsls	r3, r3, #1
 8007b60:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007b62:	697a      	ldr	r2, [r7, #20]
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b6a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007b6c:	69bb      	ldr	r3, [r7, #24]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3724      	adds	r7, #36	; 0x24
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	40021000 	.word	0x40021000
 8007b80:	0800b0a4 	.word	0x0800b0a4
 8007b84:	00f42400 	.word	0x00f42400
 8007b88:	007a1200 	.word	0x007a1200

08007b8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b90:	4b03      	ldr	r3, [pc, #12]	; (8007ba0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007b92:	681b      	ldr	r3, [r3, #0]
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop
 8007ba0:	20000018 	.word	0x20000018

08007ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007ba8:	f7ff fff0 	bl	8007b8c <HAL_RCC_GetHCLKFreq>
 8007bac:	4602      	mov	r2, r0
 8007bae:	4b06      	ldr	r3, [pc, #24]	; (8007bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	0a1b      	lsrs	r3, r3, #8
 8007bb4:	f003 0307 	and.w	r3, r3, #7
 8007bb8:	4904      	ldr	r1, [pc, #16]	; (8007bcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8007bba:	5ccb      	ldrb	r3, [r1, r3]
 8007bbc:	f003 031f 	and.w	r3, r3, #31
 8007bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	40021000 	.word	0x40021000
 8007bcc:	0800b09c 	.word	0x0800b09c

08007bd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007bd4:	f7ff ffda 	bl	8007b8c <HAL_RCC_GetHCLKFreq>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	4b06      	ldr	r3, [pc, #24]	; (8007bf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	0adb      	lsrs	r3, r3, #11
 8007be0:	f003 0307 	and.w	r3, r3, #7
 8007be4:	4904      	ldr	r1, [pc, #16]	; (8007bf8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007be6:	5ccb      	ldrb	r3, [r1, r3]
 8007be8:	f003 031f 	and.w	r3, r3, #31
 8007bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	40021000 	.word	0x40021000
 8007bf8:	0800b09c 	.word	0x0800b09c

08007bfc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	220f      	movs	r2, #15
 8007c0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8007c0c:	4b12      	ldr	r3, [pc, #72]	; (8007c58 <HAL_RCC_GetClockConfig+0x5c>)
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	f003 0203 	and.w	r2, r3, #3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8007c18:	4b0f      	ldr	r3, [pc, #60]	; (8007c58 <HAL_RCC_GetClockConfig+0x5c>)
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007c24:	4b0c      	ldr	r3, [pc, #48]	; (8007c58 <HAL_RCC_GetClockConfig+0x5c>)
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007c30:	4b09      	ldr	r3, [pc, #36]	; (8007c58 <HAL_RCC_GetClockConfig+0x5c>)
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	08db      	lsrs	r3, r3, #3
 8007c36:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007c3e:	4b07      	ldr	r3, [pc, #28]	; (8007c5c <HAL_RCC_GetClockConfig+0x60>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f003 020f 	and.w	r2, r3, #15
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	601a      	str	r2, [r3, #0]
}
 8007c4a:	bf00      	nop
 8007c4c:	370c      	adds	r7, #12
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr
 8007c56:	bf00      	nop
 8007c58:	40021000 	.word	0x40021000
 8007c5c:	40022000 	.word	0x40022000

08007c60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b086      	sub	sp, #24
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007c68:	2300      	movs	r3, #0
 8007c6a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007c6c:	4b27      	ldr	r3, [pc, #156]	; (8007d0c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d003      	beq.n	8007c80 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007c78:	f7ff f8e4 	bl	8006e44 <HAL_PWREx_GetVoltageRange>
 8007c7c:	6178      	str	r0, [r7, #20]
 8007c7e:	e014      	b.n	8007caa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007c80:	4b22      	ldr	r3, [pc, #136]	; (8007d0c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c84:	4a21      	ldr	r2, [pc, #132]	; (8007d0c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007c86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c8a:	6593      	str	r3, [r2, #88]	; 0x58
 8007c8c:	4b1f      	ldr	r3, [pc, #124]	; (8007d0c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c94:	60fb      	str	r3, [r7, #12]
 8007c96:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007c98:	f7ff f8d4 	bl	8006e44 <HAL_PWREx_GetVoltageRange>
 8007c9c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007c9e:	4b1b      	ldr	r3, [pc, #108]	; (8007d0c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ca2:	4a1a      	ldr	r2, [pc, #104]	; (8007d0c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007ca4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ca8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cb0:	d10b      	bne.n	8007cca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2b80      	cmp	r3, #128	; 0x80
 8007cb6:	d913      	bls.n	8007ce0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2ba0      	cmp	r3, #160	; 0xa0
 8007cbc:	d902      	bls.n	8007cc4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007cbe:	2302      	movs	r3, #2
 8007cc0:	613b      	str	r3, [r7, #16]
 8007cc2:	e00d      	b.n	8007ce0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	613b      	str	r3, [r7, #16]
 8007cc8:	e00a      	b.n	8007ce0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2b7f      	cmp	r3, #127	; 0x7f
 8007cce:	d902      	bls.n	8007cd6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8007cd0:	2302      	movs	r3, #2
 8007cd2:	613b      	str	r3, [r7, #16]
 8007cd4:	e004      	b.n	8007ce0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2b70      	cmp	r3, #112	; 0x70
 8007cda:	d101      	bne.n	8007ce0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007cdc:	2301      	movs	r3, #1
 8007cde:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007ce0:	4b0b      	ldr	r3, [pc, #44]	; (8007d10 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f023 020f 	bic.w	r2, r3, #15
 8007ce8:	4909      	ldr	r1, [pc, #36]	; (8007d10 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	4313      	orrs	r3, r2
 8007cee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007cf0:	4b07      	ldr	r3, [pc, #28]	; (8007d10 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f003 030f 	and.w	r3, r3, #15
 8007cf8:	693a      	ldr	r2, [r7, #16]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d001      	beq.n	8007d02 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e000      	b.n	8007d04 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8007d02:	2300      	movs	r3, #0
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3718      	adds	r7, #24
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	40021000 	.word	0x40021000
 8007d10:	40022000 	.word	0x40022000

08007d14 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b087      	sub	sp, #28
 8007d18:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007d1a:	4b2d      	ldr	r3, [pc, #180]	; (8007dd0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	f003 0303 	and.w	r3, r3, #3
 8007d22:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2b03      	cmp	r3, #3
 8007d28:	d00b      	beq.n	8007d42 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2b03      	cmp	r3, #3
 8007d2e:	d825      	bhi.n	8007d7c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d008      	beq.n	8007d48 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2b02      	cmp	r3, #2
 8007d3a:	d11f      	bne.n	8007d7c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8007d3c:	4b25      	ldr	r3, [pc, #148]	; (8007dd4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007d3e:	613b      	str	r3, [r7, #16]
    break;
 8007d40:	e01f      	b.n	8007d82 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8007d42:	4b25      	ldr	r3, [pc, #148]	; (8007dd8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8007d44:	613b      	str	r3, [r7, #16]
    break;
 8007d46:	e01c      	b.n	8007d82 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007d48:	4b21      	ldr	r3, [pc, #132]	; (8007dd0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f003 0308 	and.w	r3, r3, #8
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d107      	bne.n	8007d64 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007d54:	4b1e      	ldr	r3, [pc, #120]	; (8007dd0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d5a:	0a1b      	lsrs	r3, r3, #8
 8007d5c:	f003 030f 	and.w	r3, r3, #15
 8007d60:	617b      	str	r3, [r7, #20]
 8007d62:	e005      	b.n	8007d70 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007d64:	4b1a      	ldr	r3, [pc, #104]	; (8007dd0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	091b      	lsrs	r3, r3, #4
 8007d6a:	f003 030f 	and.w	r3, r3, #15
 8007d6e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8007d70:	4a1a      	ldr	r2, [pc, #104]	; (8007ddc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d78:	613b      	str	r3, [r7, #16]
    break;
 8007d7a:	e002      	b.n	8007d82 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	613b      	str	r3, [r7, #16]
    break;
 8007d80:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007d82:	4b13      	ldr	r3, [pc, #76]	; (8007dd0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	091b      	lsrs	r3, r3, #4
 8007d88:	f003 030f 	and.w	r3, r3, #15
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007d90:	4b0f      	ldr	r3, [pc, #60]	; (8007dd0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	0a1b      	lsrs	r3, r3, #8
 8007d96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d9a:	693a      	ldr	r2, [r7, #16]
 8007d9c:	fb03 f202 	mul.w	r2, r3, r2
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007da6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007da8:	4b09      	ldr	r3, [pc, #36]	; (8007dd0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	0e5b      	lsrs	r3, r3, #25
 8007dae:	f003 0303 	and.w	r3, r3, #3
 8007db2:	3301      	adds	r3, #1
 8007db4:	005b      	lsls	r3, r3, #1
 8007db6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8007db8:	693a      	ldr	r2, [r7, #16]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dc0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8007dc2:	683b      	ldr	r3, [r7, #0]
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	371c      	adds	r7, #28
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr
 8007dd0:	40021000 	.word	0x40021000
 8007dd4:	00f42400 	.word	0x00f42400
 8007dd8:	007a1200 	.word	0x007a1200
 8007ddc:	0800b0a4 	.word	0x0800b0a4

08007de0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b086      	sub	sp, #24
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007de8:	2300      	movs	r3, #0
 8007dea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007dec:	2300      	movs	r3, #0
 8007dee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d040      	beq.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e00:	2b80      	cmp	r3, #128	; 0x80
 8007e02:	d02a      	beq.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007e04:	2b80      	cmp	r3, #128	; 0x80
 8007e06:	d825      	bhi.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007e08:	2b60      	cmp	r3, #96	; 0x60
 8007e0a:	d026      	beq.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007e0c:	2b60      	cmp	r3, #96	; 0x60
 8007e0e:	d821      	bhi.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007e10:	2b40      	cmp	r3, #64	; 0x40
 8007e12:	d006      	beq.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8007e14:	2b40      	cmp	r3, #64	; 0x40
 8007e16:	d81d      	bhi.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d009      	beq.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8007e1c:	2b20      	cmp	r3, #32
 8007e1e:	d010      	beq.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8007e20:	e018      	b.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007e22:	4b89      	ldr	r3, [pc, #548]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007e24:	68db      	ldr	r3, [r3, #12]
 8007e26:	4a88      	ldr	r2, [pc, #544]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e2c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007e2e:	e015      	b.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	3304      	adds	r3, #4
 8007e34:	2100      	movs	r1, #0
 8007e36:	4618      	mov	r0, r3
 8007e38:	f000 fb12 	bl	8008460 <RCCEx_PLLSAI1_Config>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007e40:	e00c      	b.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	3320      	adds	r3, #32
 8007e46:	2100      	movs	r1, #0
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f000 fbfd 	bl	8008648 <RCCEx_PLLSAI2_Config>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007e52:	e003      	b.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e54:	2301      	movs	r3, #1
 8007e56:	74fb      	strb	r3, [r7, #19]
      break;
 8007e58:	e000      	b.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8007e5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e5c:	7cfb      	ldrb	r3, [r7, #19]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d10b      	bne.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007e62:	4b79      	ldr	r3, [pc, #484]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007e64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e68:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e70:	4975      	ldr	r1, [pc, #468]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007e72:	4313      	orrs	r3, r2
 8007e74:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8007e78:	e001      	b.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e7a:	7cfb      	ldrb	r3, [r7, #19]
 8007e7c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d047      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e92:	d030      	beq.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e98:	d82a      	bhi.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007e9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e9e:	d02a      	beq.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007ea0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ea4:	d824      	bhi.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007ea6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007eaa:	d008      	beq.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0xde>
 8007eac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007eb0:	d81e      	bhi.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d00a      	beq.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0xec>
 8007eb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007eba:	d010      	beq.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007ebc:	e018      	b.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007ebe:	4b62      	ldr	r3, [pc, #392]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007ec0:	68db      	ldr	r3, [r3, #12]
 8007ec2:	4a61      	ldr	r2, [pc, #388]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ec8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007eca:	e015      	b.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	3304      	adds	r3, #4
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f000 fac4 	bl	8008460 <RCCEx_PLLSAI1_Config>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007edc:	e00c      	b.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	3320      	adds	r3, #32
 8007ee2:	2100      	movs	r1, #0
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f000 fbaf 	bl	8008648 <RCCEx_PLLSAI2_Config>
 8007eea:	4603      	mov	r3, r0
 8007eec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007eee:	e003      	b.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	74fb      	strb	r3, [r7, #19]
      break;
 8007ef4:	e000      	b.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8007ef6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ef8:	7cfb      	ldrb	r3, [r7, #19]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d10b      	bne.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007efe:	4b52      	ldr	r3, [pc, #328]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007f00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f0c:	494e      	ldr	r1, [pc, #312]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8007f14:	e001      	b.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f16:	7cfb      	ldrb	r3, [r7, #19]
 8007f18:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	f000 809f 	beq.w	8008066 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007f2c:	4b46      	ldr	r3, [pc, #280]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d101      	bne.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007f38:	2301      	movs	r3, #1
 8007f3a:	e000      	b.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d00d      	beq.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f42:	4b41      	ldr	r3, [pc, #260]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f46:	4a40      	ldr	r2, [pc, #256]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f4c:	6593      	str	r3, [r2, #88]	; 0x58
 8007f4e:	4b3e      	ldr	r3, [pc, #248]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f56:	60bb      	str	r3, [r7, #8]
 8007f58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007f5e:	4b3b      	ldr	r3, [pc, #236]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a3a      	ldr	r2, [pc, #232]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007f6a:	f7fb fe07 	bl	8003b7c <HAL_GetTick>
 8007f6e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007f70:	e009      	b.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f72:	f7fb fe03 	bl	8003b7c <HAL_GetTick>
 8007f76:	4602      	mov	r2, r0
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	1ad3      	subs	r3, r2, r3
 8007f7c:	2b02      	cmp	r3, #2
 8007f7e:	d902      	bls.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8007f80:	2303      	movs	r3, #3
 8007f82:	74fb      	strb	r3, [r7, #19]
        break;
 8007f84:	e005      	b.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007f86:	4b31      	ldr	r3, [pc, #196]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d0ef      	beq.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8007f92:	7cfb      	ldrb	r3, [r7, #19]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d15b      	bne.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007f98:	4b2b      	ldr	r3, [pc, #172]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fa2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d01f      	beq.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fb0:	697a      	ldr	r2, [r7, #20]
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d019      	beq.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007fb6:	4b24      	ldr	r3, [pc, #144]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fc0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007fc2:	4b21      	ldr	r3, [pc, #132]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fc8:	4a1f      	ldr	r2, [pc, #124]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007fd2:	4b1d      	ldr	r3, [pc, #116]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fd8:	4a1b      	ldr	r2, [pc, #108]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007fe2:	4a19      	ldr	r2, [pc, #100]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	f003 0301 	and.w	r3, r3, #1
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d016      	beq.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ff4:	f7fb fdc2 	bl	8003b7c <HAL_GetTick>
 8007ff8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ffa:	e00b      	b.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ffc:	f7fb fdbe 	bl	8003b7c <HAL_GetTick>
 8008000:	4602      	mov	r2, r0
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	1ad3      	subs	r3, r2, r3
 8008006:	f241 3288 	movw	r2, #5000	; 0x1388
 800800a:	4293      	cmp	r3, r2
 800800c:	d902      	bls.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800800e:	2303      	movs	r3, #3
 8008010:	74fb      	strb	r3, [r7, #19]
            break;
 8008012:	e006      	b.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008014:	4b0c      	ldr	r3, [pc, #48]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800801a:	f003 0302 	and.w	r3, r3, #2
 800801e:	2b00      	cmp	r3, #0
 8008020:	d0ec      	beq.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8008022:	7cfb      	ldrb	r3, [r7, #19]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d10c      	bne.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008028:	4b07      	ldr	r3, [pc, #28]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800802a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800802e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008038:	4903      	ldr	r1, [pc, #12]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800803a:	4313      	orrs	r3, r2
 800803c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008040:	e008      	b.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008042:	7cfb      	ldrb	r3, [r7, #19]
 8008044:	74bb      	strb	r3, [r7, #18]
 8008046:	e005      	b.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8008048:	40021000 	.word	0x40021000
 800804c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008050:	7cfb      	ldrb	r3, [r7, #19]
 8008052:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008054:	7c7b      	ldrb	r3, [r7, #17]
 8008056:	2b01      	cmp	r3, #1
 8008058:	d105      	bne.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800805a:	4ba0      	ldr	r3, [pc, #640]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800805c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800805e:	4a9f      	ldr	r2, [pc, #636]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008060:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008064:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f003 0301 	and.w	r3, r3, #1
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00a      	beq.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008072:	4b9a      	ldr	r3, [pc, #616]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008078:	f023 0203 	bic.w	r2, r3, #3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008080:	4996      	ldr	r1, [pc, #600]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008082:	4313      	orrs	r3, r2
 8008084:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f003 0302 	and.w	r3, r3, #2
 8008090:	2b00      	cmp	r3, #0
 8008092:	d00a      	beq.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008094:	4b91      	ldr	r3, [pc, #580]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800809a:	f023 020c 	bic.w	r2, r3, #12
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a2:	498e      	ldr	r1, [pc, #568]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80080a4:	4313      	orrs	r3, r2
 80080a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f003 0304 	and.w	r3, r3, #4
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00a      	beq.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80080b6:	4b89      	ldr	r3, [pc, #548]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80080b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080c4:	4985      	ldr	r1, [pc, #532]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80080c6:	4313      	orrs	r3, r2
 80080c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f003 0308 	and.w	r3, r3, #8
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d00a      	beq.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80080d8:	4b80      	ldr	r3, [pc, #512]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80080da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080e6:	497d      	ldr	r1, [pc, #500]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80080e8:	4313      	orrs	r3, r2
 80080ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f003 0310 	and.w	r3, r3, #16
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d00a      	beq.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80080fa:	4b78      	ldr	r3, [pc, #480]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80080fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008100:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008108:	4974      	ldr	r1, [pc, #464]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800810a:	4313      	orrs	r3, r2
 800810c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f003 0320 	and.w	r3, r3, #32
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00a      	beq.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800811c:	4b6f      	ldr	r3, [pc, #444]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800811e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008122:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800812a:	496c      	ldr	r1, [pc, #432]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800812c:	4313      	orrs	r3, r2
 800812e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00a      	beq.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800813e:	4b67      	ldr	r3, [pc, #412]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008144:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800814c:	4963      	ldr	r1, [pc, #396]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800814e:	4313      	orrs	r3, r2
 8008150:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00a      	beq.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008160:	4b5e      	ldr	r3, [pc, #376]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008166:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800816e:	495b      	ldr	r1, [pc, #364]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008170:	4313      	orrs	r3, r2
 8008172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800817e:	2b00      	cmp	r3, #0
 8008180:	d00a      	beq.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008182:	4b56      	ldr	r3, [pc, #344]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008188:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008190:	4952      	ldr	r1, [pc, #328]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008192:	4313      	orrs	r3, r2
 8008194:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d00a      	beq.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80081a4:	4b4d      	ldr	r3, [pc, #308]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081aa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081b2:	494a      	ldr	r1, [pc, #296]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081b4:	4313      	orrs	r3, r2
 80081b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00a      	beq.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80081c6:	4b45      	ldr	r3, [pc, #276]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081d4:	4941      	ldr	r1, [pc, #260]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081d6:	4313      	orrs	r3, r2
 80081d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d00a      	beq.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80081e8:	4b3c      	ldr	r3, [pc, #240]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80081ee:	f023 0203 	bic.w	r2, r3, #3
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081f6:	4939      	ldr	r1, [pc, #228]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081f8:	4313      	orrs	r3, r2
 80081fa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008206:	2b00      	cmp	r3, #0
 8008208:	d028      	beq.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800820a:	4b34      	ldr	r3, [pc, #208]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800820c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008210:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008218:	4930      	ldr	r1, [pc, #192]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800821a:	4313      	orrs	r3, r2
 800821c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008224:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008228:	d106      	bne.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800822a:	4b2c      	ldr	r3, [pc, #176]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	4a2b      	ldr	r2, [pc, #172]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008230:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008234:	60d3      	str	r3, [r2, #12]
 8008236:	e011      	b.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800823c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008240:	d10c      	bne.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	3304      	adds	r3, #4
 8008246:	2101      	movs	r1, #1
 8008248:	4618      	mov	r0, r3
 800824a:	f000 f909 	bl	8008460 <RCCEx_PLLSAI1_Config>
 800824e:	4603      	mov	r3, r0
 8008250:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008252:	7cfb      	ldrb	r3, [r7, #19]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d001      	beq.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8008258:	7cfb      	ldrb	r3, [r7, #19]
 800825a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008264:	2b00      	cmp	r3, #0
 8008266:	d04d      	beq.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800826c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008270:	d108      	bne.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8008272:	4b1a      	ldr	r3, [pc, #104]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008274:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008278:	4a18      	ldr	r2, [pc, #96]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800827a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800827e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8008282:	e012      	b.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8008284:	4b15      	ldr	r3, [pc, #84]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008286:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800828a:	4a14      	ldr	r2, [pc, #80]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800828c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008290:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8008294:	4b11      	ldr	r3, [pc, #68]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800829a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082a2:	490e      	ldr	r1, [pc, #56]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80082a4:	4313      	orrs	r3, r2
 80082a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082b2:	d106      	bne.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80082b4:	4b09      	ldr	r3, [pc, #36]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	4a08      	ldr	r2, [pc, #32]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80082ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082be:	60d3      	str	r3, [r2, #12]
 80082c0:	e020      	b.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082ca:	d109      	bne.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80082cc:	4b03      	ldr	r3, [pc, #12]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	4a02      	ldr	r2, [pc, #8]	; (80082dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80082d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082d6:	60d3      	str	r3, [r2, #12]
 80082d8:	e014      	b.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80082da:	bf00      	nop
 80082dc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80082e8:	d10c      	bne.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	3304      	adds	r3, #4
 80082ee:	2101      	movs	r1, #1
 80082f0:	4618      	mov	r0, r3
 80082f2:	f000 f8b5 	bl	8008460 <RCCEx_PLLSAI1_Config>
 80082f6:	4603      	mov	r3, r0
 80082f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80082fa:	7cfb      	ldrb	r3, [r7, #19]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d001      	beq.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8008300:	7cfb      	ldrb	r3, [r7, #19]
 8008302:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800830c:	2b00      	cmp	r3, #0
 800830e:	d028      	beq.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008310:	4b4a      	ldr	r3, [pc, #296]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008316:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800831e:	4947      	ldr	r1, [pc, #284]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008320:	4313      	orrs	r3, r2
 8008322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800832a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800832e:	d106      	bne.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008330:	4b42      	ldr	r3, [pc, #264]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008332:	68db      	ldr	r3, [r3, #12]
 8008334:	4a41      	ldr	r2, [pc, #260]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008336:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800833a:	60d3      	str	r3, [r2, #12]
 800833c:	e011      	b.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008342:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008346:	d10c      	bne.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	3304      	adds	r3, #4
 800834c:	2101      	movs	r1, #1
 800834e:	4618      	mov	r0, r3
 8008350:	f000 f886 	bl	8008460 <RCCEx_PLLSAI1_Config>
 8008354:	4603      	mov	r3, r0
 8008356:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008358:	7cfb      	ldrb	r3, [r7, #19]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d001      	beq.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800835e:	7cfb      	ldrb	r3, [r7, #19]
 8008360:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800836a:	2b00      	cmp	r3, #0
 800836c:	d01e      	beq.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800836e:	4b33      	ldr	r3, [pc, #204]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008374:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800837e:	492f      	ldr	r1, [pc, #188]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008380:	4313      	orrs	r3, r2
 8008382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800838c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008390:	d10c      	bne.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	3304      	adds	r3, #4
 8008396:	2102      	movs	r1, #2
 8008398:	4618      	mov	r0, r3
 800839a:	f000 f861 	bl	8008460 <RCCEx_PLLSAI1_Config>
 800839e:	4603      	mov	r3, r0
 80083a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80083a2:	7cfb      	ldrb	r3, [r7, #19]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d001      	beq.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80083a8:	7cfb      	ldrb	r3, [r7, #19]
 80083aa:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d00b      	beq.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80083b8:	4b20      	ldr	r3, [pc, #128]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80083be:	f023 0204 	bic.w	r2, r3, #4
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083c8:	491c      	ldr	r1, [pc, #112]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083ca:	4313      	orrs	r3, r2
 80083cc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d00b      	beq.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80083dc:	4b17      	ldr	r3, [pc, #92]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80083e2:	f023 0218 	bic.w	r2, r3, #24
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083ec:	4913      	ldr	r1, [pc, #76]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083ee:	4313      	orrs	r3, r2
 80083f0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d017      	beq.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008400:	4b0e      	ldr	r3, [pc, #56]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008402:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008406:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008410:	490a      	ldr	r1, [pc, #40]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008412:	4313      	orrs	r3, r2
 8008414:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800841e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008422:	d105      	bne.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008424:	4b05      	ldr	r3, [pc, #20]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	4a04      	ldr	r2, [pc, #16]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800842a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800842e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008430:	7cbb      	ldrb	r3, [r7, #18]
}
 8008432:	4618      	mov	r0, r3
 8008434:	3718      	adds	r7, #24
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	40021000 	.word	0x40021000

08008440 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8008440:	b480      	push	{r7}
 8008442:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8008444:	4b05      	ldr	r3, [pc, #20]	; (800845c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a04      	ldr	r2, [pc, #16]	; (800845c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800844a:	f043 0304 	orr.w	r3, r3, #4
 800844e:	6013      	str	r3, [r2, #0]
}
 8008450:	bf00      	nop
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr
 800845a:	bf00      	nop
 800845c:	40021000 	.word	0x40021000

08008460 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800846a:	2300      	movs	r3, #0
 800846c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800846e:	4b72      	ldr	r3, [pc, #456]	; (8008638 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008470:	68db      	ldr	r3, [r3, #12]
 8008472:	f003 0303 	and.w	r3, r3, #3
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00e      	beq.n	8008498 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800847a:	4b6f      	ldr	r3, [pc, #444]	; (8008638 <RCCEx_PLLSAI1_Config+0x1d8>)
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	f003 0203 	and.w	r2, r3, #3
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	429a      	cmp	r2, r3
 8008488:	d103      	bne.n	8008492 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
       ||
 800848e:	2b00      	cmp	r3, #0
 8008490:	d142      	bne.n	8008518 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8008492:	2301      	movs	r3, #1
 8008494:	73fb      	strb	r3, [r7, #15]
 8008496:	e03f      	b.n	8008518 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	2b03      	cmp	r3, #3
 800849e:	d018      	beq.n	80084d2 <RCCEx_PLLSAI1_Config+0x72>
 80084a0:	2b03      	cmp	r3, #3
 80084a2:	d825      	bhi.n	80084f0 <RCCEx_PLLSAI1_Config+0x90>
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d002      	beq.n	80084ae <RCCEx_PLLSAI1_Config+0x4e>
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	d009      	beq.n	80084c0 <RCCEx_PLLSAI1_Config+0x60>
 80084ac:	e020      	b.n	80084f0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80084ae:	4b62      	ldr	r3, [pc, #392]	; (8008638 <RCCEx_PLLSAI1_Config+0x1d8>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f003 0302 	and.w	r3, r3, #2
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d11d      	bne.n	80084f6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80084ba:	2301      	movs	r3, #1
 80084bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80084be:	e01a      	b.n	80084f6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80084c0:	4b5d      	ldr	r3, [pc, #372]	; (8008638 <RCCEx_PLLSAI1_Config+0x1d8>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d116      	bne.n	80084fa <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80084d0:	e013      	b.n	80084fa <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80084d2:	4b59      	ldr	r3, [pc, #356]	; (8008638 <RCCEx_PLLSAI1_Config+0x1d8>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d10f      	bne.n	80084fe <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80084de:	4b56      	ldr	r3, [pc, #344]	; (8008638 <RCCEx_PLLSAI1_Config+0x1d8>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d109      	bne.n	80084fe <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80084ee:	e006      	b.n	80084fe <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	73fb      	strb	r3, [r7, #15]
      break;
 80084f4:	e004      	b.n	8008500 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80084f6:	bf00      	nop
 80084f8:	e002      	b.n	8008500 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80084fa:	bf00      	nop
 80084fc:	e000      	b.n	8008500 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80084fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8008500:	7bfb      	ldrb	r3, [r7, #15]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d108      	bne.n	8008518 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8008506:	4b4c      	ldr	r3, [pc, #304]	; (8008638 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	f023 0203 	bic.w	r2, r3, #3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4949      	ldr	r1, [pc, #292]	; (8008638 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008514:	4313      	orrs	r3, r2
 8008516:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8008518:	7bfb      	ldrb	r3, [r7, #15]
 800851a:	2b00      	cmp	r3, #0
 800851c:	f040 8086 	bne.w	800862c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008520:	4b45      	ldr	r3, [pc, #276]	; (8008638 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a44      	ldr	r2, [pc, #272]	; (8008638 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008526:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800852a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800852c:	f7fb fb26 	bl	8003b7c <HAL_GetTick>
 8008530:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008532:	e009      	b.n	8008548 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008534:	f7fb fb22 	bl	8003b7c <HAL_GetTick>
 8008538:	4602      	mov	r2, r0
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	2b02      	cmp	r3, #2
 8008540:	d902      	bls.n	8008548 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8008542:	2303      	movs	r3, #3
 8008544:	73fb      	strb	r3, [r7, #15]
        break;
 8008546:	e005      	b.n	8008554 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008548:	4b3b      	ldr	r3, [pc, #236]	; (8008638 <RCCEx_PLLSAI1_Config+0x1d8>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008550:	2b00      	cmp	r3, #0
 8008552:	d1ef      	bne.n	8008534 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8008554:	7bfb      	ldrb	r3, [r7, #15]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d168      	bne.n	800862c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d113      	bne.n	8008588 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008560:	4b35      	ldr	r3, [pc, #212]	; (8008638 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008562:	691a      	ldr	r2, [r3, #16]
 8008564:	4b35      	ldr	r3, [pc, #212]	; (800863c <RCCEx_PLLSAI1_Config+0x1dc>)
 8008566:	4013      	ands	r3, r2
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	6892      	ldr	r2, [r2, #8]
 800856c:	0211      	lsls	r1, r2, #8
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	68d2      	ldr	r2, [r2, #12]
 8008572:	06d2      	lsls	r2, r2, #27
 8008574:	4311      	orrs	r1, r2
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	6852      	ldr	r2, [r2, #4]
 800857a:	3a01      	subs	r2, #1
 800857c:	0112      	lsls	r2, r2, #4
 800857e:	430a      	orrs	r2, r1
 8008580:	492d      	ldr	r1, [pc, #180]	; (8008638 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008582:	4313      	orrs	r3, r2
 8008584:	610b      	str	r3, [r1, #16]
 8008586:	e02d      	b.n	80085e4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	2b01      	cmp	r3, #1
 800858c:	d115      	bne.n	80085ba <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800858e:	4b2a      	ldr	r3, [pc, #168]	; (8008638 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008590:	691a      	ldr	r2, [r3, #16]
 8008592:	4b2b      	ldr	r3, [pc, #172]	; (8008640 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008594:	4013      	ands	r3, r2
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	6892      	ldr	r2, [r2, #8]
 800859a:	0211      	lsls	r1, r2, #8
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	6912      	ldr	r2, [r2, #16]
 80085a0:	0852      	lsrs	r2, r2, #1
 80085a2:	3a01      	subs	r2, #1
 80085a4:	0552      	lsls	r2, r2, #21
 80085a6:	4311      	orrs	r1, r2
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	6852      	ldr	r2, [r2, #4]
 80085ac:	3a01      	subs	r2, #1
 80085ae:	0112      	lsls	r2, r2, #4
 80085b0:	430a      	orrs	r2, r1
 80085b2:	4921      	ldr	r1, [pc, #132]	; (8008638 <RCCEx_PLLSAI1_Config+0x1d8>)
 80085b4:	4313      	orrs	r3, r2
 80085b6:	610b      	str	r3, [r1, #16]
 80085b8:	e014      	b.n	80085e4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80085ba:	4b1f      	ldr	r3, [pc, #124]	; (8008638 <RCCEx_PLLSAI1_Config+0x1d8>)
 80085bc:	691a      	ldr	r2, [r3, #16]
 80085be:	4b21      	ldr	r3, [pc, #132]	; (8008644 <RCCEx_PLLSAI1_Config+0x1e4>)
 80085c0:	4013      	ands	r3, r2
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	6892      	ldr	r2, [r2, #8]
 80085c6:	0211      	lsls	r1, r2, #8
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	6952      	ldr	r2, [r2, #20]
 80085cc:	0852      	lsrs	r2, r2, #1
 80085ce:	3a01      	subs	r2, #1
 80085d0:	0652      	lsls	r2, r2, #25
 80085d2:	4311      	orrs	r1, r2
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	6852      	ldr	r2, [r2, #4]
 80085d8:	3a01      	subs	r2, #1
 80085da:	0112      	lsls	r2, r2, #4
 80085dc:	430a      	orrs	r2, r1
 80085de:	4916      	ldr	r1, [pc, #88]	; (8008638 <RCCEx_PLLSAI1_Config+0x1d8>)
 80085e0:	4313      	orrs	r3, r2
 80085e2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80085e4:	4b14      	ldr	r3, [pc, #80]	; (8008638 <RCCEx_PLLSAI1_Config+0x1d8>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a13      	ldr	r2, [pc, #76]	; (8008638 <RCCEx_PLLSAI1_Config+0x1d8>)
 80085ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80085ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085f0:	f7fb fac4 	bl	8003b7c <HAL_GetTick>
 80085f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80085f6:	e009      	b.n	800860c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80085f8:	f7fb fac0 	bl	8003b7c <HAL_GetTick>
 80085fc:	4602      	mov	r2, r0
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	1ad3      	subs	r3, r2, r3
 8008602:	2b02      	cmp	r3, #2
 8008604:	d902      	bls.n	800860c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8008606:	2303      	movs	r3, #3
 8008608:	73fb      	strb	r3, [r7, #15]
          break;
 800860a:	e005      	b.n	8008618 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800860c:	4b0a      	ldr	r3, [pc, #40]	; (8008638 <RCCEx_PLLSAI1_Config+0x1d8>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008614:	2b00      	cmp	r3, #0
 8008616:	d0ef      	beq.n	80085f8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8008618:	7bfb      	ldrb	r3, [r7, #15]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d106      	bne.n	800862c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800861e:	4b06      	ldr	r3, [pc, #24]	; (8008638 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008620:	691a      	ldr	r2, [r3, #16]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	699b      	ldr	r3, [r3, #24]
 8008626:	4904      	ldr	r1, [pc, #16]	; (8008638 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008628:	4313      	orrs	r3, r2
 800862a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800862c:	7bfb      	ldrb	r3, [r7, #15]
}
 800862e:	4618      	mov	r0, r3
 8008630:	3710      	adds	r7, #16
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
 8008636:	bf00      	nop
 8008638:	40021000 	.word	0x40021000
 800863c:	07ff800f 	.word	0x07ff800f
 8008640:	ff9f800f 	.word	0xff9f800f
 8008644:	f9ff800f 	.word	0xf9ff800f

08008648 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008652:	2300      	movs	r3, #0
 8008654:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008656:	4b72      	ldr	r3, [pc, #456]	; (8008820 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	f003 0303 	and.w	r3, r3, #3
 800865e:	2b00      	cmp	r3, #0
 8008660:	d00e      	beq.n	8008680 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008662:	4b6f      	ldr	r3, [pc, #444]	; (8008820 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	f003 0203 	and.w	r2, r3, #3
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	429a      	cmp	r2, r3
 8008670:	d103      	bne.n	800867a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
       ||
 8008676:	2b00      	cmp	r3, #0
 8008678:	d142      	bne.n	8008700 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800867a:	2301      	movs	r3, #1
 800867c:	73fb      	strb	r3, [r7, #15]
 800867e:	e03f      	b.n	8008700 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	2b03      	cmp	r3, #3
 8008686:	d018      	beq.n	80086ba <RCCEx_PLLSAI2_Config+0x72>
 8008688:	2b03      	cmp	r3, #3
 800868a:	d825      	bhi.n	80086d8 <RCCEx_PLLSAI2_Config+0x90>
 800868c:	2b01      	cmp	r3, #1
 800868e:	d002      	beq.n	8008696 <RCCEx_PLLSAI2_Config+0x4e>
 8008690:	2b02      	cmp	r3, #2
 8008692:	d009      	beq.n	80086a8 <RCCEx_PLLSAI2_Config+0x60>
 8008694:	e020      	b.n	80086d8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008696:	4b62      	ldr	r3, [pc, #392]	; (8008820 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f003 0302 	and.w	r3, r3, #2
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d11d      	bne.n	80086de <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80086a2:	2301      	movs	r3, #1
 80086a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80086a6:	e01a      	b.n	80086de <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80086a8:	4b5d      	ldr	r3, [pc, #372]	; (8008820 <RCCEx_PLLSAI2_Config+0x1d8>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d116      	bne.n	80086e2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80086b4:	2301      	movs	r3, #1
 80086b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80086b8:	e013      	b.n	80086e2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80086ba:	4b59      	ldr	r3, [pc, #356]	; (8008820 <RCCEx_PLLSAI2_Config+0x1d8>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d10f      	bne.n	80086e6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80086c6:	4b56      	ldr	r3, [pc, #344]	; (8008820 <RCCEx_PLLSAI2_Config+0x1d8>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d109      	bne.n	80086e6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80086d6:	e006      	b.n	80086e6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80086d8:	2301      	movs	r3, #1
 80086da:	73fb      	strb	r3, [r7, #15]
      break;
 80086dc:	e004      	b.n	80086e8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80086de:	bf00      	nop
 80086e0:	e002      	b.n	80086e8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80086e2:	bf00      	nop
 80086e4:	e000      	b.n	80086e8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80086e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80086e8:	7bfb      	ldrb	r3, [r7, #15]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d108      	bne.n	8008700 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80086ee:	4b4c      	ldr	r3, [pc, #304]	; (8008820 <RCCEx_PLLSAI2_Config+0x1d8>)
 80086f0:	68db      	ldr	r3, [r3, #12]
 80086f2:	f023 0203 	bic.w	r2, r3, #3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4949      	ldr	r1, [pc, #292]	; (8008820 <RCCEx_PLLSAI2_Config+0x1d8>)
 80086fc:	4313      	orrs	r3, r2
 80086fe:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8008700:	7bfb      	ldrb	r3, [r7, #15]
 8008702:	2b00      	cmp	r3, #0
 8008704:	f040 8086 	bne.w	8008814 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008708:	4b45      	ldr	r3, [pc, #276]	; (8008820 <RCCEx_PLLSAI2_Config+0x1d8>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a44      	ldr	r2, [pc, #272]	; (8008820 <RCCEx_PLLSAI2_Config+0x1d8>)
 800870e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008712:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008714:	f7fb fa32 	bl	8003b7c <HAL_GetTick>
 8008718:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800871a:	e009      	b.n	8008730 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800871c:	f7fb fa2e 	bl	8003b7c <HAL_GetTick>
 8008720:	4602      	mov	r2, r0
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	1ad3      	subs	r3, r2, r3
 8008726:	2b02      	cmp	r3, #2
 8008728:	d902      	bls.n	8008730 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800872a:	2303      	movs	r3, #3
 800872c:	73fb      	strb	r3, [r7, #15]
        break;
 800872e:	e005      	b.n	800873c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008730:	4b3b      	ldr	r3, [pc, #236]	; (8008820 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008738:	2b00      	cmp	r3, #0
 800873a:	d1ef      	bne.n	800871c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800873c:	7bfb      	ldrb	r3, [r7, #15]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d168      	bne.n	8008814 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d113      	bne.n	8008770 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008748:	4b35      	ldr	r3, [pc, #212]	; (8008820 <RCCEx_PLLSAI2_Config+0x1d8>)
 800874a:	695a      	ldr	r2, [r3, #20]
 800874c:	4b35      	ldr	r3, [pc, #212]	; (8008824 <RCCEx_PLLSAI2_Config+0x1dc>)
 800874e:	4013      	ands	r3, r2
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	6892      	ldr	r2, [r2, #8]
 8008754:	0211      	lsls	r1, r2, #8
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	68d2      	ldr	r2, [r2, #12]
 800875a:	06d2      	lsls	r2, r2, #27
 800875c:	4311      	orrs	r1, r2
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	6852      	ldr	r2, [r2, #4]
 8008762:	3a01      	subs	r2, #1
 8008764:	0112      	lsls	r2, r2, #4
 8008766:	430a      	orrs	r2, r1
 8008768:	492d      	ldr	r1, [pc, #180]	; (8008820 <RCCEx_PLLSAI2_Config+0x1d8>)
 800876a:	4313      	orrs	r3, r2
 800876c:	614b      	str	r3, [r1, #20]
 800876e:	e02d      	b.n	80087cc <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	2b01      	cmp	r3, #1
 8008774:	d115      	bne.n	80087a2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008776:	4b2a      	ldr	r3, [pc, #168]	; (8008820 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008778:	695a      	ldr	r2, [r3, #20]
 800877a:	4b2b      	ldr	r3, [pc, #172]	; (8008828 <RCCEx_PLLSAI2_Config+0x1e0>)
 800877c:	4013      	ands	r3, r2
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	6892      	ldr	r2, [r2, #8]
 8008782:	0211      	lsls	r1, r2, #8
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	6912      	ldr	r2, [r2, #16]
 8008788:	0852      	lsrs	r2, r2, #1
 800878a:	3a01      	subs	r2, #1
 800878c:	0552      	lsls	r2, r2, #21
 800878e:	4311      	orrs	r1, r2
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	6852      	ldr	r2, [r2, #4]
 8008794:	3a01      	subs	r2, #1
 8008796:	0112      	lsls	r2, r2, #4
 8008798:	430a      	orrs	r2, r1
 800879a:	4921      	ldr	r1, [pc, #132]	; (8008820 <RCCEx_PLLSAI2_Config+0x1d8>)
 800879c:	4313      	orrs	r3, r2
 800879e:	614b      	str	r3, [r1, #20]
 80087a0:	e014      	b.n	80087cc <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80087a2:	4b1f      	ldr	r3, [pc, #124]	; (8008820 <RCCEx_PLLSAI2_Config+0x1d8>)
 80087a4:	695a      	ldr	r2, [r3, #20]
 80087a6:	4b21      	ldr	r3, [pc, #132]	; (800882c <RCCEx_PLLSAI2_Config+0x1e4>)
 80087a8:	4013      	ands	r3, r2
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	6892      	ldr	r2, [r2, #8]
 80087ae:	0211      	lsls	r1, r2, #8
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	6952      	ldr	r2, [r2, #20]
 80087b4:	0852      	lsrs	r2, r2, #1
 80087b6:	3a01      	subs	r2, #1
 80087b8:	0652      	lsls	r2, r2, #25
 80087ba:	4311      	orrs	r1, r2
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	6852      	ldr	r2, [r2, #4]
 80087c0:	3a01      	subs	r2, #1
 80087c2:	0112      	lsls	r2, r2, #4
 80087c4:	430a      	orrs	r2, r1
 80087c6:	4916      	ldr	r1, [pc, #88]	; (8008820 <RCCEx_PLLSAI2_Config+0x1d8>)
 80087c8:	4313      	orrs	r3, r2
 80087ca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80087cc:	4b14      	ldr	r3, [pc, #80]	; (8008820 <RCCEx_PLLSAI2_Config+0x1d8>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a13      	ldr	r2, [pc, #76]	; (8008820 <RCCEx_PLLSAI2_Config+0x1d8>)
 80087d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087d8:	f7fb f9d0 	bl	8003b7c <HAL_GetTick>
 80087dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80087de:	e009      	b.n	80087f4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80087e0:	f7fb f9cc 	bl	8003b7c <HAL_GetTick>
 80087e4:	4602      	mov	r2, r0
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	1ad3      	subs	r3, r2, r3
 80087ea:	2b02      	cmp	r3, #2
 80087ec:	d902      	bls.n	80087f4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80087ee:	2303      	movs	r3, #3
 80087f0:	73fb      	strb	r3, [r7, #15]
          break;
 80087f2:	e005      	b.n	8008800 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80087f4:	4b0a      	ldr	r3, [pc, #40]	; (8008820 <RCCEx_PLLSAI2_Config+0x1d8>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d0ef      	beq.n	80087e0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8008800:	7bfb      	ldrb	r3, [r7, #15]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d106      	bne.n	8008814 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008806:	4b06      	ldr	r3, [pc, #24]	; (8008820 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008808:	695a      	ldr	r2, [r3, #20]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	699b      	ldr	r3, [r3, #24]
 800880e:	4904      	ldr	r1, [pc, #16]	; (8008820 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008810:	4313      	orrs	r3, r2
 8008812:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008814:	7bfb      	ldrb	r3, [r7, #15]
}
 8008816:	4618      	mov	r0, r3
 8008818:	3710      	adds	r7, #16
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	40021000 	.word	0x40021000
 8008824:	07ff800f 	.word	0x07ff800f
 8008828:	ff9f800f 	.word	0xff9f800f
 800882c:	f9ff800f 	.word	0xf9ff800f

08008830 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d101      	bne.n	8008842 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800883e:	2301      	movs	r3, #1
 8008840:	e095      	b.n	800896e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008846:	2b00      	cmp	r3, #0
 8008848:	d108      	bne.n	800885c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008852:	d009      	beq.n	8008868 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	61da      	str	r2, [r3, #28]
 800885a:	e005      	b.n	8008868 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008874:	b2db      	uxtb	r3, r3
 8008876:	2b00      	cmp	r3, #0
 8008878:	d106      	bne.n	8008888 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f7fa fe28 	bl	80034d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2202      	movs	r2, #2
 800888c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800889e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80088a8:	d902      	bls.n	80088b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80088aa:	2300      	movs	r3, #0
 80088ac:	60fb      	str	r3, [r7, #12]
 80088ae:	e002      	b.n	80088b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80088b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80088be:	d007      	beq.n	80088d0 <HAL_SPI_Init+0xa0>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80088c8:	d002      	beq.n	80088d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80088e0:	431a      	orrs	r2, r3
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	f003 0302 	and.w	r3, r3, #2
 80088ea:	431a      	orrs	r2, r3
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	695b      	ldr	r3, [r3, #20]
 80088f0:	f003 0301 	and.w	r3, r3, #1
 80088f4:	431a      	orrs	r2, r3
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	699b      	ldr	r3, [r3, #24]
 80088fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088fe:	431a      	orrs	r2, r3
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	69db      	ldr	r3, [r3, #28]
 8008904:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008908:	431a      	orrs	r2, r3
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6a1b      	ldr	r3, [r3, #32]
 800890e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008912:	ea42 0103 	orr.w	r1, r2, r3
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800891a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	430a      	orrs	r2, r1
 8008924:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	699b      	ldr	r3, [r3, #24]
 800892a:	0c1b      	lsrs	r3, r3, #16
 800892c:	f003 0204 	and.w	r2, r3, #4
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008934:	f003 0310 	and.w	r3, r3, #16
 8008938:	431a      	orrs	r2, r3
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800893e:	f003 0308 	and.w	r3, r3, #8
 8008942:	431a      	orrs	r2, r3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800894c:	ea42 0103 	orr.w	r1, r2, r3
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	430a      	orrs	r2, r1
 800895c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
	...

08008978 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b086      	sub	sp, #24
 800897c:	af00      	add	r7, sp, #0
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	4613      	mov	r3, r2
 8008984:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008986:	2300      	movs	r3, #0
 8008988:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008990:	2b01      	cmp	r3, #1
 8008992:	d101      	bne.n	8008998 <HAL_SPI_Transmit_DMA+0x20>
 8008994:	2302      	movs	r3, #2
 8008996:	e0d4      	b.n	8008b42 <HAL_SPI_Transmit_DMA+0x1ca>
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2201      	movs	r2, #1
 800899c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d002      	beq.n	80089b2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80089ac:	2302      	movs	r3, #2
 80089ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 80089b0:	e0c2      	b.n	8008b38 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d002      	beq.n	80089be <HAL_SPI_Transmit_DMA+0x46>
 80089b8:	88fb      	ldrh	r3, [r7, #6]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d102      	bne.n	80089c4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80089c2:	e0b9      	b.n	8008b38 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2203      	movs	r2, #3
 80089c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2200      	movs	r2, #0
 80089d0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	68ba      	ldr	r2, [r7, #8]
 80089d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	88fa      	ldrh	r2, [r7, #6]
 80089dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	88fa      	ldrh	r2, [r7, #6]
 80089e2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2200      	movs	r2, #0
 80089e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2200      	movs	r2, #0
 80089ee:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2200      	movs	r2, #0
 80089f4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2200      	movs	r2, #0
 8008a02:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a0e:	d10f      	bne.n	8008a30 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a1e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a2e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a34:	4a45      	ldr	r2, [pc, #276]	; (8008b4c <HAL_SPI_Transmit_DMA+0x1d4>)
 8008a36:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a3c:	4a44      	ldr	r2, [pc, #272]	; (8008b50 <HAL_SPI_Transmit_DMA+0x1d8>)
 8008a3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a44:	4a43      	ldr	r2, [pc, #268]	; (8008b54 <HAL_SPI_Transmit_DMA+0x1dc>)
 8008a46:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	685a      	ldr	r2, [r3, #4]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008a5e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	68db      	ldr	r3, [r3, #12]
 8008a64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008a68:	d82d      	bhi.n	8008ac6 <HAL_SPI_Transmit_DMA+0x14e>
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a6e:	699b      	ldr	r3, [r3, #24]
 8008a70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a74:	d127      	bne.n	8008ac6 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	f003 0301 	and.w	r3, r3, #1
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d10f      	bne.n	8008aa4 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	685a      	ldr	r2, [r3, #4]
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008a92:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	085b      	lsrs	r3, r3, #1
 8008a9c:	b29a      	uxth	r2, r3
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008aa2:	e010      	b.n	8008ac6 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	685a      	ldr	r2, [r3, #4]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008ab2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	085b      	lsrs	r3, r3, #1
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	3301      	adds	r3, #1
 8008ac0:	b29a      	uxth	r2, r3
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ace:	4619      	mov	r1, r3
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	330c      	adds	r3, #12
 8008ad6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008adc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008ade:	f7fc f9f5 	bl	8004ecc <HAL_DMA_Start_IT>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d008      	beq.n	8008afa <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008aec:	f043 0210 	orr.w	r2, r3, #16
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8008af4:	2301      	movs	r3, #1
 8008af6:	75fb      	strb	r3, [r7, #23]

    goto error;
 8008af8:	e01e      	b.n	8008b38 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b04:	2b40      	cmp	r3, #64	; 0x40
 8008b06:	d007      	beq.n	8008b18 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b16:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	685a      	ldr	r2, [r3, #4]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f042 0220 	orr.w	r2, r2, #32
 8008b26:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	685a      	ldr	r2, [r3, #4]
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f042 0202 	orr.w	r2, r2, #2
 8008b36:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3718      	adds	r7, #24
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	08008c3b 	.word	0x08008c3b
 8008b50:	08008b95 	.word	0x08008b95
 8008b54:	08008c57 	.word	0x08008c57

08008b58 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8008b60:	bf00      	nop
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008b74:	bf00      	nop
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008b88:	bf00      	nop
 8008b8a:	370c      	adds	r7, #12
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b086      	sub	sp, #24
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ba2:	f7fa ffeb 	bl	8003b7c <HAL_GetTick>
 8008ba6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f003 0320 	and.w	r3, r3, #32
 8008bb2:	2b20      	cmp	r3, #32
 8008bb4:	d03b      	beq.n	8008c2e <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	685a      	ldr	r2, [r3, #4]
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f022 0220 	bic.w	r2, r2, #32
 8008bc4:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	685a      	ldr	r2, [r3, #4]
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f022 0202 	bic.w	r2, r2, #2
 8008bd4:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008bd6:	693a      	ldr	r2, [r7, #16]
 8008bd8:	2164      	movs	r1, #100	; 0x64
 8008bda:	6978      	ldr	r0, [r7, #20]
 8008bdc:	f000 f97a 	bl	8008ed4 <SPI_EndRxTxTransaction>
 8008be0:	4603      	mov	r3, r0
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d005      	beq.n	8008bf2 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bea:	f043 0220 	orr.w	r2, r3, #32
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d10a      	bne.n	8008c10 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	60fb      	str	r3, [r7, #12]
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	68db      	ldr	r3, [r3, #12]
 8008c04:	60fb      	str	r3, [r7, #12]
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	60fb      	str	r3, [r7, #12]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	2200      	movs	r2, #0
 8008c14:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d003      	beq.n	8008c2e <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008c26:	6978      	ldr	r0, [r7, #20]
 8008c28:	f7ff ffaa 	bl	8008b80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008c2c:	e002      	b.n	8008c34 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8008c2e:	6978      	ldr	r0, [r7, #20]
 8008c30:	f7ff ff92 	bl	8008b58 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008c34:	3718      	adds	r7, #24
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008c3a:	b580      	push	{r7, lr}
 8008c3c:	b084      	sub	sp, #16
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c46:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8008c48:	68f8      	ldr	r0, [r7, #12]
 8008c4a:	f7ff ff8f 	bl	8008b6c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008c4e:	bf00      	nop
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b084      	sub	sp, #16
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c62:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	685a      	ldr	r2, [r3, #4]
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f022 0203 	bic.w	r2, r2, #3
 8008c72:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c78:	f043 0210 	orr.w	r2, r3, #16
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2201      	movs	r2, #1
 8008c84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008c88:	68f8      	ldr	r0, [r7, #12]
 8008c8a:	f7ff ff79 	bl	8008b80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008c8e:	bf00      	nop
 8008c90:	3710      	adds	r7, #16
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
	...

08008c98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b088      	sub	sp, #32
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	603b      	str	r3, [r7, #0]
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008ca8:	f7fa ff68 	bl	8003b7c <HAL_GetTick>
 8008cac:	4602      	mov	r2, r0
 8008cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb0:	1a9b      	subs	r3, r3, r2
 8008cb2:	683a      	ldr	r2, [r7, #0]
 8008cb4:	4413      	add	r3, r2
 8008cb6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008cb8:	f7fa ff60 	bl	8003b7c <HAL_GetTick>
 8008cbc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008cbe:	4b39      	ldr	r3, [pc, #228]	; (8008da4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	015b      	lsls	r3, r3, #5
 8008cc4:	0d1b      	lsrs	r3, r3, #20
 8008cc6:	69fa      	ldr	r2, [r7, #28]
 8008cc8:	fb02 f303 	mul.w	r3, r2, r3
 8008ccc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008cce:	e054      	b.n	8008d7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cd6:	d050      	beq.n	8008d7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008cd8:	f7fa ff50 	bl	8003b7c <HAL_GetTick>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	1ad3      	subs	r3, r2, r3
 8008ce2:	69fa      	ldr	r2, [r7, #28]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d902      	bls.n	8008cee <SPI_WaitFlagStateUntilTimeout+0x56>
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d13d      	bne.n	8008d6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	685a      	ldr	r2, [r3, #4]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008cfc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d06:	d111      	bne.n	8008d2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d10:	d004      	beq.n	8008d1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d1a:	d107      	bne.n	8008d2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d34:	d10f      	bne.n	8008d56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008d44:	601a      	str	r2, [r3, #0]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008d54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2201      	movs	r2, #1
 8008d5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2200      	movs	r2, #0
 8008d62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008d66:	2303      	movs	r3, #3
 8008d68:	e017      	b.n	8008d9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d101      	bne.n	8008d74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008d70:	2300      	movs	r3, #0
 8008d72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	3b01      	subs	r3, #1
 8008d78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	689a      	ldr	r2, [r3, #8]
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	4013      	ands	r3, r2
 8008d84:	68ba      	ldr	r2, [r7, #8]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	bf0c      	ite	eq
 8008d8a:	2301      	moveq	r3, #1
 8008d8c:	2300      	movne	r3, #0
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	461a      	mov	r2, r3
 8008d92:	79fb      	ldrb	r3, [r7, #7]
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d19b      	bne.n	8008cd0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3720      	adds	r7, #32
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	20000018 	.word	0x20000018

08008da8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b08a      	sub	sp, #40	; 0x28
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	607a      	str	r2, [r7, #4]
 8008db4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008db6:	2300      	movs	r3, #0
 8008db8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008dba:	f7fa fedf 	bl	8003b7c <HAL_GetTick>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc2:	1a9b      	subs	r3, r3, r2
 8008dc4:	683a      	ldr	r2, [r7, #0]
 8008dc6:	4413      	add	r3, r2
 8008dc8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008dca:	f7fa fed7 	bl	8003b7c <HAL_GetTick>
 8008dce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	330c      	adds	r3, #12
 8008dd6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008dd8:	4b3d      	ldr	r3, [pc, #244]	; (8008ed0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	4613      	mov	r3, r2
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	4413      	add	r3, r2
 8008de2:	00da      	lsls	r2, r3, #3
 8008de4:	1ad3      	subs	r3, r2, r3
 8008de6:	0d1b      	lsrs	r3, r3, #20
 8008de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dea:	fb02 f303 	mul.w	r3, r2, r3
 8008dee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008df0:	e060      	b.n	8008eb4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008df8:	d107      	bne.n	8008e0a <SPI_WaitFifoStateUntilTimeout+0x62>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d104      	bne.n	8008e0a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008e00:	69fb      	ldr	r3, [r7, #28]
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008e08:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e10:	d050      	beq.n	8008eb4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008e12:	f7fa feb3 	bl	8003b7c <HAL_GetTick>
 8008e16:	4602      	mov	r2, r0
 8008e18:	6a3b      	ldr	r3, [r7, #32]
 8008e1a:	1ad3      	subs	r3, r2, r3
 8008e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d902      	bls.n	8008e28 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d13d      	bne.n	8008ea4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	685a      	ldr	r2, [r3, #4]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008e36:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e40:	d111      	bne.n	8008e66 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e4a:	d004      	beq.n	8008e56 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e54:	d107      	bne.n	8008e66 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e64:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e6e:	d10f      	bne.n	8008e90 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e7e:	601a      	str	r2, [r3, #0]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e8e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2201      	movs	r2, #1
 8008e94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008ea0:	2303      	movs	r3, #3
 8008ea2:	e010      	b.n	8008ec6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008ea4:	69bb      	ldr	r3, [r7, #24]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d101      	bne.n	8008eae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	3b01      	subs	r3, #1
 8008eb2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	689a      	ldr	r2, [r3, #8]
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	4013      	ands	r3, r2
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d196      	bne.n	8008df2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008ec4:	2300      	movs	r3, #0
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3728      	adds	r7, #40	; 0x28
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	bf00      	nop
 8008ed0:	20000018 	.word	0x20000018

08008ed4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b086      	sub	sp, #24
 8008ed8:	af02      	add	r7, sp, #8
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	60b9      	str	r1, [r7, #8]
 8008ede:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	9300      	str	r3, [sp, #0]
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008eec:	68f8      	ldr	r0, [r7, #12]
 8008eee:	f7ff ff5b 	bl	8008da8 <SPI_WaitFifoStateUntilTimeout>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d007      	beq.n	8008f08 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008efc:	f043 0220 	orr.w	r2, r3, #32
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008f04:	2303      	movs	r3, #3
 8008f06:	e027      	b.n	8008f58 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	9300      	str	r3, [sp, #0]
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	2180      	movs	r1, #128	; 0x80
 8008f12:	68f8      	ldr	r0, [r7, #12]
 8008f14:	f7ff fec0 	bl	8008c98 <SPI_WaitFlagStateUntilTimeout>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d007      	beq.n	8008f2e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f22:	f043 0220 	orr.w	r2, r3, #32
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008f2a:	2303      	movs	r3, #3
 8008f2c:	e014      	b.n	8008f58 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	9300      	str	r3, [sp, #0]
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	2200      	movs	r2, #0
 8008f36:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008f3a:	68f8      	ldr	r0, [r7, #12]
 8008f3c:	f7ff ff34 	bl	8008da8 <SPI_WaitFifoStateUntilTimeout>
 8008f40:	4603      	mov	r3, r0
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d007      	beq.n	8008f56 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f4a:	f043 0220 	orr.w	r2, r3, #32
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008f52:	2303      	movs	r3, #3
 8008f54:	e000      	b.n	8008f58 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008f56:	2300      	movs	r3, #0
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3710      	adds	r7, #16
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d101      	bne.n	8008f72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	e049      	b.n	8009006 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d106      	bne.n	8008f8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2200      	movs	r2, #0
 8008f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 f841 	bl	800900e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2202      	movs	r2, #2
 8008f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	3304      	adds	r3, #4
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	4610      	mov	r0, r2
 8008fa0:	f000 f9da 	bl	8009358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2201      	movs	r2, #1
 8009000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009004:	2300      	movs	r3, #0
}
 8009006:	4618      	mov	r0, r3
 8009008:	3708      	adds	r7, #8
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800900e:	b480      	push	{r7}
 8009010:	b083      	sub	sp, #12
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009016:	bf00      	nop
 8009018:	370c      	adds	r7, #12
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr
	...

08009024 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009024:	b480      	push	{r7}
 8009026:	b085      	sub	sp, #20
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009032:	b2db      	uxtb	r3, r3
 8009034:	2b01      	cmp	r3, #1
 8009036:	d001      	beq.n	800903c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009038:	2301      	movs	r3, #1
 800903a:	e04f      	b.n	80090dc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2202      	movs	r2, #2
 8009040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	68da      	ldr	r2, [r3, #12]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f042 0201 	orr.w	r2, r2, #1
 8009052:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a23      	ldr	r2, [pc, #140]	; (80090e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d01d      	beq.n	800909a <HAL_TIM_Base_Start_IT+0x76>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009066:	d018      	beq.n	800909a <HAL_TIM_Base_Start_IT+0x76>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a1f      	ldr	r2, [pc, #124]	; (80090ec <HAL_TIM_Base_Start_IT+0xc8>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d013      	beq.n	800909a <HAL_TIM_Base_Start_IT+0x76>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a1e      	ldr	r2, [pc, #120]	; (80090f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d00e      	beq.n	800909a <HAL_TIM_Base_Start_IT+0x76>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a1c      	ldr	r2, [pc, #112]	; (80090f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d009      	beq.n	800909a <HAL_TIM_Base_Start_IT+0x76>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a1b      	ldr	r2, [pc, #108]	; (80090f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d004      	beq.n	800909a <HAL_TIM_Base_Start_IT+0x76>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a19      	ldr	r2, [pc, #100]	; (80090fc <HAL_TIM_Base_Start_IT+0xd8>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d115      	bne.n	80090c6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	689a      	ldr	r2, [r3, #8]
 80090a0:	4b17      	ldr	r3, [pc, #92]	; (8009100 <HAL_TIM_Base_Start_IT+0xdc>)
 80090a2:	4013      	ands	r3, r2
 80090a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2b06      	cmp	r3, #6
 80090aa:	d015      	beq.n	80090d8 <HAL_TIM_Base_Start_IT+0xb4>
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090b2:	d011      	beq.n	80090d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f042 0201 	orr.w	r2, r2, #1
 80090c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090c4:	e008      	b.n	80090d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f042 0201 	orr.w	r2, r2, #1
 80090d4:	601a      	str	r2, [r3, #0]
 80090d6:	e000      	b.n	80090da <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80090da:	2300      	movs	r3, #0
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3714      	adds	r7, #20
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr
 80090e8:	40012c00 	.word	0x40012c00
 80090ec:	40000400 	.word	0x40000400
 80090f0:	40000800 	.word	0x40000800
 80090f4:	40000c00 	.word	0x40000c00
 80090f8:	40013400 	.word	0x40013400
 80090fc:	40014000 	.word	0x40014000
 8009100:	00010007 	.word	0x00010007

08009104 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	68db      	ldr	r3, [r3, #12]
 8009112:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	691b      	ldr	r3, [r3, #16]
 800911a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	f003 0302 	and.w	r3, r3, #2
 8009122:	2b00      	cmp	r3, #0
 8009124:	d020      	beq.n	8009168 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f003 0302 	and.w	r3, r3, #2
 800912c:	2b00      	cmp	r3, #0
 800912e:	d01b      	beq.n	8009168 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f06f 0202 	mvn.w	r2, #2
 8009138:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2201      	movs	r2, #1
 800913e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	699b      	ldr	r3, [r3, #24]
 8009146:	f003 0303 	and.w	r3, r3, #3
 800914a:	2b00      	cmp	r3, #0
 800914c:	d003      	beq.n	8009156 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 f8e4 	bl	800931c <HAL_TIM_IC_CaptureCallback>
 8009154:	e005      	b.n	8009162 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 f8d6 	bl	8009308 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 f8e7 	bl	8009330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2200      	movs	r2, #0
 8009166:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	f003 0304 	and.w	r3, r3, #4
 800916e:	2b00      	cmp	r3, #0
 8009170:	d020      	beq.n	80091b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f003 0304 	and.w	r3, r3, #4
 8009178:	2b00      	cmp	r3, #0
 800917a:	d01b      	beq.n	80091b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f06f 0204 	mvn.w	r2, #4
 8009184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2202      	movs	r2, #2
 800918a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	699b      	ldr	r3, [r3, #24]
 8009192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009196:	2b00      	cmp	r3, #0
 8009198:	d003      	beq.n	80091a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 f8be 	bl	800931c <HAL_TIM_IC_CaptureCallback>
 80091a0:	e005      	b.n	80091ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f000 f8b0 	bl	8009308 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 f8c1 	bl	8009330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2200      	movs	r2, #0
 80091b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	f003 0308 	and.w	r3, r3, #8
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d020      	beq.n	8009200 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f003 0308 	and.w	r3, r3, #8
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d01b      	beq.n	8009200 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f06f 0208 	mvn.w	r2, #8
 80091d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2204      	movs	r2, #4
 80091d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	69db      	ldr	r3, [r3, #28]
 80091de:	f003 0303 	and.w	r3, r3, #3
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d003      	beq.n	80091ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 f898 	bl	800931c <HAL_TIM_IC_CaptureCallback>
 80091ec:	e005      	b.n	80091fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 f88a 	bl	8009308 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 f89b 	bl	8009330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	f003 0310 	and.w	r3, r3, #16
 8009206:	2b00      	cmp	r3, #0
 8009208:	d020      	beq.n	800924c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f003 0310 	and.w	r3, r3, #16
 8009210:	2b00      	cmp	r3, #0
 8009212:	d01b      	beq.n	800924c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f06f 0210 	mvn.w	r2, #16
 800921c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2208      	movs	r2, #8
 8009222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	69db      	ldr	r3, [r3, #28]
 800922a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800922e:	2b00      	cmp	r3, #0
 8009230:	d003      	beq.n	800923a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 f872 	bl	800931c <HAL_TIM_IC_CaptureCallback>
 8009238:	e005      	b.n	8009246 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 f864 	bl	8009308 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 f875 	bl	8009330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2200      	movs	r2, #0
 800924a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	f003 0301 	and.w	r3, r3, #1
 8009252:	2b00      	cmp	r3, #0
 8009254:	d00c      	beq.n	8009270 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f003 0301 	and.w	r3, r3, #1
 800925c:	2b00      	cmp	r3, #0
 800925e:	d007      	beq.n	8009270 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f06f 0201 	mvn.w	r2, #1
 8009268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f7f9 ff36 	bl	80030dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009276:	2b00      	cmp	r3, #0
 8009278:	d00c      	beq.n	8009294 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009280:	2b00      	cmp	r3, #0
 8009282:	d007      	beq.n	8009294 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800928c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 f906 	bl	80094a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800929a:	2b00      	cmp	r3, #0
 800929c:	d00c      	beq.n	80092b8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d007      	beq.n	80092b8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80092b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 f8fe 	bl	80094b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d00c      	beq.n	80092dc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d007      	beq.n	80092dc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80092d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 f834 	bl	8009344 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	f003 0320 	and.w	r3, r3, #32
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d00c      	beq.n	8009300 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f003 0320 	and.w	r3, r3, #32
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d007      	beq.n	8009300 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f06f 0220 	mvn.w	r2, #32
 80092f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 f8c6 	bl	800948c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009300:	bf00      	nop
 8009302:	3710      	adds	r7, #16
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009308:	b480      	push	{r7}
 800930a:	b083      	sub	sp, #12
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009310:	bf00      	nop
 8009312:	370c      	adds	r7, #12
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr

0800931c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009324:	bf00      	nop
 8009326:	370c      	adds	r7, #12
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009338:	bf00      	nop
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009344:	b480      	push	{r7}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800934c:	bf00      	nop
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009358:	b480      	push	{r7}
 800935a:	b085      	sub	sp, #20
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	4a40      	ldr	r2, [pc, #256]	; (800946c <TIM_Base_SetConfig+0x114>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d013      	beq.n	8009398 <TIM_Base_SetConfig+0x40>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009376:	d00f      	beq.n	8009398 <TIM_Base_SetConfig+0x40>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4a3d      	ldr	r2, [pc, #244]	; (8009470 <TIM_Base_SetConfig+0x118>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d00b      	beq.n	8009398 <TIM_Base_SetConfig+0x40>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	4a3c      	ldr	r2, [pc, #240]	; (8009474 <TIM_Base_SetConfig+0x11c>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d007      	beq.n	8009398 <TIM_Base_SetConfig+0x40>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	4a3b      	ldr	r2, [pc, #236]	; (8009478 <TIM_Base_SetConfig+0x120>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d003      	beq.n	8009398 <TIM_Base_SetConfig+0x40>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	4a3a      	ldr	r2, [pc, #232]	; (800947c <TIM_Base_SetConfig+0x124>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d108      	bne.n	80093aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800939e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	68fa      	ldr	r2, [r7, #12]
 80093a6:	4313      	orrs	r3, r2
 80093a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4a2f      	ldr	r2, [pc, #188]	; (800946c <TIM_Base_SetConfig+0x114>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d01f      	beq.n	80093f2 <TIM_Base_SetConfig+0x9a>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093b8:	d01b      	beq.n	80093f2 <TIM_Base_SetConfig+0x9a>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	4a2c      	ldr	r2, [pc, #176]	; (8009470 <TIM_Base_SetConfig+0x118>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d017      	beq.n	80093f2 <TIM_Base_SetConfig+0x9a>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	4a2b      	ldr	r2, [pc, #172]	; (8009474 <TIM_Base_SetConfig+0x11c>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d013      	beq.n	80093f2 <TIM_Base_SetConfig+0x9a>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	4a2a      	ldr	r2, [pc, #168]	; (8009478 <TIM_Base_SetConfig+0x120>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d00f      	beq.n	80093f2 <TIM_Base_SetConfig+0x9a>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	4a29      	ldr	r2, [pc, #164]	; (800947c <TIM_Base_SetConfig+0x124>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d00b      	beq.n	80093f2 <TIM_Base_SetConfig+0x9a>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	4a28      	ldr	r2, [pc, #160]	; (8009480 <TIM_Base_SetConfig+0x128>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d007      	beq.n	80093f2 <TIM_Base_SetConfig+0x9a>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	4a27      	ldr	r2, [pc, #156]	; (8009484 <TIM_Base_SetConfig+0x12c>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d003      	beq.n	80093f2 <TIM_Base_SetConfig+0x9a>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	4a26      	ldr	r2, [pc, #152]	; (8009488 <TIM_Base_SetConfig+0x130>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d108      	bne.n	8009404 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	68db      	ldr	r3, [r3, #12]
 80093fe:	68fa      	ldr	r2, [r7, #12]
 8009400:	4313      	orrs	r3, r2
 8009402:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	695b      	ldr	r3, [r3, #20]
 800940e:	4313      	orrs	r3, r2
 8009410:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	68fa      	ldr	r2, [r7, #12]
 8009416:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	689a      	ldr	r2, [r3, #8]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	4a10      	ldr	r2, [pc, #64]	; (800946c <TIM_Base_SetConfig+0x114>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d00f      	beq.n	8009450 <TIM_Base_SetConfig+0xf8>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	4a12      	ldr	r2, [pc, #72]	; (800947c <TIM_Base_SetConfig+0x124>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d00b      	beq.n	8009450 <TIM_Base_SetConfig+0xf8>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	4a11      	ldr	r2, [pc, #68]	; (8009480 <TIM_Base_SetConfig+0x128>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d007      	beq.n	8009450 <TIM_Base_SetConfig+0xf8>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4a10      	ldr	r2, [pc, #64]	; (8009484 <TIM_Base_SetConfig+0x12c>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d003      	beq.n	8009450 <TIM_Base_SetConfig+0xf8>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	4a0f      	ldr	r2, [pc, #60]	; (8009488 <TIM_Base_SetConfig+0x130>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d103      	bne.n	8009458 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	691a      	ldr	r2, [r3, #16]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2201      	movs	r2, #1
 800945c:	615a      	str	r2, [r3, #20]
}
 800945e:	bf00      	nop
 8009460:	3714      	adds	r7, #20
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr
 800946a:	bf00      	nop
 800946c:	40012c00 	.word	0x40012c00
 8009470:	40000400 	.word	0x40000400
 8009474:	40000800 	.word	0x40000800
 8009478:	40000c00 	.word	0x40000c00
 800947c:	40013400 	.word	0x40013400
 8009480:	40014000 	.word	0x40014000
 8009484:	40014400 	.word	0x40014400
 8009488:	40014800 	.word	0x40014800

0800948c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009494:	bf00      	nop
 8009496:	370c      	adds	r7, #12
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b083      	sub	sp, #12
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80094a8:	bf00      	nop
 80094aa:	370c      	adds	r7, #12
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr

080094b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b083      	sub	sp, #12
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80094bc:	bf00      	nop
 80094be:	370c      	adds	r7, #12
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr

080094c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b082      	sub	sp, #8
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d101      	bne.n	80094da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80094d6:	2301      	movs	r3, #1
 80094d8:	e042      	b.n	8009560 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d106      	bne.n	80094f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f7fa f895 	bl	800361c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2224      	movs	r2, #36	; 0x24
 80094f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f022 0201 	bic.w	r2, r2, #1
 8009508:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800950e:	2b00      	cmp	r3, #0
 8009510:	d002      	beq.n	8009518 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 fc20 	bl	8009d58 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 f921 	bl	8009760 <UART_SetConfig>
 800951e:	4603      	mov	r3, r0
 8009520:	2b01      	cmp	r3, #1
 8009522:	d101      	bne.n	8009528 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009524:	2301      	movs	r3, #1
 8009526:	e01b      	b.n	8009560 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	685a      	ldr	r2, [r3, #4]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009536:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	689a      	ldr	r2, [r3, #8]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009546:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f042 0201 	orr.w	r2, r2, #1
 8009556:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 fc9f 	bl	8009e9c <UART_CheckIdleState>
 800955e:	4603      	mov	r3, r0
}
 8009560:	4618      	mov	r0, r3
 8009562:	3708      	adds	r7, #8
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b08a      	sub	sp, #40	; 0x28
 800956c:	af02      	add	r7, sp, #8
 800956e:	60f8      	str	r0, [r7, #12]
 8009570:	60b9      	str	r1, [r7, #8]
 8009572:	603b      	str	r3, [r7, #0]
 8009574:	4613      	mov	r3, r2
 8009576:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800957e:	2b20      	cmp	r3, #32
 8009580:	d17c      	bne.n	800967c <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d002      	beq.n	800958e <HAL_UART_Transmit+0x26>
 8009588:	88fb      	ldrh	r3, [r7, #6]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d101      	bne.n	8009592 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800958e:	2301      	movs	r3, #1
 8009590:	e075      	b.n	800967e <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2200      	movs	r2, #0
 8009596:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2221      	movs	r2, #33	; 0x21
 800959e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80095a2:	f7fa faeb 	bl	8003b7c <HAL_GetTick>
 80095a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	88fa      	ldrh	r2, [r7, #6]
 80095ac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	88fa      	ldrh	r2, [r7, #6]
 80095b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095c0:	d108      	bne.n	80095d4 <HAL_UART_Transmit+0x6c>
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	691b      	ldr	r3, [r3, #16]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d104      	bne.n	80095d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80095ca:	2300      	movs	r3, #0
 80095cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	61bb      	str	r3, [r7, #24]
 80095d2:	e003      	b.n	80095dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80095d8:	2300      	movs	r3, #0
 80095da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80095dc:	e031      	b.n	8009642 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	9300      	str	r3, [sp, #0]
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	2200      	movs	r2, #0
 80095e6:	2180      	movs	r1, #128	; 0x80
 80095e8:	68f8      	ldr	r0, [r7, #12]
 80095ea:	f000 fd01 	bl	8009ff0 <UART_WaitOnFlagUntilTimeout>
 80095ee:	4603      	mov	r3, r0
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d005      	beq.n	8009600 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2220      	movs	r2, #32
 80095f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80095fc:	2303      	movs	r3, #3
 80095fe:	e03e      	b.n	800967e <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8009600:	69fb      	ldr	r3, [r7, #28]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d10b      	bne.n	800961e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009606:	69bb      	ldr	r3, [r7, #24]
 8009608:	881a      	ldrh	r2, [r3, #0]
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009612:	b292      	uxth	r2, r2
 8009614:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	3302      	adds	r3, #2
 800961a:	61bb      	str	r3, [r7, #24]
 800961c:	e008      	b.n	8009630 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800961e:	69fb      	ldr	r3, [r7, #28]
 8009620:	781a      	ldrb	r2, [r3, #0]
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	b292      	uxth	r2, r2
 8009628:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800962a:	69fb      	ldr	r3, [r7, #28]
 800962c:	3301      	adds	r3, #1
 800962e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009636:	b29b      	uxth	r3, r3
 8009638:	3b01      	subs	r3, #1
 800963a:	b29a      	uxth	r2, r3
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009648:	b29b      	uxth	r3, r3
 800964a:	2b00      	cmp	r3, #0
 800964c:	d1c7      	bne.n	80095de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	9300      	str	r3, [sp, #0]
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	2200      	movs	r2, #0
 8009656:	2140      	movs	r1, #64	; 0x40
 8009658:	68f8      	ldr	r0, [r7, #12]
 800965a:	f000 fcc9 	bl	8009ff0 <UART_WaitOnFlagUntilTimeout>
 800965e:	4603      	mov	r3, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	d005      	beq.n	8009670 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	2220      	movs	r2, #32
 8009668:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800966c:	2303      	movs	r3, #3
 800966e:	e006      	b.n	800967e <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2220      	movs	r2, #32
 8009674:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8009678:	2300      	movs	r3, #0
 800967a:	e000      	b.n	800967e <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 800967c:	2302      	movs	r3, #2
  }
}
 800967e:	4618      	mov	r0, r3
 8009680:	3720      	adds	r7, #32
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
	...

08009688 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b08a      	sub	sp, #40	; 0x28
 800968c:	af00      	add	r7, sp, #0
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	4613      	mov	r3, r2
 8009694:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800969c:	2b20      	cmp	r3, #32
 800969e:	d137      	bne.n	8009710 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d002      	beq.n	80096ac <HAL_UART_Receive_DMA+0x24>
 80096a6:	88fb      	ldrh	r3, [r7, #6]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d101      	bne.n	80096b0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80096ac:	2301      	movs	r3, #1
 80096ae:	e030      	b.n	8009712 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2200      	movs	r2, #0
 80096b4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a18      	ldr	r2, [pc, #96]	; (800971c <HAL_UART_Receive_DMA+0x94>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d01f      	beq.n	8009700 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d018      	beq.n	8009700 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	e853 3f00 	ldrex	r3, [r3]
 80096da:	613b      	str	r3, [r7, #16]
   return(result);
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80096e2:	627b      	str	r3, [r7, #36]	; 0x24
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	461a      	mov	r2, r3
 80096ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ec:	623b      	str	r3, [r7, #32]
 80096ee:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f0:	69f9      	ldr	r1, [r7, #28]
 80096f2:	6a3a      	ldr	r2, [r7, #32]
 80096f4:	e841 2300 	strex	r3, r2, [r1]
 80096f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80096fa:	69bb      	ldr	r3, [r7, #24]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d1e6      	bne.n	80096ce <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009700:	88fb      	ldrh	r3, [r7, #6]
 8009702:	461a      	mov	r2, r3
 8009704:	68b9      	ldr	r1, [r7, #8]
 8009706:	68f8      	ldr	r0, [r7, #12]
 8009708:	f000 fcda 	bl	800a0c0 <UART_Start_Receive_DMA>
 800970c:	4603      	mov	r3, r0
 800970e:	e000      	b.n	8009712 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009710:	2302      	movs	r3, #2
  }
}
 8009712:	4618      	mov	r0, r3
 8009714:	3728      	adds	r7, #40	; 0x28
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
 800971a:	bf00      	nop
 800971c:	40008000 	.word	0x40008000

08009720 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009728:	bf00      	nop
 800972a:	370c      	adds	r7, #12
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009734:	b480      	push	{r7}
 8009736:	b083      	sub	sp, #12
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800973c:	bf00      	nop
 800973e:	370c      	adds	r7, #12
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr

08009748 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	460b      	mov	r3, r1
 8009752:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009754:	bf00      	nop
 8009756:	370c      	adds	r7, #12
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr

08009760 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009764:	b08c      	sub	sp, #48	; 0x30
 8009766:	af00      	add	r7, sp, #0
 8009768:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800976a:	2300      	movs	r3, #0
 800976c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	689a      	ldr	r2, [r3, #8]
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	691b      	ldr	r3, [r3, #16]
 8009778:	431a      	orrs	r2, r3
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	695b      	ldr	r3, [r3, #20]
 800977e:	431a      	orrs	r2, r3
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	69db      	ldr	r3, [r3, #28]
 8009784:	4313      	orrs	r3, r2
 8009786:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	4baa      	ldr	r3, [pc, #680]	; (8009a38 <UART_SetConfig+0x2d8>)
 8009790:	4013      	ands	r3, r2
 8009792:	697a      	ldr	r2, [r7, #20]
 8009794:	6812      	ldr	r2, [r2, #0]
 8009796:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009798:	430b      	orrs	r3, r1
 800979a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	68da      	ldr	r2, [r3, #12]
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	430a      	orrs	r2, r1
 80097b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	699b      	ldr	r3, [r3, #24]
 80097b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a9f      	ldr	r2, [pc, #636]	; (8009a3c <UART_SetConfig+0x2dc>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d004      	beq.n	80097cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	6a1b      	ldr	r3, [r3, #32]
 80097c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097c8:	4313      	orrs	r3, r2
 80097ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	689b      	ldr	r3, [r3, #8]
 80097d2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80097d6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80097da:	697a      	ldr	r2, [r7, #20]
 80097dc:	6812      	ldr	r2, [r2, #0]
 80097de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80097e0:	430b      	orrs	r3, r1
 80097e2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ea:	f023 010f 	bic.w	r1, r3, #15
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	430a      	orrs	r2, r1
 80097f8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4a90      	ldr	r2, [pc, #576]	; (8009a40 <UART_SetConfig+0x2e0>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d125      	bne.n	8009850 <UART_SetConfig+0xf0>
 8009804:	4b8f      	ldr	r3, [pc, #572]	; (8009a44 <UART_SetConfig+0x2e4>)
 8009806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800980a:	f003 0303 	and.w	r3, r3, #3
 800980e:	2b03      	cmp	r3, #3
 8009810:	d81a      	bhi.n	8009848 <UART_SetConfig+0xe8>
 8009812:	a201      	add	r2, pc, #4	; (adr r2, 8009818 <UART_SetConfig+0xb8>)
 8009814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009818:	08009829 	.word	0x08009829
 800981c:	08009839 	.word	0x08009839
 8009820:	08009831 	.word	0x08009831
 8009824:	08009841 	.word	0x08009841
 8009828:	2301      	movs	r3, #1
 800982a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800982e:	e116      	b.n	8009a5e <UART_SetConfig+0x2fe>
 8009830:	2302      	movs	r3, #2
 8009832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009836:	e112      	b.n	8009a5e <UART_SetConfig+0x2fe>
 8009838:	2304      	movs	r3, #4
 800983a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800983e:	e10e      	b.n	8009a5e <UART_SetConfig+0x2fe>
 8009840:	2308      	movs	r3, #8
 8009842:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009846:	e10a      	b.n	8009a5e <UART_SetConfig+0x2fe>
 8009848:	2310      	movs	r3, #16
 800984a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800984e:	e106      	b.n	8009a5e <UART_SetConfig+0x2fe>
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a7c      	ldr	r2, [pc, #496]	; (8009a48 <UART_SetConfig+0x2e8>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d138      	bne.n	80098cc <UART_SetConfig+0x16c>
 800985a:	4b7a      	ldr	r3, [pc, #488]	; (8009a44 <UART_SetConfig+0x2e4>)
 800985c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009860:	f003 030c 	and.w	r3, r3, #12
 8009864:	2b0c      	cmp	r3, #12
 8009866:	d82d      	bhi.n	80098c4 <UART_SetConfig+0x164>
 8009868:	a201      	add	r2, pc, #4	; (adr r2, 8009870 <UART_SetConfig+0x110>)
 800986a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800986e:	bf00      	nop
 8009870:	080098a5 	.word	0x080098a5
 8009874:	080098c5 	.word	0x080098c5
 8009878:	080098c5 	.word	0x080098c5
 800987c:	080098c5 	.word	0x080098c5
 8009880:	080098b5 	.word	0x080098b5
 8009884:	080098c5 	.word	0x080098c5
 8009888:	080098c5 	.word	0x080098c5
 800988c:	080098c5 	.word	0x080098c5
 8009890:	080098ad 	.word	0x080098ad
 8009894:	080098c5 	.word	0x080098c5
 8009898:	080098c5 	.word	0x080098c5
 800989c:	080098c5 	.word	0x080098c5
 80098a0:	080098bd 	.word	0x080098bd
 80098a4:	2300      	movs	r3, #0
 80098a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098aa:	e0d8      	b.n	8009a5e <UART_SetConfig+0x2fe>
 80098ac:	2302      	movs	r3, #2
 80098ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098b2:	e0d4      	b.n	8009a5e <UART_SetConfig+0x2fe>
 80098b4:	2304      	movs	r3, #4
 80098b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098ba:	e0d0      	b.n	8009a5e <UART_SetConfig+0x2fe>
 80098bc:	2308      	movs	r3, #8
 80098be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098c2:	e0cc      	b.n	8009a5e <UART_SetConfig+0x2fe>
 80098c4:	2310      	movs	r3, #16
 80098c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098ca:	e0c8      	b.n	8009a5e <UART_SetConfig+0x2fe>
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a5e      	ldr	r2, [pc, #376]	; (8009a4c <UART_SetConfig+0x2ec>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d125      	bne.n	8009922 <UART_SetConfig+0x1c2>
 80098d6:	4b5b      	ldr	r3, [pc, #364]	; (8009a44 <UART_SetConfig+0x2e4>)
 80098d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80098e0:	2b30      	cmp	r3, #48	; 0x30
 80098e2:	d016      	beq.n	8009912 <UART_SetConfig+0x1b2>
 80098e4:	2b30      	cmp	r3, #48	; 0x30
 80098e6:	d818      	bhi.n	800991a <UART_SetConfig+0x1ba>
 80098e8:	2b20      	cmp	r3, #32
 80098ea:	d00a      	beq.n	8009902 <UART_SetConfig+0x1a2>
 80098ec:	2b20      	cmp	r3, #32
 80098ee:	d814      	bhi.n	800991a <UART_SetConfig+0x1ba>
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d002      	beq.n	80098fa <UART_SetConfig+0x19a>
 80098f4:	2b10      	cmp	r3, #16
 80098f6:	d008      	beq.n	800990a <UART_SetConfig+0x1aa>
 80098f8:	e00f      	b.n	800991a <UART_SetConfig+0x1ba>
 80098fa:	2300      	movs	r3, #0
 80098fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009900:	e0ad      	b.n	8009a5e <UART_SetConfig+0x2fe>
 8009902:	2302      	movs	r3, #2
 8009904:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009908:	e0a9      	b.n	8009a5e <UART_SetConfig+0x2fe>
 800990a:	2304      	movs	r3, #4
 800990c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009910:	e0a5      	b.n	8009a5e <UART_SetConfig+0x2fe>
 8009912:	2308      	movs	r3, #8
 8009914:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009918:	e0a1      	b.n	8009a5e <UART_SetConfig+0x2fe>
 800991a:	2310      	movs	r3, #16
 800991c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009920:	e09d      	b.n	8009a5e <UART_SetConfig+0x2fe>
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4a4a      	ldr	r2, [pc, #296]	; (8009a50 <UART_SetConfig+0x2f0>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d125      	bne.n	8009978 <UART_SetConfig+0x218>
 800992c:	4b45      	ldr	r3, [pc, #276]	; (8009a44 <UART_SetConfig+0x2e4>)
 800992e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009932:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009936:	2bc0      	cmp	r3, #192	; 0xc0
 8009938:	d016      	beq.n	8009968 <UART_SetConfig+0x208>
 800993a:	2bc0      	cmp	r3, #192	; 0xc0
 800993c:	d818      	bhi.n	8009970 <UART_SetConfig+0x210>
 800993e:	2b80      	cmp	r3, #128	; 0x80
 8009940:	d00a      	beq.n	8009958 <UART_SetConfig+0x1f8>
 8009942:	2b80      	cmp	r3, #128	; 0x80
 8009944:	d814      	bhi.n	8009970 <UART_SetConfig+0x210>
 8009946:	2b00      	cmp	r3, #0
 8009948:	d002      	beq.n	8009950 <UART_SetConfig+0x1f0>
 800994a:	2b40      	cmp	r3, #64	; 0x40
 800994c:	d008      	beq.n	8009960 <UART_SetConfig+0x200>
 800994e:	e00f      	b.n	8009970 <UART_SetConfig+0x210>
 8009950:	2300      	movs	r3, #0
 8009952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009956:	e082      	b.n	8009a5e <UART_SetConfig+0x2fe>
 8009958:	2302      	movs	r3, #2
 800995a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800995e:	e07e      	b.n	8009a5e <UART_SetConfig+0x2fe>
 8009960:	2304      	movs	r3, #4
 8009962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009966:	e07a      	b.n	8009a5e <UART_SetConfig+0x2fe>
 8009968:	2308      	movs	r3, #8
 800996a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800996e:	e076      	b.n	8009a5e <UART_SetConfig+0x2fe>
 8009970:	2310      	movs	r3, #16
 8009972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009976:	e072      	b.n	8009a5e <UART_SetConfig+0x2fe>
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4a35      	ldr	r2, [pc, #212]	; (8009a54 <UART_SetConfig+0x2f4>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d12a      	bne.n	80099d8 <UART_SetConfig+0x278>
 8009982:	4b30      	ldr	r3, [pc, #192]	; (8009a44 <UART_SetConfig+0x2e4>)
 8009984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009988:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800998c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009990:	d01a      	beq.n	80099c8 <UART_SetConfig+0x268>
 8009992:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009996:	d81b      	bhi.n	80099d0 <UART_SetConfig+0x270>
 8009998:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800999c:	d00c      	beq.n	80099b8 <UART_SetConfig+0x258>
 800999e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099a2:	d815      	bhi.n	80099d0 <UART_SetConfig+0x270>
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d003      	beq.n	80099b0 <UART_SetConfig+0x250>
 80099a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099ac:	d008      	beq.n	80099c0 <UART_SetConfig+0x260>
 80099ae:	e00f      	b.n	80099d0 <UART_SetConfig+0x270>
 80099b0:	2300      	movs	r3, #0
 80099b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099b6:	e052      	b.n	8009a5e <UART_SetConfig+0x2fe>
 80099b8:	2302      	movs	r3, #2
 80099ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099be:	e04e      	b.n	8009a5e <UART_SetConfig+0x2fe>
 80099c0:	2304      	movs	r3, #4
 80099c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099c6:	e04a      	b.n	8009a5e <UART_SetConfig+0x2fe>
 80099c8:	2308      	movs	r3, #8
 80099ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099ce:	e046      	b.n	8009a5e <UART_SetConfig+0x2fe>
 80099d0:	2310      	movs	r3, #16
 80099d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099d6:	e042      	b.n	8009a5e <UART_SetConfig+0x2fe>
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4a17      	ldr	r2, [pc, #92]	; (8009a3c <UART_SetConfig+0x2dc>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d13a      	bne.n	8009a58 <UART_SetConfig+0x2f8>
 80099e2:	4b18      	ldr	r3, [pc, #96]	; (8009a44 <UART_SetConfig+0x2e4>)
 80099e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80099ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80099f0:	d01a      	beq.n	8009a28 <UART_SetConfig+0x2c8>
 80099f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80099f6:	d81b      	bhi.n	8009a30 <UART_SetConfig+0x2d0>
 80099f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099fc:	d00c      	beq.n	8009a18 <UART_SetConfig+0x2b8>
 80099fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a02:	d815      	bhi.n	8009a30 <UART_SetConfig+0x2d0>
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d003      	beq.n	8009a10 <UART_SetConfig+0x2b0>
 8009a08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a0c:	d008      	beq.n	8009a20 <UART_SetConfig+0x2c0>
 8009a0e:	e00f      	b.n	8009a30 <UART_SetConfig+0x2d0>
 8009a10:	2300      	movs	r3, #0
 8009a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a16:	e022      	b.n	8009a5e <UART_SetConfig+0x2fe>
 8009a18:	2302      	movs	r3, #2
 8009a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a1e:	e01e      	b.n	8009a5e <UART_SetConfig+0x2fe>
 8009a20:	2304      	movs	r3, #4
 8009a22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a26:	e01a      	b.n	8009a5e <UART_SetConfig+0x2fe>
 8009a28:	2308      	movs	r3, #8
 8009a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a2e:	e016      	b.n	8009a5e <UART_SetConfig+0x2fe>
 8009a30:	2310      	movs	r3, #16
 8009a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a36:	e012      	b.n	8009a5e <UART_SetConfig+0x2fe>
 8009a38:	cfff69f3 	.word	0xcfff69f3
 8009a3c:	40008000 	.word	0x40008000
 8009a40:	40013800 	.word	0x40013800
 8009a44:	40021000 	.word	0x40021000
 8009a48:	40004400 	.word	0x40004400
 8009a4c:	40004800 	.word	0x40004800
 8009a50:	40004c00 	.word	0x40004c00
 8009a54:	40005000 	.word	0x40005000
 8009a58:	2310      	movs	r3, #16
 8009a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4aae      	ldr	r2, [pc, #696]	; (8009d1c <UART_SetConfig+0x5bc>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	f040 8097 	bne.w	8009b98 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009a6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009a6e:	2b08      	cmp	r3, #8
 8009a70:	d823      	bhi.n	8009aba <UART_SetConfig+0x35a>
 8009a72:	a201      	add	r2, pc, #4	; (adr r2, 8009a78 <UART_SetConfig+0x318>)
 8009a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a78:	08009a9d 	.word	0x08009a9d
 8009a7c:	08009abb 	.word	0x08009abb
 8009a80:	08009aa5 	.word	0x08009aa5
 8009a84:	08009abb 	.word	0x08009abb
 8009a88:	08009aab 	.word	0x08009aab
 8009a8c:	08009abb 	.word	0x08009abb
 8009a90:	08009abb 	.word	0x08009abb
 8009a94:	08009abb 	.word	0x08009abb
 8009a98:	08009ab3 	.word	0x08009ab3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a9c:	f7fe f882 	bl	8007ba4 <HAL_RCC_GetPCLK1Freq>
 8009aa0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009aa2:	e010      	b.n	8009ac6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009aa4:	4b9e      	ldr	r3, [pc, #632]	; (8009d20 <UART_SetConfig+0x5c0>)
 8009aa6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009aa8:	e00d      	b.n	8009ac6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009aaa:	f7fd ffe3 	bl	8007a74 <HAL_RCC_GetSysClockFreq>
 8009aae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009ab0:	e009      	b.n	8009ac6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ab2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ab6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009ab8:	e005      	b.n	8009ac6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009aba:	2300      	movs	r3, #0
 8009abc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009ac4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	f000 8130 	beq.w	8009d2e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad2:	4a94      	ldr	r2, [pc, #592]	; (8009d24 <UART_SetConfig+0x5c4>)
 8009ad4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ad8:	461a      	mov	r2, r3
 8009ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009adc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ae0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	685a      	ldr	r2, [r3, #4]
 8009ae6:	4613      	mov	r3, r2
 8009ae8:	005b      	lsls	r3, r3, #1
 8009aea:	4413      	add	r3, r2
 8009aec:	69ba      	ldr	r2, [r7, #24]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d305      	bcc.n	8009afe <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009af8:	69ba      	ldr	r2, [r7, #24]
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d903      	bls.n	8009b06 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009afe:	2301      	movs	r3, #1
 8009b00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009b04:	e113      	b.n	8009d2e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b08:	2200      	movs	r2, #0
 8009b0a:	60bb      	str	r3, [r7, #8]
 8009b0c:	60fa      	str	r2, [r7, #12]
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b12:	4a84      	ldr	r2, [pc, #528]	; (8009d24 <UART_SetConfig+0x5c4>)
 8009b14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	603b      	str	r3, [r7, #0]
 8009b1e:	607a      	str	r2, [r7, #4]
 8009b20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009b28:	f7f6 fb6a 	bl	8000200 <__aeabi_uldivmod>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	460b      	mov	r3, r1
 8009b30:	4610      	mov	r0, r2
 8009b32:	4619      	mov	r1, r3
 8009b34:	f04f 0200 	mov.w	r2, #0
 8009b38:	f04f 0300 	mov.w	r3, #0
 8009b3c:	020b      	lsls	r3, r1, #8
 8009b3e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009b42:	0202      	lsls	r2, r0, #8
 8009b44:	6979      	ldr	r1, [r7, #20]
 8009b46:	6849      	ldr	r1, [r1, #4]
 8009b48:	0849      	lsrs	r1, r1, #1
 8009b4a:	2000      	movs	r0, #0
 8009b4c:	460c      	mov	r4, r1
 8009b4e:	4605      	mov	r5, r0
 8009b50:	eb12 0804 	adds.w	r8, r2, r4
 8009b54:	eb43 0905 	adc.w	r9, r3, r5
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	469a      	mov	sl, r3
 8009b60:	4693      	mov	fp, r2
 8009b62:	4652      	mov	r2, sl
 8009b64:	465b      	mov	r3, fp
 8009b66:	4640      	mov	r0, r8
 8009b68:	4649      	mov	r1, r9
 8009b6a:	f7f6 fb49 	bl	8000200 <__aeabi_uldivmod>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	460b      	mov	r3, r1
 8009b72:	4613      	mov	r3, r2
 8009b74:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009b76:	6a3b      	ldr	r3, [r7, #32]
 8009b78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b7c:	d308      	bcc.n	8009b90 <UART_SetConfig+0x430>
 8009b7e:	6a3b      	ldr	r3, [r7, #32]
 8009b80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b84:	d204      	bcs.n	8009b90 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	6a3a      	ldr	r2, [r7, #32]
 8009b8c:	60da      	str	r2, [r3, #12]
 8009b8e:	e0ce      	b.n	8009d2e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009b90:	2301      	movs	r3, #1
 8009b92:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009b96:	e0ca      	b.n	8009d2e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	69db      	ldr	r3, [r3, #28]
 8009b9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ba0:	d166      	bne.n	8009c70 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009ba2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009ba6:	2b08      	cmp	r3, #8
 8009ba8:	d827      	bhi.n	8009bfa <UART_SetConfig+0x49a>
 8009baa:	a201      	add	r2, pc, #4	; (adr r2, 8009bb0 <UART_SetConfig+0x450>)
 8009bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb0:	08009bd5 	.word	0x08009bd5
 8009bb4:	08009bdd 	.word	0x08009bdd
 8009bb8:	08009be5 	.word	0x08009be5
 8009bbc:	08009bfb 	.word	0x08009bfb
 8009bc0:	08009beb 	.word	0x08009beb
 8009bc4:	08009bfb 	.word	0x08009bfb
 8009bc8:	08009bfb 	.word	0x08009bfb
 8009bcc:	08009bfb 	.word	0x08009bfb
 8009bd0:	08009bf3 	.word	0x08009bf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bd4:	f7fd ffe6 	bl	8007ba4 <HAL_RCC_GetPCLK1Freq>
 8009bd8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009bda:	e014      	b.n	8009c06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009bdc:	f7fd fff8 	bl	8007bd0 <HAL_RCC_GetPCLK2Freq>
 8009be0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009be2:	e010      	b.n	8009c06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009be4:	4b4e      	ldr	r3, [pc, #312]	; (8009d20 <UART_SetConfig+0x5c0>)
 8009be6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009be8:	e00d      	b.n	8009c06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009bea:	f7fd ff43 	bl	8007a74 <HAL_RCC_GetSysClockFreq>
 8009bee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009bf0:	e009      	b.n	8009c06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bf6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009bf8:	e005      	b.n	8009c06 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009c04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	f000 8090 	beq.w	8009d2e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c12:	4a44      	ldr	r2, [pc, #272]	; (8009d24 <UART_SetConfig+0x5c4>)
 8009c14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c18:	461a      	mov	r2, r3
 8009c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c20:	005a      	lsls	r2, r3, #1
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	685b      	ldr	r3, [r3, #4]
 8009c26:	085b      	lsrs	r3, r3, #1
 8009c28:	441a      	add	r2, r3
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c32:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c34:	6a3b      	ldr	r3, [r7, #32]
 8009c36:	2b0f      	cmp	r3, #15
 8009c38:	d916      	bls.n	8009c68 <UART_SetConfig+0x508>
 8009c3a:	6a3b      	ldr	r3, [r7, #32]
 8009c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c40:	d212      	bcs.n	8009c68 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c42:	6a3b      	ldr	r3, [r7, #32]
 8009c44:	b29b      	uxth	r3, r3
 8009c46:	f023 030f 	bic.w	r3, r3, #15
 8009c4a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c4c:	6a3b      	ldr	r3, [r7, #32]
 8009c4e:	085b      	lsrs	r3, r3, #1
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	f003 0307 	and.w	r3, r3, #7
 8009c56:	b29a      	uxth	r2, r3
 8009c58:	8bfb      	ldrh	r3, [r7, #30]
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	8bfa      	ldrh	r2, [r7, #30]
 8009c64:	60da      	str	r2, [r3, #12]
 8009c66:	e062      	b.n	8009d2e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009c6e:	e05e      	b.n	8009d2e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009c70:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009c74:	2b08      	cmp	r3, #8
 8009c76:	d828      	bhi.n	8009cca <UART_SetConfig+0x56a>
 8009c78:	a201      	add	r2, pc, #4	; (adr r2, 8009c80 <UART_SetConfig+0x520>)
 8009c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c7e:	bf00      	nop
 8009c80:	08009ca5 	.word	0x08009ca5
 8009c84:	08009cad 	.word	0x08009cad
 8009c88:	08009cb5 	.word	0x08009cb5
 8009c8c:	08009ccb 	.word	0x08009ccb
 8009c90:	08009cbb 	.word	0x08009cbb
 8009c94:	08009ccb 	.word	0x08009ccb
 8009c98:	08009ccb 	.word	0x08009ccb
 8009c9c:	08009ccb 	.word	0x08009ccb
 8009ca0:	08009cc3 	.word	0x08009cc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ca4:	f7fd ff7e 	bl	8007ba4 <HAL_RCC_GetPCLK1Freq>
 8009ca8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009caa:	e014      	b.n	8009cd6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009cac:	f7fd ff90 	bl	8007bd0 <HAL_RCC_GetPCLK2Freq>
 8009cb0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009cb2:	e010      	b.n	8009cd6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009cb4:	4b1a      	ldr	r3, [pc, #104]	; (8009d20 <UART_SetConfig+0x5c0>)
 8009cb6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009cb8:	e00d      	b.n	8009cd6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009cba:	f7fd fedb 	bl	8007a74 <HAL_RCC_GetSysClockFreq>
 8009cbe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009cc0:	e009      	b.n	8009cd6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cc6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009cc8:	e005      	b.n	8009cd6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009cce:	2301      	movs	r3, #1
 8009cd0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009cd4:	bf00      	nop
    }

    if (pclk != 0U)
 8009cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d028      	beq.n	8009d2e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce0:	4a10      	ldr	r2, [pc, #64]	; (8009d24 <UART_SetConfig+0x5c4>)
 8009ce2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ce6:	461a      	mov	r2, r3
 8009ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cea:	fbb3 f2f2 	udiv	r2, r3, r2
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	085b      	lsrs	r3, r3, #1
 8009cf4:	441a      	add	r2, r3
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cfe:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d00:	6a3b      	ldr	r3, [r7, #32]
 8009d02:	2b0f      	cmp	r3, #15
 8009d04:	d910      	bls.n	8009d28 <UART_SetConfig+0x5c8>
 8009d06:	6a3b      	ldr	r3, [r7, #32]
 8009d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d0c:	d20c      	bcs.n	8009d28 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009d0e:	6a3b      	ldr	r3, [r7, #32]
 8009d10:	b29a      	uxth	r2, r3
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	60da      	str	r2, [r3, #12]
 8009d18:	e009      	b.n	8009d2e <UART_SetConfig+0x5ce>
 8009d1a:	bf00      	nop
 8009d1c:	40008000 	.word	0x40008000
 8009d20:	00f42400 	.word	0x00f42400
 8009d24:	0800b0d4 	.word	0x0800b0d4
      }
      else
      {
        ret = HAL_ERROR;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	2201      	movs	r2, #1
 8009d32:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	2201      	movs	r2, #1
 8009d3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	2200      	movs	r2, #0
 8009d42:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	2200      	movs	r2, #0
 8009d48:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009d4a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3730      	adds	r7, #48	; 0x30
 8009d52:	46bd      	mov	sp, r7
 8009d54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009d58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b083      	sub	sp, #12
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d64:	f003 0308 	and.w	r3, r3, #8
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d00a      	beq.n	8009d82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	430a      	orrs	r2, r1
 8009d80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d86:	f003 0301 	and.w	r3, r3, #1
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00a      	beq.n	8009da4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	430a      	orrs	r2, r1
 8009da2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009da8:	f003 0302 	and.w	r3, r3, #2
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d00a      	beq.n	8009dc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	430a      	orrs	r2, r1
 8009dc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dca:	f003 0304 	and.w	r3, r3, #4
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d00a      	beq.n	8009de8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	430a      	orrs	r2, r1
 8009de6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dec:	f003 0310 	and.w	r3, r3, #16
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d00a      	beq.n	8009e0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	689b      	ldr	r3, [r3, #8]
 8009dfa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	430a      	orrs	r2, r1
 8009e08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e0e:	f003 0320 	and.w	r3, r3, #32
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d00a      	beq.n	8009e2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	689b      	ldr	r3, [r3, #8]
 8009e1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	430a      	orrs	r2, r1
 8009e2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d01a      	beq.n	8009e6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	430a      	orrs	r2, r1
 8009e4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e56:	d10a      	bne.n	8009e6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	430a      	orrs	r2, r1
 8009e6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d00a      	beq.n	8009e90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	430a      	orrs	r2, r1
 8009e8e:	605a      	str	r2, [r3, #4]
  }
}
 8009e90:	bf00      	nop
 8009e92:	370c      	adds	r7, #12
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr

08009e9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b098      	sub	sp, #96	; 0x60
 8009ea0:	af02      	add	r7, sp, #8
 8009ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009eac:	f7f9 fe66 	bl	8003b7c <HAL_GetTick>
 8009eb0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f003 0308 	and.w	r3, r3, #8
 8009ebc:	2b08      	cmp	r3, #8
 8009ebe:	d12f      	bne.n	8009f20 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ec0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ec4:	9300      	str	r3, [sp, #0]
 8009ec6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 f88e 	bl	8009ff0 <UART_WaitOnFlagUntilTimeout>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d022      	beq.n	8009f20 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ee2:	e853 3f00 	ldrex	r3, [r3]
 8009ee6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009eee:	653b      	str	r3, [r7, #80]	; 0x50
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ef8:	647b      	str	r3, [r7, #68]	; 0x44
 8009efa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009efc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009efe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f00:	e841 2300 	strex	r3, r2, [r1]
 8009f04:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d1e6      	bne.n	8009eda <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2220      	movs	r2, #32
 8009f10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2200      	movs	r2, #0
 8009f18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f1c:	2303      	movs	r3, #3
 8009f1e:	e063      	b.n	8009fe8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f003 0304 	and.w	r3, r3, #4
 8009f2a:	2b04      	cmp	r3, #4
 8009f2c:	d149      	bne.n	8009fc2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f2e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009f32:	9300      	str	r3, [sp, #0]
 8009f34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f36:	2200      	movs	r2, #0
 8009f38:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 f857 	bl	8009ff0 <UART_WaitOnFlagUntilTimeout>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d03c      	beq.n	8009fc2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f50:	e853 3f00 	ldrex	r3, [r3]
 8009f54:	623b      	str	r3, [r7, #32]
   return(result);
 8009f56:	6a3b      	ldr	r3, [r7, #32]
 8009f58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009f5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	461a      	mov	r2, r3
 8009f64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f66:	633b      	str	r3, [r7, #48]	; 0x30
 8009f68:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f6e:	e841 2300 	strex	r3, r2, [r1]
 8009f72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d1e6      	bne.n	8009f48 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	3308      	adds	r3, #8
 8009f80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	e853 3f00 	ldrex	r3, [r3]
 8009f88:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	f023 0301 	bic.w	r3, r3, #1
 8009f90:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	3308      	adds	r3, #8
 8009f98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f9a:	61fa      	str	r2, [r7, #28]
 8009f9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f9e:	69b9      	ldr	r1, [r7, #24]
 8009fa0:	69fa      	ldr	r2, [r7, #28]
 8009fa2:	e841 2300 	strex	r3, r2, [r1]
 8009fa6:	617b      	str	r3, [r7, #20]
   return(result);
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d1e5      	bne.n	8009f7a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2220      	movs	r2, #32
 8009fb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009fbe:	2303      	movs	r3, #3
 8009fc0:	e012      	b.n	8009fe8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2220      	movs	r2, #32
 8009fc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2220      	movs	r2, #32
 8009fce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009fe6:	2300      	movs	r3, #0
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3758      	adds	r7, #88	; 0x58
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b084      	sub	sp, #16
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	60b9      	str	r1, [r7, #8]
 8009ffa:	603b      	str	r3, [r7, #0]
 8009ffc:	4613      	mov	r3, r2
 8009ffe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a000:	e049      	b.n	800a096 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a002:	69bb      	ldr	r3, [r7, #24]
 800a004:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a008:	d045      	beq.n	800a096 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a00a:	f7f9 fdb7 	bl	8003b7c <HAL_GetTick>
 800a00e:	4602      	mov	r2, r0
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	1ad3      	subs	r3, r2, r3
 800a014:	69ba      	ldr	r2, [r7, #24]
 800a016:	429a      	cmp	r2, r3
 800a018:	d302      	bcc.n	800a020 <UART_WaitOnFlagUntilTimeout+0x30>
 800a01a:	69bb      	ldr	r3, [r7, #24]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d101      	bne.n	800a024 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a020:	2303      	movs	r3, #3
 800a022:	e048      	b.n	800a0b6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f003 0304 	and.w	r3, r3, #4
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d031      	beq.n	800a096 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	69db      	ldr	r3, [r3, #28]
 800a038:	f003 0308 	and.w	r3, r3, #8
 800a03c:	2b08      	cmp	r3, #8
 800a03e:	d110      	bne.n	800a062 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	2208      	movs	r2, #8
 800a046:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a048:	68f8      	ldr	r0, [r7, #12]
 800a04a:	f000 f920 	bl	800a28e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2208      	movs	r2, #8
 800a052:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2200      	movs	r2, #0
 800a05a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800a05e:	2301      	movs	r3, #1
 800a060:	e029      	b.n	800a0b6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	69db      	ldr	r3, [r3, #28]
 800a068:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a06c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a070:	d111      	bne.n	800a096 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a07a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a07c:	68f8      	ldr	r0, [r7, #12]
 800a07e:	f000 f906 	bl	800a28e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2220      	movs	r2, #32
 800a086:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2200      	movs	r2, #0
 800a08e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a092:	2303      	movs	r3, #3
 800a094:	e00f      	b.n	800a0b6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	69da      	ldr	r2, [r3, #28]
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	4013      	ands	r3, r2
 800a0a0:	68ba      	ldr	r2, [r7, #8]
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	bf0c      	ite	eq
 800a0a6:	2301      	moveq	r3, #1
 800a0a8:	2300      	movne	r3, #0
 800a0aa:	b2db      	uxtb	r3, r3
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	79fb      	ldrb	r3, [r7, #7]
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d0a6      	beq.n	800a002 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a0b4:	2300      	movs	r3, #0
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3710      	adds	r7, #16
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
	...

0800a0c0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b096      	sub	sp, #88	; 0x58
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	60f8      	str	r0, [r7, #12]
 800a0c8:	60b9      	str	r1, [r7, #8]
 800a0ca:	4613      	mov	r3, r2
 800a0cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	68ba      	ldr	r2, [r7, #8]
 800a0d2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	88fa      	ldrh	r2, [r7, #6]
 800a0d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2222      	movs	r2, #34	; 0x22
 800a0e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d02d      	beq.n	800a152 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0fc:	4a40      	ldr	r2, [pc, #256]	; (800a200 <UART_Start_Receive_DMA+0x140>)
 800a0fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a106:	4a3f      	ldr	r2, [pc, #252]	; (800a204 <UART_Start_Receive_DMA+0x144>)
 800a108:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a110:	4a3d      	ldr	r2, [pc, #244]	; (800a208 <UART_Start_Receive_DMA+0x148>)
 800a112:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a11a:	2200      	movs	r2, #0
 800a11c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	3324      	adds	r3, #36	; 0x24
 800a12a:	4619      	mov	r1, r3
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a130:	461a      	mov	r2, r3
 800a132:	88fb      	ldrh	r3, [r7, #6]
 800a134:	f7fa feca 	bl	8004ecc <HAL_DMA_Start_IT>
 800a138:	4603      	mov	r3, r0
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d009      	beq.n	800a152 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2210      	movs	r2, #16
 800a142:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	2220      	movs	r2, #32
 800a14a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800a14e:	2301      	movs	r3, #1
 800a150:	e051      	b.n	800a1f6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	691b      	ldr	r3, [r3, #16]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d018      	beq.n	800a18c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a162:	e853 3f00 	ldrex	r3, [r3]
 800a166:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a16a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a16e:	657b      	str	r3, [r7, #84]	; 0x54
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	461a      	mov	r2, r3
 800a176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a178:	64bb      	str	r3, [r7, #72]	; 0x48
 800a17a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a17c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a17e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a180:	e841 2300 	strex	r3, r2, [r1]
 800a184:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a186:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d1e6      	bne.n	800a15a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	3308      	adds	r3, #8
 800a192:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a196:	e853 3f00 	ldrex	r3, [r3]
 800a19a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19e:	f043 0301 	orr.w	r3, r3, #1
 800a1a2:	653b      	str	r3, [r7, #80]	; 0x50
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	3308      	adds	r3, #8
 800a1aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a1ac:	637a      	str	r2, [r7, #52]	; 0x34
 800a1ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a1b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1b4:	e841 2300 	strex	r3, r2, [r1]
 800a1b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d1e5      	bne.n	800a18c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	3308      	adds	r3, #8
 800a1c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	e853 3f00 	ldrex	r3, [r3]
 800a1ce:	613b      	str	r3, [r7, #16]
   return(result);
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	3308      	adds	r3, #8
 800a1de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a1e0:	623a      	str	r2, [r7, #32]
 800a1e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1e4:	69f9      	ldr	r1, [r7, #28]
 800a1e6:	6a3a      	ldr	r2, [r7, #32]
 800a1e8:	e841 2300 	strex	r3, r2, [r1]
 800a1ec:	61bb      	str	r3, [r7, #24]
   return(result);
 800a1ee:	69bb      	ldr	r3, [r7, #24]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d1e5      	bne.n	800a1c0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a1f4:	2300      	movs	r3, #0
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3758      	adds	r7, #88	; 0x58
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	bf00      	nop
 800a200:	0800a35b 	.word	0x0800a35b
 800a204:	0800a487 	.word	0x0800a487
 800a208:	0800a4c5 	.word	0x0800a4c5

0800a20c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b08f      	sub	sp, #60	; 0x3c
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a21a:	6a3b      	ldr	r3, [r7, #32]
 800a21c:	e853 3f00 	ldrex	r3, [r3]
 800a220:	61fb      	str	r3, [r7, #28]
   return(result);
 800a222:	69fb      	ldr	r3, [r7, #28]
 800a224:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a228:	637b      	str	r3, [r7, #52]	; 0x34
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	461a      	mov	r2, r3
 800a230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a232:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a234:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a236:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a238:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a23a:	e841 2300 	strex	r3, r2, [r1]
 800a23e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a242:	2b00      	cmp	r3, #0
 800a244:	d1e6      	bne.n	800a214 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	3308      	adds	r3, #8
 800a24c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	e853 3f00 	ldrex	r3, [r3]
 800a254:	60bb      	str	r3, [r7, #8]
   return(result);
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a25c:	633b      	str	r3, [r7, #48]	; 0x30
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	3308      	adds	r3, #8
 800a264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a266:	61ba      	str	r2, [r7, #24]
 800a268:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a26a:	6979      	ldr	r1, [r7, #20]
 800a26c:	69ba      	ldr	r2, [r7, #24]
 800a26e:	e841 2300 	strex	r3, r2, [r1]
 800a272:	613b      	str	r3, [r7, #16]
   return(result);
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d1e5      	bne.n	800a246 <UART_EndTxTransfer+0x3a>
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2220      	movs	r2, #32
 800a27e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800a282:	bf00      	nop
 800a284:	373c      	adds	r7, #60	; 0x3c
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr

0800a28e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a28e:	b480      	push	{r7}
 800a290:	b095      	sub	sp, #84	; 0x54
 800a292:	af00      	add	r7, sp, #0
 800a294:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a29c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a29e:	e853 3f00 	ldrex	r3, [r3]
 800a2a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a2a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a2aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2b4:	643b      	str	r3, [r7, #64]	; 0x40
 800a2b6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a2ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a2bc:	e841 2300 	strex	r3, r2, [r1]
 800a2c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d1e6      	bne.n	800a296 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	3308      	adds	r3, #8
 800a2ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d0:	6a3b      	ldr	r3, [r7, #32]
 800a2d2:	e853 3f00 	ldrex	r3, [r3]
 800a2d6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2d8:	69fb      	ldr	r3, [r7, #28]
 800a2da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a2de:	f023 0301 	bic.w	r3, r3, #1
 800a2e2:	64bb      	str	r3, [r7, #72]	; 0x48
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	3308      	adds	r3, #8
 800a2ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a2ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2f4:	e841 2300 	strex	r3, r2, [r1]
 800a2f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d1e3      	bne.n	800a2c8 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a304:	2b01      	cmp	r3, #1
 800a306:	d118      	bne.n	800a33a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	e853 3f00 	ldrex	r3, [r3]
 800a314:	60bb      	str	r3, [r7, #8]
   return(result);
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	f023 0310 	bic.w	r3, r3, #16
 800a31c:	647b      	str	r3, [r7, #68]	; 0x44
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	461a      	mov	r2, r3
 800a324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a326:	61bb      	str	r3, [r7, #24]
 800a328:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a32a:	6979      	ldr	r1, [r7, #20]
 800a32c:	69ba      	ldr	r2, [r7, #24]
 800a32e:	e841 2300 	strex	r3, r2, [r1]
 800a332:	613b      	str	r3, [r7, #16]
   return(result);
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d1e6      	bne.n	800a308 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2220      	movs	r2, #32
 800a33e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2200      	movs	r2, #0
 800a346:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2200      	movs	r2, #0
 800a34c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a34e:	bf00      	nop
 800a350:	3754      	adds	r7, #84	; 0x54
 800a352:	46bd      	mov	sp, r7
 800a354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a358:	4770      	bx	lr

0800a35a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a35a:	b580      	push	{r7, lr}
 800a35c:	b09c      	sub	sp, #112	; 0x70
 800a35e:	af00      	add	r7, sp, #0
 800a360:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a366:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f003 0320 	and.w	r3, r3, #32
 800a372:	2b00      	cmp	r3, #0
 800a374:	d171      	bne.n	800a45a <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a378:	2200      	movs	r2, #0
 800a37a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a37e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a386:	e853 3f00 	ldrex	r3, [r3]
 800a38a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a38c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a38e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a392:	66bb      	str	r3, [r7, #104]	; 0x68
 800a394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	461a      	mov	r2, r3
 800a39a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a39c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a39e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a3a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a3a4:	e841 2300 	strex	r3, r2, [r1]
 800a3a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a3aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d1e6      	bne.n	800a37e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	3308      	adds	r3, #8
 800a3b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ba:	e853 3f00 	ldrex	r3, [r3]
 800a3be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a3c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3c2:	f023 0301 	bic.w	r3, r3, #1
 800a3c6:	667b      	str	r3, [r7, #100]	; 0x64
 800a3c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	3308      	adds	r3, #8
 800a3ce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a3d0:	647a      	str	r2, [r7, #68]	; 0x44
 800a3d2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a3d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a3d8:	e841 2300 	strex	r3, r2, [r1]
 800a3dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a3de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d1e5      	bne.n	800a3b0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	3308      	adds	r3, #8
 800a3ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ee:	e853 3f00 	ldrex	r3, [r3]
 800a3f2:	623b      	str	r3, [r7, #32]
   return(result);
 800a3f4:	6a3b      	ldr	r3, [r7, #32]
 800a3f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3fa:	663b      	str	r3, [r7, #96]	; 0x60
 800a3fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	3308      	adds	r3, #8
 800a402:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a404:	633a      	str	r2, [r7, #48]	; 0x30
 800a406:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a408:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a40a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a40c:	e841 2300 	strex	r3, r2, [r1]
 800a410:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a414:	2b00      	cmp	r3, #0
 800a416:	d1e5      	bne.n	800a3e4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a41a:	2220      	movs	r2, #32
 800a41c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a424:	2b01      	cmp	r3, #1
 800a426:	d118      	bne.n	800a45a <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	e853 3f00 	ldrex	r3, [r3]
 800a434:	60fb      	str	r3, [r7, #12]
   return(result);
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f023 0310 	bic.w	r3, r3, #16
 800a43c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a43e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	461a      	mov	r2, r3
 800a444:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a446:	61fb      	str	r3, [r7, #28]
 800a448:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a44a:	69b9      	ldr	r1, [r7, #24]
 800a44c:	69fa      	ldr	r2, [r7, #28]
 800a44e:	e841 2300 	strex	r3, r2, [r1]
 800a452:	617b      	str	r3, [r7, #20]
   return(result);
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d1e6      	bne.n	800a428 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a45a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a45c:	2200      	movs	r2, #0
 800a45e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a464:	2b01      	cmp	r3, #1
 800a466:	d107      	bne.n	800a478 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a46a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a46e:	4619      	mov	r1, r3
 800a470:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a472:	f7ff f969 	bl	8009748 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a476:	e002      	b.n	800a47e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800a478:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a47a:	f7f8 fe1f 	bl	80030bc <HAL_UART_RxCpltCallback>
}
 800a47e:	bf00      	nop
 800a480:	3770      	adds	r7, #112	; 0x70
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}

0800a486 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a486:	b580      	push	{r7, lr}
 800a488:	b084      	sub	sp, #16
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a492:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2201      	movs	r2, #1
 800a498:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	d109      	bne.n	800a4b6 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a4a8:	085b      	lsrs	r3, r3, #1
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	68f8      	ldr	r0, [r7, #12]
 800a4b0:	f7ff f94a 	bl	8009748 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a4b4:	e002      	b.n	800a4bc <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a4b6:	68f8      	ldr	r0, [r7, #12]
 800a4b8:	f7ff f932 	bl	8009720 <HAL_UART_RxHalfCpltCallback>
}
 800a4bc:	bf00      	nop
 800a4be:	3710      	adds	r7, #16
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}

0800a4c4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b086      	sub	sp, #24
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4d0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4d8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4e0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	689b      	ldr	r3, [r3, #8]
 800a4e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4ec:	2b80      	cmp	r3, #128	; 0x80
 800a4ee:	d109      	bne.n	800a504 <UART_DMAError+0x40>
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	2b21      	cmp	r3, #33	; 0x21
 800a4f4:	d106      	bne.n	800a504 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a4fe:	6978      	ldr	r0, [r7, #20]
 800a500:	f7ff fe84 	bl	800a20c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	689b      	ldr	r3, [r3, #8]
 800a50a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a50e:	2b40      	cmp	r3, #64	; 0x40
 800a510:	d109      	bne.n	800a526 <UART_DMAError+0x62>
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	2b22      	cmp	r3, #34	; 0x22
 800a516:	d106      	bne.n	800a526 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	2200      	movs	r2, #0
 800a51c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a520:	6978      	ldr	r0, [r7, #20]
 800a522:	f7ff feb4 	bl	800a28e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a52c:	f043 0210 	orr.w	r2, r3, #16
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a536:	6978      	ldr	r0, [r7, #20]
 800a538:	f7ff f8fc 	bl	8009734 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a53c:	bf00      	nop
 800a53e:	3718      	adds	r7, #24
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}

0800a544 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a544:	b480      	push	{r7}
 800a546:	b085      	sub	sp, #20
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a552:	2b01      	cmp	r3, #1
 800a554:	d101      	bne.n	800a55a <HAL_UARTEx_DisableFifoMode+0x16>
 800a556:	2302      	movs	r3, #2
 800a558:	e027      	b.n	800a5aa <HAL_UARTEx_DisableFifoMode+0x66>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2201      	movs	r2, #1
 800a55e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2224      	movs	r2, #36	; 0x24
 800a566:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	681a      	ldr	r2, [r3, #0]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f022 0201 	bic.w	r2, r2, #1
 800a580:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a588:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2200      	movs	r2, #0
 800a58e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	68fa      	ldr	r2, [r7, #12]
 800a596:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2220      	movs	r2, #32
 800a59c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a5a8:	2300      	movs	r3, #0
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3714      	adds	r7, #20
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b4:	4770      	bx	lr

0800a5b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a5b6:	b580      	push	{r7, lr}
 800a5b8:	b084      	sub	sp, #16
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	6078      	str	r0, [r7, #4]
 800a5be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a5c6:	2b01      	cmp	r3, #1
 800a5c8:	d101      	bne.n	800a5ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a5ca:	2302      	movs	r3, #2
 800a5cc:	e02d      	b.n	800a62a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2224      	movs	r2, #36	; 0x24
 800a5da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	681a      	ldr	r2, [r3, #0]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f022 0201 	bic.w	r2, r2, #1
 800a5f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	689b      	ldr	r3, [r3, #8]
 800a5fc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	683a      	ldr	r2, [r7, #0]
 800a606:	430a      	orrs	r2, r1
 800a608:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f000 f850 	bl	800a6b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	68fa      	ldr	r2, [r7, #12]
 800a616:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2220      	movs	r2, #32
 800a61c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2200      	movs	r2, #0
 800a624:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a628:	2300      	movs	r3, #0
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3710      	adds	r7, #16
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}

0800a632 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a632:	b580      	push	{r7, lr}
 800a634:	b084      	sub	sp, #16
 800a636:	af00      	add	r7, sp, #0
 800a638:	6078      	str	r0, [r7, #4]
 800a63a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a642:	2b01      	cmp	r3, #1
 800a644:	d101      	bne.n	800a64a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a646:	2302      	movs	r3, #2
 800a648:	e02d      	b.n	800a6a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2201      	movs	r2, #1
 800a64e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2224      	movs	r2, #36	; 0x24
 800a656:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	681a      	ldr	r2, [r3, #0]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f022 0201 	bic.w	r2, r2, #1
 800a670:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	689b      	ldr	r3, [r3, #8]
 800a678:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	683a      	ldr	r2, [r7, #0]
 800a682:	430a      	orrs	r2, r1
 800a684:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 f812 	bl	800a6b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	68fa      	ldr	r2, [r7, #12]
 800a692:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2220      	movs	r2, #32
 800a698:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a6a4:	2300      	movs	r3, #0
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3710      	adds	r7, #16
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}
	...

0800a6b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b085      	sub	sp, #20
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d108      	bne.n	800a6d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a6d0:	e031      	b.n	800a736 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a6d2:	2308      	movs	r3, #8
 800a6d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a6d6:	2308      	movs	r3, #8
 800a6d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	689b      	ldr	r3, [r3, #8]
 800a6e0:	0e5b      	lsrs	r3, r3, #25
 800a6e2:	b2db      	uxtb	r3, r3
 800a6e4:	f003 0307 	and.w	r3, r3, #7
 800a6e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	689b      	ldr	r3, [r3, #8]
 800a6f0:	0f5b      	lsrs	r3, r3, #29
 800a6f2:	b2db      	uxtb	r3, r3
 800a6f4:	f003 0307 	and.w	r3, r3, #7
 800a6f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6fa:	7bbb      	ldrb	r3, [r7, #14]
 800a6fc:	7b3a      	ldrb	r2, [r7, #12]
 800a6fe:	4911      	ldr	r1, [pc, #68]	; (800a744 <UARTEx_SetNbDataToProcess+0x94>)
 800a700:	5c8a      	ldrb	r2, [r1, r2]
 800a702:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a706:	7b3a      	ldrb	r2, [r7, #12]
 800a708:	490f      	ldr	r1, [pc, #60]	; (800a748 <UARTEx_SetNbDataToProcess+0x98>)
 800a70a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a70c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a710:	b29a      	uxth	r2, r3
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a718:	7bfb      	ldrb	r3, [r7, #15]
 800a71a:	7b7a      	ldrb	r2, [r7, #13]
 800a71c:	4909      	ldr	r1, [pc, #36]	; (800a744 <UARTEx_SetNbDataToProcess+0x94>)
 800a71e:	5c8a      	ldrb	r2, [r1, r2]
 800a720:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a724:	7b7a      	ldrb	r2, [r7, #13]
 800a726:	4908      	ldr	r1, [pc, #32]	; (800a748 <UARTEx_SetNbDataToProcess+0x98>)
 800a728:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a72a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a72e:	b29a      	uxth	r2, r3
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a736:	bf00      	nop
 800a738:	3714      	adds	r7, #20
 800a73a:	46bd      	mov	sp, r7
 800a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a740:	4770      	bx	lr
 800a742:	bf00      	nop
 800a744:	0800b0ec 	.word	0x0800b0ec
 800a748:	0800b0f4 	.word	0x0800b0f4

0800a74c <memset>:
 800a74c:	4402      	add	r2, r0
 800a74e:	4603      	mov	r3, r0
 800a750:	4293      	cmp	r3, r2
 800a752:	d100      	bne.n	800a756 <memset+0xa>
 800a754:	4770      	bx	lr
 800a756:	f803 1b01 	strb.w	r1, [r3], #1
 800a75a:	e7f9      	b.n	800a750 <memset+0x4>

0800a75c <__libc_init_array>:
 800a75c:	b570      	push	{r4, r5, r6, lr}
 800a75e:	4d0d      	ldr	r5, [pc, #52]	; (800a794 <__libc_init_array+0x38>)
 800a760:	4c0d      	ldr	r4, [pc, #52]	; (800a798 <__libc_init_array+0x3c>)
 800a762:	1b64      	subs	r4, r4, r5
 800a764:	10a4      	asrs	r4, r4, #2
 800a766:	2600      	movs	r6, #0
 800a768:	42a6      	cmp	r6, r4
 800a76a:	d109      	bne.n	800a780 <__libc_init_array+0x24>
 800a76c:	4d0b      	ldr	r5, [pc, #44]	; (800a79c <__libc_init_array+0x40>)
 800a76e:	4c0c      	ldr	r4, [pc, #48]	; (800a7a0 <__libc_init_array+0x44>)
 800a770:	f000 f818 	bl	800a7a4 <_init>
 800a774:	1b64      	subs	r4, r4, r5
 800a776:	10a4      	asrs	r4, r4, #2
 800a778:	2600      	movs	r6, #0
 800a77a:	42a6      	cmp	r6, r4
 800a77c:	d105      	bne.n	800a78a <__libc_init_array+0x2e>
 800a77e:	bd70      	pop	{r4, r5, r6, pc}
 800a780:	f855 3b04 	ldr.w	r3, [r5], #4
 800a784:	4798      	blx	r3
 800a786:	3601      	adds	r6, #1
 800a788:	e7ee      	b.n	800a768 <__libc_init_array+0xc>
 800a78a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a78e:	4798      	blx	r3
 800a790:	3601      	adds	r6, #1
 800a792:	e7f2      	b.n	800a77a <__libc_init_array+0x1e>
 800a794:	0800b104 	.word	0x0800b104
 800a798:	0800b104 	.word	0x0800b104
 800a79c:	0800b104 	.word	0x0800b104
 800a7a0:	0800b108 	.word	0x0800b108

0800a7a4 <_init>:
 800a7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7a6:	bf00      	nop
 800a7a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7aa:	bc08      	pop	{r3}
 800a7ac:	469e      	mov	lr, r3
 800a7ae:	4770      	bx	lr

0800a7b0 <_fini>:
 800a7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7b2:	bf00      	nop
 800a7b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7b6:	bc08      	pop	{r3}
 800a7b8:	469e      	mov	lr, r3
 800a7ba:	4770      	bx	lr

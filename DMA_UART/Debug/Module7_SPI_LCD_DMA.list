
Module7_SPI_LCD_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a884  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000910  0800aa44  0800aa44  0001aa44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b354  0800b354  00020058  2**0
                  CONTENTS
  4 .ARM          00000008  0800b354  0800b354  0001b354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b35c  0800b35c  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b35c  0800b35c  0001b35c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b360  0800b360  0001b360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  0800b364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012c0  20000058  0800b3bc  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001318  0800b3bc  00021318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002514d  00000000  00000000  000200cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004375  00000000  00000000  00045218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002078  00000000  00000000  00049590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000196d  00000000  00000000  0004b608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e8b3  00000000  00000000  0004cf75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026cef  00000000  00000000  0007b828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00131ec6  00000000  00000000  000a2517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008ba4  00000000  00000000  001d43e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  001dcf84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000058 	.word	0x20000058
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800aa2c 	.word	0x0800aa2c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	0800aa2c 	.word	0x0800aa2c

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	f103 0208 	add.w	r2, r3, #8
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	f04f 32ff 	mov.w	r2, #4294967295
 8000524:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	f103 0208 	add.w	r2, r3, #8
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	f103 0208 	add.w	r2, r3, #8
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr

0800054c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2200      	movs	r2, #0
 8000558:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800055a:	bf00      	nop
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr

08000566 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000566:	b480      	push	{r7}
 8000568:	b085      	sub	sp, #20
 800056a:	af00      	add	r7, sp, #0
 800056c:	6078      	str	r0, [r7, #4]
 800056e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000576:	68bb      	ldr	r3, [r7, #8]
 8000578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800057c:	d103      	bne.n	8000586 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	691b      	ldr	r3, [r3, #16]
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	e00c      	b.n	80005a0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	3308      	adds	r3, #8
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	e002      	b.n	8000594 <vListInsert+0x2e>
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	685b      	ldr	r3, [r3, #4]
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	68ba      	ldr	r2, [r7, #8]
 800059c:	429a      	cmp	r2, r3
 800059e:	d2f6      	bcs.n	800058e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	685a      	ldr	r2, [r3, #4]
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	683a      	ldr	r2, [r7, #0]
 80005ae:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	68fa      	ldr	r2, [r7, #12]
 80005b4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	683a      	ldr	r2, [r7, #0]
 80005ba:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	1c5a      	adds	r2, r3, #1
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	601a      	str	r2, [r3, #0]
}
 80005cc:	bf00      	nop
 80005ce:	3714      	adds	r7, #20
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	691b      	ldr	r3, [r3, #16]
 80005e4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	6892      	ldr	r2, [r2, #8]
 80005ee:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	6852      	ldr	r2, [r2, #4]
 80005f8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	685b      	ldr	r3, [r3, #4]
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	429a      	cmp	r2, r3
 8000602:	d103      	bne.n	800060c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	689a      	ldr	r2, [r3, #8]
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2200      	movs	r2, #0
 8000610:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	1e5a      	subs	r2, r3, #1
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	681b      	ldr	r3, [r3, #0]
}
 8000620:	4618      	mov	r0, r3
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800062c:	b580      	push	{r7, lr}
 800062e:	b08c      	sub	sp, #48	; 0x30
 8000630:	af04      	add	r7, sp, #16
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	603b      	str	r3, [r7, #0]
 8000638:	4613      	mov	r3, r2
 800063a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800063c:	88fb      	ldrh	r3, [r7, #6]
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	4618      	mov	r0, r3
 8000642:	f001 f943 	bl	80018cc <pvPortMalloc>
 8000646:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d013      	beq.n	8000676 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800064e:	2054      	movs	r0, #84	; 0x54
 8000650:	f001 f93c 	bl	80018cc <pvPortMalloc>
 8000654:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8000656:	69fb      	ldr	r3, [r7, #28]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d008      	beq.n	800066e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800065c:	2254      	movs	r2, #84	; 0x54
 800065e:	2100      	movs	r1, #0
 8000660:	69f8      	ldr	r0, [r7, #28]
 8000662:	f00a f9b7 	bl	800a9d4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000666:	69fb      	ldr	r3, [r7, #28]
 8000668:	697a      	ldr	r2, [r7, #20]
 800066a:	631a      	str	r2, [r3, #48]	; 0x30
 800066c:	e005      	b.n	800067a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800066e:	6978      	ldr	r0, [r7, #20]
 8000670:	f001 f9e6 	bl	8001a40 <vPortFree>
 8000674:	e001      	b.n	800067a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d013      	beq.n	80006a8 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000680:	88fa      	ldrh	r2, [r7, #6]
 8000682:	2300      	movs	r3, #0
 8000684:	9303      	str	r3, [sp, #12]
 8000686:	69fb      	ldr	r3, [r7, #28]
 8000688:	9302      	str	r3, [sp, #8]
 800068a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	68b9      	ldr	r1, [r7, #8]
 8000696:	68f8      	ldr	r0, [r7, #12]
 8000698:	f000 f80e 	bl	80006b8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800069c:	69f8      	ldr	r0, [r7, #28]
 800069e:	f000 f891 	bl	80007c4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80006a2:	2301      	movs	r3, #1
 80006a4:	61bb      	str	r3, [r7, #24]
 80006a6:	e002      	b.n	80006ae <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80006a8:	f04f 33ff 	mov.w	r3, #4294967295
 80006ac:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80006ae:	69bb      	ldr	r3, [r7, #24]
    }
 80006b0:	4618      	mov	r0, r3
 80006b2:	3720      	adds	r7, #32
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b088      	sub	sp, #32
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
 80006c4:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80006c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80006d0:	3b01      	subs	r3, #1
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	4413      	add	r3, r2
 80006d6:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80006d8:	69bb      	ldr	r3, [r7, #24]
 80006da:	f023 0307 	bic.w	r3, r3, #7
 80006de:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80006e0:	69bb      	ldr	r3, [r7, #24]
 80006e2:	f003 0307 	and.w	r3, r3, #7
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d00a      	beq.n	8000700 <prvInitialiseNewTask+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80006ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006ee:	f383 8811 	msr	BASEPRI, r3
 80006f2:	f3bf 8f6f 	isb	sy
 80006f6:	f3bf 8f4f 	dsb	sy
 80006fa:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80006fc:	bf00      	nop
 80006fe:	e7fe      	b.n	80006fe <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d01e      	beq.n	8000744 <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000706:	2300      	movs	r3, #0
 8000708:	61fb      	str	r3, [r7, #28]
 800070a:	e012      	b.n	8000732 <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800070c:	68ba      	ldr	r2, [r7, #8]
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	4413      	add	r3, r2
 8000712:	7819      	ldrb	r1, [r3, #0]
 8000714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	4413      	add	r3, r2
 800071a:	3334      	adds	r3, #52	; 0x34
 800071c:	460a      	mov	r2, r1
 800071e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000720:	68ba      	ldr	r2, [r7, #8]
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	4413      	add	r3, r2
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d006      	beq.n	800073a <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800072c:	69fb      	ldr	r3, [r7, #28]
 800072e:	3301      	adds	r3, #1
 8000730:	61fb      	str	r3, [r7, #28]
 8000732:	69fb      	ldr	r3, [r7, #28]
 8000734:	2b0f      	cmp	r3, #15
 8000736:	d9e9      	bls.n	800070c <prvInitialiseNewTask+0x54>
 8000738:	e000      	b.n	800073c <prvInitialiseNewTask+0x84>
            {
                break;
 800073a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800073c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800073e:	2200      	movs	r2, #0
 8000740:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000746:	2b06      	cmp	r3, #6
 8000748:	d90a      	bls.n	8000760 <prvInitialiseNewTask+0xa8>
        __asm volatile
 800074a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800074e:	f383 8811 	msr	BASEPRI, r3
 8000752:	f3bf 8f6f 	isb	sy
 8000756:	f3bf 8f4f 	dsb	sy
 800075a:	613b      	str	r3, [r7, #16]
    }
 800075c:	bf00      	nop
 800075e:	e7fe      	b.n	800075e <prvInitialiseNewTask+0xa6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000762:	2b06      	cmp	r3, #6
 8000764:	d901      	bls.n	800076a <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000766:	2306      	movs	r3, #6
 8000768:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800076a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800076c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800076e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000772:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000774:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000778:	3304      	adds	r3, #4
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff fee6 	bl	800054c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000782:	3318      	adds	r3, #24
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff fee1 	bl	800054c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800078a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800078c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800078e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000792:	f1c3 0207 	rsb	r2, r3, #7
 8000796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000798:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800079a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800079c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800079e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80007a0:	683a      	ldr	r2, [r7, #0]
 80007a2:	68f9      	ldr	r1, [r7, #12]
 80007a4:	69b8      	ldr	r0, [r7, #24]
 80007a6:	f000 fe3f 	bl	8001428 <pxPortInitialiseStack>
 80007aa:	4602      	mov	r2, r0
 80007ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007ae:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80007b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d002      	beq.n	80007bc <prvInitialiseNewTask+0x104>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80007b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80007ba:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80007bc:	bf00      	nop
 80007be:	3720      	adds	r7, #32
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80007cc:	f000 ff5c 	bl	8001688 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80007d0:	4b3e      	ldr	r3, [pc, #248]	; (80008cc <prvAddNewTaskToReadyList+0x108>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	3301      	adds	r3, #1
 80007d6:	4a3d      	ldr	r2, [pc, #244]	; (80008cc <prvAddNewTaskToReadyList+0x108>)
 80007d8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80007da:	4b3d      	ldr	r3, [pc, #244]	; (80008d0 <prvAddNewTaskToReadyList+0x10c>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d109      	bne.n	80007f6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80007e2:	4a3b      	ldr	r2, [pc, #236]	; (80008d0 <prvAddNewTaskToReadyList+0x10c>)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80007e8:	4b38      	ldr	r3, [pc, #224]	; (80008cc <prvAddNewTaskToReadyList+0x108>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d110      	bne.n	8000812 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80007f0:	f000 fb9e 	bl	8000f30 <prvInitialiseTaskLists>
 80007f4:	e00d      	b.n	8000812 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80007f6:	4b37      	ldr	r3, [pc, #220]	; (80008d4 <prvAddNewTaskToReadyList+0x110>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d109      	bne.n	8000812 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80007fe:	4b34      	ldr	r3, [pc, #208]	; (80008d0 <prvAddNewTaskToReadyList+0x10c>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000808:	429a      	cmp	r2, r3
 800080a:	d802      	bhi.n	8000812 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800080c:	4a30      	ldr	r2, [pc, #192]	; (80008d0 <prvAddNewTaskToReadyList+0x10c>)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000812:	4b31      	ldr	r3, [pc, #196]	; (80008d8 <prvAddNewTaskToReadyList+0x114>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	3301      	adds	r3, #1
 8000818:	4a2f      	ldr	r2, [pc, #188]	; (80008d8 <prvAddNewTaskToReadyList+0x114>)
 800081a:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000820:	2201      	movs	r2, #1
 8000822:	409a      	lsls	r2, r3
 8000824:	4b2d      	ldr	r3, [pc, #180]	; (80008dc <prvAddNewTaskToReadyList+0x118>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4313      	orrs	r3, r2
 800082a:	4a2c      	ldr	r2, [pc, #176]	; (80008dc <prvAddNewTaskToReadyList+0x118>)
 800082c:	6013      	str	r3, [r2, #0]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000832:	492b      	ldr	r1, [pc, #172]	; (80008e0 <prvAddNewTaskToReadyList+0x11c>)
 8000834:	4613      	mov	r3, r2
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	4413      	add	r3, r2
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	440b      	add	r3, r1
 800083e:	3304      	adds	r3, #4
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	68fa      	ldr	r2, [r7, #12]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	689a      	ldr	r2, [r3, #8]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	689b      	ldr	r3, [r3, #8]
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	3204      	adds	r2, #4
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	1d1a      	adds	r2, r3, #4
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000868:	4613      	mov	r3, r2
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	4413      	add	r3, r2
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	4a1b      	ldr	r2, [pc, #108]	; (80008e0 <prvAddNewTaskToReadyList+0x11c>)
 8000872:	441a      	add	r2, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	615a      	str	r2, [r3, #20]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800087c:	4918      	ldr	r1, [pc, #96]	; (80008e0 <prvAddNewTaskToReadyList+0x11c>)
 800087e:	4613      	mov	r3, r2
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	4413      	add	r3, r2
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	440b      	add	r3, r1
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	1c59      	adds	r1, r3, #1
 800088c:	4814      	ldr	r0, [pc, #80]	; (80008e0 <prvAddNewTaskToReadyList+0x11c>)
 800088e:	4613      	mov	r3, r2
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	4413      	add	r3, r2
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	4403      	add	r3, r0
 8000898:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800089a:	f000 ff25 	bl	80016e8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800089e:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <prvAddNewTaskToReadyList+0x110>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d00e      	beq.n	80008c4 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80008a6:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <prvAddNewTaskToReadyList+0x10c>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d207      	bcs.n	80008c4 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80008b4:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <prvAddNewTaskToReadyList+0x120>)
 80008b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	f3bf 8f4f 	dsb	sy
 80008c0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80008c4:	bf00      	nop
 80008c6:	3710      	adds	r7, #16
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000174 	.word	0x20000174
 80008d0:	20000074 	.word	0x20000074
 80008d4:	20000180 	.word	0x20000180
 80008d8:	20000190 	.word	0x20000190
 80008dc:	2000017c 	.word	0x2000017c
 80008e0:	20000078 	.word	0x20000078
 80008e4:	e000ed04 	.word	0xe000ed04

080008e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d017      	beq.n	800092a <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80008fa:	4b13      	ldr	r3, [pc, #76]	; (8000948 <vTaskDelay+0x60>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d00a      	beq.n	8000918 <vTaskDelay+0x30>
        __asm volatile
 8000902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000906:	f383 8811 	msr	BASEPRI, r3
 800090a:	f3bf 8f6f 	isb	sy
 800090e:	f3bf 8f4f 	dsb	sy
 8000912:	60bb      	str	r3, [r7, #8]
    }
 8000914:	bf00      	nop
 8000916:	e7fe      	b.n	8000916 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8000918:	f000 f866 	bl	80009e8 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800091c:	2100      	movs	r1, #0
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f000 fd02 	bl	8001328 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8000924:	f000 f86e 	bl	8000a04 <xTaskResumeAll>
 8000928:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d107      	bne.n	8000940 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <vTaskDelay+0x64>)
 8000932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	f3bf 8f4f 	dsb	sy
 800093c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000940:	bf00      	nop
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	2000019c 	.word	0x2000019c
 800094c:	e000ed04 	.word	0xe000ed04

08000950 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8000956:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <vTaskStartScheduler+0x7c>)
 8000958:	9301      	str	r3, [sp, #4]
 800095a:	2300      	movs	r3, #0
 800095c:	9300      	str	r3, [sp, #0]
 800095e:	2300      	movs	r3, #0
 8000960:	2280      	movs	r2, #128	; 0x80
 8000962:	491b      	ldr	r1, [pc, #108]	; (80009d0 <vTaskStartScheduler+0x80>)
 8000964:	481b      	ldr	r0, [pc, #108]	; (80009d4 <vTaskStartScheduler+0x84>)
 8000966:	f7ff fe61 	bl	800062c <xTaskCreate>
 800096a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d116      	bne.n	80009a0 <vTaskStartScheduler+0x50>
        __asm volatile
 8000972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000976:	f383 8811 	msr	BASEPRI, r3
 800097a:	f3bf 8f6f 	isb	sy
 800097e:	f3bf 8f4f 	dsb	sy
 8000982:	60bb      	str	r3, [r7, #8]
    }
 8000984:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8000986:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <vTaskStartScheduler+0x88>)
 8000988:	f04f 32ff 	mov.w	r2, #4294967295
 800098c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800098e:	4b13      	ldr	r3, [pc, #76]	; (80009dc <vTaskStartScheduler+0x8c>)
 8000990:	2201      	movs	r2, #1
 8000992:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <vTaskStartScheduler+0x90>)
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800099a:	f000 fdd3 	bl	8001544 <xPortStartScheduler>
 800099e:	e00e      	b.n	80009be <vTaskStartScheduler+0x6e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009a6:	d10a      	bne.n	80009be <vTaskStartScheduler+0x6e>
        __asm volatile
 80009a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009ac:	f383 8811 	msr	BASEPRI, r3
 80009b0:	f3bf 8f6f 	isb	sy
 80009b4:	f3bf 8f4f 	dsb	sy
 80009b8:	607b      	str	r3, [r7, #4]
    }
 80009ba:	bf00      	nop
 80009bc:	e7fe      	b.n	80009bc <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <vTaskStartScheduler+0x94>)
 80009c0:	681b      	ldr	r3, [r3, #0]
}
 80009c2:	bf00      	nop
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000198 	.word	0x20000198
 80009d0:	0800aa44 	.word	0x0800aa44
 80009d4:	08000f01 	.word	0x08000f01
 80009d8:	20000194 	.word	0x20000194
 80009dc:	20000180 	.word	0x20000180
 80009e0:	20000178 	.word	0x20000178
 80009e4:	20000000 	.word	0x20000000

080009e8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80009ec:	4b04      	ldr	r3, [pc, #16]	; (8000a00 <vTaskSuspendAll+0x18>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	3301      	adds	r3, #1
 80009f2:	4a03      	ldr	r2, [pc, #12]	; (8000a00 <vTaskSuspendAll+0x18>)
 80009f4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	2000019c 	.word	0x2000019c

08000a04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b088      	sub	sp, #32
 8000a08:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8000a12:	4b71      	ldr	r3, [pc, #452]	; (8000bd8 <xTaskResumeAll+0x1d4>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d10a      	bne.n	8000a30 <xTaskResumeAll+0x2c>
        __asm volatile
 8000a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a1e:	f383 8811 	msr	BASEPRI, r3
 8000a22:	f3bf 8f6f 	isb	sy
 8000a26:	f3bf 8f4f 	dsb	sy
 8000a2a:	607b      	str	r3, [r7, #4]
    }
 8000a2c:	bf00      	nop
 8000a2e:	e7fe      	b.n	8000a2e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000a30:	f000 fe2a 	bl	8001688 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000a34:	4b68      	ldr	r3, [pc, #416]	; (8000bd8 <xTaskResumeAll+0x1d4>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	3b01      	subs	r3, #1
 8000a3a:	4a67      	ldr	r2, [pc, #412]	; (8000bd8 <xTaskResumeAll+0x1d4>)
 8000a3c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000a3e:	4b66      	ldr	r3, [pc, #408]	; (8000bd8 <xTaskResumeAll+0x1d4>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	f040 80c0 	bne.w	8000bc8 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000a48:	4b64      	ldr	r3, [pc, #400]	; (8000bdc <xTaskResumeAll+0x1d8>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	f000 80bb 	beq.w	8000bc8 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000a52:	e08a      	b.n	8000b6a <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000a54:	4b62      	ldr	r3, [pc, #392]	; (8000be0 <xTaskResumeAll+0x1dc>)
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	68db      	ldr	r3, [r3, #12]
 8000a5a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000a5c:	69fb      	ldr	r3, [r7, #28]
 8000a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	69db      	ldr	r3, [r3, #28]
 8000a66:	69fa      	ldr	r2, [r7, #28]
 8000a68:	6a12      	ldr	r2, [r2, #32]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	69fb      	ldr	r3, [r7, #28]
 8000a6e:	6a1b      	ldr	r3, [r3, #32]
 8000a70:	69fa      	ldr	r2, [r7, #28]
 8000a72:	69d2      	ldr	r2, [r2, #28]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	685a      	ldr	r2, [r3, #4]
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	3318      	adds	r3, #24
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d103      	bne.n	8000a8a <xTaskResumeAll+0x86>
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	6a1a      	ldr	r2, [r3, #32]
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	629a      	str	r2, [r3, #40]	; 0x28
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	1e5a      	subs	r2, r3, #1
 8000a96:	693b      	ldr	r3, [r7, #16]
 8000a98:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	695b      	ldr	r3, [r3, #20]
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	69fa      	ldr	r2, [r7, #28]
 8000aa6:	68d2      	ldr	r2, [r2, #12]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	68db      	ldr	r3, [r3, #12]
 8000aae:	69fa      	ldr	r2, [r7, #28]
 8000ab0:	6892      	ldr	r2, [r2, #8]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	685a      	ldr	r2, [r3, #4]
 8000ab8:	69fb      	ldr	r3, [r7, #28]
 8000aba:	3304      	adds	r3, #4
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d103      	bne.n	8000ac8 <xTaskResumeAll+0xc4>
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	68da      	ldr	r2, [r3, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	69fb      	ldr	r3, [r7, #28]
 8000aca:	2200      	movs	r2, #0
 8000acc:	615a      	str	r2, [r3, #20]
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	1e5a      	subs	r2, r3, #1
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8000ad8:	69fb      	ldr	r3, [r7, #28]
 8000ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000adc:	2201      	movs	r2, #1
 8000ade:	409a      	lsls	r2, r3
 8000ae0:	4b40      	ldr	r3, [pc, #256]	; (8000be4 <xTaskResumeAll+0x1e0>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	4a3f      	ldr	r2, [pc, #252]	; (8000be4 <xTaskResumeAll+0x1e0>)
 8000ae8:	6013      	str	r3, [r2, #0]
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000aee:	493e      	ldr	r1, [pc, #248]	; (8000be8 <xTaskResumeAll+0x1e4>)
 8000af0:	4613      	mov	r3, r2
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	4413      	add	r3, r2
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	440b      	add	r3, r1
 8000afa:	3304      	adds	r3, #4
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	69fb      	ldr	r3, [r7, #28]
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	689a      	ldr	r2, [r3, #8]
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	69fa      	ldr	r2, [r7, #28]
 8000b14:	3204      	adds	r2, #4
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	1d1a      	adds	r2, r3, #4
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b24:	4613      	mov	r3, r2
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	4413      	add	r3, r2
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	4a2e      	ldr	r2, [pc, #184]	; (8000be8 <xTaskResumeAll+0x1e4>)
 8000b2e:	441a      	add	r2, r3
 8000b30:	69fb      	ldr	r3, [r7, #28]
 8000b32:	615a      	str	r2, [r3, #20]
 8000b34:	69fb      	ldr	r3, [r7, #28]
 8000b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b38:	492b      	ldr	r1, [pc, #172]	; (8000be8 <xTaskResumeAll+0x1e4>)
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	4413      	add	r3, r2
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	440b      	add	r3, r1
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	1c59      	adds	r1, r3, #1
 8000b48:	4827      	ldr	r0, [pc, #156]	; (8000be8 <xTaskResumeAll+0x1e4>)
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	4413      	add	r3, r2
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	4403      	add	r3, r0
 8000b54:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b5a:	4b24      	ldr	r3, [pc, #144]	; (8000bec <xTaskResumeAll+0x1e8>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d302      	bcc.n	8000b6a <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8000b64:	4b22      	ldr	r3, [pc, #136]	; (8000bf0 <xTaskResumeAll+0x1ec>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000b6a:	4b1d      	ldr	r3, [pc, #116]	; (8000be0 <xTaskResumeAll+0x1dc>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f47f af70 	bne.w	8000a54 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000b7a:	f000 fa57 	bl	800102c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000b7e:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <xTaskResumeAll+0x1f0>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d010      	beq.n	8000bac <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000b8a:	f000 f847 	bl	8000c1c <xTaskIncrementTick>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d002      	beq.n	8000b9a <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8000b94:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <xTaskResumeAll+0x1ec>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	3b01      	subs	r3, #1
 8000b9e:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d1f1      	bne.n	8000b8a <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8000ba6:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <xTaskResumeAll+0x1f0>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000bac:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <xTaskResumeAll+0x1ec>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d009      	beq.n	8000bc8 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <xTaskResumeAll+0x1f4>)
 8000bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	f3bf 8f4f 	dsb	sy
 8000bc4:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000bc8:	f000 fd8e 	bl	80016e8 <vPortExitCritical>

    return xAlreadyYielded;
 8000bcc:	69bb      	ldr	r3, [r7, #24]
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3720      	adds	r7, #32
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	2000019c 	.word	0x2000019c
 8000bdc:	20000174 	.word	0x20000174
 8000be0:	20000134 	.word	0x20000134
 8000be4:	2000017c 	.word	0x2000017c
 8000be8:	20000078 	.word	0x20000078
 8000bec:	20000074 	.word	0x20000074
 8000bf0:	20000188 	.word	0x20000188
 8000bf4:	20000184 	.word	0x20000184
 8000bf8:	e000ed04 	.word	0xe000ed04

08000bfc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8000c02:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <xTaskGetTickCount+0x1c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8000c08:	687b      	ldr	r3, [r7, #4]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000178 	.word	0x20000178

08000c1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08a      	sub	sp, #40	; 0x28
 8000c20:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000c22:	2300      	movs	r3, #0
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000c26:	4b7d      	ldr	r3, [pc, #500]	; (8000e1c <xTaskIncrementTick+0x200>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	f040 80ec 	bne.w	8000e08 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000c30:	4b7b      	ldr	r3, [pc, #492]	; (8000e20 <xTaskIncrementTick+0x204>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	3301      	adds	r3, #1
 8000c36:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000c38:	4a79      	ldr	r2, [pc, #484]	; (8000e20 <xTaskIncrementTick+0x204>)
 8000c3a:	6a3b      	ldr	r3, [r7, #32]
 8000c3c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000c3e:	6a3b      	ldr	r3, [r7, #32]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d120      	bne.n	8000c86 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8000c44:	4b77      	ldr	r3, [pc, #476]	; (8000e24 <xTaskIncrementTick+0x208>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d00a      	beq.n	8000c64 <xTaskIncrementTick+0x48>
        __asm volatile
 8000c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c52:	f383 8811 	msr	BASEPRI, r3
 8000c56:	f3bf 8f6f 	isb	sy
 8000c5a:	f3bf 8f4f 	dsb	sy
 8000c5e:	607b      	str	r3, [r7, #4]
    }
 8000c60:	bf00      	nop
 8000c62:	e7fe      	b.n	8000c62 <xTaskIncrementTick+0x46>
 8000c64:	4b6f      	ldr	r3, [pc, #444]	; (8000e24 <xTaskIncrementTick+0x208>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	61fb      	str	r3, [r7, #28]
 8000c6a:	4b6f      	ldr	r3, [pc, #444]	; (8000e28 <xTaskIncrementTick+0x20c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a6d      	ldr	r2, [pc, #436]	; (8000e24 <xTaskIncrementTick+0x208>)
 8000c70:	6013      	str	r3, [r2, #0]
 8000c72:	4a6d      	ldr	r2, [pc, #436]	; (8000e28 <xTaskIncrementTick+0x20c>)
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	6013      	str	r3, [r2, #0]
 8000c78:	4b6c      	ldr	r3, [pc, #432]	; (8000e2c <xTaskIncrementTick+0x210>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	4a6b      	ldr	r2, [pc, #428]	; (8000e2c <xTaskIncrementTick+0x210>)
 8000c80:	6013      	str	r3, [r2, #0]
 8000c82:	f000 f9d3 	bl	800102c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000c86:	4b6a      	ldr	r3, [pc, #424]	; (8000e30 <xTaskIncrementTick+0x214>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	6a3a      	ldr	r2, [r7, #32]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	f0c0 80a6 	bcc.w	8000dde <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000c92:	4b64      	ldr	r3, [pc, #400]	; (8000e24 <xTaskIncrementTick+0x208>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d104      	bne.n	8000ca6 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000c9c:	4b64      	ldr	r3, [pc, #400]	; (8000e30 <xTaskIncrementTick+0x214>)
 8000c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca2:	601a      	str	r2, [r3, #0]
                    break;
 8000ca4:	e09b      	b.n	8000dde <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000ca6:	4b5f      	ldr	r3, [pc, #380]	; (8000e24 <xTaskIncrementTick+0x208>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	68db      	ldr	r3, [r3, #12]
 8000cae:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8000cb6:	6a3a      	ldr	r2, [r7, #32]
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d203      	bcs.n	8000cc6 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000cbe:	4a5c      	ldr	r2, [pc, #368]	; (8000e30 <xTaskIncrementTick+0x214>)
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8000cc4:	e08b      	b.n	8000dde <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	68d2      	ldr	r2, [r2, #12]
 8000cd4:	609a      	str	r2, [r3, #8]
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	68db      	ldr	r3, [r3, #12]
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	6892      	ldr	r2, [r2, #8]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	685a      	ldr	r2, [r3, #4]
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	3304      	adds	r3, #4
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d103      	bne.n	8000cf4 <xTaskIncrementTick+0xd8>
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	68da      	ldr	r2, [r3, #12]
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	615a      	str	r2, [r3, #20]
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	1e5a      	subs	r2, r3, #1
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d01e      	beq.n	8000d4a <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	69db      	ldr	r3, [r3, #28]
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	6a12      	ldr	r2, [r2, #32]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	6a1b      	ldr	r3, [r3, #32]
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	69d2      	ldr	r2, [r2, #28]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	685a      	ldr	r2, [r3, #4]
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	3318      	adds	r3, #24
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d103      	bne.n	8000d3a <xTaskIncrementTick+0x11e>
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	6a1a      	ldr	r2, [r3, #32]
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	629a      	str	r2, [r3, #40]	; 0x28
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	1e5a      	subs	r2, r3, #1
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d4e:	2201      	movs	r2, #1
 8000d50:	409a      	lsls	r2, r3
 8000d52:	4b38      	ldr	r3, [pc, #224]	; (8000e34 <xTaskIncrementTick+0x218>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	4a36      	ldr	r2, [pc, #216]	; (8000e34 <xTaskIncrementTick+0x218>)
 8000d5a:	6013      	str	r3, [r2, #0]
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d60:	4935      	ldr	r1, [pc, #212]	; (8000e38 <xTaskIncrementTick+0x21c>)
 8000d62:	4613      	mov	r3, r2
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	4413      	add	r3, r2
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	440b      	add	r3, r1
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	68ba      	ldr	r2, [r7, #8]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	689a      	ldr	r2, [r3, #8]
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	60da      	str	r2, [r3, #12]
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	3204      	adds	r2, #4
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	1d1a      	adds	r2, r3, #4
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	609a      	str	r2, [r3, #8]
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d96:	4613      	mov	r3, r2
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	4413      	add	r3, r2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	4a26      	ldr	r2, [pc, #152]	; (8000e38 <xTaskIncrementTick+0x21c>)
 8000da0:	441a      	add	r2, r3
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	615a      	str	r2, [r3, #20]
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000daa:	4923      	ldr	r1, [pc, #140]	; (8000e38 <xTaskIncrementTick+0x21c>)
 8000dac:	4613      	mov	r3, r2
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	4413      	add	r3, r2
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	440b      	add	r3, r1
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	1c59      	adds	r1, r3, #1
 8000dba:	481f      	ldr	r0, [pc, #124]	; (8000e38 <xTaskIncrementTick+0x21c>)
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	4413      	add	r3, r2
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	4403      	add	r3, r0
 8000dc6:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <xTaskIncrementTick+0x220>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	f67f af5d 	bls.w	8000c92 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000ddc:	e759      	b.n	8000c92 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000dde:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <xTaskIncrementTick+0x220>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000de4:	4914      	ldr	r1, [pc, #80]	; (8000e38 <xTaskIncrementTick+0x21c>)
 8000de6:	4613      	mov	r3, r2
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	4413      	add	r3, r2
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	440b      	add	r3, r1
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d901      	bls.n	8000dfa <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8000df6:	2301      	movs	r3, #1
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8000dfa:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <xTaskIncrementTick+0x224>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d007      	beq.n	8000e12 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8000e02:	2301      	movs	r3, #1
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
 8000e06:	e004      	b.n	8000e12 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000e08:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <xTaskIncrementTick+0x228>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	4a0d      	ldr	r2, [pc, #52]	; (8000e44 <xTaskIncrementTick+0x228>)
 8000e10:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8000e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3728      	adds	r7, #40	; 0x28
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	2000019c 	.word	0x2000019c
 8000e20:	20000178 	.word	0x20000178
 8000e24:	2000012c 	.word	0x2000012c
 8000e28:	20000130 	.word	0x20000130
 8000e2c:	2000018c 	.word	0x2000018c
 8000e30:	20000194 	.word	0x20000194
 8000e34:	2000017c 	.word	0x2000017c
 8000e38:	20000078 	.word	0x20000078
 8000e3c:	20000074 	.word	0x20000074
 8000e40:	20000188 	.word	0x20000188
 8000e44:	20000184 	.word	0x20000184

08000e48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b087      	sub	sp, #28
 8000e4c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000e4e:	4b27      	ldr	r3, [pc, #156]	; (8000eec <vTaskSwitchContext+0xa4>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d003      	beq.n	8000e5e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8000e56:	4b26      	ldr	r3, [pc, #152]	; (8000ef0 <vTaskSwitchContext+0xa8>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8000e5c:	e03f      	b.n	8000ede <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8000e5e:	4b24      	ldr	r3, [pc, #144]	; (8000ef0 <vTaskSwitchContext+0xa8>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000e64:	4b23      	ldr	r3, [pc, #140]	; (8000ef4 <vTaskSwitchContext+0xac>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	fab3 f383 	clz	r3, r3
 8000e70:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8000e72:	7afb      	ldrb	r3, [r7, #11]
 8000e74:	f1c3 031f 	rsb	r3, r3, #31
 8000e78:	617b      	str	r3, [r7, #20]
 8000e7a:	491f      	ldr	r1, [pc, #124]	; (8000ef8 <vTaskSwitchContext+0xb0>)
 8000e7c:	697a      	ldr	r2, [r7, #20]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	4413      	add	r3, r2
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	440b      	add	r3, r1
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d10a      	bne.n	8000ea4 <vTaskSwitchContext+0x5c>
        __asm volatile
 8000e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e92:	f383 8811 	msr	BASEPRI, r3
 8000e96:	f3bf 8f6f 	isb	sy
 8000e9a:	f3bf 8f4f 	dsb	sy
 8000e9e:	607b      	str	r3, [r7, #4]
    }
 8000ea0:	bf00      	nop
 8000ea2:	e7fe      	b.n	8000ea2 <vTaskSwitchContext+0x5a>
 8000ea4:	697a      	ldr	r2, [r7, #20]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	4413      	add	r3, r2
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	4a12      	ldr	r2, [pc, #72]	; (8000ef8 <vTaskSwitchContext+0xb0>)
 8000eb0:	4413      	add	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	685a      	ldr	r2, [r3, #4]
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	685a      	ldr	r2, [r3, #4]
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	3308      	adds	r3, #8
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d104      	bne.n	8000ed4 <vTaskSwitchContext+0x8c>
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	685a      	ldr	r2, [r3, #4]
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	4a08      	ldr	r2, [pc, #32]	; (8000efc <vTaskSwitchContext+0xb4>)
 8000edc:	6013      	str	r3, [r2, #0]
}
 8000ede:	bf00      	nop
 8000ee0:	371c      	adds	r7, #28
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	2000019c 	.word	0x2000019c
 8000ef0:	20000188 	.word	0x20000188
 8000ef4:	2000017c 	.word	0x2000017c
 8000ef8:	20000078 	.word	0x20000078
 8000efc:	20000074 	.word	0x20000074

08000f00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8000f08:	f000 f852 	bl	8000fb0 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <prvIdleTask+0x28>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d9f9      	bls.n	8000f08 <prvIdleTask+0x8>
            {
                taskYIELD();
 8000f14:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <prvIdleTask+0x2c>)
 8000f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	f3bf 8f4f 	dsb	sy
 8000f20:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8000f24:	e7f0      	b.n	8000f08 <prvIdleTask+0x8>
 8000f26:	bf00      	nop
 8000f28:	20000078 	.word	0x20000078
 8000f2c:	e000ed04 	.word	0xe000ed04

08000f30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	e00c      	b.n	8000f56 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	4413      	add	r3, r2
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	4a12      	ldr	r2, [pc, #72]	; (8000f90 <prvInitialiseTaskLists+0x60>)
 8000f48:	4413      	add	r3, r2
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff fade 	bl	800050c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3301      	adds	r3, #1
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b06      	cmp	r3, #6
 8000f5a:	d9ef      	bls.n	8000f3c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8000f5c:	480d      	ldr	r0, [pc, #52]	; (8000f94 <prvInitialiseTaskLists+0x64>)
 8000f5e:	f7ff fad5 	bl	800050c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8000f62:	480d      	ldr	r0, [pc, #52]	; (8000f98 <prvInitialiseTaskLists+0x68>)
 8000f64:	f7ff fad2 	bl	800050c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8000f68:	480c      	ldr	r0, [pc, #48]	; (8000f9c <prvInitialiseTaskLists+0x6c>)
 8000f6a:	f7ff facf 	bl	800050c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8000f6e:	480c      	ldr	r0, [pc, #48]	; (8000fa0 <prvInitialiseTaskLists+0x70>)
 8000f70:	f7ff facc 	bl	800050c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8000f74:	480b      	ldr	r0, [pc, #44]	; (8000fa4 <prvInitialiseTaskLists+0x74>)
 8000f76:	f7ff fac9 	bl	800050c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <prvInitialiseTaskLists+0x78>)
 8000f7c:	4a05      	ldr	r2, [pc, #20]	; (8000f94 <prvInitialiseTaskLists+0x64>)
 8000f7e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000f80:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <prvInitialiseTaskLists+0x7c>)
 8000f82:	4a05      	ldr	r2, [pc, #20]	; (8000f98 <prvInitialiseTaskLists+0x68>)
 8000f84:	601a      	str	r2, [r3, #0]
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000078 	.word	0x20000078
 8000f94:	20000104 	.word	0x20000104
 8000f98:	20000118 	.word	0x20000118
 8000f9c:	20000134 	.word	0x20000134
 8000fa0:	20000148 	.word	0x20000148
 8000fa4:	20000160 	.word	0x20000160
 8000fa8:	2000012c 	.word	0x2000012c
 8000fac:	20000130 	.word	0x20000130

08000fb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000fb6:	e019      	b.n	8000fec <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8000fb8:	f000 fb66 	bl	8001688 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000fbc:	4b10      	ldr	r3, [pc, #64]	; (8001000 <prvCheckTasksWaitingTermination+0x50>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3304      	adds	r3, #4
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fb05 	bl	80005d8 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8000fce:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <prvCheckTasksWaitingTermination+0x54>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	4a0b      	ldr	r2, [pc, #44]	; (8001004 <prvCheckTasksWaitingTermination+0x54>)
 8000fd6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <prvCheckTasksWaitingTermination+0x58>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <prvCheckTasksWaitingTermination+0x58>)
 8000fe0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8000fe2:	f000 fb81 	bl	80016e8 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f000 f810 	bl	800100c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <prvCheckTasksWaitingTermination+0x58>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d1e1      	bne.n	8000fb8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8000ff4:	bf00      	nop
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000148 	.word	0x20000148
 8001004:	20000174 	.word	0x20000174
 8001008:	2000015c 	.word	0x2000015c

0800100c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001018:	4618      	mov	r0, r3
 800101a:	f000 fd11 	bl	8001a40 <vPortFree>
            vPortFree( pxTCB );
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f000 fd0e 	bl	8001a40 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001030:	4b0a      	ldr	r3, [pc, #40]	; (800105c <prvResetNextTaskUnblockTime+0x30>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d104      	bne.n	8001044 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800103a:	4b09      	ldr	r3, [pc, #36]	; (8001060 <prvResetNextTaskUnblockTime+0x34>)
 800103c:	f04f 32ff 	mov.w	r2, #4294967295
 8001040:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001042:	e005      	b.n	8001050 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <prvResetNextTaskUnblockTime+0x30>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <prvResetNextTaskUnblockTime+0x34>)
 800104e:	6013      	str	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	2000012c 	.word	0x2000012c
 8001060:	20000194 	.word	0x20000194

08001064 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8001064:	b580      	push	{r7, lr}
 8001066:	b092      	sub	sp, #72	; 0x48
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
 8001070:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8001072:	2301      	movs	r3, #1
 8001074:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d10a      	bne.n	8001092 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 800107c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001080:	f383 8811 	msr	BASEPRI, r3
 8001084:	f3bf 8f6f 	isb	sy
 8001088:	f3bf 8f4f 	dsb	sy
 800108c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800108e:	bf00      	nop
 8001090:	e7fe      	b.n	8001090 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d00a      	beq.n	80010ae <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8001098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800109c:	f383 8811 	msr	BASEPRI, r3
 80010a0:	f3bf 8f6f 	isb	sy
 80010a4:	f3bf 8f4f 	dsb	sy
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80010aa:	bf00      	nop
 80010ac:	e7fe      	b.n	80010ac <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80010ae:	f000 fbcd 	bl	800184c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	643b      	str	r3, [r7, #64]	; 0x40

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80010b6:	f3ef 8211 	mrs	r2, BASEPRI
 80010ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010be:	f383 8811 	msr	BASEPRI, r3
 80010c2:	f3bf 8f6f 	isb	sy
 80010c6:	f3bf 8f4f 	dsb	sy
 80010ca:	623a      	str	r2, [r7, #32]
 80010cc:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80010ce:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80010d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 80010d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d007      	beq.n	80010e8 <xTaskGenericNotifyFromISR+0x84>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80010d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	3312      	adds	r3, #18
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	4413      	add	r3, r2
 80010e2:	685a      	ldr	r2, [r3, #4]
 80010e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010e6:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80010e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	4413      	add	r3, r2
 80010ee:	3350      	adds	r3, #80	; 0x50
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80010f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	4413      	add	r3, r2
 80010fc:	3350      	adds	r3, #80	; 0x50
 80010fe:	2202      	movs	r2, #2
 8001100:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8001102:	78fb      	ldrb	r3, [r7, #3]
 8001104:	2b04      	cmp	r3, #4
 8001106:	d841      	bhi.n	800118c <xTaskGenericNotifyFromISR+0x128>
 8001108:	a201      	add	r2, pc, #4	; (adr r2, 8001110 <xTaskGenericNotifyFromISR+0xac>)
 800110a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800110e:	bf00      	nop
 8001110:	080011ab 	.word	0x080011ab
 8001114:	08001125 	.word	0x08001125
 8001118:	08001143 	.word	0x08001143
 800111c:	0800115f 	.word	0x0800115f
 8001120:	0800116f 	.word	0x0800116f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8001124:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	3312      	adds	r3, #18
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	4413      	add	r3, r2
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	431a      	orrs	r2, r3
 8001134:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	3312      	adds	r3, #18
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	440b      	add	r3, r1
 800113e:	605a      	str	r2, [r3, #4]
                    break;
 8001140:	e036      	b.n	80011b0 <xTaskGenericNotifyFromISR+0x14c>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8001142:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	3312      	adds	r3, #18
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	1c5a      	adds	r2, r3, #1
 8001150:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	3312      	adds	r3, #18
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	440b      	add	r3, r1
 800115a:	605a      	str	r2, [r3, #4]
                    break;
 800115c:	e028      	b.n	80011b0 <xTaskGenericNotifyFromISR+0x14c>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800115e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	3312      	adds	r3, #18
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	4413      	add	r3, r2
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	605a      	str	r2, [r3, #4]
                    break;
 800116c:	e020      	b.n	80011b0 <xTaskGenericNotifyFromISR+0x14c>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800116e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001172:	2b02      	cmp	r3, #2
 8001174:	d007      	beq.n	8001186 <xTaskGenericNotifyFromISR+0x122>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001176:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	3312      	adds	r3, #18
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	4413      	add	r3, r2
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8001184:	e014      	b.n	80011b0 <xTaskGenericNotifyFromISR+0x14c>
                        xReturn = pdFAIL;
 8001186:	2300      	movs	r3, #0
 8001188:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 800118a:	e011      	b.n	80011b0 <xTaskGenericNotifyFromISR+0x14c>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800118c:	4b5f      	ldr	r3, [pc, #380]	; (800130c <xTaskGenericNotifyFromISR+0x2a8>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d00c      	beq.n	80011ae <xTaskGenericNotifyFromISR+0x14a>
        __asm volatile
 8001194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001198:	f383 8811 	msr	BASEPRI, r3
 800119c:	f3bf 8f6f 	isb	sy
 80011a0:	f3bf 8f4f 	dsb	sy
 80011a4:	61bb      	str	r3, [r7, #24]
    }
 80011a6:	bf00      	nop
 80011a8:	e7fe      	b.n	80011a8 <xTaskGenericNotifyFromISR+0x144>
                    break;
 80011aa:	bf00      	nop
 80011ac:	e000      	b.n	80011b0 <xTaskGenericNotifyFromISR+0x14c>
                    break;
 80011ae:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80011b0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	f040 809e 	bne.w	80012f6 <xTaskGenericNotifyFromISR+0x292>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80011ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d00a      	beq.n	80011d8 <xTaskGenericNotifyFromISR+0x174>
        __asm volatile
 80011c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011c6:	f383 8811 	msr	BASEPRI, r3
 80011ca:	f3bf 8f6f 	isb	sy
 80011ce:	f3bf 8f4f 	dsb	sy
 80011d2:	617b      	str	r3, [r7, #20]
    }
 80011d4:	bf00      	nop
 80011d6:	e7fe      	b.n	80011d6 <xTaskGenericNotifyFromISR+0x172>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80011d8:	4b4d      	ldr	r3, [pc, #308]	; (8001310 <xTaskGenericNotifyFromISR+0x2ac>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d15e      	bne.n	800129e <xTaskGenericNotifyFromISR+0x23a>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80011e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	633b      	str	r3, [r7, #48]	; 0x30
 80011e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80011ec:	68d2      	ldr	r2, [r2, #12]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80011f6:	6892      	ldr	r2, [r2, #8]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001200:	3304      	adds	r3, #4
 8001202:	429a      	cmp	r2, r3
 8001204:	d103      	bne.n	800120e <xTaskGenericNotifyFromISR+0x1aa>
 8001206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001208:	68da      	ldr	r2, [r3, #12]
 800120a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001210:	2200      	movs	r2, #0
 8001212:	615a      	str	r2, [r3, #20]
 8001214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	1e5a      	subs	r2, r3, #1
 800121a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800121c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800121e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001222:	2201      	movs	r2, #1
 8001224:	409a      	lsls	r2, r3
 8001226:	4b3b      	ldr	r3, [pc, #236]	; (8001314 <xTaskGenericNotifyFromISR+0x2b0>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4313      	orrs	r3, r2
 800122c:	4a39      	ldr	r2, [pc, #228]	; (8001314 <xTaskGenericNotifyFromISR+0x2b0>)
 800122e:	6013      	str	r3, [r2, #0]
 8001230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001234:	4938      	ldr	r1, [pc, #224]	; (8001318 <xTaskGenericNotifyFromISR+0x2b4>)
 8001236:	4613      	mov	r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4413      	add	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	440b      	add	r3, r1
 8001240:	3304      	adds	r3, #4
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001248:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800124e:	689a      	ldr	r2, [r3, #8]
 8001250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001252:	60da      	str	r2, [r3, #12]
 8001254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800125a:	3204      	adds	r2, #4
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001260:	1d1a      	adds	r2, r3, #4
 8001262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800126a:	4613      	mov	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4413      	add	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	4a29      	ldr	r2, [pc, #164]	; (8001318 <xTaskGenericNotifyFromISR+0x2b4>)
 8001274:	441a      	add	r2, r3
 8001276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001278:	615a      	str	r2, [r3, #20]
 800127a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800127c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800127e:	4926      	ldr	r1, [pc, #152]	; (8001318 <xTaskGenericNotifyFromISR+0x2b4>)
 8001280:	4613      	mov	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4413      	add	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	440b      	add	r3, r1
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	1c59      	adds	r1, r3, #1
 800128e:	4822      	ldr	r0, [pc, #136]	; (8001318 <xTaskGenericNotifyFromISR+0x2b4>)
 8001290:	4613      	mov	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4403      	add	r3, r0
 800129a:	6019      	str	r1, [r3, #0]
 800129c:	e01b      	b.n	80012d6 <xTaskGenericNotifyFromISR+0x272>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800129e:	4b1f      	ldr	r3, [pc, #124]	; (800131c <xTaskGenericNotifyFromISR+0x2b8>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	637b      	str	r3, [r7, #52]	; 0x34
 80012a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012a8:	61da      	str	r2, [r3, #28]
 80012aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ac:	689a      	ldr	r2, [r3, #8]
 80012ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012b0:	621a      	str	r2, [r3, #32]
 80012b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80012b8:	3218      	adds	r2, #24
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012be:	f103 0218 	add.w	r2, r3, #24
 80012c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012c8:	4a14      	ldr	r2, [pc, #80]	; (800131c <xTaskGenericNotifyFromISR+0x2b8>)
 80012ca:	629a      	str	r2, [r3, #40]	; 0x28
 80012cc:	4b13      	ldr	r3, [pc, #76]	; (800131c <xTaskGenericNotifyFromISR+0x2b8>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	3301      	adds	r3, #1
 80012d2:	4a12      	ldr	r2, [pc, #72]	; (800131c <xTaskGenericNotifyFromISR+0x2b8>)
 80012d4:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80012d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012da:	4b11      	ldr	r3, [pc, #68]	; (8001320 <xTaskGenericNotifyFromISR+0x2bc>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d908      	bls.n	80012f6 <xTaskGenericNotifyFromISR+0x292>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 80012e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d002      	beq.n	80012f0 <xTaskGenericNotifyFromISR+0x28c>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 80012ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012ec:	2201      	movs	r2, #1
 80012ee:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <xTaskGenericNotifyFromISR+0x2c0>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012f8:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001300:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8001302:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 8001304:	4618      	mov	r0, r3
 8001306:	3748      	adds	r7, #72	; 0x48
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000178 	.word	0x20000178
 8001310:	2000019c 	.word	0x2000019c
 8001314:	2000017c 	.word	0x2000017c
 8001318:	20000078 	.word	0x20000078
 800131c:	20000134 	.word	0x20000134
 8001320:	20000074 	.word	0x20000074
 8001324:	20000188 	.word	0x20000188

08001328 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001332:	4b36      	ldr	r3, [pc, #216]	; (800140c <prvAddCurrentTaskToDelayedList+0xe4>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001338:	4b35      	ldr	r3, [pc, #212]	; (8001410 <prvAddCurrentTaskToDelayedList+0xe8>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	3304      	adds	r3, #4
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff f94a 	bl	80005d8 <uxListRemove>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d10b      	bne.n	8001362 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800134a:	4b31      	ldr	r3, [pc, #196]	; (8001410 <prvAddCurrentTaskToDelayedList+0xe8>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001350:	2201      	movs	r2, #1
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43da      	mvns	r2, r3
 8001358:	4b2e      	ldr	r3, [pc, #184]	; (8001414 <prvAddCurrentTaskToDelayedList+0xec>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4013      	ands	r3, r2
 800135e:	4a2d      	ldr	r2, [pc, #180]	; (8001414 <prvAddCurrentTaskToDelayedList+0xec>)
 8001360:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001368:	d124      	bne.n	80013b4 <prvAddCurrentTaskToDelayedList+0x8c>
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d021      	beq.n	80013b4 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001370:	4b29      	ldr	r3, [pc, #164]	; (8001418 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	4b26      	ldr	r3, [pc, #152]	; (8001410 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	4b24      	ldr	r3, [pc, #144]	; (8001410 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	6892      	ldr	r2, [r2, #8]
 8001386:	60da      	str	r2, [r3, #12]
 8001388:	4b21      	ldr	r3, [pc, #132]	; (8001410 <prvAddCurrentTaskToDelayedList+0xe8>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	3204      	adds	r2, #4
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	4b1e      	ldr	r3, [pc, #120]	; (8001410 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	1d1a      	adds	r2, r3, #4
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	4b1c      	ldr	r3, [pc, #112]	; (8001410 <prvAddCurrentTaskToDelayedList+0xe8>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a1d      	ldr	r2, [pc, #116]	; (8001418 <prvAddCurrentTaskToDelayedList+0xf0>)
 80013a4:	615a      	str	r2, [r3, #20]
 80013a6:	4b1c      	ldr	r3, [pc, #112]	; (8001418 <prvAddCurrentTaskToDelayedList+0xf0>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	3301      	adds	r3, #1
 80013ac:	4a1a      	ldr	r2, [pc, #104]	; (8001418 <prvAddCurrentTaskToDelayedList+0xf0>)
 80013ae:	6013      	str	r3, [r2, #0]
 80013b0:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80013b2:	e026      	b.n	8001402 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80013b4:	697a      	ldr	r2, [r7, #20]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80013bc:	4b14      	ldr	r3, [pc, #80]	; (8001410 <prvAddCurrentTaskToDelayedList+0xe8>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	68fa      	ldr	r2, [r7, #12]
 80013c2:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80013c4:	68fa      	ldr	r2, [r7, #12]
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d209      	bcs.n	80013e0 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80013cc:	4b13      	ldr	r3, [pc, #76]	; (800141c <prvAddCurrentTaskToDelayedList+0xf4>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <prvAddCurrentTaskToDelayedList+0xe8>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	3304      	adds	r3, #4
 80013d6:	4619      	mov	r1, r3
 80013d8:	4610      	mov	r0, r2
 80013da:	f7ff f8c4 	bl	8000566 <vListInsert>
}
 80013de:	e010      	b.n	8001402 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80013e0:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <prvAddCurrentTaskToDelayedList+0xf8>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <prvAddCurrentTaskToDelayedList+0xe8>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	3304      	adds	r3, #4
 80013ea:	4619      	mov	r1, r3
 80013ec:	4610      	mov	r0, r2
 80013ee:	f7ff f8ba 	bl	8000566 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80013f2:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <prvAddCurrentTaskToDelayedList+0xfc>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d202      	bcs.n	8001402 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80013fc:	4a09      	ldr	r2, [pc, #36]	; (8001424 <prvAddCurrentTaskToDelayedList+0xfc>)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6013      	str	r3, [r2, #0]
}
 8001402:	bf00      	nop
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000178 	.word	0x20000178
 8001410:	20000074 	.word	0x20000074
 8001414:	2000017c 	.word	0x2000017c
 8001418:	20000160 	.word	0x20000160
 800141c:	20000130 	.word	0x20000130
 8001420:	2000012c 	.word	0x2000012c
 8001424:	20000194 	.word	0x20000194

08001428 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	3b04      	subs	r3, #4
 8001438:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001440:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	3b04      	subs	r3, #4
 8001446:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	f023 0201 	bic.w	r2, r3, #1
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	3b04      	subs	r3, #4
 8001456:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001458:	4a0c      	ldr	r2, [pc, #48]	; (800148c <pxPortInitialiseStack+0x64>)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	3b14      	subs	r3, #20
 8001462:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	3b04      	subs	r3, #4
 800146e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f06f 0202 	mvn.w	r2, #2
 8001476:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	3b20      	subs	r3, #32
 800147c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800147e:	68fb      	ldr	r3, [r7, #12]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	08001491 	.word	0x08001491

08001490 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800149a:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <prvTaskExitError+0x54>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a2:	d00a      	beq.n	80014ba <prvTaskExitError+0x2a>
        __asm volatile
 80014a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014a8:	f383 8811 	msr	BASEPRI, r3
 80014ac:	f3bf 8f6f 	isb	sy
 80014b0:	f3bf 8f4f 	dsb	sy
 80014b4:	60fb      	str	r3, [r7, #12]
    }
 80014b6:	bf00      	nop
 80014b8:	e7fe      	b.n	80014b8 <prvTaskExitError+0x28>
        __asm volatile
 80014ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014be:	f383 8811 	msr	BASEPRI, r3
 80014c2:	f3bf 8f6f 	isb	sy
 80014c6:	f3bf 8f4f 	dsb	sy
 80014ca:	60bb      	str	r3, [r7, #8]
    }
 80014cc:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80014ce:	bf00      	nop
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d0fc      	beq.n	80014d0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80014d6:	bf00      	nop
 80014d8:	bf00      	nop
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	20000004 	.word	0x20000004
	...

080014f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80014f0:	4b07      	ldr	r3, [pc, #28]	; (8001510 <pxCurrentTCBConst2>)
 80014f2:	6819      	ldr	r1, [r3, #0]
 80014f4:	6808      	ldr	r0, [r1, #0]
 80014f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014fa:	f380 8809 	msr	PSP, r0
 80014fe:	f3bf 8f6f 	isb	sy
 8001502:	f04f 0000 	mov.w	r0, #0
 8001506:	f380 8811 	msr	BASEPRI, r0
 800150a:	4770      	bx	lr
 800150c:	f3af 8000 	nop.w

08001510 <pxCurrentTCBConst2>:
 8001510:	20000074 	.word	0x20000074
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001514:	bf00      	nop
 8001516:	bf00      	nop

08001518 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8001518:	4808      	ldr	r0, [pc, #32]	; (800153c <prvPortStartFirstTask+0x24>)
 800151a:	6800      	ldr	r0, [r0, #0]
 800151c:	6800      	ldr	r0, [r0, #0]
 800151e:	f380 8808 	msr	MSP, r0
 8001522:	f04f 0000 	mov.w	r0, #0
 8001526:	f380 8814 	msr	CONTROL, r0
 800152a:	b662      	cpsie	i
 800152c:	b661      	cpsie	f
 800152e:	f3bf 8f4f 	dsb	sy
 8001532:	f3bf 8f6f 	isb	sy
 8001536:	df00      	svc	0
 8001538:	bf00      	nop
 800153a:	0000      	.short	0x0000
 800153c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001540:	bf00      	nop
 8001542:	bf00      	nop

08001544 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800154a:	4b46      	ldr	r3, [pc, #280]	; (8001664 <xPortStartScheduler+0x120>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a46      	ldr	r2, [pc, #280]	; (8001668 <xPortStartScheduler+0x124>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d10a      	bne.n	800156a <xPortStartScheduler+0x26>
        __asm volatile
 8001554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001558:	f383 8811 	msr	BASEPRI, r3
 800155c:	f3bf 8f6f 	isb	sy
 8001560:	f3bf 8f4f 	dsb	sy
 8001564:	613b      	str	r3, [r7, #16]
    }
 8001566:	bf00      	nop
 8001568:	e7fe      	b.n	8001568 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800156a:	4b3e      	ldr	r3, [pc, #248]	; (8001664 <xPortStartScheduler+0x120>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a3f      	ldr	r2, [pc, #252]	; (800166c <xPortStartScheduler+0x128>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d10a      	bne.n	800158a <xPortStartScheduler+0x46>
        __asm volatile
 8001574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001578:	f383 8811 	msr	BASEPRI, r3
 800157c:	f3bf 8f6f 	isb	sy
 8001580:	f3bf 8f4f 	dsb	sy
 8001584:	60fb      	str	r3, [r7, #12]
    }
 8001586:	bf00      	nop
 8001588:	e7fe      	b.n	8001588 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800158a:	4b39      	ldr	r3, [pc, #228]	; (8001670 <xPortStartScheduler+0x12c>)
 800158c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	b2db      	uxtb	r3, r3
 8001594:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	22ff      	movs	r2, #255	; 0xff
 800159a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80015a4:	78fb      	ldrb	r3, [r7, #3]
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	4b31      	ldr	r3, [pc, #196]	; (8001674 <xPortStartScheduler+0x130>)
 80015b0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80015b2:	4b31      	ldr	r3, [pc, #196]	; (8001678 <xPortStartScheduler+0x134>)
 80015b4:	2207      	movs	r2, #7
 80015b6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80015b8:	e009      	b.n	80015ce <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 80015ba:	4b2f      	ldr	r3, [pc, #188]	; (8001678 <xPortStartScheduler+0x134>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	3b01      	subs	r3, #1
 80015c0:	4a2d      	ldr	r2, [pc, #180]	; (8001678 <xPortStartScheduler+0x134>)
 80015c2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80015c4:	78fb      	ldrb	r3, [r7, #3]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80015ce:	78fb      	ldrb	r3, [r7, #3]
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015d6:	2b80      	cmp	r3, #128	; 0x80
 80015d8:	d0ef      	beq.n	80015ba <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80015da:	4b27      	ldr	r3, [pc, #156]	; (8001678 <xPortStartScheduler+0x134>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f1c3 0307 	rsb	r3, r3, #7
 80015e2:	2b04      	cmp	r3, #4
 80015e4:	d00a      	beq.n	80015fc <xPortStartScheduler+0xb8>
        __asm volatile
 80015e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015ea:	f383 8811 	msr	BASEPRI, r3
 80015ee:	f3bf 8f6f 	isb	sy
 80015f2:	f3bf 8f4f 	dsb	sy
 80015f6:	60bb      	str	r3, [r7, #8]
    }
 80015f8:	bf00      	nop
 80015fa:	e7fe      	b.n	80015fa <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80015fc:	4b1e      	ldr	r3, [pc, #120]	; (8001678 <xPortStartScheduler+0x134>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	021b      	lsls	r3, r3, #8
 8001602:	4a1d      	ldr	r2, [pc, #116]	; (8001678 <xPortStartScheduler+0x134>)
 8001604:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001606:	4b1c      	ldr	r3, [pc, #112]	; (8001678 <xPortStartScheduler+0x134>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800160e:	4a1a      	ldr	r2, [pc, #104]	; (8001678 <xPortStartScheduler+0x134>)
 8001610:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	b2da      	uxtb	r2, r3
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800161a:	4b18      	ldr	r3, [pc, #96]	; (800167c <xPortStartScheduler+0x138>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a17      	ldr	r2, [pc, #92]	; (800167c <xPortStartScheduler+0x138>)
 8001620:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001624:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001626:	4b15      	ldr	r3, [pc, #84]	; (800167c <xPortStartScheduler+0x138>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a14      	ldr	r2, [pc, #80]	; (800167c <xPortStartScheduler+0x138>)
 800162c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001630:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001632:	f000 f8db 	bl	80017ec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001636:	4b12      	ldr	r3, [pc, #72]	; (8001680 <xPortStartScheduler+0x13c>)
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800163c:	f000 f8fa 	bl	8001834 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001640:	4b10      	ldr	r3, [pc, #64]	; (8001684 <xPortStartScheduler+0x140>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a0f      	ldr	r2, [pc, #60]	; (8001684 <xPortStartScheduler+0x140>)
 8001646:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800164a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800164c:	f7ff ff64 	bl	8001518 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001650:	f7ff fbfa 	bl	8000e48 <vTaskSwitchContext>
    prvTaskExitError();
 8001654:	f7ff ff1c 	bl	8001490 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	e000ed00 	.word	0xe000ed00
 8001668:	410fc271 	.word	0x410fc271
 800166c:	410fc270 	.word	0x410fc270
 8001670:	e000e400 	.word	0xe000e400
 8001674:	200001a0 	.word	0x200001a0
 8001678:	200001a4 	.word	0x200001a4
 800167c:	e000ed20 	.word	0xe000ed20
 8001680:	20000004 	.word	0x20000004
 8001684:	e000ef34 	.word	0xe000ef34

08001688 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
        __asm volatile
 800168e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001692:	f383 8811 	msr	BASEPRI, r3
 8001696:	f3bf 8f6f 	isb	sy
 800169a:	f3bf 8f4f 	dsb	sy
 800169e:	607b      	str	r3, [r7, #4]
    }
 80016a0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80016a2:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <vPortEnterCritical+0x58>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	3301      	adds	r3, #1
 80016a8:	4a0d      	ldr	r2, [pc, #52]	; (80016e0 <vPortEnterCritical+0x58>)
 80016aa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80016ac:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <vPortEnterCritical+0x58>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d10f      	bne.n	80016d4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <vPortEnterCritical+0x5c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00a      	beq.n	80016d4 <vPortEnterCritical+0x4c>
        __asm volatile
 80016be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016c2:	f383 8811 	msr	BASEPRI, r3
 80016c6:	f3bf 8f6f 	isb	sy
 80016ca:	f3bf 8f4f 	dsb	sy
 80016ce:	603b      	str	r3, [r7, #0]
    }
 80016d0:	bf00      	nop
 80016d2:	e7fe      	b.n	80016d2 <vPortEnterCritical+0x4a>
    }
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	20000004 	.word	0x20000004
 80016e4:	e000ed04 	.word	0xe000ed04

080016e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80016ee:	4b12      	ldr	r3, [pc, #72]	; (8001738 <vPortExitCritical+0x50>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d10a      	bne.n	800170c <vPortExitCritical+0x24>
        __asm volatile
 80016f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016fa:	f383 8811 	msr	BASEPRI, r3
 80016fe:	f3bf 8f6f 	isb	sy
 8001702:	f3bf 8f4f 	dsb	sy
 8001706:	607b      	str	r3, [r7, #4]
    }
 8001708:	bf00      	nop
 800170a:	e7fe      	b.n	800170a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800170c:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <vPortExitCritical+0x50>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	3b01      	subs	r3, #1
 8001712:	4a09      	ldr	r2, [pc, #36]	; (8001738 <vPortExitCritical+0x50>)
 8001714:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001716:	4b08      	ldr	r3, [pc, #32]	; (8001738 <vPortExitCritical+0x50>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d105      	bne.n	800172a <vPortExitCritical+0x42>
 800171e:	2300      	movs	r3, #0
 8001720:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	f383 8811 	msr	BASEPRI, r3
    }
 8001728:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	20000004 	.word	0x20000004
 800173c:	00000000 	.word	0x00000000

08001740 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001740:	f3ef 8009 	mrs	r0, PSP
 8001744:	f3bf 8f6f 	isb	sy
 8001748:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <pxCurrentTCBConst>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	f01e 0f10 	tst.w	lr, #16
 8001750:	bf08      	it	eq
 8001752:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001756:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800175a:	6010      	str	r0, [r2, #0]
 800175c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001760:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001764:	f380 8811 	msr	BASEPRI, r0
 8001768:	f3bf 8f4f 	dsb	sy
 800176c:	f3bf 8f6f 	isb	sy
 8001770:	f7ff fb6a 	bl	8000e48 <vTaskSwitchContext>
 8001774:	f04f 0000 	mov.w	r0, #0
 8001778:	f380 8811 	msr	BASEPRI, r0
 800177c:	bc09      	pop	{r0, r3}
 800177e:	6819      	ldr	r1, [r3, #0]
 8001780:	6808      	ldr	r0, [r1, #0]
 8001782:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001786:	f01e 0f10 	tst.w	lr, #16
 800178a:	bf08      	it	eq
 800178c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001790:	f380 8809 	msr	PSP, r0
 8001794:	f3bf 8f6f 	isb	sy
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	f3af 8000 	nop.w

080017a0 <pxCurrentTCBConst>:
 80017a0:	20000074 	.word	0x20000074
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80017a4:	bf00      	nop
 80017a6:	bf00      	nop

080017a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
        __asm volatile
 80017ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017b2:	f383 8811 	msr	BASEPRI, r3
 80017b6:	f3bf 8f6f 	isb	sy
 80017ba:	f3bf 8f4f 	dsb	sy
 80017be:	607b      	str	r3, [r7, #4]
    }
 80017c0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80017c2:	f7ff fa2b 	bl	8000c1c <xTaskIncrementTick>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <SysTick_Handler+0x40>)
 80017ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	2300      	movs	r3, #0
 80017d6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	f383 8811 	msr	BASEPRI, r3
    }
 80017de:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	e000ed04 	.word	0xe000ed04

080017ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80017f0:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <vPortSetupTimerInterrupt+0x34>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80017f6:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <vPortSetupTimerInterrupt+0x38>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80017fc:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <vPortSetupTimerInterrupt+0x3c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a0a      	ldr	r2, [pc, #40]	; (800182c <vPortSetupTimerInterrupt+0x40>)
 8001802:	fba2 2303 	umull	r2, r3, r2, r3
 8001806:	099b      	lsrs	r3, r3, #6
 8001808:	4a09      	ldr	r2, [pc, #36]	; (8001830 <vPortSetupTimerInterrupt+0x44>)
 800180a:	3b01      	subs	r3, #1
 800180c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800180e:	4b04      	ldr	r3, [pc, #16]	; (8001820 <vPortSetupTimerInterrupt+0x34>)
 8001810:	2207      	movs	r2, #7
 8001812:	601a      	str	r2, [r3, #0]
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000e010 	.word	0xe000e010
 8001824:	e000e018 	.word	0xe000e018
 8001828:	2000004c 	.word	0x2000004c
 800182c:	10624dd3 	.word	0x10624dd3
 8001830:	e000e014 	.word	0xe000e014

08001834 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8001834:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001844 <vPortEnableVFP+0x10>
 8001838:	6801      	ldr	r1, [r0, #0]
 800183a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800183e:	6001      	str	r1, [r0, #0]
 8001840:	4770      	bx	lr
 8001842:	0000      	.short	0x0000
 8001844:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8001848:	bf00      	nop
 800184a:	bf00      	nop

0800184c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8001852:	f3ef 8305 	mrs	r3, IPSR
 8001856:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2b0f      	cmp	r3, #15
 800185c:	d914      	bls.n	8001888 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800185e:	4a17      	ldr	r2, [pc, #92]	; (80018bc <vPortValidateInterruptPriority+0x70>)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	4413      	add	r3, r2
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001868:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <vPortValidateInterruptPriority+0x74>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	7afa      	ldrb	r2, [r7, #11]
 800186e:	429a      	cmp	r2, r3
 8001870:	d20a      	bcs.n	8001888 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8001872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001876:	f383 8811 	msr	BASEPRI, r3
 800187a:	f3bf 8f6f 	isb	sy
 800187e:	f3bf 8f4f 	dsb	sy
 8001882:	607b      	str	r3, [r7, #4]
    }
 8001884:	bf00      	nop
 8001886:	e7fe      	b.n	8001886 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001888:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <vPortValidateInterruptPriority+0x78>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001890:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <vPortValidateInterruptPriority+0x7c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	429a      	cmp	r2, r3
 8001896:	d90a      	bls.n	80018ae <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8001898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800189c:	f383 8811 	msr	BASEPRI, r3
 80018a0:	f3bf 8f6f 	isb	sy
 80018a4:	f3bf 8f4f 	dsb	sy
 80018a8:	603b      	str	r3, [r7, #0]
    }
 80018aa:	bf00      	nop
 80018ac:	e7fe      	b.n	80018ac <vPortValidateInterruptPriority+0x60>
    }
 80018ae:	bf00      	nop
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	e000e3f0 	.word	0xe000e3f0
 80018c0:	200001a0 	.word	0x200001a0
 80018c4:	e000ed0c 	.word	0xe000ed0c
 80018c8:	200001a4 	.word	0x200001a4

080018cc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08a      	sub	sp, #40	; 0x28
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80018d8:	f7ff f886 	bl	80009e8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80018dc:	4b53      	ldr	r3, [pc, #332]	; (8001a2c <pvPortMalloc+0x160>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d101      	bne.n	80018e8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80018e4:	f000 f908 	bl	8001af8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d012      	beq.n	8001914 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80018ee:	2208      	movs	r2, #8
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	3308      	adds	r3, #8
 80018fa:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	43db      	mvns	r3, r3
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	429a      	cmp	r2, r3
 8001904:	d804      	bhi.n	8001910 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	4413      	add	r3, r2
 800190c:	607b      	str	r3, [r7, #4]
 800190e:	e001      	b.n	8001914 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	db70      	blt.n	80019fc <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d06d      	beq.n	80019fc <pvPortMalloc+0x130>
 8001920:	4b43      	ldr	r3, [pc, #268]	; (8001a30 <pvPortMalloc+0x164>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	429a      	cmp	r2, r3
 8001928:	d868      	bhi.n	80019fc <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800192a:	4b42      	ldr	r3, [pc, #264]	; (8001a34 <pvPortMalloc+0x168>)
 800192c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800192e:	4b41      	ldr	r3, [pc, #260]	; (8001a34 <pvPortMalloc+0x168>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001934:	e004      	b.n	8001940 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	429a      	cmp	r2, r3
 8001948:	d903      	bls.n	8001952 <pvPortMalloc+0x86>
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f1      	bne.n	8001936 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001952:	4b36      	ldr	r3, [pc, #216]	; (8001a2c <pvPortMalloc+0x160>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001958:	429a      	cmp	r2, r3
 800195a:	d04f      	beq.n	80019fc <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800195c:	6a3b      	ldr	r3, [r7, #32]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2208      	movs	r2, #8
 8001962:	4413      	add	r3, r2
 8001964:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	6a3b      	ldr	r3, [r7, #32]
 800196c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	1ad2      	subs	r2, r2, r3
 8001976:	2308      	movs	r3, #8
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	429a      	cmp	r2, r3
 800197c:	d91f      	bls.n	80019be <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800197e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4413      	add	r3, r2
 8001984:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	2b00      	cmp	r3, #0
 800198e:	d00a      	beq.n	80019a6 <pvPortMalloc+0xda>
        __asm volatile
 8001990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001994:	f383 8811 	msr	BASEPRI, r3
 8001998:	f3bf 8f6f 	isb	sy
 800199c:	f3bf 8f4f 	dsb	sy
 80019a0:	613b      	str	r3, [r7, #16]
    }
 80019a2:	bf00      	nop
 80019a4:	e7fe      	b.n	80019a4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	1ad2      	subs	r2, r2, r3
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80019b8:	6978      	ldr	r0, [r7, #20]
 80019ba:	f000 f8f9 	bl	8001bb0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80019be:	4b1c      	ldr	r3, [pc, #112]	; (8001a30 <pvPortMalloc+0x164>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	4a19      	ldr	r2, [pc, #100]	; (8001a30 <pvPortMalloc+0x164>)
 80019ca:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80019cc:	4b18      	ldr	r3, [pc, #96]	; (8001a30 <pvPortMalloc+0x164>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <pvPortMalloc+0x16c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d203      	bcs.n	80019e0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80019d8:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <pvPortMalloc+0x164>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a16      	ldr	r2, [pc, #88]	; (8001a38 <pvPortMalloc+0x16c>)
 80019de:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80019e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80019e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ea:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80019f2:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <pvPortMalloc+0x170>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	3301      	adds	r3, #1
 80019f8:	4a10      	ldr	r2, [pc, #64]	; (8001a3c <pvPortMalloc+0x170>)
 80019fa:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80019fc:	f7ff f802 	bl	8000a04 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d00a      	beq.n	8001a20 <pvPortMalloc+0x154>
        __asm volatile
 8001a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a0e:	f383 8811 	msr	BASEPRI, r3
 8001a12:	f3bf 8f6f 	isb	sy
 8001a16:	f3bf 8f4f 	dsb	sy
 8001a1a:	60fb      	str	r3, [r7, #12]
    }
 8001a1c:	bf00      	nop
 8001a1e:	e7fe      	b.n	8001a1e <pvPortMalloc+0x152>
    return pvReturn;
 8001a20:	69fb      	ldr	r3, [r7, #28]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3728      	adds	r7, #40	; 0x28
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000d68 	.word	0x20000d68
 8001a30:	20000d6c 	.word	0x20000d6c
 8001a34:	20000d60 	.word	0x20000d60
 8001a38:	20000d70 	.word	0x20000d70
 8001a3c:	20000d74 	.word	0x20000d74

08001a40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d049      	beq.n	8001ae6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8001a52:	2308      	movs	r3, #8
 8001a54:	425b      	negs	r3, r3
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	4413      	add	r3, r2
 8001a5a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	db0a      	blt.n	8001a7e <vPortFree+0x3e>
        __asm volatile
 8001a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a6c:	f383 8811 	msr	BASEPRI, r3
 8001a70:	f3bf 8f6f 	isb	sy
 8001a74:	f3bf 8f4f 	dsb	sy
 8001a78:	60fb      	str	r3, [r7, #12]
    }
 8001a7a:	bf00      	nop
 8001a7c:	e7fe      	b.n	8001a7c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d00a      	beq.n	8001a9c <vPortFree+0x5c>
        __asm volatile
 8001a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a8a:	f383 8811 	msr	BASEPRI, r3
 8001a8e:	f3bf 8f6f 	isb	sy
 8001a92:	f3bf 8f4f 	dsb	sy
 8001a96:	60bb      	str	r3, [r7, #8]
    }
 8001a98:	bf00      	nop
 8001a9a:	e7fe      	b.n	8001a9a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	0fdb      	lsrs	r3, r3, #31
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d01c      	beq.n	8001ae6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d118      	bne.n	8001ae6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8001ac0:	f7fe ff92 	bl	80009e8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <vPortFree+0xb0>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4413      	add	r3, r2
 8001ace:	4a08      	ldr	r2, [pc, #32]	; (8001af0 <vPortFree+0xb0>)
 8001ad0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001ad2:	6938      	ldr	r0, [r7, #16]
 8001ad4:	f000 f86c 	bl	8001bb0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8001ad8:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <vPortFree+0xb4>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	3301      	adds	r3, #1
 8001ade:	4a05      	ldr	r2, [pc, #20]	; (8001af4 <vPortFree+0xb4>)
 8001ae0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8001ae2:	f7fe ff8f 	bl	8000a04 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8001ae6:	bf00      	nop
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000d6c 	.word	0x20000d6c
 8001af4:	20000d78 	.word	0x20000d78

08001af8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001afe:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001b02:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8001b04:	4b25      	ldr	r3, [pc, #148]	; (8001b9c <prvHeapInit+0xa4>)
 8001b06:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00c      	beq.n	8001b2c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	3307      	adds	r3, #7
 8001b16:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f023 0307 	bic.w	r3, r3, #7
 8001b1e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8001b20:	68ba      	ldr	r2, [r7, #8]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	4a1d      	ldr	r2, [pc, #116]	; (8001b9c <prvHeapInit+0xa4>)
 8001b28:	4413      	add	r3, r2
 8001b2a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001b30:	4a1b      	ldr	r2, [pc, #108]	; (8001ba0 <prvHeapInit+0xa8>)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8001b36:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <prvHeapInit+0xa8>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	4413      	add	r3, r2
 8001b42:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8001b44:	2208      	movs	r2, #8
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	1a9b      	subs	r3, r3, r2
 8001b4a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f023 0307 	bic.w	r3, r3, #7
 8001b52:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4a13      	ldr	r2, [pc, #76]	; (8001ba4 <prvHeapInit+0xac>)
 8001b58:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8001b5a:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <prvHeapInit+0xac>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8001b62:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <prvHeapInit+0xac>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	1ad2      	subs	r2, r2, r3
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001b78:	4b0a      	ldr	r3, [pc, #40]	; (8001ba4 <prvHeapInit+0xac>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	4a08      	ldr	r2, [pc, #32]	; (8001ba8 <prvHeapInit+0xb0>)
 8001b86:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	4a07      	ldr	r2, [pc, #28]	; (8001bac <prvHeapInit+0xb4>)
 8001b8e:	6013      	str	r3, [r2, #0]
}
 8001b90:	bf00      	nop
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	200001a8 	.word	0x200001a8
 8001ba0:	20000d60 	.word	0x20000d60
 8001ba4:	20000d68 	.word	0x20000d68
 8001ba8:	20000d70 	.word	0x20000d70
 8001bac:	20000d6c 	.word	0x20000d6c

08001bb0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001bb8:	4b28      	ldr	r3, [pc, #160]	; (8001c5c <prvInsertBlockIntoFreeList+0xac>)
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	e002      	b.n	8001bc4 <prvInsertBlockIntoFreeList+0x14>
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d8f7      	bhi.n	8001bbe <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	4413      	add	r3, r2
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d108      	bne.n	8001bf2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	685a      	ldr	r2, [r3, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	441a      	add	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	441a      	add	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d118      	bne.n	8001c38 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <prvInsertBlockIntoFreeList+0xb0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d00d      	beq.n	8001c2e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	441a      	add	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	e008      	b.n	8001c40 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <prvInsertBlockIntoFreeList+0xb0>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	e003      	b.n	8001c40 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d002      	beq.n	8001c4e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001c4e:	bf00      	nop
 8001c50:	3714      	adds	r7, #20
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	20000d60 	.word	0x20000d60
 8001c60:	20000d68 	.word	0x20000d68

08001c64 <ST7735_Reset>:


}

static void ST7735_Reset()
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  TFT_RES_L();
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2110      	movs	r1, #16
 8001c6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c70:	f003 fce0 	bl	8005634 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 8001c74:	2014      	movs	r0, #20
 8001c76:	f001 ff1b 	bl	8003ab0 <HAL_Delay>
  TFT_RES_H();
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	2110      	movs	r1, #16
 8001c7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c82:	f003 fcd7 	bl	8005634 <HAL_GPIO_WritePin>
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
  TFT_DC_C();
 8001c96:	2200      	movs	r2, #0
 8001c98:	2104      	movs	r1, #4
 8001c9a:	4806      	ldr	r0, [pc, #24]	; (8001cb4 <ST7735_WriteCommand+0x28>)
 8001c9c:	f003 fcca 	bl	8005634 <HAL_GPIO_WritePin>
#ifdef USE_SPI_DMA
  HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, &cmd, sizeof(cmd));
 8001ca0:	1dfb      	adds	r3, r7, #7
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4804      	ldr	r0, [pc, #16]	; (8001cb8 <ST7735_WriteCommand+0x2c>)
 8001ca8:	f006 fe50 	bl	800894c <HAL_SPI_Transmit_DMA>
  //while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
#else
  HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
#endif
}
 8001cac:	bf00      	nop
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	48000400 	.word	0x48000400
 8001cb8:	20000f28 	.word	0x20000f28

08001cbc <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  TFT_DC_D();
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	2104      	movs	r1, #4
 8001cca:	480b      	ldr	r0, [pc, #44]	; (8001cf8 <ST7735_WriteData+0x3c>)
 8001ccc:	f003 fcb2 	bl	8005634 <HAL_GPIO_WritePin>
#ifdef USE_SPI_DMA
  HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, buff, buff_size);
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	4808      	ldr	r0, [pc, #32]	; (8001cfc <ST7735_WriteData+0x40>)
 8001cda:	f006 fe37 	bl	800894c <HAL_SPI_Transmit_DMA>
  while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
 8001cde:	bf00      	nop
 8001ce0:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <ST7735_WriteData+0x40>)
 8001ce2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b03      	cmp	r3, #3
 8001cea:	d0f9      	beq.n	8001ce0 <ST7735_WriteData+0x24>

#else
  HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
#endif
}
 8001cec:	bf00      	nop
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	48000400 	.word	0x48000400
 8001cfc:	20000f28 	.word	0x20000f28

08001d00 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	1c5a      	adds	r2, r3, #1
 8001d0c:	607a      	str	r2, [r7, #4]
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	73fb      	strb	r3, [r7, #15]
    while(numCommands--)
 8001d12:	e034      	b.n	8001d7e <ST7735_ExecuteCommandList+0x7e>
    {
      uint8_t cmd = *addr++;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	1c5a      	adds	r2, r3, #1
 8001d18:	607a      	str	r2, [r7, #4]
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8001d1e:	7afb      	ldrb	r3, [r7, #11]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ffb3 	bl	8001c8c <ST7735_WriteCommand>

        numArgs = *addr++;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	1c5a      	adds	r2, r3, #1
 8001d2a:	607a      	str	r2, [r7, #4]
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8001d30:	7abb      	ldrb	r3, [r7, #10]
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d38:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8001d3a:	7abb      	ldrb	r3, [r7, #10]
 8001d3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d40:	72bb      	strb	r3, [r7, #10]
        if(numArgs)
 8001d42:	7abb      	ldrb	r3, [r7, #10]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d008      	beq.n	8001d5a <ST7735_ExecuteCommandList+0x5a>
        {
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8001d48:	7abb      	ldrb	r3, [r7, #10]
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7ff ffb5 	bl	8001cbc <ST7735_WriteData>
            addr += numArgs;
 8001d52:	7abb      	ldrb	r3, [r7, #10]
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	4413      	add	r3, r2
 8001d58:	607b      	str	r3, [r7, #4]
        }

        if(ms)
 8001d5a:	89bb      	ldrh	r3, [r7, #12]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00e      	beq.n	8001d7e <ST7735_ExecuteCommandList+0x7e>
        {
            ms = *addr++;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	1c5a      	adds	r2, r3, #1
 8001d64:	607a      	str	r2, [r7, #4]
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8001d6a:	89bb      	ldrh	r3, [r7, #12]
 8001d6c:	2bff      	cmp	r3, #255	; 0xff
 8001d6e:	d102      	bne.n	8001d76 <ST7735_ExecuteCommandList+0x76>
 8001d70:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001d74:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8001d76:	89bb      	ldrh	r3, [r7, #12]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f001 fe99 	bl	8003ab0 <HAL_Delay>
    while(numCommands--)
 8001d7e:	7bfb      	ldrb	r3, [r7, #15]
 8001d80:	1e5a      	subs	r2, r3, #1
 8001d82:	73fa      	strb	r2, [r7, #15]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1c5      	bne.n	8001d14 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8001d88:	bf00      	nop
 8001d8a:	bf00      	nop
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8001d94:	b590      	push	{r4, r7, lr}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4604      	mov	r4, r0
 8001d9c:	4608      	mov	r0, r1
 8001d9e:	4611      	mov	r1, r2
 8001da0:	461a      	mov	r2, r3
 8001da2:	4623      	mov	r3, r4
 8001da4:	71fb      	strb	r3, [r7, #7]
 8001da6:	4603      	mov	r3, r0
 8001da8:	71bb      	strb	r3, [r7, #6]
 8001daa:	460b      	mov	r3, r1
 8001dac:	717b      	strb	r3, [r7, #5]
 8001dae:	4613      	mov	r3, r2
 8001db0:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001db2:	202a      	movs	r0, #42	; 0x2a
 8001db4:	f7ff ff6a 	bl	8001c8c <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8001db8:	2300      	movs	r3, #0
 8001dba:	733b      	strb	r3, [r7, #12]
 8001dbc:	4b17      	ldr	r3, [pc, #92]	; (8001e1c <ST7735_SetAddressWindow+0x88>)
 8001dbe:	781a      	ldrb	r2, [r3, #0]
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	737b      	strb	r3, [r7, #13]
 8001dc8:	2300      	movs	r3, #0
 8001dca:	73bb      	strb	r3, [r7, #14]
 8001dcc:	4b13      	ldr	r3, [pc, #76]	; (8001e1c <ST7735_SetAddressWindow+0x88>)
 8001dce:	781a      	ldrb	r2, [r3, #0]
 8001dd0:	797b      	ldrb	r3, [r7, #5]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001dd8:	f107 030c 	add.w	r3, r7, #12
 8001ddc:	2104      	movs	r1, #4
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff ff6c 	bl	8001cbc <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001de4:	202b      	movs	r0, #43	; 0x2b
 8001de6:	f7ff ff51 	bl	8001c8c <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8001dea:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <ST7735_SetAddressWindow+0x8c>)
 8001dec:	781a      	ldrb	r2, [r3, #0]
 8001dee:	79bb      	ldrb	r3, [r7, #6]
 8001df0:	4413      	add	r3, r2
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8001df6:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <ST7735_SetAddressWindow+0x8c>)
 8001df8:	781a      	ldrb	r2, [r3, #0]
 8001dfa:	793b      	ldrb	r3, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001e02:	f107 030c 	add.w	r3, r7, #12
 8001e06:	2104      	movs	r1, #4
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff ff57 	bl	8001cbc <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001e0e:	202c      	movs	r0, #44	; 0x2c
 8001e10:	f7ff ff3c 	bl	8001c8c <ST7735_WriteCommand>
}
 8001e14:	bf00      	nop
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd90      	pop	{r4, r7, pc}
 8001e1c:	20000014 	.word	0x20000014
 8001e20:	20000015 	.word	0x20000015

08001e24 <ST7735_WriteChar>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001e24:	b082      	sub	sp, #8
 8001e26:	b590      	push	{r4, r7, lr}
 8001e28:	b089      	sub	sp, #36	; 0x24
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8001e2e:	4603      	mov	r3, r0
 8001e30:	80fb      	strh	r3, [r7, #6]
 8001e32:	460b      	mov	r3, r1
 8001e34:	80bb      	strh	r3, [r7, #4]
 8001e36:	4613      	mov	r3, r2
 8001e38:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8001e3a:	88fb      	ldrh	r3, [r7, #6]
 8001e3c:	b2d8      	uxtb	r0, r3
 8001e3e:	88bb      	ldrh	r3, [r7, #4]
 8001e40:	b2d9      	uxtb	r1, r3
 8001e42:	88fb      	ldrh	r3, [r7, #6]
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001e4a:	4413      	add	r3, r2
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	b2dc      	uxtb	r4, r3
 8001e52:	88bb      	ldrh	r3, [r7, #4]
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001e5a:	4413      	add	r3, r2
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	4622      	mov	r2, r4
 8001e64:	f7ff ff96 	bl	8001d94 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++)
 8001e68:	2300      	movs	r3, #0
 8001e6a:	61fb      	str	r3, [r7, #28]
 8001e6c:	e043      	b.n	8001ef6 <ST7735_WriteChar+0xd2>
    {
        b = font.data[(ch - 32) * font.height + i];
 8001e6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e70:	78fb      	ldrb	r3, [r7, #3]
 8001e72:	3b20      	subs	r3, #32
 8001e74:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8001e78:	fb01 f303 	mul.w	r3, r1, r3
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	440b      	add	r3, r1
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	4413      	add	r3, r2
 8001e86:	881b      	ldrh	r3, [r3, #0]
 8001e88:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++)
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61bb      	str	r3, [r7, #24]
 8001e8e:	e029      	b.n	8001ee4 <ST7735_WriteChar+0xc0>
        {
            if((b << j) & 0x8000)
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d00e      	beq.n	8001ebe <ST7735_WriteChar+0x9a>
            {
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001ea0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001ea2:	0a1b      	lsrs	r3, r3, #8
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	743b      	strb	r3, [r7, #16]
 8001eaa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8001eb0:	f107 0310 	add.w	r3, r7, #16
 8001eb4:	2102      	movs	r1, #2
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff ff00 	bl	8001cbc <ST7735_WriteData>
 8001ebc:	e00f      	b.n	8001ede <ST7735_WriteChar+0xba>
            }
            else
            {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001ebe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001ec2:	0a1b      	lsrs	r3, r3, #8
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	733b      	strb	r3, [r7, #12]
 8001eca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8001ed2:	f107 030c 	add.w	r3, r7, #12
 8001ed6:	2102      	movs	r1, #2
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff feef 	bl	8001cbc <ST7735_WriteData>
        for(j = 0; j < font.width; j++)
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	61bb      	str	r3, [r7, #24]
 8001ee4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001ee8:	461a      	mov	r2, r3
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d3cf      	bcc.n	8001e90 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++)
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	61fb      	str	r3, [r7, #28]
 8001ef6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001efa:	461a      	mov	r2, r3
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d3b5      	bcc.n	8001e6e <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8001f02:	bf00      	nop
 8001f04:	bf00      	nop
 8001f06:	3724      	adds	r7, #36	; 0x24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001f0e:	b002      	add	sp, #8
 8001f10:	4770      	bx	lr
	...

08001f14 <ST7735_Init>:

void ST7735_Init()
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  //ST7735_GPIO_Init();
    TFT_CS_L();
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2104      	movs	r1, #4
 8001f1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f20:	f003 fb88 	bl	8005634 <HAL_GPIO_WritePin>

    ST7735_Reset();
 8001f24:	f7ff fe9e 	bl	8001c64 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8001f28:	4808      	ldr	r0, [pc, #32]	; (8001f4c <ST7735_Init+0x38>)
 8001f2a:	f7ff fee9 	bl	8001d00 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8001f2e:	4808      	ldr	r0, [pc, #32]	; (8001f50 <ST7735_Init+0x3c>)
 8001f30:	f7ff fee6 	bl	8001d00 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8001f34:	4807      	ldr	r0, [pc, #28]	; (8001f54 <ST7735_Init+0x40>)
 8001f36:	f7ff fee3 	bl	8001d00 <ST7735_ExecuteCommandList>
    TFT_CS_H();
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	2104      	movs	r1, #4
 8001f3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f42:	f003 fb77 	bl	8005634 <HAL_GPIO_WritePin>
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	0800b26c 	.word	0x0800b26c
 8001f50:	0800b2a8 	.word	0x0800b2a8
 8001f54:	0800b2b8 	.word	0x0800b2b8

08001f58 <ST7735_DrawString>:

    TFT_CS_H();
}

void ST7735_DrawString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001f58:	b082      	sub	sp, #8
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b086      	sub	sp, #24
 8001f5e:	af04      	add	r7, sp, #16
 8001f60:	603a      	str	r2, [r7, #0]
 8001f62:	617b      	str	r3, [r7, #20]
 8001f64:	4603      	mov	r3, r0
 8001f66:	80fb      	strh	r3, [r7, #6]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	80bb      	strh	r3, [r7, #4]
  TFT_CS_L();
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	2104      	movs	r1, #4
 8001f70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f74:	f003 fb5e 	bl	8005634 <HAL_GPIO_WritePin>

    while(*str)
 8001f78:	e033      	b.n	8001fe2 <ST7735_DrawString+0x8a>
    {
        if(x + font.width >= _width)
 8001f7a:	88fb      	ldrh	r3, [r7, #6]
 8001f7c:	7d3a      	ldrb	r2, [r7, #20]
 8001f7e:	4413      	add	r3, r2
 8001f80:	4a21      	ldr	r2, [pc, #132]	; (8002008 <ST7735_DrawString+0xb0>)
 8001f82:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001f86:	4293      	cmp	r3, r2
 8001f88:	db16      	blt.n	8001fb8 <ST7735_DrawString+0x60>
        {
            x = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8001f8e:	7d7b      	ldrb	r3, [r7, #21]
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	88bb      	ldrh	r3, [r7, #4]
 8001f94:	4413      	add	r3, r2
 8001f96:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height)
 8001f98:	88bb      	ldrh	r3, [r7, #4]
 8001f9a:	7d7a      	ldrb	r2, [r7, #21]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	4a1b      	ldr	r2, [pc, #108]	; (800200c <ST7735_DrawString+0xb4>)
 8001fa0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	da21      	bge.n	8001fec <ST7735_DrawString+0x94>
            {
                break;
            }

            if(*str == ' ')
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	2b20      	cmp	r3, #32
 8001fae:	d103      	bne.n	8001fb8 <ST7735_DrawString+0x60>
            {
                // skip spaces in the beginning of the new line
                str++;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	603b      	str	r3, [r7, #0]
                continue;
 8001fb6:	e014      	b.n	8001fe2 <ST7735_DrawString+0x8a>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	781a      	ldrb	r2, [r3, #0]
 8001fbc:	88b9      	ldrh	r1, [r7, #4]
 8001fbe:	88f8      	ldrh	r0, [r7, #6]
 8001fc0:	8c3b      	ldrh	r3, [r7, #32]
 8001fc2:	9302      	str	r3, [sp, #8]
 8001fc4:	8bbb      	ldrh	r3, [r7, #28]
 8001fc6:	9301      	str	r3, [sp, #4]
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	9300      	str	r3, [sp, #0]
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	f7ff ff29 	bl	8001e24 <ST7735_WriteChar>
        x += font.width;
 8001fd2:	7d3b      	ldrb	r3, [r7, #20]
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	88fb      	ldrh	r3, [r7, #6]
 8001fd8:	4413      	add	r3, r2
 8001fda:	80fb      	strh	r3, [r7, #6]
        str++;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	603b      	str	r3, [r7, #0]
    while(*str)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1c7      	bne.n	8001f7a <ST7735_DrawString+0x22>
 8001fea:	e000      	b.n	8001fee <ST7735_DrawString+0x96>
                break;
 8001fec:	bf00      	nop
    }
    TFT_CS_H();
 8001fee:	2201      	movs	r2, #1
 8001ff0:	2104      	movs	r1, #4
 8001ff2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ff6:	f003 fb1d 	bl	8005634 <HAL_GPIO_WritePin>
}
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002004:	b002      	add	sp, #8
 8002006:	4770      	bx	lr
 8002008:	20000012 	.word	0x20000012
 800200c:	20000010 	.word	0x20000010

08002010 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8002010:	b590      	push	{r4, r7, lr}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	4604      	mov	r4, r0
 8002018:	4608      	mov	r0, r1
 800201a:	4611      	mov	r1, r2
 800201c:	461a      	mov	r2, r3
 800201e:	4623      	mov	r3, r4
 8002020:	80fb      	strh	r3, [r7, #6]
 8002022:	4603      	mov	r3, r0
 8002024:	80bb      	strh	r3, [r7, #4]
 8002026:	460b      	mov	r3, r1
 8002028:	807b      	strh	r3, [r7, #2]
 800202a:	4613      	mov	r3, r2
 800202c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= _width) || (y >= _height)) return;
 800202e:	88fb      	ldrh	r3, [r7, #6]
 8002030:	4a3b      	ldr	r2, [pc, #236]	; (8002120 <ST7735_FillRectangle+0x110>)
 8002032:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002036:	4293      	cmp	r3, r2
 8002038:	da6d      	bge.n	8002116 <ST7735_FillRectangle+0x106>
 800203a:	88bb      	ldrh	r3, [r7, #4]
 800203c:	4a39      	ldr	r2, [pc, #228]	; (8002124 <ST7735_FillRectangle+0x114>)
 800203e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002042:	4293      	cmp	r3, r2
 8002044:	da67      	bge.n	8002116 <ST7735_FillRectangle+0x106>
    if((x + w - 1) >= _width) w = _width - x;
 8002046:	88fa      	ldrh	r2, [r7, #6]
 8002048:	887b      	ldrh	r3, [r7, #2]
 800204a:	4413      	add	r3, r2
 800204c:	4a34      	ldr	r2, [pc, #208]	; (8002120 <ST7735_FillRectangle+0x110>)
 800204e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002052:	4293      	cmp	r3, r2
 8002054:	dd06      	ble.n	8002064 <ST7735_FillRectangle+0x54>
 8002056:	4b32      	ldr	r3, [pc, #200]	; (8002120 <ST7735_FillRectangle+0x110>)
 8002058:	f9b3 3000 	ldrsh.w	r3, [r3]
 800205c:	b29a      	uxth	r2, r3
 800205e:	88fb      	ldrh	r3, [r7, #6]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8002064:	88ba      	ldrh	r2, [r7, #4]
 8002066:	883b      	ldrh	r3, [r7, #0]
 8002068:	4413      	add	r3, r2
 800206a:	4a2e      	ldr	r2, [pc, #184]	; (8002124 <ST7735_FillRectangle+0x114>)
 800206c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002070:	4293      	cmp	r3, r2
 8002072:	dd06      	ble.n	8002082 <ST7735_FillRectangle+0x72>
 8002074:	4b2b      	ldr	r3, [pc, #172]	; (8002124 <ST7735_FillRectangle+0x114>)
 8002076:	f9b3 3000 	ldrsh.w	r3, [r3]
 800207a:	b29a      	uxth	r2, r3
 800207c:	88bb      	ldrh	r3, [r7, #4]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	803b      	strh	r3, [r7, #0]

    TFT_CS_L();
 8002082:	2200      	movs	r2, #0
 8002084:	2104      	movs	r1, #4
 8002086:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800208a:	f003 fad3 	bl	8005634 <HAL_GPIO_WritePin>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800208e:	88fb      	ldrh	r3, [r7, #6]
 8002090:	b2d8      	uxtb	r0, r3
 8002092:	88bb      	ldrh	r3, [r7, #4]
 8002094:	b2d9      	uxtb	r1, r3
 8002096:	88fb      	ldrh	r3, [r7, #6]
 8002098:	b2da      	uxtb	r2, r3
 800209a:	887b      	ldrh	r3, [r7, #2]
 800209c:	b2db      	uxtb	r3, r3
 800209e:	4413      	add	r3, r2
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	3b01      	subs	r3, #1
 80020a4:	b2dc      	uxtb	r4, r3
 80020a6:	88bb      	ldrh	r3, [r7, #4]
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	883b      	ldrh	r3, [r7, #0]
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	4413      	add	r3, r2
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	3b01      	subs	r3, #1
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	4622      	mov	r2, r4
 80020b8:	f7ff fe6c 	bl	8001d94 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80020bc:	8c3b      	ldrh	r3, [r7, #32]
 80020be:	0a1b      	lsrs	r3, r3, #8
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	733b      	strb	r3, [r7, #12]
 80020c6:	8c3b      	ldrh	r3, [r7, #32]
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	737b      	strb	r3, [r7, #13]
    TFT_DC_D();
 80020cc:	2201      	movs	r2, #1
 80020ce:	2104      	movs	r1, #4
 80020d0:	4815      	ldr	r0, [pc, #84]	; (8002128 <ST7735_FillRectangle+0x118>)
 80020d2:	f003 faaf 	bl	8005634 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 80020d6:	883b      	ldrh	r3, [r7, #0]
 80020d8:	80bb      	strh	r3, [r7, #4]
 80020da:	e012      	b.n	8002102 <ST7735_FillRectangle+0xf2>
    {
        for(x = w; x > 0; x--)
 80020dc:	887b      	ldrh	r3, [r7, #2]
 80020de:	80fb      	strh	r3, [r7, #6]
 80020e0:	e009      	b.n	80020f6 <ST7735_FillRectangle+0xe6>
        {
#ifdef USE_SPI_DMA
          HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, data, sizeof(data));
 80020e2:	f107 030c 	add.w	r3, r7, #12
 80020e6:	2202      	movs	r2, #2
 80020e8:	4619      	mov	r1, r3
 80020ea:	4810      	ldr	r0, [pc, #64]	; (800212c <ST7735_FillRectangle+0x11c>)
 80020ec:	f006 fc2e 	bl	800894c <HAL_SPI_Transmit_DMA>
        for(x = w; x > 0; x--)
 80020f0:	88fb      	ldrh	r3, [r7, #6]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	80fb      	strh	r3, [r7, #6]
 80020f6:	88fb      	ldrh	r3, [r7, #6]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1f2      	bne.n	80020e2 <ST7735_FillRectangle+0xd2>
    for(y = h; y > 0; y--)
 80020fc:	88bb      	ldrh	r3, [r7, #4]
 80020fe:	3b01      	subs	r3, #1
 8002100:	80bb      	strh	r3, [r7, #4]
 8002102:	88bb      	ldrh	r3, [r7, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1e9      	bne.n	80020dc <ST7735_FillRectangle+0xcc>
#else
          HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
#endif
        }
    }
    TFT_CS_H();
 8002108:	2201      	movs	r2, #1
 800210a:	2104      	movs	r1, #4
 800210c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002110:	f003 fa90 	bl	8005634 <HAL_GPIO_WritePin>
 8002114:	e000      	b.n	8002118 <ST7735_FillRectangle+0x108>
    if((x >= _width) || (y >= _height)) return;
 8002116:	bf00      	nop
}
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	bd90      	pop	{r4, r7, pc}
 800211e:	bf00      	nop
 8002120:	20000012 	.word	0x20000012
 8002124:	20000010 	.word	0x20000010
 8002128:	48000400 	.word	0x48000400
 800212c:	20000f28 	.word	0x20000f28

08002130 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af02      	add	r7, sp, #8
 8002136:	4603      	mov	r3, r0
 8002138:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, _width, _height, color);
 800213a:	4b09      	ldr	r3, [pc, #36]	; (8002160 <ST7735_FillScreen+0x30>)
 800213c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002140:	b29a      	uxth	r2, r3
 8002142:	4b08      	ldr	r3, [pc, #32]	; (8002164 <ST7735_FillScreen+0x34>)
 8002144:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002148:	b299      	uxth	r1, r3
 800214a:	88fb      	ldrh	r3, [r7, #6]
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	460b      	mov	r3, r1
 8002150:	2100      	movs	r1, #0
 8002152:	2000      	movs	r0, #0
 8002154:	f7ff ff5c 	bl	8002010 <ST7735_FillRectangle>
}
 8002158:	bf00      	nop
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	20000012 	.word	0x20000012
 8002164:	20000010 	.word	0x20000010

08002168 <ST7735_Backlight_On>:
    ST7735_WriteCommand(invert ? ST7735_INVON : ST7735_INVOFF);
    TFT_CS_H();
}

void ST7735_Backlight_On(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  TFT_BL_H();
 800216c:	2201      	movs	r2, #1
 800216e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002172:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002176:	f003 fa5d 	bl	8005634 <HAL_GPIO_WritePin>
}
 800217a:	bf00      	nop
 800217c:	bd80      	pop	{r7, pc}
	...

08002180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002180:	b5b0      	push	{r4, r5, r7, lr}
 8002182:	b08e      	sub	sp, #56	; 0x38
 8002184:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
BaseType_t flag;
BaseType_t flag_uart;
BaseType_t flag_tempSensor;
BaseType_t flag_lcd;
char msg_lcd2[] = "Hello World - Display on SPI TFT LCD!\n";
 8002186:	4b35      	ldr	r3, [pc, #212]	; (800225c <main+0xdc>)
 8002188:	463c      	mov	r4, r7
 800218a:	461d      	mov	r5, r3
 800218c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800218e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002190:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002192:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002194:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002198:	6020      	str	r0, [r4, #0]
 800219a:	3404      	adds	r4, #4
 800219c:	8021      	strh	r1, [r4, #0]
 800219e:	3402      	adds	r4, #2
 80021a0:	0c0b      	lsrs	r3, r1, #16
 80021a2:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021a4:	f001 fc4b 	bl	8003a3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021a8:	f000 f86e 	bl	8002288 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80021ac:	f000 f8ca 	bl	8002344 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021b0:	f000 fc46 	bl	8002a40 <MX_GPIO_Init>
  MX_DMA_Init();
 80021b4:	f000 fc1a 	bl	80029ec <MX_DMA_Init>
  MX_ADC1_Init();
 80021b8:	f000 f8f4 	bl	80023a4 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 80021bc:	f000 f956 	bl	800246c <MX_DFSDM1_Init>
  MX_I2C1_Init();
 80021c0:	f000 f98c 	bl	80024dc <MX_I2C1_Init>
  MX_I2C2_Init();
 80021c4:	f000 f9c8 	bl	8002558 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 80021c8:	f000 fa04 	bl	80025d4 <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 80021cc:	f000 fa58 	bl	8002680 <MX_SPI1_Init>
  MX_SPI3_Init();
 80021d0:	f000 fa94 	bl	80026fc <MX_SPI3_Init>
  MX_UART4_Init();
 80021d4:	f000 fad0 	bl	8002778 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80021d8:	f000 fb1a 	bl	8002810 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80021dc:	f000 fb64 	bl	80028a8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80021e0:	f000 fbb0 	bl	8002944 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 80021e4:	f000 fbfa 	bl	80029dc <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
 MyLED2_init();
 80021e8:	f000 fd7c 	bl	8002ce4 <MyLED2_init>
 MyButton_init();
 80021ec:	f000 fdac 	bl	8002d48 <MyButton_init>
 MyUART1_init();
 80021f0:	f000 fdf2 	bl	8002dd8 <MyUART1_init>
 //BSP_TSENSOR_Init();
 //ST7735_Init();

 HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), 1000);
 80021f4:	481a      	ldr	r0, [pc, #104]	; (8002260 <main+0xe0>)
 80021f6:	f7fe f803 	bl	8000200 <strlen>
 80021fa:	4603      	mov	r3, r0
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002202:	4917      	ldr	r1, [pc, #92]	; (8002260 <main+0xe0>)
 8002204:	4817      	ldr	r0, [pc, #92]	; (8002264 <main+0xe4>)
 8002206:	f007 f999 	bl	800953c <HAL_UART_Transmit>

 flag = xTaskCreate(SOS_Transmit, "SOS_Transmit", 200, (void *) 300, 3, &pSOS_Transmit);
 800220a:	4b17      	ldr	r3, [pc, #92]	; (8002268 <main+0xe8>)
 800220c:	9301      	str	r3, [sp, #4]
 800220e:	2303      	movs	r3, #3
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002216:	22c8      	movs	r2, #200	; 0xc8
 8002218:	4914      	ldr	r1, [pc, #80]	; (800226c <main+0xec>)
 800221a:	4815      	ldr	r0, [pc, #84]	; (8002270 <main+0xf0>)
 800221c:	f7fe fa06 	bl	800062c <xTaskCreate>
 8002220:	62f8      	str	r0, [r7, #44]	; 0x2c
 if(flag!=pdPASS)
 8002222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002224:	2b01      	cmp	r3, #1
 8002226:	d001      	beq.n	800222c <main+0xac>
 {
	 Error_Handler();
 8002228:	f000 ff1e 	bl	8003068 <Error_Handler>
 }
 LastWakeTime=xTaskGetTickCount();
 800222c:	f7fe fce6 	bl	8000bfc <xTaskGetTickCount>
 8002230:	4603      	mov	r3, r0
 8002232:	4a10      	ldr	r2, [pc, #64]	; (8002274 <main+0xf4>)
 8002234:	6013      	str	r3, [r2, #0]
 if(flag_tempSensor!=pdPASS)
  {
 	 Error_Handler();
  }*/

 flag_lcd = xTaskCreate(LCDDisplay, "LCDDisplay", 200, "\r\nDisplaying on LCD!!!\r\n", 3, &pLCDDisplay);
 8002236:	4b10      	ldr	r3, [pc, #64]	; (8002278 <main+0xf8>)
 8002238:	9301      	str	r3, [sp, #4]
 800223a:	2303      	movs	r3, #3
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	4b0f      	ldr	r3, [pc, #60]	; (800227c <main+0xfc>)
 8002240:	22c8      	movs	r2, #200	; 0xc8
 8002242:	490f      	ldr	r1, [pc, #60]	; (8002280 <main+0x100>)
 8002244:	480f      	ldr	r0, [pc, #60]	; (8002284 <main+0x104>)
 8002246:	f7fe f9f1 	bl	800062c <xTaskCreate>
 800224a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(flag_lcd!=pdPASS)
 800224c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224e:	2b01      	cmp	r3, #1
 8002250:	d001      	beq.n	8002256 <main+0xd6>
   {
  	 Error_Handler();
 8002252:	f000 ff09 	bl	8003068 <Error_Handler>
   }
 //start Scheduler
 vTaskStartScheduler();
 8002256:	f7fe fb7b 	bl	8000950 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800225a:	e7fe      	b.n	800225a <main+0xda>
 800225c:	0800aa84 	.word	0x0800aa84
 8002260:	20000018 	.word	0x20000018
 8002264:	200010e4 	.word	0x200010e4
 8002268:	20000d7c 	.word	0x20000d7c
 800226c:	0800aa4c 	.word	0x0800aa4c
 8002270:	08002e99 	.word	0x08002e99
 8002274:	20000d80 	.word	0x20000d80
 8002278:	20000d8c 	.word	0x20000d8c
 800227c:	0800aa5c 	.word	0x0800aa5c
 8002280:	0800aa78 	.word	0x0800aa78
 8002284:	08002f85 	.word	0x08002f85

08002288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b096      	sub	sp, #88	; 0x58
 800228c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800228e:	f107 0314 	add.w	r3, r7, #20
 8002292:	2244      	movs	r2, #68	; 0x44
 8002294:	2100      	movs	r1, #0
 8002296:	4618      	mov	r0, r3
 8002298:	f008 fb9c 	bl	800a9d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800229c:	463b      	mov	r3, r7
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	605a      	str	r2, [r3, #4]
 80022a4:	609a      	str	r2, [r3, #8]
 80022a6:	60da      	str	r2, [r3, #12]
 80022a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80022aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80022ae:	f004 fdd3 	bl	8006e58 <HAL_PWREx_ControlVoltageScaling>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80022b8:	f000 fed6 	bl	8003068 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80022bc:	f004 fd9c 	bl	8006df8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80022c0:	4b1f      	ldr	r3, [pc, #124]	; (8002340 <SystemClock_Config+0xb8>)
 80022c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c6:	4a1e      	ldr	r2, [pc, #120]	; (8002340 <SystemClock_Config+0xb8>)
 80022c8:	f023 0318 	bic.w	r3, r3, #24
 80022cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 80022d0:	2316      	movs	r3, #22
 80022d2:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80022d4:	2301      	movs	r3, #1
 80022d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022de:	2340      	movs	r3, #64	; 0x40
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80022e2:	2301      	movs	r3, #1
 80022e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80022ea:	2360      	movs	r3, #96	; 0x60
 80022ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80022ee:	2300      	movs	r3, #0
 80022f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022f2:	f107 0314 	add.w	r3, r7, #20
 80022f6:	4618      	mov	r0, r3
 80022f8:	f004 fe52 	bl	8006fa0 <HAL_RCC_OscConfig>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8002302:	f000 feb1 	bl	8003068 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002306:	230f      	movs	r3, #15
 8002308:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800230a:	2301      	movs	r3, #1
 800230c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800230e:	2300      	movs	r3, #0
 8002310:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002312:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8002316:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8002318:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800231c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800231e:	463b      	mov	r3, r7
 8002320:	2100      	movs	r1, #0
 8002322:	4618      	mov	r0, r3
 8002324:	f005 fa56 	bl	80077d4 <HAL_RCC_ClockConfig>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800232e:	f000 fe9b 	bl	8003068 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002332:	f006 f86f 	bl	8008414 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002336:	bf00      	nop
 8002338:	3758      	adds	r7, #88	; 0x58
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40021000 	.word	0x40021000

08002344 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b0a6      	sub	sp, #152	; 0x98
 8002348:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800234a:	1d3b      	adds	r3, r7, #4
 800234c:	2294      	movs	r2, #148	; 0x94
 800234e:	2100      	movs	r1, #0
 8002350:	4618      	mov	r0, r3
 8002352:	f008 fb3f 	bl	800a9d4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8002356:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800235a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800235c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002360:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002364:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002368:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800236a:	2301      	movs	r3, #1
 800236c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800236e:	2301      	movs	r3, #1
 8002370:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002372:	2318      	movs	r3, #24
 8002374:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8002376:	2302      	movs	r3, #2
 8002378:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800237a:	2302      	movs	r3, #2
 800237c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800237e:	2302      	movs	r3, #2
 8002380:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8002382:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8002386:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002388:	1d3b      	adds	r3, r7, #4
 800238a:	4618      	mov	r0, r3
 800238c:	f005 fd12 	bl	8007db4 <HAL_RCCEx_PeriphCLKConfig>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8002396:	f000 fe67 	bl	8003068 <Error_Handler>
  }
}
 800239a:	bf00      	nop
 800239c:	3798      	adds	r7, #152	; 0x98
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
	...

080023a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80023aa:	463b      	mov	r3, r7
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	611a      	str	r2, [r3, #16]
 80023b8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80023ba:	4b29      	ldr	r3, [pc, #164]	; (8002460 <MX_ADC1_Init+0xbc>)
 80023bc:	4a29      	ldr	r2, [pc, #164]	; (8002464 <MX_ADC1_Init+0xc0>)
 80023be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80023c0:	4b27      	ldr	r3, [pc, #156]	; (8002460 <MX_ADC1_Init+0xbc>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80023c6:	4b26      	ldr	r3, [pc, #152]	; (8002460 <MX_ADC1_Init+0xbc>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023cc:	4b24      	ldr	r3, [pc, #144]	; (8002460 <MX_ADC1_Init+0xbc>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80023d2:	4b23      	ldr	r3, [pc, #140]	; (8002460 <MX_ADC1_Init+0xbc>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80023d8:	4b21      	ldr	r3, [pc, #132]	; (8002460 <MX_ADC1_Init+0xbc>)
 80023da:	2204      	movs	r2, #4
 80023dc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80023de:	4b20      	ldr	r3, [pc, #128]	; (8002460 <MX_ADC1_Init+0xbc>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80023e4:	4b1e      	ldr	r3, [pc, #120]	; (8002460 <MX_ADC1_Init+0xbc>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80023ea:	4b1d      	ldr	r3, [pc, #116]	; (8002460 <MX_ADC1_Init+0xbc>)
 80023ec:	2201      	movs	r2, #1
 80023ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80023f0:	4b1b      	ldr	r3, [pc, #108]	; (8002460 <MX_ADC1_Init+0xbc>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023f8:	4b19      	ldr	r3, [pc, #100]	; (8002460 <MX_ADC1_Init+0xbc>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80023fe:	4b18      	ldr	r3, [pc, #96]	; (8002460 <MX_ADC1_Init+0xbc>)
 8002400:	2200      	movs	r2, #0
 8002402:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002404:	4b16      	ldr	r3, [pc, #88]	; (8002460 <MX_ADC1_Init+0xbc>)
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800240c:	4b14      	ldr	r3, [pc, #80]	; (8002460 <MX_ADC1_Init+0xbc>)
 800240e:	2200      	movs	r2, #0
 8002410:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002412:	4b13      	ldr	r3, [pc, #76]	; (8002460 <MX_ADC1_Init+0xbc>)
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800241a:	4811      	ldr	r0, [pc, #68]	; (8002460 <MX_ADC1_Init+0xbc>)
 800241c:	f001 fd0c 	bl	8003e38 <HAL_ADC_Init>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8002426:	f000 fe1f 	bl	8003068 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800242a:	4b0f      	ldr	r3, [pc, #60]	; (8002468 <MX_ADC1_Init+0xc4>)
 800242c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800242e:	2306      	movs	r3, #6
 8002430:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002432:	2300      	movs	r3, #0
 8002434:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002436:	237f      	movs	r3, #127	; 0x7f
 8002438:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800243a:	2304      	movs	r3, #4
 800243c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002442:	463b      	mov	r3, r7
 8002444:	4619      	mov	r1, r3
 8002446:	4806      	ldr	r0, [pc, #24]	; (8002460 <MX_ADC1_Init+0xbc>)
 8002448:	f001 fe3c 	bl	80040c4 <HAL_ADC_ConfigChannel>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002452:	f000 fe09 	bl	8003068 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002456:	bf00      	nop
 8002458:	3718      	adds	r7, #24
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20000d90 	.word	0x20000d90
 8002464:	50040000 	.word	0x50040000
 8002468:	04300002 	.word	0x04300002

0800246c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8002470:	4b18      	ldr	r3, [pc, #96]	; (80024d4 <MX_DFSDM1_Init+0x68>)
 8002472:	4a19      	ldr	r2, [pc, #100]	; (80024d8 <MX_DFSDM1_Init+0x6c>)
 8002474:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8002476:	4b17      	ldr	r3, [pc, #92]	; (80024d4 <MX_DFSDM1_Init+0x68>)
 8002478:	2201      	movs	r2, #1
 800247a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800247c:	4b15      	ldr	r3, [pc, #84]	; (80024d4 <MX_DFSDM1_Init+0x68>)
 800247e:	2200      	movs	r2, #0
 8002480:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8002482:	4b14      	ldr	r3, [pc, #80]	; (80024d4 <MX_DFSDM1_Init+0x68>)
 8002484:	2202      	movs	r2, #2
 8002486:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8002488:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <MX_DFSDM1_Init+0x68>)
 800248a:	2200      	movs	r2, #0
 800248c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800248e:	4b11      	ldr	r3, [pc, #68]	; (80024d4 <MX_DFSDM1_Init+0x68>)
 8002490:	2200      	movs	r2, #0
 8002492:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8002494:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <MX_DFSDM1_Init+0x68>)
 8002496:	2200      	movs	r2, #0
 8002498:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800249a:	4b0e      	ldr	r3, [pc, #56]	; (80024d4 <MX_DFSDM1_Init+0x68>)
 800249c:	2200      	movs	r2, #0
 800249e:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80024a0:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <MX_DFSDM1_Init+0x68>)
 80024a2:	2204      	movs	r2, #4
 80024a4:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80024a6:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <MX_DFSDM1_Init+0x68>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80024ac:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <MX_DFSDM1_Init+0x68>)
 80024ae:	2201      	movs	r2, #1
 80024b0:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80024b2:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <MX_DFSDM1_Init+0x68>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80024b8:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <MX_DFSDM1_Init+0x68>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80024be:	4805      	ldr	r0, [pc, #20]	; (80024d4 <MX_DFSDM1_Init+0x68>)
 80024c0:	f002 fade 	bl	8004a80 <HAL_DFSDM_ChannelInit>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 80024ca:	f000 fdcd 	bl	8003068 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80024ce:	bf00      	nop
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	20000df8 	.word	0x20000df8
 80024d8:	40016040 	.word	0x40016040

080024dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80024e0:	4b1b      	ldr	r3, [pc, #108]	; (8002550 <MX_I2C1_Init+0x74>)
 80024e2:	4a1c      	ldr	r2, [pc, #112]	; (8002554 <MX_I2C1_Init+0x78>)
 80024e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80024e6:	4b1a      	ldr	r3, [pc, #104]	; (8002550 <MX_I2C1_Init+0x74>)
 80024e8:	f640 6214 	movw	r2, #3604	; 0xe14
 80024ec:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80024ee:	4b18      	ldr	r3, [pc, #96]	; (8002550 <MX_I2C1_Init+0x74>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024f4:	4b16      	ldr	r3, [pc, #88]	; (8002550 <MX_I2C1_Init+0x74>)
 80024f6:	2201      	movs	r2, #1
 80024f8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024fa:	4b15      	ldr	r3, [pc, #84]	; (8002550 <MX_I2C1_Init+0x74>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002500:	4b13      	ldr	r3, [pc, #76]	; (8002550 <MX_I2C1_Init+0x74>)
 8002502:	2200      	movs	r2, #0
 8002504:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002506:	4b12      	ldr	r3, [pc, #72]	; (8002550 <MX_I2C1_Init+0x74>)
 8002508:	2200      	movs	r2, #0
 800250a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800250c:	4b10      	ldr	r3, [pc, #64]	; (8002550 <MX_I2C1_Init+0x74>)
 800250e:	2200      	movs	r2, #0
 8002510:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002512:	4b0f      	ldr	r3, [pc, #60]	; (8002550 <MX_I2C1_Init+0x74>)
 8002514:	2200      	movs	r2, #0
 8002516:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002518:	480d      	ldr	r0, [pc, #52]	; (8002550 <MX_I2C1_Init+0x74>)
 800251a:	f003 f8bb 	bl	8005694 <HAL_I2C_Init>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002524:	f000 fda0 	bl	8003068 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002528:	2100      	movs	r1, #0
 800252a:	4809      	ldr	r0, [pc, #36]	; (8002550 <MX_I2C1_Init+0x74>)
 800252c:	f003 fef7 	bl	800631e <HAL_I2CEx_ConfigAnalogFilter>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002536:	f000 fd97 	bl	8003068 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800253a:	2100      	movs	r1, #0
 800253c:	4804      	ldr	r0, [pc, #16]	; (8002550 <MX_I2C1_Init+0x74>)
 800253e:	f003 ff39 	bl	80063b4 <HAL_I2CEx_ConfigDigitalFilter>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002548:	f000 fd8e 	bl	8003068 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800254c:	bf00      	nop
 800254e:	bd80      	pop	{r7, pc}
 8002550:	20000e30 	.word	0x20000e30
 8002554:	40005400 	.word	0x40005400

08002558 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800255c:	4b1b      	ldr	r3, [pc, #108]	; (80025cc <MX_I2C2_Init+0x74>)
 800255e:	4a1c      	ldr	r2, [pc, #112]	; (80025d0 <MX_I2C2_Init+0x78>)
 8002560:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8002562:	4b1a      	ldr	r3, [pc, #104]	; (80025cc <MX_I2C2_Init+0x74>)
 8002564:	f640 6214 	movw	r2, #3604	; 0xe14
 8002568:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800256a:	4b18      	ldr	r3, [pc, #96]	; (80025cc <MX_I2C2_Init+0x74>)
 800256c:	2200      	movs	r2, #0
 800256e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002570:	4b16      	ldr	r3, [pc, #88]	; (80025cc <MX_I2C2_Init+0x74>)
 8002572:	2201      	movs	r2, #1
 8002574:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002576:	4b15      	ldr	r3, [pc, #84]	; (80025cc <MX_I2C2_Init+0x74>)
 8002578:	2200      	movs	r2, #0
 800257a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800257c:	4b13      	ldr	r3, [pc, #76]	; (80025cc <MX_I2C2_Init+0x74>)
 800257e:	2200      	movs	r2, #0
 8002580:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002582:	4b12      	ldr	r3, [pc, #72]	; (80025cc <MX_I2C2_Init+0x74>)
 8002584:	2200      	movs	r2, #0
 8002586:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002588:	4b10      	ldr	r3, [pc, #64]	; (80025cc <MX_I2C2_Init+0x74>)
 800258a:	2200      	movs	r2, #0
 800258c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800258e:	4b0f      	ldr	r3, [pc, #60]	; (80025cc <MX_I2C2_Init+0x74>)
 8002590:	2200      	movs	r2, #0
 8002592:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002594:	480d      	ldr	r0, [pc, #52]	; (80025cc <MX_I2C2_Init+0x74>)
 8002596:	f003 f87d 	bl	8005694 <HAL_I2C_Init>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80025a0:	f000 fd62 	bl	8003068 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80025a4:	2100      	movs	r1, #0
 80025a6:	4809      	ldr	r0, [pc, #36]	; (80025cc <MX_I2C2_Init+0x74>)
 80025a8:	f003 feb9 	bl	800631e <HAL_I2CEx_ConfigAnalogFilter>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80025b2:	f000 fd59 	bl	8003068 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80025b6:	2100      	movs	r1, #0
 80025b8:	4804      	ldr	r0, [pc, #16]	; (80025cc <MX_I2C2_Init+0x74>)
 80025ba:	f003 fefb 	bl	80063b4 <HAL_I2CEx_ConfigDigitalFilter>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80025c4:	f000 fd50 	bl	8003068 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80025c8:	bf00      	nop
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	20000e84 	.word	0x20000e84
 80025d0:	40005800 	.word	0x40005800

080025d4 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 80025da:	1d3b      	adds	r3, r7, #4
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	605a      	str	r2, [r3, #4]
 80025e2:	609a      	str	r2, [r3, #8]
 80025e4:	60da      	str	r2, [r3, #12]
 80025e6:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80025e8:	4b23      	ldr	r3, [pc, #140]	; (8002678 <MX_OCTOSPI1_Init+0xa4>)
 80025ea:	4a24      	ldr	r2, [pc, #144]	; (800267c <MX_OCTOSPI1_Init+0xa8>)
 80025ec:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80025ee:	4b22      	ldr	r3, [pc, #136]	; (8002678 <MX_OCTOSPI1_Init+0xa4>)
 80025f0:	2201      	movs	r2, #1
 80025f2:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80025f4:	4b20      	ldr	r3, [pc, #128]	; (8002678 <MX_OCTOSPI1_Init+0xa4>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 80025fa:	4b1f      	ldr	r3, [pc, #124]	; (8002678 <MX_OCTOSPI1_Init+0xa4>)
 80025fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002600:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8002602:	4b1d      	ldr	r3, [pc, #116]	; (8002678 <MX_OCTOSPI1_Init+0xa4>)
 8002604:	2220      	movs	r2, #32
 8002606:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8002608:	4b1b      	ldr	r3, [pc, #108]	; (8002678 <MX_OCTOSPI1_Init+0xa4>)
 800260a:	2201      	movs	r2, #1
 800260c:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 800260e:	4b1a      	ldr	r3, [pc, #104]	; (8002678 <MX_OCTOSPI1_Init+0xa4>)
 8002610:	2200      	movs	r2, #0
 8002612:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8002614:	4b18      	ldr	r3, [pc, #96]	; (8002678 <MX_OCTOSPI1_Init+0xa4>)
 8002616:	2200      	movs	r2, #0
 8002618:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 800261a:	4b17      	ldr	r3, [pc, #92]	; (8002678 <MX_OCTOSPI1_Init+0xa4>)
 800261c:	2201      	movs	r2, #1
 800261e:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8002620:	4b15      	ldr	r3, [pc, #84]	; (8002678 <MX_OCTOSPI1_Init+0xa4>)
 8002622:	2200      	movs	r2, #0
 8002624:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8002626:	4b14      	ldr	r3, [pc, #80]	; (8002678 <MX_OCTOSPI1_Init+0xa4>)
 8002628:	2200      	movs	r2, #0
 800262a:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 800262c:	4b12      	ldr	r3, [pc, #72]	; (8002678 <MX_OCTOSPI1_Init+0xa4>)
 800262e:	2200      	movs	r2, #0
 8002630:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8002632:	4b11      	ldr	r3, [pc, #68]	; (8002678 <MX_OCTOSPI1_Init+0xa4>)
 8002634:	2208      	movs	r2, #8
 8002636:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8002638:	480f      	ldr	r0, [pc, #60]	; (8002678 <MX_OCTOSPI1_Init+0xa4>)
 800263a:	f003 ff07 	bl	800644c <HAL_OSPI_Init>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8002644:	f000 fd10 	bl	8003068 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8002648:	2301      	movs	r3, #1
 800264a:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 800264c:	2301      	movs	r3, #1
 800264e:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8002650:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002654:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002656:	1d3b      	adds	r3, r7, #4
 8002658:	f241 3288 	movw	r2, #5000	; 0x1388
 800265c:	4619      	mov	r1, r3
 800265e:	4806      	ldr	r0, [pc, #24]	; (8002678 <MX_OCTOSPI1_Init+0xa4>)
 8002660:	f003 ffae 	bl	80065c0 <HAL_OSPIM_Config>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 800266a:	f000 fcfd 	bl	8003068 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 800266e:	bf00      	nop
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20000ed8 	.word	0x20000ed8
 800267c:	a0001000 	.word	0xa0001000

08002680 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002684:	4b1b      	ldr	r3, [pc, #108]	; (80026f4 <MX_SPI1_Init+0x74>)
 8002686:	4a1c      	ldr	r2, [pc, #112]	; (80026f8 <MX_SPI1_Init+0x78>)
 8002688:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800268a:	4b1a      	ldr	r3, [pc, #104]	; (80026f4 <MX_SPI1_Init+0x74>)
 800268c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002690:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002692:	4b18      	ldr	r3, [pc, #96]	; (80026f4 <MX_SPI1_Init+0x74>)
 8002694:	2200      	movs	r2, #0
 8002696:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002698:	4b16      	ldr	r3, [pc, #88]	; (80026f4 <MX_SPI1_Init+0x74>)
 800269a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800269e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026a0:	4b14      	ldr	r3, [pc, #80]	; (80026f4 <MX_SPI1_Init+0x74>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026a6:	4b13      	ldr	r3, [pc, #76]	; (80026f4 <MX_SPI1_Init+0x74>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80026ac:	4b11      	ldr	r3, [pc, #68]	; (80026f4 <MX_SPI1_Init+0x74>)
 80026ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026b4:	4b0f      	ldr	r3, [pc, #60]	; (80026f4 <MX_SPI1_Init+0x74>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026ba:	4b0e      	ldr	r3, [pc, #56]	; (80026f4 <MX_SPI1_Init+0x74>)
 80026bc:	2200      	movs	r2, #0
 80026be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80026c0:	4b0c      	ldr	r3, [pc, #48]	; (80026f4 <MX_SPI1_Init+0x74>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026c6:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <MX_SPI1_Init+0x74>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80026cc:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <MX_SPI1_Init+0x74>)
 80026ce:	2207      	movs	r2, #7
 80026d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80026d2:	4b08      	ldr	r3, [pc, #32]	; (80026f4 <MX_SPI1_Init+0x74>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80026d8:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <MX_SPI1_Init+0x74>)
 80026da:	2208      	movs	r2, #8
 80026dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80026de:	4805      	ldr	r0, [pc, #20]	; (80026f4 <MX_SPI1_Init+0x74>)
 80026e0:	f006 f890 	bl	8008804 <HAL_SPI_Init>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80026ea:	f000 fcbd 	bl	8003068 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20000f28 	.word	0x20000f28
 80026f8:	40013000 	.word	0x40013000

080026fc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002700:	4b1b      	ldr	r3, [pc, #108]	; (8002770 <MX_SPI3_Init+0x74>)
 8002702:	4a1c      	ldr	r2, [pc, #112]	; (8002774 <MX_SPI3_Init+0x78>)
 8002704:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002706:	4b1a      	ldr	r3, [pc, #104]	; (8002770 <MX_SPI3_Init+0x74>)
 8002708:	f44f 7282 	mov.w	r2, #260	; 0x104
 800270c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800270e:	4b18      	ldr	r3, [pc, #96]	; (8002770 <MX_SPI3_Init+0x74>)
 8002710:	2200      	movs	r2, #0
 8002712:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8002714:	4b16      	ldr	r3, [pc, #88]	; (8002770 <MX_SPI3_Init+0x74>)
 8002716:	f44f 7240 	mov.w	r2, #768	; 0x300
 800271a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800271c:	4b14      	ldr	r3, [pc, #80]	; (8002770 <MX_SPI3_Init+0x74>)
 800271e:	2200      	movs	r2, #0
 8002720:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002722:	4b13      	ldr	r3, [pc, #76]	; (8002770 <MX_SPI3_Init+0x74>)
 8002724:	2200      	movs	r2, #0
 8002726:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002728:	4b11      	ldr	r3, [pc, #68]	; (8002770 <MX_SPI3_Init+0x74>)
 800272a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800272e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002730:	4b0f      	ldr	r3, [pc, #60]	; (8002770 <MX_SPI3_Init+0x74>)
 8002732:	2208      	movs	r2, #8
 8002734:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002736:	4b0e      	ldr	r3, [pc, #56]	; (8002770 <MX_SPI3_Init+0x74>)
 8002738:	2200      	movs	r2, #0
 800273a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800273c:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <MX_SPI3_Init+0x74>)
 800273e:	2200      	movs	r2, #0
 8002740:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002742:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <MX_SPI3_Init+0x74>)
 8002744:	2200      	movs	r2, #0
 8002746:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002748:	4b09      	ldr	r3, [pc, #36]	; (8002770 <MX_SPI3_Init+0x74>)
 800274a:	2207      	movs	r2, #7
 800274c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800274e:	4b08      	ldr	r3, [pc, #32]	; (8002770 <MX_SPI3_Init+0x74>)
 8002750:	2200      	movs	r2, #0
 8002752:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002754:	4b06      	ldr	r3, [pc, #24]	; (8002770 <MX_SPI3_Init+0x74>)
 8002756:	2208      	movs	r2, #8
 8002758:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800275a:	4805      	ldr	r0, [pc, #20]	; (8002770 <MX_SPI3_Init+0x74>)
 800275c:	f006 f852 	bl	8008804 <HAL_SPI_Init>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002766:	f000 fc7f 	bl	8003068 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20000f8c 	.word	0x20000f8c
 8002774:	40003c00 	.word	0x40003c00

08002778 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800277c:	4b22      	ldr	r3, [pc, #136]	; (8002808 <MX_UART4_Init+0x90>)
 800277e:	4a23      	ldr	r2, [pc, #140]	; (800280c <MX_UART4_Init+0x94>)
 8002780:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002782:	4b21      	ldr	r3, [pc, #132]	; (8002808 <MX_UART4_Init+0x90>)
 8002784:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002788:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800278a:	4b1f      	ldr	r3, [pc, #124]	; (8002808 <MX_UART4_Init+0x90>)
 800278c:	2200      	movs	r2, #0
 800278e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002790:	4b1d      	ldr	r3, [pc, #116]	; (8002808 <MX_UART4_Init+0x90>)
 8002792:	2200      	movs	r2, #0
 8002794:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002796:	4b1c      	ldr	r3, [pc, #112]	; (8002808 <MX_UART4_Init+0x90>)
 8002798:	2200      	movs	r2, #0
 800279a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800279c:	4b1a      	ldr	r3, [pc, #104]	; (8002808 <MX_UART4_Init+0x90>)
 800279e:	220c      	movs	r2, #12
 80027a0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027a2:	4b19      	ldr	r3, [pc, #100]	; (8002808 <MX_UART4_Init+0x90>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80027a8:	4b17      	ldr	r3, [pc, #92]	; (8002808 <MX_UART4_Init+0x90>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027ae:	4b16      	ldr	r3, [pc, #88]	; (8002808 <MX_UART4_Init+0x90>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80027b4:	4b14      	ldr	r3, [pc, #80]	; (8002808 <MX_UART4_Init+0x90>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027ba:	4b13      	ldr	r3, [pc, #76]	; (8002808 <MX_UART4_Init+0x90>)
 80027bc:	2200      	movs	r2, #0
 80027be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80027c0:	4811      	ldr	r0, [pc, #68]	; (8002808 <MX_UART4_Init+0x90>)
 80027c2:	f006 fe6b 	bl	800949c <HAL_UART_Init>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80027cc:	f000 fc4c 	bl	8003068 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027d0:	2100      	movs	r1, #0
 80027d2:	480d      	ldr	r0, [pc, #52]	; (8002808 <MX_UART4_Init+0x90>)
 80027d4:	f008 f833 	bl	800a83e <HAL_UARTEx_SetTxFifoThreshold>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80027de:	f000 fc43 	bl	8003068 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027e2:	2100      	movs	r1, #0
 80027e4:	4808      	ldr	r0, [pc, #32]	; (8002808 <MX_UART4_Init+0x90>)
 80027e6:	f008 f868 	bl	800a8ba <HAL_UARTEx_SetRxFifoThreshold>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80027f0:	f000 fc3a 	bl	8003068 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80027f4:	4804      	ldr	r0, [pc, #16]	; (8002808 <MX_UART4_Init+0x90>)
 80027f6:	f007 ffe9 	bl	800a7cc <HAL_UARTEx_DisableFifoMode>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002800:	f000 fc32 	bl	8003068 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002804:	bf00      	nop
 8002806:	bd80      	pop	{r7, pc}
 8002808:	20001050 	.word	0x20001050
 800280c:	40004c00 	.word	0x40004c00

08002810 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002814:	4b22      	ldr	r3, [pc, #136]	; (80028a0 <MX_USART1_UART_Init+0x90>)
 8002816:	4a23      	ldr	r2, [pc, #140]	; (80028a4 <MX_USART1_UART_Init+0x94>)
 8002818:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800281a:	4b21      	ldr	r3, [pc, #132]	; (80028a0 <MX_USART1_UART_Init+0x90>)
 800281c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002820:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002822:	4b1f      	ldr	r3, [pc, #124]	; (80028a0 <MX_USART1_UART_Init+0x90>)
 8002824:	2200      	movs	r2, #0
 8002826:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002828:	4b1d      	ldr	r3, [pc, #116]	; (80028a0 <MX_USART1_UART_Init+0x90>)
 800282a:	2200      	movs	r2, #0
 800282c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800282e:	4b1c      	ldr	r3, [pc, #112]	; (80028a0 <MX_USART1_UART_Init+0x90>)
 8002830:	2200      	movs	r2, #0
 8002832:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002834:	4b1a      	ldr	r3, [pc, #104]	; (80028a0 <MX_USART1_UART_Init+0x90>)
 8002836:	220c      	movs	r2, #12
 8002838:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800283a:	4b19      	ldr	r3, [pc, #100]	; (80028a0 <MX_USART1_UART_Init+0x90>)
 800283c:	2200      	movs	r2, #0
 800283e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002840:	4b17      	ldr	r3, [pc, #92]	; (80028a0 <MX_USART1_UART_Init+0x90>)
 8002842:	2200      	movs	r2, #0
 8002844:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002846:	4b16      	ldr	r3, [pc, #88]	; (80028a0 <MX_USART1_UART_Init+0x90>)
 8002848:	2200      	movs	r2, #0
 800284a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800284c:	4b14      	ldr	r3, [pc, #80]	; (80028a0 <MX_USART1_UART_Init+0x90>)
 800284e:	2200      	movs	r2, #0
 8002850:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002852:	4b13      	ldr	r3, [pc, #76]	; (80028a0 <MX_USART1_UART_Init+0x90>)
 8002854:	2200      	movs	r2, #0
 8002856:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002858:	4811      	ldr	r0, [pc, #68]	; (80028a0 <MX_USART1_UART_Init+0x90>)
 800285a:	f006 fe1f 	bl	800949c <HAL_UART_Init>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002864:	f000 fc00 	bl	8003068 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002868:	2100      	movs	r1, #0
 800286a:	480d      	ldr	r0, [pc, #52]	; (80028a0 <MX_USART1_UART_Init+0x90>)
 800286c:	f007 ffe7 	bl	800a83e <HAL_UARTEx_SetTxFifoThreshold>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002876:	f000 fbf7 	bl	8003068 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800287a:	2100      	movs	r1, #0
 800287c:	4808      	ldr	r0, [pc, #32]	; (80028a0 <MX_USART1_UART_Init+0x90>)
 800287e:	f008 f81c 	bl	800a8ba <HAL_UARTEx_SetRxFifoThreshold>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002888:	f000 fbee 	bl	8003068 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800288c:	4804      	ldr	r0, [pc, #16]	; (80028a0 <MX_USART1_UART_Init+0x90>)
 800288e:	f007 ff9d 	bl	800a7cc <HAL_UARTEx_DisableFifoMode>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002898:	f000 fbe6 	bl	8003068 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800289c:	bf00      	nop
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	200010e4 	.word	0x200010e4
 80028a4:	40013800 	.word	0x40013800

080028a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80028ac:	4b23      	ldr	r3, [pc, #140]	; (800293c <MX_USART2_UART_Init+0x94>)
 80028ae:	4a24      	ldr	r2, [pc, #144]	; (8002940 <MX_USART2_UART_Init+0x98>)
 80028b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80028b2:	4b22      	ldr	r3, [pc, #136]	; (800293c <MX_USART2_UART_Init+0x94>)
 80028b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028ba:	4b20      	ldr	r3, [pc, #128]	; (800293c <MX_USART2_UART_Init+0x94>)
 80028bc:	2200      	movs	r2, #0
 80028be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028c0:	4b1e      	ldr	r3, [pc, #120]	; (800293c <MX_USART2_UART_Init+0x94>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028c6:	4b1d      	ldr	r3, [pc, #116]	; (800293c <MX_USART2_UART_Init+0x94>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028cc:	4b1b      	ldr	r3, [pc, #108]	; (800293c <MX_USART2_UART_Init+0x94>)
 80028ce:	220c      	movs	r2, #12
 80028d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80028d2:	4b1a      	ldr	r3, [pc, #104]	; (800293c <MX_USART2_UART_Init+0x94>)
 80028d4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80028d8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028da:	4b18      	ldr	r3, [pc, #96]	; (800293c <MX_USART2_UART_Init+0x94>)
 80028dc:	2200      	movs	r2, #0
 80028de:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028e0:	4b16      	ldr	r3, [pc, #88]	; (800293c <MX_USART2_UART_Init+0x94>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028e6:	4b15      	ldr	r3, [pc, #84]	; (800293c <MX_USART2_UART_Init+0x94>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028ec:	4b13      	ldr	r3, [pc, #76]	; (800293c <MX_USART2_UART_Init+0x94>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028f2:	4812      	ldr	r0, [pc, #72]	; (800293c <MX_USART2_UART_Init+0x94>)
 80028f4:	f006 fdd2 	bl	800949c <HAL_UART_Init>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80028fe:	f000 fbb3 	bl	8003068 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002902:	2100      	movs	r1, #0
 8002904:	480d      	ldr	r0, [pc, #52]	; (800293c <MX_USART2_UART_Init+0x94>)
 8002906:	f007 ff9a 	bl	800a83e <HAL_UARTEx_SetTxFifoThreshold>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8002910:	f000 fbaa 	bl	8003068 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002914:	2100      	movs	r1, #0
 8002916:	4809      	ldr	r0, [pc, #36]	; (800293c <MX_USART2_UART_Init+0x94>)
 8002918:	f007 ffcf 	bl	800a8ba <HAL_UARTEx_SetRxFifoThreshold>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8002922:	f000 fba1 	bl	8003068 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002926:	4805      	ldr	r0, [pc, #20]	; (800293c <MX_USART2_UART_Init+0x94>)
 8002928:	f007 ff50 	bl	800a7cc <HAL_UARTEx_DisableFifoMode>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8002932:	f000 fb99 	bl	8003068 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20001178 	.word	0x20001178
 8002940:	40004400 	.word	0x40004400

08002944 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002948:	4b22      	ldr	r3, [pc, #136]	; (80029d4 <MX_USART3_UART_Init+0x90>)
 800294a:	4a23      	ldr	r2, [pc, #140]	; (80029d8 <MX_USART3_UART_Init+0x94>)
 800294c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800294e:	4b21      	ldr	r3, [pc, #132]	; (80029d4 <MX_USART3_UART_Init+0x90>)
 8002950:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002954:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002956:	4b1f      	ldr	r3, [pc, #124]	; (80029d4 <MX_USART3_UART_Init+0x90>)
 8002958:	2200      	movs	r2, #0
 800295a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800295c:	4b1d      	ldr	r3, [pc, #116]	; (80029d4 <MX_USART3_UART_Init+0x90>)
 800295e:	2200      	movs	r2, #0
 8002960:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002962:	4b1c      	ldr	r3, [pc, #112]	; (80029d4 <MX_USART3_UART_Init+0x90>)
 8002964:	2200      	movs	r2, #0
 8002966:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002968:	4b1a      	ldr	r3, [pc, #104]	; (80029d4 <MX_USART3_UART_Init+0x90>)
 800296a:	220c      	movs	r2, #12
 800296c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800296e:	4b19      	ldr	r3, [pc, #100]	; (80029d4 <MX_USART3_UART_Init+0x90>)
 8002970:	2200      	movs	r2, #0
 8002972:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002974:	4b17      	ldr	r3, [pc, #92]	; (80029d4 <MX_USART3_UART_Init+0x90>)
 8002976:	2200      	movs	r2, #0
 8002978:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800297a:	4b16      	ldr	r3, [pc, #88]	; (80029d4 <MX_USART3_UART_Init+0x90>)
 800297c:	2200      	movs	r2, #0
 800297e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002980:	4b14      	ldr	r3, [pc, #80]	; (80029d4 <MX_USART3_UART_Init+0x90>)
 8002982:	2200      	movs	r2, #0
 8002984:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002986:	4b13      	ldr	r3, [pc, #76]	; (80029d4 <MX_USART3_UART_Init+0x90>)
 8002988:	2200      	movs	r2, #0
 800298a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800298c:	4811      	ldr	r0, [pc, #68]	; (80029d4 <MX_USART3_UART_Init+0x90>)
 800298e:	f006 fd85 	bl	800949c <HAL_UART_Init>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002998:	f000 fb66 	bl	8003068 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800299c:	2100      	movs	r1, #0
 800299e:	480d      	ldr	r0, [pc, #52]	; (80029d4 <MX_USART3_UART_Init+0x90>)
 80029a0:	f007 ff4d 	bl	800a83e <HAL_UARTEx_SetTxFifoThreshold>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80029aa:	f000 fb5d 	bl	8003068 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029ae:	2100      	movs	r1, #0
 80029b0:	4808      	ldr	r0, [pc, #32]	; (80029d4 <MX_USART3_UART_Init+0x90>)
 80029b2:	f007 ff82 	bl	800a8ba <HAL_UARTEx_SetRxFifoThreshold>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80029bc:	f000 fb54 	bl	8003068 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80029c0:	4804      	ldr	r0, [pc, #16]	; (80029d4 <MX_USART3_UART_Init+0x90>)
 80029c2:	f007 ff03 	bl	800a7cc <HAL_UARTEx_DisableFifoMode>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80029cc:	f000 fb4c 	bl	8003068 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80029d0:	bf00      	nop
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	2000120c 	.word	0x2000120c
 80029d8:	40004800 	.word	0x40004800

080029dc <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80029e0:	bf00      	nop
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
	...

080029ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80029f2:	4b12      	ldr	r3, [pc, #72]	; (8002a3c <MX_DMA_Init+0x50>)
 80029f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029f6:	4a11      	ldr	r2, [pc, #68]	; (8002a3c <MX_DMA_Init+0x50>)
 80029f8:	f043 0304 	orr.w	r3, r3, #4
 80029fc:	6493      	str	r3, [r2, #72]	; 0x48
 80029fe:	4b0f      	ldr	r3, [pc, #60]	; (8002a3c <MX_DMA_Init+0x50>)
 8002a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a02:	f003 0304 	and.w	r3, r3, #4
 8002a06:	607b      	str	r3, [r7, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a0a:	4b0c      	ldr	r3, [pc, #48]	; (8002a3c <MX_DMA_Init+0x50>)
 8002a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a0e:	4a0b      	ldr	r2, [pc, #44]	; (8002a3c <MX_DMA_Init+0x50>)
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	6493      	str	r3, [r2, #72]	; 0x48
 8002a16:	4b09      	ldr	r3, [pc, #36]	; (8002a3c <MX_DMA_Init+0x50>)
 8002a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	603b      	str	r3, [r7, #0]
 8002a20:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002a22:	2200      	movs	r2, #0
 8002a24:	2100      	movs	r1, #0
 8002a26:	200b      	movs	r0, #11
 8002a28:	f002 f800 	bl	8004a2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002a2c:	200b      	movs	r0, #11
 8002a2e:	f002 f819 	bl	8004a64 <HAL_NVIC_EnableIRQ>

}
 8002a32:	bf00      	nop
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40021000 	.word	0x40021000

08002a40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08c      	sub	sp, #48	; 0x30
 8002a44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a46:	f107 031c 	add.w	r3, r7, #28
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]
 8002a4e:	605a      	str	r2, [r3, #4]
 8002a50:	609a      	str	r2, [r3, #8]
 8002a52:	60da      	str	r2, [r3, #12]
 8002a54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a56:	4b9e      	ldr	r3, [pc, #632]	; (8002cd0 <MX_GPIO_Init+0x290>)
 8002a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a5a:	4a9d      	ldr	r2, [pc, #628]	; (8002cd0 <MX_GPIO_Init+0x290>)
 8002a5c:	f043 0310 	orr.w	r3, r3, #16
 8002a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a62:	4b9b      	ldr	r3, [pc, #620]	; (8002cd0 <MX_GPIO_Init+0x290>)
 8002a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a66:	f003 0310 	and.w	r3, r3, #16
 8002a6a:	61bb      	str	r3, [r7, #24]
 8002a6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a6e:	4b98      	ldr	r3, [pc, #608]	; (8002cd0 <MX_GPIO_Init+0x290>)
 8002a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a72:	4a97      	ldr	r2, [pc, #604]	; (8002cd0 <MX_GPIO_Init+0x290>)
 8002a74:	f043 0304 	orr.w	r3, r3, #4
 8002a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a7a:	4b95      	ldr	r3, [pc, #596]	; (8002cd0 <MX_GPIO_Init+0x290>)
 8002a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7e:	f003 0304 	and.w	r3, r3, #4
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a86:	4b92      	ldr	r3, [pc, #584]	; (8002cd0 <MX_GPIO_Init+0x290>)
 8002a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a8a:	4a91      	ldr	r2, [pc, #580]	; (8002cd0 <MX_GPIO_Init+0x290>)
 8002a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a92:	4b8f      	ldr	r3, [pc, #572]	; (8002cd0 <MX_GPIO_Init+0x290>)
 8002a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a9a:	613b      	str	r3, [r7, #16]
 8002a9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9e:	4b8c      	ldr	r3, [pc, #560]	; (8002cd0 <MX_GPIO_Init+0x290>)
 8002aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa2:	4a8b      	ldr	r2, [pc, #556]	; (8002cd0 <MX_GPIO_Init+0x290>)
 8002aa4:	f043 0301 	orr.w	r3, r3, #1
 8002aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aaa:	4b89      	ldr	r3, [pc, #548]	; (8002cd0 <MX_GPIO_Init+0x290>)
 8002aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	60fb      	str	r3, [r7, #12]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab6:	4b86      	ldr	r3, [pc, #536]	; (8002cd0 <MX_GPIO_Init+0x290>)
 8002ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aba:	4a85      	ldr	r2, [pc, #532]	; (8002cd0 <MX_GPIO_Init+0x290>)
 8002abc:	f043 0302 	orr.w	r3, r3, #2
 8002ac0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ac2:	4b83      	ldr	r3, [pc, #524]	; (8002cd0 <MX_GPIO_Init+0x290>)
 8002ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	60bb      	str	r3, [r7, #8]
 8002acc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ace:	4b80      	ldr	r3, [pc, #512]	; (8002cd0 <MX_GPIO_Init+0x290>)
 8002ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad2:	4a7f      	ldr	r2, [pc, #508]	; (8002cd0 <MX_GPIO_Init+0x290>)
 8002ad4:	f043 0308 	orr.w	r3, r3, #8
 8002ad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ada:	4b7d      	ldr	r3, [pc, #500]	; (8002cd0 <MX_GPIO_Init+0x290>)
 8002adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ade:	f003 0308 	and.w	r3, r3, #8
 8002ae2:	607b      	str	r3, [r7, #4]
 8002ae4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f240 1105 	movw	r1, #261	; 0x105
 8002aec:	4879      	ldr	r0, [pc, #484]	; (8002cd4 <MX_GPIO_Init+0x294>)
 8002aee:	f002 fda1 	bl	8005634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8002af2:	2200      	movs	r2, #0
 8002af4:	f248 111c 	movw	r1, #33052	; 0x811c
 8002af8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002afc:	f002 fd9a 	bl	8005634 <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8002b00:	2200      	movs	r2, #0
 8002b02:	f24f 0134 	movw	r1, #61492	; 0xf034
 8002b06:	4874      	ldr	r0, [pc, #464]	; (8002cd8 <MX_GPIO_Init+0x298>)
 8002b08:	f002 fd94 	bl	8005634 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f242 0183 	movw	r1, #8323	; 0x2083
 8002b12:	4872      	ldr	r0, [pc, #456]	; (8002cdc <MX_GPIO_Init+0x29c>)
 8002b14:	f002 fd8e 	bl	8005634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8002b1e:	4870      	ldr	r0, [pc, #448]	; (8002ce0 <MX_GPIO_Init+0x2a0>)
 8002b20:	f002 fd88 	bl	8005634 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8002b24:	f240 1305 	movw	r3, #261	; 0x105
 8002b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b32:	2300      	movs	r3, #0
 8002b34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b36:	f107 031c 	add.w	r3, r7, #28
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4865      	ldr	r0, [pc, #404]	; (8002cd4 <MX_GPIO_Init+0x294>)
 8002b3e:	f002 fbe7 	bl	8005310 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8002b42:	237a      	movs	r3, #122	; 0x7a
 8002b44:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b46:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002b4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b50:	f107 031c 	add.w	r3, r7, #28
 8002b54:	4619      	mov	r1, r3
 8002b56:	485f      	ldr	r0, [pc, #380]	; (8002cd4 <MX_GPIO_Init+0x294>)
 8002b58:	f002 fbda 	bl	8005310 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8002b5c:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8002b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b62:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002b66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b6c:	f107 031c 	add.w	r3, r7, #28
 8002b70:	4619      	mov	r1, r3
 8002b72:	485b      	ldr	r0, [pc, #364]	; (8002ce0 <MX_GPIO_Init+0x2a0>)
 8002b74:	f002 fbcc 	bl	8005310 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8002b78:	f248 131c 	movw	r3, #33052	; 0x811c
 8002b7c:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b82:	2300      	movs	r3, #0
 8002b84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b86:	2300      	movs	r3, #0
 8002b88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b8a:	f107 031c 	add.w	r3, r7, #28
 8002b8e:	4619      	mov	r1, r3
 8002b90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b94:	f002 fbbc 	bl	8005310 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b9c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002ba0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8002ba6:	f107 031c 	add.w	r3, r7, #28
 8002baa:	4619      	mov	r1, r3
 8002bac:	484a      	ldr	r0, [pc, #296]	; (8002cd8 <MX_GPIO_Init+0x298>)
 8002bae:	f002 fbaf 	bl	8005310 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8002bc6:	f107 031c 	add.w	r3, r7, #28
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4842      	ldr	r0, [pc, #264]	; (8002cd8 <MX_GPIO_Init+0x298>)
 8002bce:	f002 fb9f 	bl	8005310 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 8002bd2:	f24b 0334 	movw	r3, #45108	; 0xb034
 8002bd6:	61fb      	str	r3, [r7, #28]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be0:	2300      	movs	r3, #0
 8002be2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be4:	f107 031c 	add.w	r3, r7, #28
 8002be8:	4619      	mov	r1, r3
 8002bea:	483b      	ldr	r0, [pc, #236]	; (8002cd8 <MX_GPIO_Init+0x298>)
 8002bec:	f002 fb90 	bl	8005310 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8002bf0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8002c02:	f107 031c 	add.w	r3, r7, #28
 8002c06:	4619      	mov	r1, r3
 8002c08:	4833      	ldr	r0, [pc, #204]	; (8002cd8 <MX_GPIO_Init+0x298>)
 8002c0a:	f002 fb81 	bl	8005310 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8002c0e:	f64d 4304 	movw	r3, #56324	; 0xdc04
 8002c12:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c14:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002c18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c1e:	f107 031c 	add.w	r3, r7, #28
 8002c22:	4619      	mov	r1, r3
 8002c24:	482d      	ldr	r0, [pc, #180]	; (8002cdc <MX_GPIO_Init+0x29c>)
 8002c26:	f002 fb73 	bl	8005310 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8002c2a:	f242 0383 	movw	r3, #8323	; 0x2083
 8002c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c30:	2301      	movs	r3, #1
 8002c32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c34:	2300      	movs	r3, #0
 8002c36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c3c:	f107 031c 	add.w	r3, r7, #28
 8002c40:	4619      	mov	r1, r3
 8002c42:	4826      	ldr	r0, [pc, #152]	; (8002cdc <MX_GPIO_Init+0x29c>)
 8002c44:	f002 fb64 	bl	8005310 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8002c48:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c52:	2300      	movs	r3, #0
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c56:	2300      	movs	r3, #0
 8002c58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c5a:	f107 031c 	add.w	r3, r7, #28
 8002c5e:	4619      	mov	r1, r3
 8002c60:	481f      	ldr	r0, [pc, #124]	; (8002ce0 <MX_GPIO_Init+0x2a0>)
 8002c62:	f002 fb55 	bl	8005310 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8002c66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c70:	2300      	movs	r3, #0
 8002c72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002c74:	f107 031c 	add.w	r3, r7, #28
 8002c78:	4619      	mov	r1, r3
 8002c7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c7e:	f002 fb47 	bl	8005310 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8002c82:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002c86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c88:	2302      	movs	r3, #2
 8002c8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c90:	2303      	movs	r3, #3
 8002c92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002c94:	230a      	movs	r3, #10
 8002c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c98:	f107 031c 	add.w	r3, r7, #28
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ca2:	f002 fb35 	bl	8005310 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	2100      	movs	r1, #0
 8002caa:	2017      	movs	r0, #23
 8002cac:	f001 febe 	bl	8004a2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002cb0:	2017      	movs	r0, #23
 8002cb2:	f001 fed7 	bl	8004a64 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	2106      	movs	r1, #6
 8002cba:	2028      	movs	r0, #40	; 0x28
 8002cbc:	f001 feb6 	bl	8004a2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002cc0:	2028      	movs	r0, #40	; 0x28
 8002cc2:	f001 fecf 	bl	8004a64 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002cc6:	bf00      	nop
 8002cc8:	3730      	adds	r7, #48	; 0x30
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	48001000 	.word	0x48001000
 8002cd8:	48000400 	.word	0x48000400
 8002cdc:	48000c00 	.word	0x48000c00
 8002ce0:	48000800 	.word	0x48000800

08002ce4 <MyLED2_init>:

/* USER CODE BEGIN 4 */
static void MyLED2_init(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  //Configure the MODE register
  //01:general purpose output
  //MODER Bit 29 and Bit 28
  //Reset both bits 28 and 29 to 0
	GPIOB->MODER &=~(0x3 <<28);
 8002ce8:	4b16      	ldr	r3, [pc, #88]	; (8002d44 <MyLED2_init+0x60>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a15      	ldr	r2, [pc, #84]	; (8002d44 <MyLED2_init+0x60>)
 8002cee:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002cf2:	6013      	str	r3, [r2, #0]
  //Set the values to 1
	GPIOB->MODER |=(0x1 <<28);
 8002cf4:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <MyLED2_init+0x60>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a12      	ldr	r2, [pc, #72]	; (8002d44 <MyLED2_init+0x60>)
 8002cfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cfe:	6013      	str	r3, [r2, #0]

  //Configure the output type register
  //0:Push-Pull
  //OTYPER Bit 14 to 0
	GPIOB->OTYPER &=~(1<<14);
 8002d00:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <MyLED2_init+0x60>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	4a0f      	ldr	r2, [pc, #60]	; (8002d44 <MyLED2_init+0x60>)
 8002d06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d0a:	6053      	str	r3, [r2, #4]

  //Configure the speed register
  //11:Very high speed
  //OSPEEDR Bit 29 and Bit 28
  //Reset both bits 28 and 29 to 0
	GPIOB->OSPEEDR &=~(0x3 <<28);
 8002d0c:	4b0d      	ldr	r3, [pc, #52]	; (8002d44 <MyLED2_init+0x60>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	4a0c      	ldr	r2, [pc, #48]	; (8002d44 <MyLED2_init+0x60>)
 8002d12:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002d16:	6093      	str	r3, [r2, #8]
  //Set the values to 1
	GPIOB->OSPEEDR |=(0x1 <<28);
 8002d18:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <MyLED2_init+0x60>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	4a09      	ldr	r2, [pc, #36]	; (8002d44 <MyLED2_init+0x60>)
 8002d1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d22:	6093      	str	r3, [r2, #8]

  //Configure pull-up/pull-down register
  //00: no pull-up/pull-down
  //PUPDR Bit 29 and Bit 28
  //Reset both bits 28 and 29 to 0
	GPIOB->PUPDR &=~(0x3 <<28);
 8002d24:	4b07      	ldr	r3, [pc, #28]	; (8002d44 <MyLED2_init+0x60>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	4a06      	ldr	r2, [pc, #24]	; (8002d44 <MyLED2_init+0x60>)
 8002d2a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002d2e:	60d3      	str	r3, [r2, #12]
  //Set the values to 0
	GPIOB->PUPDR |=(0x0 <<28);
 8002d30:	4b04      	ldr	r3, [pc, #16]	; (8002d44 <MyLED2_init+0x60>)
 8002d32:	4a04      	ldr	r2, [pc, #16]	; (8002d44 <MyLED2_init+0x60>)
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	60d3      	str	r3, [r2, #12]

}
 8002d38:	bf00      	nop
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	48000400 	.word	0x48000400

08002d48 <MyButton_init>:

static void MyButton_init(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
  //Button is Port C, Pin 13, EXTI13
  //Configure SYSCLK
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d4e:	4b1d      	ldr	r3, [pc, #116]	; (8002dc4 <MyButton_init+0x7c>)
 8002d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d52:	4a1c      	ldr	r2, [pc, #112]	; (8002dc4 <MyButton_init+0x7c>)
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	6613      	str	r3, [r2, #96]	; 0x60
 8002d5a:	4b1a      	ldr	r3, [pc, #104]	; (8002dc4 <MyButton_init+0x7c>)
 8002d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	607b      	str	r3, [r7, #4]
 8002d64:	687b      	ldr	r3, [r7, #4]

  //Configure the MODE register
  //00:input mode
  //MODER Bit 27 and Bit 26
  //Reset both bits 27 and 26 to 0
	GPIOC->MODER &=~(0x3 <<26);
 8002d66:	4b18      	ldr	r3, [pc, #96]	; (8002dc8 <MyButton_init+0x80>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a17      	ldr	r2, [pc, #92]	; (8002dc8 <MyButton_init+0x80>)
 8002d6c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002d70:	6013      	str	r3, [r2, #0]

  //Configure pull-up/pull-down register
  //00: no pull-up/pull-down
  //PUPDR Bit 27 and Bit 26
  //Reset both bits 27 and 26 to 0
	GPIOC->PUPDR &=~(0x3 <<26);
 8002d72:	4b15      	ldr	r3, [pc, #84]	; (8002dc8 <MyButton_init+0x80>)
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	4a14      	ldr	r2, [pc, #80]	; (8002dc8 <MyButton_init+0x80>)
 8002d78:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002d7c:	60d3      	str	r3, [r2, #12]
  //Set the values to 0
	GPIOC->PUPDR |=(0x0 <<26);
 8002d7e:	4b12      	ldr	r3, [pc, #72]	; (8002dc8 <MyButton_init+0x80>)
 8002d80:	4a11      	ldr	r2, [pc, #68]	; (8002dc8 <MyButton_init+0x80>)
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	60d3      	str	r3, [r2, #12]

  //sysconfig Register
  //EXTI13, Choose port C
  //Configure the External Interrupt Configuration Register
  //SYSCFG_EXTICR4 :only 2nd bit in EXTICR[3] is set to 1
	SYSCFG->EXTICR[3]|=(0x1<<5);
 8002d86:	4b11      	ldr	r3, [pc, #68]	; (8002dcc <MyButton_init+0x84>)
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	4a10      	ldr	r2, [pc, #64]	; (8002dcc <MyButton_init+0x84>)
 8002d8c:	f043 0320 	orr.w	r3, r3, #32
 8002d90:	6153      	str	r3, [r2, #20]

  //Configure the falling trigger selection register
  //EXTI_FTSR
	EXTI->FTSR1 |=(0x1 <<13) ;
 8002d92:	4b0f      	ldr	r3, [pc, #60]	; (8002dd0 <MyButton_init+0x88>)
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	4a0e      	ldr	r2, [pc, #56]	; (8002dd0 <MyButton_init+0x88>)
 8002d98:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d9c:	60d3      	str	r3, [r2, #12]

  //Configure the Interrupt Mask Register
  //EXTI_IMR
	EXTI->IMR1 |=(0x1 <<13);
 8002d9e:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <MyButton_init+0x88>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a0b      	ldr	r2, [pc, #44]	; (8002dd0 <MyButton_init+0x88>)
 8002da4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002da8:	6013      	str	r3, [r2, #0]

  //Configure NVIC Set Enable Register
  //NVIC_ISER
  //NVIC->ISER[] Register no. & location based on position
  //NVIC->ISER[(((uint32_t)EXTI15_10_IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)EXTI15_10_IRQn) & 0x1FUL));
	NVIC->ISER[1] |= (0x1 << 8);
 8002daa:	4b0a      	ldr	r3, [pc, #40]	; (8002dd4 <MyButton_init+0x8c>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	4a09      	ldr	r2, [pc, #36]	; (8002dd4 <MyButton_init+0x8c>)
 8002db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db4:	6053      	str	r3, [r2, #4]
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	48000800 	.word	0x48000800
 8002dcc:	40010000 	.word	0x40010000
 8002dd0:	40010400 	.word	0x40010400
 8002dd4:	e000e100 	.word	0xe000e100

08002dd8 <MyUART1_init>:

static void MyUART1_init(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
	//configure UART1 manually excluding Baud Rate Register
	//configuring M bits-Bits 12,28 to 0,0 for 1 start bit, 8 data bits, n stop bits in USART_CR1 register
	huart1.Instance->CR1 &=~(0x1 <<12);
 8002ddc:	4b22      	ldr	r3, [pc, #136]	; (8002e68 <MyUART1_init+0x90>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	4b21      	ldr	r3, [pc, #132]	; (8002e68 <MyUART1_init+0x90>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002dea:	601a      	str	r2, [r3, #0]
	huart1.Instance->CR1 &=~(0x1 <<28);
 8002dec:	4b1e      	ldr	r3, [pc, #120]	; (8002e68 <MyUART1_init+0x90>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	4b1d      	ldr	r3, [pc, #116]	; (8002e68 <MyUART1_init+0x90>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002dfa:	601a      	str	r2, [r3, #0]
	//configuring Bit 15 to 1 for oversampling by 8 in USART_CR1 register
	huart1.Instance->CR1 |=(0x1 <<15);
 8002dfc:	4b1a      	ldr	r3, [pc, #104]	; (8002e68 <MyUART1_init+0x90>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	4b19      	ldr	r3, [pc, #100]	; (8002e68 <MyUART1_init+0x90>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e0a:	601a      	str	r2, [r3, #0]
	//configuring Bit 10 to 0 to disable parity control in USART_CR1 register
	huart1.Instance->CR1 &=~(0x1 <<10);
 8002e0c:	4b16      	ldr	r3, [pc, #88]	; (8002e68 <MyUART1_init+0x90>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	4b15      	ldr	r3, [pc, #84]	; (8002e68 <MyUART1_init+0x90>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e1a:	601a      	str	r2, [r3, #0]
	//configuring Bit 0 to 1 to enable UART in USART_CR1 register
	huart1.Instance->CR1 |=(0x1 <<0);
 8002e1c:	4b12      	ldr	r3, [pc, #72]	; (8002e68 <MyUART1_init+0x90>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	4b11      	ldr	r3, [pc, #68]	; (8002e68 <MyUART1_init+0x90>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f042 0201 	orr.w	r2, r2, #1
 8002e2a:	601a      	str	r2, [r3, #0]
	//configuring Bit 3 to 1 to enable Transmitter in USART_CR1 register
	huart1.Instance->CR1 |=(0x1 <<3);
 8002e2c:	4b0e      	ldr	r3, [pc, #56]	; (8002e68 <MyUART1_init+0x90>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	4b0d      	ldr	r3, [pc, #52]	; (8002e68 <MyUART1_init+0x90>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0208 	orr.w	r2, r2, #8
 8002e3a:	601a      	str	r2, [r3, #0]
	//configuring Bit 2 to 1 to enable Receiver in USART_CR1 register
	huart1.Instance->CR1 |=(0x1 <<2);
 8002e3c:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <MyUART1_init+0x90>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <MyUART1_init+0x90>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0204 	orr.w	r2, r2, #4
 8002e4a:	601a      	str	r2, [r3, #0]
	//configuring Bits 12,13 to 0,0 for 1 stop bit in USART_CR2 register
	huart1.Instance->CR2 &=(0x3 <<12);
 8002e4c:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <MyUART1_init+0x90>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <MyUART1_init+0x90>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8002e5a:	605a      	str	r2, [r3, #4]

}
 8002e5c:	bf00      	nop
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	200010e4 	.word	0x200010e4

08002e6c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af02      	add	r7, sp, #8
 8002e72:	4603      	mov	r3, r0
 8002e74:	80fb      	strh	r3, [r7, #6]
	//activate the message transmission once a button is pushed
	xTaskNotifyFromISR(pUART_SendMsg, 0, eNoAction, NULL);
 8002e76:	4b07      	ldr	r3, [pc, #28]	; (8002e94 <HAL_GPIO_EXTI_Callback+0x28>)
 8002e78:	6818      	ldr	r0, [r3, #0]
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	9301      	str	r3, [sp, #4]
 8002e7e:	2300      	movs	r3, #0
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	2300      	movs	r3, #0
 8002e84:	2200      	movs	r2, #0
 8002e86:	2100      	movs	r1, #0
 8002e88:	f7fe f8ec 	bl	8001064 <xTaskGenericNotifyFromISR>
}
 8002e8c:	bf00      	nop
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	20000d84 	.word	0x20000d84

08002e98 <SOS_Transmit>:
static void SOS_Transmit(void *parameter)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  repeat = 2;
 8002ea0:	4b36      	ldr	r3, [pc, #216]	; (8002f7c <SOS_Transmit+0xe4>)
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	701a      	strb	r2, [r3, #0]
	      //while(repeat>0)
	      while(1)
		  {

	        //sending 's'
	        for(int i=0; i<3; i++)
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	e016      	b.n	8002eda <SOS_Transmit+0x42>
	           {
		        //turning up the led for a dot
		        //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET); or
		        //write a 1 to Bit 14 of GPIOB ODR(output data register)
		          GPIOB->ODR |=(1<<14);
 8002eac:	4b34      	ldr	r3, [pc, #208]	; (8002f80 <SOS_Transmit+0xe8>)
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	4a33      	ldr	r2, [pc, #204]	; (8002f80 <SOS_Transmit+0xe8>)
 8002eb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eb6:	6153      	str	r3, [r2, #20]
		          //HAL_Delay(300);
		          vTaskDelay(300);
 8002eb8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002ebc:	f7fd fd14 	bl	80008e8 <vTaskDelay>

	            //turning the led off for spacing
		        //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET); or
		        //write a 0 to Bit 14 of GPIOB ODR(output data register)
		          GPIOB->ODR &=~(1<<14);
 8002ec0:	4b2f      	ldr	r3, [pc, #188]	; (8002f80 <SOS_Transmit+0xe8>)
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	4a2e      	ldr	r2, [pc, #184]	; (8002f80 <SOS_Transmit+0xe8>)
 8002ec6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002eca:	6153      	str	r3, [r2, #20]
		          vTaskDelay(300);
 8002ecc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002ed0:	f7fd fd0a 	bl	80008e8 <vTaskDelay>
	        for(int i=0; i<3; i++)
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	613b      	str	r3, [r7, #16]
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	dde5      	ble.n	8002eac <SOS_Transmit+0x14>
	            }
	         //3 time units between characters
	         // HAL_Delay(300*2);
	         vTaskDelay(300*2);
 8002ee0:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002ee4:	f7fd fd00 	bl	80008e8 <vTaskDelay>

	         //sending 'o'
	         for(int i=0; i<3; i++)
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	e016      	b.n	8002f1c <SOS_Transmit+0x84>
	 	       {
	 		    //turning up the led for a dash
	 		    //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
		        //write a 1 to Bit 14 of GPIOB ODR(output data register)
		  	    GPIOB->ODR |=(1<<14);
 8002eee:	4b24      	ldr	r3, [pc, #144]	; (8002f80 <SOS_Transmit+0xe8>)
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	4a23      	ldr	r2, [pc, #140]	; (8002f80 <SOS_Transmit+0xe8>)
 8002ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ef8:	6153      	str	r3, [r2, #20]
	 		    //HAL_Delay(300*3);
		  	    vTaskDelay(300*3);
 8002efa:	f44f 7061 	mov.w	r0, #900	; 0x384
 8002efe:	f7fd fcf3 	bl	80008e8 <vTaskDelay>
	 	        //turning the led off for spacing
	 		    //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
	 		    //write a 0 to Bit 14 of GPIOB ODR(output data register)
	 		    GPIOB->ODR &=~(1<<14);
 8002f02:	4b1f      	ldr	r3, [pc, #124]	; (8002f80 <SOS_Transmit+0xe8>)
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	4a1e      	ldr	r2, [pc, #120]	; (8002f80 <SOS_Transmit+0xe8>)
 8002f08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f0c:	6153      	str	r3, [r2, #20]
	 		    //HAL_Delay(300);
	 		    vTaskDelay(300);
 8002f0e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002f12:	f7fd fce9 	bl	80008e8 <vTaskDelay>
	         for(int i=0; i<3; i++)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	dde5      	ble.n	8002eee <SOS_Transmit+0x56>
	 	       }
	 	     //3 time units between characters
	         //HAL_Delay(300*2);
	         vTaskDelay(300*2);
 8002f22:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002f26:	f7fd fcdf 	bl	80008e8 <vTaskDelay>
	         //sending 's'
	         for(int i=0; i<3; i++)
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	617b      	str	r3, [r7, #20]
 8002f2e:	e016      	b.n	8002f5e <SOS_Transmit+0xc6>
	 		  {
	 			  //turning up the led for a dot
	 			  //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
		         //write a 1 to Bit 14 of GPIOB ODR(output data register)
		  		  GPIOB->ODR |=(1<<14);
 8002f30:	4b13      	ldr	r3, [pc, #76]	; (8002f80 <SOS_Transmit+0xe8>)
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	4a12      	ldr	r2, [pc, #72]	; (8002f80 <SOS_Transmit+0xe8>)
 8002f36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f3a:	6153      	str	r3, [r2, #20]
		       // HAL_Delay(300);
		  		vTaskDelay(300);
 8002f3c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002f40:	f7fd fcd2 	bl	80008e8 <vTaskDelay>
	 		      //turning the led off for spacing
	 			  //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
		          //write a 0 to Bit 14 of GPIOB ODR(output data register)
		          GPIOB->ODR &=~(1<<14);
 8002f44:	4b0e      	ldr	r3, [pc, #56]	; (8002f80 <SOS_Transmit+0xe8>)
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	4a0d      	ldr	r2, [pc, #52]	; (8002f80 <SOS_Transmit+0xe8>)
 8002f4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f4e:	6153      	str	r3, [r2, #20]
		        //HAL_Delay(300);
		          vTaskDelay(300);
 8002f50:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002f54:	f7fd fcc8 	bl	80008e8 <vTaskDelay>
	         for(int i=0; i<3; i++)
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	617b      	str	r3, [r7, #20]
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	dde5      	ble.n	8002f30 <SOS_Transmit+0x98>
	 		  }
	         //7 time units between words
	 	     // HAL_Delay(300*6);
	         vTaskDelay(300*6);
 8002f64:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8002f68:	f7fd fcbe 	bl	80008e8 <vTaskDelay>
             repeat--;
 8002f6c:	4b03      	ldr	r3, [pc, #12]	; (8002f7c <SOS_Transmit+0xe4>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	4b01      	ldr	r3, [pc, #4]	; (8002f7c <SOS_Transmit+0xe4>)
 8002f76:	701a      	strb	r2, [r3, #0]
	        for(int i=0; i<3; i++)
 8002f78:	e795      	b.n	8002ea6 <SOS_Transmit+0xe>
 8002f7a:	bf00      	nop
 8002f7c:	20000d88 	.word	0x20000d88
 8002f80:	48000400 	.word	0x48000400

08002f84 <LCDDisplay>:

	  return tmp_f;
}

static void LCDDisplay(void *parameter)
{
 8002f84:	b5b0      	push	{r4, r5, r7, lr}
 8002f86:	b094      	sub	sp, #80	; 0x50
 8002f88:	af04      	add	r7, sp, #16
 8002f8a:	6078      	str	r0, [r7, #4]
   char msg_lcd[] = "Hello World - Display on SPI TFT LCD from task!\n";
 8002f8c:	4b2b      	ldr	r3, [pc, #172]	; (800303c <LCDDisplay+0xb8>)
 8002f8e:	f107 040c 	add.w	r4, r7, #12
 8002f92:	461d      	mov	r5, r3
 8002f94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fa0:	682b      	ldr	r3, [r5, #0]
 8002fa2:	7023      	strb	r3, [r4, #0]

  ST7735_Init();
 8002fa4:	f7fe ffb6 	bl	8001f14 <ST7735_Init>
  ST7735_Backlight_On();
 8002fa8:	f7ff f8de 	bl	8002168 <ST7735_Backlight_On>

   while(1){
	   ST7735_FillScreen(ST7735_GREEN);
 8002fac:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8002fb0:	f7ff f8be 	bl	8002130 <ST7735_FillScreen>
	   //ST7735_DrawString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor);
	   ST7735_DrawString(0, 0, msg_lcd, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002fb4:	4b22      	ldr	r3, [pc, #136]	; (8003040 <LCDDisplay+0xbc>)
 8002fb6:	f107 010c 	add.w	r1, r7, #12
 8002fba:	2200      	movs	r2, #0
 8002fbc:	9202      	str	r2, [sp, #8]
 8002fbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fc2:	9201      	str	r2, [sp, #4]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	9200      	str	r2, [sp, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	460a      	mov	r2, r1
 8002fcc:	2100      	movs	r1, #0
 8002fce:	2000      	movs	r0, #0
 8002fd0:	f7fe ffc2 	bl	8001f58 <ST7735_DrawString>
	   vTaskDelay(5000);
 8002fd4:	f241 3088 	movw	r0, #5000	; 0x1388
 8002fd8:	f7fd fc86 	bl	80008e8 <vTaskDelay>
	   ST7735_FillScreen(ST7735_BLUE);
 8002fdc:	201f      	movs	r0, #31
 8002fde:	f7ff f8a7 	bl	8002130 <ST7735_FillScreen>
	   ST7735_DrawString(0, 0, msg_lcd, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002fe2:	4b17      	ldr	r3, [pc, #92]	; (8003040 <LCDDisplay+0xbc>)
 8002fe4:	f107 010c 	add.w	r1, r7, #12
 8002fe8:	2200      	movs	r2, #0
 8002fea:	9202      	str	r2, [sp, #8]
 8002fec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ff0:	9201      	str	r2, [sp, #4]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	9200      	str	r2, [sp, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	460a      	mov	r2, r1
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	2000      	movs	r0, #0
 8002ffe:	f7fe ffab 	bl	8001f58 <ST7735_DrawString>
	   vTaskDelay(5000);
 8003002:	f241 3088 	movw	r0, #5000	; 0x1388
 8003006:	f7fd fc6f 	bl	80008e8 <vTaskDelay>
	   ST7735_FillScreen(ST7735_RED);
 800300a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800300e:	f7ff f88f 	bl	8002130 <ST7735_FillScreen>
	   ST7735_DrawString(0, 0, msg_lcd, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8003012:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <LCDDisplay+0xbc>)
 8003014:	f107 010c 	add.w	r1, r7, #12
 8003018:	2200      	movs	r2, #0
 800301a:	9202      	str	r2, [sp, #8]
 800301c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003020:	9201      	str	r2, [sp, #4]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	9200      	str	r2, [sp, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	460a      	mov	r2, r1
 800302a:	2100      	movs	r1, #0
 800302c:	2000      	movs	r0, #0
 800302e:	f7fe ff93 	bl	8001f58 <ST7735_DrawString>
	   vTaskDelay(5000);
 8003032:	f241 3088 	movw	r0, #5000	; 0x1388
 8003036:	f7fd fc57 	bl	80008e8 <vTaskDelay>
	   ST7735_FillScreen(ST7735_GREEN);
 800303a:	e7b7      	b.n	8002fac <LCDDisplay+0x28>
 800303c:	0800aacc 	.word	0x0800aacc
 8003040:	20000008 	.word	0x20000008

08003044 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a04      	ldr	r2, [pc, #16]	; (8003064 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d101      	bne.n	800305a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003056:	f000 fd0b 	bl	8003a70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800305a:	bf00      	nop
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	40001000 	.word	0x40001000

08003068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800306c:	b672      	cpsid	i
}
 800306e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003070:	e7fe      	b.n	8003070 <Error_Handler+0x8>
	...

08003074 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800307a:	4b0f      	ldr	r3, [pc, #60]	; (80030b8 <HAL_MspInit+0x44>)
 800307c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800307e:	4a0e      	ldr	r2, [pc, #56]	; (80030b8 <HAL_MspInit+0x44>)
 8003080:	f043 0301 	orr.w	r3, r3, #1
 8003084:	6613      	str	r3, [r2, #96]	; 0x60
 8003086:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <HAL_MspInit+0x44>)
 8003088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	607b      	str	r3, [r7, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003092:	4b09      	ldr	r3, [pc, #36]	; (80030b8 <HAL_MspInit+0x44>)
 8003094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003096:	4a08      	ldr	r2, [pc, #32]	; (80030b8 <HAL_MspInit+0x44>)
 8003098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800309c:	6593      	str	r3, [r2, #88]	; 0x58
 800309e:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <HAL_MspInit+0x44>)
 80030a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a6:	603b      	str	r3, [r7, #0]
 80030a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030aa:	bf00      	nop
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	40021000 	.word	0x40021000

080030bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08a      	sub	sp, #40	; 0x28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c4:	f107 0314 	add.w	r3, r7, #20
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	605a      	str	r2, [r3, #4]
 80030ce:	609a      	str	r2, [r3, #8]
 80030d0:	60da      	str	r2, [r3, #12]
 80030d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a15      	ldr	r2, [pc, #84]	; (8003130 <HAL_ADC_MspInit+0x74>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d123      	bne.n	8003126 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80030de:	4b15      	ldr	r3, [pc, #84]	; (8003134 <HAL_ADC_MspInit+0x78>)
 80030e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030e2:	4a14      	ldr	r2, [pc, #80]	; (8003134 <HAL_ADC_MspInit+0x78>)
 80030e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030ea:	4b12      	ldr	r3, [pc, #72]	; (8003134 <HAL_ADC_MspInit+0x78>)
 80030ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030f2:	613b      	str	r3, [r7, #16]
 80030f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030f6:	4b0f      	ldr	r3, [pc, #60]	; (8003134 <HAL_ADC_MspInit+0x78>)
 80030f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030fa:	4a0e      	ldr	r2, [pc, #56]	; (8003134 <HAL_ADC_MspInit+0x78>)
 80030fc:	f043 0304 	orr.w	r3, r3, #4
 8003100:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003102:	4b0c      	ldr	r3, [pc, #48]	; (8003134 <HAL_ADC_MspInit+0x78>)
 8003104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003106:	f003 0304 	and.w	r3, r3, #4
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 800310e:	233f      	movs	r3, #63	; 0x3f
 8003110:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003112:	230b      	movs	r3, #11
 8003114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003116:	2300      	movs	r3, #0
 8003118:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800311a:	f107 0314 	add.w	r3, r7, #20
 800311e:	4619      	mov	r1, r3
 8003120:	4805      	ldr	r0, [pc, #20]	; (8003138 <HAL_ADC_MspInit+0x7c>)
 8003122:	f002 f8f5 	bl	8005310 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003126:	bf00      	nop
 8003128:	3728      	adds	r7, #40	; 0x28
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	50040000 	.word	0x50040000
 8003134:	40021000 	.word	0x40021000
 8003138:	48000800 	.word	0x48000800

0800313c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b0ae      	sub	sp, #184	; 0xb8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003144:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	605a      	str	r2, [r3, #4]
 800314e:	609a      	str	r2, [r3, #8]
 8003150:	60da      	str	r2, [r3, #12]
 8003152:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003154:	f107 0310 	add.w	r3, r7, #16
 8003158:	2294      	movs	r2, #148	; 0x94
 800315a:	2100      	movs	r1, #0
 800315c:	4618      	mov	r0, r3
 800315e:	f007 fc39 	bl	800a9d4 <memset>
  if(DFSDM1_Init == 0)
 8003162:	4b25      	ldr	r3, [pc, #148]	; (80031f8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d142      	bne.n	80031f0 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800316a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800316e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8003170:	2300      	movs	r3, #0
 8003172:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003176:	f107 0310 	add.w	r3, r7, #16
 800317a:	4618      	mov	r0, r3
 800317c:	f004 fe1a 	bl	8007db4 <HAL_RCCEx_PeriphCLKConfig>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8003186:	f7ff ff6f 	bl	8003068 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800318a:	4b1c      	ldr	r3, [pc, #112]	; (80031fc <HAL_DFSDM_ChannelMspInit+0xc0>)
 800318c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800318e:	4a1b      	ldr	r2, [pc, #108]	; (80031fc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003190:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003194:	6613      	str	r3, [r2, #96]	; 0x60
 8003196:	4b19      	ldr	r3, [pc, #100]	; (80031fc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800319a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800319e:	60fb      	str	r3, [r7, #12]
 80031a0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80031a2:	4b16      	ldr	r3, [pc, #88]	; (80031fc <HAL_DFSDM_ChannelMspInit+0xc0>)
 80031a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a6:	4a15      	ldr	r2, [pc, #84]	; (80031fc <HAL_DFSDM_ChannelMspInit+0xc0>)
 80031a8:	f043 0310 	orr.w	r3, r3, #16
 80031ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031ae:	4b13      	ldr	r3, [pc, #76]	; (80031fc <HAL_DFSDM_ChannelMspInit+0xc0>)
 80031b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b2:	f003 0310 	and.w	r3, r3, #16
 80031b6:	60bb      	str	r3, [r7, #8]
 80031b8:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80031ba:	f44f 7320 	mov.w	r3, #640	; 0x280
 80031be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c2:	2302      	movs	r3, #2
 80031c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c8:	2300      	movs	r3, #0
 80031ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ce:	2300      	movs	r3, #0
 80031d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80031d4:	2306      	movs	r3, #6
 80031d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031da:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80031de:	4619      	mov	r1, r3
 80031e0:	4807      	ldr	r0, [pc, #28]	; (8003200 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80031e2:	f002 f895 	bl	8005310 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80031e6:	4b04      	ldr	r3, [pc, #16]	; (80031f8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	3301      	adds	r3, #1
 80031ec:	4a02      	ldr	r2, [pc, #8]	; (80031f8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80031ee:	6013      	str	r3, [r2, #0]
  }

}
 80031f0:	bf00      	nop
 80031f2:	37b8      	adds	r7, #184	; 0xb8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	200012a0 	.word	0x200012a0
 80031fc:	40021000 	.word	0x40021000
 8003200:	48001000 	.word	0x48001000

08003204 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b0b0      	sub	sp, #192	; 0xc0
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800320c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	605a      	str	r2, [r3, #4]
 8003216:	609a      	str	r2, [r3, #8]
 8003218:	60da      	str	r2, [r3, #12]
 800321a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800321c:	f107 0318 	add.w	r3, r7, #24
 8003220:	2294      	movs	r2, #148	; 0x94
 8003222:	2100      	movs	r1, #0
 8003224:	4618      	mov	r0, r3
 8003226:	f007 fbd5 	bl	800a9d4 <memset>
  if(hi2c->Instance==I2C1)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a4a      	ldr	r2, [pc, #296]	; (8003358 <HAL_I2C_MspInit+0x154>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d13c      	bne.n	80032ae <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003234:	2340      	movs	r3, #64	; 0x40
 8003236:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003238:	2300      	movs	r3, #0
 800323a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800323c:	f107 0318 	add.w	r3, r7, #24
 8003240:	4618      	mov	r0, r3
 8003242:	f004 fdb7 	bl	8007db4 <HAL_RCCEx_PeriphCLKConfig>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800324c:	f7ff ff0c 	bl	8003068 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003250:	4b42      	ldr	r3, [pc, #264]	; (800335c <HAL_I2C_MspInit+0x158>)
 8003252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003254:	4a41      	ldr	r2, [pc, #260]	; (800335c <HAL_I2C_MspInit+0x158>)
 8003256:	f043 0302 	orr.w	r3, r3, #2
 800325a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800325c:	4b3f      	ldr	r3, [pc, #252]	; (800335c <HAL_I2C_MspInit+0x158>)
 800325e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	617b      	str	r3, [r7, #20]
 8003266:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8003268:	f44f 7340 	mov.w	r3, #768	; 0x300
 800326c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003270:	2312      	movs	r3, #18
 8003272:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003276:	2301      	movs	r3, #1
 8003278:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800327c:	2303      	movs	r3, #3
 800327e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003282:	2304      	movs	r3, #4
 8003284:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003288:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800328c:	4619      	mov	r1, r3
 800328e:	4834      	ldr	r0, [pc, #208]	; (8003360 <HAL_I2C_MspInit+0x15c>)
 8003290:	f002 f83e 	bl	8005310 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003294:	4b31      	ldr	r3, [pc, #196]	; (800335c <HAL_I2C_MspInit+0x158>)
 8003296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003298:	4a30      	ldr	r2, [pc, #192]	; (800335c <HAL_I2C_MspInit+0x158>)
 800329a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800329e:	6593      	str	r3, [r2, #88]	; 0x58
 80032a0:	4b2e      	ldr	r3, [pc, #184]	; (800335c <HAL_I2C_MspInit+0x158>)
 80032a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032a8:	613b      	str	r3, [r7, #16]
 80032aa:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80032ac:	e050      	b.n	8003350 <HAL_I2C_MspInit+0x14c>
  else if(hi2c->Instance==I2C2)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a2c      	ldr	r2, [pc, #176]	; (8003364 <HAL_I2C_MspInit+0x160>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d14b      	bne.n	8003350 <HAL_I2C_MspInit+0x14c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80032b8:	2380      	movs	r3, #128	; 0x80
 80032ba:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80032bc:	2300      	movs	r3, #0
 80032be:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032c0:	f107 0318 	add.w	r3, r7, #24
 80032c4:	4618      	mov	r0, r3
 80032c6:	f004 fd75 	bl	8007db4 <HAL_RCCEx_PeriphCLKConfig>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 80032d0:	f7ff feca 	bl	8003068 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032d4:	4b21      	ldr	r3, [pc, #132]	; (800335c <HAL_I2C_MspInit+0x158>)
 80032d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032d8:	4a20      	ldr	r2, [pc, #128]	; (800335c <HAL_I2C_MspInit+0x158>)
 80032da:	f043 0302 	orr.w	r3, r3, #2
 80032de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032e0:	4b1e      	ldr	r3, [pc, #120]	; (800335c <HAL_I2C_MspInit+0x158>)
 80032e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80032ec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80032f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032f4:	2312      	movs	r3, #18
 80032f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032fa:	2301      	movs	r3, #1
 80032fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003300:	2303      	movs	r3, #3
 8003302:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003306:	2304      	movs	r3, #4
 8003308:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800330c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003310:	4619      	mov	r1, r3
 8003312:	4813      	ldr	r0, [pc, #76]	; (8003360 <HAL_I2C_MspInit+0x15c>)
 8003314:	f001 fffc 	bl	8005310 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003318:	4b10      	ldr	r3, [pc, #64]	; (800335c <HAL_I2C_MspInit+0x158>)
 800331a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331c:	4a0f      	ldr	r2, [pc, #60]	; (800335c <HAL_I2C_MspInit+0x158>)
 800331e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003322:	6593      	str	r3, [r2, #88]	; 0x58
 8003324:	4b0d      	ldr	r3, [pc, #52]	; (800335c <HAL_I2C_MspInit+0x158>)
 8003326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003328:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800332c:	60bb      	str	r3, [r7, #8]
 800332e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 6, 0);
 8003330:	2200      	movs	r2, #0
 8003332:	2106      	movs	r1, #6
 8003334:	2021      	movs	r0, #33	; 0x21
 8003336:	f001 fb79 	bl	8004a2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800333a:	2021      	movs	r0, #33	; 0x21
 800333c:	f001 fb92 	bl	8004a64 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 6, 0);
 8003340:	2200      	movs	r2, #0
 8003342:	2106      	movs	r1, #6
 8003344:	2022      	movs	r0, #34	; 0x22
 8003346:	f001 fb71 	bl	8004a2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800334a:	2022      	movs	r0, #34	; 0x22
 800334c:	f001 fb8a 	bl	8004a64 <HAL_NVIC_EnableIRQ>
}
 8003350:	bf00      	nop
 8003352:	37c0      	adds	r7, #192	; 0xc0
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	40005400 	.word	0x40005400
 800335c:	40021000 	.word	0x40021000
 8003360:	48000400 	.word	0x48000400
 8003364:	40005800 	.word	0x40005800

08003368 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b0b0      	sub	sp, #192	; 0xc0
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003370:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	605a      	str	r2, [r3, #4]
 800337a:	609a      	str	r2, [r3, #8]
 800337c:	60da      	str	r2, [r3, #12]
 800337e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003380:	f107 0318 	add.w	r3, r7, #24
 8003384:	2294      	movs	r2, #148	; 0x94
 8003386:	2100      	movs	r1, #0
 8003388:	4618      	mov	r0, r3
 800338a:	f007 fb23 	bl	800a9d4 <memset>
  if(hospi->Instance==OCTOSPI1)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a28      	ldr	r2, [pc, #160]	; (8003434 <HAL_OSPI_MspInit+0xcc>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d149      	bne.n	800342c <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8003398:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800339c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800339e:	2300      	movs	r3, #0
 80033a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033a4:	f107 0318 	add.w	r3, r7, #24
 80033a8:	4618      	mov	r0, r3
 80033aa:	f004 fd03 	bl	8007db4 <HAL_RCCEx_PeriphCLKConfig>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 80033b4:	f7ff fe58 	bl	8003068 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 80033b8:	4b1f      	ldr	r3, [pc, #124]	; (8003438 <HAL_OSPI_MspInit+0xd0>)
 80033ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033bc:	4a1e      	ldr	r2, [pc, #120]	; (8003438 <HAL_OSPI_MspInit+0xd0>)
 80033be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033c4:	4b1c      	ldr	r3, [pc, #112]	; (8003438 <HAL_OSPI_MspInit+0xd0>)
 80033c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033cc:	617b      	str	r3, [r7, #20]
 80033ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80033d0:	4b19      	ldr	r3, [pc, #100]	; (8003438 <HAL_OSPI_MspInit+0xd0>)
 80033d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033d4:	4a18      	ldr	r2, [pc, #96]	; (8003438 <HAL_OSPI_MspInit+0xd0>)
 80033d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033da:	6513      	str	r3, [r2, #80]	; 0x50
 80033dc:	4b16      	ldr	r3, [pc, #88]	; (8003438 <HAL_OSPI_MspInit+0xd0>)
 80033de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e4:	613b      	str	r3, [r7, #16]
 80033e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80033e8:	4b13      	ldr	r3, [pc, #76]	; (8003438 <HAL_OSPI_MspInit+0xd0>)
 80033ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ec:	4a12      	ldr	r2, [pc, #72]	; (8003438 <HAL_OSPI_MspInit+0xd0>)
 80033ee:	f043 0310 	orr.w	r3, r3, #16
 80033f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033f4:	4b10      	ldr	r3, [pc, #64]	; (8003438 <HAL_OSPI_MspInit+0xd0>)
 80033f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033f8:	f003 0310 	and.w	r3, r3, #16
 80033fc:	60fb      	str	r3, [r7, #12]
 80033fe:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8003400:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8003404:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003408:	2302      	movs	r3, #2
 800340a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340e:	2300      	movs	r3, #0
 8003410:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003414:	2303      	movs	r3, #3
 8003416:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800341a:	230a      	movs	r3, #10
 800341c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003420:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003424:	4619      	mov	r1, r3
 8003426:	4805      	ldr	r0, [pc, #20]	; (800343c <HAL_OSPI_MspInit+0xd4>)
 8003428:	f001 ff72 	bl	8005310 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 800342c:	bf00      	nop
 800342e:	37c0      	adds	r7, #192	; 0xc0
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	a0001000 	.word	0xa0001000
 8003438:	40021000 	.word	0x40021000
 800343c:	48001000 	.word	0x48001000

08003440 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b08c      	sub	sp, #48	; 0x30
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003448:	f107 031c 	add.w	r3, r7, #28
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	605a      	str	r2, [r3, #4]
 8003452:	609a      	str	r2, [r3, #8]
 8003454:	60da      	str	r2, [r3, #12]
 8003456:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a43      	ldr	r2, [pc, #268]	; (800356c <HAL_SPI_MspInit+0x12c>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d152      	bne.n	8003508 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003462:	4b43      	ldr	r3, [pc, #268]	; (8003570 <HAL_SPI_MspInit+0x130>)
 8003464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003466:	4a42      	ldr	r2, [pc, #264]	; (8003570 <HAL_SPI_MspInit+0x130>)
 8003468:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800346c:	6613      	str	r3, [r2, #96]	; 0x60
 800346e:	4b40      	ldr	r3, [pc, #256]	; (8003570 <HAL_SPI_MspInit+0x130>)
 8003470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003472:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003476:	61bb      	str	r3, [r7, #24]
 8003478:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800347a:	4b3d      	ldr	r3, [pc, #244]	; (8003570 <HAL_SPI_MspInit+0x130>)
 800347c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800347e:	4a3c      	ldr	r2, [pc, #240]	; (8003570 <HAL_SPI_MspInit+0x130>)
 8003480:	f043 0301 	orr.w	r3, r3, #1
 8003484:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003486:	4b3a      	ldr	r3, [pc, #232]	; (8003570 <HAL_SPI_MspInit+0x130>)
 8003488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	617b      	str	r3, [r7, #20]
 8003490:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8003492:	23e0      	movs	r3, #224	; 0xe0
 8003494:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003496:	2302      	movs	r3, #2
 8003498:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349a:	2300      	movs	r3, #0
 800349c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800349e:	2303      	movs	r3, #3
 80034a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80034a2:	2305      	movs	r3, #5
 80034a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034a6:	f107 031c 	add.w	r3, r7, #28
 80034aa:	4619      	mov	r1, r3
 80034ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034b0:	f001 ff2e 	bl	8005310 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 80034b4:	4b2f      	ldr	r3, [pc, #188]	; (8003574 <HAL_SPI_MspInit+0x134>)
 80034b6:	4a30      	ldr	r2, [pc, #192]	; (8003578 <HAL_SPI_MspInit+0x138>)
 80034b8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80034ba:	4b2e      	ldr	r3, [pc, #184]	; (8003574 <HAL_SPI_MspInit+0x134>)
 80034bc:	220b      	movs	r2, #11
 80034be:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034c0:	4b2c      	ldr	r3, [pc, #176]	; (8003574 <HAL_SPI_MspInit+0x134>)
 80034c2:	2210      	movs	r2, #16
 80034c4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034c6:	4b2b      	ldr	r3, [pc, #172]	; (8003574 <HAL_SPI_MspInit+0x134>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80034cc:	4b29      	ldr	r3, [pc, #164]	; (8003574 <HAL_SPI_MspInit+0x134>)
 80034ce:	2280      	movs	r2, #128	; 0x80
 80034d0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034d2:	4b28      	ldr	r3, [pc, #160]	; (8003574 <HAL_SPI_MspInit+0x134>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034d8:	4b26      	ldr	r3, [pc, #152]	; (8003574 <HAL_SPI_MspInit+0x134>)
 80034da:	2200      	movs	r2, #0
 80034dc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80034de:	4b25      	ldr	r3, [pc, #148]	; (8003574 <HAL_SPI_MspInit+0x134>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80034e4:	4b23      	ldr	r3, [pc, #140]	; (8003574 <HAL_SPI_MspInit+0x134>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80034ea:	4822      	ldr	r0, [pc, #136]	; (8003574 <HAL_SPI_MspInit+0x134>)
 80034ec:	f001 fbd4 	bl	8004c98 <HAL_DMA_Init>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 80034f6:	f7ff fdb7 	bl	8003068 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a1d      	ldr	r2, [pc, #116]	; (8003574 <HAL_SPI_MspInit+0x134>)
 80034fe:	655a      	str	r2, [r3, #84]	; 0x54
 8003500:	4a1c      	ldr	r2, [pc, #112]	; (8003574 <HAL_SPI_MspInit+0x134>)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003506:	e02d      	b.n	8003564 <HAL_SPI_MspInit+0x124>
  else if(hspi->Instance==SPI3)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a1b      	ldr	r2, [pc, #108]	; (800357c <HAL_SPI_MspInit+0x13c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d128      	bne.n	8003564 <HAL_SPI_MspInit+0x124>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003512:	4b17      	ldr	r3, [pc, #92]	; (8003570 <HAL_SPI_MspInit+0x130>)
 8003514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003516:	4a16      	ldr	r2, [pc, #88]	; (8003570 <HAL_SPI_MspInit+0x130>)
 8003518:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800351c:	6593      	str	r3, [r2, #88]	; 0x58
 800351e:	4b14      	ldr	r3, [pc, #80]	; (8003570 <HAL_SPI_MspInit+0x130>)
 8003520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003522:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003526:	613b      	str	r3, [r7, #16]
 8003528:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800352a:	4b11      	ldr	r3, [pc, #68]	; (8003570 <HAL_SPI_MspInit+0x130>)
 800352c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800352e:	4a10      	ldr	r2, [pc, #64]	; (8003570 <HAL_SPI_MspInit+0x130>)
 8003530:	f043 0304 	orr.w	r3, r3, #4
 8003534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003536:	4b0e      	ldr	r3, [pc, #56]	; (8003570 <HAL_SPI_MspInit+0x130>)
 8003538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353a:	f003 0304 	and.w	r3, r3, #4
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8003542:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003546:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003548:	2302      	movs	r3, #2
 800354a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354c:	2300      	movs	r3, #0
 800354e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003550:	2303      	movs	r3, #3
 8003552:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003554:	2306      	movs	r3, #6
 8003556:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003558:	f107 031c 	add.w	r3, r7, #28
 800355c:	4619      	mov	r1, r3
 800355e:	4808      	ldr	r0, [pc, #32]	; (8003580 <HAL_SPI_MspInit+0x140>)
 8003560:	f001 fed6 	bl	8005310 <HAL_GPIO_Init>
}
 8003564:	bf00      	nop
 8003566:	3730      	adds	r7, #48	; 0x30
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40013000 	.word	0x40013000
 8003570:	40021000 	.word	0x40021000
 8003574:	20000ff0 	.word	0x20000ff0
 8003578:	40020008 	.word	0x40020008
 800357c:	40003c00 	.word	0x40003c00
 8003580:	48000800 	.word	0x48000800

08003584 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b0b4      	sub	sp, #208	; 0xd0
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800358c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003590:	2200      	movs	r2, #0
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	605a      	str	r2, [r3, #4]
 8003596:	609a      	str	r2, [r3, #8]
 8003598:	60da      	str	r2, [r3, #12]
 800359a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800359c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035a0:	2294      	movs	r2, #148	; 0x94
 80035a2:	2100      	movs	r1, #0
 80035a4:	4618      	mov	r0, r3
 80035a6:	f007 fa15 	bl	800a9d4 <memset>
  if(huart->Instance==UART4)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a87      	ldr	r2, [pc, #540]	; (80037cc <HAL_UART_MspInit+0x248>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d13c      	bne.n	800362e <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80035b4:	2308      	movs	r3, #8
 80035b6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80035b8:	2300      	movs	r3, #0
 80035ba:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035c0:	4618      	mov	r0, r3
 80035c2:	f004 fbf7 	bl	8007db4 <HAL_RCCEx_PeriphCLKConfig>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80035cc:	f7ff fd4c 	bl	8003068 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80035d0:	4b7f      	ldr	r3, [pc, #508]	; (80037d0 <HAL_UART_MspInit+0x24c>)
 80035d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d4:	4a7e      	ldr	r2, [pc, #504]	; (80037d0 <HAL_UART_MspInit+0x24c>)
 80035d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80035da:	6593      	str	r3, [r2, #88]	; 0x58
 80035dc:	4b7c      	ldr	r3, [pc, #496]	; (80037d0 <HAL_UART_MspInit+0x24c>)
 80035de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035e8:	4b79      	ldr	r3, [pc, #484]	; (80037d0 <HAL_UART_MspInit+0x24c>)
 80035ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ec:	4a78      	ldr	r2, [pc, #480]	; (80037d0 <HAL_UART_MspInit+0x24c>)
 80035ee:	f043 0301 	orr.w	r3, r3, #1
 80035f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035f4:	4b76      	ldr	r3, [pc, #472]	; (80037d0 <HAL_UART_MspInit+0x24c>)
 80035f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	623b      	str	r3, [r7, #32]
 80035fe:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8003600:	2303      	movs	r3, #3
 8003602:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003606:	2302      	movs	r3, #2
 8003608:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360c:	2300      	movs	r3, #0
 800360e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003612:	2303      	movs	r3, #3
 8003614:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003618:	2308      	movs	r3, #8
 800361a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800361e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003622:	4619      	mov	r1, r3
 8003624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003628:	f001 fe72 	bl	8005310 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800362c:	e0ca      	b.n	80037c4 <HAL_UART_MspInit+0x240>
  else if(huart->Instance==USART1)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a68      	ldr	r2, [pc, #416]	; (80037d4 <HAL_UART_MspInit+0x250>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d143      	bne.n	80036c0 <HAL_UART_MspInit+0x13c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003638:	2301      	movs	r3, #1
 800363a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800363c:	2300      	movs	r3, #0
 800363e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003640:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003644:	4618      	mov	r0, r3
 8003646:	f004 fbb5 	bl	8007db4 <HAL_RCCEx_PeriphCLKConfig>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8003650:	f7ff fd0a 	bl	8003068 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003654:	4b5e      	ldr	r3, [pc, #376]	; (80037d0 <HAL_UART_MspInit+0x24c>)
 8003656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003658:	4a5d      	ldr	r2, [pc, #372]	; (80037d0 <HAL_UART_MspInit+0x24c>)
 800365a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800365e:	6613      	str	r3, [r2, #96]	; 0x60
 8003660:	4b5b      	ldr	r3, [pc, #364]	; (80037d0 <HAL_UART_MspInit+0x24c>)
 8003662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003668:	61fb      	str	r3, [r7, #28]
 800366a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800366c:	4b58      	ldr	r3, [pc, #352]	; (80037d0 <HAL_UART_MspInit+0x24c>)
 800366e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003670:	4a57      	ldr	r2, [pc, #348]	; (80037d0 <HAL_UART_MspInit+0x24c>)
 8003672:	f043 0302 	orr.w	r3, r3, #2
 8003676:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003678:	4b55      	ldr	r3, [pc, #340]	; (80037d0 <HAL_UART_MspInit+0x24c>)
 800367a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	61bb      	str	r3, [r7, #24]
 8003682:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8003684:	23c0      	movs	r3, #192	; 0xc0
 8003686:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368a:	2302      	movs	r3, #2
 800368c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003690:	2300      	movs	r3, #0
 8003692:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003696:	2303      	movs	r3, #3
 8003698:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800369c:	2307      	movs	r3, #7
 800369e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036a2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80036a6:	4619      	mov	r1, r3
 80036a8:	484b      	ldr	r0, [pc, #300]	; (80037d8 <HAL_UART_MspInit+0x254>)
 80036aa:	f001 fe31 	bl	8005310 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 80036ae:	2200      	movs	r2, #0
 80036b0:	2106      	movs	r1, #6
 80036b2:	2025      	movs	r0, #37	; 0x25
 80036b4:	f001 f9ba 	bl	8004a2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80036b8:	2025      	movs	r0, #37	; 0x25
 80036ba:	f001 f9d3 	bl	8004a64 <HAL_NVIC_EnableIRQ>
}
 80036be:	e081      	b.n	80037c4 <HAL_UART_MspInit+0x240>
  else if(huart->Instance==USART2)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a45      	ldr	r2, [pc, #276]	; (80037dc <HAL_UART_MspInit+0x258>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d13b      	bne.n	8003742 <HAL_UART_MspInit+0x1be>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80036ca:	2302      	movs	r3, #2
 80036cc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80036ce:	2300      	movs	r3, #0
 80036d0:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036d6:	4618      	mov	r0, r3
 80036d8:	f004 fb6c 	bl	8007db4 <HAL_RCCEx_PeriphCLKConfig>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <HAL_UART_MspInit+0x162>
      Error_Handler();
 80036e2:	f7ff fcc1 	bl	8003068 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80036e6:	4b3a      	ldr	r3, [pc, #232]	; (80037d0 <HAL_UART_MspInit+0x24c>)
 80036e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ea:	4a39      	ldr	r2, [pc, #228]	; (80037d0 <HAL_UART_MspInit+0x24c>)
 80036ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036f0:	6593      	str	r3, [r2, #88]	; 0x58
 80036f2:	4b37      	ldr	r3, [pc, #220]	; (80037d0 <HAL_UART_MspInit+0x24c>)
 80036f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fa:	617b      	str	r3, [r7, #20]
 80036fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036fe:	4b34      	ldr	r3, [pc, #208]	; (80037d0 <HAL_UART_MspInit+0x24c>)
 8003700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003702:	4a33      	ldr	r2, [pc, #204]	; (80037d0 <HAL_UART_MspInit+0x24c>)
 8003704:	f043 0308 	orr.w	r3, r3, #8
 8003708:	64d3      	str	r3, [r2, #76]	; 0x4c
 800370a:	4b31      	ldr	r3, [pc, #196]	; (80037d0 <HAL_UART_MspInit+0x24c>)
 800370c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800370e:	f003 0308 	and.w	r3, r3, #8
 8003712:	613b      	str	r3, [r7, #16]
 8003714:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8003716:	2378      	movs	r3, #120	; 0x78
 8003718:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800371c:	2302      	movs	r3, #2
 800371e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003722:	2300      	movs	r3, #0
 8003724:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003728:	2303      	movs	r3, #3
 800372a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800372e:	2307      	movs	r3, #7
 8003730:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003734:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003738:	4619      	mov	r1, r3
 800373a:	4829      	ldr	r0, [pc, #164]	; (80037e0 <HAL_UART_MspInit+0x25c>)
 800373c:	f001 fde8 	bl	8005310 <HAL_GPIO_Init>
}
 8003740:	e040      	b.n	80037c4 <HAL_UART_MspInit+0x240>
  else if(huart->Instance==USART3)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a27      	ldr	r2, [pc, #156]	; (80037e4 <HAL_UART_MspInit+0x260>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d13b      	bne.n	80037c4 <HAL_UART_MspInit+0x240>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800374c:	2304      	movs	r3, #4
 800374e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003750:	2300      	movs	r3, #0
 8003752:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003754:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003758:	4618      	mov	r0, r3
 800375a:	f004 fb2b 	bl	8007db4 <HAL_RCCEx_PeriphCLKConfig>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <HAL_UART_MspInit+0x1e4>
      Error_Handler();
 8003764:	f7ff fc80 	bl	8003068 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003768:	4b19      	ldr	r3, [pc, #100]	; (80037d0 <HAL_UART_MspInit+0x24c>)
 800376a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376c:	4a18      	ldr	r2, [pc, #96]	; (80037d0 <HAL_UART_MspInit+0x24c>)
 800376e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003772:	6593      	str	r3, [r2, #88]	; 0x58
 8003774:	4b16      	ldr	r3, [pc, #88]	; (80037d0 <HAL_UART_MspInit+0x24c>)
 8003776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003778:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800377c:	60fb      	str	r3, [r7, #12]
 800377e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003780:	4b13      	ldr	r3, [pc, #76]	; (80037d0 <HAL_UART_MspInit+0x24c>)
 8003782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003784:	4a12      	ldr	r2, [pc, #72]	; (80037d0 <HAL_UART_MspInit+0x24c>)
 8003786:	f043 0308 	orr.w	r3, r3, #8
 800378a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800378c:	4b10      	ldr	r3, [pc, #64]	; (80037d0 <HAL_UART_MspInit+0x24c>)
 800378e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003790:	f003 0308 	and.w	r3, r3, #8
 8003794:	60bb      	str	r3, [r7, #8]
 8003796:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8003798:	f44f 7340 	mov.w	r3, #768	; 0x300
 800379c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a0:	2302      	movs	r3, #2
 80037a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a6:	2300      	movs	r3, #0
 80037a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ac:	2303      	movs	r3, #3
 80037ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80037b2:	2307      	movs	r3, #7
 80037b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037b8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80037bc:	4619      	mov	r1, r3
 80037be:	4808      	ldr	r0, [pc, #32]	; (80037e0 <HAL_UART_MspInit+0x25c>)
 80037c0:	f001 fda6 	bl	8005310 <HAL_GPIO_Init>
}
 80037c4:	bf00      	nop
 80037c6:	37d0      	adds	r7, #208	; 0xd0
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40004c00 	.word	0x40004c00
 80037d0:	40021000 	.word	0x40021000
 80037d4:	40013800 	.word	0x40013800
 80037d8:	48000400 	.word	0x48000400
 80037dc:	40004400 	.word	0x40004400
 80037e0:	48000c00 	.word	0x48000c00
 80037e4:	40004800 	.word	0x40004800

080037e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b08e      	sub	sp, #56	; 0x38
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80037f0:	2300      	movs	r3, #0
 80037f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80037f6:	4b34      	ldr	r3, [pc, #208]	; (80038c8 <HAL_InitTick+0xe0>)
 80037f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fa:	4a33      	ldr	r2, [pc, #204]	; (80038c8 <HAL_InitTick+0xe0>)
 80037fc:	f043 0310 	orr.w	r3, r3, #16
 8003800:	6593      	str	r3, [r2, #88]	; 0x58
 8003802:	4b31      	ldr	r3, [pc, #196]	; (80038c8 <HAL_InitTick+0xe0>)
 8003804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003806:	f003 0310 	and.w	r3, r3, #16
 800380a:	60fb      	str	r3, [r7, #12]
 800380c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800380e:	f107 0210 	add.w	r2, r7, #16
 8003812:	f107 0314 	add.w	r3, r7, #20
 8003816:	4611      	mov	r1, r2
 8003818:	4618      	mov	r0, r3
 800381a:	f004 f9d9 	bl	8007bd0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800381e:	6a3b      	ldr	r3, [r7, #32]
 8003820:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003824:	2b00      	cmp	r3, #0
 8003826:	d103      	bne.n	8003830 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003828:	f004 f9a6 	bl	8007b78 <HAL_RCC_GetPCLK1Freq>
 800382c:	6378      	str	r0, [r7, #52]	; 0x34
 800382e:	e004      	b.n	800383a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003830:	f004 f9a2 	bl	8007b78 <HAL_RCC_GetPCLK1Freq>
 8003834:	4603      	mov	r3, r0
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800383a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800383c:	4a23      	ldr	r2, [pc, #140]	; (80038cc <HAL_InitTick+0xe4>)
 800383e:	fba2 2303 	umull	r2, r3, r2, r3
 8003842:	0c9b      	lsrs	r3, r3, #18
 8003844:	3b01      	subs	r3, #1
 8003846:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003848:	4b21      	ldr	r3, [pc, #132]	; (80038d0 <HAL_InitTick+0xe8>)
 800384a:	4a22      	ldr	r2, [pc, #136]	; (80038d4 <HAL_InitTick+0xec>)
 800384c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800384e:	4b20      	ldr	r3, [pc, #128]	; (80038d0 <HAL_InitTick+0xe8>)
 8003850:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003854:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003856:	4a1e      	ldr	r2, [pc, #120]	; (80038d0 <HAL_InitTick+0xe8>)
 8003858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800385c:	4b1c      	ldr	r3, [pc, #112]	; (80038d0 <HAL_InitTick+0xe8>)
 800385e:	2200      	movs	r2, #0
 8003860:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003862:	4b1b      	ldr	r3, [pc, #108]	; (80038d0 <HAL_InitTick+0xe8>)
 8003864:	2200      	movs	r2, #0
 8003866:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003868:	4b19      	ldr	r3, [pc, #100]	; (80038d0 <HAL_InitTick+0xe8>)
 800386a:	2200      	movs	r2, #0
 800386c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800386e:	4818      	ldr	r0, [pc, #96]	; (80038d0 <HAL_InitTick+0xe8>)
 8003870:	f005 fb60 	bl	8008f34 <HAL_TIM_Base_Init>
 8003874:	4603      	mov	r3, r0
 8003876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800387a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800387e:	2b00      	cmp	r3, #0
 8003880:	d11b      	bne.n	80038ba <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003882:	4813      	ldr	r0, [pc, #76]	; (80038d0 <HAL_InitTick+0xe8>)
 8003884:	f005 fbb8 	bl	8008ff8 <HAL_TIM_Base_Start_IT>
 8003888:	4603      	mov	r3, r0
 800388a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800388e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003892:	2b00      	cmp	r3, #0
 8003894:	d111      	bne.n	80038ba <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003896:	2036      	movs	r0, #54	; 0x36
 8003898:	f001 f8e4 	bl	8004a64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b0f      	cmp	r3, #15
 80038a0:	d808      	bhi.n	80038b4 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80038a2:	2200      	movs	r2, #0
 80038a4:	6879      	ldr	r1, [r7, #4]
 80038a6:	2036      	movs	r0, #54	; 0x36
 80038a8:	f001 f8c0 	bl	8004a2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80038ac:	4a0a      	ldr	r2, [pc, #40]	; (80038d8 <HAL_InitTick+0xf0>)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6013      	str	r3, [r2, #0]
 80038b2:	e002      	b.n	80038ba <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80038ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3738      	adds	r7, #56	; 0x38
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	40021000 	.word	0x40021000
 80038cc:	431bde83 	.word	0x431bde83
 80038d0:	200012a4 	.word	0x200012a4
 80038d4:	40001000 	.word	0x40001000
 80038d8:	20000050 	.word	0x20000050

080038dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80038e0:	e7fe      	b.n	80038e0 <NMI_Handler+0x4>

080038e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038e2:	b480      	push	{r7}
 80038e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038e6:	e7fe      	b.n	80038e6 <HardFault_Handler+0x4>

080038e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038ec:	e7fe      	b.n	80038ec <MemManage_Handler+0x4>

080038ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038ee:	b480      	push	{r7}
 80038f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038f2:	e7fe      	b.n	80038f2 <BusFault_Handler+0x4>

080038f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038f8:	e7fe      	b.n	80038f8 <UsageFault_Handler+0x4>

080038fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038fa:	b480      	push	{r7}
 80038fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038fe:	bf00      	nop
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800390c:	4802      	ldr	r0, [pc, #8]	; (8003918 <DMA1_Channel1_IRQHandler+0x10>)
 800390e:	f001 fba1 	bl	8005054 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003912:	bf00      	nop
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	20000ff0 	.word	0x20000ff0

0800391c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8003920:	2020      	movs	r0, #32
 8003922:	f001 fe9f 	bl	8005664 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8003926:	2040      	movs	r0, #64	; 0x40
 8003928:	f001 fe9c 	bl	8005664 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 800392c:	2080      	movs	r0, #128	; 0x80
 800392e:	f001 fe99 	bl	8005664 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8003932:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003936:	f001 fe95 	bl	8005664 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800393a:	bf00      	nop
 800393c:	bd80      	pop	{r7, pc}
	...

08003940 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003944:	4802      	ldr	r0, [pc, #8]	; (8003950 <I2C2_EV_IRQHandler+0x10>)
 8003946:	f001 ff40 	bl	80057ca <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800394a:	bf00      	nop
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	20000e84 	.word	0x20000e84

08003954 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8003958:	4802      	ldr	r0, [pc, #8]	; (8003964 <I2C2_ER_IRQHandler+0x10>)
 800395a:	f001 ff50 	bl	80057fe <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800395e:	bf00      	nop
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	20000e84 	.word	0x20000e84

08003968 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800396c:	4802      	ldr	r0, [pc, #8]	; (8003978 <USART1_IRQHandler+0x10>)
 800396e:	f005 fe75 	bl	800965c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003972:	bf00      	nop
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	200010e4 	.word	0x200010e4

0800397c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 8003980:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003984:	f001 fe6e 	bl	8005664 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8003988:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800398c:	f001 fe6a 	bl	8005664 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 8003990:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003994:	f001 fe66 	bl	8005664 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8003998:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800399c:	f001 fe62 	bl	8005664 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80039a0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80039a4:	f001 fe5e 	bl	8005664 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80039a8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80039ac:	f001 fe5a 	bl	8005664 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80039b0:	bf00      	nop
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80039b8:	4802      	ldr	r0, [pc, #8]	; (80039c4 <TIM6_DAC_IRQHandler+0x10>)
 80039ba:	f005 fb8d 	bl	80090d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80039be:	bf00      	nop
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	200012a4 	.word	0x200012a4

080039c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80039cc:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <SystemInit+0x20>)
 80039ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d2:	4a05      	ldr	r2, [pc, #20]	; (80039e8 <SystemInit+0x20>)
 80039d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80039dc:	bf00      	nop
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	e000ed00 	.word	0xe000ed00

080039ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80039ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a24 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80039f0:	f7ff ffea 	bl	80039c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80039f4:	480c      	ldr	r0, [pc, #48]	; (8003a28 <LoopForever+0x6>)
  ldr r1, =_edata
 80039f6:	490d      	ldr	r1, [pc, #52]	; (8003a2c <LoopForever+0xa>)
  ldr r2, =_sidata
 80039f8:	4a0d      	ldr	r2, [pc, #52]	; (8003a30 <LoopForever+0xe>)
  movs r3, #0
 80039fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039fc:	e002      	b.n	8003a04 <LoopCopyDataInit>

080039fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a02:	3304      	adds	r3, #4

08003a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a08:	d3f9      	bcc.n	80039fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a0a:	4a0a      	ldr	r2, [pc, #40]	; (8003a34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a0c:	4c0a      	ldr	r4, [pc, #40]	; (8003a38 <LoopForever+0x16>)
  movs r3, #0
 8003a0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a10:	e001      	b.n	8003a16 <LoopFillZerobss>

08003a12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a14:	3204      	adds	r2, #4

08003a16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a18:	d3fb      	bcc.n	8003a12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a1a:	f006 ffe3 	bl	800a9e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003a1e:	f7fe fbaf 	bl	8002180 <main>

08003a22 <LoopForever>:

LoopForever:
    b LoopForever
 8003a22:	e7fe      	b.n	8003a22 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003a24:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8003a28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a2c:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8003a30:	0800b364 	.word	0x0800b364
  ldr r2, =_sbss
 8003a34:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8003a38:	20001318 	.word	0x20001318

08003a3c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003a3c:	e7fe      	b.n	8003a3c <ADC1_IRQHandler>

08003a3e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b082      	sub	sp, #8
 8003a42:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003a44:	2300      	movs	r3, #0
 8003a46:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a48:	2003      	movs	r0, #3
 8003a4a:	f000 ffe4 	bl	8004a16 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a4e:	200f      	movs	r0, #15
 8003a50:	f7ff feca 	bl	80037e8 <HAL_InitTick>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d002      	beq.n	8003a60 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	71fb      	strb	r3, [r7, #7]
 8003a5e:	e001      	b.n	8003a64 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003a60:	f7ff fb08 	bl	8003074 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003a64:	79fb      	ldrb	r3, [r7, #7]
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
	...

08003a70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a70:	b480      	push	{r7}
 8003a72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a74:	4b06      	ldr	r3, [pc, #24]	; (8003a90 <HAL_IncTick+0x20>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	461a      	mov	r2, r3
 8003a7a:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <HAL_IncTick+0x24>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4413      	add	r3, r2
 8003a80:	4a04      	ldr	r2, [pc, #16]	; (8003a94 <HAL_IncTick+0x24>)
 8003a82:	6013      	str	r3, [r2, #0]
}
 8003a84:	bf00      	nop
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	20000054 	.word	0x20000054
 8003a94:	200012f0 	.word	0x200012f0

08003a98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8003a9c:	4b03      	ldr	r3, [pc, #12]	; (8003aac <HAL_GetTick+0x14>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	200012f0 	.word	0x200012f0

08003ab0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ab8:	f7ff ffee 	bl	8003a98 <HAL_GetTick>
 8003abc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac8:	d005      	beq.n	8003ad6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003aca:	4b0a      	ldr	r3, [pc, #40]	; (8003af4 <HAL_Delay+0x44>)
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ad6:	bf00      	nop
 8003ad8:	f7ff ffde 	bl	8003a98 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d8f7      	bhi.n	8003ad8 <HAL_Delay+0x28>
  {
  }
}
 8003ae8:	bf00      	nop
 8003aea:	bf00      	nop
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	20000054 	.word	0x20000054

08003af8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	609a      	str	r2, [r3, #8]
}
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b083      	sub	sp, #12
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
 8003b26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	609a      	str	r2, [r3, #8]
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b087      	sub	sp, #28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
 8003b6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	3360      	adds	r3, #96	; 0x60
 8003b72:	461a      	mov	r2, r3
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	4b08      	ldr	r3, [pc, #32]	; (8003ba4 <LL_ADC_SetOffset+0x44>)
 8003b82:	4013      	ands	r3, r2
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003b98:	bf00      	nop
 8003b9a:	371c      	adds	r7, #28
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr
 8003ba4:	03fff000 	.word	0x03fff000

08003ba8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	3360      	adds	r3, #96	; 0x60
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3714      	adds	r7, #20
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b087      	sub	sp, #28
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	3360      	adds	r3, #96	; 0x60
 8003be4:	461a      	mov	r2, r3
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003bfe:	bf00      	nop
 8003c00:	371c      	adds	r7, #28
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
 8003c12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	615a      	str	r2, [r3, #20]
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b087      	sub	sp, #28
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	3330      	adds	r3, #48	; 0x30
 8003c40:	461a      	mov	r2, r3
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	0a1b      	lsrs	r3, r3, #8
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	f003 030c 	and.w	r3, r3, #12
 8003c4c:	4413      	add	r3, r2
 8003c4e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	f003 031f 	and.w	r3, r3, #31
 8003c5a:	211f      	movs	r1, #31
 8003c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c60:	43db      	mvns	r3, r3
 8003c62:	401a      	ands	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	0e9b      	lsrs	r3, r3, #26
 8003c68:	f003 011f 	and.w	r1, r3, #31
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	f003 031f 	and.w	r3, r3, #31
 8003c72:	fa01 f303 	lsl.w	r3, r1, r3
 8003c76:	431a      	orrs	r2, r3
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003c7c:	bf00      	nop
 8003c7e:	371c      	adds	r7, #28
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b087      	sub	sp, #28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	3314      	adds	r3, #20
 8003c98:	461a      	mov	r2, r3
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	0e5b      	lsrs	r3, r3, #25
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	4413      	add	r3, r2
 8003ca6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	0d1b      	lsrs	r3, r3, #20
 8003cb0:	f003 031f 	and.w	r3, r3, #31
 8003cb4:	2107      	movs	r1, #7
 8003cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cba:	43db      	mvns	r3, r3
 8003cbc:	401a      	ands	r2, r3
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	0d1b      	lsrs	r3, r3, #20
 8003cc2:	f003 031f 	and.w	r3, r3, #31
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003cd2:	bf00      	nop
 8003cd4:	371c      	adds	r7, #28
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
	...

08003ce0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cf8:	43db      	mvns	r3, r3
 8003cfa:	401a      	ands	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f003 0318 	and.w	r3, r3, #24
 8003d02:	4908      	ldr	r1, [pc, #32]	; (8003d24 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003d04:	40d9      	lsrs	r1, r3
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	400b      	ands	r3, r1
 8003d0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003d16:	bf00      	nop
 8003d18:	3714      	adds	r7, #20
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	0007ffff 	.word	0x0007ffff

08003d28 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003d38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	6093      	str	r3, [r2, #8]
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d60:	d101      	bne.n	8003d66 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003d62:	2301      	movs	r3, #1
 8003d64:	e000      	b.n	8003d68 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003d84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d88:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003db0:	d101      	bne.n	8003db6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003db2:	2301      	movs	r3, #1
 8003db4:	e000      	b.n	8003db8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d101      	bne.n	8003ddc <LL_ADC_IsEnabled+0x18>
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e000      	b.n	8003dde <LL_ADC_IsEnabled+0x1a>
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 0304 	and.w	r3, r3, #4
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d101      	bne.n	8003e02 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e000      	b.n	8003e04 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f003 0308 	and.w	r3, r3, #8
 8003e20:	2b08      	cmp	r3, #8
 8003e22:	d101      	bne.n	8003e28 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003e24:	2301      	movs	r3, #1
 8003e26:	e000      	b.n	8003e2a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
	...

08003e38 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b088      	sub	sp, #32
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e40:	2300      	movs	r3, #0
 8003e42:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003e44:	2300      	movs	r3, #0
 8003e46:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e129      	b.n	80040a6 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d109      	bne.n	8003e74 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f7ff f92b 	bl	80030bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7ff ff67 	bl	8003d4c <LL_ADC_IsDeepPowerDownEnabled>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d004      	beq.n	8003e8e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7ff ff4d 	bl	8003d28 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7ff ff82 	bl	8003d9c <LL_ADC_IsInternalRegulatorEnabled>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d115      	bne.n	8003eca <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7ff ff66 	bl	8003d74 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ea8:	4b81      	ldr	r3, [pc, #516]	; (80040b0 <HAL_ADC_Init+0x278>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	099b      	lsrs	r3, r3, #6
 8003eae:	4a81      	ldr	r2, [pc, #516]	; (80040b4 <HAL_ADC_Init+0x27c>)
 8003eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb4:	099b      	lsrs	r3, r3, #6
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003ebc:	e002      	b.n	8003ec4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1f9      	bne.n	8003ebe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7ff ff64 	bl	8003d9c <LL_ADC_IsInternalRegulatorEnabled>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10d      	bne.n	8003ef6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ede:	f043 0210 	orr.w	r2, r3, #16
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eea:	f043 0201 	orr.w	r2, r3, #1
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7ff ff75 	bl	8003dea <LL_ADC_REG_IsConversionOngoing>
 8003f00:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f06:	f003 0310 	and.w	r3, r3, #16
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f040 80c2 	bne.w	8004094 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f040 80be 	bne.w	8004094 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003f20:	f043 0202 	orr.w	r2, r3, #2
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff ff49 	bl	8003dc4 <LL_ADC_IsEnabled>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10b      	bne.n	8003f50 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f38:	485f      	ldr	r0, [pc, #380]	; (80040b8 <HAL_ADC_Init+0x280>)
 8003f3a:	f7ff ff43 	bl	8003dc4 <LL_ADC_IsEnabled>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d105      	bne.n	8003f50 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	4619      	mov	r1, r3
 8003f4a:	485c      	ldr	r0, [pc, #368]	; (80040bc <HAL_ADC_Init+0x284>)
 8003f4c:	f7ff fdd4 	bl	8003af8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	7e5b      	ldrb	r3, [r3, #25]
 8003f54:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f5a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003f60:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003f66:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f6e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f70:	4313      	orrs	r3, r2
 8003f72:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d106      	bne.n	8003f8c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	3b01      	subs	r3, #1
 8003f84:	045b      	lsls	r3, r3, #17
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d009      	beq.n	8003fa8 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f98:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68da      	ldr	r2, [r3, #12]
 8003fae:	4b44      	ldr	r3, [pc, #272]	; (80040c0 <HAL_ADC_Init+0x288>)
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	6812      	ldr	r2, [r2, #0]
 8003fb6:	69b9      	ldr	r1, [r7, #24]
 8003fb8:	430b      	orrs	r3, r1
 8003fba:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7ff ff25 	bl	8003e10 <LL_ADC_INJ_IsConversionOngoing>
 8003fc6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d140      	bne.n	8004050 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d13d      	bne.n	8004050 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	7e1b      	ldrb	r3, [r3, #24]
 8003fdc:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003fde:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003fe6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ff6:	f023 0306 	bic.w	r3, r3, #6
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6812      	ldr	r2, [r2, #0]
 8003ffe:	69b9      	ldr	r1, [r7, #24]
 8004000:	430b      	orrs	r3, r1
 8004002:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800400a:	2b01      	cmp	r3, #1
 800400c:	d118      	bne.n	8004040 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004018:	f023 0304 	bic.w	r3, r3, #4
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004024:	4311      	orrs	r1, r2
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800402a:	4311      	orrs	r1, r2
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004030:	430a      	orrs	r2, r1
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f042 0201 	orr.w	r2, r2, #1
 800403c:	611a      	str	r2, [r3, #16]
 800403e:	e007      	b.n	8004050 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	691a      	ldr	r2, [r3, #16]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 0201 	bic.w	r2, r2, #1
 800404e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d10c      	bne.n	8004072 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405e:	f023 010f 	bic.w	r1, r3, #15
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	1e5a      	subs	r2, r3, #1
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	631a      	str	r2, [r3, #48]	; 0x30
 8004070:	e007      	b.n	8004082 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 020f 	bic.w	r2, r2, #15
 8004080:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004086:	f023 0303 	bic.w	r3, r3, #3
 800408a:	f043 0201 	orr.w	r2, r3, #1
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	659a      	str	r2, [r3, #88]	; 0x58
 8004092:	e007      	b.n	80040a4 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004098:	f043 0210 	orr.w	r2, r3, #16
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80040a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3720      	adds	r7, #32
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	2000004c 	.word	0x2000004c
 80040b4:	053e2d63 	.word	0x053e2d63
 80040b8:	50040000 	.word	0x50040000
 80040bc:	50040300 	.word	0x50040300
 80040c0:	fff0c007 	.word	0xfff0c007

080040c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b0b6      	sub	sp, #216	; 0xd8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040ce:	2300      	movs	r3, #0
 80040d0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80040d4:	2300      	movs	r3, #0
 80040d6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d101      	bne.n	80040e6 <HAL_ADC_ConfigChannel+0x22>
 80040e2:	2302      	movs	r3, #2
 80040e4:	e3d5      	b.n	8004892 <HAL_ADC_ConfigChannel+0x7ce>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7ff fe79 	bl	8003dea <LL_ADC_REG_IsConversionOngoing>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f040 83ba 	bne.w	8004874 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	2b05      	cmp	r3, #5
 800410e:	d824      	bhi.n	800415a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	3b02      	subs	r3, #2
 8004116:	2b03      	cmp	r3, #3
 8004118:	d81b      	bhi.n	8004152 <HAL_ADC_ConfigChannel+0x8e>
 800411a:	a201      	add	r2, pc, #4	; (adr r2, 8004120 <HAL_ADC_ConfigChannel+0x5c>)
 800411c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004120:	08004131 	.word	0x08004131
 8004124:	08004139 	.word	0x08004139
 8004128:	08004141 	.word	0x08004141
 800412c:	08004149 	.word	0x08004149
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8004130:	230c      	movs	r3, #12
 8004132:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004136:	e010      	b.n	800415a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8004138:	2312      	movs	r3, #18
 800413a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800413e:	e00c      	b.n	800415a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8004140:	2318      	movs	r3, #24
 8004142:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004146:	e008      	b.n	800415a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8004148:	f44f 7380 	mov.w	r3, #256	; 0x100
 800414c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004150:	e003      	b.n	800415a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8004152:	2306      	movs	r3, #6
 8004154:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004158:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6818      	ldr	r0, [r3, #0]
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	461a      	mov	r2, r3
 8004164:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004168:	f7ff fd62 	bl	8003c30 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4618      	mov	r0, r3
 8004172:	f7ff fe3a 	bl	8003dea <LL_ADC_REG_IsConversionOngoing>
 8004176:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4618      	mov	r0, r3
 8004180:	f7ff fe46 	bl	8003e10 <LL_ADC_INJ_IsConversionOngoing>
 8004184:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004188:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800418c:	2b00      	cmp	r3, #0
 800418e:	f040 81bf 	bne.w	8004510 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004192:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004196:	2b00      	cmp	r3, #0
 8004198:	f040 81ba 	bne.w	8004510 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041a4:	d10f      	bne.n	80041c6 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6818      	ldr	r0, [r3, #0]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2200      	movs	r2, #0
 80041b0:	4619      	mov	r1, r3
 80041b2:	f7ff fd69 	bl	8003c88 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80041be:	4618      	mov	r0, r3
 80041c0:	f7ff fd23 	bl	8003c0a <LL_ADC_SetSamplingTimeCommonConfig>
 80041c4:	e00e      	b.n	80041e4 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6818      	ldr	r0, [r3, #0]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	6819      	ldr	r1, [r3, #0]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	461a      	mov	r2, r3
 80041d4:	f7ff fd58 	bl	8003c88 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2100      	movs	r1, #0
 80041de:	4618      	mov	r0, r3
 80041e0:	f7ff fd13 	bl	8003c0a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	695a      	ldr	r2, [r3, #20]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	08db      	lsrs	r3, r3, #3
 80041f0:	f003 0303 	and.w	r3, r3, #3
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	fa02 f303 	lsl.w	r3, r2, r3
 80041fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	2b04      	cmp	r3, #4
 8004204:	d00a      	beq.n	800421c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6818      	ldr	r0, [r3, #0]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	6919      	ldr	r1, [r3, #16]
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004216:	f7ff fca3 	bl	8003b60 <LL_ADC_SetOffset>
 800421a:	e179      	b.n	8004510 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2100      	movs	r1, #0
 8004222:	4618      	mov	r0, r3
 8004224:	f7ff fcc0 	bl	8003ba8 <LL_ADC_GetOffsetChannel>
 8004228:	4603      	mov	r3, r0
 800422a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10a      	bne.n	8004248 <HAL_ADC_ConfigChannel+0x184>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2100      	movs	r1, #0
 8004238:	4618      	mov	r0, r3
 800423a:	f7ff fcb5 	bl	8003ba8 <LL_ADC_GetOffsetChannel>
 800423e:	4603      	mov	r3, r0
 8004240:	0e9b      	lsrs	r3, r3, #26
 8004242:	f003 021f 	and.w	r2, r3, #31
 8004246:	e01e      	b.n	8004286 <HAL_ADC_ConfigChannel+0x1c2>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2100      	movs	r1, #0
 800424e:	4618      	mov	r0, r3
 8004250:	f7ff fcaa 	bl	8003ba8 <LL_ADC_GetOffsetChannel>
 8004254:	4603      	mov	r3, r0
 8004256:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800425e:	fa93 f3a3 	rbit	r3, r3
 8004262:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004266:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800426a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800426e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8004276:	2320      	movs	r3, #32
 8004278:	e004      	b.n	8004284 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800427a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800427e:	fab3 f383 	clz	r3, r3
 8004282:	b2db      	uxtb	r3, r3
 8004284:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800428e:	2b00      	cmp	r3, #0
 8004290:	d105      	bne.n	800429e <HAL_ADC_ConfigChannel+0x1da>
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	0e9b      	lsrs	r3, r3, #26
 8004298:	f003 031f 	and.w	r3, r3, #31
 800429c:	e018      	b.n	80042d0 <HAL_ADC_ConfigChannel+0x20c>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042aa:	fa93 f3a3 	rbit	r3, r3
 80042ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80042b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80042b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80042ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80042c2:	2320      	movs	r3, #32
 80042c4:	e004      	b.n	80042d0 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80042c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80042ca:	fab3 f383 	clz	r3, r3
 80042ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d106      	bne.n	80042e2 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2200      	movs	r2, #0
 80042da:	2100      	movs	r1, #0
 80042dc:	4618      	mov	r0, r3
 80042de:	f7ff fc79 	bl	8003bd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2101      	movs	r1, #1
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7ff fc5d 	bl	8003ba8 <LL_ADC_GetOffsetChannel>
 80042ee:	4603      	mov	r3, r0
 80042f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10a      	bne.n	800430e <HAL_ADC_ConfigChannel+0x24a>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2101      	movs	r1, #1
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff fc52 	bl	8003ba8 <LL_ADC_GetOffsetChannel>
 8004304:	4603      	mov	r3, r0
 8004306:	0e9b      	lsrs	r3, r3, #26
 8004308:	f003 021f 	and.w	r2, r3, #31
 800430c:	e01e      	b.n	800434c <HAL_ADC_ConfigChannel+0x288>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2101      	movs	r1, #1
 8004314:	4618      	mov	r0, r3
 8004316:	f7ff fc47 	bl	8003ba8 <LL_ADC_GetOffsetChannel>
 800431a:	4603      	mov	r3, r0
 800431c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004320:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004324:	fa93 f3a3 	rbit	r3, r3
 8004328:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800432c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004330:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004334:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004338:	2b00      	cmp	r3, #0
 800433a:	d101      	bne.n	8004340 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 800433c:	2320      	movs	r3, #32
 800433e:	e004      	b.n	800434a <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8004340:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004344:	fab3 f383 	clz	r3, r3
 8004348:	b2db      	uxtb	r3, r3
 800434a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004354:	2b00      	cmp	r3, #0
 8004356:	d105      	bne.n	8004364 <HAL_ADC_ConfigChannel+0x2a0>
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	0e9b      	lsrs	r3, r3, #26
 800435e:	f003 031f 	and.w	r3, r3, #31
 8004362:	e018      	b.n	8004396 <HAL_ADC_ConfigChannel+0x2d2>
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004370:	fa93 f3a3 	rbit	r3, r3
 8004374:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004378:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800437c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004380:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8004388:	2320      	movs	r3, #32
 800438a:	e004      	b.n	8004396 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 800438c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004390:	fab3 f383 	clz	r3, r3
 8004394:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004396:	429a      	cmp	r2, r3
 8004398:	d106      	bne.n	80043a8 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2200      	movs	r2, #0
 80043a0:	2101      	movs	r1, #1
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff fc16 	bl	8003bd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2102      	movs	r1, #2
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7ff fbfa 	bl	8003ba8 <LL_ADC_GetOffsetChannel>
 80043b4:	4603      	mov	r3, r0
 80043b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10a      	bne.n	80043d4 <HAL_ADC_ConfigChannel+0x310>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2102      	movs	r1, #2
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7ff fbef 	bl	8003ba8 <LL_ADC_GetOffsetChannel>
 80043ca:	4603      	mov	r3, r0
 80043cc:	0e9b      	lsrs	r3, r3, #26
 80043ce:	f003 021f 	and.w	r2, r3, #31
 80043d2:	e01e      	b.n	8004412 <HAL_ADC_ConfigChannel+0x34e>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2102      	movs	r1, #2
 80043da:	4618      	mov	r0, r3
 80043dc:	f7ff fbe4 	bl	8003ba8 <LL_ADC_GetOffsetChannel>
 80043e0:	4603      	mov	r3, r0
 80043e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043ea:	fa93 f3a3 	rbit	r3, r3
 80043ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80043f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80043fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8004402:	2320      	movs	r3, #32
 8004404:	e004      	b.n	8004410 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8004406:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800440a:	fab3 f383 	clz	r3, r3
 800440e:	b2db      	uxtb	r3, r3
 8004410:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800441a:	2b00      	cmp	r3, #0
 800441c:	d105      	bne.n	800442a <HAL_ADC_ConfigChannel+0x366>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	0e9b      	lsrs	r3, r3, #26
 8004424:	f003 031f 	and.w	r3, r3, #31
 8004428:	e014      	b.n	8004454 <HAL_ADC_ConfigChannel+0x390>
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004430:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004432:	fa93 f3a3 	rbit	r3, r3
 8004436:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004438:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800443a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800443e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8004446:	2320      	movs	r3, #32
 8004448:	e004      	b.n	8004454 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800444a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800444e:	fab3 f383 	clz	r3, r3
 8004452:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004454:	429a      	cmp	r2, r3
 8004456:	d106      	bne.n	8004466 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2200      	movs	r2, #0
 800445e:	2102      	movs	r1, #2
 8004460:	4618      	mov	r0, r3
 8004462:	f7ff fbb7 	bl	8003bd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2103      	movs	r1, #3
 800446c:	4618      	mov	r0, r3
 800446e:	f7ff fb9b 	bl	8003ba8 <LL_ADC_GetOffsetChannel>
 8004472:	4603      	mov	r3, r0
 8004474:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10a      	bne.n	8004492 <HAL_ADC_ConfigChannel+0x3ce>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2103      	movs	r1, #3
 8004482:	4618      	mov	r0, r3
 8004484:	f7ff fb90 	bl	8003ba8 <LL_ADC_GetOffsetChannel>
 8004488:	4603      	mov	r3, r0
 800448a:	0e9b      	lsrs	r3, r3, #26
 800448c:	f003 021f 	and.w	r2, r3, #31
 8004490:	e017      	b.n	80044c2 <HAL_ADC_ConfigChannel+0x3fe>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2103      	movs	r1, #3
 8004498:	4618      	mov	r0, r3
 800449a:	f7ff fb85 	bl	8003ba8 <LL_ADC_GetOffsetChannel>
 800449e:	4603      	mov	r3, r0
 80044a0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044a4:	fa93 f3a3 	rbit	r3, r3
 80044a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80044aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ac:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80044ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80044b4:	2320      	movs	r3, #32
 80044b6:	e003      	b.n	80044c0 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80044b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044ba:	fab3 f383 	clz	r3, r3
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d105      	bne.n	80044da <HAL_ADC_ConfigChannel+0x416>
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	0e9b      	lsrs	r3, r3, #26
 80044d4:	f003 031f 	and.w	r3, r3, #31
 80044d8:	e011      	b.n	80044fe <HAL_ADC_ConfigChannel+0x43a>
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044e2:	fa93 f3a3 	rbit	r3, r3
 80044e6:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80044e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044ea:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80044ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80044f2:	2320      	movs	r3, #32
 80044f4:	e003      	b.n	80044fe <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80044f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044f8:	fab3 f383 	clz	r3, r3
 80044fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80044fe:	429a      	cmp	r2, r3
 8004500:	d106      	bne.n	8004510 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2200      	movs	r2, #0
 8004508:	2103      	movs	r1, #3
 800450a:	4618      	mov	r0, r3
 800450c:	f7ff fb62 	bl	8003bd4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4618      	mov	r0, r3
 8004516:	f7ff fc55 	bl	8003dc4 <LL_ADC_IsEnabled>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	f040 813f 	bne.w	80047a0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6818      	ldr	r0, [r3, #0]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	6819      	ldr	r1, [r3, #0]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	461a      	mov	r2, r3
 8004530:	f7ff fbd6 	bl	8003ce0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	4a8e      	ldr	r2, [pc, #568]	; (8004774 <HAL_ADC_ConfigChannel+0x6b0>)
 800453a:	4293      	cmp	r3, r2
 800453c:	f040 8130 	bne.w	80047a0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10b      	bne.n	8004568 <HAL_ADC_ConfigChannel+0x4a4>
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	0e9b      	lsrs	r3, r3, #26
 8004556:	3301      	adds	r3, #1
 8004558:	f003 031f 	and.w	r3, r3, #31
 800455c:	2b09      	cmp	r3, #9
 800455e:	bf94      	ite	ls
 8004560:	2301      	movls	r3, #1
 8004562:	2300      	movhi	r3, #0
 8004564:	b2db      	uxtb	r3, r3
 8004566:	e019      	b.n	800459c <HAL_ADC_ConfigChannel+0x4d8>
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800456e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004570:	fa93 f3a3 	rbit	r3, r3
 8004574:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004576:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004578:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800457a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800457c:	2b00      	cmp	r3, #0
 800457e:	d101      	bne.n	8004584 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8004580:	2320      	movs	r3, #32
 8004582:	e003      	b.n	800458c <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8004584:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004586:	fab3 f383 	clz	r3, r3
 800458a:	b2db      	uxtb	r3, r3
 800458c:	3301      	adds	r3, #1
 800458e:	f003 031f 	and.w	r3, r3, #31
 8004592:	2b09      	cmp	r3, #9
 8004594:	bf94      	ite	ls
 8004596:	2301      	movls	r3, #1
 8004598:	2300      	movhi	r3, #0
 800459a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800459c:	2b00      	cmp	r3, #0
 800459e:	d079      	beq.n	8004694 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d107      	bne.n	80045bc <HAL_ADC_ConfigChannel+0x4f8>
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	0e9b      	lsrs	r3, r3, #26
 80045b2:	3301      	adds	r3, #1
 80045b4:	069b      	lsls	r3, r3, #26
 80045b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045ba:	e015      	b.n	80045e8 <HAL_ADC_ConfigChannel+0x524>
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045c4:	fa93 f3a3 	rbit	r3, r3
 80045c8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80045ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045cc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80045ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d101      	bne.n	80045d8 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80045d4:	2320      	movs	r3, #32
 80045d6:	e003      	b.n	80045e0 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80045d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045da:	fab3 f383 	clz	r3, r3
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	3301      	adds	r3, #1
 80045e2:	069b      	lsls	r3, r3, #26
 80045e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d109      	bne.n	8004608 <HAL_ADC_ConfigChannel+0x544>
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	0e9b      	lsrs	r3, r3, #26
 80045fa:	3301      	adds	r3, #1
 80045fc:	f003 031f 	and.w	r3, r3, #31
 8004600:	2101      	movs	r1, #1
 8004602:	fa01 f303 	lsl.w	r3, r1, r3
 8004606:	e017      	b.n	8004638 <HAL_ADC_ConfigChannel+0x574>
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004610:	fa93 f3a3 	rbit	r3, r3
 8004614:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004618:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800461a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8004620:	2320      	movs	r3, #32
 8004622:	e003      	b.n	800462c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8004624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004626:	fab3 f383 	clz	r3, r3
 800462a:	b2db      	uxtb	r3, r3
 800462c:	3301      	adds	r3, #1
 800462e:	f003 031f 	and.w	r3, r3, #31
 8004632:	2101      	movs	r1, #1
 8004634:	fa01 f303 	lsl.w	r3, r1, r3
 8004638:	ea42 0103 	orr.w	r1, r2, r3
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10a      	bne.n	800465e <HAL_ADC_ConfigChannel+0x59a>
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	0e9b      	lsrs	r3, r3, #26
 800464e:	3301      	adds	r3, #1
 8004650:	f003 021f 	and.w	r2, r3, #31
 8004654:	4613      	mov	r3, r2
 8004656:	005b      	lsls	r3, r3, #1
 8004658:	4413      	add	r3, r2
 800465a:	051b      	lsls	r3, r3, #20
 800465c:	e018      	b.n	8004690 <HAL_ADC_ConfigChannel+0x5cc>
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004666:	fa93 f3a3 	rbit	r3, r3
 800466a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800466c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8004676:	2320      	movs	r3, #32
 8004678:	e003      	b.n	8004682 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800467a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800467c:	fab3 f383 	clz	r3, r3
 8004680:	b2db      	uxtb	r3, r3
 8004682:	3301      	adds	r3, #1
 8004684:	f003 021f 	and.w	r2, r3, #31
 8004688:	4613      	mov	r3, r2
 800468a:	005b      	lsls	r3, r3, #1
 800468c:	4413      	add	r3, r2
 800468e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004690:	430b      	orrs	r3, r1
 8004692:	e080      	b.n	8004796 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800469c:	2b00      	cmp	r3, #0
 800469e:	d107      	bne.n	80046b0 <HAL_ADC_ConfigChannel+0x5ec>
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	0e9b      	lsrs	r3, r3, #26
 80046a6:	3301      	adds	r3, #1
 80046a8:	069b      	lsls	r3, r3, #26
 80046aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046ae:	e015      	b.n	80046dc <HAL_ADC_ConfigChannel+0x618>
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b8:	fa93 f3a3 	rbit	r3, r3
 80046bc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80046be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80046c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80046c8:	2320      	movs	r3, #32
 80046ca:	e003      	b.n	80046d4 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80046cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ce:	fab3 f383 	clz	r3, r3
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	3301      	adds	r3, #1
 80046d6:	069b      	lsls	r3, r3, #26
 80046d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d109      	bne.n	80046fc <HAL_ADC_ConfigChannel+0x638>
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	0e9b      	lsrs	r3, r3, #26
 80046ee:	3301      	adds	r3, #1
 80046f0:	f003 031f 	and.w	r3, r3, #31
 80046f4:	2101      	movs	r1, #1
 80046f6:	fa01 f303 	lsl.w	r3, r1, r3
 80046fa:	e017      	b.n	800472c <HAL_ADC_ConfigChannel+0x668>
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	fa93 f3a3 	rbit	r3, r3
 8004708:	61bb      	str	r3, [r7, #24]
  return result;
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d101      	bne.n	8004718 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8004714:	2320      	movs	r3, #32
 8004716:	e003      	b.n	8004720 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8004718:	6a3b      	ldr	r3, [r7, #32]
 800471a:	fab3 f383 	clz	r3, r3
 800471e:	b2db      	uxtb	r3, r3
 8004720:	3301      	adds	r3, #1
 8004722:	f003 031f 	and.w	r3, r3, #31
 8004726:	2101      	movs	r1, #1
 8004728:	fa01 f303 	lsl.w	r3, r1, r3
 800472c:	ea42 0103 	orr.w	r1, r2, r3
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10d      	bne.n	8004758 <HAL_ADC_ConfigChannel+0x694>
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	0e9b      	lsrs	r3, r3, #26
 8004742:	3301      	adds	r3, #1
 8004744:	f003 021f 	and.w	r2, r3, #31
 8004748:	4613      	mov	r3, r2
 800474a:	005b      	lsls	r3, r3, #1
 800474c:	4413      	add	r3, r2
 800474e:	3b1e      	subs	r3, #30
 8004750:	051b      	lsls	r3, r3, #20
 8004752:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004756:	e01d      	b.n	8004794 <HAL_ADC_ConfigChannel+0x6d0>
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	fa93 f3a3 	rbit	r3, r3
 8004764:	60fb      	str	r3, [r7, #12]
  return result;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d103      	bne.n	8004778 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8004770:	2320      	movs	r3, #32
 8004772:	e005      	b.n	8004780 <HAL_ADC_ConfigChannel+0x6bc>
 8004774:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	fab3 f383 	clz	r3, r3
 800477e:	b2db      	uxtb	r3, r3
 8004780:	3301      	adds	r3, #1
 8004782:	f003 021f 	and.w	r2, r3, #31
 8004786:	4613      	mov	r3, r2
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	4413      	add	r3, r2
 800478c:	3b1e      	subs	r3, #30
 800478e:	051b      	lsls	r3, r3, #20
 8004790:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004794:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800479a:	4619      	mov	r1, r3
 800479c:	f7ff fa74 	bl	8003c88 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	4b3d      	ldr	r3, [pc, #244]	; (800489c <HAL_ADC_ConfigChannel+0x7d8>)
 80047a6:	4013      	ands	r3, r2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d06c      	beq.n	8004886 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80047ac:	483c      	ldr	r0, [pc, #240]	; (80048a0 <HAL_ADC_ConfigChannel+0x7dc>)
 80047ae:	f7ff f9c9 	bl	8003b44 <LL_ADC_GetCommonPathInternalCh>
 80047b2:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a3a      	ldr	r2, [pc, #232]	; (80048a4 <HAL_ADC_ConfigChannel+0x7e0>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d127      	bne.n	8004810 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80047c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80047c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d121      	bne.n	8004810 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a35      	ldr	r2, [pc, #212]	; (80048a8 <HAL_ADC_ConfigChannel+0x7e4>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d157      	bne.n	8004886 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80047da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80047de:	4619      	mov	r1, r3
 80047e0:	482f      	ldr	r0, [pc, #188]	; (80048a0 <HAL_ADC_ConfigChannel+0x7dc>)
 80047e2:	f7ff f99c 	bl	8003b1e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80047e6:	4b31      	ldr	r3, [pc, #196]	; (80048ac <HAL_ADC_ConfigChannel+0x7e8>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	099b      	lsrs	r3, r3, #6
 80047ec:	4a30      	ldr	r2, [pc, #192]	; (80048b0 <HAL_ADC_ConfigChannel+0x7ec>)
 80047ee:	fba2 2303 	umull	r2, r3, r2, r3
 80047f2:	099b      	lsrs	r3, r3, #6
 80047f4:	1c5a      	adds	r2, r3, #1
 80047f6:	4613      	mov	r3, r2
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	4413      	add	r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004800:	e002      	b.n	8004808 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	3b01      	subs	r3, #1
 8004806:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1f9      	bne.n	8004802 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800480e:	e03a      	b.n	8004886 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a27      	ldr	r2, [pc, #156]	; (80048b4 <HAL_ADC_ConfigChannel+0x7f0>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d113      	bne.n	8004842 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800481a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800481e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10d      	bne.n	8004842 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a1f      	ldr	r2, [pc, #124]	; (80048a8 <HAL_ADC_ConfigChannel+0x7e4>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d12a      	bne.n	8004886 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004830:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004834:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004838:	4619      	mov	r1, r3
 800483a:	4819      	ldr	r0, [pc, #100]	; (80048a0 <HAL_ADC_ConfigChannel+0x7dc>)
 800483c:	f7ff f96f 	bl	8003b1e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004840:	e021      	b.n	8004886 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a1c      	ldr	r2, [pc, #112]	; (80048b8 <HAL_ADC_ConfigChannel+0x7f4>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d11c      	bne.n	8004886 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800484c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004850:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d116      	bne.n	8004886 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a12      	ldr	r2, [pc, #72]	; (80048a8 <HAL_ADC_ConfigChannel+0x7e4>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d111      	bne.n	8004886 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004862:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004866:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800486a:	4619      	mov	r1, r3
 800486c:	480c      	ldr	r0, [pc, #48]	; (80048a0 <HAL_ADC_ConfigChannel+0x7dc>)
 800486e:	f7ff f956 	bl	8003b1e <LL_ADC_SetCommonPathInternalCh>
 8004872:	e008      	b.n	8004886 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004878:	f043 0220 	orr.w	r2, r3, #32
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800488e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004892:	4618      	mov	r0, r3
 8004894:	37d8      	adds	r7, #216	; 0xd8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	80080000 	.word	0x80080000
 80048a0:	50040300 	.word	0x50040300
 80048a4:	c7520000 	.word	0xc7520000
 80048a8:	50040000 	.word	0x50040000
 80048ac:	2000004c 	.word	0x2000004c
 80048b0:	053e2d63 	.word	0x053e2d63
 80048b4:	cb840000 	.word	0xcb840000
 80048b8:	80000001 	.word	0x80000001

080048bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f003 0307 	and.w	r3, r3, #7
 80048ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048cc:	4b0c      	ldr	r3, [pc, #48]	; (8004900 <__NVIC_SetPriorityGrouping+0x44>)
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048d8:	4013      	ands	r3, r2
 80048da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80048e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048ee:	4a04      	ldr	r2, [pc, #16]	; (8004900 <__NVIC_SetPriorityGrouping+0x44>)
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	60d3      	str	r3, [r2, #12]
}
 80048f4:	bf00      	nop
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	e000ed00 	.word	0xe000ed00

08004904 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004904:	b480      	push	{r7}
 8004906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004908:	4b04      	ldr	r3, [pc, #16]	; (800491c <__NVIC_GetPriorityGrouping+0x18>)
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	0a1b      	lsrs	r3, r3, #8
 800490e:	f003 0307 	and.w	r3, r3, #7
}
 8004912:	4618      	mov	r0, r3
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	e000ed00 	.word	0xe000ed00

08004920 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	4603      	mov	r3, r0
 8004928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800492a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800492e:	2b00      	cmp	r3, #0
 8004930:	db0b      	blt.n	800494a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004932:	79fb      	ldrb	r3, [r7, #7]
 8004934:	f003 021f 	and.w	r2, r3, #31
 8004938:	4907      	ldr	r1, [pc, #28]	; (8004958 <__NVIC_EnableIRQ+0x38>)
 800493a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800493e:	095b      	lsrs	r3, r3, #5
 8004940:	2001      	movs	r0, #1
 8004942:	fa00 f202 	lsl.w	r2, r0, r2
 8004946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800494a:	bf00      	nop
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	e000e100 	.word	0xe000e100

0800495c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	4603      	mov	r3, r0
 8004964:	6039      	str	r1, [r7, #0]
 8004966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800496c:	2b00      	cmp	r3, #0
 800496e:	db0a      	blt.n	8004986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	b2da      	uxtb	r2, r3
 8004974:	490c      	ldr	r1, [pc, #48]	; (80049a8 <__NVIC_SetPriority+0x4c>)
 8004976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800497a:	0112      	lsls	r2, r2, #4
 800497c:	b2d2      	uxtb	r2, r2
 800497e:	440b      	add	r3, r1
 8004980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004984:	e00a      	b.n	800499c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	b2da      	uxtb	r2, r3
 800498a:	4908      	ldr	r1, [pc, #32]	; (80049ac <__NVIC_SetPriority+0x50>)
 800498c:	79fb      	ldrb	r3, [r7, #7]
 800498e:	f003 030f 	and.w	r3, r3, #15
 8004992:	3b04      	subs	r3, #4
 8004994:	0112      	lsls	r2, r2, #4
 8004996:	b2d2      	uxtb	r2, r2
 8004998:	440b      	add	r3, r1
 800499a:	761a      	strb	r2, [r3, #24]
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	e000e100 	.word	0xe000e100
 80049ac:	e000ed00 	.word	0xe000ed00

080049b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b089      	sub	sp, #36	; 0x24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f003 0307 	and.w	r3, r3, #7
 80049c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	f1c3 0307 	rsb	r3, r3, #7
 80049ca:	2b04      	cmp	r3, #4
 80049cc:	bf28      	it	cs
 80049ce:	2304      	movcs	r3, #4
 80049d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	3304      	adds	r3, #4
 80049d6:	2b06      	cmp	r3, #6
 80049d8:	d902      	bls.n	80049e0 <NVIC_EncodePriority+0x30>
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	3b03      	subs	r3, #3
 80049de:	e000      	b.n	80049e2 <NVIC_EncodePriority+0x32>
 80049e0:	2300      	movs	r3, #0
 80049e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049e4:	f04f 32ff 	mov.w	r2, #4294967295
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	fa02 f303 	lsl.w	r3, r2, r3
 80049ee:	43da      	mvns	r2, r3
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	401a      	ands	r2, r3
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049f8:	f04f 31ff 	mov.w	r1, #4294967295
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004a02:	43d9      	mvns	r1, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a08:	4313      	orrs	r3, r2
         );
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3724      	adds	r7, #36	; 0x24
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b082      	sub	sp, #8
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7ff ff4c 	bl	80048bc <__NVIC_SetPriorityGrouping>
}
 8004a24:	bf00      	nop
 8004a26:	3708      	adds	r7, #8
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	4603      	mov	r3, r0
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
 8004a38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a3e:	f7ff ff61 	bl	8004904 <__NVIC_GetPriorityGrouping>
 8004a42:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	68b9      	ldr	r1, [r7, #8]
 8004a48:	6978      	ldr	r0, [r7, #20]
 8004a4a:	f7ff ffb1 	bl	80049b0 <NVIC_EncodePriority>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a54:	4611      	mov	r1, r2
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7ff ff80 	bl	800495c <__NVIC_SetPriority>
}
 8004a5c:	bf00      	nop
 8004a5e:	3718      	adds	r7, #24
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7ff ff54 	bl	8004920 <__NVIC_EnableIRQ>
}
 8004a78:	bf00      	nop
 8004a7a:	3708      	adds	r7, #8
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e0ac      	b.n	8004bec <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 f8b2 	bl	8004c00 <DFSDM_GetChannelFromInstance>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	4a55      	ldr	r2, [pc, #340]	; (8004bf4 <HAL_DFSDM_ChannelInit+0x174>)
 8004aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e09f      	b.n	8004bec <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f7fe fb45 	bl	800313c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8004ab2:	4b51      	ldr	r3, [pc, #324]	; (8004bf8 <HAL_DFSDM_ChannelInit+0x178>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	4a4f      	ldr	r2, [pc, #316]	; (8004bf8 <HAL_DFSDM_ChannelInit+0x178>)
 8004aba:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8004abc:	4b4e      	ldr	r3, [pc, #312]	; (8004bf8 <HAL_DFSDM_ChannelInit+0x178>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d125      	bne.n	8004b10 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004ac4:	4b4d      	ldr	r3, [pc, #308]	; (8004bfc <HAL_DFSDM_ChannelInit+0x17c>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a4c      	ldr	r2, [pc, #304]	; (8004bfc <HAL_DFSDM_ChannelInit+0x17c>)
 8004aca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ace:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8004ad0:	4b4a      	ldr	r3, [pc, #296]	; (8004bfc <HAL_DFSDM_ChannelInit+0x17c>)
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	4948      	ldr	r1, [pc, #288]	; (8004bfc <HAL_DFSDM_ChannelInit+0x17c>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8004ade:	4b47      	ldr	r3, [pc, #284]	; (8004bfc <HAL_DFSDM_ChannelInit+0x17c>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a46      	ldr	r2, [pc, #280]	; (8004bfc <HAL_DFSDM_ChannelInit+0x17c>)
 8004ae4:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8004ae8:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	791b      	ldrb	r3, [r3, #4]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d108      	bne.n	8004b04 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8004af2:	4b42      	ldr	r3, [pc, #264]	; (8004bfc <HAL_DFSDM_ChannelInit+0x17c>)
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	3b01      	subs	r3, #1
 8004afc:	041b      	lsls	r3, r3, #16
 8004afe:	493f      	ldr	r1, [pc, #252]	; (8004bfc <HAL_DFSDM_ChannelInit+0x17c>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004b04:	4b3d      	ldr	r3, [pc, #244]	; (8004bfc <HAL_DFSDM_ChannelInit+0x17c>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a3c      	ldr	r2, [pc, #240]	; (8004bfc <HAL_DFSDM_ChannelInit+0x17c>)
 8004b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b0e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8004b1e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6819      	ldr	r1, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004b2e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004b34:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f022 020f 	bic.w	r2, r2, #15
 8004b4c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	6819      	ldr	r1, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004b5c:	431a      	orrs	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	689a      	ldr	r2, [r3, #8]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8004b74:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	6899      	ldr	r1, [r3, #8]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b84:	3b01      	subs	r3, #1
 8004b86:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f002 0207 	and.w	r2, r2, #7
 8004ba0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6859      	ldr	r1, [r3, #4]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bac:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004bcc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f000 f810 	bl	8004c00 <DFSDM_GetChannelFromInstance>
 8004be0:	4602      	mov	r2, r0
 8004be2:	4904      	ldr	r1, [pc, #16]	; (8004bf4 <HAL_DFSDM_ChannelInit+0x174>)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3708      	adds	r7, #8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	200012f8 	.word	0x200012f8
 8004bf8:	200012f4 	.word	0x200012f4
 8004bfc:	40016000 	.word	0x40016000

08004c00 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a1c      	ldr	r2, [pc, #112]	; (8004c7c <DFSDM_GetChannelFromInstance+0x7c>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d102      	bne.n	8004c16 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8004c10:	2300      	movs	r3, #0
 8004c12:	60fb      	str	r3, [r7, #12]
 8004c14:	e02b      	b.n	8004c6e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a19      	ldr	r2, [pc, #100]	; (8004c80 <DFSDM_GetChannelFromInstance+0x80>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d102      	bne.n	8004c24 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	60fb      	str	r3, [r7, #12]
 8004c22:	e024      	b.n	8004c6e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a17      	ldr	r2, [pc, #92]	; (8004c84 <DFSDM_GetChannelFromInstance+0x84>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d102      	bne.n	8004c32 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	60fb      	str	r3, [r7, #12]
 8004c30:	e01d      	b.n	8004c6e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a14      	ldr	r2, [pc, #80]	; (8004c88 <DFSDM_GetChannelFromInstance+0x88>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d102      	bne.n	8004c40 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8004c3a:	2304      	movs	r3, #4
 8004c3c:	60fb      	str	r3, [r7, #12]
 8004c3e:	e016      	b.n	8004c6e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a12      	ldr	r2, [pc, #72]	; (8004c8c <DFSDM_GetChannelFromInstance+0x8c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d102      	bne.n	8004c4e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8004c48:	2305      	movs	r3, #5
 8004c4a:	60fb      	str	r3, [r7, #12]
 8004c4c:	e00f      	b.n	8004c6e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a0f      	ldr	r2, [pc, #60]	; (8004c90 <DFSDM_GetChannelFromInstance+0x90>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d102      	bne.n	8004c5c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8004c56:	2306      	movs	r3, #6
 8004c58:	60fb      	str	r3, [r7, #12]
 8004c5a:	e008      	b.n	8004c6e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a0d      	ldr	r2, [pc, #52]	; (8004c94 <DFSDM_GetChannelFromInstance+0x94>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d102      	bne.n	8004c6a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8004c64:	2307      	movs	r3, #7
 8004c66:	60fb      	str	r3, [r7, #12]
 8004c68:	e001      	b.n	8004c6e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3714      	adds	r7, #20
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr
 8004c7c:	40016000 	.word	0x40016000
 8004c80:	40016020 	.word	0x40016020
 8004c84:	40016040 	.word	0x40016040
 8004c88:	40016080 	.word	0x40016080
 8004c8c:	400160a0 	.word	0x400160a0
 8004c90:	400160c0 	.word	0x400160c0
 8004c94:	400160e0 	.word	0x400160e0

08004c98 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e08d      	b.n	8004dc6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	4b47      	ldr	r3, [pc, #284]	; (8004dd0 <HAL_DMA_Init+0x138>)
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d80f      	bhi.n	8004cd6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	461a      	mov	r2, r3
 8004cbc:	4b45      	ldr	r3, [pc, #276]	; (8004dd4 <HAL_DMA_Init+0x13c>)
 8004cbe:	4413      	add	r3, r2
 8004cc0:	4a45      	ldr	r2, [pc, #276]	; (8004dd8 <HAL_DMA_Init+0x140>)
 8004cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc6:	091b      	lsrs	r3, r3, #4
 8004cc8:	009a      	lsls	r2, r3, #2
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a42      	ldr	r2, [pc, #264]	; (8004ddc <HAL_DMA_Init+0x144>)
 8004cd2:	641a      	str	r2, [r3, #64]	; 0x40
 8004cd4:	e00e      	b.n	8004cf4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	461a      	mov	r2, r3
 8004cdc:	4b40      	ldr	r3, [pc, #256]	; (8004de0 <HAL_DMA_Init+0x148>)
 8004cde:	4413      	add	r3, r2
 8004ce0:	4a3d      	ldr	r2, [pc, #244]	; (8004dd8 <HAL_DMA_Init+0x140>)
 8004ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce6:	091b      	lsrs	r3, r3, #4
 8004ce8:	009a      	lsls	r2, r3, #2
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a3c      	ldr	r2, [pc, #240]	; (8004de4 <HAL_DMA_Init+0x14c>)
 8004cf2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d0e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004d18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 fa80 	bl	800524c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d54:	d102      	bne.n	8004d5c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685a      	ldr	r2, [r3, #4]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d64:	b2d2      	uxtb	r2, r2
 8004d66:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004d70:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d010      	beq.n	8004d9c <HAL_DMA_Init+0x104>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	2b04      	cmp	r3, #4
 8004d80:	d80c      	bhi.n	8004d9c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 faa0 	bl	80052c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004d98:	605a      	str	r2, [r3, #4]
 8004d9a:	e008      	b.n	8004dae <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	40020407 	.word	0x40020407
 8004dd4:	bffdfff8 	.word	0xbffdfff8
 8004dd8:	cccccccd 	.word	0xcccccccd
 8004ddc:	40020000 	.word	0x40020000
 8004de0:	bffdfbf8 	.word	0xbffdfbf8
 8004de4:	40020400 	.word	0x40020400

08004de8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
 8004df4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004df6:	2300      	movs	r3, #0
 8004df8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d101      	bne.n	8004e08 <HAL_DMA_Start_IT+0x20>
 8004e04:	2302      	movs	r3, #2
 8004e06:	e066      	b.n	8004ed6 <HAL_DMA_Start_IT+0xee>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d155      	bne.n	8004ec8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2202      	movs	r2, #2
 8004e20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 0201 	bic.w	r2, r2, #1
 8004e38:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	68b9      	ldr	r1, [r7, #8]
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f000 f9c4 	bl	80051ce <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d008      	beq.n	8004e60 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f042 020e 	orr.w	r2, r2, #14
 8004e5c:	601a      	str	r2, [r3, #0]
 8004e5e:	e00f      	b.n	8004e80 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 0204 	bic.w	r2, r2, #4
 8004e6e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f042 020a 	orr.w	r2, r2, #10
 8004e7e:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d007      	beq.n	8004e9e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e9c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d007      	beq.n	8004eb6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004eb4:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f042 0201 	orr.w	r2, r2, #1
 8004ec4:	601a      	str	r2, [r3, #0]
 8004ec6:	e005      	b.n	8004ed4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004ed4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3718      	adds	r7, #24
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b085      	sub	sp, #20
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d008      	beq.n	8004f08 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2204      	movs	r2, #4
 8004efa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e040      	b.n	8004f8a <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f022 020e 	bic.w	r2, r2, #14
 8004f16:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f26:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f022 0201 	bic.w	r2, r2, #1
 8004f36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f3c:	f003 021c 	and.w	r2, r3, #28
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f44:	2101      	movs	r1, #1
 8004f46:	fa01 f202 	lsl.w	r2, r1, r2
 8004f4a:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004f54:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00c      	beq.n	8004f78 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f6c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004f76:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004f88:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b084      	sub	sp, #16
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d005      	beq.n	8004fba <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2204      	movs	r2, #4
 8004fb2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	73fb      	strb	r3, [r7, #15]
 8004fb8:	e047      	b.n	800504a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f022 020e 	bic.w	r2, r2, #14
 8004fc8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f022 0201 	bic.w	r2, r2, #1
 8004fd8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fe4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fe8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fee:	f003 021c 	and.w	r2, r3, #28
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	2101      	movs	r1, #1
 8004ff8:	fa01 f202 	lsl.w	r2, r1, r2
 8004ffc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005006:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00c      	beq.n	800502a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800501a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800501e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005028:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2201      	movs	r2, #1
 800502e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503e:	2b00      	cmp	r3, #0
 8005040:	d003      	beq.n	800504a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	4798      	blx	r3
    }
  }
  return status;
 800504a:	7bfb      	ldrb	r3, [r7, #15]
}
 800504c:	4618      	mov	r0, r3
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005070:	f003 031c 	and.w	r3, r3, #28
 8005074:	2204      	movs	r2, #4
 8005076:	409a      	lsls	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	4013      	ands	r3, r2
 800507c:	2b00      	cmp	r3, #0
 800507e:	d026      	beq.n	80050ce <HAL_DMA_IRQHandler+0x7a>
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	f003 0304 	and.w	r3, r3, #4
 8005086:	2b00      	cmp	r3, #0
 8005088:	d021      	beq.n	80050ce <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0320 	and.w	r3, r3, #32
 8005094:	2b00      	cmp	r3, #0
 8005096:	d107      	bne.n	80050a8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f022 0204 	bic.w	r2, r2, #4
 80050a6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ac:	f003 021c 	and.w	r2, r3, #28
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b4:	2104      	movs	r1, #4
 80050b6:	fa01 f202 	lsl.w	r2, r1, r2
 80050ba:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d071      	beq.n	80051a8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80050cc:	e06c      	b.n	80051a8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d2:	f003 031c 	and.w	r3, r3, #28
 80050d6:	2202      	movs	r2, #2
 80050d8:	409a      	lsls	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	4013      	ands	r3, r2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d02e      	beq.n	8005140 <HAL_DMA_IRQHandler+0xec>
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	f003 0302 	and.w	r3, r3, #2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d029      	beq.n	8005140 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0320 	and.w	r3, r3, #32
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10b      	bne.n	8005112 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 020a 	bic.w	r2, r2, #10
 8005108:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005116:	f003 021c 	and.w	r2, r3, #28
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511e:	2102      	movs	r1, #2
 8005120:	fa01 f202 	lsl.w	r2, r1, r2
 8005124:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005132:	2b00      	cmp	r3, #0
 8005134:	d038      	beq.n	80051a8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800513e:	e033      	b.n	80051a8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005144:	f003 031c 	and.w	r3, r3, #28
 8005148:	2208      	movs	r2, #8
 800514a:	409a      	lsls	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	4013      	ands	r3, r2
 8005150:	2b00      	cmp	r3, #0
 8005152:	d02a      	beq.n	80051aa <HAL_DMA_IRQHandler+0x156>
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	f003 0308 	and.w	r3, r3, #8
 800515a:	2b00      	cmp	r3, #0
 800515c:	d025      	beq.n	80051aa <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 020e 	bic.w	r2, r2, #14
 800516c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005172:	f003 021c 	and.w	r2, r3, #28
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517a:	2101      	movs	r1, #1
 800517c:	fa01 f202 	lsl.w	r2, r1, r2
 8005180:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2201      	movs	r2, #1
 8005186:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800519c:	2b00      	cmp	r3, #0
 800519e:	d004      	beq.n	80051aa <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80051a8:	bf00      	nop
 80051aa:	bf00      	nop
}
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80051c0:	b2db      	uxtb	r3, r3
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051ce:	b480      	push	{r7}
 80051d0:	b085      	sub	sp, #20
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	60f8      	str	r0, [r7, #12]
 80051d6:	60b9      	str	r1, [r7, #8]
 80051d8:	607a      	str	r2, [r7, #4]
 80051da:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80051e4:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d004      	beq.n	80051f8 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80051f6:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051fc:	f003 021c 	and.w	r2, r3, #28
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005204:	2101      	movs	r1, #1
 8005206:	fa01 f202 	lsl.w	r2, r1, r2
 800520a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	683a      	ldr	r2, [r7, #0]
 8005212:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	2b10      	cmp	r3, #16
 800521a:	d108      	bne.n	800522e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68ba      	ldr	r2, [r7, #8]
 800522a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800522c:	e007      	b.n	800523e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68ba      	ldr	r2, [r7, #8]
 8005234:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	60da      	str	r2, [r3, #12]
}
 800523e:	bf00      	nop
 8005240:	3714      	adds	r7, #20
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
	...

0800524c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	461a      	mov	r2, r3
 800525a:	4b17      	ldr	r3, [pc, #92]	; (80052b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800525c:	429a      	cmp	r2, r3
 800525e:	d80a      	bhi.n	8005276 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005264:	089b      	lsrs	r3, r3, #2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800526c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	6493      	str	r3, [r2, #72]	; 0x48
 8005274:	e007      	b.n	8005286 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527a:	089b      	lsrs	r3, r3, #2
 800527c:	009a      	lsls	r2, r3, #2
 800527e:	4b0f      	ldr	r3, [pc, #60]	; (80052bc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005280:	4413      	add	r3, r2
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	b2db      	uxtb	r3, r3
 800528c:	3b08      	subs	r3, #8
 800528e:	4a0c      	ldr	r2, [pc, #48]	; (80052c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005290:	fba2 2303 	umull	r2, r3, r2, r3
 8005294:	091b      	lsrs	r3, r3, #4
 8005296:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a0a      	ldr	r2, [pc, #40]	; (80052c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800529c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f003 031f 	and.w	r3, r3, #31
 80052a4:	2201      	movs	r2, #1
 80052a6:	409a      	lsls	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	651a      	str	r2, [r3, #80]	; 0x50
}
 80052ac:	bf00      	nop
 80052ae:	3714      	adds	r7, #20
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	40020407 	.word	0x40020407
 80052bc:	4002081c 	.word	0x4002081c
 80052c0:	cccccccd 	.word	0xcccccccd
 80052c4:	40020880 	.word	0x40020880

080052c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	4b0b      	ldr	r3, [pc, #44]	; (8005308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80052dc:	4413      	add	r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	461a      	mov	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a08      	ldr	r2, [pc, #32]	; (800530c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80052ea:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	3b01      	subs	r3, #1
 80052f0:	f003 0303 	and.w	r3, r3, #3
 80052f4:	2201      	movs	r2, #1
 80052f6:	409a      	lsls	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80052fc:	bf00      	nop
 80052fe:	3714      	adds	r7, #20
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr
 8005308:	1000823f 	.word	0x1000823f
 800530c:	40020940 	.word	0x40020940

08005310 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005310:	b480      	push	{r7}
 8005312:	b087      	sub	sp, #28
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800531a:	2300      	movs	r3, #0
 800531c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800531e:	e166      	b.n	80055ee <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	2101      	movs	r1, #1
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	fa01 f303 	lsl.w	r3, r1, r3
 800532c:	4013      	ands	r3, r2
 800532e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2b00      	cmp	r3, #0
 8005334:	f000 8158 	beq.w	80055e8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f003 0303 	and.w	r3, r3, #3
 8005340:	2b01      	cmp	r3, #1
 8005342:	d005      	beq.n	8005350 <HAL_GPIO_Init+0x40>
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f003 0303 	and.w	r3, r3, #3
 800534c:	2b02      	cmp	r3, #2
 800534e:	d130      	bne.n	80053b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	005b      	lsls	r3, r3, #1
 800535a:	2203      	movs	r2, #3
 800535c:	fa02 f303 	lsl.w	r3, r2, r3
 8005360:	43db      	mvns	r3, r3
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	4013      	ands	r3, r2
 8005366:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	68da      	ldr	r2, [r3, #12]
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	005b      	lsls	r3, r3, #1
 8005370:	fa02 f303 	lsl.w	r3, r2, r3
 8005374:	693a      	ldr	r2, [r7, #16]
 8005376:	4313      	orrs	r3, r2
 8005378:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005386:	2201      	movs	r2, #1
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	fa02 f303 	lsl.w	r3, r2, r3
 800538e:	43db      	mvns	r3, r3
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	4013      	ands	r3, r2
 8005394:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	091b      	lsrs	r3, r3, #4
 800539c:	f003 0201 	and.w	r2, r3, #1
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	fa02 f303 	lsl.w	r3, r2, r3
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f003 0303 	and.w	r3, r3, #3
 80053ba:	2b03      	cmp	r3, #3
 80053bc:	d017      	beq.n	80053ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	005b      	lsls	r3, r3, #1
 80053c8:	2203      	movs	r2, #3
 80053ca:	fa02 f303 	lsl.w	r3, r2, r3
 80053ce:	43db      	mvns	r3, r3
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	4013      	ands	r3, r2
 80053d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	689a      	ldr	r2, [r3, #8]
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	005b      	lsls	r3, r3, #1
 80053de:	fa02 f303 	lsl.w	r3, r2, r3
 80053e2:	693a      	ldr	r2, [r7, #16]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f003 0303 	and.w	r3, r3, #3
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d123      	bne.n	8005442 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	08da      	lsrs	r2, r3, #3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	3208      	adds	r2, #8
 8005402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005406:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	f003 0307 	and.w	r3, r3, #7
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	220f      	movs	r2, #15
 8005412:	fa02 f303 	lsl.w	r3, r2, r3
 8005416:	43db      	mvns	r3, r3
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	4013      	ands	r3, r2
 800541c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	691a      	ldr	r2, [r3, #16]
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f003 0307 	and.w	r3, r3, #7
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	fa02 f303 	lsl.w	r3, r2, r3
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	4313      	orrs	r3, r2
 8005432:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	08da      	lsrs	r2, r3, #3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	3208      	adds	r2, #8
 800543c:	6939      	ldr	r1, [r7, #16]
 800543e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	005b      	lsls	r3, r3, #1
 800544c:	2203      	movs	r2, #3
 800544e:	fa02 f303 	lsl.w	r3, r2, r3
 8005452:	43db      	mvns	r3, r3
 8005454:	693a      	ldr	r2, [r7, #16]
 8005456:	4013      	ands	r3, r2
 8005458:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f003 0203 	and.w	r2, r3, #3
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	005b      	lsls	r3, r3, #1
 8005466:	fa02 f303 	lsl.w	r3, r2, r3
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	4313      	orrs	r3, r2
 800546e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	693a      	ldr	r2, [r7, #16]
 8005474:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800547e:	2b00      	cmp	r3, #0
 8005480:	f000 80b2 	beq.w	80055e8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005484:	4b61      	ldr	r3, [pc, #388]	; (800560c <HAL_GPIO_Init+0x2fc>)
 8005486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005488:	4a60      	ldr	r2, [pc, #384]	; (800560c <HAL_GPIO_Init+0x2fc>)
 800548a:	f043 0301 	orr.w	r3, r3, #1
 800548e:	6613      	str	r3, [r2, #96]	; 0x60
 8005490:	4b5e      	ldr	r3, [pc, #376]	; (800560c <HAL_GPIO_Init+0x2fc>)
 8005492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	60bb      	str	r3, [r7, #8]
 800549a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800549c:	4a5c      	ldr	r2, [pc, #368]	; (8005610 <HAL_GPIO_Init+0x300>)
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	089b      	lsrs	r3, r3, #2
 80054a2:	3302      	adds	r3, #2
 80054a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	f003 0303 	and.w	r3, r3, #3
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	220f      	movs	r2, #15
 80054b4:	fa02 f303 	lsl.w	r3, r2, r3
 80054b8:	43db      	mvns	r3, r3
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	4013      	ands	r3, r2
 80054be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80054c6:	d02b      	beq.n	8005520 <HAL_GPIO_Init+0x210>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a52      	ldr	r2, [pc, #328]	; (8005614 <HAL_GPIO_Init+0x304>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d025      	beq.n	800551c <HAL_GPIO_Init+0x20c>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a51      	ldr	r2, [pc, #324]	; (8005618 <HAL_GPIO_Init+0x308>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d01f      	beq.n	8005518 <HAL_GPIO_Init+0x208>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a50      	ldr	r2, [pc, #320]	; (800561c <HAL_GPIO_Init+0x30c>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d019      	beq.n	8005514 <HAL_GPIO_Init+0x204>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a4f      	ldr	r2, [pc, #316]	; (8005620 <HAL_GPIO_Init+0x310>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d013      	beq.n	8005510 <HAL_GPIO_Init+0x200>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a4e      	ldr	r2, [pc, #312]	; (8005624 <HAL_GPIO_Init+0x314>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d00d      	beq.n	800550c <HAL_GPIO_Init+0x1fc>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a4d      	ldr	r2, [pc, #308]	; (8005628 <HAL_GPIO_Init+0x318>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d007      	beq.n	8005508 <HAL_GPIO_Init+0x1f8>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a4c      	ldr	r2, [pc, #304]	; (800562c <HAL_GPIO_Init+0x31c>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d101      	bne.n	8005504 <HAL_GPIO_Init+0x1f4>
 8005500:	2307      	movs	r3, #7
 8005502:	e00e      	b.n	8005522 <HAL_GPIO_Init+0x212>
 8005504:	2308      	movs	r3, #8
 8005506:	e00c      	b.n	8005522 <HAL_GPIO_Init+0x212>
 8005508:	2306      	movs	r3, #6
 800550a:	e00a      	b.n	8005522 <HAL_GPIO_Init+0x212>
 800550c:	2305      	movs	r3, #5
 800550e:	e008      	b.n	8005522 <HAL_GPIO_Init+0x212>
 8005510:	2304      	movs	r3, #4
 8005512:	e006      	b.n	8005522 <HAL_GPIO_Init+0x212>
 8005514:	2303      	movs	r3, #3
 8005516:	e004      	b.n	8005522 <HAL_GPIO_Init+0x212>
 8005518:	2302      	movs	r3, #2
 800551a:	e002      	b.n	8005522 <HAL_GPIO_Init+0x212>
 800551c:	2301      	movs	r3, #1
 800551e:	e000      	b.n	8005522 <HAL_GPIO_Init+0x212>
 8005520:	2300      	movs	r3, #0
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	f002 0203 	and.w	r2, r2, #3
 8005528:	0092      	lsls	r2, r2, #2
 800552a:	4093      	lsls	r3, r2
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	4313      	orrs	r3, r2
 8005530:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005532:	4937      	ldr	r1, [pc, #220]	; (8005610 <HAL_GPIO_Init+0x300>)
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	089b      	lsrs	r3, r3, #2
 8005538:	3302      	adds	r3, #2
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005540:	4b3b      	ldr	r3, [pc, #236]	; (8005630 <HAL_GPIO_Init+0x320>)
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	43db      	mvns	r3, r3
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	4013      	ands	r3, r2
 800554e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d003      	beq.n	8005564 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	4313      	orrs	r3, r2
 8005562:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005564:	4a32      	ldr	r2, [pc, #200]	; (8005630 <HAL_GPIO_Init+0x320>)
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800556a:	4b31      	ldr	r3, [pc, #196]	; (8005630 <HAL_GPIO_Init+0x320>)
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	43db      	mvns	r3, r3
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	4013      	ands	r3, r2
 8005578:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4313      	orrs	r3, r2
 800558c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800558e:	4a28      	ldr	r2, [pc, #160]	; (8005630 <HAL_GPIO_Init+0x320>)
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005594:	4b26      	ldr	r3, [pc, #152]	; (8005630 <HAL_GPIO_Init+0x320>)
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	43db      	mvns	r3, r3
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	4013      	ands	r3, r2
 80055a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d003      	beq.n	80055b8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80055b8:	4a1d      	ldr	r2, [pc, #116]	; (8005630 <HAL_GPIO_Init+0x320>)
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80055be:	4b1c      	ldr	r3, [pc, #112]	; (8005630 <HAL_GPIO_Init+0x320>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	43db      	mvns	r3, r3
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	4013      	ands	r3, r2
 80055cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d003      	beq.n	80055e2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	4313      	orrs	r3, r2
 80055e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80055e2:	4a13      	ldr	r2, [pc, #76]	; (8005630 <HAL_GPIO_Init+0x320>)
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	3301      	adds	r3, #1
 80055ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	fa22 f303 	lsr.w	r3, r2, r3
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f47f ae91 	bne.w	8005320 <HAL_GPIO_Init+0x10>
  }
}
 80055fe:	bf00      	nop
 8005600:	bf00      	nop
 8005602:	371c      	adds	r7, #28
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr
 800560c:	40021000 	.word	0x40021000
 8005610:	40010000 	.word	0x40010000
 8005614:	48000400 	.word	0x48000400
 8005618:	48000800 	.word	0x48000800
 800561c:	48000c00 	.word	0x48000c00
 8005620:	48001000 	.word	0x48001000
 8005624:	48001400 	.word	0x48001400
 8005628:	48001800 	.word	0x48001800
 800562c:	48001c00 	.word	0x48001c00
 8005630:	40010400 	.word	0x40010400

08005634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	460b      	mov	r3, r1
 800563e:	807b      	strh	r3, [r7, #2]
 8005640:	4613      	mov	r3, r2
 8005642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005644:	787b      	ldrb	r3, [r7, #1]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800564a:	887a      	ldrh	r2, [r7, #2]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005650:	e002      	b.n	8005658 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005652:	887a      	ldrh	r2, [r7, #2]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	4603      	mov	r3, r0
 800566c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800566e:	4b08      	ldr	r3, [pc, #32]	; (8005690 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005670:	695a      	ldr	r2, [r3, #20]
 8005672:	88fb      	ldrh	r3, [r7, #6]
 8005674:	4013      	ands	r3, r2
 8005676:	2b00      	cmp	r3, #0
 8005678:	d006      	beq.n	8005688 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800567a:	4a05      	ldr	r2, [pc, #20]	; (8005690 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800567c:	88fb      	ldrh	r3, [r7, #6]
 800567e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005680:	88fb      	ldrh	r3, [r7, #6]
 8005682:	4618      	mov	r0, r3
 8005684:	f7fd fbf2 	bl	8002e6c <HAL_GPIO_EXTI_Callback>
  }
}
 8005688:	bf00      	nop
 800568a:	3708      	adds	r7, #8
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	40010400 	.word	0x40010400

08005694 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e08d      	b.n	80057c2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d106      	bne.n	80056c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f7fd fda2 	bl	8003204 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2224      	movs	r2, #36	; 0x24
 80056c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f022 0201 	bic.w	r2, r2, #1
 80056d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80056e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	689a      	ldr	r2, [r3, #8]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80056f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d107      	bne.n	800570e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	689a      	ldr	r2, [r3, #8]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800570a:	609a      	str	r2, [r3, #8]
 800570c:	e006      	b.n	800571c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	689a      	ldr	r2, [r3, #8]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800571a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	2b02      	cmp	r3, #2
 8005722:	d108      	bne.n	8005736 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	685a      	ldr	r2, [r3, #4]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005732:	605a      	str	r2, [r3, #4]
 8005734:	e007      	b.n	8005746 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005744:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	6812      	ldr	r2, [r2, #0]
 8005750:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005754:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005758:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68da      	ldr	r2, [r3, #12]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005768:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	691a      	ldr	r2, [r3, #16]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	430a      	orrs	r2, r1
 8005782:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	69d9      	ldr	r1, [r3, #28]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a1a      	ldr	r2, [r3, #32]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	430a      	orrs	r2, r1
 8005792:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f042 0201 	orr.w	r2, r2, #1
 80057a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2220      	movs	r2, #32
 80057ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b084      	sub	sp, #16
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d005      	beq.n	80057f6 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	68f9      	ldr	r1, [r7, #12]
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	4798      	blx	r3
  }
}
 80057f6:	bf00      	nop
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b086      	sub	sp, #24
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00f      	beq.n	8005840 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00a      	beq.n	8005840 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800582e:	f043 0201 	orr.w	r2, r3, #1
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800583e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00f      	beq.n	800586a <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00a      	beq.n	800586a <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005858:	f043 0208 	orr.w	r2, r3, #8
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005868:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00f      	beq.n	8005894 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00a      	beq.n	8005894 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005882:	f043 0202 	orr.w	r2, r3, #2
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005892:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005898:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f003 030b 	and.w	r3, r3, #11
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d003      	beq.n	80058ac <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80058a4:	68f9      	ldr	r1, [r7, #12]
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 fb82 	bl	8005fb0 <I2C_ITError>
  }
}
 80058ac:	bf00      	nop
 80058ae:	3718      	adds	r7, #24
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	460b      	mov	r3, r1
 80058e6:	70fb      	strb	r3, [r7, #3]
 80058e8:	4613      	mov	r3, r2
 80058ea:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005944:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005950:	2b01      	cmp	r3, #1
 8005952:	d101      	bne.n	8005958 <I2C_Slave_ISR_IT+0x24>
 8005954:	2302      	movs	r3, #2
 8005956:	e0e1      	b.n	8005b1c <I2C_Slave_ISR_IT+0x1e8>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	f003 0320 	and.w	r3, r3, #32
 8005966:	2b00      	cmp	r3, #0
 8005968:	d008      	beq.n	800597c <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005970:	2b00      	cmp	r3, #0
 8005972:	d003      	beq.n	800597c <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005974:	6939      	ldr	r1, [r7, #16]
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f000 f9b4 	bl	8005ce4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	f003 0310 	and.w	r3, r3, #16
 8005982:	2b00      	cmp	r3, #0
 8005984:	d04b      	beq.n	8005a1e <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800598c:	2b00      	cmp	r3, #0
 800598e:	d046      	beq.n	8005a1e <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005994:	b29b      	uxth	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d128      	bne.n	80059ec <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b28      	cmp	r3, #40	; 0x28
 80059a4:	d108      	bne.n	80059b8 <I2C_Slave_ISR_IT+0x84>
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059ac:	d104      	bne.n	80059b8 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80059ae:	6939      	ldr	r1, [r7, #16]
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f000 faa9 	bl	8005f08 <I2C_ITListenCplt>
 80059b6:	e031      	b.n	8005a1c <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b29      	cmp	r3, #41	; 0x29
 80059c2:	d10e      	bne.n	80059e2 <I2C_Slave_ISR_IT+0xae>
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80059ca:	d00a      	beq.n	80059e2 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2210      	movs	r2, #16
 80059d2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f000 fc02 	bl	80061de <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f000 f926 	bl	8005c2c <I2C_ITSlaveSeqCplt>
 80059e0:	e01c      	b.n	8005a1c <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2210      	movs	r2, #16
 80059e8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80059ea:	e08f      	b.n	8005b0c <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2210      	movs	r2, #16
 80059f2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f8:	f043 0204 	orr.w	r2, r3, #4
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d003      	beq.n	8005a0e <I2C_Slave_ISR_IT+0xda>
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a0c:	d17e      	bne.n	8005b0c <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a12:	4619      	mov	r1, r3
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f000 facb 	bl	8005fb0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005a1a:	e077      	b.n	8005b0c <I2C_Slave_ISR_IT+0x1d8>
 8005a1c:	e076      	b.n	8005b0c <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	f003 0304 	and.w	r3, r3, #4
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d02f      	beq.n	8005a88 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d02a      	beq.n	8005a88 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d018      	beq.n	8005a6e <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a46:	b2d2      	uxtb	r2, r2
 8005a48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4e:	1c5a      	adds	r2, r3, #1
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	3b01      	subs	r3, #1
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d14b      	bne.n	8005b10 <I2C_Slave_ISR_IT+0x1dc>
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a7e:	d047      	beq.n	8005b10 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f000 f8d3 	bl	8005c2c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005a86:	e043      	b.n	8005b10 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	f003 0308 	and.w	r3, r3, #8
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d009      	beq.n	8005aa6 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d004      	beq.n	8005aa6 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005a9c:	6939      	ldr	r1, [r7, #16]
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f000 f840 	bl	8005b24 <I2C_ITAddrCplt>
 8005aa4:	e035      	b.n	8005b12 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	f003 0302 	and.w	r3, r3, #2
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d030      	beq.n	8005b12 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d02b      	beq.n	8005b12 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d018      	beq.n	8005af6 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac8:	781a      	ldrb	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad4:	1c5a      	adds	r2, r3, #1
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aec:	3b01      	subs	r3, #1
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	851a      	strh	r2, [r3, #40]	; 0x28
 8005af4:	e00d      	b.n	8005b12 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005afc:	d002      	beq.n	8005b04 <I2C_Slave_ISR_IT+0x1d0>
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d106      	bne.n	8005b12 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f000 f891 	bl	8005c2c <I2C_ITSlaveSeqCplt>
 8005b0a:	e002      	b.n	8005b12 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8005b0c:	bf00      	nop
 8005b0e:	e000      	b.n	8005b12 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8005b10:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3718      	adds	r7, #24
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005b3a:	2b28      	cmp	r3, #40	; 0x28
 8005b3c:	d16a      	bne.n	8005c14 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	0c1b      	lsrs	r3, r3, #16
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	f003 0301 	and.w	r3, r3, #1
 8005b4c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	0c1b      	lsrs	r3, r3, #16
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005b5c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b6a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005b78:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d138      	bne.n	8005bf4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005b82:	897b      	ldrh	r3, [r7, #10]
 8005b84:	09db      	lsrs	r3, r3, #7
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	89bb      	ldrh	r3, [r7, #12]
 8005b8a:	4053      	eors	r3, r2
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	f003 0306 	and.w	r3, r3, #6
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d11c      	bne.n	8005bd0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005b96:	897b      	ldrh	r3, [r7, #10]
 8005b98:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b9e:	1c5a      	adds	r2, r3, #1
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d13b      	bne.n	8005c24 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2208      	movs	r2, #8
 8005bb8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005bc2:	89ba      	ldrh	r2, [r7, #12]
 8005bc4:	7bfb      	ldrb	r3, [r7, #15]
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f7ff fe87 	bl	80058dc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005bce:	e029      	b.n	8005c24 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005bd0:	893b      	ldrh	r3, [r7, #8]
 8005bd2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005bd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 fb42 	bl	8006262 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005be6:	89ba      	ldrh	r2, [r7, #12]
 8005be8:	7bfb      	ldrb	r3, [r7, #15]
 8005bea:	4619      	mov	r1, r3
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f7ff fe75 	bl	80058dc <HAL_I2C_AddrCallback>
}
 8005bf2:	e017      	b.n	8005c24 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005bf4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 fb32 	bl	8006262 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005c06:	89ba      	ldrh	r2, [r7, #12]
 8005c08:	7bfb      	ldrb	r3, [r7, #15]
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f7ff fe65 	bl	80058dc <HAL_I2C_AddrCallback>
}
 8005c12:	e007      	b.n	8005c24 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2208      	movs	r2, #8
 8005c1a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8005c24:	bf00      	nop
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d008      	beq.n	8005c60 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c5c:	601a      	str	r2, [r3, #0]
 8005c5e:	e00c      	b.n	8005c7a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d007      	beq.n	8005c7a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c78:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	2b29      	cmp	r3, #41	; 0x29
 8005c84:	d112      	bne.n	8005cac <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2228      	movs	r2, #40	; 0x28
 8005c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2221      	movs	r2, #33	; 0x21
 8005c92:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005c94:	2101      	movs	r1, #1
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fae3 	bl	8006262 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f7ff fe05 	bl	80058b4 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005caa:	e017      	b.n	8005cdc <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2b2a      	cmp	r3, #42	; 0x2a
 8005cb6:	d111      	bne.n	8005cdc <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2228      	movs	r2, #40	; 0x28
 8005cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2222      	movs	r2, #34	; 0x22
 8005cc4:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005cc6:	2102      	movs	r1, #2
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 faca 	bl	8006262 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f7ff fdf6 	bl	80058c8 <HAL_I2C_SlaveRxCpltCallback>
}
 8005cdc:	bf00      	nop
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b086      	sub	sp, #24
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d00:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2220      	movs	r2, #32
 8005d08:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005d0a:	7bfb      	ldrb	r3, [r7, #15]
 8005d0c:	2b21      	cmp	r3, #33	; 0x21
 8005d0e:	d002      	beq.n	8005d16 <I2C_ITSlaveCplt+0x32>
 8005d10:	7bfb      	ldrb	r3, [r7, #15]
 8005d12:	2b29      	cmp	r3, #41	; 0x29
 8005d14:	d108      	bne.n	8005d28 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005d16:	f248 0101 	movw	r1, #32769	; 0x8001
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 faa1 	bl	8006262 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2221      	movs	r2, #33	; 0x21
 8005d24:	631a      	str	r2, [r3, #48]	; 0x30
 8005d26:	e019      	b.n	8005d5c <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005d28:	7bfb      	ldrb	r3, [r7, #15]
 8005d2a:	2b22      	cmp	r3, #34	; 0x22
 8005d2c:	d002      	beq.n	8005d34 <I2C_ITSlaveCplt+0x50>
 8005d2e:	7bfb      	ldrb	r3, [r7, #15]
 8005d30:	2b2a      	cmp	r3, #42	; 0x2a
 8005d32:	d108      	bne.n	8005d46 <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005d34:	f248 0102 	movw	r1, #32770	; 0x8002
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 fa92 	bl	8006262 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2222      	movs	r2, #34	; 0x22
 8005d42:	631a      	str	r2, [r3, #48]	; 0x30
 8005d44:	e00a      	b.n	8005d5c <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8005d46:	7bfb      	ldrb	r3, [r7, #15]
 8005d48:	2b28      	cmp	r3, #40	; 0x28
 8005d4a:	d107      	bne.n	8005d5c <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8005d4c:	f248 0103 	movw	r1, #32771	; 0x8003
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 fa86 	bl	8006262 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	685a      	ldr	r2, [r3, #4]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d6a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6859      	ldr	r1, [r3, #4]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	4b62      	ldr	r3, [pc, #392]	; (8005f00 <I2C_ITSlaveCplt+0x21c>)
 8005d78:	400b      	ands	r3, r1
 8005d7a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 fa2e 	bl	80061de <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d013      	beq.n	8005db4 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d9a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d01f      	beq.n	8005de4 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005db2:	e017      	b.n	8005de4 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d012      	beq.n	8005de4 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005dcc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d006      	beq.n	8005de4 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	f003 0304 	and.w	r3, r3, #4
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d020      	beq.n	8005e30 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	f023 0304 	bic.w	r3, r3, #4
 8005df4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e00:	b2d2      	uxtb	r2, r2
 8005e02:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e08:	1c5a      	adds	r2, r3, #1
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00c      	beq.n	8005e30 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	b29a      	uxth	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	b29a      	uxth	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d005      	beq.n	8005e46 <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e3e:	f043 0204 	orr.w	r2, r3, #4
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d010      	beq.n	8005e7e <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e60:	4619      	mov	r1, r3
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f8a4 	bl	8005fb0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	2b28      	cmp	r3, #40	; 0x28
 8005e72:	d141      	bne.n	8005ef8 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005e74:	6979      	ldr	r1, [r7, #20]
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f846 	bl	8005f08 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005e7c:	e03c      	b.n	8005ef8 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e82:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e86:	d014      	beq.n	8005eb2 <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f7ff fecf 	bl	8005c2c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a1c      	ldr	r2, [pc, #112]	; (8005f04 <I2C_ITSlaveCplt+0x220>)
 8005e92:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2220      	movs	r2, #32
 8005e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f7ff fd24 	bl	80058f8 <HAL_I2C_ListenCpltCallback>
}
 8005eb0:	e022      	b.n	8005ef8 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b22      	cmp	r3, #34	; 0x22
 8005ebc:	d10e      	bne.n	8005edc <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2220      	movs	r2, #32
 8005ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f7ff fcf7 	bl	80058c8 <HAL_I2C_SlaveRxCpltCallback>
}
 8005eda:	e00d      	b.n	8005ef8 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2220      	movs	r2, #32
 8005ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f7ff fcde 	bl	80058b4 <HAL_I2C_SlaveTxCpltCallback>
}
 8005ef8:	bf00      	nop
 8005efa:	3718      	adds	r7, #24
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	fe00e800 	.word	0xfe00e800
 8005f04:	ffff0000 	.word	0xffff0000

08005f08 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a25      	ldr	r2, [pc, #148]	; (8005fac <I2C_ITListenCplt+0xa4>)
 8005f16:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2220      	movs	r2, #32
 8005f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	f003 0304 	and.w	r3, r3, #4
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d022      	beq.n	8005f84 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f48:	b2d2      	uxtb	r2, r2
 8005f4a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f50:	1c5a      	adds	r2, r3, #1
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d012      	beq.n	8005f84 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f62:	3b01      	subs	r3, #1
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	3b01      	subs	r3, #1
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f7c:	f043 0204 	orr.w	r2, r3, #4
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005f84:	f248 0103 	movw	r1, #32771	; 0x8003
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 f96a 	bl	8006262 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2210      	movs	r2, #16
 8005f94:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7ff fcaa 	bl	80058f8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005fa4:	bf00      	nop
 8005fa6:	3708      	adds	r7, #8
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	ffff0000 	.word	0xffff0000

08005fb0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fc0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a6d      	ldr	r2, [pc, #436]	; (8006184 <I2C_ITError+0x1d4>)
 8005fce:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	431a      	orrs	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005fe2:	7bfb      	ldrb	r3, [r7, #15]
 8005fe4:	2b28      	cmp	r3, #40	; 0x28
 8005fe6:	d005      	beq.n	8005ff4 <I2C_ITError+0x44>
 8005fe8:	7bfb      	ldrb	r3, [r7, #15]
 8005fea:	2b29      	cmp	r3, #41	; 0x29
 8005fec:	d002      	beq.n	8005ff4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005fee:	7bfb      	ldrb	r3, [r7, #15]
 8005ff0:	2b2a      	cmp	r3, #42	; 0x2a
 8005ff2:	d10b      	bne.n	800600c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005ff4:	2103      	movs	r1, #3
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 f933 	bl	8006262 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2228      	movs	r2, #40	; 0x28
 8006000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a60      	ldr	r2, [pc, #384]	; (8006188 <I2C_ITError+0x1d8>)
 8006008:	635a      	str	r2, [r3, #52]	; 0x34
 800600a:	e030      	b.n	800606e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800600c:	f248 0103 	movw	r1, #32771	; 0x8003
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 f926 	bl	8006262 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f8e1 	bl	80061de <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b60      	cmp	r3, #96	; 0x60
 8006026:	d01f      	beq.n	8006068 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2220      	movs	r2, #32
 800602c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	f003 0320 	and.w	r3, r3, #32
 800603a:	2b20      	cmp	r3, #32
 800603c:	d114      	bne.n	8006068 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	699b      	ldr	r3, [r3, #24]
 8006044:	f003 0310 	and.w	r3, r3, #16
 8006048:	2b10      	cmp	r3, #16
 800604a:	d109      	bne.n	8006060 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2210      	movs	r2, #16
 8006052:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006058:	f043 0204 	orr.w	r2, r3, #4
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2220      	movs	r2, #32
 8006066:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006072:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006078:	2b00      	cmp	r3, #0
 800607a:	d039      	beq.n	80060f0 <I2C_ITError+0x140>
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	2b11      	cmp	r3, #17
 8006080:	d002      	beq.n	8006088 <I2C_ITError+0xd8>
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	2b21      	cmp	r3, #33	; 0x21
 8006086:	d133      	bne.n	80060f0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006092:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006096:	d107      	bne.n	80060a8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80060a6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7ff f880 	bl	80051b2 <HAL_DMA_GetState>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d017      	beq.n	80060e8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060bc:	4a33      	ldr	r2, [pc, #204]	; (800618c <I2C_ITError+0x1dc>)
 80060be:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7fe ff62 	bl	8004f96 <HAL_DMA_Abort_IT>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d04d      	beq.n	8006174 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80060e2:	4610      	mov	r0, r2
 80060e4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80060e6:	e045      	b.n	8006174 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 f851 	bl	8006190 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80060ee:	e041      	b.n	8006174 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d039      	beq.n	800616c <I2C_ITError+0x1bc>
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	2b12      	cmp	r3, #18
 80060fc:	d002      	beq.n	8006104 <I2C_ITError+0x154>
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	2b22      	cmp	r3, #34	; 0x22
 8006102:	d133      	bne.n	800616c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800610e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006112:	d107      	bne.n	8006124 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006122:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006128:	4618      	mov	r0, r3
 800612a:	f7ff f842 	bl	80051b2 <HAL_DMA_GetState>
 800612e:	4603      	mov	r3, r0
 8006130:	2b01      	cmp	r3, #1
 8006132:	d017      	beq.n	8006164 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006138:	4a14      	ldr	r2, [pc, #80]	; (800618c <I2C_ITError+0x1dc>)
 800613a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006148:	4618      	mov	r0, r3
 800614a:	f7fe ff24 	bl	8004f96 <HAL_DMA_Abort_IT>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d011      	beq.n	8006178 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800615e:	4610      	mov	r0, r2
 8006160:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006162:	e009      	b.n	8006178 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 f813 	bl	8006190 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800616a:	e005      	b.n	8006178 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 f80f 	bl	8006190 <I2C_TreatErrorCallback>
  }
}
 8006172:	e002      	b.n	800617a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006174:	bf00      	nop
 8006176:	e000      	b.n	800617a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006178:	bf00      	nop
}
 800617a:	bf00      	nop
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	ffff0000 	.word	0xffff0000
 8006188:	08005935 	.word	0x08005935
 800618c:	08006227 	.word	0x08006227

08006190 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	2b60      	cmp	r3, #96	; 0x60
 80061a2:	d10e      	bne.n	80061c2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2220      	movs	r2, #32
 80061a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f7ff fbb0 	bl	8005920 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80061c0:	e009      	b.n	80061d6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f7ff fb9b 	bl	800590c <HAL_I2C_ErrorCallback>
}
 80061d6:	bf00      	nop
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80061de:	b480      	push	{r7}
 80061e0:	b083      	sub	sp, #12
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	699b      	ldr	r3, [r3, #24]
 80061ec:	f003 0302 	and.w	r3, r3, #2
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d103      	bne.n	80061fc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2200      	movs	r2, #0
 80061fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	f003 0301 	and.w	r3, r3, #1
 8006206:	2b01      	cmp	r3, #1
 8006208:	d007      	beq.n	800621a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	699a      	ldr	r2, [r3, #24]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f042 0201 	orr.w	r2, r2, #1
 8006218:	619a      	str	r2, [r3, #24]
  }
}
 800621a:	bf00      	nop
 800621c:	370c      	adds	r7, #12
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b084      	sub	sp, #16
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006232:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006238:	2b00      	cmp	r3, #0
 800623a:	d003      	beq.n	8006244 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006240:	2200      	movs	r2, #0
 8006242:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006248:	2b00      	cmp	r3, #0
 800624a:	d003      	beq.n	8006254 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006250:	2200      	movs	r2, #0
 8006252:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f7ff ff9b 	bl	8006190 <I2C_TreatErrorCallback>
}
 800625a:	bf00      	nop
 800625c:	3710      	adds	r7, #16
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006262:	b480      	push	{r7}
 8006264:	b085      	sub	sp, #20
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
 800626a:	460b      	mov	r3, r1
 800626c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800626e:	2300      	movs	r3, #0
 8006270:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006272:	887b      	ldrh	r3, [r7, #2]
 8006274:	f003 0301 	and.w	r3, r3, #1
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00f      	beq.n	800629c <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8006282:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800628a:	b2db      	uxtb	r3, r3
 800628c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006290:	2b28      	cmp	r3, #40	; 0x28
 8006292:	d003      	beq.n	800629c <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800629a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800629c:	887b      	ldrh	r3, [r7, #2]
 800629e:	f003 0302 	and.w	r3, r3, #2
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00f      	beq.n	80062c6 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80062ac:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80062ba:	2b28      	cmp	r3, #40	; 0x28
 80062bc:	d003      	beq.n	80062c6 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80062c4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80062c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	da03      	bge.n	80062d6 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80062d4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80062d6:	887b      	ldrh	r3, [r7, #2]
 80062d8:	2b10      	cmp	r3, #16
 80062da:	d103      	bne.n	80062e4 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80062e2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80062e4:	887b      	ldrh	r3, [r7, #2]
 80062e6:	2b20      	cmp	r3, #32
 80062e8:	d103      	bne.n	80062f2 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f043 0320 	orr.w	r3, r3, #32
 80062f0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80062f2:	887b      	ldrh	r3, [r7, #2]
 80062f4:	2b40      	cmp	r3, #64	; 0x40
 80062f6:	d103      	bne.n	8006300 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062fe:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	6819      	ldr	r1, [r3, #0]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	43da      	mvns	r2, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	400a      	ands	r2, r1
 8006310:	601a      	str	r2, [r3, #0]
}
 8006312:	bf00      	nop
 8006314:	3714      	adds	r7, #20
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr

0800631e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800631e:	b480      	push	{r7}
 8006320:	b083      	sub	sp, #12
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
 8006326:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800632e:	b2db      	uxtb	r3, r3
 8006330:	2b20      	cmp	r3, #32
 8006332:	d138      	bne.n	80063a6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800633a:	2b01      	cmp	r3, #1
 800633c:	d101      	bne.n	8006342 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800633e:	2302      	movs	r3, #2
 8006340:	e032      	b.n	80063a8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2201      	movs	r2, #1
 8006346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2224      	movs	r2, #36	; 0x24
 800634e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f022 0201 	bic.w	r2, r2, #1
 8006360:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006370:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	6819      	ldr	r1, [r3, #0]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	683a      	ldr	r2, [r7, #0]
 800637e:	430a      	orrs	r2, r1
 8006380:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f042 0201 	orr.w	r2, r2, #1
 8006390:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2220      	movs	r2, #32
 8006396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80063a2:	2300      	movs	r3, #0
 80063a4:	e000      	b.n	80063a8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80063a6:	2302      	movs	r3, #2
  }
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b20      	cmp	r3, #32
 80063c8:	d139      	bne.n	800643e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d101      	bne.n	80063d8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80063d4:	2302      	movs	r3, #2
 80063d6:	e033      	b.n	8006440 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2224      	movs	r2, #36	; 0x24
 80063e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f022 0201 	bic.w	r2, r2, #1
 80063f6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006406:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	021b      	lsls	r3, r3, #8
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	4313      	orrs	r3, r2
 8006410:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f042 0201 	orr.w	r2, r2, #1
 8006428:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2220      	movs	r2, #32
 800642e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800643a:	2300      	movs	r3, #0
 800643c:	e000      	b.n	8006440 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800643e:	2302      	movs	r3, #2
  }
}
 8006440:	4618      	mov	r0, r3
 8006442:	3714      	adds	r7, #20
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b086      	sub	sp, #24
 8006450:	af02      	add	r7, sp, #8
 8006452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006454:	2300      	movs	r3, #0
 8006456:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8006458:	f7fd fb1e 	bl	8003a98 <HAL_GetTick>
 800645c:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d102      	bne.n	800646a <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	73fb      	strb	r3, [r7, #15]
 8006468:	e092      	b.n	8006590 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006474:	2b00      	cmp	r3, #0
 8006476:	f040 808b 	bne.w	8006590 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f7fc ff74 	bl	8003368 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8006480:	f241 3188 	movw	r1, #5000	; 0x1388
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 f88b 	bl	80065a0 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	689a      	ldr	r2, [r3, #8]
 8006490:	4b42      	ldr	r3, [pc, #264]	; (800659c <HAL_OSPI_Init+0x150>)
 8006492:	4013      	ands	r3, r2
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	68d1      	ldr	r1, [r2, #12]
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	6912      	ldr	r2, [r2, #16]
 800649c:	3a01      	subs	r2, #1
 800649e:	0412      	lsls	r2, r2, #16
 80064a0:	4311      	orrs	r1, r2
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	6952      	ldr	r2, [r2, #20]
 80064a6:	3a01      	subs	r2, #1
 80064a8:	0212      	lsls	r2, r2, #8
 80064aa:	4311      	orrs	r1, r2
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80064b0:	4311      	orrs	r1, r2
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	69d2      	ldr	r2, [r2, #28]
 80064b6:	4311      	orrs	r1, r2
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	6812      	ldr	r2, [r2, #0]
 80064bc:	430b      	orrs	r3, r1
 80064be:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	0412      	lsls	r2, r2, #16
 80064ca:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	3b01      	subs	r3, #1
 80064dc:	021a      	lsls	r2, r3, #8
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	430a      	orrs	r2, r1
 80064e4:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ea:	9300      	str	r3, [sp, #0]
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	2200      	movs	r2, #0
 80064f0:	2120      	movs	r1, #32
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fb98 	bl	8006c28 <OSPI_WaitFlagStateUntilTimeout>
 80064f8:	4603      	mov	r3, r0
 80064fa:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80064fc:	7bfb      	ldrb	r3, [r7, #15]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d146      	bne.n	8006590 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a1b      	ldr	r3, [r3, #32]
 8006510:	1e5a      	subs	r2, r3, #1
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	689a      	ldr	r2, [r3, #8]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	430a      	orrs	r2, r1
 800652e:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006538:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006544:	431a      	orrs	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	430a      	orrs	r2, r1
 800654c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f042 0201 	orr.w	r2, r2, #1
 800655e:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	699b      	ldr	r3, [r3, #24]
 8006564:	2b02      	cmp	r3, #2
 8006566:	d107      	bne.n	8006578 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	689a      	ldr	r2, [r3, #8]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f042 0202 	orr.w	r2, r2, #2
 8006576:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006580:	d103      	bne.n	800658a <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2201      	movs	r2, #1
 8006586:	645a      	str	r2, [r3, #68]	; 0x44
 8006588:	e002      	b.n	8006590 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2202      	movs	r2, #2
 800658e:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8006590:	7bfb      	ldrb	r3, [r7, #15]
}
 8006592:	4618      	mov	r0, r3
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	f8e0f8f4 	.word	0xf8e0f8f4

080065a0 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	683a      	ldr	r2, [r7, #0]
 80065ae:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	370c      	adds	r7, #12
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
	...

080065c0 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b092      	sub	sp, #72	; 0x48
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065cc:	2300      	movs	r3, #0
 80065ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 80065d2:	2300      	movs	r3, #0
 80065d4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a08      	ldr	r2, [pc, #32]	; (8006600 <HAL_OSPIM_Config+0x40>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d105      	bne.n	80065ee <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80065e2:	2300      	movs	r3, #0
 80065e4:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 80065e6:	2301      	movs	r3, #1
 80065e8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80065ec:	e004      	b.n	80065f8 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80065ee:	2301      	movs	r3, #1
 80065f0:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 80065f2:	2300      	movs	r3, #0
 80065f4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80065f8:	2300      	movs	r3, #0
 80065fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80065fe:	e01f      	b.n	8006640 <HAL_OSPIM_Config+0x80>
 8006600:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8006604:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006608:	3301      	adds	r3, #1
 800660a:	b2d8      	uxtb	r0, r3
 800660c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006610:	f107 0114 	add.w	r1, r7, #20
 8006614:	4613      	mov	r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4413      	add	r3, r2
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	440b      	add	r3, r1
 800661e:	4619      	mov	r1, r3
 8006620:	f000 fb3a 	bl	8006c98 <OSPIM_GetConfig>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d005      	beq.n	8006636 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2208      	movs	r2, #8
 8006634:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8006636:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800663a:	3301      	adds	r3, #1
 800663c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006640:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006644:	2b01      	cmp	r3, #1
 8006646:	d9dd      	bls.n	8006604 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8006648:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800664c:	2b00      	cmp	r3, #0
 800664e:	f040 82de 	bne.w	8006c0e <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8006652:	4bc6      	ldr	r3, [pc, #792]	; (800696c <HAL_OSPIM_Config+0x3ac>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00b      	beq.n	8006676 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800665e:	4bc3      	ldr	r3, [pc, #780]	; (800696c <HAL_OSPIM_Config+0x3ac>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4ac2      	ldr	r2, [pc, #776]	; (800696c <HAL_OSPIM_Config+0x3ac>)
 8006664:	f023 0301 	bic.w	r3, r3, #1
 8006668:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800666a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800666e:	f043 0301 	orr.w	r3, r3, #1
 8006672:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8006676:	4bbe      	ldr	r3, [pc, #760]	; (8006970 <HAL_OSPIM_Config+0x3b0>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 0301 	and.w	r3, r3, #1
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00b      	beq.n	800669a <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8006682:	4bbb      	ldr	r3, [pc, #748]	; (8006970 <HAL_OSPIM_Config+0x3b0>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4aba      	ldr	r2, [pc, #744]	; (8006970 <HAL_OSPIM_Config+0x3b0>)
 8006688:	f023 0301 	bic.w	r3, r3, #1
 800668c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800668e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006692:	f043 0302 	orr.w	r3, r3, #2
 8006696:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800669a:	49b6      	ldr	r1, [pc, #728]	; (8006974 <HAL_OSPIM_Config+0x3b4>)
 800669c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800669e:	4613      	mov	r3, r2
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	4413      	add	r3, r2
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	3348      	adds	r3, #72	; 0x48
 80066a8:	443b      	add	r3, r7
 80066aa:	3b2c      	subs	r3, #44	; 0x2c
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	3b01      	subs	r3, #1
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	440b      	add	r3, r1
 80066b4:	6859      	ldr	r1, [r3, #4]
 80066b6:	48af      	ldr	r0, [pc, #700]	; (8006974 <HAL_OSPIM_Config+0x3b4>)
 80066b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066ba:	4613      	mov	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	3348      	adds	r3, #72	; 0x48
 80066c4:	443b      	add	r3, r7
 80066c6:	3b2c      	subs	r3, #44	; 0x2c
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	3b01      	subs	r3, #1
 80066cc:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	4403      	add	r3, r0
 80066d4:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 80066d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066d8:	4613      	mov	r3, r2
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	4413      	add	r3, r2
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	3348      	adds	r3, #72	; 0x48
 80066e2:	443b      	add	r3, r7
 80066e4:	3b34      	subs	r3, #52	; 0x34
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	f000 80a1 	beq.w	8006830 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80066ee:	49a1      	ldr	r1, [pc, #644]	; (8006974 <HAL_OSPIM_Config+0x3b4>)
 80066f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066f2:	4613      	mov	r3, r2
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	4413      	add	r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	3348      	adds	r3, #72	; 0x48
 80066fc:	443b      	add	r3, r7
 80066fe:	3b34      	subs	r3, #52	; 0x34
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	3b01      	subs	r3, #1
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	440b      	add	r3, r1
 8006708:	6859      	ldr	r1, [r3, #4]
 800670a:	489a      	ldr	r0, [pc, #616]	; (8006974 <HAL_OSPIM_Config+0x3b4>)
 800670c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800670e:	4613      	mov	r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	4413      	add	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	3348      	adds	r3, #72	; 0x48
 8006718:	443b      	add	r3, r7
 800671a:	3b34      	subs	r3, #52	; 0x34
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	3b01      	subs	r3, #1
 8006720:	f021 0201 	bic.w	r2, r1, #1
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4403      	add	r3, r0
 8006728:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800672a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800672c:	4613      	mov	r3, r2
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4413      	add	r3, r2
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	3348      	adds	r3, #72	; 0x48
 8006736:	443b      	add	r3, r7
 8006738:	3b30      	subs	r3, #48	; 0x30
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d01d      	beq.n	800677c <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8006740:	498c      	ldr	r1, [pc, #560]	; (8006974 <HAL_OSPIM_Config+0x3b4>)
 8006742:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006744:	4613      	mov	r3, r2
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	4413      	add	r3, r2
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	3348      	adds	r3, #72	; 0x48
 800674e:	443b      	add	r3, r7
 8006750:	3b30      	subs	r3, #48	; 0x30
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	3b01      	subs	r3, #1
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	440b      	add	r3, r1
 800675a:	6859      	ldr	r1, [r3, #4]
 800675c:	4885      	ldr	r0, [pc, #532]	; (8006974 <HAL_OSPIM_Config+0x3b4>)
 800675e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006760:	4613      	mov	r3, r2
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	4413      	add	r3, r2
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	3348      	adds	r3, #72	; 0x48
 800676a:	443b      	add	r3, r7
 800676c:	3b30      	subs	r3, #48	; 0x30
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	3b01      	subs	r3, #1
 8006772:	f021 0210 	bic.w	r2, r1, #16
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	4403      	add	r3, r0
 800677a:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800677c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800677e:	4613      	mov	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4413      	add	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	3348      	adds	r3, #72	; 0x48
 8006788:	443b      	add	r3, r7
 800678a:	3b28      	subs	r3, #40	; 0x28
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d021      	beq.n	80067d6 <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8006792:	4978      	ldr	r1, [pc, #480]	; (8006974 <HAL_OSPIM_Config+0x3b4>)
 8006794:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006796:	4613      	mov	r3, r2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	4413      	add	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	3348      	adds	r3, #72	; 0x48
 80067a0:	443b      	add	r3, r7
 80067a2:	3b28      	subs	r3, #40	; 0x28
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	3b01      	subs	r3, #1
 80067a8:	f003 0301 	and.w	r3, r3, #1
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	440b      	add	r3, r1
 80067b0:	6859      	ldr	r1, [r3, #4]
 80067b2:	4870      	ldr	r0, [pc, #448]	; (8006974 <HAL_OSPIM_Config+0x3b4>)
 80067b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067b6:	4613      	mov	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	4413      	add	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	3348      	adds	r3, #72	; 0x48
 80067c0:	443b      	add	r3, r7
 80067c2:	3b28      	subs	r3, #40	; 0x28
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	3b01      	subs	r3, #1
 80067c8:	f003 0301 	and.w	r3, r3, #1
 80067cc:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	4403      	add	r3, r0
 80067d4:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80067d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067d8:	4613      	mov	r3, r2
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	4413      	add	r3, r2
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	3348      	adds	r3, #72	; 0x48
 80067e2:	443b      	add	r3, r7
 80067e4:	3b24      	subs	r3, #36	; 0x24
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d021      	beq.n	8006830 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80067ec:	4961      	ldr	r1, [pc, #388]	; (8006974 <HAL_OSPIM_Config+0x3b4>)
 80067ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067f0:	4613      	mov	r3, r2
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	4413      	add	r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	3348      	adds	r3, #72	; 0x48
 80067fa:	443b      	add	r3, r7
 80067fc:	3b24      	subs	r3, #36	; 0x24
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	3b01      	subs	r3, #1
 8006802:	f003 0301 	and.w	r3, r3, #1
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	440b      	add	r3, r1
 800680a:	6859      	ldr	r1, [r3, #4]
 800680c:	4859      	ldr	r0, [pc, #356]	; (8006974 <HAL_OSPIM_Config+0x3b4>)
 800680e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006810:	4613      	mov	r3, r2
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	4413      	add	r3, r2
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	3348      	adds	r3, #72	; 0x48
 800681a:	443b      	add	r3, r7
 800681c:	3b24      	subs	r3, #36	; 0x24
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	3b01      	subs	r3, #1
 8006822:	f003 0301 	and.w	r3, r3, #1
 8006826:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4403      	add	r3, r0
 800682e:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	6819      	ldr	r1, [r3, #0]
 8006834:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006838:	4613      	mov	r3, r2
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	4413      	add	r3, r2
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	3348      	adds	r3, #72	; 0x48
 8006842:	443b      	add	r3, r7
 8006844:	3b34      	subs	r3, #52	; 0x34
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4299      	cmp	r1, r3
 800684a:	d038      	beq.n	80068be <HAL_OSPIM_Config+0x2fe>
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	6859      	ldr	r1, [r3, #4]
 8006850:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006854:	4613      	mov	r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4413      	add	r3, r2
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	3348      	adds	r3, #72	; 0x48
 800685e:	443b      	add	r3, r7
 8006860:	3b30      	subs	r3, #48	; 0x30
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4299      	cmp	r1, r3
 8006866:	d02a      	beq.n	80068be <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	6899      	ldr	r1, [r3, #8]
 800686c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006870:	4613      	mov	r3, r2
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	4413      	add	r3, r2
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	3348      	adds	r3, #72	; 0x48
 800687a:	443b      	add	r3, r7
 800687c:	3b2c      	subs	r3, #44	; 0x2c
 800687e:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8006880:	4299      	cmp	r1, r3
 8006882:	d01c      	beq.n	80068be <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	68d9      	ldr	r1, [r3, #12]
 8006888:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800688c:	4613      	mov	r3, r2
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	4413      	add	r3, r2
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	3348      	adds	r3, #72	; 0x48
 8006896:	443b      	add	r3, r7
 8006898:	3b28      	subs	r3, #40	; 0x28
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4299      	cmp	r1, r3
 800689e:	d00e      	beq.n	80068be <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	6919      	ldr	r1, [r3, #16]
 80068a4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80068a8:	4613      	mov	r3, r2
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	4413      	add	r3, r2
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	3348      	adds	r3, #72	; 0x48
 80068b2:	443b      	add	r3, r7
 80068b4:	3b24      	subs	r3, #36	; 0x24
 80068b6:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80068b8:	4299      	cmp	r1, r3
 80068ba:	f040 80d3 	bne.w	8006a64 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80068be:	492d      	ldr	r1, [pc, #180]	; (8006974 <HAL_OSPIM_Config+0x3b4>)
 80068c0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80068c4:	4613      	mov	r3, r2
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	4413      	add	r3, r2
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	3348      	adds	r3, #72	; 0x48
 80068ce:	443b      	add	r3, r7
 80068d0:	3b34      	subs	r3, #52	; 0x34
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	3b01      	subs	r3, #1
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	440b      	add	r3, r1
 80068da:	6859      	ldr	r1, [r3, #4]
 80068dc:	4825      	ldr	r0, [pc, #148]	; (8006974 <HAL_OSPIM_Config+0x3b4>)
 80068de:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80068e2:	4613      	mov	r3, r2
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	4413      	add	r3, r2
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	3348      	adds	r3, #72	; 0x48
 80068ec:	443b      	add	r3, r7
 80068ee:	3b34      	subs	r3, #52	; 0x34
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	3b01      	subs	r3, #1
 80068f4:	f021 0201 	bic.w	r2, r1, #1
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	4403      	add	r3, r0
 80068fc:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80068fe:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006902:	4613      	mov	r3, r2
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	4413      	add	r3, r2
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	3348      	adds	r3, #72	; 0x48
 800690c:	443b      	add	r3, r7
 800690e:	3b30      	subs	r3, #48	; 0x30
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d01f      	beq.n	8006956 <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8006916:	4917      	ldr	r1, [pc, #92]	; (8006974 <HAL_OSPIM_Config+0x3b4>)
 8006918:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800691c:	4613      	mov	r3, r2
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	4413      	add	r3, r2
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	3348      	adds	r3, #72	; 0x48
 8006926:	443b      	add	r3, r7
 8006928:	3b30      	subs	r3, #48	; 0x30
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	3b01      	subs	r3, #1
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	440b      	add	r3, r1
 8006932:	6859      	ldr	r1, [r3, #4]
 8006934:	480f      	ldr	r0, [pc, #60]	; (8006974 <HAL_OSPIM_Config+0x3b4>)
 8006936:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800693a:	4613      	mov	r3, r2
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	4413      	add	r3, r2
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	3348      	adds	r3, #72	; 0x48
 8006944:	443b      	add	r3, r7
 8006946:	3b30      	subs	r3, #48	; 0x30
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	3b01      	subs	r3, #1
 800694c:	f021 0210 	bic.w	r2, r1, #16
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4403      	add	r3, r0
 8006954:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8006956:	4907      	ldr	r1, [pc, #28]	; (8006974 <HAL_OSPIM_Config+0x3b4>)
 8006958:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800695c:	4613      	mov	r3, r2
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	4413      	add	r3, r2
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	3348      	adds	r3, #72	; 0x48
 8006966:	443b      	add	r3, r7
 8006968:	3b2c      	subs	r3, #44	; 0x2c
 800696a:	e005      	b.n	8006978 <HAL_OSPIM_Config+0x3b8>
 800696c:	a0001000 	.word	0xa0001000
 8006970:	a0001400 	.word	0xa0001400
 8006974:	50061c00 	.word	0x50061c00
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	3b01      	subs	r3, #1
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	440b      	add	r3, r1
 8006980:	6859      	ldr	r1, [r3, #4]
 8006982:	48a6      	ldr	r0, [pc, #664]	; (8006c1c <HAL_OSPIM_Config+0x65c>)
 8006984:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006988:	4613      	mov	r3, r2
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	4413      	add	r3, r2
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	3348      	adds	r3, #72	; 0x48
 8006992:	443b      	add	r3, r7
 8006994:	3b2c      	subs	r3, #44	; 0x2c
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	3b01      	subs	r3, #1
 800699a:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	4403      	add	r3, r0
 80069a2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80069a4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80069a8:	4613      	mov	r3, r2
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	4413      	add	r3, r2
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	3348      	adds	r3, #72	; 0x48
 80069b2:	443b      	add	r3, r7
 80069b4:	3b28      	subs	r3, #40	; 0x28
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d023      	beq.n	8006a04 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80069bc:	4997      	ldr	r1, [pc, #604]	; (8006c1c <HAL_OSPIM_Config+0x65c>)
 80069be:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80069c2:	4613      	mov	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	4413      	add	r3, r2
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	3348      	adds	r3, #72	; 0x48
 80069cc:	443b      	add	r3, r7
 80069ce:	3b28      	subs	r3, #40	; 0x28
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	3b01      	subs	r3, #1
 80069d4:	f003 0301 	and.w	r3, r3, #1
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	440b      	add	r3, r1
 80069dc:	6859      	ldr	r1, [r3, #4]
 80069de:	488f      	ldr	r0, [pc, #572]	; (8006c1c <HAL_OSPIM_Config+0x65c>)
 80069e0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80069e4:	4613      	mov	r3, r2
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	4413      	add	r3, r2
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	3348      	adds	r3, #72	; 0x48
 80069ee:	443b      	add	r3, r7
 80069f0:	3b28      	subs	r3, #40	; 0x28
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	3b01      	subs	r3, #1
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	4403      	add	r3, r0
 8006a02:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006a04:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006a08:	4613      	mov	r3, r2
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	4413      	add	r3, r2
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	3348      	adds	r3, #72	; 0x48
 8006a12:	443b      	add	r3, r7
 8006a14:	3b24      	subs	r3, #36	; 0x24
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d023      	beq.n	8006a64 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006a1c:	497f      	ldr	r1, [pc, #508]	; (8006c1c <HAL_OSPIM_Config+0x65c>)
 8006a1e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006a22:	4613      	mov	r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4413      	add	r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	3348      	adds	r3, #72	; 0x48
 8006a2c:	443b      	add	r3, r7
 8006a2e:	3b24      	subs	r3, #36	; 0x24
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	3b01      	subs	r3, #1
 8006a34:	f003 0301 	and.w	r3, r3, #1
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	440b      	add	r3, r1
 8006a3c:	6859      	ldr	r1, [r3, #4]
 8006a3e:	4877      	ldr	r0, [pc, #476]	; (8006c1c <HAL_OSPIM_Config+0x65c>)
 8006a40:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006a44:	4613      	mov	r3, r2
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4413      	add	r3, r2
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	3348      	adds	r3, #72	; 0x48
 8006a4e:	443b      	add	r3, r7
 8006a50:	3b24      	subs	r3, #36	; 0x24
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	3b01      	subs	r3, #1
 8006a56:	f003 0301 	and.w	r3, r3, #1
 8006a5a:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	4403      	add	r3, r0
 8006a62:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8006a64:	4a6d      	ldr	r2, [pc, #436]	; (8006c1c <HAL_OSPIM_Config+0x65c>)
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	4413      	add	r3, r2
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a78:	025b      	lsls	r3, r3, #9
 8006a7a:	431a      	orrs	r2, r3
 8006a7c:	4967      	ldr	r1, [pc, #412]	; (8006c1c <HAL_OSPIM_Config+0x65c>)
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	3b01      	subs	r3, #1
 8006a84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	440b      	add	r3, r1
 8006a8c:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8006a8e:	4a63      	ldr	r2, [pc, #396]	; (8006c1c <HAL_OSPIM_Config+0x65c>)
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	3b01      	subs	r3, #1
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	4413      	add	r3, r2
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	f023 0203 	bic.w	r2, r3, #3
 8006aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aa2:	005b      	lsls	r3, r3, #1
 8006aa4:	431a      	orrs	r2, r3
 8006aa6:	495d      	ldr	r1, [pc, #372]	; (8006c1c <HAL_OSPIM_Config+0x65c>)
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	3b01      	subs	r3, #1
 8006aae:	f042 0201 	orr.w	r2, r2, #1
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	440b      	add	r3, r1
 8006ab6:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d014      	beq.n	8006aea <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8006ac0:	4a56      	ldr	r2, [pc, #344]	; (8006c1c <HAL_OSPIM_Config+0x65c>)
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	4413      	add	r3, r2
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006ad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ad4:	015b      	lsls	r3, r3, #5
 8006ad6:	431a      	orrs	r2, r3
 8006ad8:	4950      	ldr	r1, [pc, #320]	; (8006c1c <HAL_OSPIM_Config+0x65c>)
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	3b01      	subs	r3, #1
 8006ae0:	f042 0210 	orr.w	r2, r2, #16
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	440b      	add	r3, r1
 8006ae8:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d019      	beq.n	8006b2a <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006af6:	4a49      	ldr	r2, [pc, #292]	; (8006c1c <HAL_OSPIM_Config+0x65c>)
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	3b01      	subs	r3, #1
 8006afe:	f003 0301 	and.w	r3, r3, #1
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4413      	add	r3, r2
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006b0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b0e:	049b      	lsls	r3, r3, #18
 8006b10:	431a      	orrs	r2, r3
 8006b12:	4942      	ldr	r1, [pc, #264]	; (8006c1c <HAL_OSPIM_Config+0x65c>)
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	f003 0301 	and.w	r3, r3, #1
 8006b1e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	440b      	add	r3, r1
 8006b26:	605a      	str	r2, [r3, #4]
 8006b28:	e01c      	b.n	8006b64 <HAL_OSPIM_Config+0x5a4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d018      	beq.n	8006b64 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006b32:	4a3a      	ldr	r2, [pc, #232]	; (8006c1c <HAL_OSPIM_Config+0x65c>)
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	f003 0301 	and.w	r3, r3, #1
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	4413      	add	r3, r2
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006b48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b4a:	069b      	lsls	r3, r3, #26
 8006b4c:	431a      	orrs	r2, r3
 8006b4e:	4933      	ldr	r1, [pc, #204]	; (8006c1c <HAL_OSPIM_Config+0x65c>)
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	3b01      	subs	r3, #1
 8006b56:	f003 0301 	and.w	r3, r3, #1
 8006b5a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	440b      	add	r3, r1
 8006b62:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d019      	beq.n	8006ba4 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006b70:	4a2a      	ldr	r2, [pc, #168]	; (8006c1c <HAL_OSPIM_Config+0x65c>)
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	3b01      	subs	r3, #1
 8006b78:	f003 0301 	and.w	r3, r3, #1
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4413      	add	r3, r2
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006b86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b88:	049b      	lsls	r3, r3, #18
 8006b8a:	431a      	orrs	r2, r3
 8006b8c:	4923      	ldr	r1, [pc, #140]	; (8006c1c <HAL_OSPIM_Config+0x65c>)
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	3b01      	subs	r3, #1
 8006b94:	f003 0301 	and.w	r3, r3, #1
 8006b98:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	440b      	add	r3, r1
 8006ba0:	605a      	str	r2, [r3, #4]
 8006ba2:	e01c      	b.n	8006bde <HAL_OSPIM_Config+0x61e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d018      	beq.n	8006bde <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006bac:	4a1b      	ldr	r2, [pc, #108]	; (8006c1c <HAL_OSPIM_Config+0x65c>)
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	3b01      	subs	r3, #1
 8006bb4:	f003 0301 	and.w	r3, r3, #1
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	4413      	add	r3, r2
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006bc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bc4:	069b      	lsls	r3, r3, #26
 8006bc6:	431a      	orrs	r2, r3
 8006bc8:	4914      	ldr	r1, [pc, #80]	; (8006c1c <HAL_OSPIM_Config+0x65c>)
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	f003 0301 	and.w	r3, r3, #1
 8006bd4:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	440b      	add	r3, r1
 8006bdc:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8006bde:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006be2:	f003 0301 	and.w	r3, r3, #1
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d005      	beq.n	8006bf6 <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8006bea:	4b0d      	ldr	r3, [pc, #52]	; (8006c20 <HAL_OSPIM_Config+0x660>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a0c      	ldr	r2, [pc, #48]	; (8006c20 <HAL_OSPIM_Config+0x660>)
 8006bf0:	f043 0301 	orr.w	r3, r3, #1
 8006bf4:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8006bf6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006bfa:	f003 0302 	and.w	r3, r3, #2
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d005      	beq.n	8006c0e <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8006c02:	4b08      	ldr	r3, [pc, #32]	; (8006c24 <HAL_OSPIM_Config+0x664>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a07      	ldr	r2, [pc, #28]	; (8006c24 <HAL_OSPIM_Config+0x664>)
 8006c08:	f043 0301 	orr.w	r3, r3, #1
 8006c0c:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8006c0e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3748      	adds	r7, #72	; 0x48
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	50061c00 	.word	0x50061c00
 8006c20:	a0001000 	.word	0xa0001000
 8006c24:	a0001400 	.word	0xa0001400

08006c28 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	603b      	str	r3, [r7, #0]
 8006c34:	4613      	mov	r3, r2
 8006c36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8006c38:	e01a      	b.n	8006c70 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c40:	d016      	beq.n	8006c70 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c42:	f7fc ff29 	bl	8003a98 <HAL_GetTick>
 8006c46:	4602      	mov	r2, r0
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	1ad3      	subs	r3, r2, r3
 8006c4c:	69ba      	ldr	r2, [r7, #24]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d302      	bcc.n	8006c58 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d10b      	bne.n	8006c70 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c5e:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c64:	f043 0201 	orr.w	r2, r3, #1
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e00e      	b.n	8006c8e <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	6a1a      	ldr	r2, [r3, #32]
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	4013      	ands	r3, r2
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	bf14      	ite	ne
 8006c7e:	2301      	movne	r3, #1
 8006c80:	2300      	moveq	r3, #0
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	461a      	mov	r2, r3
 8006c86:	79fb      	ldrb	r3, [r7, #7]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d1d6      	bne.n	8006c3a <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
	...

08006c98 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b087      	sub	sp, #28
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	6039      	str	r1, [r7, #0]
 8006ca2:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8006cac:	79fb      	ldrb	r3, [r7, #7]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d005      	beq.n	8006cbe <OSPIM_GetConfig+0x26>
 8006cb2:	79fb      	ldrb	r3, [r7, #7]
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d802      	bhi.n	8006cbe <OSPIM_GetConfig+0x26>
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d102      	bne.n	8006cc4 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	75fb      	strb	r3, [r7, #23]
 8006cc2:	e08e      	b.n	8006de2 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8006ce2:	79fb      	ldrb	r3, [r7, #7]
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	d101      	bne.n	8006cec <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8006ce8:	4b41      	ldr	r3, [pc, #260]	; (8006df0 <OSPIM_GetConfig+0x158>)
 8006cea:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8006cec:	2300      	movs	r3, #0
 8006cee:	60fb      	str	r3, [r7, #12]
 8006cf0:	e074      	b.n	8006ddc <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8006cf2:	4a40      	ldr	r2, [pc, #256]	; (8006df4 <OSPIM_GetConfig+0x15c>)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	4413      	add	r3, r2
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	f003 0301 	and.w	r3, r3, #1
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00a      	beq.n	8006d1e <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8006d08:	68ba      	ldr	r2, [r7, #8]
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	4053      	eors	r3, r2
 8006d0e:	f003 0302 	and.w	r3, r3, #2
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d103      	bne.n	8006d1e <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	1c5a      	adds	r2, r3, #1
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	f003 0310 	and.w	r3, r3, #16
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00a      	beq.n	8006d3e <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	4053      	eors	r3, r2
 8006d2e:	f003 0320 	and.w	r3, r3, #32
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d103      	bne.n	8006d3e <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	1c5a      	adds	r2, r3, #1
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00a      	beq.n	8006d5e <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	4053      	eors	r3, r2
 8006d4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d103      	bne.n	8006d5e <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	1c5a      	adds	r2, r3, #1
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d018      	beq.n	8006d9a <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	4053      	eors	r3, r2
 8006d6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d111      	bne.n	8006d9a <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d106      	bne.n	8006d8e <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	3301      	adds	r3, #1
 8006d84:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	60da      	str	r2, [r3, #12]
 8006d8c:	e005      	b.n	8006d9a <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	3301      	adds	r3, #1
 8006d92:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d018      	beq.n	8006dd6 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8006da4:	68ba      	ldr	r2, [r7, #8]
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	4053      	eors	r3, r2
 8006daa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d111      	bne.n	8006dd6 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d106      	bne.n	8006dca <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	611a      	str	r2, [r3, #16]
 8006dc8:	e005      	b.n	8006dd6 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	3301      	adds	r3, #1
 8006dce:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	3301      	adds	r3, #1
 8006dda:	60fb      	str	r3, [r7, #12]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d987      	bls.n	8006cf2 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8006de2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	371c      	adds	r7, #28
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr
 8006df0:	04040222 	.word	0x04040222
 8006df4:	50061c00 	.word	0x50061c00

08006df8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006dfc:	4b05      	ldr	r3, [pc, #20]	; (8006e14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a04      	ldr	r2, [pc, #16]	; (8006e14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e06:	6013      	str	r3, [r2, #0]
}
 8006e08:	bf00      	nop
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	40007000 	.word	0x40007000

08006e18 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e1c:	4b0d      	ldr	r3, [pc, #52]	; (8006e54 <HAL_PWREx_GetVoltageRange+0x3c>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006e24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e28:	d102      	bne.n	8006e30 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8006e2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e2e:	e00b      	b.n	8006e48 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8006e30:	4b08      	ldr	r3, [pc, #32]	; (8006e54 <HAL_PWREx_GetVoltageRange+0x3c>)
 8006e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e3e:	d102      	bne.n	8006e46 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8006e40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e44:	e000      	b.n	8006e48 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8006e46:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr
 8006e52:	bf00      	nop
 8006e54:	40007000 	.word	0x40007000

08006e58 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d141      	bne.n	8006eea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e66:	4b4b      	ldr	r3, [pc, #300]	; (8006f94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e72:	d131      	bne.n	8006ed8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e74:	4b47      	ldr	r3, [pc, #284]	; (8006f94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e7a:	4a46      	ldr	r2, [pc, #280]	; (8006f94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e84:	4b43      	ldr	r3, [pc, #268]	; (8006f94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006e8c:	4a41      	ldr	r2, [pc, #260]	; (8006f94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e92:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8006e94:	4b40      	ldr	r3, [pc, #256]	; (8006f98 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2232      	movs	r2, #50	; 0x32
 8006e9a:	fb02 f303 	mul.w	r3, r2, r3
 8006e9e:	4a3f      	ldr	r2, [pc, #252]	; (8006f9c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea4:	0c9b      	lsrs	r3, r3, #18
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006eaa:	e002      	b.n	8006eb2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006eb2:	4b38      	ldr	r3, [pc, #224]	; (8006f94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eb4:	695b      	ldr	r3, [r3, #20]
 8006eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ebe:	d102      	bne.n	8006ec6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1f2      	bne.n	8006eac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006ec6:	4b33      	ldr	r3, [pc, #204]	; (8006f94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ec8:	695b      	ldr	r3, [r3, #20]
 8006eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ece:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ed2:	d158      	bne.n	8006f86 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	e057      	b.n	8006f88 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ed8:	4b2e      	ldr	r3, [pc, #184]	; (8006f94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ede:	4a2d      	ldr	r2, [pc, #180]	; (8006f94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ee0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ee4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006ee8:	e04d      	b.n	8006f86 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ef0:	d141      	bne.n	8006f76 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006ef2:	4b28      	ldr	r3, [pc, #160]	; (8006f94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006efe:	d131      	bne.n	8006f64 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f00:	4b24      	ldr	r3, [pc, #144]	; (8006f94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f06:	4a23      	ldr	r2, [pc, #140]	; (8006f94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006f10:	4b20      	ldr	r3, [pc, #128]	; (8006f94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006f18:	4a1e      	ldr	r2, [pc, #120]	; (8006f94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006f1e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8006f20:	4b1d      	ldr	r3, [pc, #116]	; (8006f98 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2232      	movs	r2, #50	; 0x32
 8006f26:	fb02 f303 	mul.w	r3, r2, r3
 8006f2a:	4a1c      	ldr	r2, [pc, #112]	; (8006f9c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f30:	0c9b      	lsrs	r3, r3, #18
 8006f32:	3301      	adds	r3, #1
 8006f34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f36:	e002      	b.n	8006f3e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f3e:	4b15      	ldr	r3, [pc, #84]	; (8006f94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f40:	695b      	ldr	r3, [r3, #20]
 8006f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f4a:	d102      	bne.n	8006f52 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1f2      	bne.n	8006f38 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006f52:	4b10      	ldr	r3, [pc, #64]	; (8006f94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f54:	695b      	ldr	r3, [r3, #20]
 8006f56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f5e:	d112      	bne.n	8006f86 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006f60:	2303      	movs	r3, #3
 8006f62:	e011      	b.n	8006f88 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f64:	4b0b      	ldr	r3, [pc, #44]	; (8006f94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f6a:	4a0a      	ldr	r2, [pc, #40]	; (8006f94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006f74:	e007      	b.n	8006f86 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006f76:	4b07      	ldr	r3, [pc, #28]	; (8006f94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006f7e:	4a05      	ldr	r2, [pc, #20]	; (8006f94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006f84:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006f86:	2300      	movs	r3, #0
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3714      	adds	r7, #20
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr
 8006f94:	40007000 	.word	0x40007000
 8006f98:	2000004c 	.word	0x2000004c
 8006f9c:	431bde83 	.word	0x431bde83

08006fa0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b088      	sub	sp, #32
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d102      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	f000 bc08 	b.w	80077c4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fb4:	4b96      	ldr	r3, [pc, #600]	; (8007210 <HAL_RCC_OscConfig+0x270>)
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	f003 030c 	and.w	r3, r3, #12
 8006fbc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006fbe:	4b94      	ldr	r3, [pc, #592]	; (8007210 <HAL_RCC_OscConfig+0x270>)
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	f003 0303 	and.w	r3, r3, #3
 8006fc6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0310 	and.w	r3, r3, #16
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f000 80e4 	beq.w	800719e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d007      	beq.n	8006fec <HAL_RCC_OscConfig+0x4c>
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	2b0c      	cmp	r3, #12
 8006fe0:	f040 808b 	bne.w	80070fa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	f040 8087 	bne.w	80070fa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006fec:	4b88      	ldr	r3, [pc, #544]	; (8007210 <HAL_RCC_OscConfig+0x270>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0302 	and.w	r3, r3, #2
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d005      	beq.n	8007004 <HAL_RCC_OscConfig+0x64>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	699b      	ldr	r3, [r3, #24]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d101      	bne.n	8007004 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	e3df      	b.n	80077c4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a1a      	ldr	r2, [r3, #32]
 8007008:	4b81      	ldr	r3, [pc, #516]	; (8007210 <HAL_RCC_OscConfig+0x270>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0308 	and.w	r3, r3, #8
 8007010:	2b00      	cmp	r3, #0
 8007012:	d004      	beq.n	800701e <HAL_RCC_OscConfig+0x7e>
 8007014:	4b7e      	ldr	r3, [pc, #504]	; (8007210 <HAL_RCC_OscConfig+0x270>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800701c:	e005      	b.n	800702a <HAL_RCC_OscConfig+0x8a>
 800701e:	4b7c      	ldr	r3, [pc, #496]	; (8007210 <HAL_RCC_OscConfig+0x270>)
 8007020:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007024:	091b      	lsrs	r3, r3, #4
 8007026:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800702a:	4293      	cmp	r3, r2
 800702c:	d223      	bcs.n	8007076 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a1b      	ldr	r3, [r3, #32]
 8007032:	4618      	mov	r0, r3
 8007034:	f000 fdfe 	bl	8007c34 <RCC_SetFlashLatencyFromMSIRange>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d001      	beq.n	8007042 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	e3c0      	b.n	80077c4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007042:	4b73      	ldr	r3, [pc, #460]	; (8007210 <HAL_RCC_OscConfig+0x270>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a72      	ldr	r2, [pc, #456]	; (8007210 <HAL_RCC_OscConfig+0x270>)
 8007048:	f043 0308 	orr.w	r3, r3, #8
 800704c:	6013      	str	r3, [r2, #0]
 800704e:	4b70      	ldr	r3, [pc, #448]	; (8007210 <HAL_RCC_OscConfig+0x270>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a1b      	ldr	r3, [r3, #32]
 800705a:	496d      	ldr	r1, [pc, #436]	; (8007210 <HAL_RCC_OscConfig+0x270>)
 800705c:	4313      	orrs	r3, r2
 800705e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007060:	4b6b      	ldr	r3, [pc, #428]	; (8007210 <HAL_RCC_OscConfig+0x270>)
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	69db      	ldr	r3, [r3, #28]
 800706c:	021b      	lsls	r3, r3, #8
 800706e:	4968      	ldr	r1, [pc, #416]	; (8007210 <HAL_RCC_OscConfig+0x270>)
 8007070:	4313      	orrs	r3, r2
 8007072:	604b      	str	r3, [r1, #4]
 8007074:	e025      	b.n	80070c2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007076:	4b66      	ldr	r3, [pc, #408]	; (8007210 <HAL_RCC_OscConfig+0x270>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a65      	ldr	r2, [pc, #404]	; (8007210 <HAL_RCC_OscConfig+0x270>)
 800707c:	f043 0308 	orr.w	r3, r3, #8
 8007080:	6013      	str	r3, [r2, #0]
 8007082:	4b63      	ldr	r3, [pc, #396]	; (8007210 <HAL_RCC_OscConfig+0x270>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a1b      	ldr	r3, [r3, #32]
 800708e:	4960      	ldr	r1, [pc, #384]	; (8007210 <HAL_RCC_OscConfig+0x270>)
 8007090:	4313      	orrs	r3, r2
 8007092:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007094:	4b5e      	ldr	r3, [pc, #376]	; (8007210 <HAL_RCC_OscConfig+0x270>)
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	69db      	ldr	r3, [r3, #28]
 80070a0:	021b      	lsls	r3, r3, #8
 80070a2:	495b      	ldr	r1, [pc, #364]	; (8007210 <HAL_RCC_OscConfig+0x270>)
 80070a4:	4313      	orrs	r3, r2
 80070a6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d109      	bne.n	80070c2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a1b      	ldr	r3, [r3, #32]
 80070b2:	4618      	mov	r0, r3
 80070b4:	f000 fdbe 	bl	8007c34 <RCC_SetFlashLatencyFromMSIRange>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d001      	beq.n	80070c2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e380      	b.n	80077c4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80070c2:	f000 fcc1 	bl	8007a48 <HAL_RCC_GetSysClockFreq>
 80070c6:	4602      	mov	r2, r0
 80070c8:	4b51      	ldr	r3, [pc, #324]	; (8007210 <HAL_RCC_OscConfig+0x270>)
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	091b      	lsrs	r3, r3, #4
 80070ce:	f003 030f 	and.w	r3, r3, #15
 80070d2:	4950      	ldr	r1, [pc, #320]	; (8007214 <HAL_RCC_OscConfig+0x274>)
 80070d4:	5ccb      	ldrb	r3, [r1, r3]
 80070d6:	f003 031f 	and.w	r3, r3, #31
 80070da:	fa22 f303 	lsr.w	r3, r2, r3
 80070de:	4a4e      	ldr	r2, [pc, #312]	; (8007218 <HAL_RCC_OscConfig+0x278>)
 80070e0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80070e2:	4b4e      	ldr	r3, [pc, #312]	; (800721c <HAL_RCC_OscConfig+0x27c>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7fc fb7e 	bl	80037e8 <HAL_InitTick>
 80070ec:	4603      	mov	r3, r0
 80070ee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80070f0:	7bfb      	ldrb	r3, [r7, #15]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d052      	beq.n	800719c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80070f6:	7bfb      	ldrb	r3, [r7, #15]
 80070f8:	e364      	b.n	80077c4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	699b      	ldr	r3, [r3, #24]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d032      	beq.n	8007168 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007102:	4b43      	ldr	r3, [pc, #268]	; (8007210 <HAL_RCC_OscConfig+0x270>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a42      	ldr	r2, [pc, #264]	; (8007210 <HAL_RCC_OscConfig+0x270>)
 8007108:	f043 0301 	orr.w	r3, r3, #1
 800710c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800710e:	f7fc fcc3 	bl	8003a98 <HAL_GetTick>
 8007112:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007114:	e008      	b.n	8007128 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007116:	f7fc fcbf 	bl	8003a98 <HAL_GetTick>
 800711a:	4602      	mov	r2, r0
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	1ad3      	subs	r3, r2, r3
 8007120:	2b02      	cmp	r3, #2
 8007122:	d901      	bls.n	8007128 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8007124:	2303      	movs	r3, #3
 8007126:	e34d      	b.n	80077c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007128:	4b39      	ldr	r3, [pc, #228]	; (8007210 <HAL_RCC_OscConfig+0x270>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 0302 	and.w	r3, r3, #2
 8007130:	2b00      	cmp	r3, #0
 8007132:	d0f0      	beq.n	8007116 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007134:	4b36      	ldr	r3, [pc, #216]	; (8007210 <HAL_RCC_OscConfig+0x270>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a35      	ldr	r2, [pc, #212]	; (8007210 <HAL_RCC_OscConfig+0x270>)
 800713a:	f043 0308 	orr.w	r3, r3, #8
 800713e:	6013      	str	r3, [r2, #0]
 8007140:	4b33      	ldr	r3, [pc, #204]	; (8007210 <HAL_RCC_OscConfig+0x270>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6a1b      	ldr	r3, [r3, #32]
 800714c:	4930      	ldr	r1, [pc, #192]	; (8007210 <HAL_RCC_OscConfig+0x270>)
 800714e:	4313      	orrs	r3, r2
 8007150:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007152:	4b2f      	ldr	r3, [pc, #188]	; (8007210 <HAL_RCC_OscConfig+0x270>)
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	69db      	ldr	r3, [r3, #28]
 800715e:	021b      	lsls	r3, r3, #8
 8007160:	492b      	ldr	r1, [pc, #172]	; (8007210 <HAL_RCC_OscConfig+0x270>)
 8007162:	4313      	orrs	r3, r2
 8007164:	604b      	str	r3, [r1, #4]
 8007166:	e01a      	b.n	800719e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007168:	4b29      	ldr	r3, [pc, #164]	; (8007210 <HAL_RCC_OscConfig+0x270>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a28      	ldr	r2, [pc, #160]	; (8007210 <HAL_RCC_OscConfig+0x270>)
 800716e:	f023 0301 	bic.w	r3, r3, #1
 8007172:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007174:	f7fc fc90 	bl	8003a98 <HAL_GetTick>
 8007178:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800717a:	e008      	b.n	800718e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800717c:	f7fc fc8c 	bl	8003a98 <HAL_GetTick>
 8007180:	4602      	mov	r2, r0
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	1ad3      	subs	r3, r2, r3
 8007186:	2b02      	cmp	r3, #2
 8007188:	d901      	bls.n	800718e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800718a:	2303      	movs	r3, #3
 800718c:	e31a      	b.n	80077c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800718e:	4b20      	ldr	r3, [pc, #128]	; (8007210 <HAL_RCC_OscConfig+0x270>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 0302 	and.w	r3, r3, #2
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1f0      	bne.n	800717c <HAL_RCC_OscConfig+0x1dc>
 800719a:	e000      	b.n	800719e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800719c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 0301 	and.w	r3, r3, #1
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d073      	beq.n	8007292 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	2b08      	cmp	r3, #8
 80071ae:	d005      	beq.n	80071bc <HAL_RCC_OscConfig+0x21c>
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	2b0c      	cmp	r3, #12
 80071b4:	d10e      	bne.n	80071d4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	2b03      	cmp	r3, #3
 80071ba:	d10b      	bne.n	80071d4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071bc:	4b14      	ldr	r3, [pc, #80]	; (8007210 <HAL_RCC_OscConfig+0x270>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d063      	beq.n	8007290 <HAL_RCC_OscConfig+0x2f0>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d15f      	bne.n	8007290 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	e2f7      	b.n	80077c4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071dc:	d106      	bne.n	80071ec <HAL_RCC_OscConfig+0x24c>
 80071de:	4b0c      	ldr	r3, [pc, #48]	; (8007210 <HAL_RCC_OscConfig+0x270>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a0b      	ldr	r2, [pc, #44]	; (8007210 <HAL_RCC_OscConfig+0x270>)
 80071e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071e8:	6013      	str	r3, [r2, #0]
 80071ea:	e025      	b.n	8007238 <HAL_RCC_OscConfig+0x298>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071f4:	d114      	bne.n	8007220 <HAL_RCC_OscConfig+0x280>
 80071f6:	4b06      	ldr	r3, [pc, #24]	; (8007210 <HAL_RCC_OscConfig+0x270>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a05      	ldr	r2, [pc, #20]	; (8007210 <HAL_RCC_OscConfig+0x270>)
 80071fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007200:	6013      	str	r3, [r2, #0]
 8007202:	4b03      	ldr	r3, [pc, #12]	; (8007210 <HAL_RCC_OscConfig+0x270>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a02      	ldr	r2, [pc, #8]	; (8007210 <HAL_RCC_OscConfig+0x270>)
 8007208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800720c:	6013      	str	r3, [r2, #0]
 800720e:	e013      	b.n	8007238 <HAL_RCC_OscConfig+0x298>
 8007210:	40021000 	.word	0x40021000
 8007214:	0800b2e4 	.word	0x0800b2e4
 8007218:	2000004c 	.word	0x2000004c
 800721c:	20000050 	.word	0x20000050
 8007220:	4ba0      	ldr	r3, [pc, #640]	; (80074a4 <HAL_RCC_OscConfig+0x504>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a9f      	ldr	r2, [pc, #636]	; (80074a4 <HAL_RCC_OscConfig+0x504>)
 8007226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800722a:	6013      	str	r3, [r2, #0]
 800722c:	4b9d      	ldr	r3, [pc, #628]	; (80074a4 <HAL_RCC_OscConfig+0x504>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a9c      	ldr	r2, [pc, #624]	; (80074a4 <HAL_RCC_OscConfig+0x504>)
 8007232:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007236:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d013      	beq.n	8007268 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007240:	f7fc fc2a 	bl	8003a98 <HAL_GetTick>
 8007244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007246:	e008      	b.n	800725a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007248:	f7fc fc26 	bl	8003a98 <HAL_GetTick>
 800724c:	4602      	mov	r2, r0
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	2b64      	cmp	r3, #100	; 0x64
 8007254:	d901      	bls.n	800725a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e2b4      	b.n	80077c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800725a:	4b92      	ldr	r3, [pc, #584]	; (80074a4 <HAL_RCC_OscConfig+0x504>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007262:	2b00      	cmp	r3, #0
 8007264:	d0f0      	beq.n	8007248 <HAL_RCC_OscConfig+0x2a8>
 8007266:	e014      	b.n	8007292 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007268:	f7fc fc16 	bl	8003a98 <HAL_GetTick>
 800726c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800726e:	e008      	b.n	8007282 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007270:	f7fc fc12 	bl	8003a98 <HAL_GetTick>
 8007274:	4602      	mov	r2, r0
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	2b64      	cmp	r3, #100	; 0x64
 800727c:	d901      	bls.n	8007282 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800727e:	2303      	movs	r3, #3
 8007280:	e2a0      	b.n	80077c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007282:	4b88      	ldr	r3, [pc, #544]	; (80074a4 <HAL_RCC_OscConfig+0x504>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1f0      	bne.n	8007270 <HAL_RCC_OscConfig+0x2d0>
 800728e:	e000      	b.n	8007292 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 0302 	and.w	r3, r3, #2
 800729a:	2b00      	cmp	r3, #0
 800729c:	d060      	beq.n	8007360 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	2b04      	cmp	r3, #4
 80072a2:	d005      	beq.n	80072b0 <HAL_RCC_OscConfig+0x310>
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	2b0c      	cmp	r3, #12
 80072a8:	d119      	bne.n	80072de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	d116      	bne.n	80072de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072b0:	4b7c      	ldr	r3, [pc, #496]	; (80074a4 <HAL_RCC_OscConfig+0x504>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d005      	beq.n	80072c8 <HAL_RCC_OscConfig+0x328>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d101      	bne.n	80072c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	e27d      	b.n	80077c4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072c8:	4b76      	ldr	r3, [pc, #472]	; (80074a4 <HAL_RCC_OscConfig+0x504>)
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	061b      	lsls	r3, r3, #24
 80072d6:	4973      	ldr	r1, [pc, #460]	; (80074a4 <HAL_RCC_OscConfig+0x504>)
 80072d8:	4313      	orrs	r3, r2
 80072da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072dc:	e040      	b.n	8007360 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d023      	beq.n	800732e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80072e6:	4b6f      	ldr	r3, [pc, #444]	; (80074a4 <HAL_RCC_OscConfig+0x504>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a6e      	ldr	r2, [pc, #440]	; (80074a4 <HAL_RCC_OscConfig+0x504>)
 80072ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072f2:	f7fc fbd1 	bl	8003a98 <HAL_GetTick>
 80072f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80072f8:	e008      	b.n	800730c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072fa:	f7fc fbcd 	bl	8003a98 <HAL_GetTick>
 80072fe:	4602      	mov	r2, r0
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	1ad3      	subs	r3, r2, r3
 8007304:	2b02      	cmp	r3, #2
 8007306:	d901      	bls.n	800730c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007308:	2303      	movs	r3, #3
 800730a:	e25b      	b.n	80077c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800730c:	4b65      	ldr	r3, [pc, #404]	; (80074a4 <HAL_RCC_OscConfig+0x504>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007314:	2b00      	cmp	r3, #0
 8007316:	d0f0      	beq.n	80072fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007318:	4b62      	ldr	r3, [pc, #392]	; (80074a4 <HAL_RCC_OscConfig+0x504>)
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	061b      	lsls	r3, r3, #24
 8007326:	495f      	ldr	r1, [pc, #380]	; (80074a4 <HAL_RCC_OscConfig+0x504>)
 8007328:	4313      	orrs	r3, r2
 800732a:	604b      	str	r3, [r1, #4]
 800732c:	e018      	b.n	8007360 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800732e:	4b5d      	ldr	r3, [pc, #372]	; (80074a4 <HAL_RCC_OscConfig+0x504>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a5c      	ldr	r2, [pc, #368]	; (80074a4 <HAL_RCC_OscConfig+0x504>)
 8007334:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007338:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800733a:	f7fc fbad 	bl	8003a98 <HAL_GetTick>
 800733e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007340:	e008      	b.n	8007354 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007342:	f7fc fba9 	bl	8003a98 <HAL_GetTick>
 8007346:	4602      	mov	r2, r0
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	1ad3      	subs	r3, r2, r3
 800734c:	2b02      	cmp	r3, #2
 800734e:	d901      	bls.n	8007354 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007350:	2303      	movs	r3, #3
 8007352:	e237      	b.n	80077c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007354:	4b53      	ldr	r3, [pc, #332]	; (80074a4 <HAL_RCC_OscConfig+0x504>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1f0      	bne.n	8007342 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 0308 	and.w	r3, r3, #8
 8007368:	2b00      	cmp	r3, #0
 800736a:	d03c      	beq.n	80073e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	695b      	ldr	r3, [r3, #20]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d01c      	beq.n	80073ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007374:	4b4b      	ldr	r3, [pc, #300]	; (80074a4 <HAL_RCC_OscConfig+0x504>)
 8007376:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800737a:	4a4a      	ldr	r2, [pc, #296]	; (80074a4 <HAL_RCC_OscConfig+0x504>)
 800737c:	f043 0301 	orr.w	r3, r3, #1
 8007380:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007384:	f7fc fb88 	bl	8003a98 <HAL_GetTick>
 8007388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800738a:	e008      	b.n	800739e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800738c:	f7fc fb84 	bl	8003a98 <HAL_GetTick>
 8007390:	4602      	mov	r2, r0
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	2b02      	cmp	r3, #2
 8007398:	d901      	bls.n	800739e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800739a:	2303      	movs	r3, #3
 800739c:	e212      	b.n	80077c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800739e:	4b41      	ldr	r3, [pc, #260]	; (80074a4 <HAL_RCC_OscConfig+0x504>)
 80073a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073a4:	f003 0302 	and.w	r3, r3, #2
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d0ef      	beq.n	800738c <HAL_RCC_OscConfig+0x3ec>
 80073ac:	e01b      	b.n	80073e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073ae:	4b3d      	ldr	r3, [pc, #244]	; (80074a4 <HAL_RCC_OscConfig+0x504>)
 80073b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073b4:	4a3b      	ldr	r2, [pc, #236]	; (80074a4 <HAL_RCC_OscConfig+0x504>)
 80073b6:	f023 0301 	bic.w	r3, r3, #1
 80073ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073be:	f7fc fb6b 	bl	8003a98 <HAL_GetTick>
 80073c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80073c4:	e008      	b.n	80073d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073c6:	f7fc fb67 	bl	8003a98 <HAL_GetTick>
 80073ca:	4602      	mov	r2, r0
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d901      	bls.n	80073d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80073d4:	2303      	movs	r3, #3
 80073d6:	e1f5      	b.n	80077c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80073d8:	4b32      	ldr	r3, [pc, #200]	; (80074a4 <HAL_RCC_OscConfig+0x504>)
 80073da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073de:	f003 0302 	and.w	r3, r3, #2
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1ef      	bne.n	80073c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 0304 	and.w	r3, r3, #4
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	f000 80a6 	beq.w	8007540 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073f4:	2300      	movs	r3, #0
 80073f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80073f8:	4b2a      	ldr	r3, [pc, #168]	; (80074a4 <HAL_RCC_OscConfig+0x504>)
 80073fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007400:	2b00      	cmp	r3, #0
 8007402:	d10d      	bne.n	8007420 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007404:	4b27      	ldr	r3, [pc, #156]	; (80074a4 <HAL_RCC_OscConfig+0x504>)
 8007406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007408:	4a26      	ldr	r2, [pc, #152]	; (80074a4 <HAL_RCC_OscConfig+0x504>)
 800740a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800740e:	6593      	str	r3, [r2, #88]	; 0x58
 8007410:	4b24      	ldr	r3, [pc, #144]	; (80074a4 <HAL_RCC_OscConfig+0x504>)
 8007412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007418:	60bb      	str	r3, [r7, #8]
 800741a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800741c:	2301      	movs	r3, #1
 800741e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007420:	4b21      	ldr	r3, [pc, #132]	; (80074a8 <HAL_RCC_OscConfig+0x508>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007428:	2b00      	cmp	r3, #0
 800742a:	d118      	bne.n	800745e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800742c:	4b1e      	ldr	r3, [pc, #120]	; (80074a8 <HAL_RCC_OscConfig+0x508>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a1d      	ldr	r2, [pc, #116]	; (80074a8 <HAL_RCC_OscConfig+0x508>)
 8007432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007436:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007438:	f7fc fb2e 	bl	8003a98 <HAL_GetTick>
 800743c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800743e:	e008      	b.n	8007452 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007440:	f7fc fb2a 	bl	8003a98 <HAL_GetTick>
 8007444:	4602      	mov	r2, r0
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	1ad3      	subs	r3, r2, r3
 800744a:	2b02      	cmp	r3, #2
 800744c:	d901      	bls.n	8007452 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800744e:	2303      	movs	r3, #3
 8007450:	e1b8      	b.n	80077c4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007452:	4b15      	ldr	r3, [pc, #84]	; (80074a8 <HAL_RCC_OscConfig+0x508>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800745a:	2b00      	cmp	r3, #0
 800745c:	d0f0      	beq.n	8007440 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	2b01      	cmp	r3, #1
 8007464:	d108      	bne.n	8007478 <HAL_RCC_OscConfig+0x4d8>
 8007466:	4b0f      	ldr	r3, [pc, #60]	; (80074a4 <HAL_RCC_OscConfig+0x504>)
 8007468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800746c:	4a0d      	ldr	r2, [pc, #52]	; (80074a4 <HAL_RCC_OscConfig+0x504>)
 800746e:	f043 0301 	orr.w	r3, r3, #1
 8007472:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007476:	e029      	b.n	80074cc <HAL_RCC_OscConfig+0x52c>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	2b05      	cmp	r3, #5
 800747e:	d115      	bne.n	80074ac <HAL_RCC_OscConfig+0x50c>
 8007480:	4b08      	ldr	r3, [pc, #32]	; (80074a4 <HAL_RCC_OscConfig+0x504>)
 8007482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007486:	4a07      	ldr	r2, [pc, #28]	; (80074a4 <HAL_RCC_OscConfig+0x504>)
 8007488:	f043 0304 	orr.w	r3, r3, #4
 800748c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007490:	4b04      	ldr	r3, [pc, #16]	; (80074a4 <HAL_RCC_OscConfig+0x504>)
 8007492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007496:	4a03      	ldr	r2, [pc, #12]	; (80074a4 <HAL_RCC_OscConfig+0x504>)
 8007498:	f043 0301 	orr.w	r3, r3, #1
 800749c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80074a0:	e014      	b.n	80074cc <HAL_RCC_OscConfig+0x52c>
 80074a2:	bf00      	nop
 80074a4:	40021000 	.word	0x40021000
 80074a8:	40007000 	.word	0x40007000
 80074ac:	4b9d      	ldr	r3, [pc, #628]	; (8007724 <HAL_RCC_OscConfig+0x784>)
 80074ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074b2:	4a9c      	ldr	r2, [pc, #624]	; (8007724 <HAL_RCC_OscConfig+0x784>)
 80074b4:	f023 0301 	bic.w	r3, r3, #1
 80074b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80074bc:	4b99      	ldr	r3, [pc, #612]	; (8007724 <HAL_RCC_OscConfig+0x784>)
 80074be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074c2:	4a98      	ldr	r2, [pc, #608]	; (8007724 <HAL_RCC_OscConfig+0x784>)
 80074c4:	f023 0304 	bic.w	r3, r3, #4
 80074c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d016      	beq.n	8007502 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074d4:	f7fc fae0 	bl	8003a98 <HAL_GetTick>
 80074d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80074da:	e00a      	b.n	80074f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074dc:	f7fc fadc 	bl	8003a98 <HAL_GetTick>
 80074e0:	4602      	mov	r2, r0
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d901      	bls.n	80074f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e168      	b.n	80077c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80074f2:	4b8c      	ldr	r3, [pc, #560]	; (8007724 <HAL_RCC_OscConfig+0x784>)
 80074f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074f8:	f003 0302 	and.w	r3, r3, #2
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d0ed      	beq.n	80074dc <HAL_RCC_OscConfig+0x53c>
 8007500:	e015      	b.n	800752e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007502:	f7fc fac9 	bl	8003a98 <HAL_GetTick>
 8007506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007508:	e00a      	b.n	8007520 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800750a:	f7fc fac5 	bl	8003a98 <HAL_GetTick>
 800750e:	4602      	mov	r2, r0
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	1ad3      	subs	r3, r2, r3
 8007514:	f241 3288 	movw	r2, #5000	; 0x1388
 8007518:	4293      	cmp	r3, r2
 800751a:	d901      	bls.n	8007520 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800751c:	2303      	movs	r3, #3
 800751e:	e151      	b.n	80077c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007520:	4b80      	ldr	r3, [pc, #512]	; (8007724 <HAL_RCC_OscConfig+0x784>)
 8007522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007526:	f003 0302 	and.w	r3, r3, #2
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1ed      	bne.n	800750a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800752e:	7ffb      	ldrb	r3, [r7, #31]
 8007530:	2b01      	cmp	r3, #1
 8007532:	d105      	bne.n	8007540 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007534:	4b7b      	ldr	r3, [pc, #492]	; (8007724 <HAL_RCC_OscConfig+0x784>)
 8007536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007538:	4a7a      	ldr	r2, [pc, #488]	; (8007724 <HAL_RCC_OscConfig+0x784>)
 800753a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800753e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 0320 	and.w	r3, r3, #32
 8007548:	2b00      	cmp	r3, #0
 800754a:	d03c      	beq.n	80075c6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007550:	2b00      	cmp	r3, #0
 8007552:	d01c      	beq.n	800758e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007554:	4b73      	ldr	r3, [pc, #460]	; (8007724 <HAL_RCC_OscConfig+0x784>)
 8007556:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800755a:	4a72      	ldr	r2, [pc, #456]	; (8007724 <HAL_RCC_OscConfig+0x784>)
 800755c:	f043 0301 	orr.w	r3, r3, #1
 8007560:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007564:	f7fc fa98 	bl	8003a98 <HAL_GetTick>
 8007568:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800756a:	e008      	b.n	800757e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800756c:	f7fc fa94 	bl	8003a98 <HAL_GetTick>
 8007570:	4602      	mov	r2, r0
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	1ad3      	subs	r3, r2, r3
 8007576:	2b02      	cmp	r3, #2
 8007578:	d901      	bls.n	800757e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800757a:	2303      	movs	r3, #3
 800757c:	e122      	b.n	80077c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800757e:	4b69      	ldr	r3, [pc, #420]	; (8007724 <HAL_RCC_OscConfig+0x784>)
 8007580:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007584:	f003 0302 	and.w	r3, r3, #2
 8007588:	2b00      	cmp	r3, #0
 800758a:	d0ef      	beq.n	800756c <HAL_RCC_OscConfig+0x5cc>
 800758c:	e01b      	b.n	80075c6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800758e:	4b65      	ldr	r3, [pc, #404]	; (8007724 <HAL_RCC_OscConfig+0x784>)
 8007590:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007594:	4a63      	ldr	r2, [pc, #396]	; (8007724 <HAL_RCC_OscConfig+0x784>)
 8007596:	f023 0301 	bic.w	r3, r3, #1
 800759a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800759e:	f7fc fa7b 	bl	8003a98 <HAL_GetTick>
 80075a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80075a4:	e008      	b.n	80075b8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80075a6:	f7fc fa77 	bl	8003a98 <HAL_GetTick>
 80075aa:	4602      	mov	r2, r0
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	1ad3      	subs	r3, r2, r3
 80075b0:	2b02      	cmp	r3, #2
 80075b2:	d901      	bls.n	80075b8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80075b4:	2303      	movs	r3, #3
 80075b6:	e105      	b.n	80077c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80075b8:	4b5a      	ldr	r3, [pc, #360]	; (8007724 <HAL_RCC_OscConfig+0x784>)
 80075ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80075be:	f003 0302 	and.w	r3, r3, #2
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1ef      	bne.n	80075a6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	f000 80f9 	beq.w	80077c2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	f040 80cf 	bne.w	8007778 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80075da:	4b52      	ldr	r3, [pc, #328]	; (8007724 <HAL_RCC_OscConfig+0x784>)
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	f003 0203 	and.w	r2, r3, #3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d12c      	bne.n	8007648 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f8:	3b01      	subs	r3, #1
 80075fa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d123      	bne.n	8007648 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800760a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800760c:	429a      	cmp	r2, r3
 800760e:	d11b      	bne.n	8007648 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800761a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800761c:	429a      	cmp	r2, r3
 800761e:	d113      	bne.n	8007648 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800762a:	085b      	lsrs	r3, r3, #1
 800762c:	3b01      	subs	r3, #1
 800762e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007630:	429a      	cmp	r2, r3
 8007632:	d109      	bne.n	8007648 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763e:	085b      	lsrs	r3, r3, #1
 8007640:	3b01      	subs	r3, #1
 8007642:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007644:	429a      	cmp	r2, r3
 8007646:	d071      	beq.n	800772c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007648:	69bb      	ldr	r3, [r7, #24]
 800764a:	2b0c      	cmp	r3, #12
 800764c:	d068      	beq.n	8007720 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800764e:	4b35      	ldr	r3, [pc, #212]	; (8007724 <HAL_RCC_OscConfig+0x784>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007656:	2b00      	cmp	r3, #0
 8007658:	d105      	bne.n	8007666 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800765a:	4b32      	ldr	r3, [pc, #200]	; (8007724 <HAL_RCC_OscConfig+0x784>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007662:	2b00      	cmp	r3, #0
 8007664:	d001      	beq.n	800766a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e0ac      	b.n	80077c4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800766a:	4b2e      	ldr	r3, [pc, #184]	; (8007724 <HAL_RCC_OscConfig+0x784>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a2d      	ldr	r2, [pc, #180]	; (8007724 <HAL_RCC_OscConfig+0x784>)
 8007670:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007674:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007676:	f7fc fa0f 	bl	8003a98 <HAL_GetTick>
 800767a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800767c:	e008      	b.n	8007690 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800767e:	f7fc fa0b 	bl	8003a98 <HAL_GetTick>
 8007682:	4602      	mov	r2, r0
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	1ad3      	subs	r3, r2, r3
 8007688:	2b02      	cmp	r3, #2
 800768a:	d901      	bls.n	8007690 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800768c:	2303      	movs	r3, #3
 800768e:	e099      	b.n	80077c4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007690:	4b24      	ldr	r3, [pc, #144]	; (8007724 <HAL_RCC_OscConfig+0x784>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1f0      	bne.n	800767e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800769c:	4b21      	ldr	r3, [pc, #132]	; (8007724 <HAL_RCC_OscConfig+0x784>)
 800769e:	68da      	ldr	r2, [r3, #12]
 80076a0:	4b21      	ldr	r3, [pc, #132]	; (8007728 <HAL_RCC_OscConfig+0x788>)
 80076a2:	4013      	ands	r3, r2
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80076ac:	3a01      	subs	r2, #1
 80076ae:	0112      	lsls	r2, r2, #4
 80076b0:	4311      	orrs	r1, r2
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80076b6:	0212      	lsls	r2, r2, #8
 80076b8:	4311      	orrs	r1, r2
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80076be:	0852      	lsrs	r2, r2, #1
 80076c0:	3a01      	subs	r2, #1
 80076c2:	0552      	lsls	r2, r2, #21
 80076c4:	4311      	orrs	r1, r2
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80076ca:	0852      	lsrs	r2, r2, #1
 80076cc:	3a01      	subs	r2, #1
 80076ce:	0652      	lsls	r2, r2, #25
 80076d0:	4311      	orrs	r1, r2
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80076d6:	06d2      	lsls	r2, r2, #27
 80076d8:	430a      	orrs	r2, r1
 80076da:	4912      	ldr	r1, [pc, #72]	; (8007724 <HAL_RCC_OscConfig+0x784>)
 80076dc:	4313      	orrs	r3, r2
 80076de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80076e0:	4b10      	ldr	r3, [pc, #64]	; (8007724 <HAL_RCC_OscConfig+0x784>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a0f      	ldr	r2, [pc, #60]	; (8007724 <HAL_RCC_OscConfig+0x784>)
 80076e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80076ec:	4b0d      	ldr	r3, [pc, #52]	; (8007724 <HAL_RCC_OscConfig+0x784>)
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	4a0c      	ldr	r2, [pc, #48]	; (8007724 <HAL_RCC_OscConfig+0x784>)
 80076f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80076f8:	f7fc f9ce 	bl	8003a98 <HAL_GetTick>
 80076fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076fe:	e008      	b.n	8007712 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007700:	f7fc f9ca 	bl	8003a98 <HAL_GetTick>
 8007704:	4602      	mov	r2, r0
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	2b02      	cmp	r3, #2
 800770c:	d901      	bls.n	8007712 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800770e:	2303      	movs	r3, #3
 8007710:	e058      	b.n	80077c4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007712:	4b04      	ldr	r3, [pc, #16]	; (8007724 <HAL_RCC_OscConfig+0x784>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800771a:	2b00      	cmp	r3, #0
 800771c:	d0f0      	beq.n	8007700 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800771e:	e050      	b.n	80077c2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	e04f      	b.n	80077c4 <HAL_RCC_OscConfig+0x824>
 8007724:	40021000 	.word	0x40021000
 8007728:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800772c:	4b27      	ldr	r3, [pc, #156]	; (80077cc <HAL_RCC_OscConfig+0x82c>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007734:	2b00      	cmp	r3, #0
 8007736:	d144      	bne.n	80077c2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007738:	4b24      	ldr	r3, [pc, #144]	; (80077cc <HAL_RCC_OscConfig+0x82c>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a23      	ldr	r2, [pc, #140]	; (80077cc <HAL_RCC_OscConfig+0x82c>)
 800773e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007742:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007744:	4b21      	ldr	r3, [pc, #132]	; (80077cc <HAL_RCC_OscConfig+0x82c>)
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	4a20      	ldr	r2, [pc, #128]	; (80077cc <HAL_RCC_OscConfig+0x82c>)
 800774a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800774e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007750:	f7fc f9a2 	bl	8003a98 <HAL_GetTick>
 8007754:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007756:	e008      	b.n	800776a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007758:	f7fc f99e 	bl	8003a98 <HAL_GetTick>
 800775c:	4602      	mov	r2, r0
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	2b02      	cmp	r3, #2
 8007764:	d901      	bls.n	800776a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8007766:	2303      	movs	r3, #3
 8007768:	e02c      	b.n	80077c4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800776a:	4b18      	ldr	r3, [pc, #96]	; (80077cc <HAL_RCC_OscConfig+0x82c>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d0f0      	beq.n	8007758 <HAL_RCC_OscConfig+0x7b8>
 8007776:	e024      	b.n	80077c2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	2b0c      	cmp	r3, #12
 800777c:	d01f      	beq.n	80077be <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800777e:	4b13      	ldr	r3, [pc, #76]	; (80077cc <HAL_RCC_OscConfig+0x82c>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a12      	ldr	r2, [pc, #72]	; (80077cc <HAL_RCC_OscConfig+0x82c>)
 8007784:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007788:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800778a:	f7fc f985 	bl	8003a98 <HAL_GetTick>
 800778e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007790:	e008      	b.n	80077a4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007792:	f7fc f981 	bl	8003a98 <HAL_GetTick>
 8007796:	4602      	mov	r2, r0
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	1ad3      	subs	r3, r2, r3
 800779c:	2b02      	cmp	r3, #2
 800779e:	d901      	bls.n	80077a4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80077a0:	2303      	movs	r3, #3
 80077a2:	e00f      	b.n	80077c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80077a4:	4b09      	ldr	r3, [pc, #36]	; (80077cc <HAL_RCC_OscConfig+0x82c>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1f0      	bne.n	8007792 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80077b0:	4b06      	ldr	r3, [pc, #24]	; (80077cc <HAL_RCC_OscConfig+0x82c>)
 80077b2:	68da      	ldr	r2, [r3, #12]
 80077b4:	4905      	ldr	r1, [pc, #20]	; (80077cc <HAL_RCC_OscConfig+0x82c>)
 80077b6:	4b06      	ldr	r3, [pc, #24]	; (80077d0 <HAL_RCC_OscConfig+0x830>)
 80077b8:	4013      	ands	r3, r2
 80077ba:	60cb      	str	r3, [r1, #12]
 80077bc:	e001      	b.n	80077c2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e000      	b.n	80077c4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3720      	adds	r7, #32
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	40021000 	.word	0x40021000
 80077d0:	feeefffc 	.word	0xfeeefffc

080077d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b086      	sub	sp, #24
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80077de:	2300      	movs	r3, #0
 80077e0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d101      	bne.n	80077ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	e11d      	b.n	8007a28 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80077ec:	4b90      	ldr	r3, [pc, #576]	; (8007a30 <HAL_RCC_ClockConfig+0x25c>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 030f 	and.w	r3, r3, #15
 80077f4:	683a      	ldr	r2, [r7, #0]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d910      	bls.n	800781c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077fa:	4b8d      	ldr	r3, [pc, #564]	; (8007a30 <HAL_RCC_ClockConfig+0x25c>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f023 020f 	bic.w	r2, r3, #15
 8007802:	498b      	ldr	r1, [pc, #556]	; (8007a30 <HAL_RCC_ClockConfig+0x25c>)
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	4313      	orrs	r3, r2
 8007808:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800780a:	4b89      	ldr	r3, [pc, #548]	; (8007a30 <HAL_RCC_ClockConfig+0x25c>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f003 030f 	and.w	r3, r3, #15
 8007812:	683a      	ldr	r2, [r7, #0]
 8007814:	429a      	cmp	r2, r3
 8007816:	d001      	beq.n	800781c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	e105      	b.n	8007a28 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 0302 	and.w	r3, r3, #2
 8007824:	2b00      	cmp	r3, #0
 8007826:	d010      	beq.n	800784a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	689a      	ldr	r2, [r3, #8]
 800782c:	4b81      	ldr	r3, [pc, #516]	; (8007a34 <HAL_RCC_ClockConfig+0x260>)
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007834:	429a      	cmp	r2, r3
 8007836:	d908      	bls.n	800784a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007838:	4b7e      	ldr	r3, [pc, #504]	; (8007a34 <HAL_RCC_ClockConfig+0x260>)
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	497b      	ldr	r1, [pc, #492]	; (8007a34 <HAL_RCC_ClockConfig+0x260>)
 8007846:	4313      	orrs	r3, r2
 8007848:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 0301 	and.w	r3, r3, #1
 8007852:	2b00      	cmp	r3, #0
 8007854:	d079      	beq.n	800794a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	2b03      	cmp	r3, #3
 800785c:	d11e      	bne.n	800789c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800785e:	4b75      	ldr	r3, [pc, #468]	; (8007a34 <HAL_RCC_ClockConfig+0x260>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007866:	2b00      	cmp	r3, #0
 8007868:	d101      	bne.n	800786e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	e0dc      	b.n	8007a28 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800786e:	f000 fa3b 	bl	8007ce8 <RCC_GetSysClockFreqFromPLLSource>
 8007872:	4603      	mov	r3, r0
 8007874:	4a70      	ldr	r2, [pc, #448]	; (8007a38 <HAL_RCC_ClockConfig+0x264>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d946      	bls.n	8007908 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800787a:	4b6e      	ldr	r3, [pc, #440]	; (8007a34 <HAL_RCC_ClockConfig+0x260>)
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007882:	2b00      	cmp	r3, #0
 8007884:	d140      	bne.n	8007908 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007886:	4b6b      	ldr	r3, [pc, #428]	; (8007a34 <HAL_RCC_ClockConfig+0x260>)
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800788e:	4a69      	ldr	r2, [pc, #420]	; (8007a34 <HAL_RCC_ClockConfig+0x260>)
 8007890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007894:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007896:	2380      	movs	r3, #128	; 0x80
 8007898:	617b      	str	r3, [r7, #20]
 800789a:	e035      	b.n	8007908 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	2b02      	cmp	r3, #2
 80078a2:	d107      	bne.n	80078b4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80078a4:	4b63      	ldr	r3, [pc, #396]	; (8007a34 <HAL_RCC_ClockConfig+0x260>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d115      	bne.n	80078dc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	e0b9      	b.n	8007a28 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d107      	bne.n	80078cc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80078bc:	4b5d      	ldr	r3, [pc, #372]	; (8007a34 <HAL_RCC_ClockConfig+0x260>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 0302 	and.w	r3, r3, #2
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d109      	bne.n	80078dc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	e0ad      	b.n	8007a28 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80078cc:	4b59      	ldr	r3, [pc, #356]	; (8007a34 <HAL_RCC_ClockConfig+0x260>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d101      	bne.n	80078dc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	e0a5      	b.n	8007a28 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80078dc:	f000 f8b4 	bl	8007a48 <HAL_RCC_GetSysClockFreq>
 80078e0:	4603      	mov	r3, r0
 80078e2:	4a55      	ldr	r2, [pc, #340]	; (8007a38 <HAL_RCC_ClockConfig+0x264>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d90f      	bls.n	8007908 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80078e8:	4b52      	ldr	r3, [pc, #328]	; (8007a34 <HAL_RCC_ClockConfig+0x260>)
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d109      	bne.n	8007908 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80078f4:	4b4f      	ldr	r3, [pc, #316]	; (8007a34 <HAL_RCC_ClockConfig+0x260>)
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078fc:	4a4d      	ldr	r2, [pc, #308]	; (8007a34 <HAL_RCC_ClockConfig+0x260>)
 80078fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007902:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007904:	2380      	movs	r3, #128	; 0x80
 8007906:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007908:	4b4a      	ldr	r3, [pc, #296]	; (8007a34 <HAL_RCC_ClockConfig+0x260>)
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	f023 0203 	bic.w	r2, r3, #3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	4947      	ldr	r1, [pc, #284]	; (8007a34 <HAL_RCC_ClockConfig+0x260>)
 8007916:	4313      	orrs	r3, r2
 8007918:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800791a:	f7fc f8bd 	bl	8003a98 <HAL_GetTick>
 800791e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007920:	e00a      	b.n	8007938 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007922:	f7fc f8b9 	bl	8003a98 <HAL_GetTick>
 8007926:	4602      	mov	r2, r0
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	1ad3      	subs	r3, r2, r3
 800792c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007930:	4293      	cmp	r3, r2
 8007932:	d901      	bls.n	8007938 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8007934:	2303      	movs	r3, #3
 8007936:	e077      	b.n	8007a28 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007938:	4b3e      	ldr	r3, [pc, #248]	; (8007a34 <HAL_RCC_ClockConfig+0x260>)
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	f003 020c 	and.w	r2, r3, #12
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	429a      	cmp	r2, r3
 8007948:	d1eb      	bne.n	8007922 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	2b80      	cmp	r3, #128	; 0x80
 800794e:	d105      	bne.n	800795c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007950:	4b38      	ldr	r3, [pc, #224]	; (8007a34 <HAL_RCC_ClockConfig+0x260>)
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	4a37      	ldr	r2, [pc, #220]	; (8007a34 <HAL_RCC_ClockConfig+0x260>)
 8007956:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800795a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 0302 	and.w	r3, r3, #2
 8007964:	2b00      	cmp	r3, #0
 8007966:	d010      	beq.n	800798a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	689a      	ldr	r2, [r3, #8]
 800796c:	4b31      	ldr	r3, [pc, #196]	; (8007a34 <HAL_RCC_ClockConfig+0x260>)
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007974:	429a      	cmp	r2, r3
 8007976:	d208      	bcs.n	800798a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007978:	4b2e      	ldr	r3, [pc, #184]	; (8007a34 <HAL_RCC_ClockConfig+0x260>)
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	492b      	ldr	r1, [pc, #172]	; (8007a34 <HAL_RCC_ClockConfig+0x260>)
 8007986:	4313      	orrs	r3, r2
 8007988:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800798a:	4b29      	ldr	r3, [pc, #164]	; (8007a30 <HAL_RCC_ClockConfig+0x25c>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f003 030f 	and.w	r3, r3, #15
 8007992:	683a      	ldr	r2, [r7, #0]
 8007994:	429a      	cmp	r2, r3
 8007996:	d210      	bcs.n	80079ba <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007998:	4b25      	ldr	r3, [pc, #148]	; (8007a30 <HAL_RCC_ClockConfig+0x25c>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f023 020f 	bic.w	r2, r3, #15
 80079a0:	4923      	ldr	r1, [pc, #140]	; (8007a30 <HAL_RCC_ClockConfig+0x25c>)
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	4313      	orrs	r3, r2
 80079a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80079a8:	4b21      	ldr	r3, [pc, #132]	; (8007a30 <HAL_RCC_ClockConfig+0x25c>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 030f 	and.w	r3, r3, #15
 80079b0:	683a      	ldr	r2, [r7, #0]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d001      	beq.n	80079ba <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e036      	b.n	8007a28 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f003 0304 	and.w	r3, r3, #4
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d008      	beq.n	80079d8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80079c6:	4b1b      	ldr	r3, [pc, #108]	; (8007a34 <HAL_RCC_ClockConfig+0x260>)
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	4918      	ldr	r1, [pc, #96]	; (8007a34 <HAL_RCC_ClockConfig+0x260>)
 80079d4:	4313      	orrs	r3, r2
 80079d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 0308 	and.w	r3, r3, #8
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d009      	beq.n	80079f8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80079e4:	4b13      	ldr	r3, [pc, #76]	; (8007a34 <HAL_RCC_ClockConfig+0x260>)
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	00db      	lsls	r3, r3, #3
 80079f2:	4910      	ldr	r1, [pc, #64]	; (8007a34 <HAL_RCC_ClockConfig+0x260>)
 80079f4:	4313      	orrs	r3, r2
 80079f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80079f8:	f000 f826 	bl	8007a48 <HAL_RCC_GetSysClockFreq>
 80079fc:	4602      	mov	r2, r0
 80079fe:	4b0d      	ldr	r3, [pc, #52]	; (8007a34 <HAL_RCC_ClockConfig+0x260>)
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	091b      	lsrs	r3, r3, #4
 8007a04:	f003 030f 	and.w	r3, r3, #15
 8007a08:	490c      	ldr	r1, [pc, #48]	; (8007a3c <HAL_RCC_ClockConfig+0x268>)
 8007a0a:	5ccb      	ldrb	r3, [r1, r3]
 8007a0c:	f003 031f 	and.w	r3, r3, #31
 8007a10:	fa22 f303 	lsr.w	r3, r2, r3
 8007a14:	4a0a      	ldr	r2, [pc, #40]	; (8007a40 <HAL_RCC_ClockConfig+0x26c>)
 8007a16:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007a18:	4b0a      	ldr	r3, [pc, #40]	; (8007a44 <HAL_RCC_ClockConfig+0x270>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f7fb fee3 	bl	80037e8 <HAL_InitTick>
 8007a22:	4603      	mov	r3, r0
 8007a24:	73fb      	strb	r3, [r7, #15]

  return status;
 8007a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3718      	adds	r7, #24
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	40022000 	.word	0x40022000
 8007a34:	40021000 	.word	0x40021000
 8007a38:	04c4b400 	.word	0x04c4b400
 8007a3c:	0800b2e4 	.word	0x0800b2e4
 8007a40:	2000004c 	.word	0x2000004c
 8007a44:	20000050 	.word	0x20000050

08007a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b089      	sub	sp, #36	; 0x24
 8007a4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	61fb      	str	r3, [r7, #28]
 8007a52:	2300      	movs	r3, #0
 8007a54:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a56:	4b3e      	ldr	r3, [pc, #248]	; (8007b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	f003 030c 	and.w	r3, r3, #12
 8007a5e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007a60:	4b3b      	ldr	r3, [pc, #236]	; (8007b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	f003 0303 	and.w	r3, r3, #3
 8007a68:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d005      	beq.n	8007a7c <HAL_RCC_GetSysClockFreq+0x34>
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	2b0c      	cmp	r3, #12
 8007a74:	d121      	bne.n	8007aba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d11e      	bne.n	8007aba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007a7c:	4b34      	ldr	r3, [pc, #208]	; (8007b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 0308 	and.w	r3, r3, #8
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d107      	bne.n	8007a98 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007a88:	4b31      	ldr	r3, [pc, #196]	; (8007b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8007a8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a8e:	0a1b      	lsrs	r3, r3, #8
 8007a90:	f003 030f 	and.w	r3, r3, #15
 8007a94:	61fb      	str	r3, [r7, #28]
 8007a96:	e005      	b.n	8007aa4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007a98:	4b2d      	ldr	r3, [pc, #180]	; (8007b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	091b      	lsrs	r3, r3, #4
 8007a9e:	f003 030f 	and.w	r3, r3, #15
 8007aa2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007aa4:	4a2b      	ldr	r2, [pc, #172]	; (8007b54 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007aac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d10d      	bne.n	8007ad0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007ab8:	e00a      	b.n	8007ad0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	2b04      	cmp	r3, #4
 8007abe:	d102      	bne.n	8007ac6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007ac0:	4b25      	ldr	r3, [pc, #148]	; (8007b58 <HAL_RCC_GetSysClockFreq+0x110>)
 8007ac2:	61bb      	str	r3, [r7, #24]
 8007ac4:	e004      	b.n	8007ad0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	2b08      	cmp	r3, #8
 8007aca:	d101      	bne.n	8007ad0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007acc:	4b23      	ldr	r3, [pc, #140]	; (8007b5c <HAL_RCC_GetSysClockFreq+0x114>)
 8007ace:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	2b0c      	cmp	r3, #12
 8007ad4:	d134      	bne.n	8007b40 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007ad6:	4b1e      	ldr	r3, [pc, #120]	; (8007b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	f003 0303 	and.w	r3, r3, #3
 8007ade:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	2b02      	cmp	r3, #2
 8007ae4:	d003      	beq.n	8007aee <HAL_RCC_GetSysClockFreq+0xa6>
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	2b03      	cmp	r3, #3
 8007aea:	d003      	beq.n	8007af4 <HAL_RCC_GetSysClockFreq+0xac>
 8007aec:	e005      	b.n	8007afa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007aee:	4b1a      	ldr	r3, [pc, #104]	; (8007b58 <HAL_RCC_GetSysClockFreq+0x110>)
 8007af0:	617b      	str	r3, [r7, #20]
      break;
 8007af2:	e005      	b.n	8007b00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007af4:	4b19      	ldr	r3, [pc, #100]	; (8007b5c <HAL_RCC_GetSysClockFreq+0x114>)
 8007af6:	617b      	str	r3, [r7, #20]
      break;
 8007af8:	e002      	b.n	8007b00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	617b      	str	r3, [r7, #20]
      break;
 8007afe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007b00:	4b13      	ldr	r3, [pc, #76]	; (8007b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	091b      	lsrs	r3, r3, #4
 8007b06:	f003 030f 	and.w	r3, r3, #15
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007b0e:	4b10      	ldr	r3, [pc, #64]	; (8007b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	0a1b      	lsrs	r3, r3, #8
 8007b14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b18:	697a      	ldr	r2, [r7, #20]
 8007b1a:	fb03 f202 	mul.w	r2, r3, r2
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b24:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007b26:	4b0a      	ldr	r3, [pc, #40]	; (8007b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	0e5b      	lsrs	r3, r3, #25
 8007b2c:	f003 0303 	and.w	r3, r3, #3
 8007b30:	3301      	adds	r3, #1
 8007b32:	005b      	lsls	r3, r3, #1
 8007b34:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007b36:	697a      	ldr	r2, [r7, #20]
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b3e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007b40:	69bb      	ldr	r3, [r7, #24]
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3724      	adds	r7, #36	; 0x24
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop
 8007b50:	40021000 	.word	0x40021000
 8007b54:	0800b2fc 	.word	0x0800b2fc
 8007b58:	00f42400 	.word	0x00f42400
 8007b5c:	007a1200 	.word	0x007a1200

08007b60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b60:	b480      	push	{r7}
 8007b62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b64:	4b03      	ldr	r3, [pc, #12]	; (8007b74 <HAL_RCC_GetHCLKFreq+0x14>)
 8007b66:	681b      	ldr	r3, [r3, #0]
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr
 8007b72:	bf00      	nop
 8007b74:	2000004c 	.word	0x2000004c

08007b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007b7c:	f7ff fff0 	bl	8007b60 <HAL_RCC_GetHCLKFreq>
 8007b80:	4602      	mov	r2, r0
 8007b82:	4b06      	ldr	r3, [pc, #24]	; (8007b9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	0a1b      	lsrs	r3, r3, #8
 8007b88:	f003 0307 	and.w	r3, r3, #7
 8007b8c:	4904      	ldr	r1, [pc, #16]	; (8007ba0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007b8e:	5ccb      	ldrb	r3, [r1, r3]
 8007b90:	f003 031f 	and.w	r3, r3, #31
 8007b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	bd80      	pop	{r7, pc}
 8007b9c:	40021000 	.word	0x40021000
 8007ba0:	0800b2f4 	.word	0x0800b2f4

08007ba4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007ba8:	f7ff ffda 	bl	8007b60 <HAL_RCC_GetHCLKFreq>
 8007bac:	4602      	mov	r2, r0
 8007bae:	4b06      	ldr	r3, [pc, #24]	; (8007bc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	0adb      	lsrs	r3, r3, #11
 8007bb4:	f003 0307 	and.w	r3, r3, #7
 8007bb8:	4904      	ldr	r1, [pc, #16]	; (8007bcc <HAL_RCC_GetPCLK2Freq+0x28>)
 8007bba:	5ccb      	ldrb	r3, [r1, r3]
 8007bbc:	f003 031f 	and.w	r3, r3, #31
 8007bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	40021000 	.word	0x40021000
 8007bcc:	0800b2f4 	.word	0x0800b2f4

08007bd0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	220f      	movs	r2, #15
 8007bde:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8007be0:	4b12      	ldr	r3, [pc, #72]	; (8007c2c <HAL_RCC_GetClockConfig+0x5c>)
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	f003 0203 	and.w	r2, r3, #3
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8007bec:	4b0f      	ldr	r3, [pc, #60]	; (8007c2c <HAL_RCC_GetClockConfig+0x5c>)
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007bf8:	4b0c      	ldr	r3, [pc, #48]	; (8007c2c <HAL_RCC_GetClockConfig+0x5c>)
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007c04:	4b09      	ldr	r3, [pc, #36]	; (8007c2c <HAL_RCC_GetClockConfig+0x5c>)
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	08db      	lsrs	r3, r3, #3
 8007c0a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007c12:	4b07      	ldr	r3, [pc, #28]	; (8007c30 <HAL_RCC_GetClockConfig+0x60>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 020f 	and.w	r2, r3, #15
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	601a      	str	r2, [r3, #0]
}
 8007c1e:	bf00      	nop
 8007c20:	370c      	adds	r7, #12
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr
 8007c2a:	bf00      	nop
 8007c2c:	40021000 	.word	0x40021000
 8007c30:	40022000 	.word	0x40022000

08007c34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b086      	sub	sp, #24
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007c40:	4b27      	ldr	r3, [pc, #156]	; (8007ce0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d003      	beq.n	8007c54 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007c4c:	f7ff f8e4 	bl	8006e18 <HAL_PWREx_GetVoltageRange>
 8007c50:	6178      	str	r0, [r7, #20]
 8007c52:	e014      	b.n	8007c7e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007c54:	4b22      	ldr	r3, [pc, #136]	; (8007ce0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c58:	4a21      	ldr	r2, [pc, #132]	; (8007ce0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c5e:	6593      	str	r3, [r2, #88]	; 0x58
 8007c60:	4b1f      	ldr	r3, [pc, #124]	; (8007ce0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c68:	60fb      	str	r3, [r7, #12]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007c6c:	f7ff f8d4 	bl	8006e18 <HAL_PWREx_GetVoltageRange>
 8007c70:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007c72:	4b1b      	ldr	r3, [pc, #108]	; (8007ce0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c76:	4a1a      	ldr	r2, [pc, #104]	; (8007ce0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007c78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c7c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c84:	d10b      	bne.n	8007c9e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2b80      	cmp	r3, #128	; 0x80
 8007c8a:	d913      	bls.n	8007cb4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2ba0      	cmp	r3, #160	; 0xa0
 8007c90:	d902      	bls.n	8007c98 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007c92:	2302      	movs	r3, #2
 8007c94:	613b      	str	r3, [r7, #16]
 8007c96:	e00d      	b.n	8007cb4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007c98:	2301      	movs	r3, #1
 8007c9a:	613b      	str	r3, [r7, #16]
 8007c9c:	e00a      	b.n	8007cb4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2b7f      	cmp	r3, #127	; 0x7f
 8007ca2:	d902      	bls.n	8007caa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8007ca4:	2302      	movs	r3, #2
 8007ca6:	613b      	str	r3, [r7, #16]
 8007ca8:	e004      	b.n	8007cb4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2b70      	cmp	r3, #112	; 0x70
 8007cae:	d101      	bne.n	8007cb4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007cb4:	4b0b      	ldr	r3, [pc, #44]	; (8007ce4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f023 020f 	bic.w	r2, r3, #15
 8007cbc:	4909      	ldr	r1, [pc, #36]	; (8007ce4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007cc4:	4b07      	ldr	r3, [pc, #28]	; (8007ce4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 030f 	and.w	r3, r3, #15
 8007ccc:	693a      	ldr	r2, [r7, #16]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d001      	beq.n	8007cd6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e000      	b.n	8007cd8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3718      	adds	r7, #24
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	40021000 	.word	0x40021000
 8007ce4:	40022000 	.word	0x40022000

08007ce8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b087      	sub	sp, #28
 8007cec:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007cee:	4b2d      	ldr	r3, [pc, #180]	; (8007da4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007cf0:	68db      	ldr	r3, [r3, #12]
 8007cf2:	f003 0303 	and.w	r3, r3, #3
 8007cf6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2b03      	cmp	r3, #3
 8007cfc:	d00b      	beq.n	8007d16 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2b03      	cmp	r3, #3
 8007d02:	d825      	bhi.n	8007d50 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d008      	beq.n	8007d1c <RCC_GetSysClockFreqFromPLLSource+0x34>
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2b02      	cmp	r3, #2
 8007d0e:	d11f      	bne.n	8007d50 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8007d10:	4b25      	ldr	r3, [pc, #148]	; (8007da8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007d12:	613b      	str	r3, [r7, #16]
    break;
 8007d14:	e01f      	b.n	8007d56 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8007d16:	4b25      	ldr	r3, [pc, #148]	; (8007dac <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8007d18:	613b      	str	r3, [r7, #16]
    break;
 8007d1a:	e01c      	b.n	8007d56 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007d1c:	4b21      	ldr	r3, [pc, #132]	; (8007da4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f003 0308 	and.w	r3, r3, #8
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d107      	bne.n	8007d38 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007d28:	4b1e      	ldr	r3, [pc, #120]	; (8007da4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d2e:	0a1b      	lsrs	r3, r3, #8
 8007d30:	f003 030f 	and.w	r3, r3, #15
 8007d34:	617b      	str	r3, [r7, #20]
 8007d36:	e005      	b.n	8007d44 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007d38:	4b1a      	ldr	r3, [pc, #104]	; (8007da4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	091b      	lsrs	r3, r3, #4
 8007d3e:	f003 030f 	and.w	r3, r3, #15
 8007d42:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8007d44:	4a1a      	ldr	r2, [pc, #104]	; (8007db0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d4c:	613b      	str	r3, [r7, #16]
    break;
 8007d4e:	e002      	b.n	8007d56 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8007d50:	2300      	movs	r3, #0
 8007d52:	613b      	str	r3, [r7, #16]
    break;
 8007d54:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007d56:	4b13      	ldr	r3, [pc, #76]	; (8007da4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	091b      	lsrs	r3, r3, #4
 8007d5c:	f003 030f 	and.w	r3, r3, #15
 8007d60:	3301      	adds	r3, #1
 8007d62:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007d64:	4b0f      	ldr	r3, [pc, #60]	; (8007da4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	0a1b      	lsrs	r3, r3, #8
 8007d6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d6e:	693a      	ldr	r2, [r7, #16]
 8007d70:	fb03 f202 	mul.w	r2, r3, r2
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d7a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007d7c:	4b09      	ldr	r3, [pc, #36]	; (8007da4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	0e5b      	lsrs	r3, r3, #25
 8007d82:	f003 0303 	and.w	r3, r3, #3
 8007d86:	3301      	adds	r3, #1
 8007d88:	005b      	lsls	r3, r3, #1
 8007d8a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8007d8c:	693a      	ldr	r2, [r7, #16]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d94:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8007d96:	683b      	ldr	r3, [r7, #0]
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	371c      	adds	r7, #28
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr
 8007da4:	40021000 	.word	0x40021000
 8007da8:	00f42400 	.word	0x00f42400
 8007dac:	007a1200 	.word	0x007a1200
 8007db0:	0800b2fc 	.word	0x0800b2fc

08007db4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b086      	sub	sp, #24
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d040      	beq.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dd4:	2b80      	cmp	r3, #128	; 0x80
 8007dd6:	d02a      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007dd8:	2b80      	cmp	r3, #128	; 0x80
 8007dda:	d825      	bhi.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007ddc:	2b60      	cmp	r3, #96	; 0x60
 8007dde:	d026      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007de0:	2b60      	cmp	r3, #96	; 0x60
 8007de2:	d821      	bhi.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007de4:	2b40      	cmp	r3, #64	; 0x40
 8007de6:	d006      	beq.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8007de8:	2b40      	cmp	r3, #64	; 0x40
 8007dea:	d81d      	bhi.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d009      	beq.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8007df0:	2b20      	cmp	r3, #32
 8007df2:	d010      	beq.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8007df4:	e018      	b.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007df6:	4b89      	ldr	r3, [pc, #548]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	4a88      	ldr	r2, [pc, #544]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e00:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007e02:	e015      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	3304      	adds	r3, #4
 8007e08:	2100      	movs	r1, #0
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f000 fb12 	bl	8008434 <RCCEx_PLLSAI1_Config>
 8007e10:	4603      	mov	r3, r0
 8007e12:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007e14:	e00c      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	3320      	adds	r3, #32
 8007e1a:	2100      	movs	r1, #0
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f000 fbfd 	bl	800861c <RCCEx_PLLSAI2_Config>
 8007e22:	4603      	mov	r3, r0
 8007e24:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007e26:	e003      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	74fb      	strb	r3, [r7, #19]
      break;
 8007e2c:	e000      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8007e2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e30:	7cfb      	ldrb	r3, [r7, #19]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d10b      	bne.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007e36:	4b79      	ldr	r3, [pc, #484]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007e38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e3c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e44:	4975      	ldr	r1, [pc, #468]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007e46:	4313      	orrs	r3, r2
 8007e48:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8007e4c:	e001      	b.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e4e:	7cfb      	ldrb	r3, [r7, #19]
 8007e50:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d047      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e66:	d030      	beq.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e6c:	d82a      	bhi.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007e6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e72:	d02a      	beq.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007e74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e78:	d824      	bhi.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007e7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e7e:	d008      	beq.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8007e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e84:	d81e      	bhi.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d00a      	beq.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8007e8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e8e:	d010      	beq.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007e90:	e018      	b.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007e92:	4b62      	ldr	r3, [pc, #392]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	4a61      	ldr	r2, [pc, #388]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e9c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007e9e:	e015      	b.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	3304      	adds	r3, #4
 8007ea4:	2100      	movs	r1, #0
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f000 fac4 	bl	8008434 <RCCEx_PLLSAI1_Config>
 8007eac:	4603      	mov	r3, r0
 8007eae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007eb0:	e00c      	b.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	3320      	adds	r3, #32
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f000 fbaf 	bl	800861c <RCCEx_PLLSAI2_Config>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007ec2:	e003      	b.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	74fb      	strb	r3, [r7, #19]
      break;
 8007ec8:	e000      	b.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8007eca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ecc:	7cfb      	ldrb	r3, [r7, #19]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d10b      	bne.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007ed2:	4b52      	ldr	r3, [pc, #328]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007ed4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ed8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ee0:	494e      	ldr	r1, [pc, #312]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8007ee8:	e001      	b.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eea:	7cfb      	ldrb	r3, [r7, #19]
 8007eec:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	f000 809f 	beq.w	800803a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007efc:	2300      	movs	r3, #0
 8007efe:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007f00:	4b46      	ldr	r3, [pc, #280]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d101      	bne.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e000      	b.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8007f10:	2300      	movs	r3, #0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00d      	beq.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f16:	4b41      	ldr	r3, [pc, #260]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f1a:	4a40      	ldr	r2, [pc, #256]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f20:	6593      	str	r3, [r2, #88]	; 0x58
 8007f22:	4b3e      	ldr	r3, [pc, #248]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f2a:	60bb      	str	r3, [r7, #8]
 8007f2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007f32:	4b3b      	ldr	r3, [pc, #236]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a3a      	ldr	r2, [pc, #232]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007f3e:	f7fb fdab 	bl	8003a98 <HAL_GetTick>
 8007f42:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007f44:	e009      	b.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f46:	f7fb fda7 	bl	8003a98 <HAL_GetTick>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	1ad3      	subs	r3, r2, r3
 8007f50:	2b02      	cmp	r3, #2
 8007f52:	d902      	bls.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8007f54:	2303      	movs	r3, #3
 8007f56:	74fb      	strb	r3, [r7, #19]
        break;
 8007f58:	e005      	b.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007f5a:	4b31      	ldr	r3, [pc, #196]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d0ef      	beq.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8007f66:	7cfb      	ldrb	r3, [r7, #19]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d15b      	bne.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007f6c:	4b2b      	ldr	r3, [pc, #172]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f76:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d01f      	beq.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f84:	697a      	ldr	r2, [r7, #20]
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d019      	beq.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007f8a:	4b24      	ldr	r3, [pc, #144]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f94:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007f96:	4b21      	ldr	r3, [pc, #132]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f9c:	4a1f      	ldr	r2, [pc, #124]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007f9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fa2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007fa6:	4b1d      	ldr	r3, [pc, #116]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fac:	4a1b      	ldr	r2, [pc, #108]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007fb6:	4a19      	ldr	r2, [pc, #100]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	f003 0301 	and.w	r3, r3, #1
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d016      	beq.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fc8:	f7fb fd66 	bl	8003a98 <HAL_GetTick>
 8007fcc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007fce:	e00b      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fd0:	f7fb fd62 	bl	8003a98 <HAL_GetTick>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	1ad3      	subs	r3, r2, r3
 8007fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d902      	bls.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8007fe2:	2303      	movs	r3, #3
 8007fe4:	74fb      	strb	r3, [r7, #19]
            break;
 8007fe6:	e006      	b.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007fe8:	4b0c      	ldr	r3, [pc, #48]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fee:	f003 0302 	and.w	r3, r3, #2
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d0ec      	beq.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8007ff6:	7cfb      	ldrb	r3, [r7, #19]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d10c      	bne.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ffc:	4b07      	ldr	r3, [pc, #28]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008002:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800800c:	4903      	ldr	r1, [pc, #12]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800800e:	4313      	orrs	r3, r2
 8008010:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008014:	e008      	b.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008016:	7cfb      	ldrb	r3, [r7, #19]
 8008018:	74bb      	strb	r3, [r7, #18]
 800801a:	e005      	b.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800801c:	40021000 	.word	0x40021000
 8008020:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008024:	7cfb      	ldrb	r3, [r7, #19]
 8008026:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008028:	7c7b      	ldrb	r3, [r7, #17]
 800802a:	2b01      	cmp	r3, #1
 800802c:	d105      	bne.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800802e:	4ba0      	ldr	r3, [pc, #640]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008032:	4a9f      	ldr	r2, [pc, #636]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008034:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008038:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f003 0301 	and.w	r3, r3, #1
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00a      	beq.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008046:	4b9a      	ldr	r3, [pc, #616]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800804c:	f023 0203 	bic.w	r2, r3, #3
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008054:	4996      	ldr	r1, [pc, #600]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008056:	4313      	orrs	r3, r2
 8008058:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 0302 	and.w	r3, r3, #2
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00a      	beq.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008068:	4b91      	ldr	r3, [pc, #580]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800806a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800806e:	f023 020c 	bic.w	r2, r3, #12
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008076:	498e      	ldr	r1, [pc, #568]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008078:	4313      	orrs	r3, r2
 800807a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f003 0304 	and.w	r3, r3, #4
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00a      	beq.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800808a:	4b89      	ldr	r3, [pc, #548]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800808c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008090:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008098:	4985      	ldr	r1, [pc, #532]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800809a:	4313      	orrs	r3, r2
 800809c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f003 0308 	and.w	r3, r3, #8
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d00a      	beq.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80080ac:	4b80      	ldr	r3, [pc, #512]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80080ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080ba:	497d      	ldr	r1, [pc, #500]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80080bc:	4313      	orrs	r3, r2
 80080be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 0310 	and.w	r3, r3, #16
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00a      	beq.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80080ce:	4b78      	ldr	r3, [pc, #480]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80080d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080dc:	4974      	ldr	r1, [pc, #464]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80080de:	4313      	orrs	r3, r2
 80080e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f003 0320 	and.w	r3, r3, #32
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d00a      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80080f0:	4b6f      	ldr	r3, [pc, #444]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80080f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080fe:	496c      	ldr	r1, [pc, #432]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008100:	4313      	orrs	r3, r2
 8008102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00a      	beq.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008112:	4b67      	ldr	r3, [pc, #412]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008118:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008120:	4963      	ldr	r1, [pc, #396]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008122:	4313      	orrs	r3, r2
 8008124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008130:	2b00      	cmp	r3, #0
 8008132:	d00a      	beq.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008134:	4b5e      	ldr	r3, [pc, #376]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800813a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008142:	495b      	ldr	r1, [pc, #364]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008144:	4313      	orrs	r3, r2
 8008146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00a      	beq.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008156:	4b56      	ldr	r3, [pc, #344]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800815c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008164:	4952      	ldr	r1, [pc, #328]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008166:	4313      	orrs	r3, r2
 8008168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00a      	beq.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008178:	4b4d      	ldr	r3, [pc, #308]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800817a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800817e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008186:	494a      	ldr	r1, [pc, #296]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008188:	4313      	orrs	r3, r2
 800818a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00a      	beq.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800819a:	4b45      	ldr	r3, [pc, #276]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800819c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081a8:	4941      	ldr	r1, [pc, #260]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081aa:	4313      	orrs	r3, r2
 80081ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d00a      	beq.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80081bc:	4b3c      	ldr	r3, [pc, #240]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80081c2:	f023 0203 	bic.w	r2, r3, #3
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081ca:	4939      	ldr	r1, [pc, #228]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081cc:	4313      	orrs	r3, r2
 80081ce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d028      	beq.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80081de:	4b34      	ldr	r3, [pc, #208]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081ec:	4930      	ldr	r1, [pc, #192]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081ee:	4313      	orrs	r3, r2
 80081f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081fc:	d106      	bne.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80081fe:	4b2c      	ldr	r3, [pc, #176]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008200:	68db      	ldr	r3, [r3, #12]
 8008202:	4a2b      	ldr	r2, [pc, #172]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008208:	60d3      	str	r3, [r2, #12]
 800820a:	e011      	b.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008210:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008214:	d10c      	bne.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	3304      	adds	r3, #4
 800821a:	2101      	movs	r1, #1
 800821c:	4618      	mov	r0, r3
 800821e:	f000 f909 	bl	8008434 <RCCEx_PLLSAI1_Config>
 8008222:	4603      	mov	r3, r0
 8008224:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008226:	7cfb      	ldrb	r3, [r7, #19]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d001      	beq.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800822c:	7cfb      	ldrb	r3, [r7, #19]
 800822e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008238:	2b00      	cmp	r3, #0
 800823a:	d04d      	beq.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008240:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008244:	d108      	bne.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8008246:	4b1a      	ldr	r3, [pc, #104]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008248:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800824c:	4a18      	ldr	r2, [pc, #96]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800824e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008252:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8008256:	e012      	b.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8008258:	4b15      	ldr	r3, [pc, #84]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800825a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800825e:	4a14      	ldr	r2, [pc, #80]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008260:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008264:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8008268:	4b11      	ldr	r3, [pc, #68]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800826a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800826e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008276:	490e      	ldr	r1, [pc, #56]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008278:	4313      	orrs	r3, r2
 800827a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008282:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008286:	d106      	bne.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008288:	4b09      	ldr	r3, [pc, #36]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	4a08      	ldr	r2, [pc, #32]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800828e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008292:	60d3      	str	r3, [r2, #12]
 8008294:	e020      	b.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800829a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800829e:	d109      	bne.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80082a0:	4b03      	ldr	r3, [pc, #12]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	4a02      	ldr	r2, [pc, #8]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80082a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082aa:	60d3      	str	r3, [r2, #12]
 80082ac:	e014      	b.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80082ae:	bf00      	nop
 80082b0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80082bc:	d10c      	bne.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	3304      	adds	r3, #4
 80082c2:	2101      	movs	r1, #1
 80082c4:	4618      	mov	r0, r3
 80082c6:	f000 f8b5 	bl	8008434 <RCCEx_PLLSAI1_Config>
 80082ca:	4603      	mov	r3, r0
 80082cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80082ce:	7cfb      	ldrb	r3, [r7, #19]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d001      	beq.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80082d4:	7cfb      	ldrb	r3, [r7, #19]
 80082d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d028      	beq.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80082e4:	4b4a      	ldr	r3, [pc, #296]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80082e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082f2:	4947      	ldr	r1, [pc, #284]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80082f4:	4313      	orrs	r3, r2
 80082f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008302:	d106      	bne.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008304:	4b42      	ldr	r3, [pc, #264]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	4a41      	ldr	r2, [pc, #260]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800830a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800830e:	60d3      	str	r3, [r2, #12]
 8008310:	e011      	b.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008316:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800831a:	d10c      	bne.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	3304      	adds	r3, #4
 8008320:	2101      	movs	r1, #1
 8008322:	4618      	mov	r0, r3
 8008324:	f000 f886 	bl	8008434 <RCCEx_PLLSAI1_Config>
 8008328:	4603      	mov	r3, r0
 800832a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800832c:	7cfb      	ldrb	r3, [r7, #19]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d001      	beq.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8008332:	7cfb      	ldrb	r3, [r7, #19]
 8008334:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800833e:	2b00      	cmp	r3, #0
 8008340:	d01e      	beq.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008342:	4b33      	ldr	r3, [pc, #204]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008348:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008352:	492f      	ldr	r1, [pc, #188]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008354:	4313      	orrs	r3, r2
 8008356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008360:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008364:	d10c      	bne.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	3304      	adds	r3, #4
 800836a:	2102      	movs	r1, #2
 800836c:	4618      	mov	r0, r3
 800836e:	f000 f861 	bl	8008434 <RCCEx_PLLSAI1_Config>
 8008372:	4603      	mov	r3, r0
 8008374:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008376:	7cfb      	ldrb	r3, [r7, #19]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d001      	beq.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800837c:	7cfb      	ldrb	r3, [r7, #19]
 800837e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008388:	2b00      	cmp	r3, #0
 800838a:	d00b      	beq.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800838c:	4b20      	ldr	r3, [pc, #128]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800838e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008392:	f023 0204 	bic.w	r2, r3, #4
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800839c:	491c      	ldr	r1, [pc, #112]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800839e:	4313      	orrs	r3, r2
 80083a0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d00b      	beq.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80083b0:	4b17      	ldr	r3, [pc, #92]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80083b6:	f023 0218 	bic.w	r2, r3, #24
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083c0:	4913      	ldr	r1, [pc, #76]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083c2:	4313      	orrs	r3, r2
 80083c4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d017      	beq.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80083d4:	4b0e      	ldr	r3, [pc, #56]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80083da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083e4:	490a      	ldr	r1, [pc, #40]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083e6:	4313      	orrs	r3, r2
 80083e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083f6:	d105      	bne.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80083f8:	4b05      	ldr	r3, [pc, #20]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083fa:	68db      	ldr	r3, [r3, #12]
 80083fc:	4a04      	ldr	r2, [pc, #16]	; (8008410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008402:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008404:	7cbb      	ldrb	r3, [r7, #18]
}
 8008406:	4618      	mov	r0, r3
 8008408:	3718      	adds	r7, #24
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	40021000 	.word	0x40021000

08008414 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8008414:	b480      	push	{r7}
 8008416:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8008418:	4b05      	ldr	r3, [pc, #20]	; (8008430 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a04      	ldr	r2, [pc, #16]	; (8008430 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800841e:	f043 0304 	orr.w	r3, r3, #4
 8008422:	6013      	str	r3, [r2, #0]
}
 8008424:	bf00      	nop
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr
 800842e:	bf00      	nop
 8008430:	40021000 	.word	0x40021000

08008434 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800843e:	2300      	movs	r3, #0
 8008440:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008442:	4b72      	ldr	r3, [pc, #456]	; (800860c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	f003 0303 	and.w	r3, r3, #3
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00e      	beq.n	800846c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800844e:	4b6f      	ldr	r3, [pc, #444]	; (800860c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008450:	68db      	ldr	r3, [r3, #12]
 8008452:	f003 0203 	and.w	r2, r3, #3
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	429a      	cmp	r2, r3
 800845c:	d103      	bne.n	8008466 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
       ||
 8008462:	2b00      	cmp	r3, #0
 8008464:	d142      	bne.n	80084ec <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8008466:	2301      	movs	r3, #1
 8008468:	73fb      	strb	r3, [r7, #15]
 800846a:	e03f      	b.n	80084ec <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2b03      	cmp	r3, #3
 8008472:	d018      	beq.n	80084a6 <RCCEx_PLLSAI1_Config+0x72>
 8008474:	2b03      	cmp	r3, #3
 8008476:	d825      	bhi.n	80084c4 <RCCEx_PLLSAI1_Config+0x90>
 8008478:	2b01      	cmp	r3, #1
 800847a:	d002      	beq.n	8008482 <RCCEx_PLLSAI1_Config+0x4e>
 800847c:	2b02      	cmp	r3, #2
 800847e:	d009      	beq.n	8008494 <RCCEx_PLLSAI1_Config+0x60>
 8008480:	e020      	b.n	80084c4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008482:	4b62      	ldr	r3, [pc, #392]	; (800860c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f003 0302 	and.w	r3, r3, #2
 800848a:	2b00      	cmp	r3, #0
 800848c:	d11d      	bne.n	80084ca <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008492:	e01a      	b.n	80084ca <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008494:	4b5d      	ldr	r3, [pc, #372]	; (800860c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800849c:	2b00      	cmp	r3, #0
 800849e:	d116      	bne.n	80084ce <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80084a4:	e013      	b.n	80084ce <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80084a6:	4b59      	ldr	r3, [pc, #356]	; (800860c <RCCEx_PLLSAI1_Config+0x1d8>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d10f      	bne.n	80084d2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80084b2:	4b56      	ldr	r3, [pc, #344]	; (800860c <RCCEx_PLLSAI1_Config+0x1d8>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d109      	bne.n	80084d2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80084be:	2301      	movs	r3, #1
 80084c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80084c2:	e006      	b.n	80084d2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	73fb      	strb	r3, [r7, #15]
      break;
 80084c8:	e004      	b.n	80084d4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80084ca:	bf00      	nop
 80084cc:	e002      	b.n	80084d4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80084ce:	bf00      	nop
 80084d0:	e000      	b.n	80084d4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80084d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80084d4:	7bfb      	ldrb	r3, [r7, #15]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d108      	bne.n	80084ec <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80084da:	4b4c      	ldr	r3, [pc, #304]	; (800860c <RCCEx_PLLSAI1_Config+0x1d8>)
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	f023 0203 	bic.w	r2, r3, #3
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4949      	ldr	r1, [pc, #292]	; (800860c <RCCEx_PLLSAI1_Config+0x1d8>)
 80084e8:	4313      	orrs	r3, r2
 80084ea:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80084ec:	7bfb      	ldrb	r3, [r7, #15]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	f040 8086 	bne.w	8008600 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80084f4:	4b45      	ldr	r3, [pc, #276]	; (800860c <RCCEx_PLLSAI1_Config+0x1d8>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a44      	ldr	r2, [pc, #272]	; (800860c <RCCEx_PLLSAI1_Config+0x1d8>)
 80084fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80084fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008500:	f7fb faca 	bl	8003a98 <HAL_GetTick>
 8008504:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008506:	e009      	b.n	800851c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008508:	f7fb fac6 	bl	8003a98 <HAL_GetTick>
 800850c:	4602      	mov	r2, r0
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	1ad3      	subs	r3, r2, r3
 8008512:	2b02      	cmp	r3, #2
 8008514:	d902      	bls.n	800851c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8008516:	2303      	movs	r3, #3
 8008518:	73fb      	strb	r3, [r7, #15]
        break;
 800851a:	e005      	b.n	8008528 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800851c:	4b3b      	ldr	r3, [pc, #236]	; (800860c <RCCEx_PLLSAI1_Config+0x1d8>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008524:	2b00      	cmp	r3, #0
 8008526:	d1ef      	bne.n	8008508 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8008528:	7bfb      	ldrb	r3, [r7, #15]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d168      	bne.n	8008600 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d113      	bne.n	800855c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008534:	4b35      	ldr	r3, [pc, #212]	; (800860c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008536:	691a      	ldr	r2, [r3, #16]
 8008538:	4b35      	ldr	r3, [pc, #212]	; (8008610 <RCCEx_PLLSAI1_Config+0x1dc>)
 800853a:	4013      	ands	r3, r2
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	6892      	ldr	r2, [r2, #8]
 8008540:	0211      	lsls	r1, r2, #8
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	68d2      	ldr	r2, [r2, #12]
 8008546:	06d2      	lsls	r2, r2, #27
 8008548:	4311      	orrs	r1, r2
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	6852      	ldr	r2, [r2, #4]
 800854e:	3a01      	subs	r2, #1
 8008550:	0112      	lsls	r2, r2, #4
 8008552:	430a      	orrs	r2, r1
 8008554:	492d      	ldr	r1, [pc, #180]	; (800860c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008556:	4313      	orrs	r3, r2
 8008558:	610b      	str	r3, [r1, #16]
 800855a:	e02d      	b.n	80085b8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	2b01      	cmp	r3, #1
 8008560:	d115      	bne.n	800858e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008562:	4b2a      	ldr	r3, [pc, #168]	; (800860c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008564:	691a      	ldr	r2, [r3, #16]
 8008566:	4b2b      	ldr	r3, [pc, #172]	; (8008614 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008568:	4013      	ands	r3, r2
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	6892      	ldr	r2, [r2, #8]
 800856e:	0211      	lsls	r1, r2, #8
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	6912      	ldr	r2, [r2, #16]
 8008574:	0852      	lsrs	r2, r2, #1
 8008576:	3a01      	subs	r2, #1
 8008578:	0552      	lsls	r2, r2, #21
 800857a:	4311      	orrs	r1, r2
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	6852      	ldr	r2, [r2, #4]
 8008580:	3a01      	subs	r2, #1
 8008582:	0112      	lsls	r2, r2, #4
 8008584:	430a      	orrs	r2, r1
 8008586:	4921      	ldr	r1, [pc, #132]	; (800860c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008588:	4313      	orrs	r3, r2
 800858a:	610b      	str	r3, [r1, #16]
 800858c:	e014      	b.n	80085b8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800858e:	4b1f      	ldr	r3, [pc, #124]	; (800860c <RCCEx_PLLSAI1_Config+0x1d8>)
 8008590:	691a      	ldr	r2, [r3, #16]
 8008592:	4b21      	ldr	r3, [pc, #132]	; (8008618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008594:	4013      	ands	r3, r2
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	6892      	ldr	r2, [r2, #8]
 800859a:	0211      	lsls	r1, r2, #8
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	6952      	ldr	r2, [r2, #20]
 80085a0:	0852      	lsrs	r2, r2, #1
 80085a2:	3a01      	subs	r2, #1
 80085a4:	0652      	lsls	r2, r2, #25
 80085a6:	4311      	orrs	r1, r2
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	6852      	ldr	r2, [r2, #4]
 80085ac:	3a01      	subs	r2, #1
 80085ae:	0112      	lsls	r2, r2, #4
 80085b0:	430a      	orrs	r2, r1
 80085b2:	4916      	ldr	r1, [pc, #88]	; (800860c <RCCEx_PLLSAI1_Config+0x1d8>)
 80085b4:	4313      	orrs	r3, r2
 80085b6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80085b8:	4b14      	ldr	r3, [pc, #80]	; (800860c <RCCEx_PLLSAI1_Config+0x1d8>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a13      	ldr	r2, [pc, #76]	; (800860c <RCCEx_PLLSAI1_Config+0x1d8>)
 80085be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80085c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085c4:	f7fb fa68 	bl	8003a98 <HAL_GetTick>
 80085c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80085ca:	e009      	b.n	80085e0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80085cc:	f7fb fa64 	bl	8003a98 <HAL_GetTick>
 80085d0:	4602      	mov	r2, r0
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	1ad3      	subs	r3, r2, r3
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	d902      	bls.n	80085e0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80085da:	2303      	movs	r3, #3
 80085dc:	73fb      	strb	r3, [r7, #15]
          break;
 80085de:	e005      	b.n	80085ec <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80085e0:	4b0a      	ldr	r3, [pc, #40]	; (800860c <RCCEx_PLLSAI1_Config+0x1d8>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d0ef      	beq.n	80085cc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80085ec:	7bfb      	ldrb	r3, [r7, #15]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d106      	bne.n	8008600 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80085f2:	4b06      	ldr	r3, [pc, #24]	; (800860c <RCCEx_PLLSAI1_Config+0x1d8>)
 80085f4:	691a      	ldr	r2, [r3, #16]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	699b      	ldr	r3, [r3, #24]
 80085fa:	4904      	ldr	r1, [pc, #16]	; (800860c <RCCEx_PLLSAI1_Config+0x1d8>)
 80085fc:	4313      	orrs	r3, r2
 80085fe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008600:	7bfb      	ldrb	r3, [r7, #15]
}
 8008602:	4618      	mov	r0, r3
 8008604:	3710      	adds	r7, #16
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	40021000 	.word	0x40021000
 8008610:	07ff800f 	.word	0x07ff800f
 8008614:	ff9f800f 	.word	0xff9f800f
 8008618:	f9ff800f 	.word	0xf9ff800f

0800861c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008626:	2300      	movs	r3, #0
 8008628:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800862a:	4b72      	ldr	r3, [pc, #456]	; (80087f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	f003 0303 	and.w	r3, r3, #3
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00e      	beq.n	8008654 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008636:	4b6f      	ldr	r3, [pc, #444]	; (80087f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008638:	68db      	ldr	r3, [r3, #12]
 800863a:	f003 0203 	and.w	r2, r3, #3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	429a      	cmp	r2, r3
 8008644:	d103      	bne.n	800864e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
       ||
 800864a:	2b00      	cmp	r3, #0
 800864c:	d142      	bne.n	80086d4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	73fb      	strb	r3, [r7, #15]
 8008652:	e03f      	b.n	80086d4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	2b03      	cmp	r3, #3
 800865a:	d018      	beq.n	800868e <RCCEx_PLLSAI2_Config+0x72>
 800865c:	2b03      	cmp	r3, #3
 800865e:	d825      	bhi.n	80086ac <RCCEx_PLLSAI2_Config+0x90>
 8008660:	2b01      	cmp	r3, #1
 8008662:	d002      	beq.n	800866a <RCCEx_PLLSAI2_Config+0x4e>
 8008664:	2b02      	cmp	r3, #2
 8008666:	d009      	beq.n	800867c <RCCEx_PLLSAI2_Config+0x60>
 8008668:	e020      	b.n	80086ac <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800866a:	4b62      	ldr	r3, [pc, #392]	; (80087f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f003 0302 	and.w	r3, r3, #2
 8008672:	2b00      	cmp	r3, #0
 8008674:	d11d      	bne.n	80086b2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8008676:	2301      	movs	r3, #1
 8008678:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800867a:	e01a      	b.n	80086b2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800867c:	4b5d      	ldr	r3, [pc, #372]	; (80087f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008684:	2b00      	cmp	r3, #0
 8008686:	d116      	bne.n	80086b6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8008688:	2301      	movs	r3, #1
 800868a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800868c:	e013      	b.n	80086b6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800868e:	4b59      	ldr	r3, [pc, #356]	; (80087f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008696:	2b00      	cmp	r3, #0
 8008698:	d10f      	bne.n	80086ba <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800869a:	4b56      	ldr	r3, [pc, #344]	; (80087f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d109      	bne.n	80086ba <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80086aa:	e006      	b.n	80086ba <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	73fb      	strb	r3, [r7, #15]
      break;
 80086b0:	e004      	b.n	80086bc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80086b2:	bf00      	nop
 80086b4:	e002      	b.n	80086bc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80086b6:	bf00      	nop
 80086b8:	e000      	b.n	80086bc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80086ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80086bc:	7bfb      	ldrb	r3, [r7, #15]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d108      	bne.n	80086d4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80086c2:	4b4c      	ldr	r3, [pc, #304]	; (80087f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	f023 0203 	bic.w	r2, r3, #3
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4949      	ldr	r1, [pc, #292]	; (80087f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80086d0:	4313      	orrs	r3, r2
 80086d2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80086d4:	7bfb      	ldrb	r3, [r7, #15]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	f040 8086 	bne.w	80087e8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80086dc:	4b45      	ldr	r3, [pc, #276]	; (80087f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a44      	ldr	r2, [pc, #272]	; (80087f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80086e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086e8:	f7fb f9d6 	bl	8003a98 <HAL_GetTick>
 80086ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80086ee:	e009      	b.n	8008704 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80086f0:	f7fb f9d2 	bl	8003a98 <HAL_GetTick>
 80086f4:	4602      	mov	r2, r0
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	1ad3      	subs	r3, r2, r3
 80086fa:	2b02      	cmp	r3, #2
 80086fc:	d902      	bls.n	8008704 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80086fe:	2303      	movs	r3, #3
 8008700:	73fb      	strb	r3, [r7, #15]
        break;
 8008702:	e005      	b.n	8008710 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008704:	4b3b      	ldr	r3, [pc, #236]	; (80087f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800870c:	2b00      	cmp	r3, #0
 800870e:	d1ef      	bne.n	80086f0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8008710:	7bfb      	ldrb	r3, [r7, #15]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d168      	bne.n	80087e8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d113      	bne.n	8008744 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800871c:	4b35      	ldr	r3, [pc, #212]	; (80087f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800871e:	695a      	ldr	r2, [r3, #20]
 8008720:	4b35      	ldr	r3, [pc, #212]	; (80087f8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8008722:	4013      	ands	r3, r2
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	6892      	ldr	r2, [r2, #8]
 8008728:	0211      	lsls	r1, r2, #8
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	68d2      	ldr	r2, [r2, #12]
 800872e:	06d2      	lsls	r2, r2, #27
 8008730:	4311      	orrs	r1, r2
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	6852      	ldr	r2, [r2, #4]
 8008736:	3a01      	subs	r2, #1
 8008738:	0112      	lsls	r2, r2, #4
 800873a:	430a      	orrs	r2, r1
 800873c:	492d      	ldr	r1, [pc, #180]	; (80087f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800873e:	4313      	orrs	r3, r2
 8008740:	614b      	str	r3, [r1, #20]
 8008742:	e02d      	b.n	80087a0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	2b01      	cmp	r3, #1
 8008748:	d115      	bne.n	8008776 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800874a:	4b2a      	ldr	r3, [pc, #168]	; (80087f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800874c:	695a      	ldr	r2, [r3, #20]
 800874e:	4b2b      	ldr	r3, [pc, #172]	; (80087fc <RCCEx_PLLSAI2_Config+0x1e0>)
 8008750:	4013      	ands	r3, r2
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	6892      	ldr	r2, [r2, #8]
 8008756:	0211      	lsls	r1, r2, #8
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	6912      	ldr	r2, [r2, #16]
 800875c:	0852      	lsrs	r2, r2, #1
 800875e:	3a01      	subs	r2, #1
 8008760:	0552      	lsls	r2, r2, #21
 8008762:	4311      	orrs	r1, r2
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	6852      	ldr	r2, [r2, #4]
 8008768:	3a01      	subs	r2, #1
 800876a:	0112      	lsls	r2, r2, #4
 800876c:	430a      	orrs	r2, r1
 800876e:	4921      	ldr	r1, [pc, #132]	; (80087f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008770:	4313      	orrs	r3, r2
 8008772:	614b      	str	r3, [r1, #20]
 8008774:	e014      	b.n	80087a0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008776:	4b1f      	ldr	r3, [pc, #124]	; (80087f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008778:	695a      	ldr	r2, [r3, #20]
 800877a:	4b21      	ldr	r3, [pc, #132]	; (8008800 <RCCEx_PLLSAI2_Config+0x1e4>)
 800877c:	4013      	ands	r3, r2
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	6892      	ldr	r2, [r2, #8]
 8008782:	0211      	lsls	r1, r2, #8
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	6952      	ldr	r2, [r2, #20]
 8008788:	0852      	lsrs	r2, r2, #1
 800878a:	3a01      	subs	r2, #1
 800878c:	0652      	lsls	r2, r2, #25
 800878e:	4311      	orrs	r1, r2
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	6852      	ldr	r2, [r2, #4]
 8008794:	3a01      	subs	r2, #1
 8008796:	0112      	lsls	r2, r2, #4
 8008798:	430a      	orrs	r2, r1
 800879a:	4916      	ldr	r1, [pc, #88]	; (80087f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800879c:	4313      	orrs	r3, r2
 800879e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80087a0:	4b14      	ldr	r3, [pc, #80]	; (80087f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a13      	ldr	r2, [pc, #76]	; (80087f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80087a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087ac:	f7fb f974 	bl	8003a98 <HAL_GetTick>
 80087b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80087b2:	e009      	b.n	80087c8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80087b4:	f7fb f970 	bl	8003a98 <HAL_GetTick>
 80087b8:	4602      	mov	r2, r0
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	1ad3      	subs	r3, r2, r3
 80087be:	2b02      	cmp	r3, #2
 80087c0:	d902      	bls.n	80087c8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80087c2:	2303      	movs	r3, #3
 80087c4:	73fb      	strb	r3, [r7, #15]
          break;
 80087c6:	e005      	b.n	80087d4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80087c8:	4b0a      	ldr	r3, [pc, #40]	; (80087f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d0ef      	beq.n	80087b4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80087d4:	7bfb      	ldrb	r3, [r7, #15]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d106      	bne.n	80087e8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80087da:	4b06      	ldr	r3, [pc, #24]	; (80087f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80087dc:	695a      	ldr	r2, [r3, #20]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	699b      	ldr	r3, [r3, #24]
 80087e2:	4904      	ldr	r1, [pc, #16]	; (80087f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80087e4:	4313      	orrs	r3, r2
 80087e6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80087e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3710      	adds	r7, #16
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop
 80087f4:	40021000 	.word	0x40021000
 80087f8:	07ff800f 	.word	0x07ff800f
 80087fc:	ff9f800f 	.word	0xff9f800f
 8008800:	f9ff800f 	.word	0xf9ff800f

08008804 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d101      	bne.n	8008816 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	e095      	b.n	8008942 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800881a:	2b00      	cmp	r3, #0
 800881c:	d108      	bne.n	8008830 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008826:	d009      	beq.n	800883c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2200      	movs	r2, #0
 800882c:	61da      	str	r2, [r3, #28]
 800882e:	e005      	b.n	800883c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008848:	b2db      	uxtb	r3, r3
 800884a:	2b00      	cmp	r3, #0
 800884c:	d106      	bne.n	800885c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f7fa fdf2 	bl	8003440 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2202      	movs	r2, #2
 8008860:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008872:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	68db      	ldr	r3, [r3, #12]
 8008878:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800887c:	d902      	bls.n	8008884 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800887e:	2300      	movs	r3, #0
 8008880:	60fb      	str	r3, [r7, #12]
 8008882:	e002      	b.n	800888a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008888:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	68db      	ldr	r3, [r3, #12]
 800888e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008892:	d007      	beq.n	80088a4 <HAL_SPI_Init+0xa0>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800889c:	d002      	beq.n	80088a4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80088b4:	431a      	orrs	r2, r3
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	691b      	ldr	r3, [r3, #16]
 80088ba:	f003 0302 	and.w	r3, r3, #2
 80088be:	431a      	orrs	r2, r3
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	695b      	ldr	r3, [r3, #20]
 80088c4:	f003 0301 	and.w	r3, r3, #1
 80088c8:	431a      	orrs	r2, r3
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	699b      	ldr	r3, [r3, #24]
 80088ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088d2:	431a      	orrs	r2, r3
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	69db      	ldr	r3, [r3, #28]
 80088d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088dc:	431a      	orrs	r2, r3
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a1b      	ldr	r3, [r3, #32]
 80088e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088e6:	ea42 0103 	orr.w	r1, r2, r3
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	430a      	orrs	r2, r1
 80088f8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	699b      	ldr	r3, [r3, #24]
 80088fe:	0c1b      	lsrs	r3, r3, #16
 8008900:	f003 0204 	and.w	r2, r3, #4
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008908:	f003 0310 	and.w	r3, r3, #16
 800890c:	431a      	orrs	r2, r3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008912:	f003 0308 	and.w	r3, r3, #8
 8008916:	431a      	orrs	r2, r3
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008920:	ea42 0103 	orr.w	r1, r2, r3
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	430a      	orrs	r2, r1
 8008930:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2201      	movs	r2, #1
 800893c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
	...

0800894c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b086      	sub	sp, #24
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	4613      	mov	r3, r2
 8008958:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800895a:	2300      	movs	r3, #0
 800895c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008964:	2b01      	cmp	r3, #1
 8008966:	d101      	bne.n	800896c <HAL_SPI_Transmit_DMA+0x20>
 8008968:	2302      	movs	r3, #2
 800896a:	e0d4      	b.n	8008b16 <HAL_SPI_Transmit_DMA+0x1ca>
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2201      	movs	r2, #1
 8008970:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800897a:	b2db      	uxtb	r3, r3
 800897c:	2b01      	cmp	r3, #1
 800897e:	d002      	beq.n	8008986 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8008980:	2302      	movs	r3, #2
 8008982:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008984:	e0c2      	b.n	8008b0c <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d002      	beq.n	8008992 <HAL_SPI_Transmit_DMA+0x46>
 800898c:	88fb      	ldrh	r3, [r7, #6]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d102      	bne.n	8008998 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8008992:	2301      	movs	r3, #1
 8008994:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008996:	e0b9      	b.n	8008b0c <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2203      	movs	r2, #3
 800899c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2200      	movs	r2, #0
 80089a4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	68ba      	ldr	r2, [r7, #8]
 80089aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	88fa      	ldrh	r2, [r7, #6]
 80089b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	88fa      	ldrh	r2, [r7, #6]
 80089b6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2200      	movs	r2, #0
 80089bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2200      	movs	r2, #0
 80089c2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2200      	movs	r2, #0
 80089c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2200      	movs	r2, #0
 80089d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089e2:	d10f      	bne.n	8008a04 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a02:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a08:	4a45      	ldr	r2, [pc, #276]	; (8008b20 <HAL_SPI_Transmit_DMA+0x1d4>)
 8008a0a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a10:	4a44      	ldr	r2, [pc, #272]	; (8008b24 <HAL_SPI_Transmit_DMA+0x1d8>)
 8008a12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a18:	4a43      	ldr	r2, [pc, #268]	; (8008b28 <HAL_SPI_Transmit_DMA+0x1dc>)
 8008a1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a20:	2200      	movs	r2, #0
 8008a22:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	685a      	ldr	r2, [r3, #4]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008a32:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	68db      	ldr	r3, [r3, #12]
 8008a38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008a3c:	d82d      	bhi.n	8008a9a <HAL_SPI_Transmit_DMA+0x14e>
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a42:	699b      	ldr	r3, [r3, #24]
 8008a44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a48:	d127      	bne.n	8008a9a <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	f003 0301 	and.w	r3, r3, #1
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d10f      	bne.n	8008a78 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	685a      	ldr	r2, [r3, #4]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008a66:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	085b      	lsrs	r3, r3, #1
 8008a70:	b29a      	uxth	r2, r3
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008a76:	e010      	b.n	8008a9a <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	685a      	ldr	r2, [r3, #4]
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a86:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	085b      	lsrs	r3, r3, #1
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	3301      	adds	r3, #1
 8008a94:	b29a      	uxth	r2, r3
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	330c      	adds	r3, #12
 8008aaa:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ab0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008ab2:	f7fc f999 	bl	8004de8 <HAL_DMA_Start_IT>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d008      	beq.n	8008ace <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ac0:	f043 0210 	orr.w	r2, r3, #16
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	75fb      	strb	r3, [r7, #23]

    goto error;
 8008acc:	e01e      	b.n	8008b0c <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ad8:	2b40      	cmp	r3, #64	; 0x40
 8008ada:	d007      	beq.n	8008aec <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	681a      	ldr	r2, [r3, #0]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008aea:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	685a      	ldr	r2, [r3, #4]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f042 0220 	orr.w	r2, r2, #32
 8008afa:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	685a      	ldr	r2, [r3, #4]
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f042 0202 	orr.w	r2, r2, #2
 8008b0a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008b14:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3718      	adds	r7, #24
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	08008c0f 	.word	0x08008c0f
 8008b24:	08008b69 	.word	0x08008b69
 8008b28:	08008c2b 	.word	0x08008c2b

08008b2c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8008b34:	bf00      	nop
 8008b36:	370c      	adds	r7, #12
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008b48:	bf00      	nop
 8008b4a:	370c      	adds	r7, #12
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008b5c:	bf00      	nop
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b086      	sub	sp, #24
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b74:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b76:	f7fa ff8f 	bl	8003a98 <HAL_GetTick>
 8008b7a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f003 0320 	and.w	r3, r3, #32
 8008b86:	2b20      	cmp	r3, #32
 8008b88:	d03b      	beq.n	8008c02 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	685a      	ldr	r2, [r3, #4]
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f022 0220 	bic.w	r2, r2, #32
 8008b98:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	685a      	ldr	r2, [r3, #4]
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f022 0202 	bic.w	r2, r2, #2
 8008ba8:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008baa:	693a      	ldr	r2, [r7, #16]
 8008bac:	2164      	movs	r1, #100	; 0x64
 8008bae:	6978      	ldr	r0, [r7, #20]
 8008bb0:	f000 f97a 	bl	8008ea8 <SPI_EndRxTxTransaction>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d005      	beq.n	8008bc6 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bbe:	f043 0220 	orr.w	r2, r3, #32
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d10a      	bne.n	8008be4 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008bce:	2300      	movs	r3, #0
 8008bd0:	60fb      	str	r3, [r7, #12]
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	60fb      	str	r3, [r7, #12]
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	60fb      	str	r3, [r7, #12]
 8008be2:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	2200      	movs	r2, #0
 8008be8:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	2201      	movs	r2, #1
 8008bee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d003      	beq.n	8008c02 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008bfa:	6978      	ldr	r0, [r7, #20]
 8008bfc:	f7ff ffaa 	bl	8008b54 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008c00:	e002      	b.n	8008c08 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8008c02:	6978      	ldr	r0, [r7, #20]
 8008c04:	f7ff ff92 	bl	8008b2c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008c08:	3718      	adds	r7, #24
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}

08008c0e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008c0e:	b580      	push	{r7, lr}
 8008c10:	b084      	sub	sp, #16
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c1a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8008c1c:	68f8      	ldr	r0, [r7, #12]
 8008c1e:	f7ff ff8f 	bl	8008b40 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008c22:	bf00      	nop
 8008c24:	3710      	adds	r7, #16
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008c2a:	b580      	push	{r7, lr}
 8008c2c:	b084      	sub	sp, #16
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c36:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	685a      	ldr	r2, [r3, #4]
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f022 0203 	bic.w	r2, r2, #3
 8008c46:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c4c:	f043 0210 	orr.w	r2, r3, #16
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008c5c:	68f8      	ldr	r0, [r7, #12]
 8008c5e:	f7ff ff79 	bl	8008b54 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008c62:	bf00      	nop
 8008c64:	3710      	adds	r7, #16
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
	...

08008c6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b088      	sub	sp, #32
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	60b9      	str	r1, [r7, #8]
 8008c76:	603b      	str	r3, [r7, #0]
 8008c78:	4613      	mov	r3, r2
 8008c7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008c7c:	f7fa ff0c 	bl	8003a98 <HAL_GetTick>
 8008c80:	4602      	mov	r2, r0
 8008c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c84:	1a9b      	subs	r3, r3, r2
 8008c86:	683a      	ldr	r2, [r7, #0]
 8008c88:	4413      	add	r3, r2
 8008c8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008c8c:	f7fa ff04 	bl	8003a98 <HAL_GetTick>
 8008c90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008c92:	4b39      	ldr	r3, [pc, #228]	; (8008d78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	015b      	lsls	r3, r3, #5
 8008c98:	0d1b      	lsrs	r3, r3, #20
 8008c9a:	69fa      	ldr	r2, [r7, #28]
 8008c9c:	fb02 f303 	mul.w	r3, r2, r3
 8008ca0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008ca2:	e054      	b.n	8008d4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008caa:	d050      	beq.n	8008d4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008cac:	f7fa fef4 	bl	8003a98 <HAL_GetTick>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	69bb      	ldr	r3, [r7, #24]
 8008cb4:	1ad3      	subs	r3, r2, r3
 8008cb6:	69fa      	ldr	r2, [r7, #28]
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d902      	bls.n	8008cc2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008cbc:	69fb      	ldr	r3, [r7, #28]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d13d      	bne.n	8008d3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	685a      	ldr	r2, [r3, #4]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008cd0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008cda:	d111      	bne.n	8008d00 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ce4:	d004      	beq.n	8008cf0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cee:	d107      	bne.n	8008d00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008cfe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d08:	d10f      	bne.n	8008d2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008d18:	601a      	str	r2, [r3, #0]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008d28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2200      	movs	r2, #0
 8008d36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008d3a:	2303      	movs	r3, #3
 8008d3c:	e017      	b.n	8008d6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d101      	bne.n	8008d48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008d44:	2300      	movs	r3, #0
 8008d46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	689a      	ldr	r2, [r3, #8]
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	4013      	ands	r3, r2
 8008d58:	68ba      	ldr	r2, [r7, #8]
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	bf0c      	ite	eq
 8008d5e:	2301      	moveq	r3, #1
 8008d60:	2300      	movne	r3, #0
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	461a      	mov	r2, r3
 8008d66:	79fb      	ldrb	r3, [r7, #7]
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d19b      	bne.n	8008ca4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008d6c:	2300      	movs	r3, #0
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3720      	adds	r7, #32
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop
 8008d78:	2000004c 	.word	0x2000004c

08008d7c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b08a      	sub	sp, #40	; 0x28
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	60f8      	str	r0, [r7, #12]
 8008d84:	60b9      	str	r1, [r7, #8]
 8008d86:	607a      	str	r2, [r7, #4]
 8008d88:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008d8e:	f7fa fe83 	bl	8003a98 <HAL_GetTick>
 8008d92:	4602      	mov	r2, r0
 8008d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d96:	1a9b      	subs	r3, r3, r2
 8008d98:	683a      	ldr	r2, [r7, #0]
 8008d9a:	4413      	add	r3, r2
 8008d9c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008d9e:	f7fa fe7b 	bl	8003a98 <HAL_GetTick>
 8008da2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	330c      	adds	r3, #12
 8008daa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008dac:	4b3d      	ldr	r3, [pc, #244]	; (8008ea4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	4613      	mov	r3, r2
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	4413      	add	r3, r2
 8008db6:	00da      	lsls	r2, r3, #3
 8008db8:	1ad3      	subs	r3, r2, r3
 8008dba:	0d1b      	lsrs	r3, r3, #20
 8008dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dbe:	fb02 f303 	mul.w	r3, r2, r3
 8008dc2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008dc4:	e060      	b.n	8008e88 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008dcc:	d107      	bne.n	8008dde <SPI_WaitFifoStateUntilTimeout+0x62>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d104      	bne.n	8008dde <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008ddc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008de4:	d050      	beq.n	8008e88 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008de6:	f7fa fe57 	bl	8003a98 <HAL_GetTick>
 8008dea:	4602      	mov	r2, r0
 8008dec:	6a3b      	ldr	r3, [r7, #32]
 8008dee:	1ad3      	subs	r3, r2, r3
 8008df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d902      	bls.n	8008dfc <SPI_WaitFifoStateUntilTimeout+0x80>
 8008df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d13d      	bne.n	8008e78 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	685a      	ldr	r2, [r3, #4]
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008e0a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e14:	d111      	bne.n	8008e3a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e1e:	d004      	beq.n	8008e2a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e28:	d107      	bne.n	8008e3a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e38:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e42:	d10f      	bne.n	8008e64 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e52:	601a      	str	r2, [r3, #0]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e62:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008e74:	2303      	movs	r3, #3
 8008e76:	e010      	b.n	8008e9a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d101      	bne.n	8008e82 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008e82:	69bb      	ldr	r3, [r7, #24]
 8008e84:	3b01      	subs	r3, #1
 8008e86:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	689a      	ldr	r2, [r3, #8]
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	4013      	ands	r3, r2
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d196      	bne.n	8008dc6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3728      	adds	r7, #40	; 0x28
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	2000004c 	.word	0x2000004c

08008ea8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b086      	sub	sp, #24
 8008eac:	af02      	add	r7, sp, #8
 8008eae:	60f8      	str	r0, [r7, #12]
 8008eb0:	60b9      	str	r1, [r7, #8]
 8008eb2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	9300      	str	r3, [sp, #0]
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f7ff ff5b 	bl	8008d7c <SPI_WaitFifoStateUntilTimeout>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d007      	beq.n	8008edc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ed0:	f043 0220 	orr.w	r2, r3, #32
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008ed8:	2303      	movs	r3, #3
 8008eda:	e027      	b.n	8008f2c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	9300      	str	r3, [sp, #0]
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	2180      	movs	r1, #128	; 0x80
 8008ee6:	68f8      	ldr	r0, [r7, #12]
 8008ee8:	f7ff fec0 	bl	8008c6c <SPI_WaitFlagStateUntilTimeout>
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d007      	beq.n	8008f02 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ef6:	f043 0220 	orr.w	r2, r3, #32
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008efe:	2303      	movs	r3, #3
 8008f00:	e014      	b.n	8008f2c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	9300      	str	r3, [sp, #0]
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008f0e:	68f8      	ldr	r0, [r7, #12]
 8008f10:	f7ff ff34 	bl	8008d7c <SPI_WaitFifoStateUntilTimeout>
 8008f14:	4603      	mov	r3, r0
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d007      	beq.n	8008f2a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f1e:	f043 0220 	orr.w	r2, r3, #32
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008f26:	2303      	movs	r3, #3
 8008f28:	e000      	b.n	8008f2c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008f2a:	2300      	movs	r3, #0
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3710      	adds	r7, #16
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b082      	sub	sp, #8
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d101      	bne.n	8008f46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f42:	2301      	movs	r3, #1
 8008f44:	e049      	b.n	8008fda <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d106      	bne.n	8008f60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2200      	movs	r2, #0
 8008f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 f841 	bl	8008fe2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2202      	movs	r2, #2
 8008f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	3304      	adds	r3, #4
 8008f70:	4619      	mov	r1, r3
 8008f72:	4610      	mov	r0, r2
 8008f74:	f000 f9da 	bl	800932c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2201      	movs	r2, #1
 8008f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2201      	movs	r2, #1
 8008f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2201      	movs	r2, #1
 8008fac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008fd8:	2300      	movs	r3, #0
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3708      	adds	r7, #8
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}

08008fe2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008fe2:	b480      	push	{r7}
 8008fe4:	b083      	sub	sp, #12
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008fea:	bf00      	nop
 8008fec:	370c      	adds	r7, #12
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr
	...

08008ff8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b085      	sub	sp, #20
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009006:	b2db      	uxtb	r3, r3
 8009008:	2b01      	cmp	r3, #1
 800900a:	d001      	beq.n	8009010 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800900c:	2301      	movs	r3, #1
 800900e:	e04f      	b.n	80090b0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2202      	movs	r2, #2
 8009014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	68da      	ldr	r2, [r3, #12]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f042 0201 	orr.w	r2, r2, #1
 8009026:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a23      	ldr	r2, [pc, #140]	; (80090bc <HAL_TIM_Base_Start_IT+0xc4>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d01d      	beq.n	800906e <HAL_TIM_Base_Start_IT+0x76>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800903a:	d018      	beq.n	800906e <HAL_TIM_Base_Start_IT+0x76>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a1f      	ldr	r2, [pc, #124]	; (80090c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d013      	beq.n	800906e <HAL_TIM_Base_Start_IT+0x76>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a1e      	ldr	r2, [pc, #120]	; (80090c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d00e      	beq.n	800906e <HAL_TIM_Base_Start_IT+0x76>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a1c      	ldr	r2, [pc, #112]	; (80090c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d009      	beq.n	800906e <HAL_TIM_Base_Start_IT+0x76>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a1b      	ldr	r2, [pc, #108]	; (80090cc <HAL_TIM_Base_Start_IT+0xd4>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d004      	beq.n	800906e <HAL_TIM_Base_Start_IT+0x76>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a19      	ldr	r2, [pc, #100]	; (80090d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d115      	bne.n	800909a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	689a      	ldr	r2, [r3, #8]
 8009074:	4b17      	ldr	r3, [pc, #92]	; (80090d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8009076:	4013      	ands	r3, r2
 8009078:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2b06      	cmp	r3, #6
 800907e:	d015      	beq.n	80090ac <HAL_TIM_Base_Start_IT+0xb4>
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009086:	d011      	beq.n	80090ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f042 0201 	orr.w	r2, r2, #1
 8009096:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009098:	e008      	b.n	80090ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f042 0201 	orr.w	r2, r2, #1
 80090a8:	601a      	str	r2, [r3, #0]
 80090aa:	e000      	b.n	80090ae <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80090ae:	2300      	movs	r3, #0
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3714      	adds	r7, #20
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr
 80090bc:	40012c00 	.word	0x40012c00
 80090c0:	40000400 	.word	0x40000400
 80090c4:	40000800 	.word	0x40000800
 80090c8:	40000c00 	.word	0x40000c00
 80090cc:	40013400 	.word	0x40013400
 80090d0:	40014000 	.word	0x40014000
 80090d4:	00010007 	.word	0x00010007

080090d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	691b      	ldr	r3, [r3, #16]
 80090ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	f003 0302 	and.w	r3, r3, #2
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d020      	beq.n	800913c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f003 0302 	and.w	r3, r3, #2
 8009100:	2b00      	cmp	r3, #0
 8009102:	d01b      	beq.n	800913c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f06f 0202 	mvn.w	r2, #2
 800910c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2201      	movs	r2, #1
 8009112:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	699b      	ldr	r3, [r3, #24]
 800911a:	f003 0303 	and.w	r3, r3, #3
 800911e:	2b00      	cmp	r3, #0
 8009120:	d003      	beq.n	800912a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 f8e4 	bl	80092f0 <HAL_TIM_IC_CaptureCallback>
 8009128:	e005      	b.n	8009136 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 f8d6 	bl	80092dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 f8e7 	bl	8009304 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	f003 0304 	and.w	r3, r3, #4
 8009142:	2b00      	cmp	r3, #0
 8009144:	d020      	beq.n	8009188 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f003 0304 	and.w	r3, r3, #4
 800914c:	2b00      	cmp	r3, #0
 800914e:	d01b      	beq.n	8009188 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f06f 0204 	mvn.w	r2, #4
 8009158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2202      	movs	r2, #2
 800915e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	699b      	ldr	r3, [r3, #24]
 8009166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800916a:	2b00      	cmp	r3, #0
 800916c:	d003      	beq.n	8009176 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 f8be 	bl	80092f0 <HAL_TIM_IC_CaptureCallback>
 8009174:	e005      	b.n	8009182 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 f8b0 	bl	80092dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 f8c1 	bl	8009304 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2200      	movs	r2, #0
 8009186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	f003 0308 	and.w	r3, r3, #8
 800918e:	2b00      	cmp	r3, #0
 8009190:	d020      	beq.n	80091d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f003 0308 	and.w	r3, r3, #8
 8009198:	2b00      	cmp	r3, #0
 800919a:	d01b      	beq.n	80091d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f06f 0208 	mvn.w	r2, #8
 80091a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2204      	movs	r2, #4
 80091aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	69db      	ldr	r3, [r3, #28]
 80091b2:	f003 0303 	and.w	r3, r3, #3
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d003      	beq.n	80091c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 f898 	bl	80092f0 <HAL_TIM_IC_CaptureCallback>
 80091c0:	e005      	b.n	80091ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 f88a 	bl	80092dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 f89b 	bl	8009304 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2200      	movs	r2, #0
 80091d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	f003 0310 	and.w	r3, r3, #16
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d020      	beq.n	8009220 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f003 0310 	and.w	r3, r3, #16
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d01b      	beq.n	8009220 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f06f 0210 	mvn.w	r2, #16
 80091f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2208      	movs	r2, #8
 80091f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	69db      	ldr	r3, [r3, #28]
 80091fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009202:	2b00      	cmp	r3, #0
 8009204:	d003      	beq.n	800920e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f000 f872 	bl	80092f0 <HAL_TIM_IC_CaptureCallback>
 800920c:	e005      	b.n	800921a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 f864 	bl	80092dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 f875 	bl	8009304 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2200      	movs	r2, #0
 800921e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	f003 0301 	and.w	r3, r3, #1
 8009226:	2b00      	cmp	r3, #0
 8009228:	d00c      	beq.n	8009244 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f003 0301 	and.w	r3, r3, #1
 8009230:	2b00      	cmp	r3, #0
 8009232:	d007      	beq.n	8009244 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f06f 0201 	mvn.w	r2, #1
 800923c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f7f9 ff00 	bl	8003044 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800924a:	2b00      	cmp	r3, #0
 800924c:	d00c      	beq.n	8009268 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009254:	2b00      	cmp	r3, #0
 8009256:	d007      	beq.n	8009268 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 f906 	bl	8009474 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800926e:	2b00      	cmp	r3, #0
 8009270:	d00c      	beq.n	800928c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009278:	2b00      	cmp	r3, #0
 800927a:	d007      	beq.n	800928c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 f8fe 	bl	8009488 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009292:	2b00      	cmp	r3, #0
 8009294:	d00c      	beq.n	80092b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800929c:	2b00      	cmp	r3, #0
 800929e:	d007      	beq.n	80092b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80092a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 f834 	bl	8009318 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	f003 0320 	and.w	r3, r3, #32
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d00c      	beq.n	80092d4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f003 0320 	and.w	r3, r3, #32
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d007      	beq.n	80092d4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f06f 0220 	mvn.w	r2, #32
 80092cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 f8c6 	bl	8009460 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80092d4:	bf00      	nop
 80092d6:	3710      	adds	r7, #16
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80092dc:	b480      	push	{r7}
 80092de:	b083      	sub	sp, #12
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80092e4:	bf00      	nop
 80092e6:	370c      	adds	r7, #12
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b083      	sub	sp, #12
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80092f8:	bf00      	nop
 80092fa:	370c      	adds	r7, #12
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800930c:	bf00      	nop
 800930e:	370c      	adds	r7, #12
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr

08009318 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009318:	b480      	push	{r7}
 800931a:	b083      	sub	sp, #12
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009320:	bf00      	nop
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800932c:	b480      	push	{r7}
 800932e:	b085      	sub	sp, #20
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	4a40      	ldr	r2, [pc, #256]	; (8009440 <TIM_Base_SetConfig+0x114>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d013      	beq.n	800936c <TIM_Base_SetConfig+0x40>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800934a:	d00f      	beq.n	800936c <TIM_Base_SetConfig+0x40>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	4a3d      	ldr	r2, [pc, #244]	; (8009444 <TIM_Base_SetConfig+0x118>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d00b      	beq.n	800936c <TIM_Base_SetConfig+0x40>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	4a3c      	ldr	r2, [pc, #240]	; (8009448 <TIM_Base_SetConfig+0x11c>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d007      	beq.n	800936c <TIM_Base_SetConfig+0x40>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	4a3b      	ldr	r2, [pc, #236]	; (800944c <TIM_Base_SetConfig+0x120>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d003      	beq.n	800936c <TIM_Base_SetConfig+0x40>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	4a3a      	ldr	r2, [pc, #232]	; (8009450 <TIM_Base_SetConfig+0x124>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d108      	bne.n	800937e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009372:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	68fa      	ldr	r2, [r7, #12]
 800937a:	4313      	orrs	r3, r2
 800937c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4a2f      	ldr	r2, [pc, #188]	; (8009440 <TIM_Base_SetConfig+0x114>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d01f      	beq.n	80093c6 <TIM_Base_SetConfig+0x9a>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800938c:	d01b      	beq.n	80093c6 <TIM_Base_SetConfig+0x9a>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	4a2c      	ldr	r2, [pc, #176]	; (8009444 <TIM_Base_SetConfig+0x118>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d017      	beq.n	80093c6 <TIM_Base_SetConfig+0x9a>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4a2b      	ldr	r2, [pc, #172]	; (8009448 <TIM_Base_SetConfig+0x11c>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d013      	beq.n	80093c6 <TIM_Base_SetConfig+0x9a>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	4a2a      	ldr	r2, [pc, #168]	; (800944c <TIM_Base_SetConfig+0x120>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d00f      	beq.n	80093c6 <TIM_Base_SetConfig+0x9a>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4a29      	ldr	r2, [pc, #164]	; (8009450 <TIM_Base_SetConfig+0x124>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d00b      	beq.n	80093c6 <TIM_Base_SetConfig+0x9a>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	4a28      	ldr	r2, [pc, #160]	; (8009454 <TIM_Base_SetConfig+0x128>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d007      	beq.n	80093c6 <TIM_Base_SetConfig+0x9a>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4a27      	ldr	r2, [pc, #156]	; (8009458 <TIM_Base_SetConfig+0x12c>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d003      	beq.n	80093c6 <TIM_Base_SetConfig+0x9a>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4a26      	ldr	r2, [pc, #152]	; (800945c <TIM_Base_SetConfig+0x130>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d108      	bne.n	80093d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	68fa      	ldr	r2, [r7, #12]
 80093d4:	4313      	orrs	r3, r2
 80093d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	695b      	ldr	r3, [r3, #20]
 80093e2:	4313      	orrs	r3, r2
 80093e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	68fa      	ldr	r2, [r7, #12]
 80093ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	689a      	ldr	r2, [r3, #8]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	681a      	ldr	r2, [r3, #0]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	4a10      	ldr	r2, [pc, #64]	; (8009440 <TIM_Base_SetConfig+0x114>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d00f      	beq.n	8009424 <TIM_Base_SetConfig+0xf8>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	4a12      	ldr	r2, [pc, #72]	; (8009450 <TIM_Base_SetConfig+0x124>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d00b      	beq.n	8009424 <TIM_Base_SetConfig+0xf8>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	4a11      	ldr	r2, [pc, #68]	; (8009454 <TIM_Base_SetConfig+0x128>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d007      	beq.n	8009424 <TIM_Base_SetConfig+0xf8>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	4a10      	ldr	r2, [pc, #64]	; (8009458 <TIM_Base_SetConfig+0x12c>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d003      	beq.n	8009424 <TIM_Base_SetConfig+0xf8>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	4a0f      	ldr	r2, [pc, #60]	; (800945c <TIM_Base_SetConfig+0x130>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d103      	bne.n	800942c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	691a      	ldr	r2, [r3, #16]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2201      	movs	r2, #1
 8009430:	615a      	str	r2, [r3, #20]
}
 8009432:	bf00      	nop
 8009434:	3714      	adds	r7, #20
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr
 800943e:	bf00      	nop
 8009440:	40012c00 	.word	0x40012c00
 8009444:	40000400 	.word	0x40000400
 8009448:	40000800 	.word	0x40000800
 800944c:	40000c00 	.word	0x40000c00
 8009450:	40013400 	.word	0x40013400
 8009454:	40014000 	.word	0x40014000
 8009458:	40014400 	.word	0x40014400
 800945c:	40014800 	.word	0x40014800

08009460 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009468:	bf00      	nop
 800946a:	370c      	adds	r7, #12
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr

08009474 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009474:	b480      	push	{r7}
 8009476:	b083      	sub	sp, #12
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800947c:	bf00      	nop
 800947e:	370c      	adds	r7, #12
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr

08009488 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009488:	b480      	push	{r7}
 800948a:	b083      	sub	sp, #12
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009490:	bf00      	nop
 8009492:	370c      	adds	r7, #12
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr

0800949c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b082      	sub	sp, #8
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d101      	bne.n	80094ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80094aa:	2301      	movs	r3, #1
 80094ac:	e042      	b.n	8009534 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d106      	bne.n	80094c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2200      	movs	r2, #0
 80094bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f7fa f85f 	bl	8003584 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2224      	movs	r2, #36	; 0x24
 80094ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	681a      	ldr	r2, [r3, #0]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f022 0201 	bic.w	r2, r2, #1
 80094dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d002      	beq.n	80094ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 fef8 	bl	800a2dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 fbf9 	bl	8009ce4 <UART_SetConfig>
 80094f2:	4603      	mov	r3, r0
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	d101      	bne.n	80094fc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80094f8:	2301      	movs	r3, #1
 80094fa:	e01b      	b.n	8009534 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	685a      	ldr	r2, [r3, #4]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800950a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	689a      	ldr	r2, [r3, #8]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800951a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	681a      	ldr	r2, [r3, #0]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f042 0201 	orr.w	r2, r2, #1
 800952a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 ff77 	bl	800a420 <UART_CheckIdleState>
 8009532:	4603      	mov	r3, r0
}
 8009534:	4618      	mov	r0, r3
 8009536:	3708      	adds	r7, #8
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b08a      	sub	sp, #40	; 0x28
 8009540:	af02      	add	r7, sp, #8
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	603b      	str	r3, [r7, #0]
 8009548:	4613      	mov	r3, r2
 800954a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009552:	2b20      	cmp	r3, #32
 8009554:	d17c      	bne.n	8009650 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d002      	beq.n	8009562 <HAL_UART_Transmit+0x26>
 800955c:	88fb      	ldrh	r3, [r7, #6]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d101      	bne.n	8009566 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009562:	2301      	movs	r3, #1
 8009564:	e075      	b.n	8009652 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2200      	movs	r2, #0
 800956a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2221      	movs	r2, #33	; 0x21
 8009572:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009576:	f7fa fa8f 	bl	8003a98 <HAL_GetTick>
 800957a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	88fa      	ldrh	r2, [r7, #6]
 8009580:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	88fa      	ldrh	r2, [r7, #6]
 8009588:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009594:	d108      	bne.n	80095a8 <HAL_UART_Transmit+0x6c>
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	691b      	ldr	r3, [r3, #16]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d104      	bne.n	80095a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800959e:	2300      	movs	r3, #0
 80095a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	61bb      	str	r3, [r7, #24]
 80095a6:	e003      	b.n	80095b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80095ac:	2300      	movs	r3, #0
 80095ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80095b0:	e031      	b.n	8009616 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	9300      	str	r3, [sp, #0]
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	2200      	movs	r2, #0
 80095ba:	2180      	movs	r1, #128	; 0x80
 80095bc:	68f8      	ldr	r0, [r7, #12]
 80095be:	f000 ffd9 	bl	800a574 <UART_WaitOnFlagUntilTimeout>
 80095c2:	4603      	mov	r3, r0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d005      	beq.n	80095d4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2220      	movs	r2, #32
 80095cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80095d0:	2303      	movs	r3, #3
 80095d2:	e03e      	b.n	8009652 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 80095d4:	69fb      	ldr	r3, [r7, #28]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d10b      	bne.n	80095f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80095da:	69bb      	ldr	r3, [r7, #24]
 80095dc:	881a      	ldrh	r2, [r3, #0]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80095e6:	b292      	uxth	r2, r2
 80095e8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80095ea:	69bb      	ldr	r3, [r7, #24]
 80095ec:	3302      	adds	r3, #2
 80095ee:	61bb      	str	r3, [r7, #24]
 80095f0:	e008      	b.n	8009604 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80095f2:	69fb      	ldr	r3, [r7, #28]
 80095f4:	781a      	ldrb	r2, [r3, #0]
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	b292      	uxth	r2, r2
 80095fc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80095fe:	69fb      	ldr	r3, [r7, #28]
 8009600:	3301      	adds	r3, #1
 8009602:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800960a:	b29b      	uxth	r3, r3
 800960c:	3b01      	subs	r3, #1
 800960e:	b29a      	uxth	r2, r3
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800961c:	b29b      	uxth	r3, r3
 800961e:	2b00      	cmp	r3, #0
 8009620:	d1c7      	bne.n	80095b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	9300      	str	r3, [sp, #0]
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	2200      	movs	r2, #0
 800962a:	2140      	movs	r1, #64	; 0x40
 800962c:	68f8      	ldr	r0, [r7, #12]
 800962e:	f000 ffa1 	bl	800a574 <UART_WaitOnFlagUntilTimeout>
 8009632:	4603      	mov	r3, r0
 8009634:	2b00      	cmp	r3, #0
 8009636:	d005      	beq.n	8009644 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2220      	movs	r2, #32
 800963c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8009640:	2303      	movs	r3, #3
 8009642:	e006      	b.n	8009652 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2220      	movs	r2, #32
 8009648:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800964c:	2300      	movs	r3, #0
 800964e:	e000      	b.n	8009652 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8009650:	2302      	movs	r3, #2
  }
}
 8009652:	4618      	mov	r0, r3
 8009654:	3720      	adds	r7, #32
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
	...

0800965c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b0ba      	sub	sp, #232	; 0xe8
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	69db      	ldr	r3, [r3, #28]
 800966a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	689b      	ldr	r3, [r3, #8]
 800967e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009682:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009686:	f640 030f 	movw	r3, #2063	; 0x80f
 800968a:	4013      	ands	r3, r2
 800968c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009690:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009694:	2b00      	cmp	r3, #0
 8009696:	d11b      	bne.n	80096d0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800969c:	f003 0320 	and.w	r3, r3, #32
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d015      	beq.n	80096d0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80096a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096a8:	f003 0320 	and.w	r3, r3, #32
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d105      	bne.n	80096bc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80096b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d009      	beq.n	80096d0 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	f000 82e3 	beq.w	8009c8c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	4798      	blx	r3
      }
      return;
 80096ce:	e2dd      	b.n	8009c8c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 80096d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	f000 8123 	beq.w	8009920 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80096da:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80096de:	4b8d      	ldr	r3, [pc, #564]	; (8009914 <HAL_UART_IRQHandler+0x2b8>)
 80096e0:	4013      	ands	r3, r2
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d106      	bne.n	80096f4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80096e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80096ea:	4b8b      	ldr	r3, [pc, #556]	; (8009918 <HAL_UART_IRQHandler+0x2bc>)
 80096ec:	4013      	ands	r3, r2
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	f000 8116 	beq.w	8009920 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80096f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096f8:	f003 0301 	and.w	r3, r3, #1
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d011      	beq.n	8009724 <HAL_UART_IRQHandler+0xc8>
 8009700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009708:	2b00      	cmp	r3, #0
 800970a:	d00b      	beq.n	8009724 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2201      	movs	r2, #1
 8009712:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800971a:	f043 0201 	orr.w	r2, r3, #1
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009728:	f003 0302 	and.w	r3, r3, #2
 800972c:	2b00      	cmp	r3, #0
 800972e:	d011      	beq.n	8009754 <HAL_UART_IRQHandler+0xf8>
 8009730:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009734:	f003 0301 	and.w	r3, r3, #1
 8009738:	2b00      	cmp	r3, #0
 800973a:	d00b      	beq.n	8009754 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	2202      	movs	r2, #2
 8009742:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800974a:	f043 0204 	orr.w	r2, r3, #4
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009758:	f003 0304 	and.w	r3, r3, #4
 800975c:	2b00      	cmp	r3, #0
 800975e:	d011      	beq.n	8009784 <HAL_UART_IRQHandler+0x128>
 8009760:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009764:	f003 0301 	and.w	r3, r3, #1
 8009768:	2b00      	cmp	r3, #0
 800976a:	d00b      	beq.n	8009784 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	2204      	movs	r2, #4
 8009772:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800977a:	f043 0202 	orr.w	r2, r3, #2
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009788:	f003 0308 	and.w	r3, r3, #8
 800978c:	2b00      	cmp	r3, #0
 800978e:	d017      	beq.n	80097c0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009794:	f003 0320 	and.w	r3, r3, #32
 8009798:	2b00      	cmp	r3, #0
 800979a:	d105      	bne.n	80097a8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800979c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80097a0:	4b5c      	ldr	r3, [pc, #368]	; (8009914 <HAL_UART_IRQHandler+0x2b8>)
 80097a2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d00b      	beq.n	80097c0 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	2208      	movs	r2, #8
 80097ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097b6:	f043 0208 	orr.w	r2, r3, #8
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80097c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d012      	beq.n	80097f2 <HAL_UART_IRQHandler+0x196>
 80097cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d00c      	beq.n	80097f2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80097e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097e8:	f043 0220 	orr.w	r2, r3, #32
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	f000 8249 	beq.w	8009c90 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80097fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009802:	f003 0320 	and.w	r3, r3, #32
 8009806:	2b00      	cmp	r3, #0
 8009808:	d013      	beq.n	8009832 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800980a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800980e:	f003 0320 	and.w	r3, r3, #32
 8009812:	2b00      	cmp	r3, #0
 8009814:	d105      	bne.n	8009822 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009816:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800981a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800981e:	2b00      	cmp	r3, #0
 8009820:	d007      	beq.n	8009832 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009826:	2b00      	cmp	r3, #0
 8009828:	d003      	beq.n	8009832 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009838:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	689b      	ldr	r3, [r3, #8]
 8009842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009846:	2b40      	cmp	r3, #64	; 0x40
 8009848:	d005      	beq.n	8009856 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800984a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800984e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009852:	2b00      	cmp	r3, #0
 8009854:	d054      	beq.n	8009900 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 fef3 	bl	800a642 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	689b      	ldr	r3, [r3, #8]
 8009862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009866:	2b40      	cmp	r3, #64	; 0x40
 8009868:	d146      	bne.n	80098f8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	3308      	adds	r3, #8
 8009870:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009874:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009878:	e853 3f00 	ldrex	r3, [r3]
 800987c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009880:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009884:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009888:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	3308      	adds	r3, #8
 8009892:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009896:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800989a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800989e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80098a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80098a6:	e841 2300 	strex	r3, r2, [r1]
 80098aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80098ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d1d9      	bne.n	800986a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d017      	beq.n	80098f0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80098c6:	4a15      	ldr	r2, [pc, #84]	; (800991c <HAL_UART_IRQHandler+0x2c0>)
 80098c8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80098d0:	4618      	mov	r0, r3
 80098d2:	f7fb fb60 	bl	8004f96 <HAL_DMA_Abort_IT>
 80098d6:	4603      	mov	r3, r0
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d019      	beq.n	8009910 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80098e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098e4:	687a      	ldr	r2, [r7, #4]
 80098e6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80098ea:	4610      	mov	r0, r2
 80098ec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098ee:	e00f      	b.n	8009910 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 f9e1 	bl	8009cb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098f6:	e00b      	b.n	8009910 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 f9dd 	bl	8009cb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098fe:	e007      	b.n	8009910 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 f9d9 	bl	8009cb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2200      	movs	r2, #0
 800990a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800990e:	e1bf      	b.n	8009c90 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009910:	bf00      	nop
    return;
 8009912:	e1bd      	b.n	8009c90 <HAL_UART_IRQHandler+0x634>
 8009914:	10000001 	.word	0x10000001
 8009918:	04000120 	.word	0x04000120
 800991c:	0800a70f 	.word	0x0800a70f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009924:	2b01      	cmp	r3, #1
 8009926:	f040 8153 	bne.w	8009bd0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800992a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800992e:	f003 0310 	and.w	r3, r3, #16
 8009932:	2b00      	cmp	r3, #0
 8009934:	f000 814c 	beq.w	8009bd0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800993c:	f003 0310 	and.w	r3, r3, #16
 8009940:	2b00      	cmp	r3, #0
 8009942:	f000 8145 	beq.w	8009bd0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	2210      	movs	r2, #16
 800994c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	689b      	ldr	r3, [r3, #8]
 8009954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009958:	2b40      	cmp	r3, #64	; 0x40
 800995a:	f040 80bb 	bne.w	8009ad4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800996c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009970:	2b00      	cmp	r3, #0
 8009972:	f000 818f 	beq.w	8009c94 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800997c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009980:	429a      	cmp	r2, r3
 8009982:	f080 8187 	bcs.w	8009c94 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800998c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f003 0320 	and.w	r3, r3, #32
 800999e:	2b00      	cmp	r3, #0
 80099a0:	f040 8087 	bne.w	8009ab2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80099b0:	e853 3f00 	ldrex	r3, [r3]
 80099b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80099b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80099bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	461a      	mov	r2, r3
 80099ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80099ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80099d2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80099da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80099de:	e841 2300 	strex	r3, r2, [r1]
 80099e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80099e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d1da      	bne.n	80099a4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	3308      	adds	r3, #8
 80099f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80099f8:	e853 3f00 	ldrex	r3, [r3]
 80099fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80099fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009a00:	f023 0301 	bic.w	r3, r3, #1
 8009a04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	3308      	adds	r3, #8
 8009a0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009a12:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009a16:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a18:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009a1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009a1e:	e841 2300 	strex	r3, r2, [r1]
 8009a22:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009a24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d1e1      	bne.n	80099ee <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	3308      	adds	r3, #8
 8009a30:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a34:	e853 3f00 	ldrex	r3, [r3]
 8009a38:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009a3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	3308      	adds	r3, #8
 8009a4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009a4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009a50:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a52:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009a54:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009a56:	e841 2300 	strex	r3, r2, [r1]
 8009a5a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009a5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d1e3      	bne.n	8009a2a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2220      	movs	r2, #32
 8009a66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a78:	e853 3f00 	ldrex	r3, [r3]
 8009a7c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a80:	f023 0310 	bic.w	r3, r3, #16
 8009a84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009a92:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a94:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009a98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009a9a:	e841 2300 	strex	r3, r2, [r1]
 8009a9e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009aa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d1e4      	bne.n	8009a70 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009aac:	4618      	mov	r0, r3
 8009aae:	f7fb fa16 	bl	8004ede <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2202      	movs	r2, #2
 8009ab6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	1ad3      	subs	r3, r2, r3
 8009ac8:	b29b      	uxth	r3, r3
 8009aca:	4619      	mov	r1, r3
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 f8fd 	bl	8009ccc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009ad2:	e0df      	b.n	8009c94 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	1ad3      	subs	r3, r2, r3
 8009ae4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	f000 80d1 	beq.w	8009c98 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8009af6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	f000 80cc 	beq.w	8009c98 <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b08:	e853 3f00 	ldrex	r3, [r3]
 8009b0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	461a      	mov	r2, r3
 8009b1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009b22:	647b      	str	r3, [r7, #68]	; 0x44
 8009b24:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b2a:	e841 2300 	strex	r3, r2, [r1]
 8009b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d1e4      	bne.n	8009b00 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	3308      	adds	r3, #8
 8009b3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b40:	e853 3f00 	ldrex	r3, [r3]
 8009b44:	623b      	str	r3, [r7, #32]
   return(result);
 8009b46:	6a3b      	ldr	r3, [r7, #32]
 8009b48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b4c:	f023 0301 	bic.w	r3, r3, #1
 8009b50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	3308      	adds	r3, #8
 8009b5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009b5e:	633a      	str	r2, [r7, #48]	; 0x30
 8009b60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b66:	e841 2300 	strex	r3, r2, [r1]
 8009b6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d1e1      	bne.n	8009b36 <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2220      	movs	r2, #32
 8009b76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2200      	movs	r2, #0
 8009b84:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	e853 3f00 	ldrex	r3, [r3]
 8009b92:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f023 0310 	bic.w	r3, r3, #16
 8009b9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009ba8:	61fb      	str	r3, [r7, #28]
 8009baa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bac:	69b9      	ldr	r1, [r7, #24]
 8009bae:	69fa      	ldr	r2, [r7, #28]
 8009bb0:	e841 2300 	strex	r3, r2, [r1]
 8009bb4:	617b      	str	r3, [r7, #20]
   return(result);
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d1e4      	bne.n	8009b86 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2202      	movs	r2, #2
 8009bc0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009bc2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f000 f87f 	bl	8009ccc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009bce:	e063      	b.n	8009c98 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d00e      	beq.n	8009bfa <HAL_UART_IRQHandler+0x59e>
 8009bdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009be0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d008      	beq.n	8009bfa <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009bf0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 fdcc 	bl	800a790 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009bf8:	e051      	b.n	8009c9e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d014      	beq.n	8009c30 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009c06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d105      	bne.n	8009c1e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009c12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d008      	beq.n	8009c30 <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d03a      	beq.n	8009c9c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	4798      	blx	r3
    }
    return;
 8009c2e:	e035      	b.n	8009c9c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d009      	beq.n	8009c50 <HAL_UART_IRQHandler+0x5f4>
 8009c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d003      	beq.n	8009c50 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 fd76 	bl	800a73a <UART_EndTransmit_IT>
    return;
 8009c4e:	e026      	b.n	8009c9e <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d009      	beq.n	8009c70 <HAL_UART_IRQHandler+0x614>
 8009c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c60:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d003      	beq.n	8009c70 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 fda5 	bl	800a7b8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c6e:	e016      	b.n	8009c9e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d010      	beq.n	8009c9e <HAL_UART_IRQHandler+0x642>
 8009c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	da0c      	bge.n	8009c9e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 fd8d 	bl	800a7a4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c8a:	e008      	b.n	8009c9e <HAL_UART_IRQHandler+0x642>
      return;
 8009c8c:	bf00      	nop
 8009c8e:	e006      	b.n	8009c9e <HAL_UART_IRQHandler+0x642>
    return;
 8009c90:	bf00      	nop
 8009c92:	e004      	b.n	8009c9e <HAL_UART_IRQHandler+0x642>
      return;
 8009c94:	bf00      	nop
 8009c96:	e002      	b.n	8009c9e <HAL_UART_IRQHandler+0x642>
      return;
 8009c98:	bf00      	nop
 8009c9a:	e000      	b.n	8009c9e <HAL_UART_IRQHandler+0x642>
    return;
 8009c9c:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8009c9e:	37e8      	adds	r7, #232	; 0xe8
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b083      	sub	sp, #12
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009cac:	bf00      	nop
 8009cae:	370c      	adds	r7, #12
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb6:	4770      	bx	lr

08009cb8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b083      	sub	sp, #12
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009cc0:	bf00      	nop
 8009cc2:	370c      	adds	r7, #12
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr

08009ccc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b083      	sub	sp, #12
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	460b      	mov	r3, r1
 8009cd6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009cd8:	bf00      	nop
 8009cda:	370c      	adds	r7, #12
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr

08009ce4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ce8:	b08c      	sub	sp, #48	; 0x30
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	689a      	ldr	r2, [r3, #8]
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	691b      	ldr	r3, [r3, #16]
 8009cfc:	431a      	orrs	r2, r3
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	695b      	ldr	r3, [r3, #20]
 8009d02:	431a      	orrs	r2, r3
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	69db      	ldr	r3, [r3, #28]
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	4baa      	ldr	r3, [pc, #680]	; (8009fbc <UART_SetConfig+0x2d8>)
 8009d14:	4013      	ands	r3, r2
 8009d16:	697a      	ldr	r2, [r7, #20]
 8009d18:	6812      	ldr	r2, [r2, #0]
 8009d1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d1c:	430b      	orrs	r3, r1
 8009d1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	68da      	ldr	r2, [r3, #12]
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	430a      	orrs	r2, r1
 8009d34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	699b      	ldr	r3, [r3, #24]
 8009d3a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a9f      	ldr	r2, [pc, #636]	; (8009fc0 <UART_SetConfig+0x2dc>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d004      	beq.n	8009d50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	6a1b      	ldr	r3, [r3, #32]
 8009d4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	689b      	ldr	r3, [r3, #8]
 8009d56:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009d5a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009d5e:	697a      	ldr	r2, [r7, #20]
 8009d60:	6812      	ldr	r2, [r2, #0]
 8009d62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d64:	430b      	orrs	r3, r1
 8009d66:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d6e:	f023 010f 	bic.w	r1, r3, #15
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	430a      	orrs	r2, r1
 8009d7c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4a90      	ldr	r2, [pc, #576]	; (8009fc4 <UART_SetConfig+0x2e0>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d125      	bne.n	8009dd4 <UART_SetConfig+0xf0>
 8009d88:	4b8f      	ldr	r3, [pc, #572]	; (8009fc8 <UART_SetConfig+0x2e4>)
 8009d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d8e:	f003 0303 	and.w	r3, r3, #3
 8009d92:	2b03      	cmp	r3, #3
 8009d94:	d81a      	bhi.n	8009dcc <UART_SetConfig+0xe8>
 8009d96:	a201      	add	r2, pc, #4	; (adr r2, 8009d9c <UART_SetConfig+0xb8>)
 8009d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d9c:	08009dad 	.word	0x08009dad
 8009da0:	08009dbd 	.word	0x08009dbd
 8009da4:	08009db5 	.word	0x08009db5
 8009da8:	08009dc5 	.word	0x08009dc5
 8009dac:	2301      	movs	r3, #1
 8009dae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009db2:	e116      	b.n	8009fe2 <UART_SetConfig+0x2fe>
 8009db4:	2302      	movs	r3, #2
 8009db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009dba:	e112      	b.n	8009fe2 <UART_SetConfig+0x2fe>
 8009dbc:	2304      	movs	r3, #4
 8009dbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009dc2:	e10e      	b.n	8009fe2 <UART_SetConfig+0x2fe>
 8009dc4:	2308      	movs	r3, #8
 8009dc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009dca:	e10a      	b.n	8009fe2 <UART_SetConfig+0x2fe>
 8009dcc:	2310      	movs	r3, #16
 8009dce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009dd2:	e106      	b.n	8009fe2 <UART_SetConfig+0x2fe>
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4a7c      	ldr	r2, [pc, #496]	; (8009fcc <UART_SetConfig+0x2e8>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d138      	bne.n	8009e50 <UART_SetConfig+0x16c>
 8009dde:	4b7a      	ldr	r3, [pc, #488]	; (8009fc8 <UART_SetConfig+0x2e4>)
 8009de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009de4:	f003 030c 	and.w	r3, r3, #12
 8009de8:	2b0c      	cmp	r3, #12
 8009dea:	d82d      	bhi.n	8009e48 <UART_SetConfig+0x164>
 8009dec:	a201      	add	r2, pc, #4	; (adr r2, 8009df4 <UART_SetConfig+0x110>)
 8009dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df2:	bf00      	nop
 8009df4:	08009e29 	.word	0x08009e29
 8009df8:	08009e49 	.word	0x08009e49
 8009dfc:	08009e49 	.word	0x08009e49
 8009e00:	08009e49 	.word	0x08009e49
 8009e04:	08009e39 	.word	0x08009e39
 8009e08:	08009e49 	.word	0x08009e49
 8009e0c:	08009e49 	.word	0x08009e49
 8009e10:	08009e49 	.word	0x08009e49
 8009e14:	08009e31 	.word	0x08009e31
 8009e18:	08009e49 	.word	0x08009e49
 8009e1c:	08009e49 	.word	0x08009e49
 8009e20:	08009e49 	.word	0x08009e49
 8009e24:	08009e41 	.word	0x08009e41
 8009e28:	2300      	movs	r3, #0
 8009e2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e2e:	e0d8      	b.n	8009fe2 <UART_SetConfig+0x2fe>
 8009e30:	2302      	movs	r3, #2
 8009e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e36:	e0d4      	b.n	8009fe2 <UART_SetConfig+0x2fe>
 8009e38:	2304      	movs	r3, #4
 8009e3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e3e:	e0d0      	b.n	8009fe2 <UART_SetConfig+0x2fe>
 8009e40:	2308      	movs	r3, #8
 8009e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e46:	e0cc      	b.n	8009fe2 <UART_SetConfig+0x2fe>
 8009e48:	2310      	movs	r3, #16
 8009e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e4e:	e0c8      	b.n	8009fe2 <UART_SetConfig+0x2fe>
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4a5e      	ldr	r2, [pc, #376]	; (8009fd0 <UART_SetConfig+0x2ec>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d125      	bne.n	8009ea6 <UART_SetConfig+0x1c2>
 8009e5a:	4b5b      	ldr	r3, [pc, #364]	; (8009fc8 <UART_SetConfig+0x2e4>)
 8009e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e60:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009e64:	2b30      	cmp	r3, #48	; 0x30
 8009e66:	d016      	beq.n	8009e96 <UART_SetConfig+0x1b2>
 8009e68:	2b30      	cmp	r3, #48	; 0x30
 8009e6a:	d818      	bhi.n	8009e9e <UART_SetConfig+0x1ba>
 8009e6c:	2b20      	cmp	r3, #32
 8009e6e:	d00a      	beq.n	8009e86 <UART_SetConfig+0x1a2>
 8009e70:	2b20      	cmp	r3, #32
 8009e72:	d814      	bhi.n	8009e9e <UART_SetConfig+0x1ba>
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d002      	beq.n	8009e7e <UART_SetConfig+0x19a>
 8009e78:	2b10      	cmp	r3, #16
 8009e7a:	d008      	beq.n	8009e8e <UART_SetConfig+0x1aa>
 8009e7c:	e00f      	b.n	8009e9e <UART_SetConfig+0x1ba>
 8009e7e:	2300      	movs	r3, #0
 8009e80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e84:	e0ad      	b.n	8009fe2 <UART_SetConfig+0x2fe>
 8009e86:	2302      	movs	r3, #2
 8009e88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e8c:	e0a9      	b.n	8009fe2 <UART_SetConfig+0x2fe>
 8009e8e:	2304      	movs	r3, #4
 8009e90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e94:	e0a5      	b.n	8009fe2 <UART_SetConfig+0x2fe>
 8009e96:	2308      	movs	r3, #8
 8009e98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e9c:	e0a1      	b.n	8009fe2 <UART_SetConfig+0x2fe>
 8009e9e:	2310      	movs	r3, #16
 8009ea0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ea4:	e09d      	b.n	8009fe2 <UART_SetConfig+0x2fe>
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a4a      	ldr	r2, [pc, #296]	; (8009fd4 <UART_SetConfig+0x2f0>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d125      	bne.n	8009efc <UART_SetConfig+0x218>
 8009eb0:	4b45      	ldr	r3, [pc, #276]	; (8009fc8 <UART_SetConfig+0x2e4>)
 8009eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eb6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009eba:	2bc0      	cmp	r3, #192	; 0xc0
 8009ebc:	d016      	beq.n	8009eec <UART_SetConfig+0x208>
 8009ebe:	2bc0      	cmp	r3, #192	; 0xc0
 8009ec0:	d818      	bhi.n	8009ef4 <UART_SetConfig+0x210>
 8009ec2:	2b80      	cmp	r3, #128	; 0x80
 8009ec4:	d00a      	beq.n	8009edc <UART_SetConfig+0x1f8>
 8009ec6:	2b80      	cmp	r3, #128	; 0x80
 8009ec8:	d814      	bhi.n	8009ef4 <UART_SetConfig+0x210>
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d002      	beq.n	8009ed4 <UART_SetConfig+0x1f0>
 8009ece:	2b40      	cmp	r3, #64	; 0x40
 8009ed0:	d008      	beq.n	8009ee4 <UART_SetConfig+0x200>
 8009ed2:	e00f      	b.n	8009ef4 <UART_SetConfig+0x210>
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009eda:	e082      	b.n	8009fe2 <UART_SetConfig+0x2fe>
 8009edc:	2302      	movs	r3, #2
 8009ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ee2:	e07e      	b.n	8009fe2 <UART_SetConfig+0x2fe>
 8009ee4:	2304      	movs	r3, #4
 8009ee6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009eea:	e07a      	b.n	8009fe2 <UART_SetConfig+0x2fe>
 8009eec:	2308      	movs	r3, #8
 8009eee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ef2:	e076      	b.n	8009fe2 <UART_SetConfig+0x2fe>
 8009ef4:	2310      	movs	r3, #16
 8009ef6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009efa:	e072      	b.n	8009fe2 <UART_SetConfig+0x2fe>
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4a35      	ldr	r2, [pc, #212]	; (8009fd8 <UART_SetConfig+0x2f4>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d12a      	bne.n	8009f5c <UART_SetConfig+0x278>
 8009f06:	4b30      	ldr	r3, [pc, #192]	; (8009fc8 <UART_SetConfig+0x2e4>)
 8009f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f14:	d01a      	beq.n	8009f4c <UART_SetConfig+0x268>
 8009f16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f1a:	d81b      	bhi.n	8009f54 <UART_SetConfig+0x270>
 8009f1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f20:	d00c      	beq.n	8009f3c <UART_SetConfig+0x258>
 8009f22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f26:	d815      	bhi.n	8009f54 <UART_SetConfig+0x270>
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d003      	beq.n	8009f34 <UART_SetConfig+0x250>
 8009f2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f30:	d008      	beq.n	8009f44 <UART_SetConfig+0x260>
 8009f32:	e00f      	b.n	8009f54 <UART_SetConfig+0x270>
 8009f34:	2300      	movs	r3, #0
 8009f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f3a:	e052      	b.n	8009fe2 <UART_SetConfig+0x2fe>
 8009f3c:	2302      	movs	r3, #2
 8009f3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f42:	e04e      	b.n	8009fe2 <UART_SetConfig+0x2fe>
 8009f44:	2304      	movs	r3, #4
 8009f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f4a:	e04a      	b.n	8009fe2 <UART_SetConfig+0x2fe>
 8009f4c:	2308      	movs	r3, #8
 8009f4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f52:	e046      	b.n	8009fe2 <UART_SetConfig+0x2fe>
 8009f54:	2310      	movs	r3, #16
 8009f56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f5a:	e042      	b.n	8009fe2 <UART_SetConfig+0x2fe>
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a17      	ldr	r2, [pc, #92]	; (8009fc0 <UART_SetConfig+0x2dc>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d13a      	bne.n	8009fdc <UART_SetConfig+0x2f8>
 8009f66:	4b18      	ldr	r3, [pc, #96]	; (8009fc8 <UART_SetConfig+0x2e4>)
 8009f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009f70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009f74:	d01a      	beq.n	8009fac <UART_SetConfig+0x2c8>
 8009f76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009f7a:	d81b      	bhi.n	8009fb4 <UART_SetConfig+0x2d0>
 8009f7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f80:	d00c      	beq.n	8009f9c <UART_SetConfig+0x2b8>
 8009f82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f86:	d815      	bhi.n	8009fb4 <UART_SetConfig+0x2d0>
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d003      	beq.n	8009f94 <UART_SetConfig+0x2b0>
 8009f8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f90:	d008      	beq.n	8009fa4 <UART_SetConfig+0x2c0>
 8009f92:	e00f      	b.n	8009fb4 <UART_SetConfig+0x2d0>
 8009f94:	2300      	movs	r3, #0
 8009f96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f9a:	e022      	b.n	8009fe2 <UART_SetConfig+0x2fe>
 8009f9c:	2302      	movs	r3, #2
 8009f9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009fa2:	e01e      	b.n	8009fe2 <UART_SetConfig+0x2fe>
 8009fa4:	2304      	movs	r3, #4
 8009fa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009faa:	e01a      	b.n	8009fe2 <UART_SetConfig+0x2fe>
 8009fac:	2308      	movs	r3, #8
 8009fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009fb2:	e016      	b.n	8009fe2 <UART_SetConfig+0x2fe>
 8009fb4:	2310      	movs	r3, #16
 8009fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009fba:	e012      	b.n	8009fe2 <UART_SetConfig+0x2fe>
 8009fbc:	cfff69f3 	.word	0xcfff69f3
 8009fc0:	40008000 	.word	0x40008000
 8009fc4:	40013800 	.word	0x40013800
 8009fc8:	40021000 	.word	0x40021000
 8009fcc:	40004400 	.word	0x40004400
 8009fd0:	40004800 	.word	0x40004800
 8009fd4:	40004c00 	.word	0x40004c00
 8009fd8:	40005000 	.word	0x40005000
 8009fdc:	2310      	movs	r3, #16
 8009fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	4aae      	ldr	r2, [pc, #696]	; (800a2a0 <UART_SetConfig+0x5bc>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	f040 8097 	bne.w	800a11c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009fee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009ff2:	2b08      	cmp	r3, #8
 8009ff4:	d823      	bhi.n	800a03e <UART_SetConfig+0x35a>
 8009ff6:	a201      	add	r2, pc, #4	; (adr r2, 8009ffc <UART_SetConfig+0x318>)
 8009ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ffc:	0800a021 	.word	0x0800a021
 800a000:	0800a03f 	.word	0x0800a03f
 800a004:	0800a029 	.word	0x0800a029
 800a008:	0800a03f 	.word	0x0800a03f
 800a00c:	0800a02f 	.word	0x0800a02f
 800a010:	0800a03f 	.word	0x0800a03f
 800a014:	0800a03f 	.word	0x0800a03f
 800a018:	0800a03f 	.word	0x0800a03f
 800a01c:	0800a037 	.word	0x0800a037
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a020:	f7fd fdaa 	bl	8007b78 <HAL_RCC_GetPCLK1Freq>
 800a024:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a026:	e010      	b.n	800a04a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a028:	4b9e      	ldr	r3, [pc, #632]	; (800a2a4 <UART_SetConfig+0x5c0>)
 800a02a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a02c:	e00d      	b.n	800a04a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a02e:	f7fd fd0b 	bl	8007a48 <HAL_RCC_GetSysClockFreq>
 800a032:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a034:	e009      	b.n	800a04a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a03a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a03c:	e005      	b.n	800a04a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a03e:	2300      	movs	r3, #0
 800a040:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a042:	2301      	movs	r3, #1
 800a044:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a048:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	f000 8130 	beq.w	800a2b2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a056:	4a94      	ldr	r2, [pc, #592]	; (800a2a8 <UART_SetConfig+0x5c4>)
 800a058:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a05c:	461a      	mov	r2, r3
 800a05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a060:	fbb3 f3f2 	udiv	r3, r3, r2
 800a064:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	685a      	ldr	r2, [r3, #4]
 800a06a:	4613      	mov	r3, r2
 800a06c:	005b      	lsls	r3, r3, #1
 800a06e:	4413      	add	r3, r2
 800a070:	69ba      	ldr	r2, [r7, #24]
 800a072:	429a      	cmp	r2, r3
 800a074:	d305      	bcc.n	800a082 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a07c:	69ba      	ldr	r2, [r7, #24]
 800a07e:	429a      	cmp	r2, r3
 800a080:	d903      	bls.n	800a08a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a082:	2301      	movs	r3, #1
 800a084:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a088:	e113      	b.n	800a2b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08c:	2200      	movs	r2, #0
 800a08e:	60bb      	str	r3, [r7, #8]
 800a090:	60fa      	str	r2, [r7, #12]
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a096:	4a84      	ldr	r2, [pc, #528]	; (800a2a8 <UART_SetConfig+0x5c4>)
 800a098:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a09c:	b29b      	uxth	r3, r3
 800a09e:	2200      	movs	r2, #0
 800a0a0:	603b      	str	r3, [r7, #0]
 800a0a2:	607a      	str	r2, [r7, #4]
 800a0a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a0ac:	f7f6 f8b0 	bl	8000210 <__aeabi_uldivmod>
 800a0b0:	4602      	mov	r2, r0
 800a0b2:	460b      	mov	r3, r1
 800a0b4:	4610      	mov	r0, r2
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	f04f 0200 	mov.w	r2, #0
 800a0bc:	f04f 0300 	mov.w	r3, #0
 800a0c0:	020b      	lsls	r3, r1, #8
 800a0c2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a0c6:	0202      	lsls	r2, r0, #8
 800a0c8:	6979      	ldr	r1, [r7, #20]
 800a0ca:	6849      	ldr	r1, [r1, #4]
 800a0cc:	0849      	lsrs	r1, r1, #1
 800a0ce:	2000      	movs	r0, #0
 800a0d0:	460c      	mov	r4, r1
 800a0d2:	4605      	mov	r5, r0
 800a0d4:	eb12 0804 	adds.w	r8, r2, r4
 800a0d8:	eb43 0905 	adc.w	r9, r3, r5
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	469a      	mov	sl, r3
 800a0e4:	4693      	mov	fp, r2
 800a0e6:	4652      	mov	r2, sl
 800a0e8:	465b      	mov	r3, fp
 800a0ea:	4640      	mov	r0, r8
 800a0ec:	4649      	mov	r1, r9
 800a0ee:	f7f6 f88f 	bl	8000210 <__aeabi_uldivmod>
 800a0f2:	4602      	mov	r2, r0
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	4613      	mov	r3, r2
 800a0f8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a0fa:	6a3b      	ldr	r3, [r7, #32]
 800a0fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a100:	d308      	bcc.n	800a114 <UART_SetConfig+0x430>
 800a102:	6a3b      	ldr	r3, [r7, #32]
 800a104:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a108:	d204      	bcs.n	800a114 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	6a3a      	ldr	r2, [r7, #32]
 800a110:	60da      	str	r2, [r3, #12]
 800a112:	e0ce      	b.n	800a2b2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a114:	2301      	movs	r3, #1
 800a116:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a11a:	e0ca      	b.n	800a2b2 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	69db      	ldr	r3, [r3, #28]
 800a120:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a124:	d166      	bne.n	800a1f4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a126:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a12a:	2b08      	cmp	r3, #8
 800a12c:	d827      	bhi.n	800a17e <UART_SetConfig+0x49a>
 800a12e:	a201      	add	r2, pc, #4	; (adr r2, 800a134 <UART_SetConfig+0x450>)
 800a130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a134:	0800a159 	.word	0x0800a159
 800a138:	0800a161 	.word	0x0800a161
 800a13c:	0800a169 	.word	0x0800a169
 800a140:	0800a17f 	.word	0x0800a17f
 800a144:	0800a16f 	.word	0x0800a16f
 800a148:	0800a17f 	.word	0x0800a17f
 800a14c:	0800a17f 	.word	0x0800a17f
 800a150:	0800a17f 	.word	0x0800a17f
 800a154:	0800a177 	.word	0x0800a177
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a158:	f7fd fd0e 	bl	8007b78 <HAL_RCC_GetPCLK1Freq>
 800a15c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a15e:	e014      	b.n	800a18a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a160:	f7fd fd20 	bl	8007ba4 <HAL_RCC_GetPCLK2Freq>
 800a164:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a166:	e010      	b.n	800a18a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a168:	4b4e      	ldr	r3, [pc, #312]	; (800a2a4 <UART_SetConfig+0x5c0>)
 800a16a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a16c:	e00d      	b.n	800a18a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a16e:	f7fd fc6b 	bl	8007a48 <HAL_RCC_GetSysClockFreq>
 800a172:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a174:	e009      	b.n	800a18a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a176:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a17a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a17c:	e005      	b.n	800a18a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a17e:	2300      	movs	r3, #0
 800a180:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a182:	2301      	movs	r3, #1
 800a184:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a188:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	f000 8090 	beq.w	800a2b2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a196:	4a44      	ldr	r2, [pc, #272]	; (800a2a8 <UART_SetConfig+0x5c4>)
 800a198:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a19c:	461a      	mov	r2, r3
 800a19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1a4:	005a      	lsls	r2, r3, #1
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	085b      	lsrs	r3, r3, #1
 800a1ac:	441a      	add	r2, r3
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1b6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1b8:	6a3b      	ldr	r3, [r7, #32]
 800a1ba:	2b0f      	cmp	r3, #15
 800a1bc:	d916      	bls.n	800a1ec <UART_SetConfig+0x508>
 800a1be:	6a3b      	ldr	r3, [r7, #32]
 800a1c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1c4:	d212      	bcs.n	800a1ec <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a1c6:	6a3b      	ldr	r3, [r7, #32]
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	f023 030f 	bic.w	r3, r3, #15
 800a1ce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a1d0:	6a3b      	ldr	r3, [r7, #32]
 800a1d2:	085b      	lsrs	r3, r3, #1
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	f003 0307 	and.w	r3, r3, #7
 800a1da:	b29a      	uxth	r2, r3
 800a1dc:	8bfb      	ldrh	r3, [r7, #30]
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	8bfa      	ldrh	r2, [r7, #30]
 800a1e8:	60da      	str	r2, [r3, #12]
 800a1ea:	e062      	b.n	800a2b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a1f2:	e05e      	b.n	800a2b2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a1f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a1f8:	2b08      	cmp	r3, #8
 800a1fa:	d828      	bhi.n	800a24e <UART_SetConfig+0x56a>
 800a1fc:	a201      	add	r2, pc, #4	; (adr r2, 800a204 <UART_SetConfig+0x520>)
 800a1fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a202:	bf00      	nop
 800a204:	0800a229 	.word	0x0800a229
 800a208:	0800a231 	.word	0x0800a231
 800a20c:	0800a239 	.word	0x0800a239
 800a210:	0800a24f 	.word	0x0800a24f
 800a214:	0800a23f 	.word	0x0800a23f
 800a218:	0800a24f 	.word	0x0800a24f
 800a21c:	0800a24f 	.word	0x0800a24f
 800a220:	0800a24f 	.word	0x0800a24f
 800a224:	0800a247 	.word	0x0800a247
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a228:	f7fd fca6 	bl	8007b78 <HAL_RCC_GetPCLK1Freq>
 800a22c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a22e:	e014      	b.n	800a25a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a230:	f7fd fcb8 	bl	8007ba4 <HAL_RCC_GetPCLK2Freq>
 800a234:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a236:	e010      	b.n	800a25a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a238:	4b1a      	ldr	r3, [pc, #104]	; (800a2a4 <UART_SetConfig+0x5c0>)
 800a23a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a23c:	e00d      	b.n	800a25a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a23e:	f7fd fc03 	bl	8007a48 <HAL_RCC_GetSysClockFreq>
 800a242:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a244:	e009      	b.n	800a25a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a24a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a24c:	e005      	b.n	800a25a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a24e:	2300      	movs	r3, #0
 800a250:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a252:	2301      	movs	r3, #1
 800a254:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a258:	bf00      	nop
    }

    if (pclk != 0U)
 800a25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d028      	beq.n	800a2b2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a264:	4a10      	ldr	r2, [pc, #64]	; (800a2a8 <UART_SetConfig+0x5c4>)
 800a266:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a26a:	461a      	mov	r2, r3
 800a26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26e:	fbb3 f2f2 	udiv	r2, r3, r2
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	085b      	lsrs	r3, r3, #1
 800a278:	441a      	add	r2, r3
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	685b      	ldr	r3, [r3, #4]
 800a27e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a282:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a284:	6a3b      	ldr	r3, [r7, #32]
 800a286:	2b0f      	cmp	r3, #15
 800a288:	d910      	bls.n	800a2ac <UART_SetConfig+0x5c8>
 800a28a:	6a3b      	ldr	r3, [r7, #32]
 800a28c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a290:	d20c      	bcs.n	800a2ac <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a292:	6a3b      	ldr	r3, [r7, #32]
 800a294:	b29a      	uxth	r2, r3
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	60da      	str	r2, [r3, #12]
 800a29c:	e009      	b.n	800a2b2 <UART_SetConfig+0x5ce>
 800a29e:	bf00      	nop
 800a2a0:	40008000 	.word	0x40008000
 800a2a4:	00f42400 	.word	0x00f42400
 800a2a8:	0800b32c 	.word	0x0800b32c
      }
      else
      {
        ret = HAL_ERROR;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	2201      	movs	r2, #1
 800a2be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a2ce:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3730      	adds	r7, #48	; 0x30
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a2dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2e8:	f003 0308 	and.w	r3, r3, #8
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d00a      	beq.n	800a306 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	430a      	orrs	r2, r1
 800a304:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a30a:	f003 0301 	and.w	r3, r3, #1
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d00a      	beq.n	800a328 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	430a      	orrs	r2, r1
 800a326:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a32c:	f003 0302 	and.w	r3, r3, #2
 800a330:	2b00      	cmp	r3, #0
 800a332:	d00a      	beq.n	800a34a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	430a      	orrs	r2, r1
 800a348:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a34e:	f003 0304 	and.w	r3, r3, #4
 800a352:	2b00      	cmp	r3, #0
 800a354:	d00a      	beq.n	800a36c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	430a      	orrs	r2, r1
 800a36a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a370:	f003 0310 	and.w	r3, r3, #16
 800a374:	2b00      	cmp	r3, #0
 800a376:	d00a      	beq.n	800a38e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	689b      	ldr	r3, [r3, #8]
 800a37e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	430a      	orrs	r2, r1
 800a38c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a392:	f003 0320 	and.w	r3, r3, #32
 800a396:	2b00      	cmp	r3, #0
 800a398:	d00a      	beq.n	800a3b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	689b      	ldr	r3, [r3, #8]
 800a3a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	430a      	orrs	r2, r1
 800a3ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d01a      	beq.n	800a3f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	430a      	orrs	r2, r1
 800a3d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a3da:	d10a      	bne.n	800a3f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	430a      	orrs	r2, r1
 800a3f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d00a      	beq.n	800a414 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	430a      	orrs	r2, r1
 800a412:	605a      	str	r2, [r3, #4]
  }
}
 800a414:	bf00      	nop
 800a416:	370c      	adds	r7, #12
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr

0800a420 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b098      	sub	sp, #96	; 0x60
 800a424:	af02      	add	r7, sp, #8
 800a426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2200      	movs	r2, #0
 800a42c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a430:	f7f9 fb32 	bl	8003a98 <HAL_GetTick>
 800a434:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f003 0308 	and.w	r3, r3, #8
 800a440:	2b08      	cmp	r3, #8
 800a442:	d12f      	bne.n	800a4a4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a444:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a448:	9300      	str	r3, [sp, #0]
 800a44a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a44c:	2200      	movs	r2, #0
 800a44e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f000 f88e 	bl	800a574 <UART_WaitOnFlagUntilTimeout>
 800a458:	4603      	mov	r3, r0
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d022      	beq.n	800a4a4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a466:	e853 3f00 	ldrex	r3, [r3]
 800a46a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a46c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a46e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a472:	653b      	str	r3, [r7, #80]	; 0x50
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	461a      	mov	r2, r3
 800a47a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a47c:	647b      	str	r3, [r7, #68]	; 0x44
 800a47e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a480:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a482:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a484:	e841 2300 	strex	r3, r2, [r1]
 800a488:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a48a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d1e6      	bne.n	800a45e <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2220      	movs	r2, #32
 800a494:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2200      	movs	r2, #0
 800a49c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a4a0:	2303      	movs	r3, #3
 800a4a2:	e063      	b.n	800a56c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f003 0304 	and.w	r3, r3, #4
 800a4ae:	2b04      	cmp	r3, #4
 800a4b0:	d149      	bne.n	800a546 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a4b6:	9300      	str	r3, [sp, #0]
 800a4b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f000 f857 	bl	800a574 <UART_WaitOnFlagUntilTimeout>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d03c      	beq.n	800a546 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d4:	e853 3f00 	ldrex	r3, [r3]
 800a4d8:	623b      	str	r3, [r7, #32]
   return(result);
 800a4da:	6a3b      	ldr	r3, [r7, #32]
 800a4dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a4e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4ea:	633b      	str	r3, [r7, #48]	; 0x30
 800a4ec:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a4f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4f2:	e841 2300 	strex	r3, r2, [r1]
 800a4f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d1e6      	bne.n	800a4cc <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	3308      	adds	r3, #8
 800a504:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	e853 3f00 	ldrex	r3, [r3]
 800a50c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	f023 0301 	bic.w	r3, r3, #1
 800a514:	64bb      	str	r3, [r7, #72]	; 0x48
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	3308      	adds	r3, #8
 800a51c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a51e:	61fa      	str	r2, [r7, #28]
 800a520:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a522:	69b9      	ldr	r1, [r7, #24]
 800a524:	69fa      	ldr	r2, [r7, #28]
 800a526:	e841 2300 	strex	r3, r2, [r1]
 800a52a:	617b      	str	r3, [r7, #20]
   return(result);
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d1e5      	bne.n	800a4fe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2220      	movs	r2, #32
 800a536:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2200      	movs	r2, #0
 800a53e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a542:	2303      	movs	r3, #3
 800a544:	e012      	b.n	800a56c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2220      	movs	r2, #32
 800a54a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2220      	movs	r2, #32
 800a552:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2200      	movs	r2, #0
 800a55a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2200      	movs	r2, #0
 800a560:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2200      	movs	r2, #0
 800a566:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a56a:	2300      	movs	r3, #0
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3758      	adds	r7, #88	; 0x58
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b084      	sub	sp, #16
 800a578:	af00      	add	r7, sp, #0
 800a57a:	60f8      	str	r0, [r7, #12]
 800a57c:	60b9      	str	r1, [r7, #8]
 800a57e:	603b      	str	r3, [r7, #0]
 800a580:	4613      	mov	r3, r2
 800a582:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a584:	e049      	b.n	800a61a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a586:	69bb      	ldr	r3, [r7, #24]
 800a588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a58c:	d045      	beq.n	800a61a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a58e:	f7f9 fa83 	bl	8003a98 <HAL_GetTick>
 800a592:	4602      	mov	r2, r0
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	1ad3      	subs	r3, r2, r3
 800a598:	69ba      	ldr	r2, [r7, #24]
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d302      	bcc.n	800a5a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a59e:	69bb      	ldr	r3, [r7, #24]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d101      	bne.n	800a5a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a5a4:	2303      	movs	r3, #3
 800a5a6:	e048      	b.n	800a63a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f003 0304 	and.w	r3, r3, #4
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d031      	beq.n	800a61a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	69db      	ldr	r3, [r3, #28]
 800a5bc:	f003 0308 	and.w	r3, r3, #8
 800a5c0:	2b08      	cmp	r3, #8
 800a5c2:	d110      	bne.n	800a5e6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	2208      	movs	r2, #8
 800a5ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a5cc:	68f8      	ldr	r0, [r7, #12]
 800a5ce:	f000 f838 	bl	800a642 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2208      	movs	r2, #8
 800a5d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	e029      	b.n	800a63a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	69db      	ldr	r3, [r3, #28]
 800a5ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a5f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5f4:	d111      	bne.n	800a61a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a5fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a600:	68f8      	ldr	r0, [r7, #12]
 800a602:	f000 f81e 	bl	800a642 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	2220      	movs	r2, #32
 800a60a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2200      	movs	r2, #0
 800a612:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a616:	2303      	movs	r3, #3
 800a618:	e00f      	b.n	800a63a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	69da      	ldr	r2, [r3, #28]
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	4013      	ands	r3, r2
 800a624:	68ba      	ldr	r2, [r7, #8]
 800a626:	429a      	cmp	r2, r3
 800a628:	bf0c      	ite	eq
 800a62a:	2301      	moveq	r3, #1
 800a62c:	2300      	movne	r3, #0
 800a62e:	b2db      	uxtb	r3, r3
 800a630:	461a      	mov	r2, r3
 800a632:	79fb      	ldrb	r3, [r7, #7]
 800a634:	429a      	cmp	r2, r3
 800a636:	d0a6      	beq.n	800a586 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a638:	2300      	movs	r3, #0
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3710      	adds	r7, #16
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}

0800a642 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a642:	b480      	push	{r7}
 800a644:	b095      	sub	sp, #84	; 0x54
 800a646:	af00      	add	r7, sp, #0
 800a648:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a652:	e853 3f00 	ldrex	r3, [r3]
 800a656:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a65e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	461a      	mov	r2, r3
 800a666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a668:	643b      	str	r3, [r7, #64]	; 0x40
 800a66a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a66c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a66e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a670:	e841 2300 	strex	r3, r2, [r1]
 800a674:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d1e6      	bne.n	800a64a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	3308      	adds	r3, #8
 800a682:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a684:	6a3b      	ldr	r3, [r7, #32]
 800a686:	e853 3f00 	ldrex	r3, [r3]
 800a68a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a68c:	69fb      	ldr	r3, [r7, #28]
 800a68e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a692:	f023 0301 	bic.w	r3, r3, #1
 800a696:	64bb      	str	r3, [r7, #72]	; 0x48
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	3308      	adds	r3, #8
 800a69e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a6a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a6a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6a8:	e841 2300 	strex	r3, r2, [r1]
 800a6ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d1e3      	bne.n	800a67c <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	d118      	bne.n	800a6ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	e853 3f00 	ldrex	r3, [r3]
 800a6c8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	f023 0310 	bic.w	r3, r3, #16
 800a6d0:	647b      	str	r3, [r7, #68]	; 0x44
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6da:	61bb      	str	r3, [r7, #24]
 800a6dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6de:	6979      	ldr	r1, [r7, #20]
 800a6e0:	69ba      	ldr	r2, [r7, #24]
 800a6e2:	e841 2300 	strex	r3, r2, [r1]
 800a6e6:	613b      	str	r3, [r7, #16]
   return(result);
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d1e6      	bne.n	800a6bc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2220      	movs	r2, #32
 800a6f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2200      	movs	r2, #0
 800a700:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a702:	bf00      	nop
 800a704:	3754      	adds	r7, #84	; 0x54
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr

0800a70e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a70e:	b580      	push	{r7, lr}
 800a710:	b084      	sub	sp, #16
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a71a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	2200      	movs	r2, #0
 800a720:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2200      	movs	r2, #0
 800a728:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a72c:	68f8      	ldr	r0, [r7, #12]
 800a72e:	f7ff fac3 	bl	8009cb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a732:	bf00      	nop
 800a734:	3710      	adds	r7, #16
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}

0800a73a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a73a:	b580      	push	{r7, lr}
 800a73c:	b088      	sub	sp, #32
 800a73e:	af00      	add	r7, sp, #0
 800a740:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	e853 3f00 	ldrex	r3, [r3]
 800a74e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a756:	61fb      	str	r3, [r7, #28]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	461a      	mov	r2, r3
 800a75e:	69fb      	ldr	r3, [r7, #28]
 800a760:	61bb      	str	r3, [r7, #24]
 800a762:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a764:	6979      	ldr	r1, [r7, #20]
 800a766:	69ba      	ldr	r2, [r7, #24]
 800a768:	e841 2300 	strex	r3, r2, [r1]
 800a76c:	613b      	str	r3, [r7, #16]
   return(result);
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d1e6      	bne.n	800a742 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2220      	movs	r2, #32
 800a778:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2200      	movs	r2, #0
 800a780:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f7ff fa8e 	bl	8009ca4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a788:	bf00      	nop
 800a78a:	3720      	adds	r7, #32
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a790:	b480      	push	{r7}
 800a792:	b083      	sub	sp, #12
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a798:	bf00      	nop
 800a79a:	370c      	adds	r7, #12
 800a79c:	46bd      	mov	sp, r7
 800a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a2:	4770      	bx	lr

0800a7a4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b083      	sub	sp, #12
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a7ac:	bf00      	nop
 800a7ae:	370c      	adds	r7, #12
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr

0800a7b8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b083      	sub	sp, #12
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a7c0:	bf00      	nop
 800a7c2:	370c      	adds	r7, #12
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr

0800a7cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b085      	sub	sp, #20
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a7da:	2b01      	cmp	r3, #1
 800a7dc:	d101      	bne.n	800a7e2 <HAL_UARTEx_DisableFifoMode+0x16>
 800a7de:	2302      	movs	r3, #2
 800a7e0:	e027      	b.n	800a832 <HAL_UARTEx_DisableFifoMode+0x66>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2224      	movs	r2, #36	; 0x24
 800a7ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f022 0201 	bic.w	r2, r2, #1
 800a808:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a810:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2200      	movs	r2, #0
 800a816:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	68fa      	ldr	r2, [r7, #12]
 800a81e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2220      	movs	r2, #32
 800a824:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2200      	movs	r2, #0
 800a82c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a830:	2300      	movs	r3, #0
}
 800a832:	4618      	mov	r0, r3
 800a834:	3714      	adds	r7, #20
 800a836:	46bd      	mov	sp, r7
 800a838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83c:	4770      	bx	lr

0800a83e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a83e:	b580      	push	{r7, lr}
 800a840:	b084      	sub	sp, #16
 800a842:	af00      	add	r7, sp, #0
 800a844:	6078      	str	r0, [r7, #4]
 800a846:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a84e:	2b01      	cmp	r3, #1
 800a850:	d101      	bne.n	800a856 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a852:	2302      	movs	r3, #2
 800a854:	e02d      	b.n	800a8b2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2201      	movs	r2, #1
 800a85a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2224      	movs	r2, #36	; 0x24
 800a862:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f022 0201 	bic.w	r2, r2, #1
 800a87c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	689b      	ldr	r3, [r3, #8]
 800a884:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	683a      	ldr	r2, [r7, #0]
 800a88e:	430a      	orrs	r2, r1
 800a890:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f000 f850 	bl	800a938 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	68fa      	ldr	r2, [r7, #12]
 800a89e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2220      	movs	r2, #32
 800a8a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a8b0:	2300      	movs	r3, #0
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3710      	adds	r7, #16
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}

0800a8ba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a8ba:	b580      	push	{r7, lr}
 800a8bc:	b084      	sub	sp, #16
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	6078      	str	r0, [r7, #4]
 800a8c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a8ca:	2b01      	cmp	r3, #1
 800a8cc:	d101      	bne.n	800a8d2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a8ce:	2302      	movs	r3, #2
 800a8d0:	e02d      	b.n	800a92e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2201      	movs	r2, #1
 800a8d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2224      	movs	r2, #36	; 0x24
 800a8de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	681a      	ldr	r2, [r3, #0]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f022 0201 	bic.w	r2, r2, #1
 800a8f8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	689b      	ldr	r3, [r3, #8]
 800a900:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	683a      	ldr	r2, [r7, #0]
 800a90a:	430a      	orrs	r2, r1
 800a90c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f000 f812 	bl	800a938 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	68fa      	ldr	r2, [r7, #12]
 800a91a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2220      	movs	r2, #32
 800a920:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2200      	movs	r2, #0
 800a928:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a92c:	2300      	movs	r3, #0
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3710      	adds	r7, #16
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
	...

0800a938 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a938:	b480      	push	{r7}
 800a93a:	b085      	sub	sp, #20
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a944:	2b00      	cmp	r3, #0
 800a946:	d108      	bne.n	800a95a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2201      	movs	r2, #1
 800a94c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2201      	movs	r2, #1
 800a954:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a958:	e031      	b.n	800a9be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a95a:	2308      	movs	r3, #8
 800a95c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a95e:	2308      	movs	r3, #8
 800a960:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	689b      	ldr	r3, [r3, #8]
 800a968:	0e5b      	lsrs	r3, r3, #25
 800a96a:	b2db      	uxtb	r3, r3
 800a96c:	f003 0307 	and.w	r3, r3, #7
 800a970:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	689b      	ldr	r3, [r3, #8]
 800a978:	0f5b      	lsrs	r3, r3, #29
 800a97a:	b2db      	uxtb	r3, r3
 800a97c:	f003 0307 	and.w	r3, r3, #7
 800a980:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a982:	7bbb      	ldrb	r3, [r7, #14]
 800a984:	7b3a      	ldrb	r2, [r7, #12]
 800a986:	4911      	ldr	r1, [pc, #68]	; (800a9cc <UARTEx_SetNbDataToProcess+0x94>)
 800a988:	5c8a      	ldrb	r2, [r1, r2]
 800a98a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a98e:	7b3a      	ldrb	r2, [r7, #12]
 800a990:	490f      	ldr	r1, [pc, #60]	; (800a9d0 <UARTEx_SetNbDataToProcess+0x98>)
 800a992:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a994:	fb93 f3f2 	sdiv	r3, r3, r2
 800a998:	b29a      	uxth	r2, r3
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9a0:	7bfb      	ldrb	r3, [r7, #15]
 800a9a2:	7b7a      	ldrb	r2, [r7, #13]
 800a9a4:	4909      	ldr	r1, [pc, #36]	; (800a9cc <UARTEx_SetNbDataToProcess+0x94>)
 800a9a6:	5c8a      	ldrb	r2, [r1, r2]
 800a9a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a9ac:	7b7a      	ldrb	r2, [r7, #13]
 800a9ae:	4908      	ldr	r1, [pc, #32]	; (800a9d0 <UARTEx_SetNbDataToProcess+0x98>)
 800a9b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9b2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9b6:	b29a      	uxth	r2, r3
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a9be:	bf00      	nop
 800a9c0:	3714      	adds	r7, #20
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr
 800a9ca:	bf00      	nop
 800a9cc:	0800b344 	.word	0x0800b344
 800a9d0:	0800b34c 	.word	0x0800b34c

0800a9d4 <memset>:
 800a9d4:	4402      	add	r2, r0
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d100      	bne.n	800a9de <memset+0xa>
 800a9dc:	4770      	bx	lr
 800a9de:	f803 1b01 	strb.w	r1, [r3], #1
 800a9e2:	e7f9      	b.n	800a9d8 <memset+0x4>

0800a9e4 <__libc_init_array>:
 800a9e4:	b570      	push	{r4, r5, r6, lr}
 800a9e6:	4d0d      	ldr	r5, [pc, #52]	; (800aa1c <__libc_init_array+0x38>)
 800a9e8:	4c0d      	ldr	r4, [pc, #52]	; (800aa20 <__libc_init_array+0x3c>)
 800a9ea:	1b64      	subs	r4, r4, r5
 800a9ec:	10a4      	asrs	r4, r4, #2
 800a9ee:	2600      	movs	r6, #0
 800a9f0:	42a6      	cmp	r6, r4
 800a9f2:	d109      	bne.n	800aa08 <__libc_init_array+0x24>
 800a9f4:	4d0b      	ldr	r5, [pc, #44]	; (800aa24 <__libc_init_array+0x40>)
 800a9f6:	4c0c      	ldr	r4, [pc, #48]	; (800aa28 <__libc_init_array+0x44>)
 800a9f8:	f000 f818 	bl	800aa2c <_init>
 800a9fc:	1b64      	subs	r4, r4, r5
 800a9fe:	10a4      	asrs	r4, r4, #2
 800aa00:	2600      	movs	r6, #0
 800aa02:	42a6      	cmp	r6, r4
 800aa04:	d105      	bne.n	800aa12 <__libc_init_array+0x2e>
 800aa06:	bd70      	pop	{r4, r5, r6, pc}
 800aa08:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa0c:	4798      	blx	r3
 800aa0e:	3601      	adds	r6, #1
 800aa10:	e7ee      	b.n	800a9f0 <__libc_init_array+0xc>
 800aa12:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa16:	4798      	blx	r3
 800aa18:	3601      	adds	r6, #1
 800aa1a:	e7f2      	b.n	800aa02 <__libc_init_array+0x1e>
 800aa1c:	0800b35c 	.word	0x0800b35c
 800aa20:	0800b35c 	.word	0x0800b35c
 800aa24:	0800b35c 	.word	0x0800b35c
 800aa28:	0800b360 	.word	0x0800b360

0800aa2c <_init>:
 800aa2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa2e:	bf00      	nop
 800aa30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa32:	bc08      	pop	{r3}
 800aa34:	469e      	mov	lr, r3
 800aa36:	4770      	bx	lr

0800aa38 <_fini>:
 800aa38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa3a:	bf00      	nop
 800aa3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa3e:	bc08      	pop	{r3}
 800aa40:	469e      	mov	lr, r3
 800aa42:	4770      	bx	lr

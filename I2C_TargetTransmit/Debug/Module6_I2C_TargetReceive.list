
Module6_I2C_TargetReceive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5e0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800a7a0  0800a7a0  0001a7a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a874  0800a874  00020048  2**0
                  CONTENTS
  4 .ARM          00000008  0800a874  0800a874  0001a874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a87c  0800a87c  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a87c  0800a87c  0001a87c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a880  0800a880  0001a880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  0800a884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001288  20000048  0800a8cc  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200012d0  0800a8cc  000212d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002378a  00000000  00000000  000200bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f9a  00000000  00000000  00043845  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f48  00000000  00000000  000477e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000188a  00000000  00000000  00049728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e281  00000000  00000000  0004afb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025285  00000000  00000000  00079233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001311d0  00000000  00000000  0009e4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000086c8  00000000  00000000  001cf688  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  001d7d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000048 	.word	0x20000048
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800a788 	.word	0x0800a788

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000004c 	.word	0x2000004c
 80001fc:	0800a788 	.word	0x0800a788

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	f103 0208 	add.w	r2, r3, #8
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	f04f 32ff 	mov.w	r2, #4294967295
 8000524:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	f103 0208 	add.w	r2, r3, #8
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	f103 0208 	add.w	r2, r3, #8
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr

0800054c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2200      	movs	r2, #0
 8000558:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800055a:	bf00      	nop
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr

08000566 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8000566:	b480      	push	{r7}
 8000568:	b085      	sub	sp, #20
 800056a:	af00      	add	r7, sp, #0
 800056c:	6078      	str	r0, [r7, #4]
 800056e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	68fa      	ldr	r2, [r7, #12]
 800057a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	689a      	ldr	r2, [r3, #8]
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	689b      	ldr	r3, [r3, #8]
 8000588:	683a      	ldr	r2, [r7, #0]
 800058a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	683a      	ldr	r2, [r7, #0]
 8000590:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	1c5a      	adds	r2, r3, #1
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	601a      	str	r2, [r3, #0]
}
 80005a2:	bf00      	nop
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80005ae:	b480      	push	{r7}
 80005b0:	b085      	sub	sp, #20
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
 80005b6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005c4:	d103      	bne.n	80005ce <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	691b      	ldr	r3, [r3, #16]
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	e00c      	b.n	80005e8 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	3308      	adds	r3, #8
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	e002      	b.n	80005dc <vListInsert+0x2e>
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	68ba      	ldr	r2, [r7, #8]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d2f6      	bcs.n	80005d6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	685a      	ldr	r2, [r3, #4]
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	685b      	ldr	r3, [r3, #4]
 80005f4:	683a      	ldr	r2, [r7, #0]
 80005f6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	68fa      	ldr	r2, [r7, #12]
 80005fc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	683a      	ldr	r2, [r7, #0]
 8000602:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	687a      	ldr	r2, [r7, #4]
 8000608:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	1c5a      	adds	r2, r3, #1
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	601a      	str	r2, [r3, #0]
}
 8000614:	bf00      	nop
 8000616:	3714      	adds	r7, #20
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr

08000620 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	691b      	ldr	r3, [r3, #16]
 800062c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	685b      	ldr	r3, [r3, #4]
 8000632:	687a      	ldr	r2, [r7, #4]
 8000634:	6892      	ldr	r2, [r2, #8]
 8000636:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	689b      	ldr	r3, [r3, #8]
 800063c:	687a      	ldr	r2, [r7, #4]
 800063e:	6852      	ldr	r2, [r2, #4]
 8000640:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	685b      	ldr	r3, [r3, #4]
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	429a      	cmp	r2, r3
 800064a:	d103      	bne.n	8000654 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	689a      	ldr	r2, [r3, #8]
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2200      	movs	r2, #0
 8000658:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	1e5a      	subs	r2, r3, #1
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	681b      	ldr	r3, [r3, #0]
}
 8000668:	4618      	mov	r0, r3
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000674:	b580      	push	{r7, lr}
 8000676:	b08c      	sub	sp, #48	; 0x30
 8000678:	af04      	add	r7, sp, #16
 800067a:	60f8      	str	r0, [r7, #12]
 800067c:	60b9      	str	r1, [r7, #8]
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	4613      	mov	r3, r2
 8000682:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000684:	88fb      	ldrh	r3, [r7, #6]
 8000686:	009b      	lsls	r3, r3, #2
 8000688:	4618      	mov	r0, r3
 800068a:	f001 faaf 	bl	8001bec <pvPortMalloc>
 800068e:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d013      	beq.n	80006be <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000696:	2054      	movs	r0, #84	; 0x54
 8000698:	f001 faa8 	bl	8001bec <pvPortMalloc>
 800069c:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800069e:	69fb      	ldr	r3, [r7, #28]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d008      	beq.n	80006b6 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80006a4:	2254      	movs	r2, #84	; 0x54
 80006a6:	2100      	movs	r1, #0
 80006a8:	69f8      	ldr	r0, [r7, #28]
 80006aa:	f00a f841 	bl	800a730 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80006ae:	69fb      	ldr	r3, [r7, #28]
 80006b0:	697a      	ldr	r2, [r7, #20]
 80006b2:	631a      	str	r2, [r3, #48]	; 0x30
 80006b4:	e005      	b.n	80006c2 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80006b6:	6978      	ldr	r0, [r7, #20]
 80006b8:	f001 fb52 	bl	8001d60 <vPortFree>
 80006bc:	e001      	b.n	80006c2 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80006c2:	69fb      	ldr	r3, [r7, #28]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d013      	beq.n	80006f0 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80006c8:	88fa      	ldrh	r2, [r7, #6]
 80006ca:	2300      	movs	r3, #0
 80006cc:	9303      	str	r3, [sp, #12]
 80006ce:	69fb      	ldr	r3, [r7, #28]
 80006d0:	9302      	str	r3, [sp, #8]
 80006d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006d4:	9301      	str	r3, [sp, #4]
 80006d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006d8:	9300      	str	r3, [sp, #0]
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	68b9      	ldr	r1, [r7, #8]
 80006de:	68f8      	ldr	r0, [r7, #12]
 80006e0:	f000 f80e 	bl	8000700 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80006e4:	69f8      	ldr	r0, [r7, #28]
 80006e6:	f000 f891 	bl	800080c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80006ea:	2301      	movs	r3, #1
 80006ec:	61bb      	str	r3, [r7, #24]
 80006ee:	e002      	b.n	80006f6 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80006f0:	f04f 33ff 	mov.w	r3, #4294967295
 80006f4:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80006f6:	69bb      	ldr	r3, [r7, #24]
    }
 80006f8:	4618      	mov	r0, r3
 80006fa:	3720      	adds	r7, #32
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b088      	sub	sp, #32
 8000704:	af00      	add	r7, sp, #0
 8000706:	60f8      	str	r0, [r7, #12]
 8000708:	60b9      	str	r1, [r7, #8]
 800070a:	607a      	str	r2, [r7, #4]
 800070c:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800070e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000710:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000718:	3b01      	subs	r3, #1
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	4413      	add	r3, r2
 800071e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000720:	69bb      	ldr	r3, [r7, #24]
 8000722:	f023 0307 	bic.w	r3, r3, #7
 8000726:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000728:	69bb      	ldr	r3, [r7, #24]
 800072a:	f003 0307 	and.w	r3, r3, #7
 800072e:	2b00      	cmp	r3, #0
 8000730:	d00a      	beq.n	8000748 <prvInitialiseNewTask+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000736:	f383 8811 	msr	BASEPRI, r3
 800073a:	f3bf 8f6f 	isb	sy
 800073e:	f3bf 8f4f 	dsb	sy
 8000742:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000744:	bf00      	nop
 8000746:	e7fe      	b.n	8000746 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d01e      	beq.n	800078c <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]
 8000752:	e012      	b.n	800077a <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000754:	68ba      	ldr	r2, [r7, #8]
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	4413      	add	r3, r2
 800075a:	7819      	ldrb	r1, [r3, #0]
 800075c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	4413      	add	r3, r2
 8000762:	3334      	adds	r3, #52	; 0x34
 8000764:	460a      	mov	r2, r1
 8000766:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000768:	68ba      	ldr	r2, [r7, #8]
 800076a:	69fb      	ldr	r3, [r7, #28]
 800076c:	4413      	add	r3, r2
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d006      	beq.n	8000782 <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000774:	69fb      	ldr	r3, [r7, #28]
 8000776:	3301      	adds	r3, #1
 8000778:	61fb      	str	r3, [r7, #28]
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	2b0f      	cmp	r3, #15
 800077e:	d9e9      	bls.n	8000754 <prvInitialiseNewTask+0x54>
 8000780:	e000      	b.n	8000784 <prvInitialiseNewTask+0x84>
            {
                break;
 8000782:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000786:	2200      	movs	r2, #0
 8000788:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800078c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800078e:	2b06      	cmp	r3, #6
 8000790:	d90a      	bls.n	80007a8 <prvInitialiseNewTask+0xa8>
        __asm volatile
 8000792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000796:	f383 8811 	msr	BASEPRI, r3
 800079a:	f3bf 8f6f 	isb	sy
 800079e:	f3bf 8f4f 	dsb	sy
 80007a2:	613b      	str	r3, [r7, #16]
    }
 80007a4:	bf00      	nop
 80007a6:	e7fe      	b.n	80007a6 <prvInitialiseNewTask+0xa6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80007a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007aa:	2b06      	cmp	r3, #6
 80007ac:	d901      	bls.n	80007b2 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80007ae:	2306      	movs	r3, #6
 80007b0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80007b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007b6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80007b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007bc:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80007be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007c0:	3304      	adds	r3, #4
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fec2 	bl	800054c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80007c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007ca:	3318      	adds	r3, #24
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff febd 	bl	800054c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80007d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80007d6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80007d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007da:	f1c3 0207 	rsb	r2, r3, #7
 80007de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007e0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80007e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80007e6:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80007e8:	683a      	ldr	r2, [r7, #0]
 80007ea:	68f9      	ldr	r1, [r7, #12]
 80007ec:	69b8      	ldr	r0, [r7, #24]
 80007ee:	f000 ffaf 	bl	8001750 <pxPortInitialiseStack>
 80007f2:	4602      	mov	r2, r0
 80007f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007f6:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80007f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d002      	beq.n	8000804 <prvInitialiseNewTask+0x104>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80007fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000802:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000804:	bf00      	nop
 8000806:	3720      	adds	r7, #32
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000814:	f001 f8c8 	bl	80019a8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000818:	4b3e      	ldr	r3, [pc, #248]	; (8000914 <prvAddNewTaskToReadyList+0x108>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	3301      	adds	r3, #1
 800081e:	4a3d      	ldr	r2, [pc, #244]	; (8000914 <prvAddNewTaskToReadyList+0x108>)
 8000820:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000822:	4b3d      	ldr	r3, [pc, #244]	; (8000918 <prvAddNewTaskToReadyList+0x10c>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d109      	bne.n	800083e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800082a:	4a3b      	ldr	r2, [pc, #236]	; (8000918 <prvAddNewTaskToReadyList+0x10c>)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000830:	4b38      	ldr	r3, [pc, #224]	; (8000914 <prvAddNewTaskToReadyList+0x108>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b01      	cmp	r3, #1
 8000836:	d110      	bne.n	800085a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000838:	f000 fd0e 	bl	8001258 <prvInitialiseTaskLists>
 800083c:	e00d      	b.n	800085a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800083e:	4b37      	ldr	r3, [pc, #220]	; (800091c <prvAddNewTaskToReadyList+0x110>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d109      	bne.n	800085a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000846:	4b34      	ldr	r3, [pc, #208]	; (8000918 <prvAddNewTaskToReadyList+0x10c>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000850:	429a      	cmp	r2, r3
 8000852:	d802      	bhi.n	800085a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000854:	4a30      	ldr	r2, [pc, #192]	; (8000918 <prvAddNewTaskToReadyList+0x10c>)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800085a:	4b31      	ldr	r3, [pc, #196]	; (8000920 <prvAddNewTaskToReadyList+0x114>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	3301      	adds	r3, #1
 8000860:	4a2f      	ldr	r2, [pc, #188]	; (8000920 <prvAddNewTaskToReadyList+0x114>)
 8000862:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000868:	2201      	movs	r2, #1
 800086a:	409a      	lsls	r2, r3
 800086c:	4b2d      	ldr	r3, [pc, #180]	; (8000924 <prvAddNewTaskToReadyList+0x118>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4313      	orrs	r3, r2
 8000872:	4a2c      	ldr	r2, [pc, #176]	; (8000924 <prvAddNewTaskToReadyList+0x118>)
 8000874:	6013      	str	r3, [r2, #0]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800087a:	492b      	ldr	r1, [pc, #172]	; (8000928 <prvAddNewTaskToReadyList+0x11c>)
 800087c:	4613      	mov	r3, r2
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	4413      	add	r3, r2
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	440b      	add	r3, r1
 8000886:	3304      	adds	r3, #4
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	68fa      	ldr	r2, [r7, #12]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	689a      	ldr	r2, [r3, #8]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	689b      	ldr	r3, [r3, #8]
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	3204      	adds	r2, #4
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	1d1a      	adds	r2, r3, #4
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008b0:	4613      	mov	r3, r2
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	4413      	add	r3, r2
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	4a1b      	ldr	r2, [pc, #108]	; (8000928 <prvAddNewTaskToReadyList+0x11c>)
 80008ba:	441a      	add	r2, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	615a      	str	r2, [r3, #20]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008c4:	4918      	ldr	r1, [pc, #96]	; (8000928 <prvAddNewTaskToReadyList+0x11c>)
 80008c6:	4613      	mov	r3, r2
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	4413      	add	r3, r2
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	440b      	add	r3, r1
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	1c59      	adds	r1, r3, #1
 80008d4:	4814      	ldr	r0, [pc, #80]	; (8000928 <prvAddNewTaskToReadyList+0x11c>)
 80008d6:	4613      	mov	r3, r2
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	4413      	add	r3, r2
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	4403      	add	r3, r0
 80008e0:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80008e2:	f001 f891 	bl	8001a08 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80008e6:	4b0d      	ldr	r3, [pc, #52]	; (800091c <prvAddNewTaskToReadyList+0x110>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d00e      	beq.n	800090c <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80008ee:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <prvAddNewTaskToReadyList+0x10c>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d207      	bcs.n	800090c <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80008fc:	4b0b      	ldr	r3, [pc, #44]	; (800092c <prvAddNewTaskToReadyList+0x120>)
 80008fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	f3bf 8f4f 	dsb	sy
 8000908:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800090c:	bf00      	nop
 800090e:	3710      	adds	r7, #16
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000164 	.word	0x20000164
 8000918:	20000064 	.word	0x20000064
 800091c:	20000170 	.word	0x20000170
 8000920:	20000180 	.word	0x20000180
 8000924:	2000016c 	.word	0x2000016c
 8000928:	20000068 	.word	0x20000068
 800092c:	e000ed04 	.word	0xe000ed04

08000930 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d017      	beq.n	8000972 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8000942:	4b13      	ldr	r3, [pc, #76]	; (8000990 <vTaskDelay+0x60>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d00a      	beq.n	8000960 <vTaskDelay+0x30>
        __asm volatile
 800094a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800094e:	f383 8811 	msr	BASEPRI, r3
 8000952:	f3bf 8f6f 	isb	sy
 8000956:	f3bf 8f4f 	dsb	sy
 800095a:	60bb      	str	r3, [r7, #8]
    }
 800095c:	bf00      	nop
 800095e:	e7fe      	b.n	800095e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8000960:	f000 f9d6 	bl	8000d10 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000964:	2100      	movs	r1, #0
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f000 fe72 	bl	8001650 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800096c:	f000 f9de 	bl	8000d2c <xTaskResumeAll>
 8000970:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d107      	bne.n	8000988 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <vTaskDelay+0x64>)
 800097a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	f3bf 8f4f 	dsb	sy
 8000984:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000988:	bf00      	nop
 800098a:	3710      	adds	r7, #16
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	2000018c 	.word	0x2000018c
 8000994:	e000ed04 	.word	0xe000ed04

08000998 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 80009a0:	f001 f802 	bl	80019a8 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d102      	bne.n	80009b0 <vTaskSuspend+0x18>
 80009aa:	4b43      	ldr	r3, [pc, #268]	; (8000ab8 <vTaskSuspend+0x120>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	e000      	b.n	80009b2 <vTaskSuspend+0x1a>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80009b4:	693b      	ldr	r3, [r7, #16]
 80009b6:	3304      	adds	r3, #4
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff fe31 	bl	8000620 <uxListRemove>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d115      	bne.n	80009f0 <vTaskSuspend+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80009c4:	693b      	ldr	r3, [r7, #16]
 80009c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009c8:	493c      	ldr	r1, [pc, #240]	; (8000abc <vTaskSuspend+0x124>)
 80009ca:	4613      	mov	r3, r2
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	4413      	add	r3, r2
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	440b      	add	r3, r1
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d10a      	bne.n	80009f0 <vTaskSuspend+0x58>
 80009da:	693b      	ldr	r3, [r7, #16]
 80009dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009de:	2201      	movs	r2, #1
 80009e0:	fa02 f303 	lsl.w	r3, r2, r3
 80009e4:	43da      	mvns	r2, r3
 80009e6:	4b36      	ldr	r3, [pc, #216]	; (8000ac0 <vTaskSuspend+0x128>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4013      	ands	r3, r2
 80009ec:	4a34      	ldr	r2, [pc, #208]	; (8000ac0 <vTaskSuspend+0x128>)
 80009ee:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d004      	beq.n	8000a02 <vTaskSuspend+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	3318      	adds	r3, #24
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff fe0f 	bl	8000620 <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8000a02:	693b      	ldr	r3, [r7, #16]
 8000a04:	3304      	adds	r3, #4
 8000a06:	4619      	mov	r1, r3
 8000a08:	482e      	ldr	r0, [pc, #184]	; (8000ac4 <vTaskSuspend+0x12c>)
 8000a0a:	f7ff fdac 	bl	8000566 <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8000a0e:	2300      	movs	r3, #0
 8000a10:	617b      	str	r3, [r7, #20]
 8000a12:	e010      	b.n	8000a36 <vTaskSuspend+0x9e>
                {
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	4413      	add	r3, r2
 8000a1a:	3350      	adds	r3, #80	; 0x50
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d105      	bne.n	8000a30 <vTaskSuspend+0x98>
                    {
                        /* The task was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8000a24:	693a      	ldr	r2, [r7, #16]
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	4413      	add	r3, r2
 8000a2a:	3350      	adds	r3, #80	; 0x50
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	701a      	strb	r2, [r3, #0]
                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	3301      	adds	r3, #1
 8000a34:	617b      	str	r3, [r7, #20]
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	ddeb      	ble.n	8000a14 <vTaskSuspend+0x7c>
                    }
                }
            }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8000a3c:	f000 ffe4 	bl	8001a08 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8000a40:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <vTaskSuspend+0x130>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d005      	beq.n	8000a54 <vTaskSuspend+0xbc>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8000a48:	f000 ffae 	bl	80019a8 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8000a4c:	f000 fc82 	bl	8001354 <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8000a50:	f000 ffda 	bl	8001a08 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8000a54:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <vTaskSuspend+0x120>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	693a      	ldr	r2, [r7, #16]
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	d127      	bne.n	8000aae <vTaskSuspend+0x116>
        {
            if( xSchedulerRunning != pdFALSE )
 8000a5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <vTaskSuspend+0x130>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d017      	beq.n	8000a96 <vTaskSuspend+0xfe>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 8000a66:	4b19      	ldr	r3, [pc, #100]	; (8000acc <vTaskSuspend+0x134>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d00a      	beq.n	8000a84 <vTaskSuspend+0xec>
        __asm volatile
 8000a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a72:	f383 8811 	msr	BASEPRI, r3
 8000a76:	f3bf 8f6f 	isb	sy
 8000a7a:	f3bf 8f4f 	dsb	sy
 8000a7e:	60fb      	str	r3, [r7, #12]
    }
 8000a80:	bf00      	nop
 8000a82:	e7fe      	b.n	8000a82 <vTaskSuspend+0xea>
                portYIELD_WITHIN_API();
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <vTaskSuspend+0x138>)
 8000a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	f3bf 8f4f 	dsb	sy
 8000a90:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000a94:	e00b      	b.n	8000aae <vTaskSuspend+0x116>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <vTaskSuspend+0x12c>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <vTaskSuspend+0x13c>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	d103      	bne.n	8000aaa <vTaskSuspend+0x112>
                    pxCurrentTCB = NULL;
 8000aa2:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <vTaskSuspend+0x120>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
    }
 8000aa8:	e001      	b.n	8000aae <vTaskSuspend+0x116>
                    vTaskSwitchContext();
 8000aaa:	f000 fb61 	bl	8001170 <vTaskSwitchContext>
    }
 8000aae:	bf00      	nop
 8000ab0:	3718      	adds	r7, #24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000064 	.word	0x20000064
 8000abc:	20000068 	.word	0x20000068
 8000ac0:	2000016c 	.word	0x2000016c
 8000ac4:	20000150 	.word	0x20000150
 8000ac8:	20000170 	.word	0x20000170
 8000acc:	2000018c 	.word	0x2000018c
 8000ad0:	e000ed04 	.word	0xe000ed04
 8000ad4:	20000164 	.word	0x20000164

08000ad8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8000ad8:	b480      	push	{r7}
 8000ada:	b087      	sub	sp, #28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	613b      	str	r3, [r7, #16]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d10a      	bne.n	8000b04 <prvTaskIsTaskSuspended+0x2c>
        __asm volatile
 8000aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000af2:	f383 8811 	msr	BASEPRI, r3
 8000af6:	f3bf 8f6f 	isb	sy
 8000afa:	f3bf 8f4f 	dsb	sy
 8000afe:	60fb      	str	r3, [r7, #12]
    }
 8000b00:	bf00      	nop
 8000b02:	e7fe      	b.n	8000b02 <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	695b      	ldr	r3, [r3, #20]
 8000b08:	4a0a      	ldr	r2, [pc, #40]	; (8000b34 <prvTaskIsTaskSuspended+0x5c>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d10a      	bne.n	8000b24 <prvTaskIsTaskSuspended+0x4c>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b12:	4a09      	ldr	r2, [pc, #36]	; (8000b38 <prvTaskIsTaskSuspended+0x60>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d005      	beq.n	8000b24 <prvTaskIsTaskSuspended+0x4c>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d101      	bne.n	8000b24 <prvTaskIsTaskSuspended+0x4c>
                {
                    xReturn = pdTRUE;
 8000b20:	2301      	movs	r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8000b24:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8000b26:	4618      	mov	r0, r3
 8000b28:	371c      	adds	r7, #28
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20000150 	.word	0x20000150
 8000b38:	20000124 	.word	0x20000124

08000b3c <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

    BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
    {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
        BaseType_t xYieldRequired = pdFALSE;
 8000b44:	2300      	movs	r3, #0
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
        TCB_t * const pxTCB = xTaskToResume;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	623b      	str	r3, [r7, #32]
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToResume );
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d10a      	bne.n	8000b68 <xTaskResumeFromISR+0x2c>
        __asm volatile
 8000b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b56:	f383 8811 	msr	BASEPRI, r3
 8000b5a:	f3bf 8f6f 	isb	sy
 8000b5e:	f3bf 8f4f 	dsb	sy
 8000b62:	617b      	str	r3, [r7, #20]
    }
 8000b64:	bf00      	nop
 8000b66:	e7fe      	b.n	8000b66 <xTaskResumeFromISR+0x2a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000b68:	f001 f800 	bl	8001b6c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8000b6c:	f3ef 8211 	mrs	r2, BASEPRI
 8000b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b74:	f383 8811 	msr	BASEPRI, r3
 8000b78:	f3bf 8f6f 	isb	sy
 8000b7c:	f3bf 8f4f 	dsb	sy
 8000b80:	613a      	str	r2, [r7, #16]
 8000b82:	60fb      	str	r3, [r7, #12]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8000b84:	693b      	ldr	r3, [r7, #16]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000b86:	61fb      	str	r3, [r7, #28]
        {
            if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8000b88:	6a38      	ldr	r0, [r7, #32]
 8000b8a:	f7ff ffa5 	bl	8000ad8 <prvTaskIsTaskSuspended>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d05a      	beq.n	8000c4a <xTaskResumeFromISR+0x10e>
            {
                traceTASK_RESUME_FROM_ISR( pxTCB );

                /* Check the ready lists can be accessed. */
                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000b94:	4b32      	ldr	r3, [pc, #200]	; (8000c60 <xTaskResumeFromISR+0x124>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d150      	bne.n	8000c3e <xTaskResumeFromISR+0x102>
                {
                    /* Ready lists can be accessed so move the task from the
                     * suspended list to the ready list directly. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000b9c:	6a3b      	ldr	r3, [r7, #32]
 8000b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ba0:	4b30      	ldr	r3, [pc, #192]	; (8000c64 <xTaskResumeFromISR+0x128>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d304      	bcc.n	8000bb4 <xTaskResumeFromISR+0x78>
                    {
                        xYieldRequired = pdTRUE;
 8000baa:	2301      	movs	r3, #1
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Mark that a yield is pending in case the user is not
                         * using the return value to initiate a context switch
                         * from the ISR using portYIELD_FROM_ISR. */
                        xYieldPending = pdTRUE;
 8000bae:	4b2e      	ldr	r3, [pc, #184]	; (8000c68 <xTaskResumeFromISR+0x12c>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000bb4:	6a3b      	ldr	r3, [r7, #32]
 8000bb6:	3304      	adds	r3, #4
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fd31 	bl	8000620 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8000bbe:	6a3b      	ldr	r3, [r7, #32]
 8000bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	409a      	lsls	r2, r3
 8000bc6:	4b29      	ldr	r3, [pc, #164]	; (8000c6c <xTaskResumeFromISR+0x130>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	4a27      	ldr	r2, [pc, #156]	; (8000c6c <xTaskResumeFromISR+0x130>)
 8000bce:	6013      	str	r3, [r2, #0]
 8000bd0:	6a3b      	ldr	r3, [r7, #32]
 8000bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bd4:	4926      	ldr	r1, [pc, #152]	; (8000c70 <xTaskResumeFromISR+0x134>)
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	4413      	add	r3, r2
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	440b      	add	r3, r1
 8000be0:	3304      	adds	r3, #4
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	61bb      	str	r3, [r7, #24]
 8000be6:	6a3b      	ldr	r3, [r7, #32]
 8000be8:	69ba      	ldr	r2, [r7, #24]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	689a      	ldr	r2, [r3, #8]
 8000bf0:	6a3b      	ldr	r3, [r7, #32]
 8000bf2:	60da      	str	r2, [r3, #12]
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	689b      	ldr	r3, [r3, #8]
 8000bf8:	6a3a      	ldr	r2, [r7, #32]
 8000bfa:	3204      	adds	r2, #4
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	6a3b      	ldr	r3, [r7, #32]
 8000c00:	1d1a      	adds	r2, r3, #4
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	6a3b      	ldr	r3, [r7, #32]
 8000c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	4413      	add	r3, r2
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	4a17      	ldr	r2, [pc, #92]	; (8000c70 <xTaskResumeFromISR+0x134>)
 8000c14:	441a      	add	r2, r3
 8000c16:	6a3b      	ldr	r3, [r7, #32]
 8000c18:	615a      	str	r2, [r3, #20]
 8000c1a:	6a3b      	ldr	r3, [r7, #32]
 8000c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c1e:	4914      	ldr	r1, [pc, #80]	; (8000c70 <xTaskResumeFromISR+0x134>)
 8000c20:	4613      	mov	r3, r2
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	4413      	add	r3, r2
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	440b      	add	r3, r1
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	1c59      	adds	r1, r3, #1
 8000c2e:	4810      	ldr	r0, [pc, #64]	; (8000c70 <xTaskResumeFromISR+0x134>)
 8000c30:	4613      	mov	r3, r2
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	4413      	add	r3, r2
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	4403      	add	r3, r0
 8000c3a:	6019      	str	r1, [r3, #0]
 8000c3c:	e005      	b.n	8000c4a <xTaskResumeFromISR+0x10e>
                else
                {
                    /* The delayed or ready lists cannot be accessed so the task
                     * is held in the pending ready list until the scheduler is
                     * unsuspended. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8000c3e:	6a3b      	ldr	r3, [r7, #32]
 8000c40:	3318      	adds	r3, #24
 8000c42:	4619      	mov	r1, r3
 8000c44:	480b      	ldr	r0, [pc, #44]	; (8000c74 <xTaskResumeFromISR+0x138>)
 8000c46:	f7ff fc8e 	bl	8000566 <vListInsertEnd>
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	60bb      	str	r3, [r7, #8]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000c54:	bf00      	nop
                mtCOVERAGE_TEST_MARKER();
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xYieldRequired;
 8000c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3728      	adds	r7, #40	; 0x28
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	2000018c 	.word	0x2000018c
 8000c64:	20000064 	.word	0x20000064
 8000c68:	20000178 	.word	0x20000178
 8000c6c:	2000016c 	.word	0x2000016c
 8000c70:	20000068 	.word	0x20000068
 8000c74:	20000124 	.word	0x20000124

08000c78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8000c7e:	4b1d      	ldr	r3, [pc, #116]	; (8000cf4 <vTaskStartScheduler+0x7c>)
 8000c80:	9301      	str	r3, [sp, #4]
 8000c82:	2300      	movs	r3, #0
 8000c84:	9300      	str	r3, [sp, #0]
 8000c86:	2300      	movs	r3, #0
 8000c88:	2280      	movs	r2, #128	; 0x80
 8000c8a:	491b      	ldr	r1, [pc, #108]	; (8000cf8 <vTaskStartScheduler+0x80>)
 8000c8c:	481b      	ldr	r0, [pc, #108]	; (8000cfc <vTaskStartScheduler+0x84>)
 8000c8e:	f7ff fcf1 	bl	8000674 <xTaskCreate>
 8000c92:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d116      	bne.n	8000cc8 <vTaskStartScheduler+0x50>
        __asm volatile
 8000c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c9e:	f383 8811 	msr	BASEPRI, r3
 8000ca2:	f3bf 8f6f 	isb	sy
 8000ca6:	f3bf 8f4f 	dsb	sy
 8000caa:	60bb      	str	r3, [r7, #8]
    }
 8000cac:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8000cae:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <vTaskStartScheduler+0x88>)
 8000cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000cb6:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <vTaskStartScheduler+0x8c>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <vTaskStartScheduler+0x90>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8000cc2:	f000 fdcf 	bl	8001864 <xPortStartScheduler>
 8000cc6:	e00e      	b.n	8000ce6 <vTaskStartScheduler+0x6e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cce:	d10a      	bne.n	8000ce6 <vTaskStartScheduler+0x6e>
        __asm volatile
 8000cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cd4:	f383 8811 	msr	BASEPRI, r3
 8000cd8:	f3bf 8f6f 	isb	sy
 8000cdc:	f3bf 8f4f 	dsb	sy
 8000ce0:	607b      	str	r3, [r7, #4]
    }
 8000ce2:	bf00      	nop
 8000ce4:	e7fe      	b.n	8000ce4 <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <vTaskStartScheduler+0x94>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
}
 8000cea:	bf00      	nop
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000188 	.word	0x20000188
 8000cf8:	0800a7a0 	.word	0x0800a7a0
 8000cfc:	08001229 	.word	0x08001229
 8000d00:	20000184 	.word	0x20000184
 8000d04:	20000170 	.word	0x20000170
 8000d08:	20000168 	.word	0x20000168
 8000d0c:	20000000 	.word	0x20000000

08000d10 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000d14:	4b04      	ldr	r3, [pc, #16]	; (8000d28 <vTaskSuspendAll+0x18>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	4a03      	ldr	r2, [pc, #12]	; (8000d28 <vTaskSuspendAll+0x18>)
 8000d1c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	2000018c 	.word	0x2000018c

08000d2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b088      	sub	sp, #32
 8000d30:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8000d3a:	4b71      	ldr	r3, [pc, #452]	; (8000f00 <xTaskResumeAll+0x1d4>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d10a      	bne.n	8000d58 <xTaskResumeAll+0x2c>
        __asm volatile
 8000d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d46:	f383 8811 	msr	BASEPRI, r3
 8000d4a:	f3bf 8f6f 	isb	sy
 8000d4e:	f3bf 8f4f 	dsb	sy
 8000d52:	607b      	str	r3, [r7, #4]
    }
 8000d54:	bf00      	nop
 8000d56:	e7fe      	b.n	8000d56 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000d58:	f000 fe26 	bl	80019a8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000d5c:	4b68      	ldr	r3, [pc, #416]	; (8000f00 <xTaskResumeAll+0x1d4>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	3b01      	subs	r3, #1
 8000d62:	4a67      	ldr	r2, [pc, #412]	; (8000f00 <xTaskResumeAll+0x1d4>)
 8000d64:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000d66:	4b66      	ldr	r3, [pc, #408]	; (8000f00 <xTaskResumeAll+0x1d4>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	f040 80c0 	bne.w	8000ef0 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000d70:	4b64      	ldr	r3, [pc, #400]	; (8000f04 <xTaskResumeAll+0x1d8>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	f000 80bb 	beq.w	8000ef0 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000d7a:	e08a      	b.n	8000e92 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000d7c:	4b62      	ldr	r3, [pc, #392]	; (8000f08 <xTaskResumeAll+0x1dc>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	68db      	ldr	r3, [r3, #12]
 8000d82:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	69db      	ldr	r3, [r3, #28]
 8000d8e:	69fa      	ldr	r2, [r7, #28]
 8000d90:	6a12      	ldr	r2, [r2, #32]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	6a1b      	ldr	r3, [r3, #32]
 8000d98:	69fa      	ldr	r2, [r7, #28]
 8000d9a:	69d2      	ldr	r2, [r2, #28]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	685a      	ldr	r2, [r3, #4]
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3318      	adds	r3, #24
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d103      	bne.n	8000db2 <xTaskResumeAll+0x86>
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	6a1a      	ldr	r2, [r3, #32]
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	2200      	movs	r2, #0
 8000db6:	629a      	str	r2, [r3, #40]	; 0x28
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	1e5a      	subs	r2, r3, #1
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	695b      	ldr	r3, [r3, #20]
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	69fa      	ldr	r2, [r7, #28]
 8000dce:	68d2      	ldr	r2, [r2, #12]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	68db      	ldr	r3, [r3, #12]
 8000dd6:	69fa      	ldr	r2, [r7, #28]
 8000dd8:	6892      	ldr	r2, [r2, #8]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	685a      	ldr	r2, [r3, #4]
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	3304      	adds	r3, #4
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d103      	bne.n	8000df0 <xTaskResumeAll+0xc4>
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	68da      	ldr	r2, [r3, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	2200      	movs	r2, #0
 8000df4:	615a      	str	r2, [r3, #20]
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	1e5a      	subs	r2, r3, #1
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e04:	2201      	movs	r2, #1
 8000e06:	409a      	lsls	r2, r3
 8000e08:	4b40      	ldr	r3, [pc, #256]	; (8000f0c <xTaskResumeAll+0x1e0>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	4a3f      	ldr	r2, [pc, #252]	; (8000f0c <xTaskResumeAll+0x1e0>)
 8000e10:	6013      	str	r3, [r2, #0]
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e16:	493e      	ldr	r1, [pc, #248]	; (8000f10 <xTaskResumeAll+0x1e4>)
 8000e18:	4613      	mov	r3, r2
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	4413      	add	r3, r2
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	440b      	add	r3, r1
 8000e22:	3304      	adds	r3, #4
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	68ba      	ldr	r2, [r7, #8]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	689a      	ldr	r2, [r3, #8]
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	69fa      	ldr	r2, [r7, #28]
 8000e3c:	3204      	adds	r2, #4
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	1d1a      	adds	r2, r3, #4
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	4413      	add	r3, r2
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	4a2e      	ldr	r2, [pc, #184]	; (8000f10 <xTaskResumeAll+0x1e4>)
 8000e56:	441a      	add	r2, r3
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	615a      	str	r2, [r3, #20]
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e60:	492b      	ldr	r1, [pc, #172]	; (8000f10 <xTaskResumeAll+0x1e4>)
 8000e62:	4613      	mov	r3, r2
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	4413      	add	r3, r2
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	440b      	add	r3, r1
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	1c59      	adds	r1, r3, #1
 8000e70:	4827      	ldr	r0, [pc, #156]	; (8000f10 <xTaskResumeAll+0x1e4>)
 8000e72:	4613      	mov	r3, r2
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	4413      	add	r3, r2
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	4403      	add	r3, r0
 8000e7c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e82:	4b24      	ldr	r3, [pc, #144]	; (8000f14 <xTaskResumeAll+0x1e8>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d302      	bcc.n	8000e92 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8000e8c:	4b22      	ldr	r3, [pc, #136]	; (8000f18 <xTaskResumeAll+0x1ec>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000e92:	4b1d      	ldr	r3, [pc, #116]	; (8000f08 <xTaskResumeAll+0x1dc>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	f47f af70 	bne.w	8000d7c <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000ea2:	f000 fa57 	bl	8001354 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000ea6:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <xTaskResumeAll+0x1f0>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d010      	beq.n	8000ed4 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000eb2:	f000 f847 	bl	8000f44 <xTaskIncrementTick>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d002      	beq.n	8000ec2 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8000ebc:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <xTaskResumeAll+0x1ec>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	3b01      	subs	r3, #1
 8000ec6:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d1f1      	bne.n	8000eb2 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8000ece:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <xTaskResumeAll+0x1f0>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000ed4:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <xTaskResumeAll+0x1ec>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d009      	beq.n	8000ef0 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8000edc:	2301      	movs	r3, #1
 8000ede:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <xTaskResumeAll+0x1f4>)
 8000ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	f3bf 8f4f 	dsb	sy
 8000eec:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000ef0:	f000 fd8a 	bl	8001a08 <vPortExitCritical>

    return xAlreadyYielded;
 8000ef4:	69bb      	ldr	r3, [r7, #24]
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3720      	adds	r7, #32
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	2000018c 	.word	0x2000018c
 8000f04:	20000164 	.word	0x20000164
 8000f08:	20000124 	.word	0x20000124
 8000f0c:	2000016c 	.word	0x2000016c
 8000f10:	20000068 	.word	0x20000068
 8000f14:	20000064 	.word	0x20000064
 8000f18:	20000178 	.word	0x20000178
 8000f1c:	20000174 	.word	0x20000174
 8000f20:	e000ed04 	.word	0xe000ed04

08000f24 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8000f2a:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <xTaskGetTickCount+0x1c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8000f30:	687b      	ldr	r3, [r7, #4]
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	20000168 	.word	0x20000168

08000f44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	; 0x28
 8000f48:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000f4e:	4b7d      	ldr	r3, [pc, #500]	; (8001144 <xTaskIncrementTick+0x200>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	f040 80ec 	bne.w	8001130 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000f58:	4b7b      	ldr	r3, [pc, #492]	; (8001148 <xTaskIncrementTick+0x204>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000f60:	4a79      	ldr	r2, [pc, #484]	; (8001148 <xTaskIncrementTick+0x204>)
 8000f62:	6a3b      	ldr	r3, [r7, #32]
 8000f64:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000f66:	6a3b      	ldr	r3, [r7, #32]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d120      	bne.n	8000fae <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8000f6c:	4b77      	ldr	r3, [pc, #476]	; (800114c <xTaskIncrementTick+0x208>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d00a      	beq.n	8000f8c <xTaskIncrementTick+0x48>
        __asm volatile
 8000f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f7a:	f383 8811 	msr	BASEPRI, r3
 8000f7e:	f3bf 8f6f 	isb	sy
 8000f82:	f3bf 8f4f 	dsb	sy
 8000f86:	607b      	str	r3, [r7, #4]
    }
 8000f88:	bf00      	nop
 8000f8a:	e7fe      	b.n	8000f8a <xTaskIncrementTick+0x46>
 8000f8c:	4b6f      	ldr	r3, [pc, #444]	; (800114c <xTaskIncrementTick+0x208>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	61fb      	str	r3, [r7, #28]
 8000f92:	4b6f      	ldr	r3, [pc, #444]	; (8001150 <xTaskIncrementTick+0x20c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a6d      	ldr	r2, [pc, #436]	; (800114c <xTaskIncrementTick+0x208>)
 8000f98:	6013      	str	r3, [r2, #0]
 8000f9a:	4a6d      	ldr	r2, [pc, #436]	; (8001150 <xTaskIncrementTick+0x20c>)
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	6013      	str	r3, [r2, #0]
 8000fa0:	4b6c      	ldr	r3, [pc, #432]	; (8001154 <xTaskIncrementTick+0x210>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	4a6b      	ldr	r2, [pc, #428]	; (8001154 <xTaskIncrementTick+0x210>)
 8000fa8:	6013      	str	r3, [r2, #0]
 8000faa:	f000 f9d3 	bl	8001354 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000fae:	4b6a      	ldr	r3, [pc, #424]	; (8001158 <xTaskIncrementTick+0x214>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	6a3a      	ldr	r2, [r7, #32]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	f0c0 80a6 	bcc.w	8001106 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000fba:	4b64      	ldr	r3, [pc, #400]	; (800114c <xTaskIncrementTick+0x208>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d104      	bne.n	8000fce <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000fc4:	4b64      	ldr	r3, [pc, #400]	; (8001158 <xTaskIncrementTick+0x214>)
 8000fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8000fca:	601a      	str	r2, [r3, #0]
                    break;
 8000fcc:	e09b      	b.n	8001106 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000fce:	4b5f      	ldr	r3, [pc, #380]	; (800114c <xTaskIncrementTick+0x208>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8000fde:	6a3a      	ldr	r2, [r7, #32]
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d203      	bcs.n	8000fee <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000fe6:	4a5c      	ldr	r2, [pc, #368]	; (8001158 <xTaskIncrementTick+0x214>)
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8000fec:	e08b      	b.n	8001106 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	68d2      	ldr	r2, [r2, #12]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	6892      	ldr	r2, [r2, #8]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	685a      	ldr	r2, [r3, #4]
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	3304      	adds	r3, #4
 8001010:	429a      	cmp	r2, r3
 8001012:	d103      	bne.n	800101c <xTaskIncrementTick+0xd8>
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	68da      	ldr	r2, [r3, #12]
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	2200      	movs	r2, #0
 8001020:	615a      	str	r2, [r3, #20]
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	1e5a      	subs	r2, r3, #1
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001030:	2b00      	cmp	r3, #0
 8001032:	d01e      	beq.n	8001072 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	6a12      	ldr	r2, [r2, #32]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	6a1b      	ldr	r3, [r3, #32]
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	69d2      	ldr	r2, [r2, #28]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	685a      	ldr	r2, [r3, #4]
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	3318      	adds	r3, #24
 8001056:	429a      	cmp	r2, r3
 8001058:	d103      	bne.n	8001062 <xTaskIncrementTick+0x11e>
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	6a1a      	ldr	r2, [r3, #32]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	2200      	movs	r2, #0
 8001066:	629a      	str	r2, [r3, #40]	; 0x28
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	1e5a      	subs	r2, r3, #1
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001076:	2201      	movs	r2, #1
 8001078:	409a      	lsls	r2, r3
 800107a:	4b38      	ldr	r3, [pc, #224]	; (800115c <xTaskIncrementTick+0x218>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4313      	orrs	r3, r2
 8001080:	4a36      	ldr	r2, [pc, #216]	; (800115c <xTaskIncrementTick+0x218>)
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001088:	4935      	ldr	r1, [pc, #212]	; (8001160 <xTaskIncrementTick+0x21c>)
 800108a:	4613      	mov	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4413      	add	r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	440b      	add	r3, r1
 8001094:	3304      	adds	r3, #4
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	68ba      	ldr	r2, [r7, #8]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	689a      	ldr	r2, [r3, #8]
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	60da      	str	r2, [r3, #12]
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	3204      	adds	r2, #4
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	1d1a      	adds	r2, r3, #4
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010be:	4613      	mov	r3, r2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4413      	add	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4a26      	ldr	r2, [pc, #152]	; (8001160 <xTaskIncrementTick+0x21c>)
 80010c8:	441a      	add	r2, r3
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	615a      	str	r2, [r3, #20]
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010d2:	4923      	ldr	r1, [pc, #140]	; (8001160 <xTaskIncrementTick+0x21c>)
 80010d4:	4613      	mov	r3, r2
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	4413      	add	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	440b      	add	r3, r1
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	1c59      	adds	r1, r3, #1
 80010e2:	481f      	ldr	r0, [pc, #124]	; (8001160 <xTaskIncrementTick+0x21c>)
 80010e4:	4613      	mov	r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	4413      	add	r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	4403      	add	r3, r0
 80010ee:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010f4:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <xTaskIncrementTick+0x220>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fa:	429a      	cmp	r2, r3
 80010fc:	f67f af5d 	bls.w	8000fba <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8001100:	2301      	movs	r3, #1
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001104:	e759      	b.n	8000fba <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001106:	4b17      	ldr	r3, [pc, #92]	; (8001164 <xTaskIncrementTick+0x220>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800110c:	4914      	ldr	r1, [pc, #80]	; (8001160 <xTaskIncrementTick+0x21c>)
 800110e:	4613      	mov	r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	4413      	add	r3, r2
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	440b      	add	r3, r1
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d901      	bls.n	8001122 <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 800111e:	2301      	movs	r3, #1
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <xTaskIncrementTick+0x224>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d007      	beq.n	800113a <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 800112a:	2301      	movs	r3, #1
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
 800112e:	e004      	b.n	800113a <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001130:	4b0e      	ldr	r3, [pc, #56]	; (800116c <xTaskIncrementTick+0x228>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	3301      	adds	r3, #1
 8001136:	4a0d      	ldr	r2, [pc, #52]	; (800116c <xTaskIncrementTick+0x228>)
 8001138:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800113c:	4618      	mov	r0, r3
 800113e:	3728      	adds	r7, #40	; 0x28
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	2000018c 	.word	0x2000018c
 8001148:	20000168 	.word	0x20000168
 800114c:	2000011c 	.word	0x2000011c
 8001150:	20000120 	.word	0x20000120
 8001154:	2000017c 	.word	0x2000017c
 8001158:	20000184 	.word	0x20000184
 800115c:	2000016c 	.word	0x2000016c
 8001160:	20000068 	.word	0x20000068
 8001164:	20000064 	.word	0x20000064
 8001168:	20000178 	.word	0x20000178
 800116c:	20000174 	.word	0x20000174

08001170 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001170:	b480      	push	{r7}
 8001172:	b087      	sub	sp, #28
 8001174:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001176:	4b27      	ldr	r3, [pc, #156]	; (8001214 <vTaskSwitchContext+0xa4>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800117e:	4b26      	ldr	r3, [pc, #152]	; (8001218 <vTaskSwitchContext+0xa8>)
 8001180:	2201      	movs	r2, #1
 8001182:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001184:	e03f      	b.n	8001206 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8001186:	4b24      	ldr	r3, [pc, #144]	; (8001218 <vTaskSwitchContext+0xa8>)
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800118c:	4b23      	ldr	r3, [pc, #140]	; (800121c <vTaskSwitchContext+0xac>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	fab3 f383 	clz	r3, r3
 8001198:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800119a:	7afb      	ldrb	r3, [r7, #11]
 800119c:	f1c3 031f 	rsb	r3, r3, #31
 80011a0:	617b      	str	r3, [r7, #20]
 80011a2:	491f      	ldr	r1, [pc, #124]	; (8001220 <vTaskSwitchContext+0xb0>)
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	4613      	mov	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	440b      	add	r3, r1
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10a      	bne.n	80011cc <vTaskSwitchContext+0x5c>
        __asm volatile
 80011b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011ba:	f383 8811 	msr	BASEPRI, r3
 80011be:	f3bf 8f6f 	isb	sy
 80011c2:	f3bf 8f4f 	dsb	sy
 80011c6:	607b      	str	r3, [r7, #4]
    }
 80011c8:	bf00      	nop
 80011ca:	e7fe      	b.n	80011ca <vTaskSwitchContext+0x5a>
 80011cc:	697a      	ldr	r2, [r7, #20]
 80011ce:	4613      	mov	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4413      	add	r3, r2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	4a12      	ldr	r2, [pc, #72]	; (8001220 <vTaskSwitchContext+0xb0>)
 80011d8:	4413      	add	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	685a      	ldr	r2, [r3, #4]
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	3308      	adds	r3, #8
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d104      	bne.n	80011fc <vTaskSwitchContext+0x8c>
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	4a08      	ldr	r2, [pc, #32]	; (8001224 <vTaskSwitchContext+0xb4>)
 8001204:	6013      	str	r3, [r2, #0]
}
 8001206:	bf00      	nop
 8001208:	371c      	adds	r7, #28
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	2000018c 	.word	0x2000018c
 8001218:	20000178 	.word	0x20000178
 800121c:	2000016c 	.word	0x2000016c
 8001220:	20000068 	.word	0x20000068
 8001224:	20000064 	.word	0x20000064

08001228 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001230:	f000 f852 	bl	80012d8 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <prvIdleTask+0x28>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d9f9      	bls.n	8001230 <prvIdleTask+0x8>
            {
                taskYIELD();
 800123c:	4b05      	ldr	r3, [pc, #20]	; (8001254 <prvIdleTask+0x2c>)
 800123e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	f3bf 8f4f 	dsb	sy
 8001248:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800124c:	e7f0      	b.n	8001230 <prvIdleTask+0x8>
 800124e:	bf00      	nop
 8001250:	20000068 	.word	0x20000068
 8001254:	e000ed04 	.word	0xe000ed04

08001258 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800125e:	2300      	movs	r3, #0
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	e00c      	b.n	800127e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	4613      	mov	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	4413      	add	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4a12      	ldr	r2, [pc, #72]	; (80012b8 <prvInitialiseTaskLists+0x60>)
 8001270:	4413      	add	r3, r2
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff f94a 	bl	800050c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3301      	adds	r3, #1
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2b06      	cmp	r3, #6
 8001282:	d9ef      	bls.n	8001264 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001284:	480d      	ldr	r0, [pc, #52]	; (80012bc <prvInitialiseTaskLists+0x64>)
 8001286:	f7ff f941 	bl	800050c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800128a:	480d      	ldr	r0, [pc, #52]	; (80012c0 <prvInitialiseTaskLists+0x68>)
 800128c:	f7ff f93e 	bl	800050c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001290:	480c      	ldr	r0, [pc, #48]	; (80012c4 <prvInitialiseTaskLists+0x6c>)
 8001292:	f7ff f93b 	bl	800050c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8001296:	480c      	ldr	r0, [pc, #48]	; (80012c8 <prvInitialiseTaskLists+0x70>)
 8001298:	f7ff f938 	bl	800050c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800129c:	480b      	ldr	r0, [pc, #44]	; (80012cc <prvInitialiseTaskLists+0x74>)
 800129e:	f7ff f935 	bl	800050c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80012a2:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <prvInitialiseTaskLists+0x78>)
 80012a4:	4a05      	ldr	r2, [pc, #20]	; (80012bc <prvInitialiseTaskLists+0x64>)
 80012a6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80012a8:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <prvInitialiseTaskLists+0x7c>)
 80012aa:	4a05      	ldr	r2, [pc, #20]	; (80012c0 <prvInitialiseTaskLists+0x68>)
 80012ac:	601a      	str	r2, [r3, #0]
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000068 	.word	0x20000068
 80012bc:	200000f4 	.word	0x200000f4
 80012c0:	20000108 	.word	0x20000108
 80012c4:	20000124 	.word	0x20000124
 80012c8:	20000138 	.word	0x20000138
 80012cc:	20000150 	.word	0x20000150
 80012d0:	2000011c 	.word	0x2000011c
 80012d4:	20000120 	.word	0x20000120

080012d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80012de:	e019      	b.n	8001314 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80012e0:	f000 fb62 	bl	80019a8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80012e4:	4b10      	ldr	r3, [pc, #64]	; (8001328 <prvCheckTasksWaitingTermination+0x50>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3304      	adds	r3, #4
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff f995 	bl	8000620 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80012f6:	4b0d      	ldr	r3, [pc, #52]	; (800132c <prvCheckTasksWaitingTermination+0x54>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	4a0b      	ldr	r2, [pc, #44]	; (800132c <prvCheckTasksWaitingTermination+0x54>)
 80012fe:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8001300:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <prvCheckTasksWaitingTermination+0x58>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	3b01      	subs	r3, #1
 8001306:	4a0a      	ldr	r2, [pc, #40]	; (8001330 <prvCheckTasksWaitingTermination+0x58>)
 8001308:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800130a:	f000 fb7d 	bl	8001a08 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f000 f810 	bl	8001334 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <prvCheckTasksWaitingTermination+0x58>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1e1      	bne.n	80012e0 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000138 	.word	0x20000138
 800132c:	20000164 	.word	0x20000164
 8001330:	2000014c 	.word	0x2000014c

08001334 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001340:	4618      	mov	r0, r3
 8001342:	f000 fd0d 	bl	8001d60 <vPortFree>
            vPortFree( pxTCB );
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f000 fd0a 	bl	8001d60 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001358:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <prvResetNextTaskUnblockTime+0x30>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d104      	bne.n	800136c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001362:	4b09      	ldr	r3, [pc, #36]	; (8001388 <prvResetNextTaskUnblockTime+0x34>)
 8001364:	f04f 32ff 	mov.w	r2, #4294967295
 8001368:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800136a:	e005      	b.n	8001378 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800136c:	4b05      	ldr	r3, [pc, #20]	; (8001384 <prvResetNextTaskUnblockTime+0x30>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a04      	ldr	r2, [pc, #16]	; (8001388 <prvResetNextTaskUnblockTime+0x34>)
 8001376:	6013      	str	r3, [r2, #0]
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	2000011c 	.word	0x2000011c
 8001388:	20000184 	.word	0x20000184

0800138c <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 800138c:	b580      	push	{r7, lr}
 800138e:	b092      	sub	sp, #72	; 0x48
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
 8001398:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800139a:	2301      	movs	r3, #1
 800139c:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d10a      	bne.n	80013ba <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 80013a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013a8:	f383 8811 	msr	BASEPRI, r3
 80013ac:	f3bf 8f6f 	isb	sy
 80013b0:	f3bf 8f4f 	dsb	sy
 80013b4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80013b6:	bf00      	nop
 80013b8:	e7fe      	b.n	80013b8 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d00a      	beq.n	80013d6 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 80013c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013c4:	f383 8811 	msr	BASEPRI, r3
 80013c8:	f3bf 8f6f 	isb	sy
 80013cc:	f3bf 8f4f 	dsb	sy
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80013d2:	bf00      	nop
 80013d4:	e7fe      	b.n	80013d4 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80013d6:	f000 fbc9 	bl	8001b6c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	643b      	str	r3, [r7, #64]	; 0x40
        __asm volatile
 80013de:	f3ef 8211 	mrs	r2, BASEPRI
 80013e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013e6:	f383 8811 	msr	BASEPRI, r3
 80013ea:	f3bf 8f6f 	isb	sy
 80013ee:	f3bf 8f4f 	dsb	sy
 80013f2:	623a      	str	r2, [r7, #32]
 80013f4:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 80013f6:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80013f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 80013fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d007      	beq.n	8001410 <xTaskGenericNotifyFromISR+0x84>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8001400:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	3312      	adds	r3, #18
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	685a      	ldr	r2, [r3, #4]
 800140c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800140e:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8001410:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	4413      	add	r3, r2
 8001416:	3350      	adds	r3, #80	; 0x50
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800141e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	4413      	add	r3, r2
 8001424:	3350      	adds	r3, #80	; 0x50
 8001426:	2202      	movs	r2, #2
 8001428:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800142a:	78fb      	ldrb	r3, [r7, #3]
 800142c:	2b04      	cmp	r3, #4
 800142e:	d841      	bhi.n	80014b4 <xTaskGenericNotifyFromISR+0x128>
 8001430:	a201      	add	r2, pc, #4	; (adr r2, 8001438 <xTaskGenericNotifyFromISR+0xac>)
 8001432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001436:	bf00      	nop
 8001438:	080014d3 	.word	0x080014d3
 800143c:	0800144d 	.word	0x0800144d
 8001440:	0800146b 	.word	0x0800146b
 8001444:	08001487 	.word	0x08001487
 8001448:	08001497 	.word	0x08001497
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800144c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	3312      	adds	r3, #18
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	431a      	orrs	r2, r3
 800145c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	3312      	adds	r3, #18
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	440b      	add	r3, r1
 8001466:	605a      	str	r2, [r3, #4]
                    break;
 8001468:	e036      	b.n	80014d8 <xTaskGenericNotifyFromISR+0x14c>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800146a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	3312      	adds	r3, #18
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	1c5a      	adds	r2, r3, #1
 8001478:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	3312      	adds	r3, #18
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	440b      	add	r3, r1
 8001482:	605a      	str	r2, [r3, #4]
                    break;
 8001484:	e028      	b.n	80014d8 <xTaskGenericNotifyFromISR+0x14c>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001486:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	3312      	adds	r3, #18
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	605a      	str	r2, [r3, #4]
                    break;
 8001494:	e020      	b.n	80014d8 <xTaskGenericNotifyFromISR+0x14c>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8001496:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800149a:	2b02      	cmp	r3, #2
 800149c:	d007      	beq.n	80014ae <xTaskGenericNotifyFromISR+0x122>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800149e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	3312      	adds	r3, #18
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80014ac:	e014      	b.n	80014d8 <xTaskGenericNotifyFromISR+0x14c>
                        xReturn = pdFAIL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 80014b2:	e011      	b.n	80014d8 <xTaskGenericNotifyFromISR+0x14c>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80014b4:	4b5f      	ldr	r3, [pc, #380]	; (8001634 <xTaskGenericNotifyFromISR+0x2a8>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d00c      	beq.n	80014d6 <xTaskGenericNotifyFromISR+0x14a>
        __asm volatile
 80014bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014c0:	f383 8811 	msr	BASEPRI, r3
 80014c4:	f3bf 8f6f 	isb	sy
 80014c8:	f3bf 8f4f 	dsb	sy
 80014cc:	61bb      	str	r3, [r7, #24]
    }
 80014ce:	bf00      	nop
 80014d0:	e7fe      	b.n	80014d0 <xTaskGenericNotifyFromISR+0x144>
                    break;
 80014d2:	bf00      	nop
 80014d4:	e000      	b.n	80014d8 <xTaskGenericNotifyFromISR+0x14c>
                    break;
 80014d6:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80014d8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80014dc:	2b01      	cmp	r3, #1
 80014de:	f040 809e 	bne.w	800161e <xTaskGenericNotifyFromISR+0x292>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80014e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d00a      	beq.n	8001500 <xTaskGenericNotifyFromISR+0x174>
        __asm volatile
 80014ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014ee:	f383 8811 	msr	BASEPRI, r3
 80014f2:	f3bf 8f6f 	isb	sy
 80014f6:	f3bf 8f4f 	dsb	sy
 80014fa:	617b      	str	r3, [r7, #20]
    }
 80014fc:	bf00      	nop
 80014fe:	e7fe      	b.n	80014fe <xTaskGenericNotifyFromISR+0x172>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001500:	4b4d      	ldr	r3, [pc, #308]	; (8001638 <xTaskGenericNotifyFromISR+0x2ac>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d15e      	bne.n	80015c6 <xTaskGenericNotifyFromISR+0x23a>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800150a:	695b      	ldr	r3, [r3, #20]
 800150c:	633b      	str	r3, [r7, #48]	; 0x30
 800150e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001514:	68d2      	ldr	r2, [r2, #12]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800151e:	6892      	ldr	r2, [r2, #8]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001524:	685a      	ldr	r2, [r3, #4]
 8001526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001528:	3304      	adds	r3, #4
 800152a:	429a      	cmp	r2, r3
 800152c:	d103      	bne.n	8001536 <xTaskGenericNotifyFromISR+0x1aa>
 800152e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001530:	68da      	ldr	r2, [r3, #12]
 8001532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001538:	2200      	movs	r2, #0
 800153a:	615a      	str	r2, [r3, #20]
 800153c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	1e5a      	subs	r2, r3, #1
 8001542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001544:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154a:	2201      	movs	r2, #1
 800154c:	409a      	lsls	r2, r3
 800154e:	4b3b      	ldr	r3, [pc, #236]	; (800163c <xTaskGenericNotifyFromISR+0x2b0>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4313      	orrs	r3, r2
 8001554:	4a39      	ldr	r2, [pc, #228]	; (800163c <xTaskGenericNotifyFromISR+0x2b0>)
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800155a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800155c:	4938      	ldr	r1, [pc, #224]	; (8001640 <xTaskGenericNotifyFromISR+0x2b4>)
 800155e:	4613      	mov	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4413      	add	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	440b      	add	r3, r1
 8001568:	3304      	adds	r3, #4
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800156e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001576:	689a      	ldr	r2, [r3, #8]
 8001578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800157a:	60da      	str	r2, [r3, #12]
 800157c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001582:	3204      	adds	r2, #4
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001588:	1d1a      	adds	r2, r3, #4
 800158a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001592:	4613      	mov	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4413      	add	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4a29      	ldr	r2, [pc, #164]	; (8001640 <xTaskGenericNotifyFromISR+0x2b4>)
 800159c:	441a      	add	r2, r3
 800159e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015a0:	615a      	str	r2, [r3, #20]
 80015a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015a6:	4926      	ldr	r1, [pc, #152]	; (8001640 <xTaskGenericNotifyFromISR+0x2b4>)
 80015a8:	4613      	mov	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	1c59      	adds	r1, r3, #1
 80015b6:	4822      	ldr	r0, [pc, #136]	; (8001640 <xTaskGenericNotifyFromISR+0x2b4>)
 80015b8:	4613      	mov	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4403      	add	r3, r0
 80015c2:	6019      	str	r1, [r3, #0]
 80015c4:	e01b      	b.n	80015fe <xTaskGenericNotifyFromISR+0x272>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80015c6:	4b1f      	ldr	r3, [pc, #124]	; (8001644 <xTaskGenericNotifyFromISR+0x2b8>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	637b      	str	r3, [r7, #52]	; 0x34
 80015cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015d0:	61da      	str	r2, [r3, #28]
 80015d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015d8:	621a      	str	r2, [r3, #32]
 80015da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80015e0:	3218      	adds	r2, #24
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015e6:	f103 0218 	add.w	r2, r3, #24
 80015ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015f0:	4a14      	ldr	r2, [pc, #80]	; (8001644 <xTaskGenericNotifyFromISR+0x2b8>)
 80015f2:	629a      	str	r2, [r3, #40]	; 0x28
 80015f4:	4b13      	ldr	r3, [pc, #76]	; (8001644 <xTaskGenericNotifyFromISR+0x2b8>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	3301      	adds	r3, #1
 80015fa:	4a12      	ldr	r2, [pc, #72]	; (8001644 <xTaskGenericNotifyFromISR+0x2b8>)
 80015fc:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80015fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <xTaskGenericNotifyFromISR+0x2bc>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001608:	429a      	cmp	r2, r3
 800160a:	d908      	bls.n	800161e <xTaskGenericNotifyFromISR+0x292>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 800160c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800160e:	2b00      	cmp	r3, #0
 8001610:	d002      	beq.n	8001618 <xTaskGenericNotifyFromISR+0x28c>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8001612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001614:	2201      	movs	r2, #1
 8001616:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <xTaskGenericNotifyFromISR+0x2c0>)
 800161a:	2201      	movs	r2, #1
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001620:	613b      	str	r3, [r7, #16]
        __asm volatile
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	f383 8811 	msr	BASEPRI, r3
    }
 8001628:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 800162a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 800162c:	4618      	mov	r0, r3
 800162e:	3748      	adds	r7, #72	; 0x48
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20000168 	.word	0x20000168
 8001638:	2000018c 	.word	0x2000018c
 800163c:	2000016c 	.word	0x2000016c
 8001640:	20000068 	.word	0x20000068
 8001644:	20000124 	.word	0x20000124
 8001648:	20000064 	.word	0x20000064
 800164c:	20000178 	.word	0x20000178

08001650 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800165a:	4b36      	ldr	r3, [pc, #216]	; (8001734 <prvAddCurrentTaskToDelayedList+0xe4>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001660:	4b35      	ldr	r3, [pc, #212]	; (8001738 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	3304      	adds	r3, #4
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe ffda 	bl	8000620 <uxListRemove>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d10b      	bne.n	800168a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001672:	4b31      	ldr	r3, [pc, #196]	; (8001738 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001678:	2201      	movs	r2, #1
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43da      	mvns	r2, r3
 8001680:	4b2e      	ldr	r3, [pc, #184]	; (800173c <prvAddCurrentTaskToDelayedList+0xec>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4013      	ands	r3, r2
 8001686:	4a2d      	ldr	r2, [pc, #180]	; (800173c <prvAddCurrentTaskToDelayedList+0xec>)
 8001688:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001690:	d124      	bne.n	80016dc <prvAddCurrentTaskToDelayedList+0x8c>
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d021      	beq.n	80016dc <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001698:	4b29      	ldr	r3, [pc, #164]	; (8001740 <prvAddCurrentTaskToDelayedList+0xf0>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	4b26      	ldr	r3, [pc, #152]	; (8001738 <prvAddCurrentTaskToDelayedList+0xe8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	4b24      	ldr	r3, [pc, #144]	; (8001738 <prvAddCurrentTaskToDelayedList+0xe8>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	6892      	ldr	r2, [r2, #8]
 80016ae:	60da      	str	r2, [r3, #12]
 80016b0:	4b21      	ldr	r3, [pc, #132]	; (8001738 <prvAddCurrentTaskToDelayedList+0xe8>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	3204      	adds	r2, #4
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	4b1e      	ldr	r3, [pc, #120]	; (8001738 <prvAddCurrentTaskToDelayedList+0xe8>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	1d1a      	adds	r2, r3, #4
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	4b1c      	ldr	r3, [pc, #112]	; (8001738 <prvAddCurrentTaskToDelayedList+0xe8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a1d      	ldr	r2, [pc, #116]	; (8001740 <prvAddCurrentTaskToDelayedList+0xf0>)
 80016cc:	615a      	str	r2, [r3, #20]
 80016ce:	4b1c      	ldr	r3, [pc, #112]	; (8001740 <prvAddCurrentTaskToDelayedList+0xf0>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	3301      	adds	r3, #1
 80016d4:	4a1a      	ldr	r2, [pc, #104]	; (8001740 <prvAddCurrentTaskToDelayedList+0xf0>)
 80016d6:	6013      	str	r3, [r2, #0]
 80016d8:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80016da:	e026      	b.n	800172a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4413      	add	r3, r2
 80016e2:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80016e4:	4b14      	ldr	r3, [pc, #80]	; (8001738 <prvAddCurrentTaskToDelayedList+0xe8>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80016ec:	68fa      	ldr	r2, [r7, #12]
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d209      	bcs.n	8001708 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80016f4:	4b13      	ldr	r3, [pc, #76]	; (8001744 <prvAddCurrentTaskToDelayedList+0xf4>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <prvAddCurrentTaskToDelayedList+0xe8>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	3304      	adds	r3, #4
 80016fe:	4619      	mov	r1, r3
 8001700:	4610      	mov	r0, r2
 8001702:	f7fe ff54 	bl	80005ae <vListInsert>
}
 8001706:	e010      	b.n	800172a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001708:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <prvAddCurrentTaskToDelayedList+0xf8>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <prvAddCurrentTaskToDelayedList+0xe8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	3304      	adds	r3, #4
 8001712:	4619      	mov	r1, r3
 8001714:	4610      	mov	r0, r2
 8001716:	f7fe ff4a 	bl	80005ae <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800171a:	4b0c      	ldr	r3, [pc, #48]	; (800174c <prvAddCurrentTaskToDelayedList+0xfc>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	429a      	cmp	r2, r3
 8001722:	d202      	bcs.n	800172a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8001724:	4a09      	ldr	r2, [pc, #36]	; (800174c <prvAddCurrentTaskToDelayedList+0xfc>)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6013      	str	r3, [r2, #0]
}
 800172a:	bf00      	nop
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000168 	.word	0x20000168
 8001738:	20000064 	.word	0x20000064
 800173c:	2000016c 	.word	0x2000016c
 8001740:	20000150 	.word	0x20000150
 8001744:	20000120 	.word	0x20000120
 8001748:	2000011c 	.word	0x2000011c
 800174c:	20000184 	.word	0x20000184

08001750 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	3b04      	subs	r3, #4
 8001760:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001768:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	3b04      	subs	r3, #4
 800176e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	f023 0201 	bic.w	r2, r3, #1
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	3b04      	subs	r3, #4
 800177e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001780:	4a0c      	ldr	r2, [pc, #48]	; (80017b4 <pxPortInitialiseStack+0x64>)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	3b14      	subs	r3, #20
 800178a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	3b04      	subs	r3, #4
 8001796:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f06f 0202 	mvn.w	r2, #2
 800179e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	3b20      	subs	r3, #32
 80017a4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80017a6:	68fb      	ldr	r3, [r7, #12]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	080017b9 	.word	0x080017b9

080017b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80017c2:	4b12      	ldr	r3, [pc, #72]	; (800180c <prvTaskExitError+0x54>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ca:	d00a      	beq.n	80017e2 <prvTaskExitError+0x2a>
        __asm volatile
 80017cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017d0:	f383 8811 	msr	BASEPRI, r3
 80017d4:	f3bf 8f6f 	isb	sy
 80017d8:	f3bf 8f4f 	dsb	sy
 80017dc:	60fb      	str	r3, [r7, #12]
    }
 80017de:	bf00      	nop
 80017e0:	e7fe      	b.n	80017e0 <prvTaskExitError+0x28>
        __asm volatile
 80017e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017e6:	f383 8811 	msr	BASEPRI, r3
 80017ea:	f3bf 8f6f 	isb	sy
 80017ee:	f3bf 8f4f 	dsb	sy
 80017f2:	60bb      	str	r3, [r7, #8]
    }
 80017f4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80017f6:	bf00      	nop
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0fc      	beq.n	80017f8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80017fe:	bf00      	nop
 8001800:	bf00      	nop
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	20000004 	.word	0x20000004

08001810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001810:	4b07      	ldr	r3, [pc, #28]	; (8001830 <pxCurrentTCBConst2>)
 8001812:	6819      	ldr	r1, [r3, #0]
 8001814:	6808      	ldr	r0, [r1, #0]
 8001816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800181a:	f380 8809 	msr	PSP, r0
 800181e:	f3bf 8f6f 	isb	sy
 8001822:	f04f 0000 	mov.w	r0, #0
 8001826:	f380 8811 	msr	BASEPRI, r0
 800182a:	4770      	bx	lr
 800182c:	f3af 8000 	nop.w

08001830 <pxCurrentTCBConst2>:
 8001830:	20000064 	.word	0x20000064
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001834:	bf00      	nop
 8001836:	bf00      	nop

08001838 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8001838:	4808      	ldr	r0, [pc, #32]	; (800185c <prvPortStartFirstTask+0x24>)
 800183a:	6800      	ldr	r0, [r0, #0]
 800183c:	6800      	ldr	r0, [r0, #0]
 800183e:	f380 8808 	msr	MSP, r0
 8001842:	f04f 0000 	mov.w	r0, #0
 8001846:	f380 8814 	msr	CONTROL, r0
 800184a:	b662      	cpsie	i
 800184c:	b661      	cpsie	f
 800184e:	f3bf 8f4f 	dsb	sy
 8001852:	f3bf 8f6f 	isb	sy
 8001856:	df00      	svc	0
 8001858:	bf00      	nop
 800185a:	0000      	.short	0x0000
 800185c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001860:	bf00      	nop
 8001862:	bf00      	nop

08001864 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800186a:	4b46      	ldr	r3, [pc, #280]	; (8001984 <xPortStartScheduler+0x120>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a46      	ldr	r2, [pc, #280]	; (8001988 <xPortStartScheduler+0x124>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d10a      	bne.n	800188a <xPortStartScheduler+0x26>
        __asm volatile
 8001874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001878:	f383 8811 	msr	BASEPRI, r3
 800187c:	f3bf 8f6f 	isb	sy
 8001880:	f3bf 8f4f 	dsb	sy
 8001884:	613b      	str	r3, [r7, #16]
    }
 8001886:	bf00      	nop
 8001888:	e7fe      	b.n	8001888 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800188a:	4b3e      	ldr	r3, [pc, #248]	; (8001984 <xPortStartScheduler+0x120>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a3f      	ldr	r2, [pc, #252]	; (800198c <xPortStartScheduler+0x128>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d10a      	bne.n	80018aa <xPortStartScheduler+0x46>
        __asm volatile
 8001894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001898:	f383 8811 	msr	BASEPRI, r3
 800189c:	f3bf 8f6f 	isb	sy
 80018a0:	f3bf 8f4f 	dsb	sy
 80018a4:	60fb      	str	r3, [r7, #12]
    }
 80018a6:	bf00      	nop
 80018a8:	e7fe      	b.n	80018a8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80018aa:	4b39      	ldr	r3, [pc, #228]	; (8001990 <xPortStartScheduler+0x12c>)
 80018ac:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	22ff      	movs	r2, #255	; 0xff
 80018ba:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80018c4:	78fb      	ldrb	r3, [r7, #3]
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	4b31      	ldr	r3, [pc, #196]	; (8001994 <xPortStartScheduler+0x130>)
 80018d0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80018d2:	4b31      	ldr	r3, [pc, #196]	; (8001998 <xPortStartScheduler+0x134>)
 80018d4:	2207      	movs	r2, #7
 80018d6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80018d8:	e009      	b.n	80018ee <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 80018da:	4b2f      	ldr	r3, [pc, #188]	; (8001998 <xPortStartScheduler+0x134>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	3b01      	subs	r3, #1
 80018e0:	4a2d      	ldr	r2, [pc, #180]	; (8001998 <xPortStartScheduler+0x134>)
 80018e2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80018e4:	78fb      	ldrb	r3, [r7, #3]
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80018ee:	78fb      	ldrb	r3, [r7, #3]
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018f6:	2b80      	cmp	r3, #128	; 0x80
 80018f8:	d0ef      	beq.n	80018da <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80018fa:	4b27      	ldr	r3, [pc, #156]	; (8001998 <xPortStartScheduler+0x134>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f1c3 0307 	rsb	r3, r3, #7
 8001902:	2b04      	cmp	r3, #4
 8001904:	d00a      	beq.n	800191c <xPortStartScheduler+0xb8>
        __asm volatile
 8001906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800190a:	f383 8811 	msr	BASEPRI, r3
 800190e:	f3bf 8f6f 	isb	sy
 8001912:	f3bf 8f4f 	dsb	sy
 8001916:	60bb      	str	r3, [r7, #8]
    }
 8001918:	bf00      	nop
 800191a:	e7fe      	b.n	800191a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800191c:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <xPortStartScheduler+0x134>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	021b      	lsls	r3, r3, #8
 8001922:	4a1d      	ldr	r2, [pc, #116]	; (8001998 <xPortStartScheduler+0x134>)
 8001924:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001926:	4b1c      	ldr	r3, [pc, #112]	; (8001998 <xPortStartScheduler+0x134>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800192e:	4a1a      	ldr	r2, [pc, #104]	; (8001998 <xPortStartScheduler+0x134>)
 8001930:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	b2da      	uxtb	r2, r3
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800193a:	4b18      	ldr	r3, [pc, #96]	; (800199c <xPortStartScheduler+0x138>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a17      	ldr	r2, [pc, #92]	; (800199c <xPortStartScheduler+0x138>)
 8001940:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001944:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001946:	4b15      	ldr	r3, [pc, #84]	; (800199c <xPortStartScheduler+0x138>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a14      	ldr	r2, [pc, #80]	; (800199c <xPortStartScheduler+0x138>)
 800194c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001950:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001952:	f000 f8db 	bl	8001b0c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001956:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <xPortStartScheduler+0x13c>)
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800195c:	f000 f8fa 	bl	8001b54 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001960:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <xPortStartScheduler+0x140>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a0f      	ldr	r2, [pc, #60]	; (80019a4 <xPortStartScheduler+0x140>)
 8001966:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800196a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800196c:	f7ff ff64 	bl	8001838 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001970:	f7ff fbfe 	bl	8001170 <vTaskSwitchContext>
    prvTaskExitError();
 8001974:	f7ff ff20 	bl	80017b8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	e000ed00 	.word	0xe000ed00
 8001988:	410fc271 	.word	0x410fc271
 800198c:	410fc270 	.word	0x410fc270
 8001990:	e000e400 	.word	0xe000e400
 8001994:	20000190 	.word	0x20000190
 8001998:	20000194 	.word	0x20000194
 800199c:	e000ed20 	.word	0xe000ed20
 80019a0:	20000004 	.word	0x20000004
 80019a4:	e000ef34 	.word	0xe000ef34

080019a8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
        __asm volatile
 80019ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019b2:	f383 8811 	msr	BASEPRI, r3
 80019b6:	f3bf 8f6f 	isb	sy
 80019ba:	f3bf 8f4f 	dsb	sy
 80019be:	607b      	str	r3, [r7, #4]
    }
 80019c0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80019c2:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <vPortEnterCritical+0x58>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	3301      	adds	r3, #1
 80019c8:	4a0d      	ldr	r2, [pc, #52]	; (8001a00 <vPortEnterCritical+0x58>)
 80019ca:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <vPortEnterCritical+0x58>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d10f      	bne.n	80019f4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80019d4:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <vPortEnterCritical+0x5c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d00a      	beq.n	80019f4 <vPortEnterCritical+0x4c>
        __asm volatile
 80019de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019e2:	f383 8811 	msr	BASEPRI, r3
 80019e6:	f3bf 8f6f 	isb	sy
 80019ea:	f3bf 8f4f 	dsb	sy
 80019ee:	603b      	str	r3, [r7, #0]
    }
 80019f0:	bf00      	nop
 80019f2:	e7fe      	b.n	80019f2 <vPortEnterCritical+0x4a>
    }
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	20000004 	.word	0x20000004
 8001a04:	e000ed04 	.word	0xe000ed04

08001a08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8001a0e:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <vPortExitCritical+0x50>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10a      	bne.n	8001a2c <vPortExitCritical+0x24>
        __asm volatile
 8001a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a1a:	f383 8811 	msr	BASEPRI, r3
 8001a1e:	f3bf 8f6f 	isb	sy
 8001a22:	f3bf 8f4f 	dsb	sy
 8001a26:	607b      	str	r3, [r7, #4]
    }
 8001a28:	bf00      	nop
 8001a2a:	e7fe      	b.n	8001a2a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8001a2c:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <vPortExitCritical+0x50>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	3b01      	subs	r3, #1
 8001a32:	4a09      	ldr	r2, [pc, #36]	; (8001a58 <vPortExitCritical+0x50>)
 8001a34:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001a36:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <vPortExitCritical+0x50>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d105      	bne.n	8001a4a <vPortExitCritical+0x42>
 8001a3e:	2300      	movs	r3, #0
 8001a40:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	f383 8811 	msr	BASEPRI, r3
    }
 8001a48:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	20000004 	.word	0x20000004
 8001a5c:	00000000 	.word	0x00000000

08001a60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001a60:	f3ef 8009 	mrs	r0, PSP
 8001a64:	f3bf 8f6f 	isb	sy
 8001a68:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <pxCurrentTCBConst>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	f01e 0f10 	tst.w	lr, #16
 8001a70:	bf08      	it	eq
 8001a72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001a76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a7a:	6010      	str	r0, [r2, #0]
 8001a7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001a80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001a84:	f380 8811 	msr	BASEPRI, r0
 8001a88:	f3bf 8f4f 	dsb	sy
 8001a8c:	f3bf 8f6f 	isb	sy
 8001a90:	f7ff fb6e 	bl	8001170 <vTaskSwitchContext>
 8001a94:	f04f 0000 	mov.w	r0, #0
 8001a98:	f380 8811 	msr	BASEPRI, r0
 8001a9c:	bc09      	pop	{r0, r3}
 8001a9e:	6819      	ldr	r1, [r3, #0]
 8001aa0:	6808      	ldr	r0, [r1, #0]
 8001aa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001aa6:	f01e 0f10 	tst.w	lr, #16
 8001aaa:	bf08      	it	eq
 8001aac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001ab0:	f380 8809 	msr	PSP, r0
 8001ab4:	f3bf 8f6f 	isb	sy
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	f3af 8000 	nop.w

08001ac0 <pxCurrentTCBConst>:
 8001ac0:	20000064 	.word	0x20000064
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001ac4:	bf00      	nop
 8001ac6:	bf00      	nop

08001ac8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
        __asm volatile
 8001ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ad2:	f383 8811 	msr	BASEPRI, r3
 8001ad6:	f3bf 8f6f 	isb	sy
 8001ada:	f3bf 8f4f 	dsb	sy
 8001ade:	607b      	str	r3, [r7, #4]
    }
 8001ae0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001ae2:	f7ff fa2f 	bl	8000f44 <xTaskIncrementTick>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <SysTick_Handler+0x40>)
 8001aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	2300      	movs	r3, #0
 8001af6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	f383 8811 	msr	BASEPRI, r3
    }
 8001afe:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8001b00:	bf00      	nop
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	e000ed04 	.word	0xe000ed04

08001b0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001b10:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <vPortSetupTimerInterrupt+0x34>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001b16:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <vPortSetupTimerInterrupt+0x38>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001b1c:	4b0a      	ldr	r3, [pc, #40]	; (8001b48 <vPortSetupTimerInterrupt+0x3c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a0a      	ldr	r2, [pc, #40]	; (8001b4c <vPortSetupTimerInterrupt+0x40>)
 8001b22:	fba2 2303 	umull	r2, r3, r2, r3
 8001b26:	099b      	lsrs	r3, r3, #6
 8001b28:	4a09      	ldr	r2, [pc, #36]	; (8001b50 <vPortSetupTimerInterrupt+0x44>)
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001b2e:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <vPortSetupTimerInterrupt+0x34>)
 8001b30:	2207      	movs	r2, #7
 8001b32:	601a      	str	r2, [r3, #0]
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	e000e010 	.word	0xe000e010
 8001b44:	e000e018 	.word	0xe000e018
 8001b48:	2000003c 	.word	0x2000003c
 8001b4c:	10624dd3 	.word	0x10624dd3
 8001b50:	e000e014 	.word	0xe000e014

08001b54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8001b54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001b64 <vPortEnableVFP+0x10>
 8001b58:	6801      	ldr	r1, [r0, #0]
 8001b5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001b5e:	6001      	str	r1, [r0, #0]
 8001b60:	4770      	bx	lr
 8001b62:	0000      	.short	0x0000
 8001b64:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8001b68:	bf00      	nop
 8001b6a:	bf00      	nop

08001b6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8001b72:	f3ef 8305 	mrs	r3, IPSR
 8001b76:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2b0f      	cmp	r3, #15
 8001b7c:	d914      	bls.n	8001ba8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001b7e:	4a17      	ldr	r2, [pc, #92]	; (8001bdc <vPortValidateInterruptPriority+0x70>)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4413      	add	r3, r2
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001b88:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <vPortValidateInterruptPriority+0x74>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	7afa      	ldrb	r2, [r7, #11]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d20a      	bcs.n	8001ba8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8001b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b96:	f383 8811 	msr	BASEPRI, r3
 8001b9a:	f3bf 8f6f 	isb	sy
 8001b9e:	f3bf 8f4f 	dsb	sy
 8001ba2:	607b      	str	r3, [r7, #4]
    }
 8001ba4:	bf00      	nop
 8001ba6:	e7fe      	b.n	8001ba6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001ba8:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <vPortValidateInterruptPriority+0x78>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001bb0:	4b0d      	ldr	r3, [pc, #52]	; (8001be8 <vPortValidateInterruptPriority+0x7c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d90a      	bls.n	8001bce <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8001bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bbc:	f383 8811 	msr	BASEPRI, r3
 8001bc0:	f3bf 8f6f 	isb	sy
 8001bc4:	f3bf 8f4f 	dsb	sy
 8001bc8:	603b      	str	r3, [r7, #0]
    }
 8001bca:	bf00      	nop
 8001bcc:	e7fe      	b.n	8001bcc <vPortValidateInterruptPriority+0x60>
    }
 8001bce:	bf00      	nop
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000e3f0 	.word	0xe000e3f0
 8001be0:	20000190 	.word	0x20000190
 8001be4:	e000ed0c 	.word	0xe000ed0c
 8001be8:	20000194 	.word	0x20000194

08001bec <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08a      	sub	sp, #40	; 0x28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8001bf8:	f7ff f88a 	bl	8000d10 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8001bfc:	4b53      	ldr	r3, [pc, #332]	; (8001d4c <pvPortMalloc+0x160>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8001c04:	f000 f908 	bl	8001e18 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d012      	beq.n	8001c34 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8001c0e:	2208      	movs	r2, #8
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	3308      	adds	r3, #8
 8001c1a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d804      	bhi.n	8001c30 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	607b      	str	r3, [r7, #4]
 8001c2e:	e001      	b.n	8001c34 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	db70      	blt.n	8001d1c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d06d      	beq.n	8001d1c <pvPortMalloc+0x130>
 8001c40:	4b43      	ldr	r3, [pc, #268]	; (8001d50 <pvPortMalloc+0x164>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d868      	bhi.n	8001d1c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8001c4a:	4b42      	ldr	r3, [pc, #264]	; (8001d54 <pvPortMalloc+0x168>)
 8001c4c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8001c4e:	4b41      	ldr	r3, [pc, #260]	; (8001d54 <pvPortMalloc+0x168>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001c54:	e004      	b.n	8001c60 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d903      	bls.n	8001c72 <pvPortMalloc+0x86>
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f1      	bne.n	8001c56 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001c72:	4b36      	ldr	r3, [pc, #216]	; (8001d4c <pvPortMalloc+0x160>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d04f      	beq.n	8001d1c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001c7c:	6a3b      	ldr	r3, [r7, #32]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2208      	movs	r2, #8
 8001c82:	4413      	add	r3, r2
 8001c84:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	6a3b      	ldr	r3, [r7, #32]
 8001c8c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	1ad2      	subs	r2, r2, r3
 8001c96:	2308      	movs	r3, #8
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d91f      	bls.n	8001cde <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00a      	beq.n	8001cc6 <pvPortMalloc+0xda>
        __asm volatile
 8001cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cb4:	f383 8811 	msr	BASEPRI, r3
 8001cb8:	f3bf 8f6f 	isb	sy
 8001cbc:	f3bf 8f4f 	dsb	sy
 8001cc0:	613b      	str	r3, [r7, #16]
    }
 8001cc2:	bf00      	nop
 8001cc4:	e7fe      	b.n	8001cc4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	1ad2      	subs	r2, r2, r3
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001cd8:	6978      	ldr	r0, [r7, #20]
 8001cda:	f000 f8f9 	bl	8001ed0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001cde:	4b1c      	ldr	r3, [pc, #112]	; (8001d50 <pvPortMalloc+0x164>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	4a19      	ldr	r2, [pc, #100]	; (8001d50 <pvPortMalloc+0x164>)
 8001cea:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001cec:	4b18      	ldr	r3, [pc, #96]	; (8001d50 <pvPortMalloc+0x164>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <pvPortMalloc+0x16c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d203      	bcs.n	8001d00 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001cf8:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <pvPortMalloc+0x164>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a16      	ldr	r2, [pc, #88]	; (8001d58 <pvPortMalloc+0x16c>)
 8001cfe:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8001d12:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <pvPortMalloc+0x170>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	3301      	adds	r3, #1
 8001d18:	4a10      	ldr	r2, [pc, #64]	; (8001d5c <pvPortMalloc+0x170>)
 8001d1a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8001d1c:	f7ff f806 	bl	8000d2c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00a      	beq.n	8001d40 <pvPortMalloc+0x154>
        __asm volatile
 8001d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d2e:	f383 8811 	msr	BASEPRI, r3
 8001d32:	f3bf 8f6f 	isb	sy
 8001d36:	f3bf 8f4f 	dsb	sy
 8001d3a:	60fb      	str	r3, [r7, #12]
    }
 8001d3c:	bf00      	nop
 8001d3e:	e7fe      	b.n	8001d3e <pvPortMalloc+0x152>
    return pvReturn;
 8001d40:	69fb      	ldr	r3, [r7, #28]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3728      	adds	r7, #40	; 0x28
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000d58 	.word	0x20000d58
 8001d50:	20000d5c 	.word	0x20000d5c
 8001d54:	20000d50 	.word	0x20000d50
 8001d58:	20000d60 	.word	0x20000d60
 8001d5c:	20000d64 	.word	0x20000d64

08001d60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d049      	beq.n	8001e06 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8001d72:	2308      	movs	r3, #8
 8001d74:	425b      	negs	r3, r3
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	4413      	add	r3, r2
 8001d7a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	db0a      	blt.n	8001d9e <vPortFree+0x3e>
        __asm volatile
 8001d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d8c:	f383 8811 	msr	BASEPRI, r3
 8001d90:	f3bf 8f6f 	isb	sy
 8001d94:	f3bf 8f4f 	dsb	sy
 8001d98:	60fb      	str	r3, [r7, #12]
    }
 8001d9a:	bf00      	nop
 8001d9c:	e7fe      	b.n	8001d9c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00a      	beq.n	8001dbc <vPortFree+0x5c>
        __asm volatile
 8001da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001daa:	f383 8811 	msr	BASEPRI, r3
 8001dae:	f3bf 8f6f 	isb	sy
 8001db2:	f3bf 8f4f 	dsb	sy
 8001db6:	60bb      	str	r3, [r7, #8]
    }
 8001db8:	bf00      	nop
 8001dba:	e7fe      	b.n	8001dba <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	0fdb      	lsrs	r3, r3, #31
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d01c      	beq.n	8001e06 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d118      	bne.n	8001e06 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8001de0:	f7fe ff96 	bl	8000d10 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <vPortFree+0xb0>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4413      	add	r3, r2
 8001dee:	4a08      	ldr	r2, [pc, #32]	; (8001e10 <vPortFree+0xb0>)
 8001df0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001df2:	6938      	ldr	r0, [r7, #16]
 8001df4:	f000 f86c 	bl	8001ed0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <vPortFree+0xb4>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	4a05      	ldr	r2, [pc, #20]	; (8001e14 <vPortFree+0xb4>)
 8001e00:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8001e02:	f7fe ff93 	bl	8000d2c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8001e06:	bf00      	nop
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000d5c 	.word	0x20000d5c
 8001e14:	20000d68 	.word	0x20000d68

08001e18 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001e1e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001e22:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8001e24:	4b25      	ldr	r3, [pc, #148]	; (8001ebc <prvHeapInit+0xa4>)
 8001e26:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00c      	beq.n	8001e4c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	3307      	adds	r3, #7
 8001e36:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f023 0307 	bic.w	r3, r3, #7
 8001e3e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8001e40:	68ba      	ldr	r2, [r7, #8]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	4a1d      	ldr	r2, [pc, #116]	; (8001ebc <prvHeapInit+0xa4>)
 8001e48:	4413      	add	r3, r2
 8001e4a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001e50:	4a1b      	ldr	r2, [pc, #108]	; (8001ec0 <prvHeapInit+0xa8>)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8001e56:	4b1a      	ldr	r3, [pc, #104]	; (8001ec0 <prvHeapInit+0xa8>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	4413      	add	r3, r2
 8001e62:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8001e64:	2208      	movs	r2, #8
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	1a9b      	subs	r3, r3, r2
 8001e6a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f023 0307 	bic.w	r3, r3, #7
 8001e72:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4a13      	ldr	r2, [pc, #76]	; (8001ec4 <prvHeapInit+0xac>)
 8001e78:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8001e7a:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <prvHeapInit+0xac>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8001e82:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <prvHeapInit+0xac>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	1ad2      	subs	r2, r2, r3
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001e98:	4b0a      	ldr	r3, [pc, #40]	; (8001ec4 <prvHeapInit+0xac>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	4a08      	ldr	r2, [pc, #32]	; (8001ec8 <prvHeapInit+0xb0>)
 8001ea6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	4a07      	ldr	r2, [pc, #28]	; (8001ecc <prvHeapInit+0xb4>)
 8001eae:	6013      	str	r3, [r2, #0]
}
 8001eb0:	bf00      	nop
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	20000198 	.word	0x20000198
 8001ec0:	20000d50 	.word	0x20000d50
 8001ec4:	20000d58 	.word	0x20000d58
 8001ec8:	20000d60 	.word	0x20000d60
 8001ecc:	20000d5c 	.word	0x20000d5c

08001ed0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001ed8:	4b28      	ldr	r3, [pc, #160]	; (8001f7c <prvInsertBlockIntoFreeList+0xac>)
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	e002      	b.n	8001ee4 <prvInsertBlockIntoFreeList+0x14>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d8f7      	bhi.n	8001ede <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	68ba      	ldr	r2, [r7, #8]
 8001ef8:	4413      	add	r3, r2
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d108      	bne.n	8001f12 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	441a      	add	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	441a      	add	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d118      	bne.n	8001f58 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <prvInsertBlockIntoFreeList+0xb0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d00d      	beq.n	8001f4e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	441a      	add	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	e008      	b.n	8001f60 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001f4e:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <prvInsertBlockIntoFreeList+0xb0>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	e003      	b.n	8001f60 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d002      	beq.n	8001f6e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001f6e:	bf00      	nop
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	20000d50 	.word	0x20000d50
 8001f80:	20000d58 	.word	0x20000d58

08001f84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f8a:	f001 fc28 	bl	80037de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f8e:	f000 f875 	bl	800207c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001f92:	f000 f8d1 	bl	8002138 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f96:	f000 fc23 	bl	80027e0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001f9a:	f000 f8fd 	bl	8002198 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8001f9e:	f000 f95f 	bl	8002260 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 8001fa2:	f000 f995 	bl	80022d0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001fa6:	f000 f9d1 	bl	800234c <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 8001faa:	f000 fa0d 	bl	80023c8 <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 8001fae:	f000 fa61 	bl	8002474 <MX_SPI1_Init>
  MX_SPI3_Init();
 8001fb2:	f000 fa9d 	bl	80024f0 <MX_SPI3_Init>
  MX_UART4_Init();
 8001fb6:	f000 fad9 	bl	800256c <MX_UART4_Init>
  MX_USART1_UART_Init();
 8001fba:	f000 fb23 	bl	8002604 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001fbe:	f000 fb6d 	bl	800269c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001fc2:	f000 fbb9 	bl	8002738 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8001fc6:	f000 fc03 	bl	80027d0 <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
 MyLED2_init();
 8001fca:	f000 fd5b 	bl	8002a84 <MyLED2_init>
 MyButton_init();
 8001fce:	f000 fd8b 	bl	8002ae8 <MyButton_init>
 MyUART1_init();
 8001fd2:	f000 fdd1 	bl	8002b78 <MyUART1_init>
 //BSP_TSENSOR_Init();


 HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), 1000);
 8001fd6:	481d      	ldr	r0, [pc, #116]	; (800204c <main+0xc8>)
 8001fd8:	f7fe f912 	bl	8000200 <strlen>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fe4:	4919      	ldr	r1, [pc, #100]	; (800204c <main+0xc8>)
 8001fe6:	481a      	ldr	r0, [pc, #104]	; (8002050 <main+0xcc>)
 8001fe8:	f007 f956 	bl	8009298 <HAL_UART_Transmit>

 HAL_I2C_EnableListen_IT(&hi2c1);
 8001fec:	4819      	ldr	r0, [pc, #100]	; (8002054 <main+0xd0>)
 8001fee:	f003 f8d9 	bl	80051a4 <HAL_I2C_EnableListen_IT>

 flag = xTaskCreate(SOS_Transmit, "SOS_Transmit", 200, (void *) 300, 3, &pSOS_Transmit);
 8001ff2:	4b19      	ldr	r3, [pc, #100]	; (8002058 <main+0xd4>)
 8001ff4:	9301      	str	r3, [sp, #4]
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001ffe:	22c8      	movs	r2, #200	; 0xc8
 8002000:	4916      	ldr	r1, [pc, #88]	; (800205c <main+0xd8>)
 8002002:	4817      	ldr	r0, [pc, #92]	; (8002060 <main+0xdc>)
 8002004:	f7fe fb36 	bl	8000674 <xTaskCreate>
 8002008:	6078      	str	r0, [r7, #4]
 if(flag!=pdPASS)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d001      	beq.n	8002014 <main+0x90>
 {
	 Error_Handler();
 8002010:	f000 ff0c 	bl	8002e2c <Error_Handler>
 }
 LastWakeTime=xTaskGetTickCount();
 8002014:	f7fe ff86 	bl	8000f24 <xTaskGetTickCount>
 8002018:	4603      	mov	r3, r0
 800201a:	4a12      	ldr	r2, [pc, #72]	; (8002064 <main+0xe0>)
 800201c:	6013      	str	r3, [r2, #0]
 if(flag_tempSensor!=pdPASS)
  {
 	 Error_Handler();
  }*/

 flag_targetReceive = xTaskCreate(TargetReceive, "TargetReceive", 200, "\r\nI2C Target Receiving!!!", 3, &pTargetReceive);
 800201e:	4b12      	ldr	r3, [pc, #72]	; (8002068 <main+0xe4>)
 8002020:	9301      	str	r3, [sp, #4]
 8002022:	2303      	movs	r3, #3
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	4b11      	ldr	r3, [pc, #68]	; (800206c <main+0xe8>)
 8002028:	22c8      	movs	r2, #200	; 0xc8
 800202a:	4911      	ldr	r1, [pc, #68]	; (8002070 <main+0xec>)
 800202c:	4811      	ldr	r0, [pc, #68]	; (8002074 <main+0xf0>)
 800202e:	f7fe fb21 	bl	8000674 <xTaskCreate>
 8002032:	4603      	mov	r3, r0
 8002034:	461a      	mov	r2, r3
 8002036:	4b10      	ldr	r3, [pc, #64]	; (8002078 <main+0xf4>)
 8002038:	601a      	str	r2, [r3, #0]
 if(flag_targetReceive != pdPASS)
 800203a:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <main+0xf4>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d001      	beq.n	8002046 <main+0xc2>
   {
  	 Error_Handler();
 8002042:	f000 fef3 	bl	8002e2c <Error_Handler>
   }
 //start Scheduler
 vTaskStartScheduler();
 8002046:	f7fe fe17 	bl	8000c78 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800204a:	e7fe      	b.n	800204a <main+0xc6>
 800204c:	20000008 	.word	0x20000008
 8002050:	2000109c 	.word	0x2000109c
 8002054:	20000e48 	.word	0x20000e48
 8002058:	20000d6c 	.word	0x20000d6c
 800205c:	0800a7a8 	.word	0x0800a7a8
 8002060:	08002c39 	.word	0x08002c39
 8002064:	20000d70 	.word	0x20000d70
 8002068:	20000d80 	.word	0x20000d80
 800206c:	0800a7b8 	.word	0x0800a7b8
 8002070:	0800a7d4 	.word	0x0800a7d4
 8002074:	08002d25 	.word	0x08002d25
 8002078:	20000da4 	.word	0x20000da4

0800207c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b096      	sub	sp, #88	; 0x58
 8002080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002082:	f107 0314 	add.w	r3, r7, #20
 8002086:	2244      	movs	r2, #68	; 0x44
 8002088:	2100      	movs	r1, #0
 800208a:	4618      	mov	r0, r3
 800208c:	f008 fb50 	bl	800a730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002090:	463b      	mov	r3, r7
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	605a      	str	r2, [r3, #4]
 8002098:	609a      	str	r2, [r3, #8]
 800209a:	60da      	str	r2, [r3, #12]
 800209c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800209e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80020a2:	f005 f87d 	bl	80071a0 <HAL_PWREx_ControlVoltageScaling>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80020ac:	f000 febe 	bl	8002e2c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80020b0:	f005 f846 	bl	8007140 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80020b4:	4b1f      	ldr	r3, [pc, #124]	; (8002134 <SystemClock_Config+0xb8>)
 80020b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ba:	4a1e      	ldr	r2, [pc, #120]	; (8002134 <SystemClock_Config+0xb8>)
 80020bc:	f023 0318 	bic.w	r3, r3, #24
 80020c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 80020c4:	2316      	movs	r3, #22
 80020c6:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80020c8:	2301      	movs	r3, #1
 80020ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020d2:	2340      	movs	r3, #64	; 0x40
 80020d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80020d6:	2301      	movs	r3, #1
 80020d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80020de:	2360      	movs	r3, #96	; 0x60
 80020e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80020e2:	2300      	movs	r3, #0
 80020e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020e6:	f107 0314 	add.w	r3, r7, #20
 80020ea:	4618      	mov	r0, r3
 80020ec:	f005 f8fc 	bl	80072e8 <HAL_RCC_OscConfig>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80020f6:	f000 fe99 	bl	8002e2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020fa:	230f      	movs	r3, #15
 80020fc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80020fe:	2301      	movs	r3, #1
 8002100:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002102:	2300      	movs	r3, #0
 8002104:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002106:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800210a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 800210c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002110:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002112:	463b      	mov	r3, r7
 8002114:	2100      	movs	r1, #0
 8002116:	4618      	mov	r0, r3
 8002118:	f005 fd00 	bl	8007b1c <HAL_RCC_ClockConfig>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002122:	f000 fe83 	bl	8002e2c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002126:	f006 fb19 	bl	800875c <HAL_RCCEx_EnableMSIPLLMode>
}
 800212a:	bf00      	nop
 800212c:	3758      	adds	r7, #88	; 0x58
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40021000 	.word	0x40021000

08002138 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b0a6      	sub	sp, #152	; 0x98
 800213c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800213e:	1d3b      	adds	r3, r7, #4
 8002140:	2294      	movs	r2, #148	; 0x94
 8002142:	2100      	movs	r1, #0
 8002144:	4618      	mov	r0, r3
 8002146:	f008 faf3 	bl	800a730 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 800214a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800214e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002150:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002154:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002158:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800215c:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800215e:	2301      	movs	r3, #1
 8002160:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002162:	2301      	movs	r3, #1
 8002164:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002166:	2318      	movs	r3, #24
 8002168:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800216a:	2302      	movs	r3, #2
 800216c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800216e:	2302      	movs	r3, #2
 8002170:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002172:	2302      	movs	r3, #2
 8002174:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8002176:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 800217a:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800217c:	1d3b      	adds	r3, r7, #4
 800217e:	4618      	mov	r0, r3
 8002180:	f005 ffbc 	bl	80080fc <HAL_RCCEx_PeriphCLKConfig>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800218a:	f000 fe4f 	bl	8002e2c <Error_Handler>
  }
}
 800218e:	bf00      	nop
 8002190:	3798      	adds	r7, #152	; 0x98
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800219e:	463b      	mov	r3, r7
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]
 80021aa:	611a      	str	r2, [r3, #16]
 80021ac:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80021ae:	4b29      	ldr	r3, [pc, #164]	; (8002254 <MX_ADC1_Init+0xbc>)
 80021b0:	4a29      	ldr	r2, [pc, #164]	; (8002258 <MX_ADC1_Init+0xc0>)
 80021b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80021b4:	4b27      	ldr	r3, [pc, #156]	; (8002254 <MX_ADC1_Init+0xbc>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80021ba:	4b26      	ldr	r3, [pc, #152]	; (8002254 <MX_ADC1_Init+0xbc>)
 80021bc:	2200      	movs	r2, #0
 80021be:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80021c0:	4b24      	ldr	r3, [pc, #144]	; (8002254 <MX_ADC1_Init+0xbc>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80021c6:	4b23      	ldr	r3, [pc, #140]	; (8002254 <MX_ADC1_Init+0xbc>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80021cc:	4b21      	ldr	r3, [pc, #132]	; (8002254 <MX_ADC1_Init+0xbc>)
 80021ce:	2204      	movs	r2, #4
 80021d0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80021d2:	4b20      	ldr	r3, [pc, #128]	; (8002254 <MX_ADC1_Init+0xbc>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80021d8:	4b1e      	ldr	r3, [pc, #120]	; (8002254 <MX_ADC1_Init+0xbc>)
 80021da:	2200      	movs	r2, #0
 80021dc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80021de:	4b1d      	ldr	r3, [pc, #116]	; (8002254 <MX_ADC1_Init+0xbc>)
 80021e0:	2201      	movs	r2, #1
 80021e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80021e4:	4b1b      	ldr	r3, [pc, #108]	; (8002254 <MX_ADC1_Init+0xbc>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80021ec:	4b19      	ldr	r3, [pc, #100]	; (8002254 <MX_ADC1_Init+0xbc>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80021f2:	4b18      	ldr	r3, [pc, #96]	; (8002254 <MX_ADC1_Init+0xbc>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80021f8:	4b16      	ldr	r3, [pc, #88]	; (8002254 <MX_ADC1_Init+0xbc>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002200:	4b14      	ldr	r3, [pc, #80]	; (8002254 <MX_ADC1_Init+0xbc>)
 8002202:	2200      	movs	r2, #0
 8002204:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002206:	4b13      	ldr	r3, [pc, #76]	; (8002254 <MX_ADC1_Init+0xbc>)
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800220e:	4811      	ldr	r0, [pc, #68]	; (8002254 <MX_ADC1_Init+0xbc>)
 8002210:	f001 fcbe 	bl	8003b90 <HAL_ADC_Init>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800221a:	f000 fe07 	bl	8002e2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800221e:	4b0f      	ldr	r3, [pc, #60]	; (800225c <MX_ADC1_Init+0xc4>)
 8002220:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002222:	2306      	movs	r3, #6
 8002224:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002226:	2300      	movs	r3, #0
 8002228:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800222a:	237f      	movs	r3, #127	; 0x7f
 800222c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800222e:	2304      	movs	r3, #4
 8002230:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002236:	463b      	mov	r3, r7
 8002238:	4619      	mov	r1, r3
 800223a:	4806      	ldr	r0, [pc, #24]	; (8002254 <MX_ADC1_Init+0xbc>)
 800223c:	f001 fdee 	bl	8003e1c <HAL_ADC_ConfigChannel>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002246:	f000 fdf1 	bl	8002e2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800224a:	bf00      	nop
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20000da8 	.word	0x20000da8
 8002258:	50040000 	.word	0x50040000
 800225c:	04300002 	.word	0x04300002

08002260 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8002264:	4b18      	ldr	r3, [pc, #96]	; (80022c8 <MX_DFSDM1_Init+0x68>)
 8002266:	4a19      	ldr	r2, [pc, #100]	; (80022cc <MX_DFSDM1_Init+0x6c>)
 8002268:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 800226a:	4b17      	ldr	r3, [pc, #92]	; (80022c8 <MX_DFSDM1_Init+0x68>)
 800226c:	2201      	movs	r2, #1
 800226e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8002270:	4b15      	ldr	r3, [pc, #84]	; (80022c8 <MX_DFSDM1_Init+0x68>)
 8002272:	2200      	movs	r2, #0
 8002274:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8002276:	4b14      	ldr	r3, [pc, #80]	; (80022c8 <MX_DFSDM1_Init+0x68>)
 8002278:	2202      	movs	r2, #2
 800227a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800227c:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <MX_DFSDM1_Init+0x68>)
 800227e:	2200      	movs	r2, #0
 8002280:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8002282:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <MX_DFSDM1_Init+0x68>)
 8002284:	2200      	movs	r2, #0
 8002286:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8002288:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <MX_DFSDM1_Init+0x68>)
 800228a:	2200      	movs	r2, #0
 800228c:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800228e:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <MX_DFSDM1_Init+0x68>)
 8002290:	2200      	movs	r2, #0
 8002292:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8002294:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <MX_DFSDM1_Init+0x68>)
 8002296:	2204      	movs	r2, #4
 8002298:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800229a:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <MX_DFSDM1_Init+0x68>)
 800229c:	2200      	movs	r2, #0
 800229e:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80022a0:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <MX_DFSDM1_Init+0x68>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80022a6:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <MX_DFSDM1_Init+0x68>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80022ac:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <MX_DFSDM1_Init+0x68>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80022b2:	4805      	ldr	r0, [pc, #20]	; (80022c8 <MX_DFSDM1_Init+0x68>)
 80022b4:	f002 fa90 	bl	80047d8 <HAL_DFSDM_ChannelInit>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 80022be:	f000 fdb5 	bl	8002e2c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20000e10 	.word	0x20000e10
 80022cc:	40016040 	.word	0x40016040

080022d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80022d4:	4b1b      	ldr	r3, [pc, #108]	; (8002344 <MX_I2C1_Init+0x74>)
 80022d6:	4a1c      	ldr	r2, [pc, #112]	; (8002348 <MX_I2C1_Init+0x78>)
 80022d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80022da:	4b1a      	ldr	r3, [pc, #104]	; (8002344 <MX_I2C1_Init+0x74>)
 80022dc:	f640 6214 	movw	r2, #3604	; 0xe14
 80022e0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 44;
 80022e2:	4b18      	ldr	r3, [pc, #96]	; (8002344 <MX_I2C1_Init+0x74>)
 80022e4:	222c      	movs	r2, #44	; 0x2c
 80022e6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022e8:	4b16      	ldr	r3, [pc, #88]	; (8002344 <MX_I2C1_Init+0x74>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022ee:	4b15      	ldr	r3, [pc, #84]	; (8002344 <MX_I2C1_Init+0x74>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80022f4:	4b13      	ldr	r3, [pc, #76]	; (8002344 <MX_I2C1_Init+0x74>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80022fa:	4b12      	ldr	r3, [pc, #72]	; (8002344 <MX_I2C1_Init+0x74>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002300:	4b10      	ldr	r3, [pc, #64]	; (8002344 <MX_I2C1_Init+0x74>)
 8002302:	2200      	movs	r2, #0
 8002304:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002306:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <MX_I2C1_Init+0x74>)
 8002308:	2200      	movs	r2, #0
 800230a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800230c:	480d      	ldr	r0, [pc, #52]	; (8002344 <MX_I2C1_Init+0x74>)
 800230e:	f002 fdfb 	bl	8004f08 <HAL_I2C_Init>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002318:	f000 fd88 	bl	8002e2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800231c:	2100      	movs	r1, #0
 800231e:	4809      	ldr	r0, [pc, #36]	; (8002344 <MX_I2C1_Init+0x74>)
 8002320:	f004 f9a0 	bl	8006664 <HAL_I2CEx_ConfigAnalogFilter>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800232a:	f000 fd7f 	bl	8002e2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800232e:	2100      	movs	r1, #0
 8002330:	4804      	ldr	r0, [pc, #16]	; (8002344 <MX_I2C1_Init+0x74>)
 8002332:	f004 f9e2 	bl	80066fa <HAL_I2CEx_ConfigDigitalFilter>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800233c:	f000 fd76 	bl	8002e2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002340:	bf00      	nop
 8002342:	bd80      	pop	{r7, pc}
 8002344:	20000e48 	.word	0x20000e48
 8002348:	40005400 	.word	0x40005400

0800234c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002350:	4b1b      	ldr	r3, [pc, #108]	; (80023c0 <MX_I2C2_Init+0x74>)
 8002352:	4a1c      	ldr	r2, [pc, #112]	; (80023c4 <MX_I2C2_Init+0x78>)
 8002354:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8002356:	4b1a      	ldr	r3, [pc, #104]	; (80023c0 <MX_I2C2_Init+0x74>)
 8002358:	f640 6214 	movw	r2, #3604	; 0xe14
 800235c:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800235e:	4b18      	ldr	r3, [pc, #96]	; (80023c0 <MX_I2C2_Init+0x74>)
 8002360:	2200      	movs	r2, #0
 8002362:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002364:	4b16      	ldr	r3, [pc, #88]	; (80023c0 <MX_I2C2_Init+0x74>)
 8002366:	2201      	movs	r2, #1
 8002368:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800236a:	4b15      	ldr	r3, [pc, #84]	; (80023c0 <MX_I2C2_Init+0x74>)
 800236c:	2200      	movs	r2, #0
 800236e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002370:	4b13      	ldr	r3, [pc, #76]	; (80023c0 <MX_I2C2_Init+0x74>)
 8002372:	2200      	movs	r2, #0
 8002374:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002376:	4b12      	ldr	r3, [pc, #72]	; (80023c0 <MX_I2C2_Init+0x74>)
 8002378:	2200      	movs	r2, #0
 800237a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800237c:	4b10      	ldr	r3, [pc, #64]	; (80023c0 <MX_I2C2_Init+0x74>)
 800237e:	2200      	movs	r2, #0
 8002380:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002382:	4b0f      	ldr	r3, [pc, #60]	; (80023c0 <MX_I2C2_Init+0x74>)
 8002384:	2200      	movs	r2, #0
 8002386:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002388:	480d      	ldr	r0, [pc, #52]	; (80023c0 <MX_I2C2_Init+0x74>)
 800238a:	f002 fdbd 	bl	8004f08 <HAL_I2C_Init>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002394:	f000 fd4a 	bl	8002e2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002398:	2100      	movs	r1, #0
 800239a:	4809      	ldr	r0, [pc, #36]	; (80023c0 <MX_I2C2_Init+0x74>)
 800239c:	f004 f962 	bl	8006664 <HAL_I2CEx_ConfigAnalogFilter>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80023a6:	f000 fd41 	bl	8002e2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80023aa:	2100      	movs	r1, #0
 80023ac:	4804      	ldr	r0, [pc, #16]	; (80023c0 <MX_I2C2_Init+0x74>)
 80023ae:	f004 f9a4 	bl	80066fa <HAL_I2CEx_ConfigDigitalFilter>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80023b8:	f000 fd38 	bl	8002e2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80023bc:	bf00      	nop
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20000e9c 	.word	0x20000e9c
 80023c4:	40005800 	.word	0x40005800

080023c8 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 80023ce:	1d3b      	adds	r3, r7, #4
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	60da      	str	r2, [r3, #12]
 80023da:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80023dc:	4b23      	ldr	r3, [pc, #140]	; (800246c <MX_OCTOSPI1_Init+0xa4>)
 80023de:	4a24      	ldr	r2, [pc, #144]	; (8002470 <MX_OCTOSPI1_Init+0xa8>)
 80023e0:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80023e2:	4b22      	ldr	r3, [pc, #136]	; (800246c <MX_OCTOSPI1_Init+0xa4>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80023e8:	4b20      	ldr	r3, [pc, #128]	; (800246c <MX_OCTOSPI1_Init+0xa4>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 80023ee:	4b1f      	ldr	r3, [pc, #124]	; (800246c <MX_OCTOSPI1_Init+0xa4>)
 80023f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023f4:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 80023f6:	4b1d      	ldr	r3, [pc, #116]	; (800246c <MX_OCTOSPI1_Init+0xa4>)
 80023f8:	2220      	movs	r2, #32
 80023fa:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 80023fc:	4b1b      	ldr	r3, [pc, #108]	; (800246c <MX_OCTOSPI1_Init+0xa4>)
 80023fe:	2201      	movs	r2, #1
 8002400:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8002402:	4b1a      	ldr	r3, [pc, #104]	; (800246c <MX_OCTOSPI1_Init+0xa4>)
 8002404:	2200      	movs	r2, #0
 8002406:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8002408:	4b18      	ldr	r3, [pc, #96]	; (800246c <MX_OCTOSPI1_Init+0xa4>)
 800240a:	2200      	movs	r2, #0
 800240c:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 800240e:	4b17      	ldr	r3, [pc, #92]	; (800246c <MX_OCTOSPI1_Init+0xa4>)
 8002410:	2201      	movs	r2, #1
 8002412:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8002414:	4b15      	ldr	r3, [pc, #84]	; (800246c <MX_OCTOSPI1_Init+0xa4>)
 8002416:	2200      	movs	r2, #0
 8002418:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800241a:	4b14      	ldr	r3, [pc, #80]	; (800246c <MX_OCTOSPI1_Init+0xa4>)
 800241c:	2200      	movs	r2, #0
 800241e:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8002420:	4b12      	ldr	r3, [pc, #72]	; (800246c <MX_OCTOSPI1_Init+0xa4>)
 8002422:	2200      	movs	r2, #0
 8002424:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8002426:	4b11      	ldr	r3, [pc, #68]	; (800246c <MX_OCTOSPI1_Init+0xa4>)
 8002428:	2208      	movs	r2, #8
 800242a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 800242c:	480f      	ldr	r0, [pc, #60]	; (800246c <MX_OCTOSPI1_Init+0xa4>)
 800242e:	f004 f9b1 	bl	8006794 <HAL_OSPI_Init>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8002438:	f000 fcf8 	bl	8002e2c <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 800243c:	2301      	movs	r3, #1
 800243e:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8002440:	2301      	movs	r3, #1
 8002442:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8002444:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002448:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800244a:	1d3b      	adds	r3, r7, #4
 800244c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002450:	4619      	mov	r1, r3
 8002452:	4806      	ldr	r0, [pc, #24]	; (800246c <MX_OCTOSPI1_Init+0xa4>)
 8002454:	f004 fa58 	bl	8006908 <HAL_OSPIM_Config>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 800245e:	f000 fce5 	bl	8002e2c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8002462:	bf00      	nop
 8002464:	3718      	adds	r7, #24
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20000ef0 	.word	0x20000ef0
 8002470:	a0001000 	.word	0xa0001000

08002474 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002478:	4b1b      	ldr	r3, [pc, #108]	; (80024e8 <MX_SPI1_Init+0x74>)
 800247a:	4a1c      	ldr	r2, [pc, #112]	; (80024ec <MX_SPI1_Init+0x78>)
 800247c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800247e:	4b1a      	ldr	r3, [pc, #104]	; (80024e8 <MX_SPI1_Init+0x74>)
 8002480:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002484:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002486:	4b18      	ldr	r3, [pc, #96]	; (80024e8 <MX_SPI1_Init+0x74>)
 8002488:	2200      	movs	r2, #0
 800248a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800248c:	4b16      	ldr	r3, [pc, #88]	; (80024e8 <MX_SPI1_Init+0x74>)
 800248e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002492:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002494:	4b14      	ldr	r3, [pc, #80]	; (80024e8 <MX_SPI1_Init+0x74>)
 8002496:	2200      	movs	r2, #0
 8002498:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800249a:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <MX_SPI1_Init+0x74>)
 800249c:	2200      	movs	r2, #0
 800249e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80024a0:	4b11      	ldr	r3, [pc, #68]	; (80024e8 <MX_SPI1_Init+0x74>)
 80024a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024a6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80024a8:	4b0f      	ldr	r3, [pc, #60]	; (80024e8 <MX_SPI1_Init+0x74>)
 80024aa:	2208      	movs	r2, #8
 80024ac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024ae:	4b0e      	ldr	r3, [pc, #56]	; (80024e8 <MX_SPI1_Init+0x74>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80024b4:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <MX_SPI1_Init+0x74>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024ba:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <MX_SPI1_Init+0x74>)
 80024bc:	2200      	movs	r2, #0
 80024be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80024c0:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <MX_SPI1_Init+0x74>)
 80024c2:	2207      	movs	r2, #7
 80024c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80024c6:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <MX_SPI1_Init+0x74>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80024cc:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <MX_SPI1_Init+0x74>)
 80024ce:	2208      	movs	r2, #8
 80024d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80024d2:	4805      	ldr	r0, [pc, #20]	; (80024e8 <MX_SPI1_Init+0x74>)
 80024d4:	f006 fb3a 	bl	8008b4c <HAL_SPI_Init>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80024de:	f000 fca5 	bl	8002e2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20000f40 	.word	0x20000f40
 80024ec:	40013000 	.word	0x40013000

080024f0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80024f4:	4b1b      	ldr	r3, [pc, #108]	; (8002564 <MX_SPI3_Init+0x74>)
 80024f6:	4a1c      	ldr	r2, [pc, #112]	; (8002568 <MX_SPI3_Init+0x78>)
 80024f8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80024fa:	4b1a      	ldr	r3, [pc, #104]	; (8002564 <MX_SPI3_Init+0x74>)
 80024fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002500:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002502:	4b18      	ldr	r3, [pc, #96]	; (8002564 <MX_SPI3_Init+0x74>)
 8002504:	2200      	movs	r2, #0
 8002506:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8002508:	4b16      	ldr	r3, [pc, #88]	; (8002564 <MX_SPI3_Init+0x74>)
 800250a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800250e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002510:	4b14      	ldr	r3, [pc, #80]	; (8002564 <MX_SPI3_Init+0x74>)
 8002512:	2200      	movs	r2, #0
 8002514:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002516:	4b13      	ldr	r3, [pc, #76]	; (8002564 <MX_SPI3_Init+0x74>)
 8002518:	2200      	movs	r2, #0
 800251a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800251c:	4b11      	ldr	r3, [pc, #68]	; (8002564 <MX_SPI3_Init+0x74>)
 800251e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002522:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002524:	4b0f      	ldr	r3, [pc, #60]	; (8002564 <MX_SPI3_Init+0x74>)
 8002526:	2208      	movs	r2, #8
 8002528:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800252a:	4b0e      	ldr	r3, [pc, #56]	; (8002564 <MX_SPI3_Init+0x74>)
 800252c:	2200      	movs	r2, #0
 800252e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002530:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <MX_SPI3_Init+0x74>)
 8002532:	2200      	movs	r2, #0
 8002534:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002536:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <MX_SPI3_Init+0x74>)
 8002538:	2200      	movs	r2, #0
 800253a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800253c:	4b09      	ldr	r3, [pc, #36]	; (8002564 <MX_SPI3_Init+0x74>)
 800253e:	2207      	movs	r2, #7
 8002540:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002542:	4b08      	ldr	r3, [pc, #32]	; (8002564 <MX_SPI3_Init+0x74>)
 8002544:	2200      	movs	r2, #0
 8002546:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002548:	4b06      	ldr	r3, [pc, #24]	; (8002564 <MX_SPI3_Init+0x74>)
 800254a:	2208      	movs	r2, #8
 800254c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800254e:	4805      	ldr	r0, [pc, #20]	; (8002564 <MX_SPI3_Init+0x74>)
 8002550:	f006 fafc 	bl	8008b4c <HAL_SPI_Init>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800255a:	f000 fc67 	bl	8002e2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800255e:	bf00      	nop
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	20000fa4 	.word	0x20000fa4
 8002568:	40003c00 	.word	0x40003c00

0800256c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002570:	4b22      	ldr	r3, [pc, #136]	; (80025fc <MX_UART4_Init+0x90>)
 8002572:	4a23      	ldr	r2, [pc, #140]	; (8002600 <MX_UART4_Init+0x94>)
 8002574:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002576:	4b21      	ldr	r3, [pc, #132]	; (80025fc <MX_UART4_Init+0x90>)
 8002578:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800257c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800257e:	4b1f      	ldr	r3, [pc, #124]	; (80025fc <MX_UART4_Init+0x90>)
 8002580:	2200      	movs	r2, #0
 8002582:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002584:	4b1d      	ldr	r3, [pc, #116]	; (80025fc <MX_UART4_Init+0x90>)
 8002586:	2200      	movs	r2, #0
 8002588:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800258a:	4b1c      	ldr	r3, [pc, #112]	; (80025fc <MX_UART4_Init+0x90>)
 800258c:	2200      	movs	r2, #0
 800258e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002590:	4b1a      	ldr	r3, [pc, #104]	; (80025fc <MX_UART4_Init+0x90>)
 8002592:	220c      	movs	r2, #12
 8002594:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002596:	4b19      	ldr	r3, [pc, #100]	; (80025fc <MX_UART4_Init+0x90>)
 8002598:	2200      	movs	r2, #0
 800259a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800259c:	4b17      	ldr	r3, [pc, #92]	; (80025fc <MX_UART4_Init+0x90>)
 800259e:	2200      	movs	r2, #0
 80025a0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025a2:	4b16      	ldr	r3, [pc, #88]	; (80025fc <MX_UART4_Init+0x90>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025a8:	4b14      	ldr	r3, [pc, #80]	; (80025fc <MX_UART4_Init+0x90>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025ae:	4b13      	ldr	r3, [pc, #76]	; (80025fc <MX_UART4_Init+0x90>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80025b4:	4811      	ldr	r0, [pc, #68]	; (80025fc <MX_UART4_Init+0x90>)
 80025b6:	f006 fe1f 	bl	80091f8 <HAL_UART_Init>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80025c0:	f000 fc34 	bl	8002e2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025c4:	2100      	movs	r1, #0
 80025c6:	480d      	ldr	r0, [pc, #52]	; (80025fc <MX_UART4_Init+0x90>)
 80025c8:	f007 ffe7 	bl	800a59a <HAL_UARTEx_SetTxFifoThreshold>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80025d2:	f000 fc2b 	bl	8002e2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025d6:	2100      	movs	r1, #0
 80025d8:	4808      	ldr	r0, [pc, #32]	; (80025fc <MX_UART4_Init+0x90>)
 80025da:	f008 f81c 	bl	800a616 <HAL_UARTEx_SetRxFifoThreshold>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80025e4:	f000 fc22 	bl	8002e2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80025e8:	4804      	ldr	r0, [pc, #16]	; (80025fc <MX_UART4_Init+0x90>)
 80025ea:	f007 ff9d 	bl	800a528 <HAL_UARTEx_DisableFifoMode>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80025f4:	f000 fc1a 	bl	8002e2c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80025f8:	bf00      	nop
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	20001008 	.word	0x20001008
 8002600:	40004c00 	.word	0x40004c00

08002604 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002608:	4b22      	ldr	r3, [pc, #136]	; (8002694 <MX_USART1_UART_Init+0x90>)
 800260a:	4a23      	ldr	r2, [pc, #140]	; (8002698 <MX_USART1_UART_Init+0x94>)
 800260c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800260e:	4b21      	ldr	r3, [pc, #132]	; (8002694 <MX_USART1_UART_Init+0x90>)
 8002610:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002614:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002616:	4b1f      	ldr	r3, [pc, #124]	; (8002694 <MX_USART1_UART_Init+0x90>)
 8002618:	2200      	movs	r2, #0
 800261a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800261c:	4b1d      	ldr	r3, [pc, #116]	; (8002694 <MX_USART1_UART_Init+0x90>)
 800261e:	2200      	movs	r2, #0
 8002620:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002622:	4b1c      	ldr	r3, [pc, #112]	; (8002694 <MX_USART1_UART_Init+0x90>)
 8002624:	2200      	movs	r2, #0
 8002626:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002628:	4b1a      	ldr	r3, [pc, #104]	; (8002694 <MX_USART1_UART_Init+0x90>)
 800262a:	220c      	movs	r2, #12
 800262c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800262e:	4b19      	ldr	r3, [pc, #100]	; (8002694 <MX_USART1_UART_Init+0x90>)
 8002630:	2200      	movs	r2, #0
 8002632:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002634:	4b17      	ldr	r3, [pc, #92]	; (8002694 <MX_USART1_UART_Init+0x90>)
 8002636:	2200      	movs	r2, #0
 8002638:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800263a:	4b16      	ldr	r3, [pc, #88]	; (8002694 <MX_USART1_UART_Init+0x90>)
 800263c:	2200      	movs	r2, #0
 800263e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002640:	4b14      	ldr	r3, [pc, #80]	; (8002694 <MX_USART1_UART_Init+0x90>)
 8002642:	2200      	movs	r2, #0
 8002644:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002646:	4b13      	ldr	r3, [pc, #76]	; (8002694 <MX_USART1_UART_Init+0x90>)
 8002648:	2200      	movs	r2, #0
 800264a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800264c:	4811      	ldr	r0, [pc, #68]	; (8002694 <MX_USART1_UART_Init+0x90>)
 800264e:	f006 fdd3 	bl	80091f8 <HAL_UART_Init>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002658:	f000 fbe8 	bl	8002e2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800265c:	2100      	movs	r1, #0
 800265e:	480d      	ldr	r0, [pc, #52]	; (8002694 <MX_USART1_UART_Init+0x90>)
 8002660:	f007 ff9b 	bl	800a59a <HAL_UARTEx_SetTxFifoThreshold>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800266a:	f000 fbdf 	bl	8002e2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800266e:	2100      	movs	r1, #0
 8002670:	4808      	ldr	r0, [pc, #32]	; (8002694 <MX_USART1_UART_Init+0x90>)
 8002672:	f007 ffd0 	bl	800a616 <HAL_UARTEx_SetRxFifoThreshold>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800267c:	f000 fbd6 	bl	8002e2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002680:	4804      	ldr	r0, [pc, #16]	; (8002694 <MX_USART1_UART_Init+0x90>)
 8002682:	f007 ff51 	bl	800a528 <HAL_UARTEx_DisableFifoMode>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800268c:	f000 fbce 	bl	8002e2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002690:	bf00      	nop
 8002692:	bd80      	pop	{r7, pc}
 8002694:	2000109c 	.word	0x2000109c
 8002698:	40013800 	.word	0x40013800

0800269c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80026a0:	4b23      	ldr	r3, [pc, #140]	; (8002730 <MX_USART2_UART_Init+0x94>)
 80026a2:	4a24      	ldr	r2, [pc, #144]	; (8002734 <MX_USART2_UART_Init+0x98>)
 80026a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80026a6:	4b22      	ldr	r3, [pc, #136]	; (8002730 <MX_USART2_UART_Init+0x94>)
 80026a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026ae:	4b20      	ldr	r3, [pc, #128]	; (8002730 <MX_USART2_UART_Init+0x94>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026b4:	4b1e      	ldr	r3, [pc, #120]	; (8002730 <MX_USART2_UART_Init+0x94>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026ba:	4b1d      	ldr	r3, [pc, #116]	; (8002730 <MX_USART2_UART_Init+0x94>)
 80026bc:	2200      	movs	r2, #0
 80026be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026c0:	4b1b      	ldr	r3, [pc, #108]	; (8002730 <MX_USART2_UART_Init+0x94>)
 80026c2:	220c      	movs	r2, #12
 80026c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80026c6:	4b1a      	ldr	r3, [pc, #104]	; (8002730 <MX_USART2_UART_Init+0x94>)
 80026c8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80026cc:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026ce:	4b18      	ldr	r3, [pc, #96]	; (8002730 <MX_USART2_UART_Init+0x94>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026d4:	4b16      	ldr	r3, [pc, #88]	; (8002730 <MX_USART2_UART_Init+0x94>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026da:	4b15      	ldr	r3, [pc, #84]	; (8002730 <MX_USART2_UART_Init+0x94>)
 80026dc:	2200      	movs	r2, #0
 80026de:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026e0:	4b13      	ldr	r3, [pc, #76]	; (8002730 <MX_USART2_UART_Init+0x94>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026e6:	4812      	ldr	r0, [pc, #72]	; (8002730 <MX_USART2_UART_Init+0x94>)
 80026e8:	f006 fd86 	bl	80091f8 <HAL_UART_Init>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80026f2:	f000 fb9b 	bl	8002e2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026f6:	2100      	movs	r1, #0
 80026f8:	480d      	ldr	r0, [pc, #52]	; (8002730 <MX_USART2_UART_Init+0x94>)
 80026fa:	f007 ff4e 	bl	800a59a <HAL_UARTEx_SetTxFifoThreshold>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8002704:	f000 fb92 	bl	8002e2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002708:	2100      	movs	r1, #0
 800270a:	4809      	ldr	r0, [pc, #36]	; (8002730 <MX_USART2_UART_Init+0x94>)
 800270c:	f007 ff83 	bl	800a616 <HAL_UARTEx_SetRxFifoThreshold>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8002716:	f000 fb89 	bl	8002e2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800271a:	4805      	ldr	r0, [pc, #20]	; (8002730 <MX_USART2_UART_Init+0x94>)
 800271c:	f007 ff04 	bl	800a528 <HAL_UARTEx_DisableFifoMode>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8002726:	f000 fb81 	bl	8002e2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800272a:	bf00      	nop
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	20001130 	.word	0x20001130
 8002734:	40004400 	.word	0x40004400

08002738 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800273c:	4b22      	ldr	r3, [pc, #136]	; (80027c8 <MX_USART3_UART_Init+0x90>)
 800273e:	4a23      	ldr	r2, [pc, #140]	; (80027cc <MX_USART3_UART_Init+0x94>)
 8002740:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002742:	4b21      	ldr	r3, [pc, #132]	; (80027c8 <MX_USART3_UART_Init+0x90>)
 8002744:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002748:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800274a:	4b1f      	ldr	r3, [pc, #124]	; (80027c8 <MX_USART3_UART_Init+0x90>)
 800274c:	2200      	movs	r2, #0
 800274e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002750:	4b1d      	ldr	r3, [pc, #116]	; (80027c8 <MX_USART3_UART_Init+0x90>)
 8002752:	2200      	movs	r2, #0
 8002754:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002756:	4b1c      	ldr	r3, [pc, #112]	; (80027c8 <MX_USART3_UART_Init+0x90>)
 8002758:	2200      	movs	r2, #0
 800275a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800275c:	4b1a      	ldr	r3, [pc, #104]	; (80027c8 <MX_USART3_UART_Init+0x90>)
 800275e:	220c      	movs	r2, #12
 8002760:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002762:	4b19      	ldr	r3, [pc, #100]	; (80027c8 <MX_USART3_UART_Init+0x90>)
 8002764:	2200      	movs	r2, #0
 8002766:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002768:	4b17      	ldr	r3, [pc, #92]	; (80027c8 <MX_USART3_UART_Init+0x90>)
 800276a:	2200      	movs	r2, #0
 800276c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800276e:	4b16      	ldr	r3, [pc, #88]	; (80027c8 <MX_USART3_UART_Init+0x90>)
 8002770:	2200      	movs	r2, #0
 8002772:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002774:	4b14      	ldr	r3, [pc, #80]	; (80027c8 <MX_USART3_UART_Init+0x90>)
 8002776:	2200      	movs	r2, #0
 8002778:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800277a:	4b13      	ldr	r3, [pc, #76]	; (80027c8 <MX_USART3_UART_Init+0x90>)
 800277c:	2200      	movs	r2, #0
 800277e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002780:	4811      	ldr	r0, [pc, #68]	; (80027c8 <MX_USART3_UART_Init+0x90>)
 8002782:	f006 fd39 	bl	80091f8 <HAL_UART_Init>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800278c:	f000 fb4e 	bl	8002e2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002790:	2100      	movs	r1, #0
 8002792:	480d      	ldr	r0, [pc, #52]	; (80027c8 <MX_USART3_UART_Init+0x90>)
 8002794:	f007 ff01 	bl	800a59a <HAL_UARTEx_SetTxFifoThreshold>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800279e:	f000 fb45 	bl	8002e2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027a2:	2100      	movs	r1, #0
 80027a4:	4808      	ldr	r0, [pc, #32]	; (80027c8 <MX_USART3_UART_Init+0x90>)
 80027a6:	f007 ff36 	bl	800a616 <HAL_UARTEx_SetRxFifoThreshold>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80027b0:	f000 fb3c 	bl	8002e2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80027b4:	4804      	ldr	r0, [pc, #16]	; (80027c8 <MX_USART3_UART_Init+0x90>)
 80027b6:	f007 feb7 	bl	800a528 <HAL_UARTEx_DisableFifoMode>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80027c0:	f000 fb34 	bl	8002e2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80027c4:	bf00      	nop
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	200011c4 	.word	0x200011c4
 80027cc:	40004800 	.word	0x40004800

080027d0 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80027d4:	bf00      	nop
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
	...

080027e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08c      	sub	sp, #48	; 0x30
 80027e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e6:	f107 031c 	add.w	r3, r7, #28
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	605a      	str	r2, [r3, #4]
 80027f0:	609a      	str	r2, [r3, #8]
 80027f2:	60da      	str	r2, [r3, #12]
 80027f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80027f6:	4b9e      	ldr	r3, [pc, #632]	; (8002a70 <MX_GPIO_Init+0x290>)
 80027f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fa:	4a9d      	ldr	r2, [pc, #628]	; (8002a70 <MX_GPIO_Init+0x290>)
 80027fc:	f043 0310 	orr.w	r3, r3, #16
 8002800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002802:	4b9b      	ldr	r3, [pc, #620]	; (8002a70 <MX_GPIO_Init+0x290>)
 8002804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002806:	f003 0310 	and.w	r3, r3, #16
 800280a:	61bb      	str	r3, [r7, #24]
 800280c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800280e:	4b98      	ldr	r3, [pc, #608]	; (8002a70 <MX_GPIO_Init+0x290>)
 8002810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002812:	4a97      	ldr	r2, [pc, #604]	; (8002a70 <MX_GPIO_Init+0x290>)
 8002814:	f043 0304 	orr.w	r3, r3, #4
 8002818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800281a:	4b95      	ldr	r3, [pc, #596]	; (8002a70 <MX_GPIO_Init+0x290>)
 800281c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800281e:	f003 0304 	and.w	r3, r3, #4
 8002822:	617b      	str	r3, [r7, #20]
 8002824:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002826:	4b92      	ldr	r3, [pc, #584]	; (8002a70 <MX_GPIO_Init+0x290>)
 8002828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282a:	4a91      	ldr	r2, [pc, #580]	; (8002a70 <MX_GPIO_Init+0x290>)
 800282c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002832:	4b8f      	ldr	r3, [pc, #572]	; (8002a70 <MX_GPIO_Init+0x290>)
 8002834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800283a:	613b      	str	r3, [r7, #16]
 800283c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800283e:	4b8c      	ldr	r3, [pc, #560]	; (8002a70 <MX_GPIO_Init+0x290>)
 8002840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002842:	4a8b      	ldr	r2, [pc, #556]	; (8002a70 <MX_GPIO_Init+0x290>)
 8002844:	f043 0301 	orr.w	r3, r3, #1
 8002848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800284a:	4b89      	ldr	r3, [pc, #548]	; (8002a70 <MX_GPIO_Init+0x290>)
 800284c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002856:	4b86      	ldr	r3, [pc, #536]	; (8002a70 <MX_GPIO_Init+0x290>)
 8002858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285a:	4a85      	ldr	r2, [pc, #532]	; (8002a70 <MX_GPIO_Init+0x290>)
 800285c:	f043 0302 	orr.w	r3, r3, #2
 8002860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002862:	4b83      	ldr	r3, [pc, #524]	; (8002a70 <MX_GPIO_Init+0x290>)
 8002864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	60bb      	str	r3, [r7, #8]
 800286c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800286e:	4b80      	ldr	r3, [pc, #512]	; (8002a70 <MX_GPIO_Init+0x290>)
 8002870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002872:	4a7f      	ldr	r2, [pc, #508]	; (8002a70 <MX_GPIO_Init+0x290>)
 8002874:	f043 0308 	orr.w	r3, r3, #8
 8002878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800287a:	4b7d      	ldr	r3, [pc, #500]	; (8002a70 <MX_GPIO_Init+0x290>)
 800287c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800287e:	f003 0308 	and.w	r3, r3, #8
 8002882:	607b      	str	r3, [r7, #4]
 8002884:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8002886:	2200      	movs	r2, #0
 8002888:	f240 1105 	movw	r1, #261	; 0x105
 800288c:	4879      	ldr	r0, [pc, #484]	; (8002a74 <MX_GPIO_Init+0x294>)
 800288e:	f002 fb0b 	bl	8004ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8002892:	2200      	movs	r2, #0
 8002894:	f248 111c 	movw	r1, #33052	; 0x811c
 8002898:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800289c:	f002 fb04 	bl	8004ea8 <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80028a0:	2200      	movs	r2, #0
 80028a2:	f24f 0134 	movw	r1, #61492	; 0xf034
 80028a6:	4874      	ldr	r0, [pc, #464]	; (8002a78 <MX_GPIO_Init+0x298>)
 80028a8:	f002 fafe 	bl	8004ea8 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 80028ac:	2200      	movs	r2, #0
 80028ae:	f242 0183 	movw	r1, #8323	; 0x2083
 80028b2:	4872      	ldr	r0, [pc, #456]	; (8002a7c <MX_GPIO_Init+0x29c>)
 80028b4:	f002 faf8 	bl	8004ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80028b8:	2200      	movs	r2, #0
 80028ba:	f44f 7110 	mov.w	r1, #576	; 0x240
 80028be:	4870      	ldr	r0, [pc, #448]	; (8002a80 <MX_GPIO_Init+0x2a0>)
 80028c0:	f002 faf2 	bl	8004ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80028c4:	f240 1305 	movw	r3, #261	; 0x105
 80028c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ca:	2301      	movs	r3, #1
 80028cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d2:	2300      	movs	r3, #0
 80028d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028d6:	f107 031c 	add.w	r3, r7, #28
 80028da:	4619      	mov	r1, r3
 80028dc:	4865      	ldr	r0, [pc, #404]	; (8002a74 <MX_GPIO_Init+0x294>)
 80028de:	f002 f951 	bl	8004b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 80028e2:	237a      	movs	r3, #122	; 0x7a
 80028e4:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80028ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028f0:	f107 031c 	add.w	r3, r7, #28
 80028f4:	4619      	mov	r1, r3
 80028f6:	485f      	ldr	r0, [pc, #380]	; (8002a74 <MX_GPIO_Init+0x294>)
 80028f8:	f002 f944 	bl	8004b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80028fc:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8002900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002902:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002908:	2300      	movs	r3, #0
 800290a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800290c:	f107 031c 	add.w	r3, r7, #28
 8002910:	4619      	mov	r1, r3
 8002912:	485b      	ldr	r0, [pc, #364]	; (8002a80 <MX_GPIO_Init+0x2a0>)
 8002914:	f002 f936 	bl	8004b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8002918:	f248 131c 	movw	r3, #33052	; 0x811c
 800291c:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800291e:	2301      	movs	r3, #1
 8002920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002922:	2300      	movs	r3, #0
 8002924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002926:	2300      	movs	r3, #0
 8002928:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800292a:	f107 031c 	add.w	r3, r7, #28
 800292e:	4619      	mov	r1, r3
 8002930:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002934:	f002 f926 	bl	8004b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8002938:	2301      	movs	r3, #1
 800293a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800293c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002942:	2300      	movs	r3, #0
 8002944:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8002946:	f107 031c 	add.w	r3, r7, #28
 800294a:	4619      	mov	r1, r3
 800294c:	484a      	ldr	r0, [pc, #296]	; (8002a78 <MX_GPIO_Init+0x298>)
 800294e:	f002 f919 	bl	8004b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8002952:	2302      	movs	r3, #2
 8002954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002956:	2302      	movs	r3, #2
 8002958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295a:	2300      	movs	r3, #0
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295e:	2300      	movs	r3, #0
 8002960:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002962:	2302      	movs	r3, #2
 8002964:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8002966:	f107 031c 	add.w	r3, r7, #28
 800296a:	4619      	mov	r1, r3
 800296c:	4842      	ldr	r0, [pc, #264]	; (8002a78 <MX_GPIO_Init+0x298>)
 800296e:	f002 f909 	bl	8004b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 8002972:	f24b 0334 	movw	r3, #45108	; 0xb034
 8002976:	61fb      	str	r3, [r7, #28]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002978:	2301      	movs	r3, #1
 800297a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297c:	2300      	movs	r3, #0
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002980:	2300      	movs	r3, #0
 8002982:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002984:	f107 031c 	add.w	r3, r7, #28
 8002988:	4619      	mov	r1, r3
 800298a:	483b      	ldr	r0, [pc, #236]	; (8002a78 <MX_GPIO_Init+0x298>)
 800298c:	f002 f8fa 	bl	8004b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8002990:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002996:	2301      	movs	r3, #1
 8002998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299a:	2300      	movs	r3, #0
 800299c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800299e:	2303      	movs	r3, #3
 80029a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80029a2:	f107 031c 	add.w	r3, r7, #28
 80029a6:	4619      	mov	r1, r3
 80029a8:	4833      	ldr	r0, [pc, #204]	; (8002a78 <MX_GPIO_Init+0x298>)
 80029aa:	f002 f8eb 	bl	8004b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 80029ae:	f64d 4304 	movw	r3, #56324	; 0xdc04
 80029b2:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80029b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ba:	2300      	movs	r3, #0
 80029bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029be:	f107 031c 	add.w	r3, r7, #28
 80029c2:	4619      	mov	r1, r3
 80029c4:	482d      	ldr	r0, [pc, #180]	; (8002a7c <MX_GPIO_Init+0x29c>)
 80029c6:	f002 f8dd 	bl	8004b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 80029ca:	f242 0383 	movw	r3, #8323	; 0x2083
 80029ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029d0:	2301      	movs	r3, #1
 80029d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d4:	2300      	movs	r3, #0
 80029d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d8:	2300      	movs	r3, #0
 80029da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029dc:	f107 031c 	add.w	r3, r7, #28
 80029e0:	4619      	mov	r1, r3
 80029e2:	4826      	ldr	r0, [pc, #152]	; (8002a7c <MX_GPIO_Init+0x29c>)
 80029e4:	f002 f8ce 	bl	8004b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80029e8:	f44f 7310 	mov.w	r3, #576	; 0x240
 80029ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ee:	2301      	movs	r3, #1
 80029f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f6:	2300      	movs	r3, #0
 80029f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029fa:	f107 031c 	add.w	r3, r7, #28
 80029fe:	4619      	mov	r1, r3
 8002a00:	481f      	ldr	r0, [pc, #124]	; (8002a80 <MX_GPIO_Init+0x2a0>)
 8002a02:	f002 f8bf 	bl	8004b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8002a06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a10:	2300      	movs	r3, #0
 8002a12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002a14:	f107 031c 	add.w	r3, r7, #28
 8002a18:	4619      	mov	r1, r3
 8002a1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a1e:	f002 f8b1 	bl	8004b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8002a22:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a30:	2303      	movs	r3, #3
 8002a32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002a34:	230a      	movs	r3, #10
 8002a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a38:	f107 031c 	add.w	r3, r7, #28
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a42:	f002 f89f 	bl	8004b84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002a46:	2200      	movs	r2, #0
 8002a48:	2100      	movs	r1, #0
 8002a4a:	2017      	movs	r0, #23
 8002a4c:	f001 fe9a 	bl	8004784 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002a50:	2017      	movs	r0, #23
 8002a52:	f001 feb3 	bl	80047bc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8002a56:	2200      	movs	r2, #0
 8002a58:	2106      	movs	r1, #6
 8002a5a:	2028      	movs	r0, #40	; 0x28
 8002a5c:	f001 fe92 	bl	8004784 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002a60:	2028      	movs	r0, #40	; 0x28
 8002a62:	f001 feab 	bl	80047bc <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a66:	bf00      	nop
 8002a68:	3730      	adds	r7, #48	; 0x30
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40021000 	.word	0x40021000
 8002a74:	48001000 	.word	0x48001000
 8002a78:	48000400 	.word	0x48000400
 8002a7c:	48000c00 	.word	0x48000c00
 8002a80:	48000800 	.word	0x48000800

08002a84 <MyLED2_init>:

/* USER CODE BEGIN 4 */
static void MyLED2_init(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  //Configure the MODE register
  //01:general purpose output
  //MODER Bit 29 and Bit 28
  //Reset both bits 28 and 29 to 0
	GPIOB->MODER &=~(0x3 <<28);
 8002a88:	4b16      	ldr	r3, [pc, #88]	; (8002ae4 <MyLED2_init+0x60>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a15      	ldr	r2, [pc, #84]	; (8002ae4 <MyLED2_init+0x60>)
 8002a8e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002a92:	6013      	str	r3, [r2, #0]
  //Set the values to 1
	GPIOB->MODER |=(0x1 <<28);
 8002a94:	4b13      	ldr	r3, [pc, #76]	; (8002ae4 <MyLED2_init+0x60>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a12      	ldr	r2, [pc, #72]	; (8002ae4 <MyLED2_init+0x60>)
 8002a9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a9e:	6013      	str	r3, [r2, #0]

  //Configure the output type register
  //0:Push-Pull
  //OTYPER Bit 14 to 0
	GPIOB->OTYPER &=~(1<<14);
 8002aa0:	4b10      	ldr	r3, [pc, #64]	; (8002ae4 <MyLED2_init+0x60>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	4a0f      	ldr	r2, [pc, #60]	; (8002ae4 <MyLED2_init+0x60>)
 8002aa6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002aaa:	6053      	str	r3, [r2, #4]

  //Configure the speed register
  //11:Very high speed
  //OSPEEDR Bit 29 and Bit 28
  //Reset both bits 28 and 29 to 0
	GPIOB->OSPEEDR &=~(0x3 <<28);
 8002aac:	4b0d      	ldr	r3, [pc, #52]	; (8002ae4 <MyLED2_init+0x60>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	4a0c      	ldr	r2, [pc, #48]	; (8002ae4 <MyLED2_init+0x60>)
 8002ab2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002ab6:	6093      	str	r3, [r2, #8]
  //Set the values to 1
	GPIOB->OSPEEDR |=(0x1 <<28);
 8002ab8:	4b0a      	ldr	r3, [pc, #40]	; (8002ae4 <MyLED2_init+0x60>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	4a09      	ldr	r2, [pc, #36]	; (8002ae4 <MyLED2_init+0x60>)
 8002abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac2:	6093      	str	r3, [r2, #8]

  //Configure pull-up/pull-down register
  //00: no pull-up/pull-down
  //PUPDR Bit 29 and Bit 28
  //Reset both bits 28 and 29 to 0
	GPIOB->PUPDR &=~(0x3 <<28);
 8002ac4:	4b07      	ldr	r3, [pc, #28]	; (8002ae4 <MyLED2_init+0x60>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	4a06      	ldr	r2, [pc, #24]	; (8002ae4 <MyLED2_init+0x60>)
 8002aca:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002ace:	60d3      	str	r3, [r2, #12]
  //Set the values to 0
	GPIOB->PUPDR |=(0x0 <<28);
 8002ad0:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <MyLED2_init+0x60>)
 8002ad2:	4a04      	ldr	r2, [pc, #16]	; (8002ae4 <MyLED2_init+0x60>)
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	60d3      	str	r3, [r2, #12]

}
 8002ad8:	bf00      	nop
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	48000400 	.word	0x48000400

08002ae8 <MyButton_init>:

static void MyButton_init(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
  //Button is Port C, Pin 13, EXTI13
  //Configure SYSCLK
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aee:	4b1d      	ldr	r3, [pc, #116]	; (8002b64 <MyButton_init+0x7c>)
 8002af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af2:	4a1c      	ldr	r2, [pc, #112]	; (8002b64 <MyButton_init+0x7c>)
 8002af4:	f043 0301 	orr.w	r3, r3, #1
 8002af8:	6613      	str	r3, [r2, #96]	; 0x60
 8002afa:	4b1a      	ldr	r3, [pc, #104]	; (8002b64 <MyButton_init+0x7c>)
 8002afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	607b      	str	r3, [r7, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]

  //Configure the MODE register
  //00:input mode
  //MODER Bit 27 and Bit 26
  //Reset both bits 27 and 26 to 0
	GPIOC->MODER &=~(0x3 <<26);
 8002b06:	4b18      	ldr	r3, [pc, #96]	; (8002b68 <MyButton_init+0x80>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a17      	ldr	r2, [pc, #92]	; (8002b68 <MyButton_init+0x80>)
 8002b0c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002b10:	6013      	str	r3, [r2, #0]

  //Configure pull-up/pull-down register
  //00: no pull-up/pull-down
  //PUPDR Bit 27 and Bit 26
  //Reset both bits 27 and 26 to 0
	GPIOC->PUPDR &=~(0x3 <<26);
 8002b12:	4b15      	ldr	r3, [pc, #84]	; (8002b68 <MyButton_init+0x80>)
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	4a14      	ldr	r2, [pc, #80]	; (8002b68 <MyButton_init+0x80>)
 8002b18:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002b1c:	60d3      	str	r3, [r2, #12]
  //Set the values to 0
	GPIOC->PUPDR |=(0x0 <<26);
 8002b1e:	4b12      	ldr	r3, [pc, #72]	; (8002b68 <MyButton_init+0x80>)
 8002b20:	4a11      	ldr	r2, [pc, #68]	; (8002b68 <MyButton_init+0x80>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	60d3      	str	r3, [r2, #12]

  //sysconfig Register
  //EXTI13, Choose port C
  //Configure the External Interrupt Configuration Register
  //SYSCFG_EXTICR4 :only 2nd bit in EXTICR[3] is set to 1
	SYSCFG->EXTICR[3]|=(0x1<<5);
 8002b26:	4b11      	ldr	r3, [pc, #68]	; (8002b6c <MyButton_init+0x84>)
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	4a10      	ldr	r2, [pc, #64]	; (8002b6c <MyButton_init+0x84>)
 8002b2c:	f043 0320 	orr.w	r3, r3, #32
 8002b30:	6153      	str	r3, [r2, #20]

  //Configure the falling trigger selection register
  //EXTI_FTSR
	EXTI->FTSR1 |=(0x1 <<13) ;
 8002b32:	4b0f      	ldr	r3, [pc, #60]	; (8002b70 <MyButton_init+0x88>)
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	4a0e      	ldr	r2, [pc, #56]	; (8002b70 <MyButton_init+0x88>)
 8002b38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b3c:	60d3      	str	r3, [r2, #12]

  //Configure the Interrupt Mask Register
  //EXTI_IMR
	EXTI->IMR1 |=(0x1 <<13);
 8002b3e:	4b0c      	ldr	r3, [pc, #48]	; (8002b70 <MyButton_init+0x88>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a0b      	ldr	r2, [pc, #44]	; (8002b70 <MyButton_init+0x88>)
 8002b44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b48:	6013      	str	r3, [r2, #0]

  //Configure NVIC Set Enable Register
  //NVIC_ISER
  //NVIC->ISER[] Register no. & location based on position
  //NVIC->ISER[(((uint32_t)EXTI15_10_IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)EXTI15_10_IRQn) & 0x1FUL));
	NVIC->ISER[1] |= (0x1 << 8);
 8002b4a:	4b0a      	ldr	r3, [pc, #40]	; (8002b74 <MyButton_init+0x8c>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	4a09      	ldr	r2, [pc, #36]	; (8002b74 <MyButton_init+0x8c>)
 8002b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b54:	6053      	str	r3, [r2, #4]
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	40021000 	.word	0x40021000
 8002b68:	48000800 	.word	0x48000800
 8002b6c:	40010000 	.word	0x40010000
 8002b70:	40010400 	.word	0x40010400
 8002b74:	e000e100 	.word	0xe000e100

08002b78 <MyUART1_init>:

static void MyUART1_init(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
	//configure UART1 manually excluding Baud Rate Register
	//configuring M bits-Bits 12,28 to 0,0 for 1 start bit, 8 data bits, n stop bits in USART_CR1 register
	huart1.Instance->CR1 &=~(0x1 <<12);
 8002b7c:	4b22      	ldr	r3, [pc, #136]	; (8002c08 <MyUART1_init+0x90>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	4b21      	ldr	r3, [pc, #132]	; (8002c08 <MyUART1_init+0x90>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b8a:	601a      	str	r2, [r3, #0]
	huart1.Instance->CR1 &=~(0x1 <<28);
 8002b8c:	4b1e      	ldr	r3, [pc, #120]	; (8002c08 <MyUART1_init+0x90>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	4b1d      	ldr	r3, [pc, #116]	; (8002c08 <MyUART1_init+0x90>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002b9a:	601a      	str	r2, [r3, #0]
	//configuring Bit 15 to 1 for oversampling by 8 in USART_CR1 register
	huart1.Instance->CR1 |=(0x1 <<15);
 8002b9c:	4b1a      	ldr	r3, [pc, #104]	; (8002c08 <MyUART1_init+0x90>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	4b19      	ldr	r3, [pc, #100]	; (8002c08 <MyUART1_init+0x90>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002baa:	601a      	str	r2, [r3, #0]
	//configuring Bit 10 to 0 to disable parity control in USART_CR1 register
	huart1.Instance->CR1 &=~(0x1 <<10);
 8002bac:	4b16      	ldr	r3, [pc, #88]	; (8002c08 <MyUART1_init+0x90>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	4b15      	ldr	r3, [pc, #84]	; (8002c08 <MyUART1_init+0x90>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bba:	601a      	str	r2, [r3, #0]
	//configuring Bit 0 to 1 to enable UART in USART_CR1 register
	huart1.Instance->CR1 |=(0x1 <<0);
 8002bbc:	4b12      	ldr	r3, [pc, #72]	; (8002c08 <MyUART1_init+0x90>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <MyUART1_init+0x90>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0201 	orr.w	r2, r2, #1
 8002bca:	601a      	str	r2, [r3, #0]
	//configuring Bit 3 to 1 to enable Transmitter in USART_CR1 register
	huart1.Instance->CR1 |=(0x1 <<3);
 8002bcc:	4b0e      	ldr	r3, [pc, #56]	; (8002c08 <MyUART1_init+0x90>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	4b0d      	ldr	r3, [pc, #52]	; (8002c08 <MyUART1_init+0x90>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f042 0208 	orr.w	r2, r2, #8
 8002bda:	601a      	str	r2, [r3, #0]
	//configuring Bit 2 to 1 to enable Receiver in USART_CR1 register
	huart1.Instance->CR1 |=(0x1 <<2);
 8002bdc:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <MyUART1_init+0x90>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	4b09      	ldr	r3, [pc, #36]	; (8002c08 <MyUART1_init+0x90>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0204 	orr.w	r2, r2, #4
 8002bea:	601a      	str	r2, [r3, #0]
	//configuring Bits 12,13 to 0,0 for 1 stop bit in USART_CR2 register
	huart1.Instance->CR2 &=(0x3 <<12);
 8002bec:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <MyUART1_init+0x90>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <MyUART1_init+0x90>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8002bfa:	605a      	str	r2, [r3, #4]

}
 8002bfc:	bf00      	nop
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	2000109c 	.word	0x2000109c

08002c0c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af02      	add	r7, sp, #8
 8002c12:	4603      	mov	r3, r0
 8002c14:	80fb      	strh	r3, [r7, #6]
	//activate the message transmission once a button is pushed
	xTaskNotifyFromISR(pUART_SendMsg, 0, eNoAction, NULL);
 8002c16:	4b07      	ldr	r3, [pc, #28]	; (8002c34 <HAL_GPIO_EXTI_Callback+0x28>)
 8002c18:	6818      	ldr	r0, [r3, #0]
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	9301      	str	r3, [sp, #4]
 8002c1e:	2300      	movs	r3, #0
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	2300      	movs	r3, #0
 8002c24:	2200      	movs	r2, #0
 8002c26:	2100      	movs	r1, #0
 8002c28:	f7fe fbb0 	bl	800138c <xTaskGenericNotifyFromISR>
}
 8002c2c:	bf00      	nop
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	20000d74 	.word	0x20000d74

08002c38 <SOS_Transmit>:
static void SOS_Transmit(void *parameter)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  repeat = 2;
 8002c40:	4b36      	ldr	r3, [pc, #216]	; (8002d1c <SOS_Transmit+0xe4>)
 8002c42:	2202      	movs	r2, #2
 8002c44:	701a      	strb	r2, [r3, #0]
	      //while(repeat>0)
	      while(1)
		  {

	        //sending 's'
	        for(int i=0; i<3; i++)
 8002c46:	2300      	movs	r3, #0
 8002c48:	613b      	str	r3, [r7, #16]
 8002c4a:	e016      	b.n	8002c7a <SOS_Transmit+0x42>
	           {
		        //turning up the led for a dot
		        //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET); or
		        //write a 1 to Bit 14 of GPIOB ODR(output data register)
		          GPIOB->ODR |=(1<<14);
 8002c4c:	4b34      	ldr	r3, [pc, #208]	; (8002d20 <SOS_Transmit+0xe8>)
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	4a33      	ldr	r2, [pc, #204]	; (8002d20 <SOS_Transmit+0xe8>)
 8002c52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c56:	6153      	str	r3, [r2, #20]
		          //HAL_Delay(300);
		          vTaskDelay(300);
 8002c58:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002c5c:	f7fd fe68 	bl	8000930 <vTaskDelay>

	            //turning the led off for spacing
		        //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET); or
		        //write a 0 to Bit 14 of GPIOB ODR(output data register)
		          GPIOB->ODR &=~(1<<14);
 8002c60:	4b2f      	ldr	r3, [pc, #188]	; (8002d20 <SOS_Transmit+0xe8>)
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	4a2e      	ldr	r2, [pc, #184]	; (8002d20 <SOS_Transmit+0xe8>)
 8002c66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c6a:	6153      	str	r3, [r2, #20]
		          vTaskDelay(300);
 8002c6c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002c70:	f7fd fe5e 	bl	8000930 <vTaskDelay>
	        for(int i=0; i<3; i++)
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	3301      	adds	r3, #1
 8002c78:	613b      	str	r3, [r7, #16]
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	dde5      	ble.n	8002c4c <SOS_Transmit+0x14>
	            }
	         //3 time units between characters
	         // HAL_Delay(300*2);
	         vTaskDelay(300*2);
 8002c80:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002c84:	f7fd fe54 	bl	8000930 <vTaskDelay>

	         //sending 'o'
	         for(int i=0; i<3; i++)
 8002c88:	2300      	movs	r3, #0
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	e016      	b.n	8002cbc <SOS_Transmit+0x84>
	 	       {
	 		    //turning up the led for a dash
	 		    //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
		        //write a 1 to Bit 14 of GPIOB ODR(output data register)
		  	    GPIOB->ODR |=(1<<14);
 8002c8e:	4b24      	ldr	r3, [pc, #144]	; (8002d20 <SOS_Transmit+0xe8>)
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	4a23      	ldr	r2, [pc, #140]	; (8002d20 <SOS_Transmit+0xe8>)
 8002c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c98:	6153      	str	r3, [r2, #20]
	 		    //HAL_Delay(300*3);
		  	    vTaskDelay(300*3);
 8002c9a:	f44f 7061 	mov.w	r0, #900	; 0x384
 8002c9e:	f7fd fe47 	bl	8000930 <vTaskDelay>
	 	        //turning the led off for spacing
	 		    //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
	 		    //write a 0 to Bit 14 of GPIOB ODR(output data register)
	 		    GPIOB->ODR &=~(1<<14);
 8002ca2:	4b1f      	ldr	r3, [pc, #124]	; (8002d20 <SOS_Transmit+0xe8>)
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	4a1e      	ldr	r2, [pc, #120]	; (8002d20 <SOS_Transmit+0xe8>)
 8002ca8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cac:	6153      	str	r3, [r2, #20]
	 		    //HAL_Delay(300);
	 		    vTaskDelay(300);
 8002cae:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002cb2:	f7fd fe3d 	bl	8000930 <vTaskDelay>
	         for(int i=0; i<3; i++)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	dde5      	ble.n	8002c8e <SOS_Transmit+0x56>
	 	       }
	 	     //3 time units between characters
	         //HAL_Delay(300*2);
	         vTaskDelay(300*2);
 8002cc2:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002cc6:	f7fd fe33 	bl	8000930 <vTaskDelay>
	         //sending 's'
	         for(int i=0; i<3; i++)
 8002cca:	2300      	movs	r3, #0
 8002ccc:	617b      	str	r3, [r7, #20]
 8002cce:	e016      	b.n	8002cfe <SOS_Transmit+0xc6>
	 		  {
	 			  //turning up the led for a dot
	 			  //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
		         //write a 1 to Bit 14 of GPIOB ODR(output data register)
		  		  GPIOB->ODR |=(1<<14);
 8002cd0:	4b13      	ldr	r3, [pc, #76]	; (8002d20 <SOS_Transmit+0xe8>)
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	4a12      	ldr	r2, [pc, #72]	; (8002d20 <SOS_Transmit+0xe8>)
 8002cd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cda:	6153      	str	r3, [r2, #20]
		       // HAL_Delay(300);
		  		vTaskDelay(300);
 8002cdc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002ce0:	f7fd fe26 	bl	8000930 <vTaskDelay>
	 		      //turning the led off for spacing
	 			  //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
		          //write a 0 to Bit 14 of GPIOB ODR(output data register)
		          GPIOB->ODR &=~(1<<14);
 8002ce4:	4b0e      	ldr	r3, [pc, #56]	; (8002d20 <SOS_Transmit+0xe8>)
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	4a0d      	ldr	r2, [pc, #52]	; (8002d20 <SOS_Transmit+0xe8>)
 8002cea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cee:	6153      	str	r3, [r2, #20]
		        //HAL_Delay(300);
		          vTaskDelay(300);
 8002cf0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002cf4:	f7fd fe1c 	bl	8000930 <vTaskDelay>
	         for(int i=0; i<3; i++)
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	617b      	str	r3, [r7, #20]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	dde5      	ble.n	8002cd0 <SOS_Transmit+0x98>
	 		  }
	         //7 time units between words
	 	     // HAL_Delay(300*6);
	         vTaskDelay(300*6);
 8002d04:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8002d08:	f7fd fe12 	bl	8000930 <vTaskDelay>
             repeat--;
 8002d0c:	4b03      	ldr	r3, [pc, #12]	; (8002d1c <SOS_Transmit+0xe4>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	3b01      	subs	r3, #1
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	4b01      	ldr	r3, [pc, #4]	; (8002d1c <SOS_Transmit+0xe4>)
 8002d16:	701a      	strb	r2, [r3, #0]
	        for(int i=0; i<3; i++)
 8002d18:	e795      	b.n	8002c46 <SOS_Transmit+0xe>
 8002d1a:	bf00      	nop
 8002d1c:	20000d78 	.word	0x20000d78
 8002d20:	48000400 	.word	0x48000400

08002d24 <TargetReceive>:

	  return tmp_f;
}

static void TargetReceive(void *parameter)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
   while(1)
   {
   vTaskSuspend(pTargetReceive);
 8002d2c:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <TargetReceive+0x2c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7fd fe31 	bl	8000998 <vTaskSuspend>
   HAL_UART_Transmit(&huart1, RxBuf, strlen(RxBuf), 1000);
 8002d36:	4807      	ldr	r0, [pc, #28]	; (8002d54 <TargetReceive+0x30>)
 8002d38:	f7fd fa62 	bl	8000200 <strlen>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d44:	4903      	ldr	r1, [pc, #12]	; (8002d54 <TargetReceive+0x30>)
 8002d46:	4804      	ldr	r0, [pc, #16]	; (8002d58 <TargetReceive+0x34>)
 8002d48:	f006 faa6 	bl	8009298 <HAL_UART_Transmit>
   vTaskSuspend(pTargetReceive);
 8002d4c:	e7ee      	b.n	8002d2c <TargetReceive+0x8>
 8002d4e:	bf00      	nop
 8002d50:	20000d80 	.word	0x20000d80
 8002d54:	20000d84 	.word	0x20000d84
 8002d58:	2000109c 	.word	0x2000109c

08002d5c <HAL_I2C_MemRxCpltCallback>:
    xQueueSendFromISR(pUARTQueue, &receiveBuf, xHigherPriorityTaskWoken);
    HAL_UART_Receive_IT(&huart1, &receiveBuf, 1);*/
}

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
	//readComplete = 1;
	xTaskResumeFromISR(pTempSensorRead);
 8002d64:	4b04      	ldr	r3, [pc, #16]	; (8002d78 <HAL_I2C_MemRxCpltCallback+0x1c>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7fd fee7 	bl	8000b3c <xTaskResumeFromISR>
}
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	20000d7c 	.word	0x20000d7c

08002d7c <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
	//writeComplete = 1;
	xTaskResumeFromISR(pTempSensorRead);
 8002d84:	4b04      	ldr	r3, [pc, #16]	; (8002d98 <HAL_I2C_MemTxCpltCallback+0x1c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7fd fed7 	bl	8000b3c <xTaskResumeFromISR>
}
 8002d8e:	bf00      	nop
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	20000d7c 	.word	0x20000d7c

08002d9c <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
   HAL_I2C_EnableListen_IT(&hi2c1);
 8002da4:	4803      	ldr	r0, [pc, #12]	; (8002db4 <HAL_I2C_ListenCpltCallback+0x18>)
 8002da6:	f002 f9fd 	bl	80051a4 <HAL_I2C_EnableListen_IT>
}
 8002daa:	bf00      	nop
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	20000e48 	.word	0x20000e48

08002db8 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	70fb      	strb	r3, [r7, #3]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	803b      	strh	r3, [r7, #0]
   if (TransferDirection == I2C_DIRECTION_TRANSMIT)
 8002dc8:	78fb      	ldrb	r3, [r7, #3]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d106      	bne.n	8002ddc <HAL_I2C_AddrCallback+0x24>
   {
	   //HAL_I2C_Slave_Seq_Receive_IT(hi2c, pData, Size, XferOptions)
	   HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxBuf, 7, I2C_FIRST_AND_LAST_FRAME);
 8002dce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dd2:	2207      	movs	r2, #7
 8002dd4:	4903      	ldr	r1, [pc, #12]	; (8002de4 <HAL_I2C_AddrCallback+0x2c>)
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f002 f932 	bl	8005040 <HAL_I2C_Slave_Seq_Receive_IT>
   }
}
 8002ddc:	bf00      	nop
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	20000d84 	.word	0x20000d84

08002de8 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
   xTaskResumeFromISR(pTargetReceive);
 8002df0:	4b04      	ldr	r3, [pc, #16]	; (8002e04 <HAL_I2C_SlaveRxCpltCallback+0x1c>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7fd fea1 	bl	8000b3c <xTaskResumeFromISR>
}
 8002dfa:	bf00      	nop
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	20000d80 	.word	0x20000d80

08002e08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a04      	ldr	r2, [pc, #16]	; (8002e28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d101      	bne.n	8002e1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002e1a:	f000 fcf9 	bl	8003810 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002e1e:	bf00      	nop
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40001000 	.word	0x40001000

08002e2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e30:	b672      	cpsid	i
}
 8002e32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e34:	e7fe      	b.n	8002e34 <Error_Handler+0x8>
	...

08002e38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e3e:	4b0f      	ldr	r3, [pc, #60]	; (8002e7c <HAL_MspInit+0x44>)
 8002e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e42:	4a0e      	ldr	r2, [pc, #56]	; (8002e7c <HAL_MspInit+0x44>)
 8002e44:	f043 0301 	orr.w	r3, r3, #1
 8002e48:	6613      	str	r3, [r2, #96]	; 0x60
 8002e4a:	4b0c      	ldr	r3, [pc, #48]	; (8002e7c <HAL_MspInit+0x44>)
 8002e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	607b      	str	r3, [r7, #4]
 8002e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e56:	4b09      	ldr	r3, [pc, #36]	; (8002e7c <HAL_MspInit+0x44>)
 8002e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5a:	4a08      	ldr	r2, [pc, #32]	; (8002e7c <HAL_MspInit+0x44>)
 8002e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e60:	6593      	str	r3, [r2, #88]	; 0x58
 8002e62:	4b06      	ldr	r3, [pc, #24]	; (8002e7c <HAL_MspInit+0x44>)
 8002e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6a:	603b      	str	r3, [r7, #0]
 8002e6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	40021000 	.word	0x40021000

08002e80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b08a      	sub	sp, #40	; 0x28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e88:	f107 0314 	add.w	r3, r7, #20
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	605a      	str	r2, [r3, #4]
 8002e92:	609a      	str	r2, [r3, #8]
 8002e94:	60da      	str	r2, [r3, #12]
 8002e96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a15      	ldr	r2, [pc, #84]	; (8002ef4 <HAL_ADC_MspInit+0x74>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d123      	bne.n	8002eea <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002ea2:	4b15      	ldr	r3, [pc, #84]	; (8002ef8 <HAL_ADC_MspInit+0x78>)
 8002ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea6:	4a14      	ldr	r2, [pc, #80]	; (8002ef8 <HAL_ADC_MspInit+0x78>)
 8002ea8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002eac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002eae:	4b12      	ldr	r3, [pc, #72]	; (8002ef8 <HAL_ADC_MspInit+0x78>)
 8002eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eb6:	613b      	str	r3, [r7, #16]
 8002eb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eba:	4b0f      	ldr	r3, [pc, #60]	; (8002ef8 <HAL_ADC_MspInit+0x78>)
 8002ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ebe:	4a0e      	ldr	r2, [pc, #56]	; (8002ef8 <HAL_ADC_MspInit+0x78>)
 8002ec0:	f043 0304 	orr.w	r3, r3, #4
 8002ec4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ec6:	4b0c      	ldr	r3, [pc, #48]	; (8002ef8 <HAL_ADC_MspInit+0x78>)
 8002ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eca:	f003 0304 	and.w	r3, r3, #4
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8002ed2:	233f      	movs	r3, #63	; 0x3f
 8002ed4:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002ed6:	230b      	movs	r3, #11
 8002ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eda:	2300      	movs	r3, #0
 8002edc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ede:	f107 0314 	add.w	r3, r7, #20
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4805      	ldr	r0, [pc, #20]	; (8002efc <HAL_ADC_MspInit+0x7c>)
 8002ee6:	f001 fe4d 	bl	8004b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002eea:	bf00      	nop
 8002eec:	3728      	adds	r7, #40	; 0x28
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	50040000 	.word	0x50040000
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	48000800 	.word	0x48000800

08002f00 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b0ae      	sub	sp, #184	; 0xb8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f08:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	605a      	str	r2, [r3, #4]
 8002f12:	609a      	str	r2, [r3, #8]
 8002f14:	60da      	str	r2, [r3, #12]
 8002f16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f18:	f107 0310 	add.w	r3, r7, #16
 8002f1c:	2294      	movs	r2, #148	; 0x94
 8002f1e:	2100      	movs	r1, #0
 8002f20:	4618      	mov	r0, r3
 8002f22:	f007 fc05 	bl	800a730 <memset>
  if(DFSDM1_Init == 0)
 8002f26:	4b25      	ldr	r3, [pc, #148]	; (8002fbc <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d142      	bne.n	8002fb4 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8002f2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f32:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002f34:	2300      	movs	r3, #0
 8002f36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f3a:	f107 0310 	add.w	r3, r7, #16
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f005 f8dc 	bl	80080fc <HAL_RCCEx_PeriphCLKConfig>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8002f4a:	f7ff ff6f 	bl	8002e2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002f4e:	4b1c      	ldr	r3, [pc, #112]	; (8002fc0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f52:	4a1b      	ldr	r2, [pc, #108]	; (8002fc0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002f54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f58:	6613      	str	r3, [r2, #96]	; 0x60
 8002f5a:	4b19      	ldr	r3, [pc, #100]	; (8002fc0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f66:	4b16      	ldr	r3, [pc, #88]	; (8002fc0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f6a:	4a15      	ldr	r2, [pc, #84]	; (8002fc0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002f6c:	f043 0310 	orr.w	r3, r3, #16
 8002f70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f72:	4b13      	ldr	r3, [pc, #76]	; (8002fc0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f76:	f003 0310 	and.w	r3, r3, #16
 8002f7a:	60bb      	str	r3, [r7, #8]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8002f7e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8002f82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f86:	2302      	movs	r3, #2
 8002f88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f92:	2300      	movs	r3, #0
 8002f94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002f98:	2306      	movs	r3, #6
 8002f9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f9e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	4807      	ldr	r0, [pc, #28]	; (8002fc4 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8002fa6:	f001 fded 	bl	8004b84 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8002faa:	4b04      	ldr	r3, [pc, #16]	; (8002fbc <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	4a02      	ldr	r2, [pc, #8]	; (8002fbc <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002fb2:	6013      	str	r3, [r2, #0]
  }

}
 8002fb4:	bf00      	nop
 8002fb6:	37b8      	adds	r7, #184	; 0xb8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	20001258 	.word	0x20001258
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	48001000 	.word	0x48001000

08002fc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b0b0      	sub	sp, #192	; 0xc0
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	605a      	str	r2, [r3, #4]
 8002fda:	609a      	str	r2, [r3, #8]
 8002fdc:	60da      	str	r2, [r3, #12]
 8002fde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fe0:	f107 0318 	add.w	r3, r7, #24
 8002fe4:	2294      	movs	r2, #148	; 0x94
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f007 fba1 	bl	800a730 <memset>
  if(hi2c->Instance==I2C1)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a52      	ldr	r2, [pc, #328]	; (800313c <HAL_I2C_MspInit+0x174>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d14c      	bne.n	8003092 <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002ff8:	2340      	movs	r3, #64	; 0x40
 8002ffa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003000:	f107 0318 	add.w	r3, r7, #24
 8003004:	4618      	mov	r0, r3
 8003006:	f005 f879 	bl	80080fc <HAL_RCCEx_PeriphCLKConfig>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003010:	f7ff ff0c 	bl	8002e2c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003014:	4b4a      	ldr	r3, [pc, #296]	; (8003140 <HAL_I2C_MspInit+0x178>)
 8003016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003018:	4a49      	ldr	r2, [pc, #292]	; (8003140 <HAL_I2C_MspInit+0x178>)
 800301a:	f043 0302 	orr.w	r3, r3, #2
 800301e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003020:	4b47      	ldr	r3, [pc, #284]	; (8003140 <HAL_I2C_MspInit+0x178>)
 8003022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	617b      	str	r3, [r7, #20]
 800302a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800302c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003030:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003034:	2312      	movs	r3, #18
 8003036:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800303a:	2301      	movs	r3, #1
 800303c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003040:	2303      	movs	r3, #3
 8003042:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003046:	2304      	movs	r3, #4
 8003048:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800304c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003050:	4619      	mov	r1, r3
 8003052:	483c      	ldr	r0, [pc, #240]	; (8003144 <HAL_I2C_MspInit+0x17c>)
 8003054:	f001 fd96 	bl	8004b84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003058:	4b39      	ldr	r3, [pc, #228]	; (8003140 <HAL_I2C_MspInit+0x178>)
 800305a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305c:	4a38      	ldr	r2, [pc, #224]	; (8003140 <HAL_I2C_MspInit+0x178>)
 800305e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003062:	6593      	str	r3, [r2, #88]	; 0x58
 8003064:	4b36      	ldr	r3, [pc, #216]	; (8003140 <HAL_I2C_MspInit+0x178>)
 8003066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800306c:	613b      	str	r3, [r7, #16]
 800306e:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 6, 0);
 8003070:	2200      	movs	r2, #0
 8003072:	2106      	movs	r1, #6
 8003074:	201f      	movs	r0, #31
 8003076:	f001 fb85 	bl	8004784 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800307a:	201f      	movs	r0, #31
 800307c:	f001 fb9e 	bl	80047bc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 6, 0);
 8003080:	2200      	movs	r2, #0
 8003082:	2106      	movs	r1, #6
 8003084:	2020      	movs	r0, #32
 8003086:	f001 fb7d 	bl	8004784 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800308a:	2020      	movs	r0, #32
 800308c:	f001 fb96 	bl	80047bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003090:	e050      	b.n	8003134 <HAL_I2C_MspInit+0x16c>
  else if(hi2c->Instance==I2C2)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a2c      	ldr	r2, [pc, #176]	; (8003148 <HAL_I2C_MspInit+0x180>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d14b      	bne.n	8003134 <HAL_I2C_MspInit+0x16c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800309c:	2380      	movs	r3, #128	; 0x80
 800309e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80030a0:	2300      	movs	r3, #0
 80030a2:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030a4:	f107 0318 	add.w	r3, r7, #24
 80030a8:	4618      	mov	r0, r3
 80030aa:	f005 f827 	bl	80080fc <HAL_RCCEx_PeriphCLKConfig>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 80030b4:	f7ff feba 	bl	8002e2c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030b8:	4b21      	ldr	r3, [pc, #132]	; (8003140 <HAL_I2C_MspInit+0x178>)
 80030ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030bc:	4a20      	ldr	r2, [pc, #128]	; (8003140 <HAL_I2C_MspInit+0x178>)
 80030be:	f043 0302 	orr.w	r3, r3, #2
 80030c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030c4:	4b1e      	ldr	r3, [pc, #120]	; (8003140 <HAL_I2C_MspInit+0x178>)
 80030c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80030d0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80030d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030d8:	2312      	movs	r3, #18
 80030da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030de:	2301      	movs	r3, #1
 80030e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030e4:	2303      	movs	r3, #3
 80030e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80030ea:	2304      	movs	r3, #4
 80030ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030f0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80030f4:	4619      	mov	r1, r3
 80030f6:	4813      	ldr	r0, [pc, #76]	; (8003144 <HAL_I2C_MspInit+0x17c>)
 80030f8:	f001 fd44 	bl	8004b84 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80030fc:	4b10      	ldr	r3, [pc, #64]	; (8003140 <HAL_I2C_MspInit+0x178>)
 80030fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003100:	4a0f      	ldr	r2, [pc, #60]	; (8003140 <HAL_I2C_MspInit+0x178>)
 8003102:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003106:	6593      	str	r3, [r2, #88]	; 0x58
 8003108:	4b0d      	ldr	r3, [pc, #52]	; (8003140 <HAL_I2C_MspInit+0x178>)
 800310a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003110:	60bb      	str	r3, [r7, #8]
 8003112:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 6, 0);
 8003114:	2200      	movs	r2, #0
 8003116:	2106      	movs	r1, #6
 8003118:	2021      	movs	r0, #33	; 0x21
 800311a:	f001 fb33 	bl	8004784 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800311e:	2021      	movs	r0, #33	; 0x21
 8003120:	f001 fb4c 	bl	80047bc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 6, 0);
 8003124:	2200      	movs	r2, #0
 8003126:	2106      	movs	r1, #6
 8003128:	2022      	movs	r0, #34	; 0x22
 800312a:	f001 fb2b 	bl	8004784 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800312e:	2022      	movs	r0, #34	; 0x22
 8003130:	f001 fb44 	bl	80047bc <HAL_NVIC_EnableIRQ>
}
 8003134:	bf00      	nop
 8003136:	37c0      	adds	r7, #192	; 0xc0
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40005400 	.word	0x40005400
 8003140:	40021000 	.word	0x40021000
 8003144:	48000400 	.word	0x48000400
 8003148:	40005800 	.word	0x40005800

0800314c <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b0b0      	sub	sp, #192	; 0xc0
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003154:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	605a      	str	r2, [r3, #4]
 800315e:	609a      	str	r2, [r3, #8]
 8003160:	60da      	str	r2, [r3, #12]
 8003162:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003164:	f107 0318 	add.w	r3, r7, #24
 8003168:	2294      	movs	r2, #148	; 0x94
 800316a:	2100      	movs	r1, #0
 800316c:	4618      	mov	r0, r3
 800316e:	f007 fadf 	bl	800a730 <memset>
  if(hospi->Instance==OCTOSPI1)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a28      	ldr	r2, [pc, #160]	; (8003218 <HAL_OSPI_MspInit+0xcc>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d149      	bne.n	8003210 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800317c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003180:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8003182:	2300      	movs	r3, #0
 8003184:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003188:	f107 0318 	add.w	r3, r7, #24
 800318c:	4618      	mov	r0, r3
 800318e:	f004 ffb5 	bl	80080fc <HAL_RCCEx_PeriphCLKConfig>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8003198:	f7ff fe48 	bl	8002e2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 800319c:	4b1f      	ldr	r3, [pc, #124]	; (800321c <HAL_OSPI_MspInit+0xd0>)
 800319e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a0:	4a1e      	ldr	r2, [pc, #120]	; (800321c <HAL_OSPI_MspInit+0xd0>)
 80031a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031a8:	4b1c      	ldr	r3, [pc, #112]	; (800321c <HAL_OSPI_MspInit+0xd0>)
 80031aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80031b4:	4b19      	ldr	r3, [pc, #100]	; (800321c <HAL_OSPI_MspInit+0xd0>)
 80031b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031b8:	4a18      	ldr	r2, [pc, #96]	; (800321c <HAL_OSPI_MspInit+0xd0>)
 80031ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031be:	6513      	str	r3, [r2, #80]	; 0x50
 80031c0:	4b16      	ldr	r3, [pc, #88]	; (800321c <HAL_OSPI_MspInit+0xd0>)
 80031c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c8:	613b      	str	r3, [r7, #16]
 80031ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80031cc:	4b13      	ldr	r3, [pc, #76]	; (800321c <HAL_OSPI_MspInit+0xd0>)
 80031ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d0:	4a12      	ldr	r2, [pc, #72]	; (800321c <HAL_OSPI_MspInit+0xd0>)
 80031d2:	f043 0310 	orr.w	r3, r3, #16
 80031d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031d8:	4b10      	ldr	r3, [pc, #64]	; (800321c <HAL_OSPI_MspInit+0xd0>)
 80031da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031dc:	f003 0310 	and.w	r3, r3, #16
 80031e0:	60fb      	str	r3, [r7, #12]
 80031e2:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80031e4:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80031e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ec:	2302      	movs	r3, #2
 80031ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f2:	2300      	movs	r3, #0
 80031f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031f8:	2303      	movs	r3, #3
 80031fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80031fe:	230a      	movs	r3, #10
 8003200:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003204:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003208:	4619      	mov	r1, r3
 800320a:	4805      	ldr	r0, [pc, #20]	; (8003220 <HAL_OSPI_MspInit+0xd4>)
 800320c:	f001 fcba 	bl	8004b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8003210:	bf00      	nop
 8003212:	37c0      	adds	r7, #192	; 0xc0
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	a0001000 	.word	0xa0001000
 800321c:	40021000 	.word	0x40021000
 8003220:	48001000 	.word	0x48001000

08003224 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b08c      	sub	sp, #48	; 0x30
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800322c:	f107 031c 	add.w	r3, r7, #28
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	605a      	str	r2, [r3, #4]
 8003236:	609a      	str	r2, [r3, #8]
 8003238:	60da      	str	r2, [r3, #12]
 800323a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a2f      	ldr	r2, [pc, #188]	; (8003300 <HAL_SPI_MspInit+0xdc>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d129      	bne.n	800329a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003246:	4b2f      	ldr	r3, [pc, #188]	; (8003304 <HAL_SPI_MspInit+0xe0>)
 8003248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800324a:	4a2e      	ldr	r2, [pc, #184]	; (8003304 <HAL_SPI_MspInit+0xe0>)
 800324c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003250:	6613      	str	r3, [r2, #96]	; 0x60
 8003252:	4b2c      	ldr	r3, [pc, #176]	; (8003304 <HAL_SPI_MspInit+0xe0>)
 8003254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003256:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800325a:	61bb      	str	r3, [r7, #24]
 800325c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800325e:	4b29      	ldr	r3, [pc, #164]	; (8003304 <HAL_SPI_MspInit+0xe0>)
 8003260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003262:	4a28      	ldr	r2, [pc, #160]	; (8003304 <HAL_SPI_MspInit+0xe0>)
 8003264:	f043 0301 	orr.w	r3, r3, #1
 8003268:	64d3      	str	r3, [r2, #76]	; 0x4c
 800326a:	4b26      	ldr	r3, [pc, #152]	; (8003304 <HAL_SPI_MspInit+0xe0>)
 800326c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	617b      	str	r3, [r7, #20]
 8003274:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8003276:	23e0      	movs	r3, #224	; 0xe0
 8003278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800327a:	2302      	movs	r3, #2
 800327c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327e:	2300      	movs	r3, #0
 8003280:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003282:	2303      	movs	r3, #3
 8003284:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003286:	2305      	movs	r3, #5
 8003288:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800328a:	f107 031c 	add.w	r3, r7, #28
 800328e:	4619      	mov	r1, r3
 8003290:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003294:	f001 fc76 	bl	8004b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003298:	e02d      	b.n	80032f6 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a1a      	ldr	r2, [pc, #104]	; (8003308 <HAL_SPI_MspInit+0xe4>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d128      	bne.n	80032f6 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80032a4:	4b17      	ldr	r3, [pc, #92]	; (8003304 <HAL_SPI_MspInit+0xe0>)
 80032a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a8:	4a16      	ldr	r2, [pc, #88]	; (8003304 <HAL_SPI_MspInit+0xe0>)
 80032aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ae:	6593      	str	r3, [r2, #88]	; 0x58
 80032b0:	4b14      	ldr	r3, [pc, #80]	; (8003304 <HAL_SPI_MspInit+0xe0>)
 80032b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032b8:	613b      	str	r3, [r7, #16]
 80032ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032bc:	4b11      	ldr	r3, [pc, #68]	; (8003304 <HAL_SPI_MspInit+0xe0>)
 80032be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032c0:	4a10      	ldr	r2, [pc, #64]	; (8003304 <HAL_SPI_MspInit+0xe0>)
 80032c2:	f043 0304 	orr.w	r3, r3, #4
 80032c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032c8:	4b0e      	ldr	r3, [pc, #56]	; (8003304 <HAL_SPI_MspInit+0xe0>)
 80032ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032cc:	f003 0304 	and.w	r3, r3, #4
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80032d4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80032d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032da:	2302      	movs	r3, #2
 80032dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032de:	2300      	movs	r3, #0
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032e2:	2303      	movs	r3, #3
 80032e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80032e6:	2306      	movs	r3, #6
 80032e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032ea:	f107 031c 	add.w	r3, r7, #28
 80032ee:	4619      	mov	r1, r3
 80032f0:	4806      	ldr	r0, [pc, #24]	; (800330c <HAL_SPI_MspInit+0xe8>)
 80032f2:	f001 fc47 	bl	8004b84 <HAL_GPIO_Init>
}
 80032f6:	bf00      	nop
 80032f8:	3730      	adds	r7, #48	; 0x30
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	40013000 	.word	0x40013000
 8003304:	40021000 	.word	0x40021000
 8003308:	40003c00 	.word	0x40003c00
 800330c:	48000800 	.word	0x48000800

08003310 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b0b4      	sub	sp, #208	; 0xd0
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003318:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	605a      	str	r2, [r3, #4]
 8003322:	609a      	str	r2, [r3, #8]
 8003324:	60da      	str	r2, [r3, #12]
 8003326:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003328:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800332c:	2294      	movs	r2, #148	; 0x94
 800332e:	2100      	movs	r1, #0
 8003330:	4618      	mov	r0, r3
 8003332:	f007 f9fd 	bl	800a730 <memset>
  if(huart->Instance==UART4)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a87      	ldr	r2, [pc, #540]	; (8003558 <HAL_UART_MspInit+0x248>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d13c      	bne.n	80033ba <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003340:	2308      	movs	r3, #8
 8003342:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003344:	2300      	movs	r3, #0
 8003346:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003348:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800334c:	4618      	mov	r0, r3
 800334e:	f004 fed5 	bl	80080fc <HAL_RCCEx_PeriphCLKConfig>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003358:	f7ff fd68 	bl	8002e2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800335c:	4b7f      	ldr	r3, [pc, #508]	; (800355c <HAL_UART_MspInit+0x24c>)
 800335e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003360:	4a7e      	ldr	r2, [pc, #504]	; (800355c <HAL_UART_MspInit+0x24c>)
 8003362:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003366:	6593      	str	r3, [r2, #88]	; 0x58
 8003368:	4b7c      	ldr	r3, [pc, #496]	; (800355c <HAL_UART_MspInit+0x24c>)
 800336a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003370:	627b      	str	r3, [r7, #36]	; 0x24
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003374:	4b79      	ldr	r3, [pc, #484]	; (800355c <HAL_UART_MspInit+0x24c>)
 8003376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003378:	4a78      	ldr	r2, [pc, #480]	; (800355c <HAL_UART_MspInit+0x24c>)
 800337a:	f043 0301 	orr.w	r3, r3, #1
 800337e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003380:	4b76      	ldr	r3, [pc, #472]	; (800355c <HAL_UART_MspInit+0x24c>)
 8003382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	623b      	str	r3, [r7, #32]
 800338a:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800338c:	2303      	movs	r3, #3
 800338e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003392:	2302      	movs	r3, #2
 8003394:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003398:	2300      	movs	r3, #0
 800339a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800339e:	2303      	movs	r3, #3
 80033a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80033a4:	2308      	movs	r3, #8
 80033a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033aa:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80033ae:	4619      	mov	r1, r3
 80033b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033b4:	f001 fbe6 	bl	8004b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80033b8:	e0ca      	b.n	8003550 <HAL_UART_MspInit+0x240>
  else if(huart->Instance==USART1)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a68      	ldr	r2, [pc, #416]	; (8003560 <HAL_UART_MspInit+0x250>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d143      	bne.n	800344c <HAL_UART_MspInit+0x13c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80033c4:	2301      	movs	r3, #1
 80033c6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80033c8:	2300      	movs	r3, #0
 80033ca:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033d0:	4618      	mov	r0, r3
 80033d2:	f004 fe93 	bl	80080fc <HAL_RCCEx_PeriphCLKConfig>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80033dc:	f7ff fd26 	bl	8002e2c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80033e0:	4b5e      	ldr	r3, [pc, #376]	; (800355c <HAL_UART_MspInit+0x24c>)
 80033e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033e4:	4a5d      	ldr	r2, [pc, #372]	; (800355c <HAL_UART_MspInit+0x24c>)
 80033e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033ea:	6613      	str	r3, [r2, #96]	; 0x60
 80033ec:	4b5b      	ldr	r3, [pc, #364]	; (800355c <HAL_UART_MspInit+0x24c>)
 80033ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033f4:	61fb      	str	r3, [r7, #28]
 80033f6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033f8:	4b58      	ldr	r3, [pc, #352]	; (800355c <HAL_UART_MspInit+0x24c>)
 80033fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033fc:	4a57      	ldr	r2, [pc, #348]	; (800355c <HAL_UART_MspInit+0x24c>)
 80033fe:	f043 0302 	orr.w	r3, r3, #2
 8003402:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003404:	4b55      	ldr	r3, [pc, #340]	; (800355c <HAL_UART_MspInit+0x24c>)
 8003406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	61bb      	str	r3, [r7, #24]
 800340e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8003410:	23c0      	movs	r3, #192	; 0xc0
 8003412:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003416:	2302      	movs	r3, #2
 8003418:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341c:	2300      	movs	r3, #0
 800341e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003422:	2303      	movs	r3, #3
 8003424:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003428:	2307      	movs	r3, #7
 800342a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800342e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003432:	4619      	mov	r1, r3
 8003434:	484b      	ldr	r0, [pc, #300]	; (8003564 <HAL_UART_MspInit+0x254>)
 8003436:	f001 fba5 	bl	8004b84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 800343a:	2200      	movs	r2, #0
 800343c:	2106      	movs	r1, #6
 800343e:	2025      	movs	r0, #37	; 0x25
 8003440:	f001 f9a0 	bl	8004784 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003444:	2025      	movs	r0, #37	; 0x25
 8003446:	f001 f9b9 	bl	80047bc <HAL_NVIC_EnableIRQ>
}
 800344a:	e081      	b.n	8003550 <HAL_UART_MspInit+0x240>
  else if(huart->Instance==USART2)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a45      	ldr	r2, [pc, #276]	; (8003568 <HAL_UART_MspInit+0x258>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d13b      	bne.n	80034ce <HAL_UART_MspInit+0x1be>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003456:	2302      	movs	r3, #2
 8003458:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800345a:	2300      	movs	r3, #0
 800345c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800345e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003462:	4618      	mov	r0, r3
 8003464:	f004 fe4a 	bl	80080fc <HAL_RCCEx_PeriphCLKConfig>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <HAL_UART_MspInit+0x162>
      Error_Handler();
 800346e:	f7ff fcdd 	bl	8002e2c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003472:	4b3a      	ldr	r3, [pc, #232]	; (800355c <HAL_UART_MspInit+0x24c>)
 8003474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003476:	4a39      	ldr	r2, [pc, #228]	; (800355c <HAL_UART_MspInit+0x24c>)
 8003478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800347c:	6593      	str	r3, [r2, #88]	; 0x58
 800347e:	4b37      	ldr	r3, [pc, #220]	; (800355c <HAL_UART_MspInit+0x24c>)
 8003480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003486:	617b      	str	r3, [r7, #20]
 8003488:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800348a:	4b34      	ldr	r3, [pc, #208]	; (800355c <HAL_UART_MspInit+0x24c>)
 800348c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800348e:	4a33      	ldr	r2, [pc, #204]	; (800355c <HAL_UART_MspInit+0x24c>)
 8003490:	f043 0308 	orr.w	r3, r3, #8
 8003494:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003496:	4b31      	ldr	r3, [pc, #196]	; (800355c <HAL_UART_MspInit+0x24c>)
 8003498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	613b      	str	r3, [r7, #16]
 80034a0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80034a2:	2378      	movs	r3, #120	; 0x78
 80034a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a8:	2302      	movs	r3, #2
 80034aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ae:	2300      	movs	r3, #0
 80034b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034b4:	2303      	movs	r3, #3
 80034b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80034ba:	2307      	movs	r3, #7
 80034bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034c0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80034c4:	4619      	mov	r1, r3
 80034c6:	4829      	ldr	r0, [pc, #164]	; (800356c <HAL_UART_MspInit+0x25c>)
 80034c8:	f001 fb5c 	bl	8004b84 <HAL_GPIO_Init>
}
 80034cc:	e040      	b.n	8003550 <HAL_UART_MspInit+0x240>
  else if(huart->Instance==USART3)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a27      	ldr	r2, [pc, #156]	; (8003570 <HAL_UART_MspInit+0x260>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d13b      	bne.n	8003550 <HAL_UART_MspInit+0x240>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80034d8:	2304      	movs	r3, #4
 80034da:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80034dc:	2300      	movs	r3, #0
 80034de:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034e4:	4618      	mov	r0, r3
 80034e6:	f004 fe09 	bl	80080fc <HAL_RCCEx_PeriphCLKConfig>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <HAL_UART_MspInit+0x1e4>
      Error_Handler();
 80034f0:	f7ff fc9c 	bl	8002e2c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80034f4:	4b19      	ldr	r3, [pc, #100]	; (800355c <HAL_UART_MspInit+0x24c>)
 80034f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f8:	4a18      	ldr	r2, [pc, #96]	; (800355c <HAL_UART_MspInit+0x24c>)
 80034fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034fe:	6593      	str	r3, [r2, #88]	; 0x58
 8003500:	4b16      	ldr	r3, [pc, #88]	; (800355c <HAL_UART_MspInit+0x24c>)
 8003502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003504:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800350c:	4b13      	ldr	r3, [pc, #76]	; (800355c <HAL_UART_MspInit+0x24c>)
 800350e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003510:	4a12      	ldr	r2, [pc, #72]	; (800355c <HAL_UART_MspInit+0x24c>)
 8003512:	f043 0308 	orr.w	r3, r3, #8
 8003516:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003518:	4b10      	ldr	r3, [pc, #64]	; (800355c <HAL_UART_MspInit+0x24c>)
 800351a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800351c:	f003 0308 	and.w	r3, r3, #8
 8003520:	60bb      	str	r3, [r7, #8]
 8003522:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8003524:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003528:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352c:	2302      	movs	r3, #2
 800352e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003532:	2300      	movs	r3, #0
 8003534:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003538:	2303      	movs	r3, #3
 800353a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800353e:	2307      	movs	r3, #7
 8003540:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003544:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003548:	4619      	mov	r1, r3
 800354a:	4808      	ldr	r0, [pc, #32]	; (800356c <HAL_UART_MspInit+0x25c>)
 800354c:	f001 fb1a 	bl	8004b84 <HAL_GPIO_Init>
}
 8003550:	bf00      	nop
 8003552:	37d0      	adds	r7, #208	; 0xd0
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40004c00 	.word	0x40004c00
 800355c:	40021000 	.word	0x40021000
 8003560:	40013800 	.word	0x40013800
 8003564:	48000400 	.word	0x48000400
 8003568:	40004400 	.word	0x40004400
 800356c:	48000c00 	.word	0x48000c00
 8003570:	40004800 	.word	0x40004800

08003574 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b08e      	sub	sp, #56	; 0x38
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800357c:	2300      	movs	r3, #0
 800357e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003582:	4b34      	ldr	r3, [pc, #208]	; (8003654 <HAL_InitTick+0xe0>)
 8003584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003586:	4a33      	ldr	r2, [pc, #204]	; (8003654 <HAL_InitTick+0xe0>)
 8003588:	f043 0310 	orr.w	r3, r3, #16
 800358c:	6593      	str	r3, [r2, #88]	; 0x58
 800358e:	4b31      	ldr	r3, [pc, #196]	; (8003654 <HAL_InitTick+0xe0>)
 8003590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003592:	f003 0310 	and.w	r3, r3, #16
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800359a:	f107 0210 	add.w	r2, r7, #16
 800359e:	f107 0314 	add.w	r3, r7, #20
 80035a2:	4611      	mov	r1, r2
 80035a4:	4618      	mov	r0, r3
 80035a6:	f004 fcb7 	bl	8007f18 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80035ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d103      	bne.n	80035bc <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80035b4:	f004 fc84 	bl	8007ec0 <HAL_RCC_GetPCLK1Freq>
 80035b8:	6378      	str	r0, [r7, #52]	; 0x34
 80035ba:	e004      	b.n	80035c6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80035bc:	f004 fc80 	bl	8007ec0 <HAL_RCC_GetPCLK1Freq>
 80035c0:	4603      	mov	r3, r0
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80035c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c8:	4a23      	ldr	r2, [pc, #140]	; (8003658 <HAL_InitTick+0xe4>)
 80035ca:	fba2 2303 	umull	r2, r3, r2, r3
 80035ce:	0c9b      	lsrs	r3, r3, #18
 80035d0:	3b01      	subs	r3, #1
 80035d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80035d4:	4b21      	ldr	r3, [pc, #132]	; (800365c <HAL_InitTick+0xe8>)
 80035d6:	4a22      	ldr	r2, [pc, #136]	; (8003660 <HAL_InitTick+0xec>)
 80035d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80035da:	4b20      	ldr	r3, [pc, #128]	; (800365c <HAL_InitTick+0xe8>)
 80035dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80035e0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80035e2:	4a1e      	ldr	r2, [pc, #120]	; (800365c <HAL_InitTick+0xe8>)
 80035e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80035e8:	4b1c      	ldr	r3, [pc, #112]	; (800365c <HAL_InitTick+0xe8>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035ee:	4b1b      	ldr	r3, [pc, #108]	; (800365c <HAL_InitTick+0xe8>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035f4:	4b19      	ldr	r3, [pc, #100]	; (800365c <HAL_InitTick+0xe8>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80035fa:	4818      	ldr	r0, [pc, #96]	; (800365c <HAL_InitTick+0xe8>)
 80035fc:	f005 fb49 	bl	8008c92 <HAL_TIM_Base_Init>
 8003600:	4603      	mov	r3, r0
 8003602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003606:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800360a:	2b00      	cmp	r3, #0
 800360c:	d11b      	bne.n	8003646 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800360e:	4813      	ldr	r0, [pc, #76]	; (800365c <HAL_InitTick+0xe8>)
 8003610:	f005 fba0 	bl	8008d54 <HAL_TIM_Base_Start_IT>
 8003614:	4603      	mov	r3, r0
 8003616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800361a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800361e:	2b00      	cmp	r3, #0
 8003620:	d111      	bne.n	8003646 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003622:	2036      	movs	r0, #54	; 0x36
 8003624:	f001 f8ca 	bl	80047bc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b0f      	cmp	r3, #15
 800362c:	d808      	bhi.n	8003640 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800362e:	2200      	movs	r2, #0
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	2036      	movs	r0, #54	; 0x36
 8003634:	f001 f8a6 	bl	8004784 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003638:	4a0a      	ldr	r2, [pc, #40]	; (8003664 <HAL_InitTick+0xf0>)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6013      	str	r3, [r2, #0]
 800363e:	e002      	b.n	8003646 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003646:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800364a:	4618      	mov	r0, r3
 800364c:	3738      	adds	r7, #56	; 0x38
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	40021000 	.word	0x40021000
 8003658:	431bde83 	.word	0x431bde83
 800365c:	2000125c 	.word	0x2000125c
 8003660:	40001000 	.word	0x40001000
 8003664:	20000040 	.word	0x20000040

08003668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800366c:	e7fe      	b.n	800366c <NMI_Handler+0x4>

0800366e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800366e:	b480      	push	{r7}
 8003670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003672:	e7fe      	b.n	8003672 <HardFault_Handler+0x4>

08003674 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003678:	e7fe      	b.n	8003678 <MemManage_Handler+0x4>

0800367a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800367a:	b480      	push	{r7}
 800367c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800367e:	e7fe      	b.n	800367e <BusFault_Handler+0x4>

08003680 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003684:	e7fe      	b.n	8003684 <UsageFault_Handler+0x4>

08003686 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003686:	b480      	push	{r7}
 8003688:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800368a:	bf00      	nop
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8003698:	2020      	movs	r0, #32
 800369a:	f001 fc1d 	bl	8004ed8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800369e:	2040      	movs	r0, #64	; 0x40
 80036a0:	f001 fc1a 	bl	8004ed8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80036a4:	2080      	movs	r0, #128	; 0x80
 80036a6:	f001 fc17 	bl	8004ed8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80036aa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80036ae:	f001 fc13 	bl	8004ed8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80036b2:	bf00      	nop
 80036b4:	bd80      	pop	{r7, pc}
	...

080036b8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80036bc:	4802      	ldr	r0, [pc, #8]	; (80036c8 <I2C1_EV_IRQHandler+0x10>)
 80036be:	f001 fd91 	bl	80051e4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80036c2:	bf00      	nop
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	20000e48 	.word	0x20000e48

080036cc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80036d0:	4802      	ldr	r0, [pc, #8]	; (80036dc <I2C1_ER_IRQHandler+0x10>)
 80036d2:	f001 fda1 	bl	8005218 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80036d6:	bf00      	nop
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	20000e48 	.word	0x20000e48

080036e0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80036e4:	4802      	ldr	r0, [pc, #8]	; (80036f0 <I2C2_EV_IRQHandler+0x10>)
 80036e6:	f001 fd7d 	bl	80051e4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80036ea:	bf00      	nop
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	20000e9c 	.word	0x20000e9c

080036f4 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80036f8:	4802      	ldr	r0, [pc, #8]	; (8003704 <I2C2_ER_IRQHandler+0x10>)
 80036fa:	f001 fd8d 	bl	8005218 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80036fe:	bf00      	nop
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	20000e9c 	.word	0x20000e9c

08003708 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800370c:	4802      	ldr	r0, [pc, #8]	; (8003718 <USART1_IRQHandler+0x10>)
 800370e:	f005 fe53 	bl	80093b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003712:	bf00      	nop
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	2000109c 	.word	0x2000109c

0800371c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 8003720:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003724:	f001 fbd8 	bl	8004ed8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8003728:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800372c:	f001 fbd4 	bl	8004ed8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 8003730:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003734:	f001 fbd0 	bl	8004ed8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8003738:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800373c:	f001 fbcc 	bl	8004ed8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8003740:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003744:	f001 fbc8 	bl	8004ed8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8003748:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800374c:	f001 fbc4 	bl	8004ed8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003750:	bf00      	nop
 8003752:	bd80      	pop	{r7, pc}

08003754 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003758:	4802      	ldr	r0, [pc, #8]	; (8003764 <TIM6_DAC_IRQHandler+0x10>)
 800375a:	f005 fb6b 	bl	8008e34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800375e:	bf00      	nop
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	2000125c 	.word	0x2000125c

08003768 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800376c:	4b06      	ldr	r3, [pc, #24]	; (8003788 <SystemInit+0x20>)
 800376e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003772:	4a05      	ldr	r2, [pc, #20]	; (8003788 <SystemInit+0x20>)
 8003774:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003778:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800377c:	bf00      	nop
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	e000ed00 	.word	0xe000ed00

0800378c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800378c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003790:	f7ff ffea 	bl	8003768 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003794:	480c      	ldr	r0, [pc, #48]	; (80037c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003796:	490d      	ldr	r1, [pc, #52]	; (80037cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003798:	4a0d      	ldr	r2, [pc, #52]	; (80037d0 <LoopForever+0xe>)
  movs r3, #0
 800379a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800379c:	e002      	b.n	80037a4 <LoopCopyDataInit>

0800379e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800379e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037a2:	3304      	adds	r3, #4

080037a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037a8:	d3f9      	bcc.n	800379e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037aa:	4a0a      	ldr	r2, [pc, #40]	; (80037d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80037ac:	4c0a      	ldr	r4, [pc, #40]	; (80037d8 <LoopForever+0x16>)
  movs r3, #0
 80037ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037b0:	e001      	b.n	80037b6 <LoopFillZerobss>

080037b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037b4:	3204      	adds	r2, #4

080037b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037b8:	d3fb      	bcc.n	80037b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80037ba:	f006 ffc1 	bl	800a740 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80037be:	f7fe fbe1 	bl	8001f84 <main>

080037c2 <LoopForever>:

LoopForever:
    b LoopForever
 80037c2:	e7fe      	b.n	80037c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80037c4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80037c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037cc:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 80037d0:	0800a884 	.word	0x0800a884
  ldr r2, =_sbss
 80037d4:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 80037d8:	200012d0 	.word	0x200012d0

080037dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80037dc:	e7fe      	b.n	80037dc <ADC1_IRQHandler>

080037de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b082      	sub	sp, #8
 80037e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80037e4:	2300      	movs	r3, #0
 80037e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037e8:	2003      	movs	r0, #3
 80037ea:	f000 ffc0 	bl	800476e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037ee:	200f      	movs	r0, #15
 80037f0:	f7ff fec0 	bl	8003574 <HAL_InitTick>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d002      	beq.n	8003800 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	71fb      	strb	r3, [r7, #7]
 80037fe:	e001      	b.n	8003804 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003800:	f7ff fb1a 	bl	8002e38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003804:	79fb      	ldrb	r3, [r7, #7]
}
 8003806:	4618      	mov	r0, r3
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
	...

08003810 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003814:	4b06      	ldr	r3, [pc, #24]	; (8003830 <HAL_IncTick+0x20>)
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	461a      	mov	r2, r3
 800381a:	4b06      	ldr	r3, [pc, #24]	; (8003834 <HAL_IncTick+0x24>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4413      	add	r3, r2
 8003820:	4a04      	ldr	r2, [pc, #16]	; (8003834 <HAL_IncTick+0x24>)
 8003822:	6013      	str	r3, [r2, #0]
}
 8003824:	bf00      	nop
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	20000044 	.word	0x20000044
 8003834:	200012a8 	.word	0x200012a8

08003838 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  return uwTick;
 800383c:	4b03      	ldr	r3, [pc, #12]	; (800384c <HAL_GetTick+0x14>)
 800383e:	681b      	ldr	r3, [r3, #0]
}
 8003840:	4618      	mov	r0, r3
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	200012a8 	.word	0x200012a8

08003850 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	431a      	orrs	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	609a      	str	r2, [r3, #8]
}
 800386a:	bf00      	nop
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
 800387e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	431a      	orrs	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	609a      	str	r2, [r3, #8]
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b087      	sub	sp, #28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
 80038c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	3360      	adds	r3, #96	; 0x60
 80038ca:	461a      	mov	r2, r3
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	4b08      	ldr	r3, [pc, #32]	; (80038fc <LL_ADC_SetOffset+0x44>)
 80038da:	4013      	ands	r3, r2
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80038e2:	683a      	ldr	r2, [r7, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	4313      	orrs	r3, r2
 80038e8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80038f0:	bf00      	nop
 80038f2:	371c      	adds	r7, #28
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	03fff000 	.word	0x03fff000

08003900 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	3360      	adds	r3, #96	; 0x60
 800390e:	461a      	mov	r2, r3
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4413      	add	r3, r2
 8003916:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003920:	4618      	mov	r0, r3
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800392c:	b480      	push	{r7}
 800392e:	b087      	sub	sp, #28
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	3360      	adds	r3, #96	; 0x60
 800393c:	461a      	mov	r2, r3
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	4413      	add	r3, r2
 8003944:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	431a      	orrs	r2, r3
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003956:	bf00      	nop
 8003958:	371c      	adds	r7, #28
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003962:	b480      	push	{r7}
 8003964:	b083      	sub	sp, #12
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
 800396a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	431a      	orrs	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	615a      	str	r2, [r3, #20]
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003988:	b480      	push	{r7}
 800398a:	b087      	sub	sp, #28
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	3330      	adds	r3, #48	; 0x30
 8003998:	461a      	mov	r2, r3
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	0a1b      	lsrs	r3, r3, #8
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	f003 030c 	and.w	r3, r3, #12
 80039a4:	4413      	add	r3, r2
 80039a6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	f003 031f 	and.w	r3, r3, #31
 80039b2:	211f      	movs	r1, #31
 80039b4:	fa01 f303 	lsl.w	r3, r1, r3
 80039b8:	43db      	mvns	r3, r3
 80039ba:	401a      	ands	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	0e9b      	lsrs	r3, r3, #26
 80039c0:	f003 011f 	and.w	r1, r3, #31
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	f003 031f 	and.w	r3, r3, #31
 80039ca:	fa01 f303 	lsl.w	r3, r1, r3
 80039ce:	431a      	orrs	r2, r3
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80039d4:	bf00      	nop
 80039d6:	371c      	adds	r7, #28
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b087      	sub	sp, #28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	3314      	adds	r3, #20
 80039f0:	461a      	mov	r2, r3
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	0e5b      	lsrs	r3, r3, #25
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	4413      	add	r3, r2
 80039fe:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	0d1b      	lsrs	r3, r3, #20
 8003a08:	f003 031f 	and.w	r3, r3, #31
 8003a0c:	2107      	movs	r1, #7
 8003a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a12:	43db      	mvns	r3, r3
 8003a14:	401a      	ands	r2, r3
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	0d1b      	lsrs	r3, r3, #20
 8003a1a:	f003 031f 	and.w	r3, r3, #31
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	fa01 f303 	lsl.w	r3, r1, r3
 8003a24:	431a      	orrs	r2, r3
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003a2a:	bf00      	nop
 8003a2c:	371c      	adds	r7, #28
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
	...

08003a38 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a50:	43db      	mvns	r3, r3
 8003a52:	401a      	ands	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f003 0318 	and.w	r3, r3, #24
 8003a5a:	4908      	ldr	r1, [pc, #32]	; (8003a7c <LL_ADC_SetChannelSingleDiff+0x44>)
 8003a5c:	40d9      	lsrs	r1, r3
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	400b      	ands	r3, r1
 8003a62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a66:	431a      	orrs	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003a6e:	bf00      	nop
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	0007ffff 	.word	0x0007ffff

08003a80 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003a90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6093      	str	r3, [r2, #8]
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ab4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ab8:	d101      	bne.n	8003abe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003aba:	2301      	movs	r3, #1
 8003abc:	e000      	b.n	8003ac0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003adc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ae0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b08:	d101      	bne.n	8003b0e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e000      	b.n	8003b10 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d101      	bne.n	8003b34 <LL_ADC_IsEnabled+0x18>
 8003b30:	2301      	movs	r3, #1
 8003b32:	e000      	b.n	8003b36 <LL_ADC_IsEnabled+0x1a>
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b083      	sub	sp, #12
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 0304 	and.w	r3, r3, #4
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	d101      	bne.n	8003b5a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b56:	2301      	movs	r3, #1
 8003b58:	e000      	b.n	8003b5c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f003 0308 	and.w	r3, r3, #8
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	d101      	bne.n	8003b80 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e000      	b.n	8003b82 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
	...

08003b90 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b088      	sub	sp, #32
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e129      	b.n	8003dfe <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d109      	bne.n	8003bcc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f7ff f961 	bl	8002e80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7ff ff67 	bl	8003aa4 <LL_ADC_IsDeepPowerDownEnabled>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d004      	beq.n	8003be6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff ff4d 	bl	8003a80 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7ff ff82 	bl	8003af4 <LL_ADC_IsInternalRegulatorEnabled>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d115      	bne.n	8003c22 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7ff ff66 	bl	8003acc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c00:	4b81      	ldr	r3, [pc, #516]	; (8003e08 <HAL_ADC_Init+0x278>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	099b      	lsrs	r3, r3, #6
 8003c06:	4a81      	ldr	r2, [pc, #516]	; (8003e0c <HAL_ADC_Init+0x27c>)
 8003c08:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0c:	099b      	lsrs	r3, r3, #6
 8003c0e:	3301      	adds	r3, #1
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003c14:	e002      	b.n	8003c1c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1f9      	bne.n	8003c16 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7ff ff64 	bl	8003af4 <LL_ADC_IsInternalRegulatorEnabled>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10d      	bne.n	8003c4e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c36:	f043 0210 	orr.w	r2, r3, #16
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c42:	f043 0201 	orr.w	r2, r3, #1
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7ff ff75 	bl	8003b42 <LL_ADC_REG_IsConversionOngoing>
 8003c58:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c5e:	f003 0310 	and.w	r3, r3, #16
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f040 80c2 	bne.w	8003dec <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f040 80be 	bne.w	8003dec <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c74:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003c78:	f043 0202 	orr.w	r2, r3, #2
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7ff ff49 	bl	8003b1c <LL_ADC_IsEnabled>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10b      	bne.n	8003ca8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c90:	485f      	ldr	r0, [pc, #380]	; (8003e10 <HAL_ADC_Init+0x280>)
 8003c92:	f7ff ff43 	bl	8003b1c <LL_ADC_IsEnabled>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d105      	bne.n	8003ca8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	485c      	ldr	r0, [pc, #368]	; (8003e14 <HAL_ADC_Init+0x284>)
 8003ca4:	f7ff fdd4 	bl	8003850 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	7e5b      	ldrb	r3, [r3, #25]
 8003cac:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003cb2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003cb8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003cbe:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cc6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d106      	bne.n	8003ce4 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	045b      	lsls	r3, r3, #17
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d009      	beq.n	8003d00 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	4b44      	ldr	r3, [pc, #272]	; (8003e18 <HAL_ADC_Init+0x288>)
 8003d08:	4013      	ands	r3, r2
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	6812      	ldr	r2, [r2, #0]
 8003d0e:	69b9      	ldr	r1, [r7, #24]
 8003d10:	430b      	orrs	r3, r1
 8003d12:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7ff ff25 	bl	8003b68 <LL_ADC_INJ_IsConversionOngoing>
 8003d1e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d140      	bne.n	8003da8 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d13d      	bne.n	8003da8 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	7e1b      	ldrb	r3, [r3, #24]
 8003d34:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003d36:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d3e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003d40:	4313      	orrs	r3, r2
 8003d42:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d4e:	f023 0306 	bic.w	r3, r3, #6
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6812      	ldr	r2, [r2, #0]
 8003d56:	69b9      	ldr	r1, [r7, #24]
 8003d58:	430b      	orrs	r3, r1
 8003d5a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d118      	bne.n	8003d98 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003d70:	f023 0304 	bic.w	r3, r3, #4
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003d7c:	4311      	orrs	r1, r2
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003d82:	4311      	orrs	r1, r2
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f042 0201 	orr.w	r2, r2, #1
 8003d94:	611a      	str	r2, [r3, #16]
 8003d96:	e007      	b.n	8003da8 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	691a      	ldr	r2, [r3, #16]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0201 	bic.w	r2, r2, #1
 8003da6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d10c      	bne.n	8003dca <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db6:	f023 010f 	bic.w	r1, r3, #15
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	69db      	ldr	r3, [r3, #28]
 8003dbe:	1e5a      	subs	r2, r3, #1
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	631a      	str	r2, [r3, #48]	; 0x30
 8003dc8:	e007      	b.n	8003dda <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 020f 	bic.w	r2, r2, #15
 8003dd8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dde:	f023 0303 	bic.w	r3, r3, #3
 8003de2:	f043 0201 	orr.w	r2, r3, #1
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	659a      	str	r2, [r3, #88]	; 0x58
 8003dea:	e007      	b.n	8003dfc <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df0:	f043 0210 	orr.w	r2, r3, #16
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003dfc:	7ffb      	ldrb	r3, [r7, #31]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3720      	adds	r7, #32
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	2000003c 	.word	0x2000003c
 8003e0c:	053e2d63 	.word	0x053e2d63
 8003e10:	50040000 	.word	0x50040000
 8003e14:	50040300 	.word	0x50040300
 8003e18:	fff0c007 	.word	0xfff0c007

08003e1c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b0b6      	sub	sp, #216	; 0xd8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e26:	2300      	movs	r3, #0
 8003e28:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d101      	bne.n	8003e3e <HAL_ADC_ConfigChannel+0x22>
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	e3d5      	b.n	80045ea <HAL_ADC_ConfigChannel+0x7ce>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7ff fe79 	bl	8003b42 <LL_ADC_REG_IsConversionOngoing>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f040 83ba 	bne.w	80045cc <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	2b05      	cmp	r3, #5
 8003e66:	d824      	bhi.n	8003eb2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	3b02      	subs	r3, #2
 8003e6e:	2b03      	cmp	r3, #3
 8003e70:	d81b      	bhi.n	8003eaa <HAL_ADC_ConfigChannel+0x8e>
 8003e72:	a201      	add	r2, pc, #4	; (adr r2, 8003e78 <HAL_ADC_ConfigChannel+0x5c>)
 8003e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e78:	08003e89 	.word	0x08003e89
 8003e7c:	08003e91 	.word	0x08003e91
 8003e80:	08003e99 	.word	0x08003e99
 8003e84:	08003ea1 	.word	0x08003ea1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003e88:	230c      	movs	r3, #12
 8003e8a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003e8e:	e010      	b.n	8003eb2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003e90:	2312      	movs	r3, #18
 8003e92:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003e96:	e00c      	b.n	8003eb2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003e98:	2318      	movs	r3, #24
 8003e9a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003e9e:	e008      	b.n	8003eb2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003ea0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003ea8:	e003      	b.n	8003eb2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003eaa:	2306      	movs	r3, #6
 8003eac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003eb0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6818      	ldr	r0, [r3, #0]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8003ec0:	f7ff fd62 	bl	8003988 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7ff fe3a 	bl	8003b42 <LL_ADC_REG_IsConversionOngoing>
 8003ece:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7ff fe46 	bl	8003b68 <LL_ADC_INJ_IsConversionOngoing>
 8003edc:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ee0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f040 81bf 	bne.w	8004268 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003eea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f040 81ba 	bne.w	8004268 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003efc:	d10f      	bne.n	8003f1e <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6818      	ldr	r0, [r3, #0]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2200      	movs	r2, #0
 8003f08:	4619      	mov	r1, r3
 8003f0a:	f7ff fd69 	bl	80039e0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7ff fd23 	bl	8003962 <LL_ADC_SetSamplingTimeCommonConfig>
 8003f1c:	e00e      	b.n	8003f3c <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6818      	ldr	r0, [r3, #0]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	6819      	ldr	r1, [r3, #0]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	f7ff fd58 	bl	80039e0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2100      	movs	r1, #0
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7ff fd13 	bl	8003962 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	695a      	ldr	r2, [r3, #20]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	08db      	lsrs	r3, r3, #3
 8003f48:	f003 0303 	and.w	r3, r3, #3
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f52:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	2b04      	cmp	r3, #4
 8003f5c:	d00a      	beq.n	8003f74 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6818      	ldr	r0, [r3, #0]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	6919      	ldr	r1, [r3, #16]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f6e:	f7ff fca3 	bl	80038b8 <LL_ADC_SetOffset>
 8003f72:	e179      	b.n	8004268 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2100      	movs	r1, #0
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7ff fcc0 	bl	8003900 <LL_ADC_GetOffsetChannel>
 8003f80:	4603      	mov	r3, r0
 8003f82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10a      	bne.n	8003fa0 <HAL_ADC_ConfigChannel+0x184>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2100      	movs	r1, #0
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff fcb5 	bl	8003900 <LL_ADC_GetOffsetChannel>
 8003f96:	4603      	mov	r3, r0
 8003f98:	0e9b      	lsrs	r3, r3, #26
 8003f9a:	f003 021f 	and.w	r2, r3, #31
 8003f9e:	e01e      	b.n	8003fde <HAL_ADC_ConfigChannel+0x1c2>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7ff fcaa 	bl	8003900 <LL_ADC_GetOffsetChannel>
 8003fac:	4603      	mov	r3, r0
 8003fae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003fb6:	fa93 f3a3 	rbit	r3, r3
 8003fba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003fbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003fc2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003fc6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8003fce:	2320      	movs	r3, #32
 8003fd0:	e004      	b.n	8003fdc <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8003fd2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003fd6:	fab3 f383 	clz	r3, r3
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d105      	bne.n	8003ff6 <HAL_ADC_ConfigChannel+0x1da>
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	0e9b      	lsrs	r3, r3, #26
 8003ff0:	f003 031f 	and.w	r3, r3, #31
 8003ff4:	e018      	b.n	8004028 <HAL_ADC_ConfigChannel+0x20c>
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004002:	fa93 f3a3 	rbit	r3, r3
 8004006:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 800400a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800400e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004012:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800401a:	2320      	movs	r3, #32
 800401c:	e004      	b.n	8004028 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800401e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004022:	fab3 f383 	clz	r3, r3
 8004026:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004028:	429a      	cmp	r2, r3
 800402a:	d106      	bne.n	800403a <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2200      	movs	r2, #0
 8004032:	2100      	movs	r1, #0
 8004034:	4618      	mov	r0, r3
 8004036:	f7ff fc79 	bl	800392c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2101      	movs	r1, #1
 8004040:	4618      	mov	r0, r3
 8004042:	f7ff fc5d 	bl	8003900 <LL_ADC_GetOffsetChannel>
 8004046:	4603      	mov	r3, r0
 8004048:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800404c:	2b00      	cmp	r3, #0
 800404e:	d10a      	bne.n	8004066 <HAL_ADC_ConfigChannel+0x24a>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2101      	movs	r1, #1
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff fc52 	bl	8003900 <LL_ADC_GetOffsetChannel>
 800405c:	4603      	mov	r3, r0
 800405e:	0e9b      	lsrs	r3, r3, #26
 8004060:	f003 021f 	and.w	r2, r3, #31
 8004064:	e01e      	b.n	80040a4 <HAL_ADC_ConfigChannel+0x288>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2101      	movs	r1, #1
 800406c:	4618      	mov	r0, r3
 800406e:	f7ff fc47 	bl	8003900 <LL_ADC_GetOffsetChannel>
 8004072:	4603      	mov	r3, r0
 8004074:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004078:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800407c:	fa93 f3a3 	rbit	r3, r3
 8004080:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004084:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004088:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800408c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004090:	2b00      	cmp	r3, #0
 8004092:	d101      	bne.n	8004098 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8004094:	2320      	movs	r3, #32
 8004096:	e004      	b.n	80040a2 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8004098:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800409c:	fab3 f383 	clz	r3, r3
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d105      	bne.n	80040bc <HAL_ADC_ConfigChannel+0x2a0>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	0e9b      	lsrs	r3, r3, #26
 80040b6:	f003 031f 	and.w	r3, r3, #31
 80040ba:	e018      	b.n	80040ee <HAL_ADC_ConfigChannel+0x2d2>
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80040c8:	fa93 f3a3 	rbit	r3, r3
 80040cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80040d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80040d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80040d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80040e0:	2320      	movs	r3, #32
 80040e2:	e004      	b.n	80040ee <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80040e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040e8:	fab3 f383 	clz	r3, r3
 80040ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d106      	bne.n	8004100 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2200      	movs	r2, #0
 80040f8:	2101      	movs	r1, #1
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7ff fc16 	bl	800392c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2102      	movs	r1, #2
 8004106:	4618      	mov	r0, r3
 8004108:	f7ff fbfa 	bl	8003900 <LL_ADC_GetOffsetChannel>
 800410c:	4603      	mov	r3, r0
 800410e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10a      	bne.n	800412c <HAL_ADC_ConfigChannel+0x310>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2102      	movs	r1, #2
 800411c:	4618      	mov	r0, r3
 800411e:	f7ff fbef 	bl	8003900 <LL_ADC_GetOffsetChannel>
 8004122:	4603      	mov	r3, r0
 8004124:	0e9b      	lsrs	r3, r3, #26
 8004126:	f003 021f 	and.w	r2, r3, #31
 800412a:	e01e      	b.n	800416a <HAL_ADC_ConfigChannel+0x34e>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2102      	movs	r1, #2
 8004132:	4618      	mov	r0, r3
 8004134:	f7ff fbe4 	bl	8003900 <LL_ADC_GetOffsetChannel>
 8004138:	4603      	mov	r3, r0
 800413a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800413e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004142:	fa93 f3a3 	rbit	r3, r3
 8004146:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800414a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800414e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004152:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800415a:	2320      	movs	r3, #32
 800415c:	e004      	b.n	8004168 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800415e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004162:	fab3 f383 	clz	r3, r3
 8004166:	b2db      	uxtb	r3, r3
 8004168:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004172:	2b00      	cmp	r3, #0
 8004174:	d105      	bne.n	8004182 <HAL_ADC_ConfigChannel+0x366>
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	0e9b      	lsrs	r3, r3, #26
 800417c:	f003 031f 	and.w	r3, r3, #31
 8004180:	e014      	b.n	80041ac <HAL_ADC_ConfigChannel+0x390>
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004188:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800418a:	fa93 f3a3 	rbit	r3, r3
 800418e:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004190:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004192:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004196:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800419e:	2320      	movs	r3, #32
 80041a0:	e004      	b.n	80041ac <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80041a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80041a6:	fab3 f383 	clz	r3, r3
 80041aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d106      	bne.n	80041be <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2200      	movs	r2, #0
 80041b6:	2102      	movs	r1, #2
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7ff fbb7 	bl	800392c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2103      	movs	r1, #3
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7ff fb9b 	bl	8003900 <LL_ADC_GetOffsetChannel>
 80041ca:	4603      	mov	r3, r0
 80041cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10a      	bne.n	80041ea <HAL_ADC_ConfigChannel+0x3ce>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2103      	movs	r1, #3
 80041da:	4618      	mov	r0, r3
 80041dc:	f7ff fb90 	bl	8003900 <LL_ADC_GetOffsetChannel>
 80041e0:	4603      	mov	r3, r0
 80041e2:	0e9b      	lsrs	r3, r3, #26
 80041e4:	f003 021f 	and.w	r2, r3, #31
 80041e8:	e017      	b.n	800421a <HAL_ADC_ConfigChannel+0x3fe>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2103      	movs	r1, #3
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7ff fb85 	bl	8003900 <LL_ADC_GetOffsetChannel>
 80041f6:	4603      	mov	r3, r0
 80041f8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041fc:	fa93 f3a3 	rbit	r3, r3
 8004200:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004204:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004206:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004208:	2b00      	cmp	r3, #0
 800420a:	d101      	bne.n	8004210 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 800420c:	2320      	movs	r3, #32
 800420e:	e003      	b.n	8004218 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8004210:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004212:	fab3 f383 	clz	r3, r3
 8004216:	b2db      	uxtb	r3, r3
 8004218:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004222:	2b00      	cmp	r3, #0
 8004224:	d105      	bne.n	8004232 <HAL_ADC_ConfigChannel+0x416>
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	0e9b      	lsrs	r3, r3, #26
 800422c:	f003 031f 	and.w	r3, r3, #31
 8004230:	e011      	b.n	8004256 <HAL_ADC_ConfigChannel+0x43a>
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004238:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800423a:	fa93 f3a3 	rbit	r3, r3
 800423e:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004240:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004242:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004244:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800424a:	2320      	movs	r3, #32
 800424c:	e003      	b.n	8004256 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800424e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004250:	fab3 f383 	clz	r3, r3
 8004254:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004256:	429a      	cmp	r2, r3
 8004258:	d106      	bne.n	8004268 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2200      	movs	r2, #0
 8004260:	2103      	movs	r1, #3
 8004262:	4618      	mov	r0, r3
 8004264:	f7ff fb62 	bl	800392c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4618      	mov	r0, r3
 800426e:	f7ff fc55 	bl	8003b1c <LL_ADC_IsEnabled>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	f040 813f 	bne.w	80044f8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6818      	ldr	r0, [r3, #0]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	6819      	ldr	r1, [r3, #0]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	461a      	mov	r2, r3
 8004288:	f7ff fbd6 	bl	8003a38 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	4a8e      	ldr	r2, [pc, #568]	; (80044cc <HAL_ADC_ConfigChannel+0x6b0>)
 8004292:	4293      	cmp	r3, r2
 8004294:	f040 8130 	bne.w	80044f8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10b      	bne.n	80042c0 <HAL_ADC_ConfigChannel+0x4a4>
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	0e9b      	lsrs	r3, r3, #26
 80042ae:	3301      	adds	r3, #1
 80042b0:	f003 031f 	and.w	r3, r3, #31
 80042b4:	2b09      	cmp	r3, #9
 80042b6:	bf94      	ite	ls
 80042b8:	2301      	movls	r3, #1
 80042ba:	2300      	movhi	r3, #0
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	e019      	b.n	80042f4 <HAL_ADC_ConfigChannel+0x4d8>
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042c8:	fa93 f3a3 	rbit	r3, r3
 80042cc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80042ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80042d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d101      	bne.n	80042dc <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80042d8:	2320      	movs	r3, #32
 80042da:	e003      	b.n	80042e4 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80042dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042de:	fab3 f383 	clz	r3, r3
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	3301      	adds	r3, #1
 80042e6:	f003 031f 	and.w	r3, r3, #31
 80042ea:	2b09      	cmp	r3, #9
 80042ec:	bf94      	ite	ls
 80042ee:	2301      	movls	r3, #1
 80042f0:	2300      	movhi	r3, #0
 80042f2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d079      	beq.n	80043ec <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004300:	2b00      	cmp	r3, #0
 8004302:	d107      	bne.n	8004314 <HAL_ADC_ConfigChannel+0x4f8>
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	0e9b      	lsrs	r3, r3, #26
 800430a:	3301      	adds	r3, #1
 800430c:	069b      	lsls	r3, r3, #26
 800430e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004312:	e015      	b.n	8004340 <HAL_ADC_ConfigChannel+0x524>
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800431a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800431c:	fa93 f3a3 	rbit	r3, r3
 8004320:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004324:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004328:	2b00      	cmp	r3, #0
 800432a:	d101      	bne.n	8004330 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 800432c:	2320      	movs	r3, #32
 800432e:	e003      	b.n	8004338 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8004330:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004332:	fab3 f383 	clz	r3, r3
 8004336:	b2db      	uxtb	r3, r3
 8004338:	3301      	adds	r3, #1
 800433a:	069b      	lsls	r3, r3, #26
 800433c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004348:	2b00      	cmp	r3, #0
 800434a:	d109      	bne.n	8004360 <HAL_ADC_ConfigChannel+0x544>
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	0e9b      	lsrs	r3, r3, #26
 8004352:	3301      	adds	r3, #1
 8004354:	f003 031f 	and.w	r3, r3, #31
 8004358:	2101      	movs	r1, #1
 800435a:	fa01 f303 	lsl.w	r3, r1, r3
 800435e:	e017      	b.n	8004390 <HAL_ADC_ConfigChannel+0x574>
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004368:	fa93 f3a3 	rbit	r3, r3
 800436c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800436e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004370:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004372:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8004378:	2320      	movs	r3, #32
 800437a:	e003      	b.n	8004384 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 800437c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800437e:	fab3 f383 	clz	r3, r3
 8004382:	b2db      	uxtb	r3, r3
 8004384:	3301      	adds	r3, #1
 8004386:	f003 031f 	and.w	r3, r3, #31
 800438a:	2101      	movs	r1, #1
 800438c:	fa01 f303 	lsl.w	r3, r1, r3
 8004390:	ea42 0103 	orr.w	r1, r2, r3
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10a      	bne.n	80043b6 <HAL_ADC_ConfigChannel+0x59a>
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	0e9b      	lsrs	r3, r3, #26
 80043a6:	3301      	adds	r3, #1
 80043a8:	f003 021f 	and.w	r2, r3, #31
 80043ac:	4613      	mov	r3, r2
 80043ae:	005b      	lsls	r3, r3, #1
 80043b0:	4413      	add	r3, r2
 80043b2:	051b      	lsls	r3, r3, #20
 80043b4:	e018      	b.n	80043e8 <HAL_ADC_ConfigChannel+0x5cc>
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043be:	fa93 f3a3 	rbit	r3, r3
 80043c2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80043c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80043c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80043ce:	2320      	movs	r3, #32
 80043d0:	e003      	b.n	80043da <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80043d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d4:	fab3 f383 	clz	r3, r3
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	3301      	adds	r3, #1
 80043dc:	f003 021f 	and.w	r2, r3, #31
 80043e0:	4613      	mov	r3, r2
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	4413      	add	r3, r2
 80043e6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043e8:	430b      	orrs	r3, r1
 80043ea:	e080      	b.n	80044ee <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d107      	bne.n	8004408 <HAL_ADC_ConfigChannel+0x5ec>
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	0e9b      	lsrs	r3, r3, #26
 80043fe:	3301      	adds	r3, #1
 8004400:	069b      	lsls	r3, r3, #26
 8004402:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004406:	e015      	b.n	8004434 <HAL_ADC_ConfigChannel+0x618>
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800440e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004410:	fa93 f3a3 	rbit	r3, r3
 8004414:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800441a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8004420:	2320      	movs	r3, #32
 8004422:	e003      	b.n	800442c <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8004424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004426:	fab3 f383 	clz	r3, r3
 800442a:	b2db      	uxtb	r3, r3
 800442c:	3301      	adds	r3, #1
 800442e:	069b      	lsls	r3, r3, #26
 8004430:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800443c:	2b00      	cmp	r3, #0
 800443e:	d109      	bne.n	8004454 <HAL_ADC_ConfigChannel+0x638>
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	0e9b      	lsrs	r3, r3, #26
 8004446:	3301      	adds	r3, #1
 8004448:	f003 031f 	and.w	r3, r3, #31
 800444c:	2101      	movs	r1, #1
 800444e:	fa01 f303 	lsl.w	r3, r1, r3
 8004452:	e017      	b.n	8004484 <HAL_ADC_ConfigChannel+0x668>
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	fa93 f3a3 	rbit	r3, r3
 8004460:	61bb      	str	r3, [r7, #24]
  return result;
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004466:	6a3b      	ldr	r3, [r7, #32]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 800446c:	2320      	movs	r3, #32
 800446e:	e003      	b.n	8004478 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8004470:	6a3b      	ldr	r3, [r7, #32]
 8004472:	fab3 f383 	clz	r3, r3
 8004476:	b2db      	uxtb	r3, r3
 8004478:	3301      	adds	r3, #1
 800447a:	f003 031f 	and.w	r3, r3, #31
 800447e:	2101      	movs	r1, #1
 8004480:	fa01 f303 	lsl.w	r3, r1, r3
 8004484:	ea42 0103 	orr.w	r1, r2, r3
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004490:	2b00      	cmp	r3, #0
 8004492:	d10d      	bne.n	80044b0 <HAL_ADC_ConfigChannel+0x694>
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	0e9b      	lsrs	r3, r3, #26
 800449a:	3301      	adds	r3, #1
 800449c:	f003 021f 	and.w	r2, r3, #31
 80044a0:	4613      	mov	r3, r2
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	4413      	add	r3, r2
 80044a6:	3b1e      	subs	r3, #30
 80044a8:	051b      	lsls	r3, r3, #20
 80044aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80044ae:	e01d      	b.n	80044ec <HAL_ADC_ConfigChannel+0x6d0>
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	fa93 f3a3 	rbit	r3, r3
 80044bc:	60fb      	str	r3, [r7, #12]
  return result;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d103      	bne.n	80044d0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80044c8:	2320      	movs	r3, #32
 80044ca:	e005      	b.n	80044d8 <HAL_ADC_ConfigChannel+0x6bc>
 80044cc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	fab3 f383 	clz	r3, r3
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	3301      	adds	r3, #1
 80044da:	f003 021f 	and.w	r2, r3, #31
 80044de:	4613      	mov	r3, r2
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	4413      	add	r3, r2
 80044e4:	3b1e      	subs	r3, #30
 80044e6:	051b      	lsls	r3, r3, #20
 80044e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044ec:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044f2:	4619      	mov	r1, r3
 80044f4:	f7ff fa74 	bl	80039e0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	4b3d      	ldr	r3, [pc, #244]	; (80045f4 <HAL_ADC_ConfigChannel+0x7d8>)
 80044fe:	4013      	ands	r3, r2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d06c      	beq.n	80045de <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004504:	483c      	ldr	r0, [pc, #240]	; (80045f8 <HAL_ADC_ConfigChannel+0x7dc>)
 8004506:	f7ff f9c9 	bl	800389c <LL_ADC_GetCommonPathInternalCh>
 800450a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a3a      	ldr	r2, [pc, #232]	; (80045fc <HAL_ADC_ConfigChannel+0x7e0>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d127      	bne.n	8004568 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004518:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800451c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d121      	bne.n	8004568 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a35      	ldr	r2, [pc, #212]	; (8004600 <HAL_ADC_ConfigChannel+0x7e4>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d157      	bne.n	80045de <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800452e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004532:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004536:	4619      	mov	r1, r3
 8004538:	482f      	ldr	r0, [pc, #188]	; (80045f8 <HAL_ADC_ConfigChannel+0x7dc>)
 800453a:	f7ff f99c 	bl	8003876 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800453e:	4b31      	ldr	r3, [pc, #196]	; (8004604 <HAL_ADC_ConfigChannel+0x7e8>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	099b      	lsrs	r3, r3, #6
 8004544:	4a30      	ldr	r2, [pc, #192]	; (8004608 <HAL_ADC_ConfigChannel+0x7ec>)
 8004546:	fba2 2303 	umull	r2, r3, r2, r3
 800454a:	099b      	lsrs	r3, r3, #6
 800454c:	1c5a      	adds	r2, r3, #1
 800454e:	4613      	mov	r3, r2
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	4413      	add	r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004558:	e002      	b.n	8004560 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	3b01      	subs	r3, #1
 800455e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1f9      	bne.n	800455a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004566:	e03a      	b.n	80045de <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a27      	ldr	r2, [pc, #156]	; (800460c <HAL_ADC_ConfigChannel+0x7f0>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d113      	bne.n	800459a <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004572:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004576:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10d      	bne.n	800459a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a1f      	ldr	r2, [pc, #124]	; (8004600 <HAL_ADC_ConfigChannel+0x7e4>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d12a      	bne.n	80045de <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004588:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800458c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004590:	4619      	mov	r1, r3
 8004592:	4819      	ldr	r0, [pc, #100]	; (80045f8 <HAL_ADC_ConfigChannel+0x7dc>)
 8004594:	f7ff f96f 	bl	8003876 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004598:	e021      	b.n	80045de <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a1c      	ldr	r2, [pc, #112]	; (8004610 <HAL_ADC_ConfigChannel+0x7f4>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d11c      	bne.n	80045de <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80045a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80045a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d116      	bne.n	80045de <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a12      	ldr	r2, [pc, #72]	; (8004600 <HAL_ADC_ConfigChannel+0x7e4>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d111      	bne.n	80045de <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80045be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80045c2:	4619      	mov	r1, r3
 80045c4:	480c      	ldr	r0, [pc, #48]	; (80045f8 <HAL_ADC_ConfigChannel+0x7dc>)
 80045c6:	f7ff f956 	bl	8003876 <LL_ADC_SetCommonPathInternalCh>
 80045ca:	e008      	b.n	80045de <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d0:	f043 0220 	orr.w	r2, r3, #32
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80045e6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	37d8      	adds	r7, #216	; 0xd8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	80080000 	.word	0x80080000
 80045f8:	50040300 	.word	0x50040300
 80045fc:	c7520000 	.word	0xc7520000
 8004600:	50040000 	.word	0x50040000
 8004604:	2000003c 	.word	0x2000003c
 8004608:	053e2d63 	.word	0x053e2d63
 800460c:	cb840000 	.word	0xcb840000
 8004610:	80000001 	.word	0x80000001

08004614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004624:	4b0c      	ldr	r3, [pc, #48]	; (8004658 <__NVIC_SetPriorityGrouping+0x44>)
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004630:	4013      	ands	r3, r2
 8004632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800463c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004646:	4a04      	ldr	r2, [pc, #16]	; (8004658 <__NVIC_SetPriorityGrouping+0x44>)
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	60d3      	str	r3, [r2, #12]
}
 800464c:	bf00      	nop
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr
 8004658:	e000ed00 	.word	0xe000ed00

0800465c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800465c:	b480      	push	{r7}
 800465e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004660:	4b04      	ldr	r3, [pc, #16]	; (8004674 <__NVIC_GetPriorityGrouping+0x18>)
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	0a1b      	lsrs	r3, r3, #8
 8004666:	f003 0307 	and.w	r3, r3, #7
}
 800466a:	4618      	mov	r0, r3
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	e000ed00 	.word	0xe000ed00

08004678 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	4603      	mov	r3, r0
 8004680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004686:	2b00      	cmp	r3, #0
 8004688:	db0b      	blt.n	80046a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800468a:	79fb      	ldrb	r3, [r7, #7]
 800468c:	f003 021f 	and.w	r2, r3, #31
 8004690:	4907      	ldr	r1, [pc, #28]	; (80046b0 <__NVIC_EnableIRQ+0x38>)
 8004692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004696:	095b      	lsrs	r3, r3, #5
 8004698:	2001      	movs	r0, #1
 800469a:	fa00 f202 	lsl.w	r2, r0, r2
 800469e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80046a2:	bf00      	nop
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	e000e100 	.word	0xe000e100

080046b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	4603      	mov	r3, r0
 80046bc:	6039      	str	r1, [r7, #0]
 80046be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	db0a      	blt.n	80046de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	490c      	ldr	r1, [pc, #48]	; (8004700 <__NVIC_SetPriority+0x4c>)
 80046ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d2:	0112      	lsls	r2, r2, #4
 80046d4:	b2d2      	uxtb	r2, r2
 80046d6:	440b      	add	r3, r1
 80046d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046dc:	e00a      	b.n	80046f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	b2da      	uxtb	r2, r3
 80046e2:	4908      	ldr	r1, [pc, #32]	; (8004704 <__NVIC_SetPriority+0x50>)
 80046e4:	79fb      	ldrb	r3, [r7, #7]
 80046e6:	f003 030f 	and.w	r3, r3, #15
 80046ea:	3b04      	subs	r3, #4
 80046ec:	0112      	lsls	r2, r2, #4
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	440b      	add	r3, r1
 80046f2:	761a      	strb	r2, [r3, #24]
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr
 8004700:	e000e100 	.word	0xe000e100
 8004704:	e000ed00 	.word	0xe000ed00

08004708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004708:	b480      	push	{r7}
 800470a:	b089      	sub	sp, #36	; 0x24
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f003 0307 	and.w	r3, r3, #7
 800471a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	f1c3 0307 	rsb	r3, r3, #7
 8004722:	2b04      	cmp	r3, #4
 8004724:	bf28      	it	cs
 8004726:	2304      	movcs	r3, #4
 8004728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	3304      	adds	r3, #4
 800472e:	2b06      	cmp	r3, #6
 8004730:	d902      	bls.n	8004738 <NVIC_EncodePriority+0x30>
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	3b03      	subs	r3, #3
 8004736:	e000      	b.n	800473a <NVIC_EncodePriority+0x32>
 8004738:	2300      	movs	r3, #0
 800473a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800473c:	f04f 32ff 	mov.w	r2, #4294967295
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	fa02 f303 	lsl.w	r3, r2, r3
 8004746:	43da      	mvns	r2, r3
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	401a      	ands	r2, r3
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004750:	f04f 31ff 	mov.w	r1, #4294967295
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	fa01 f303 	lsl.w	r3, r1, r3
 800475a:	43d9      	mvns	r1, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004760:	4313      	orrs	r3, r2
         );
}
 8004762:	4618      	mov	r0, r3
 8004764:	3724      	adds	r7, #36	; 0x24
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b082      	sub	sp, #8
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f7ff ff4c 	bl	8004614 <__NVIC_SetPriorityGrouping>
}
 800477c:	bf00      	nop
 800477e:	3708      	adds	r7, #8
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af00      	add	r7, sp, #0
 800478a:	4603      	mov	r3, r0
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
 8004790:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004792:	2300      	movs	r3, #0
 8004794:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004796:	f7ff ff61 	bl	800465c <__NVIC_GetPriorityGrouping>
 800479a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	68b9      	ldr	r1, [r7, #8]
 80047a0:	6978      	ldr	r0, [r7, #20]
 80047a2:	f7ff ffb1 	bl	8004708 <NVIC_EncodePriority>
 80047a6:	4602      	mov	r2, r0
 80047a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047ac:	4611      	mov	r1, r2
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7ff ff80 	bl	80046b4 <__NVIC_SetPriority>
}
 80047b4:	bf00      	nop
 80047b6:	3718      	adds	r7, #24
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	4603      	mov	r3, r0
 80047c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7ff ff54 	bl	8004678 <__NVIC_EnableIRQ>
}
 80047d0:	bf00      	nop
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e0ac      	b.n	8004944 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 f8b2 	bl	8004958 <DFSDM_GetChannelFromInstance>
 80047f4:	4603      	mov	r3, r0
 80047f6:	4a55      	ldr	r2, [pc, #340]	; (800494c <HAL_DFSDM_ChannelInit+0x174>)
 80047f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e09f      	b.n	8004944 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f7fe fb7b 	bl	8002f00 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800480a:	4b51      	ldr	r3, [pc, #324]	; (8004950 <HAL_DFSDM_ChannelInit+0x178>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	3301      	adds	r3, #1
 8004810:	4a4f      	ldr	r2, [pc, #316]	; (8004950 <HAL_DFSDM_ChannelInit+0x178>)
 8004812:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8004814:	4b4e      	ldr	r3, [pc, #312]	; (8004950 <HAL_DFSDM_ChannelInit+0x178>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d125      	bne.n	8004868 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800481c:	4b4d      	ldr	r3, [pc, #308]	; (8004954 <HAL_DFSDM_ChannelInit+0x17c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a4c      	ldr	r2, [pc, #304]	; (8004954 <HAL_DFSDM_ChannelInit+0x17c>)
 8004822:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004826:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8004828:	4b4a      	ldr	r3, [pc, #296]	; (8004954 <HAL_DFSDM_ChannelInit+0x17c>)
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	4948      	ldr	r1, [pc, #288]	; (8004954 <HAL_DFSDM_ChannelInit+0x17c>)
 8004832:	4313      	orrs	r3, r2
 8004834:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8004836:	4b47      	ldr	r3, [pc, #284]	; (8004954 <HAL_DFSDM_ChannelInit+0x17c>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a46      	ldr	r2, [pc, #280]	; (8004954 <HAL_DFSDM_ChannelInit+0x17c>)
 800483c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8004840:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	791b      	ldrb	r3, [r3, #4]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d108      	bne.n	800485c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800484a:	4b42      	ldr	r3, [pc, #264]	; (8004954 <HAL_DFSDM_ChannelInit+0x17c>)
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	3b01      	subs	r3, #1
 8004854:	041b      	lsls	r3, r3, #16
 8004856:	493f      	ldr	r1, [pc, #252]	; (8004954 <HAL_DFSDM_ChannelInit+0x17c>)
 8004858:	4313      	orrs	r3, r2
 800485a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800485c:	4b3d      	ldr	r3, [pc, #244]	; (8004954 <HAL_DFSDM_ChannelInit+0x17c>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a3c      	ldr	r2, [pc, #240]	; (8004954 <HAL_DFSDM_ChannelInit+0x17c>)
 8004862:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004866:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8004876:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6819      	ldr	r1, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004886:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800488c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	430a      	orrs	r2, r1
 8004894:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f022 020f 	bic.w	r2, r2, #15
 80048a4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	6819      	ldr	r1, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80048b4:	431a      	orrs	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80048cc:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6899      	ldr	r1, [r3, #8]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048dc:	3b01      	subs	r3, #1
 80048de:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80048e0:	431a      	orrs	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f002 0207 	and.w	r2, r2, #7
 80048f8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6859      	ldr	r1, [r3, #4]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004904:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800490c:	431a      	orrs	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004924:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4618      	mov	r0, r3
 8004934:	f000 f810 	bl	8004958 <DFSDM_GetChannelFromInstance>
 8004938:	4602      	mov	r2, r0
 800493a:	4904      	ldr	r1, [pc, #16]	; (800494c <HAL_DFSDM_ChannelInit+0x174>)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3708      	adds	r7, #8
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	200012b0 	.word	0x200012b0
 8004950:	200012ac 	.word	0x200012ac
 8004954:	40016000 	.word	0x40016000

08004958 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a1c      	ldr	r2, [pc, #112]	; (80049d4 <DFSDM_GetChannelFromInstance+0x7c>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d102      	bne.n	800496e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8004968:	2300      	movs	r3, #0
 800496a:	60fb      	str	r3, [r7, #12]
 800496c:	e02b      	b.n	80049c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a19      	ldr	r2, [pc, #100]	; (80049d8 <DFSDM_GetChannelFromInstance+0x80>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d102      	bne.n	800497c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8004976:	2301      	movs	r3, #1
 8004978:	60fb      	str	r3, [r7, #12]
 800497a:	e024      	b.n	80049c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a17      	ldr	r2, [pc, #92]	; (80049dc <DFSDM_GetChannelFromInstance+0x84>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d102      	bne.n	800498a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8004984:	2302      	movs	r3, #2
 8004986:	60fb      	str	r3, [r7, #12]
 8004988:	e01d      	b.n	80049c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a14      	ldr	r2, [pc, #80]	; (80049e0 <DFSDM_GetChannelFromInstance+0x88>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d102      	bne.n	8004998 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8004992:	2304      	movs	r3, #4
 8004994:	60fb      	str	r3, [r7, #12]
 8004996:	e016      	b.n	80049c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a12      	ldr	r2, [pc, #72]	; (80049e4 <DFSDM_GetChannelFromInstance+0x8c>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d102      	bne.n	80049a6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80049a0:	2305      	movs	r3, #5
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	e00f      	b.n	80049c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a0f      	ldr	r2, [pc, #60]	; (80049e8 <DFSDM_GetChannelFromInstance+0x90>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d102      	bne.n	80049b4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80049ae:	2306      	movs	r3, #6
 80049b0:	60fb      	str	r3, [r7, #12]
 80049b2:	e008      	b.n	80049c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a0d      	ldr	r2, [pc, #52]	; (80049ec <DFSDM_GetChannelFromInstance+0x94>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d102      	bne.n	80049c2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80049bc:	2307      	movs	r3, #7
 80049be:	60fb      	str	r3, [r7, #12]
 80049c0:	e001      	b.n	80049c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80049c2:	2303      	movs	r3, #3
 80049c4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80049c6:	68fb      	ldr	r3, [r7, #12]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3714      	adds	r7, #20
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr
 80049d4:	40016000 	.word	0x40016000
 80049d8:	40016020 	.word	0x40016020
 80049dc:	40016040 	.word	0x40016040
 80049e0:	40016080 	.word	0x40016080
 80049e4:	400160a0 	.word	0x400160a0
 80049e8:	400160c0 	.word	0x400160c0
 80049ec:	400160e0 	.word	0x400160e0

080049f0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049f8:	2300      	movs	r3, #0
 80049fa:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d008      	beq.n	8004a1a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2204      	movs	r2, #4
 8004a0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e040      	b.n	8004a9c <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f022 020e 	bic.w	r2, r2, #14
 8004a28:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a38:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 0201 	bic.w	r2, r2, #1
 8004a48:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a4e:	f003 021c 	and.w	r2, r3, #28
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a56:	2101      	movs	r1, #1
 8004a58:	fa01 f202 	lsl.w	r2, r1, r2
 8004a5c:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004a66:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00c      	beq.n	8004a8a <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a7e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004a88:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004a9a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3714      	adds	r7, #20
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d005      	beq.n	8004acc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2204      	movs	r2, #4
 8004ac4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	73fb      	strb	r3, [r7, #15]
 8004aca:	e047      	b.n	8004b5c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 020e 	bic.w	r2, r2, #14
 8004ada:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 0201 	bic.w	r2, r2, #1
 8004aea:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004af6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004afa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b00:	f003 021c 	and.w	r2, r3, #28
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b08:	2101      	movs	r1, #1
 8004b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8004b0e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004b18:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00c      	beq.n	8004b3c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b30:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004b3a:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d003      	beq.n	8004b5c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	4798      	blx	r3
    }
  }
  return status;
 8004b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b083      	sub	sp, #12
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004b74:	b2db      	uxtb	r3, r3
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
	...

08004b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b087      	sub	sp, #28
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b92:	e166      	b.n	8004e62 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	2101      	movs	r1, #1
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f000 8158 	beq.w	8004e5c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f003 0303 	and.w	r3, r3, #3
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d005      	beq.n	8004bc4 <HAL_GPIO_Init+0x40>
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f003 0303 	and.w	r3, r3, #3
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d130      	bne.n	8004c26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	005b      	lsls	r3, r3, #1
 8004bce:	2203      	movs	r2, #3
 8004bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd4:	43db      	mvns	r3, r3
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	4013      	ands	r3, r2
 8004bda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	68da      	ldr	r2, [r3, #12]
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	005b      	lsls	r3, r3, #1
 8004be4:	fa02 f303 	lsl.w	r3, r2, r3
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004c02:	43db      	mvns	r3, r3
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	4013      	ands	r3, r2
 8004c08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	091b      	lsrs	r3, r3, #4
 8004c10:	f003 0201 	and.w	r2, r3, #1
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f003 0303 	and.w	r3, r3, #3
 8004c2e:	2b03      	cmp	r3, #3
 8004c30:	d017      	beq.n	8004c62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	2203      	movs	r2, #3
 8004c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c42:	43db      	mvns	r3, r3
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	4013      	ands	r3, r2
 8004c48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	689a      	ldr	r2, [r3, #8]
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	005b      	lsls	r3, r3, #1
 8004c52:	fa02 f303 	lsl.w	r3, r2, r3
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f003 0303 	and.w	r3, r3, #3
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d123      	bne.n	8004cb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	08da      	lsrs	r2, r3, #3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	3208      	adds	r2, #8
 8004c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	f003 0307 	and.w	r3, r3, #7
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	220f      	movs	r2, #15
 8004c86:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8a:	43db      	mvns	r3, r3
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	4013      	ands	r3, r2
 8004c90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	691a      	ldr	r2, [r3, #16]
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f003 0307 	and.w	r3, r3, #7
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	08da      	lsrs	r2, r3, #3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	3208      	adds	r2, #8
 8004cb0:	6939      	ldr	r1, [r7, #16]
 8004cb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	005b      	lsls	r3, r3, #1
 8004cc0:	2203      	movs	r2, #3
 8004cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc6:	43db      	mvns	r3, r3
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f003 0203 	and.w	r2, r3, #3
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	fa02 f303 	lsl.w	r3, r2, r3
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f000 80b2 	beq.w	8004e5c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cf8:	4b61      	ldr	r3, [pc, #388]	; (8004e80 <HAL_GPIO_Init+0x2fc>)
 8004cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cfc:	4a60      	ldr	r2, [pc, #384]	; (8004e80 <HAL_GPIO_Init+0x2fc>)
 8004cfe:	f043 0301 	orr.w	r3, r3, #1
 8004d02:	6613      	str	r3, [r2, #96]	; 0x60
 8004d04:	4b5e      	ldr	r3, [pc, #376]	; (8004e80 <HAL_GPIO_Init+0x2fc>)
 8004d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	60bb      	str	r3, [r7, #8]
 8004d0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004d10:	4a5c      	ldr	r2, [pc, #368]	; (8004e84 <HAL_GPIO_Init+0x300>)
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	089b      	lsrs	r3, r3, #2
 8004d16:	3302      	adds	r3, #2
 8004d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	f003 0303 	and.w	r3, r3, #3
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	220f      	movs	r2, #15
 8004d28:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2c:	43db      	mvns	r3, r3
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	4013      	ands	r3, r2
 8004d32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004d3a:	d02b      	beq.n	8004d94 <HAL_GPIO_Init+0x210>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a52      	ldr	r2, [pc, #328]	; (8004e88 <HAL_GPIO_Init+0x304>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d025      	beq.n	8004d90 <HAL_GPIO_Init+0x20c>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a51      	ldr	r2, [pc, #324]	; (8004e8c <HAL_GPIO_Init+0x308>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d01f      	beq.n	8004d8c <HAL_GPIO_Init+0x208>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a50      	ldr	r2, [pc, #320]	; (8004e90 <HAL_GPIO_Init+0x30c>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d019      	beq.n	8004d88 <HAL_GPIO_Init+0x204>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a4f      	ldr	r2, [pc, #316]	; (8004e94 <HAL_GPIO_Init+0x310>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d013      	beq.n	8004d84 <HAL_GPIO_Init+0x200>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a4e      	ldr	r2, [pc, #312]	; (8004e98 <HAL_GPIO_Init+0x314>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d00d      	beq.n	8004d80 <HAL_GPIO_Init+0x1fc>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a4d      	ldr	r2, [pc, #308]	; (8004e9c <HAL_GPIO_Init+0x318>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d007      	beq.n	8004d7c <HAL_GPIO_Init+0x1f8>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a4c      	ldr	r2, [pc, #304]	; (8004ea0 <HAL_GPIO_Init+0x31c>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d101      	bne.n	8004d78 <HAL_GPIO_Init+0x1f4>
 8004d74:	2307      	movs	r3, #7
 8004d76:	e00e      	b.n	8004d96 <HAL_GPIO_Init+0x212>
 8004d78:	2308      	movs	r3, #8
 8004d7a:	e00c      	b.n	8004d96 <HAL_GPIO_Init+0x212>
 8004d7c:	2306      	movs	r3, #6
 8004d7e:	e00a      	b.n	8004d96 <HAL_GPIO_Init+0x212>
 8004d80:	2305      	movs	r3, #5
 8004d82:	e008      	b.n	8004d96 <HAL_GPIO_Init+0x212>
 8004d84:	2304      	movs	r3, #4
 8004d86:	e006      	b.n	8004d96 <HAL_GPIO_Init+0x212>
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e004      	b.n	8004d96 <HAL_GPIO_Init+0x212>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	e002      	b.n	8004d96 <HAL_GPIO_Init+0x212>
 8004d90:	2301      	movs	r3, #1
 8004d92:	e000      	b.n	8004d96 <HAL_GPIO_Init+0x212>
 8004d94:	2300      	movs	r3, #0
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	f002 0203 	and.w	r2, r2, #3
 8004d9c:	0092      	lsls	r2, r2, #2
 8004d9e:	4093      	lsls	r3, r2
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004da6:	4937      	ldr	r1, [pc, #220]	; (8004e84 <HAL_GPIO_Init+0x300>)
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	089b      	lsrs	r3, r3, #2
 8004dac:	3302      	adds	r3, #2
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004db4:	4b3b      	ldr	r3, [pc, #236]	; (8004ea4 <HAL_GPIO_Init+0x320>)
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	43db      	mvns	r3, r3
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d003      	beq.n	8004dd8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004dd8:	4a32      	ldr	r2, [pc, #200]	; (8004ea4 <HAL_GPIO_Init+0x320>)
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004dde:	4b31      	ldr	r3, [pc, #196]	; (8004ea4 <HAL_GPIO_Init+0x320>)
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	43db      	mvns	r3, r3
 8004de8:	693a      	ldr	r2, [r7, #16]
 8004dea:	4013      	ands	r3, r2
 8004dec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004e02:	4a28      	ldr	r2, [pc, #160]	; (8004ea4 <HAL_GPIO_Init+0x320>)
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004e08:	4b26      	ldr	r3, [pc, #152]	; (8004ea4 <HAL_GPIO_Init+0x320>)
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	43db      	mvns	r3, r3
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	4013      	ands	r3, r2
 8004e16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d003      	beq.n	8004e2c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004e2c:	4a1d      	ldr	r2, [pc, #116]	; (8004ea4 <HAL_GPIO_Init+0x320>)
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004e32:	4b1c      	ldr	r3, [pc, #112]	; (8004ea4 <HAL_GPIO_Init+0x320>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	43db      	mvns	r3, r3
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d003      	beq.n	8004e56 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004e56:	4a13      	ldr	r2, [pc, #76]	; (8004ea4 <HAL_GPIO_Init+0x320>)
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	3301      	adds	r3, #1
 8004e60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	fa22 f303 	lsr.w	r3, r2, r3
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f47f ae91 	bne.w	8004b94 <HAL_GPIO_Init+0x10>
  }
}
 8004e72:	bf00      	nop
 8004e74:	bf00      	nop
 8004e76:	371c      	adds	r7, #28
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr
 8004e80:	40021000 	.word	0x40021000
 8004e84:	40010000 	.word	0x40010000
 8004e88:	48000400 	.word	0x48000400
 8004e8c:	48000800 	.word	0x48000800
 8004e90:	48000c00 	.word	0x48000c00
 8004e94:	48001000 	.word	0x48001000
 8004e98:	48001400 	.word	0x48001400
 8004e9c:	48001800 	.word	0x48001800
 8004ea0:	48001c00 	.word	0x48001c00
 8004ea4:	40010400 	.word	0x40010400

08004ea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	807b      	strh	r3, [r7, #2]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004eb8:	787b      	ldrb	r3, [r7, #1]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d003      	beq.n	8004ec6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ebe:	887a      	ldrh	r2, [r7, #2]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ec4:	e002      	b.n	8004ecc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ec6:	887a      	ldrh	r2, [r7, #2]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	4603      	mov	r3, r0
 8004ee0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004ee2:	4b08      	ldr	r3, [pc, #32]	; (8004f04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ee4:	695a      	ldr	r2, [r3, #20]
 8004ee6:	88fb      	ldrh	r3, [r7, #6]
 8004ee8:	4013      	ands	r3, r2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d006      	beq.n	8004efc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004eee:	4a05      	ldr	r2, [pc, #20]	; (8004f04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ef0:	88fb      	ldrh	r3, [r7, #6]
 8004ef2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ef4:	88fb      	ldrh	r3, [r7, #6]
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7fd fe88 	bl	8002c0c <HAL_GPIO_EXTI_Callback>
  }
}
 8004efc:	bf00      	nop
 8004efe:	3708      	adds	r7, #8
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	40010400 	.word	0x40010400

08004f08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e08d      	b.n	8005036 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d106      	bne.n	8004f34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7fe f84a 	bl	8002fc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2224      	movs	r2, #36	; 0x24
 8004f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f022 0201 	bic.w	r2, r2, #1
 8004f4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f58:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689a      	ldr	r2, [r3, #8]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f68:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d107      	bne.n	8004f82 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	689a      	ldr	r2, [r3, #8]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f7e:	609a      	str	r2, [r3, #8]
 8004f80:	e006      	b.n	8004f90 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	689a      	ldr	r2, [r3, #8]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004f8e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d108      	bne.n	8004faa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	685a      	ldr	r2, [r3, #4]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fa6:	605a      	str	r2, [r3, #4]
 8004fa8:	e007      	b.n	8004fba <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fb8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	6812      	ldr	r2, [r2, #0]
 8004fc4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004fc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fcc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68da      	ldr	r2, [r3, #12]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fdc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691a      	ldr	r2, [r3, #16]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	69d9      	ldr	r1, [r3, #28]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a1a      	ldr	r2, [r3, #32]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f042 0201 	orr.w	r2, r2, #1
 8005016:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2220      	movs	r2, #32
 8005022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
	...

08005040 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	603b      	str	r3, [r7, #0]
 800504c:	4613      	mov	r3, r2
 800504e:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005056:	b2db      	uxtb	r3, r3
 8005058:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800505c:	2b28      	cmp	r3, #40	; 0x28
 800505e:	f040 8098 	bne.w	8005192 <HAL_I2C_Slave_Seq_Receive_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d002      	beq.n	800506e <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 8005068:	88fb      	ldrh	r3, [r7, #6]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d105      	bne.n	800507a <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005074:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e08c      	b.n	8005194 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800507a:	f248 0102 	movw	r1, #32770	; 0x8002
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f001 fa92 	bl	80065a8 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800508a:	2b01      	cmp	r3, #1
 800508c:	d101      	bne.n	8005092 <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 800508e:	2302      	movs	r3, #2
 8005090:	e080      	b.n	8005194 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b29      	cmp	r3, #41	; 0x29
 80050a4:	d12a      	bne.n	80050fc <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80050a6:	2101      	movs	r1, #1
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f001 fa7d 	bl	80065a8 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050bc:	d11e      	bne.n	80050fc <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80050cc:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d012      	beq.n	80050fc <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050da:	4a30      	ldr	r2, [pc, #192]	; (800519c <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 80050dc:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7ff fce0 	bl	8004aa8 <HAL_DMA_Abort_IT>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d006      	beq.n	80050fc <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80050f8:	4610      	mov	r0, r2
 80050fa:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	222a      	movs	r2, #42	; 0x2a
 8005100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2220      	movs	r2, #32
 8005108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005120:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	68ba      	ldr	r2, [r7, #8]
 8005126:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	88fa      	ldrh	r2, [r7, #6]
 800512c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005132:	b29a      	uxth	r2, r3
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	4a17      	ldr	r2, [pc, #92]	; (80051a0 <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 8005142:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	f003 0308 	and.w	r3, r3, #8
 800514e:	2b08      	cmp	r3, #8
 8005150:	bf0c      	ite	eq
 8005152:	2301      	moveq	r3, #1
 8005154:	2300      	movne	r3, #0
 8005156:	b2db      	uxtb	r3, r3
 8005158:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	0c1b      	lsrs	r3, r3, #16
 8005162:	b2db      	uxtb	r3, r3
 8005164:	f003 0301 	and.w	r3, r3, #1
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d106      	bne.n	800517c <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
 800516e:	7dfb      	ldrb	r3, [r7, #23]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d003      	beq.n	800517c <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2208      	movs	r2, #8
 800517a:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8005184:	f248 0102 	movw	r1, #32770	; 0x8002
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f001 f989 	bl	80064a0 <I2C_Enable_IRQ>

    return HAL_OK;
 800518e:	2300      	movs	r3, #0
 8005190:	e000      	b.n	8005194 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
  }
}
 8005194:	4618      	mov	r0, r3
 8005196:	3718      	adds	r7, #24
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	080063ff 	.word	0x080063ff
 80051a0:	08005333 	.word	0x08005333

080051a4 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b20      	cmp	r3, #32
 80051b6:	d10d      	bne.n	80051d4 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2228      	movs	r2, #40	; 0x28
 80051bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a07      	ldr	r2, [pc, #28]	; (80051e0 <HAL_I2C_EnableListen_IT+0x3c>)
 80051c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80051c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f001 f968 	bl	80064a0 <I2C_Enable_IRQ>

    return HAL_OK;
 80051d0:	2300      	movs	r3, #0
 80051d2:	e000      	b.n	80051d6 <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 80051d4:	2302      	movs	r3, #2
  }
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	08005333 	.word	0x08005333

080051e4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005200:	2b00      	cmp	r3, #0
 8005202:	d005      	beq.n	8005210 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	68f9      	ldr	r1, [r7, #12]
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	4798      	blx	r3
  }
}
 8005210:	bf00      	nop
 8005212:	3710      	adds	r7, #16
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00f      	beq.n	800525a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00a      	beq.n	800525a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005248:	f043 0201 	orr.w	r2, r3, #1
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005258:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00f      	beq.n	8005284 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00a      	beq.n	8005284 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005272:	f043 0208 	orr.w	r2, r3, #8
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005282:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00f      	beq.n	80052ae <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00a      	beq.n	80052ae <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800529c:	f043 0202 	orr.w	r2, r3, #2
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052ac:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f003 030b 	and.w	r3, r3, #11
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d003      	beq.n	80052c6 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80052be:	68f9      	ldr	r1, [r7, #12]
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 ff61 	bl	8006188 <I2C_ITError>
  }
}
 80052c6:	bf00      	nop
 80052c8:	3718      	adds	r7, #24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052ce:	b480      	push	{r7}
 80052d0:	b083      	sub	sp, #12
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80052d6:	bf00      	nop
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr

080052e2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052e2:	b480      	push	{r7}
 80052e4:	b083      	sub	sp, #12
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80052ea:	bf00      	nop
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052f6:	b480      	push	{r7}
 80052f8:	b083      	sub	sp, #12
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80052fe:	bf00      	nop
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800530a:	b480      	push	{r7}
 800530c:	b083      	sub	sp, #12
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005312:	bf00      	nop
 8005314:	370c      	adds	r7, #12
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr

0800531e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800531e:	b480      	push	{r7}
 8005320:	b083      	sub	sp, #12
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005326:	bf00      	nop
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b086      	sub	sp, #24
 8005336:	af00      	add	r7, sp, #0
 8005338:	60f8      	str	r0, [r7, #12]
 800533a:	60b9      	str	r1, [r7, #8]
 800533c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005342:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800534e:	2b01      	cmp	r3, #1
 8005350:	d101      	bne.n	8005356 <I2C_Slave_ISR_IT+0x24>
 8005352:	2302      	movs	r3, #2
 8005354:	e0e1      	b.n	800551a <I2C_Slave_ISR_IT+0x1e8>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	f003 0320 	and.w	r3, r3, #32
 8005364:	2b00      	cmp	r3, #0
 8005366:	d008      	beq.n	800537a <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800536e:	2b00      	cmp	r3, #0
 8005370:	d003      	beq.n	800537a <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005372:	6939      	ldr	r1, [r7, #16]
 8005374:	68f8      	ldr	r0, [r7, #12]
 8005376:	f000 fda1 	bl	8005ebc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	f003 0310 	and.w	r3, r3, #16
 8005380:	2b00      	cmp	r3, #0
 8005382:	d04b      	beq.n	800541c <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800538a:	2b00      	cmp	r3, #0
 800538c:	d046      	beq.n	800541c <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005392:	b29b      	uxth	r3, r3
 8005394:	2b00      	cmp	r3, #0
 8005396:	d128      	bne.n	80053ea <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b28      	cmp	r3, #40	; 0x28
 80053a2:	d108      	bne.n	80053b6 <I2C_Slave_ISR_IT+0x84>
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053aa:	d104      	bne.n	80053b6 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80053ac:	6939      	ldr	r1, [r7, #16]
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f000 fe96 	bl	80060e0 <I2C_ITListenCplt>
 80053b4:	e031      	b.n	800541a <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b29      	cmp	r3, #41	; 0x29
 80053c0:	d10e      	bne.n	80053e0 <I2C_Slave_ISR_IT+0xae>
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053c8:	d00a      	beq.n	80053e0 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2210      	movs	r2, #16
 80053d0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f000 ffef 	bl	80063b6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f000 fc4a 	bl	8005c72 <I2C_ITSlaveSeqCplt>
 80053de:	e01c      	b.n	800541a <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2210      	movs	r2, #16
 80053e6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80053e8:	e08f      	b.n	800550a <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2210      	movs	r2, #16
 80053f0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f6:	f043 0204 	orr.w	r2, r3, #4
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d003      	beq.n	800540c <I2C_Slave_ISR_IT+0xda>
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800540a:	d17e      	bne.n	800550a <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005410:	4619      	mov	r1, r3
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f000 feb8 	bl	8006188 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005418:	e077      	b.n	800550a <I2C_Slave_ISR_IT+0x1d8>
 800541a:	e076      	b.n	800550a <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	f003 0304 	and.w	r3, r3, #4
 8005422:	2b00      	cmp	r3, #0
 8005424:	d02f      	beq.n	8005486 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800542c:	2b00      	cmp	r3, #0
 800542e:	d02a      	beq.n	8005486 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005434:	b29b      	uxth	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d018      	beq.n	800546c <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005444:	b2d2      	uxtb	r2, r2
 8005446:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544c:	1c5a      	adds	r2, r3, #1
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005456:	3b01      	subs	r3, #1
 8005458:	b29a      	uxth	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005462:	b29b      	uxth	r3, r3
 8005464:	3b01      	subs	r3, #1
 8005466:	b29a      	uxth	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005470:	b29b      	uxth	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d14b      	bne.n	800550e <I2C_Slave_ISR_IT+0x1dc>
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800547c:	d047      	beq.n	800550e <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f000 fbf7 	bl	8005c72 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005484:	e043      	b.n	800550e <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	f003 0308 	and.w	r3, r3, #8
 800548c:	2b00      	cmp	r3, #0
 800548e:	d009      	beq.n	80054a4 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005496:	2b00      	cmp	r3, #0
 8005498:	d004      	beq.n	80054a4 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800549a:	6939      	ldr	r1, [r7, #16]
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f000 fb27 	bl	8005af0 <I2C_ITAddrCplt>
 80054a2:	e035      	b.n	8005510 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d030      	beq.n	8005510 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d02b      	beq.n	8005510 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054bc:	b29b      	uxth	r3, r3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d018      	beq.n	80054f4 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c6:	781a      	ldrb	r2, [r3, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d2:	1c5a      	adds	r2, r3, #1
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054dc:	b29b      	uxth	r3, r3
 80054de:	3b01      	subs	r3, #1
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ea:	3b01      	subs	r3, #1
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	851a      	strh	r2, [r3, #40]	; 0x28
 80054f2:	e00d      	b.n	8005510 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054fa:	d002      	beq.n	8005502 <I2C_Slave_ISR_IT+0x1d0>
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d106      	bne.n	8005510 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f000 fbb5 	bl	8005c72 <I2C_ITSlaveSeqCplt>
 8005508:	e002      	b.n	8005510 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 800550a:	bf00      	nop
 800550c:	e000      	b.n	8005510 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 800550e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3718      	adds	r7, #24
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b088      	sub	sp, #32
 8005526:	af02      	add	r7, sp, #8
 8005528:	60f8      	str	r0, [r7, #12]
 800552a:	60b9      	str	r1, [r7, #8]
 800552c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005534:	2b01      	cmp	r3, #1
 8005536:	d101      	bne.n	800553c <I2C_Master_ISR_DMA+0x1a>
 8005538:	2302      	movs	r3, #2
 800553a:	e0d9      	b.n	80056f0 <I2C_Master_ISR_DMA+0x1ce>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	f003 0310 	and.w	r3, r3, #16
 800554a:	2b00      	cmp	r3, #0
 800554c:	d016      	beq.n	800557c <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005554:	2b00      	cmp	r3, #0
 8005556:	d011      	beq.n	800557c <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2210      	movs	r2, #16
 800555e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005564:	f043 0204 	orr.w	r2, r3, #4
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800556c:	2120      	movs	r1, #32
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f000 ff96 	bl	80064a0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f000 ff1e 	bl	80063b6 <I2C_Flush_TXDR>
 800557a:	e0b4      	b.n	80056e6 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005582:	2b00      	cmp	r3, #0
 8005584:	d071      	beq.n	800566a <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800558c:	2b00      	cmp	r3, #0
 800558e:	d06c      	beq.n	800566a <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800559e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d04e      	beq.n	8005648 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055b6:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055bc:	b29b      	uxth	r3, r3
 80055be:	2bff      	cmp	r3, #255	; 0xff
 80055c0:	d906      	bls.n	80055d0 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	22ff      	movs	r2, #255	; 0xff
 80055c6:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80055c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80055cc:	617b      	str	r3, [r7, #20]
 80055ce:	e010      	b.n	80055f2 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055e2:	d003      	beq.n	80055ec <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e8:	617b      	str	r3, [r7, #20]
 80055ea:	e002      	b.n	80055f2 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80055ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055f0:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055f6:	b2da      	uxtb	r2, r3
 80055f8:	8a79      	ldrh	r1, [r7, #18]
 80055fa:	2300      	movs	r3, #0
 80055fc:	9300      	str	r3, [sp, #0]
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	f000 ff1b 	bl	800643c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800560a:	b29a      	uxth	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	b29a      	uxth	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800561e:	b2db      	uxtb	r3, r3
 8005620:	2b22      	cmp	r3, #34	; 0x22
 8005622:	d108      	bne.n	8005636 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005632:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005634:	e057      	b.n	80056e6 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005644:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005646:	e04e      	b.n	80056e6 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005652:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005656:	d003      	beq.n	8005660 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	f000 facd 	bl	8005bf8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800565e:	e042      	b.n	80056e6 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005660:	2140      	movs	r1, #64	; 0x40
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f000 fd90 	bl	8006188 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005668:	e03d      	b.n	80056e6 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005670:	2b00      	cmp	r3, #0
 8005672:	d028      	beq.n	80056c6 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800567a:	2b00      	cmp	r3, #0
 800567c:	d023      	beq.n	80056c6 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005682:	b29b      	uxth	r3, r3
 8005684:	2b00      	cmp	r3, #0
 8005686:	d119      	bne.n	80056bc <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005692:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005696:	d025      	beq.n	80056e4 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056a0:	d108      	bne.n	80056b4 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056b0:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80056b2:	e017      	b.n	80056e4 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	f000 fa9f 	bl	8005bf8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80056ba:	e013      	b.n	80056e4 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80056bc:	2140      	movs	r1, #64	; 0x40
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f000 fd62 	bl	8006188 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80056c4:	e00e      	b.n	80056e4 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	f003 0320 	and.w	r3, r3, #32
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00a      	beq.n	80056e6 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d005      	beq.n	80056e6 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80056da:	68b9      	ldr	r1, [r7, #8]
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f000 fb25 	bl	8005d2c <I2C_ITMasterCplt>
 80056e2:	e000      	b.n	80056e6 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80056e4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3718      	adds	r7, #24
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b088      	sub	sp, #32
 80056fc:	af02      	add	r7, sp, #8
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8005704:	4b8d      	ldr	r3, [pc, #564]	; (800593c <I2C_Mem_ISR_DMA+0x244>)
 8005706:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800570e:	2b01      	cmp	r3, #1
 8005710:	d101      	bne.n	8005716 <I2C_Mem_ISR_DMA+0x1e>
 8005712:	2302      	movs	r3, #2
 8005714:	e10e      	b.n	8005934 <I2C_Mem_ISR_DMA+0x23c>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	f003 0310 	and.w	r3, r3, #16
 8005724:	2b00      	cmp	r3, #0
 8005726:	d016      	beq.n	8005756 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800572e:	2b00      	cmp	r3, #0
 8005730:	d011      	beq.n	8005756 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2210      	movs	r2, #16
 8005738:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800573e:	f043 0204 	orr.w	r2, r3, #4
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005746:	2120      	movs	r1, #32
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f000 fea9 	bl	80064a0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f000 fe31 	bl	80063b6 <I2C_Flush_TXDR>
 8005754:	e0e9      	b.n	800592a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	f003 0302 	and.w	r3, r3, #2
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00e      	beq.n	800577e <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005766:	2b00      	cmp	r3, #0
 8005768:	d009      	beq.n	800577e <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005772:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f04f 32ff 	mov.w	r2, #4294967295
 800577a:	651a      	str	r2, [r3, #80]	; 0x50
 800577c:	e0d5      	b.n	800592a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005784:	2b00      	cmp	r3, #0
 8005786:	d05f      	beq.n	8005848 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800578e:	2b00      	cmp	r3, #0
 8005790:	d05a      	beq.n	8005848 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005792:	2101      	movs	r1, #1
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f000 ff07 	bl	80065a8 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800579a:	2110      	movs	r1, #16
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f000 fe7f 	bl	80064a0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d048      	beq.n	800583e <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	2bff      	cmp	r3, #255	; 0xff
 80057b4:	d910      	bls.n	80057d8 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	22ff      	movs	r2, #255	; 0xff
 80057ba:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057c0:	b299      	uxth	r1, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057c6:	b2da      	uxtb	r2, r3
 80057c8:	2300      	movs	r3, #0
 80057ca:	9300      	str	r3, [sp, #0]
 80057cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f000 fe33 	bl	800643c <I2C_TransferConfig>
 80057d6:	e011      	b.n	80057fc <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057dc:	b29a      	uxth	r2, r3
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057e6:	b299      	uxth	r1, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ec:	b2da      	uxtb	r2, r3
 80057ee:	2300      	movs	r3, #0
 80057f0:	9300      	str	r3, [sp, #0]
 80057f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f000 fe20 	bl	800643c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005800:	b29a      	uxth	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	b29a      	uxth	r2, r3
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b22      	cmp	r3, #34	; 0x22
 8005818:	d108      	bne.n	800582c <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005828:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800582a:	e07e      	b.n	800592a <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800583a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800583c:	e075      	b.n	800592a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800583e:	2140      	movs	r1, #64	; 0x40
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f000 fca1 	bl	8006188 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005846:	e070      	b.n	800592a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800584e:	2b00      	cmp	r3, #0
 8005850:	d05d      	beq.n	800590e <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005858:	2b00      	cmp	r3, #0
 800585a:	d058      	beq.n	800590e <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800585c:	2101      	movs	r1, #1
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	f000 fea2 	bl	80065a8 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005864:	2110      	movs	r1, #16
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f000 fe1a 	bl	80064a0 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005872:	b2db      	uxtb	r3, r3
 8005874:	2b22      	cmp	r3, #34	; 0x22
 8005876:	d101      	bne.n	800587c <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8005878:	4b31      	ldr	r3, [pc, #196]	; (8005940 <I2C_Mem_ISR_DMA+0x248>)
 800587a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005880:	b29b      	uxth	r3, r3
 8005882:	2bff      	cmp	r3, #255	; 0xff
 8005884:	d910      	bls.n	80058a8 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	22ff      	movs	r2, #255	; 0xff
 800588a:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005890:	b299      	uxth	r1, r3
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005896:	b2da      	uxtb	r2, r3
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	9300      	str	r3, [sp, #0]
 800589c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f000 fdcb 	bl	800643c <I2C_TransferConfig>
 80058a6:	e011      	b.n	80058cc <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ac:	b29a      	uxth	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058b6:	b299      	uxth	r1, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	f000 fdb8 	bl	800643c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	b29a      	uxth	r2, r3
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b22      	cmp	r3, #34	; 0x22
 80058e8:	d108      	bne.n	80058fc <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058f8:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80058fa:	e016      	b.n	800592a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800590a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800590c:	e00d      	b.n	800592a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	f003 0320 	and.w	r3, r3, #32
 8005914:	2b00      	cmp	r3, #0
 8005916:	d008      	beq.n	800592a <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800591e:	2b00      	cmp	r3, #0
 8005920:	d003      	beq.n	800592a <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005922:	68b9      	ldr	r1, [r7, #8]
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f000 fa01 	bl	8005d2c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3718      	adds	r7, #24
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	80002000 	.word	0x80002000
 8005940:	80002400 	.word	0x80002400

08005944 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b088      	sub	sp, #32
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005954:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8005956:	2300      	movs	r3, #0
 8005958:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005960:	2b01      	cmp	r3, #1
 8005962:	d101      	bne.n	8005968 <I2C_Slave_ISR_DMA+0x24>
 8005964:	2302      	movs	r3, #2
 8005966:	e0bf      	b.n	8005ae8 <I2C_Slave_ISR_DMA+0x1a4>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	f003 0320 	and.w	r3, r3, #32
 8005976:	2b00      	cmp	r3, #0
 8005978:	d008      	beq.n	800598c <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005980:	2b00      	cmp	r3, #0
 8005982:	d003      	beq.n	800598c <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005984:	68b9      	ldr	r1, [r7, #8]
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f000 fa98 	bl	8005ebc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	f003 0310 	and.w	r3, r3, #16
 8005992:	2b00      	cmp	r3, #0
 8005994:	f000 8095 	beq.w	8005ac2 <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800599e:	2b00      	cmp	r3, #0
 80059a0:	f000 808f 	beq.w	8005ac2 <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d104      	bne.n	80059b8 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d07d      	beq.n	8005ab4 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00c      	beq.n	80059da <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d007      	beq.n	80059da <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 80059d6:	2301      	movs	r3, #1
 80059d8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00c      	beq.n	80059fc <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d007      	beq.n	80059fc <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d101      	bne.n	80059fc <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 80059f8:	2301      	movs	r3, #1
 80059fa:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d128      	bne.n	8005a54 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b28      	cmp	r3, #40	; 0x28
 8005a0c:	d108      	bne.n	8005a20 <I2C_Slave_ISR_DMA+0xdc>
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a14:	d104      	bne.n	8005a20 <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8005a16:	68b9      	ldr	r1, [r7, #8]
 8005a18:	68f8      	ldr	r0, [r7, #12]
 8005a1a:	f000 fb61 	bl	80060e0 <I2C_ITListenCplt>
 8005a1e:	e048      	b.n	8005ab2 <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	2b29      	cmp	r3, #41	; 0x29
 8005a2a:	d10e      	bne.n	8005a4a <I2C_Slave_ISR_DMA+0x106>
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a32:	d00a      	beq.n	8005a4a <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2210      	movs	r2, #16
 8005a3a:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8005a3c:	68f8      	ldr	r0, [r7, #12]
 8005a3e:	f000 fcba 	bl	80063b6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f000 f915 	bl	8005c72 <I2C_ITSlaveSeqCplt>
 8005a48:	e033      	b.n	8005ab2 <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2210      	movs	r2, #16
 8005a50:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8005a52:	e034      	b.n	8005abe <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2210      	movs	r2, #16
 8005a5a:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a60:	f043 0204 	orr.w	r2, r3, #4
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a6e:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <I2C_Slave_ISR_DMA+0x13a>
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a7c:	d11f      	bne.n	8005abe <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005a7e:	7dfb      	ldrb	r3, [r7, #23]
 8005a80:	2b21      	cmp	r3, #33	; 0x21
 8005a82:	d002      	beq.n	8005a8a <I2C_Slave_ISR_DMA+0x146>
 8005a84:	7dfb      	ldrb	r3, [r7, #23]
 8005a86:	2b29      	cmp	r3, #41	; 0x29
 8005a88:	d103      	bne.n	8005a92 <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2221      	movs	r2, #33	; 0x21
 8005a8e:	631a      	str	r2, [r3, #48]	; 0x30
 8005a90:	e008      	b.n	8005aa4 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005a92:	7dfb      	ldrb	r3, [r7, #23]
 8005a94:	2b22      	cmp	r3, #34	; 0x22
 8005a96:	d002      	beq.n	8005a9e <I2C_Slave_ISR_DMA+0x15a>
 8005a98:	7dfb      	ldrb	r3, [r7, #23]
 8005a9a:	2b2a      	cmp	r3, #42	; 0x2a
 8005a9c:	d102      	bne.n	8005aa4 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2222      	movs	r2, #34	; 0x22
 8005aa2:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f000 fb6c 	bl	8006188 <I2C_ITError>
      if (treatdmanack == 1U)
 8005ab0:	e005      	b.n	8005abe <I2C_Slave_ISR_DMA+0x17a>
 8005ab2:	e004      	b.n	8005abe <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2210      	movs	r2, #16
 8005aba:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005abc:	e00f      	b.n	8005ade <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 8005abe:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005ac0:	e00d      	b.n	8005ade <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	f003 0308 	and.w	r3, r3, #8
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d008      	beq.n	8005ade <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d003      	beq.n	8005ade <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8005ad6:	68b9      	ldr	r1, [r7, #8]
 8005ad8:	68f8      	ldr	r0, [r7, #12]
 8005ada:	f000 f809 	bl	8005af0 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3720      	adds	r7, #32
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005b06:	2b28      	cmp	r3, #40	; 0x28
 8005b08:	d16a      	bne.n	8005be0 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	0c1b      	lsrs	r3, r3, #16
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	0c1b      	lsrs	r3, r3, #16
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005b28:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b36:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005b44:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d138      	bne.n	8005bc0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005b4e:	897b      	ldrh	r3, [r7, #10]
 8005b50:	09db      	lsrs	r3, r3, #7
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	89bb      	ldrh	r3, [r7, #12]
 8005b56:	4053      	eors	r3, r2
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	f003 0306 	and.w	r3, r3, #6
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d11c      	bne.n	8005b9c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005b62:	897b      	ldrh	r3, [r7, #10]
 8005b64:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b6a:	1c5a      	adds	r2, r3, #1
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d13b      	bne.n	8005bf0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2208      	movs	r2, #8
 8005b84:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005b8e:	89ba      	ldrh	r2, [r7, #12]
 8005b90:	7bfb      	ldrb	r3, [r7, #15]
 8005b92:	4619      	mov	r1, r3
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f7fd f90f 	bl	8002db8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005b9a:	e029      	b.n	8005bf0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005b9c:	893b      	ldrh	r3, [r7, #8]
 8005b9e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005ba0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 fcff 	bl	80065a8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005bb2:	89ba      	ldrh	r2, [r7, #12]
 8005bb4:	7bfb      	ldrb	r3, [r7, #15]
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f7fd f8fd 	bl	8002db8 <HAL_I2C_AddrCallback>
}
 8005bbe:	e017      	b.n	8005bf0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005bc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 fcef 	bl	80065a8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005bd2:	89ba      	ldrh	r2, [r7, #12]
 8005bd4:	7bfb      	ldrb	r3, [r7, #15]
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f7fd f8ed 	bl	8002db8 <HAL_I2C_AddrCallback>
}
 8005bde:	e007      	b.n	8005bf0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2208      	movs	r2, #8
 8005be6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8005bf0:	bf00      	nop
 8005bf2:	3710      	adds	r7, #16
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	2b21      	cmp	r3, #33	; 0x21
 8005c12:	d115      	bne.n	8005c40 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2220      	movs	r2, #32
 8005c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2211      	movs	r2, #17
 8005c20:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005c28:	2101      	movs	r1, #1
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 fcbc 	bl	80065a8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f7ff fb48 	bl	80052ce <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005c3e:	e014      	b.n	8005c6a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2220      	movs	r2, #32
 8005c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2212      	movs	r2, #18
 8005c4c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005c54:	2102      	movs	r1, #2
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 fca6 	bl	80065a8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7ff fb3c 	bl	80052e2 <HAL_I2C_MasterRxCpltCallback>
}
 8005c6a:	bf00      	nop
 8005c6c:	3708      	adds	r7, #8
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b084      	sub	sp, #16
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d008      	beq.n	8005ca6 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005ca2:	601a      	str	r2, [r3, #0]
 8005ca4:	e00c      	b.n	8005cc0 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d007      	beq.n	8005cc0 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005cbe:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	2b29      	cmp	r3, #41	; 0x29
 8005cca:	d112      	bne.n	8005cf2 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2228      	movs	r2, #40	; 0x28
 8005cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2221      	movs	r2, #33	; 0x21
 8005cd8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005cda:	2101      	movs	r1, #1
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 fc63 	bl	80065a8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f7ff fb03 	bl	80052f6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005cf0:	e017      	b.n	8005d22 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	2b2a      	cmp	r3, #42	; 0x2a
 8005cfc:	d111      	bne.n	8005d22 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2228      	movs	r2, #40	; 0x28
 8005d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2222      	movs	r2, #34	; 0x22
 8005d0a:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005d0c:	2102      	movs	r1, #2
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 fc4a 	bl	80065a8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f7fd f863 	bl	8002de8 <HAL_I2C_SlaveRxCpltCallback>
}
 8005d22:	bf00      	nop
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
	...

08005d2c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b086      	sub	sp, #24
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2220      	movs	r2, #32
 8005d40:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b21      	cmp	r3, #33	; 0x21
 8005d4c:	d107      	bne.n	8005d5e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005d4e:	2101      	movs	r1, #1
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 fc29 	bl	80065a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2211      	movs	r2, #17
 8005d5a:	631a      	str	r2, [r3, #48]	; 0x30
 8005d5c:	e00c      	b.n	8005d78 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b22      	cmp	r3, #34	; 0x22
 8005d68:	d106      	bne.n	8005d78 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005d6a:	2102      	movs	r1, #2
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 fc1b 	bl	80065a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2212      	movs	r2, #18
 8005d76:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6859      	ldr	r1, [r3, #4]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	4b4c      	ldr	r3, [pc, #304]	; (8005eb4 <I2C_ITMasterCplt+0x188>)
 8005d84:	400b      	ands	r3, r1
 8005d86:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a49      	ldr	r2, [pc, #292]	; (8005eb8 <I2C_ITMasterCplt+0x18c>)
 8005d92:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	f003 0310 	and.w	r3, r3, #16
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d009      	beq.n	8005db2 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2210      	movs	r2, #16
 8005da4:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005daa:	f043 0204 	orr.w	r2, r3, #4
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b60      	cmp	r3, #96	; 0x60
 8005dbc:	d10a      	bne.n	8005dd4 <I2C_ITMasterCplt+0xa8>
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f003 0304 	and.w	r3, r3, #4
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d005      	beq.n	8005dd4 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 faee 	bl	80063b6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dde:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	2b60      	cmp	r3, #96	; 0x60
 8005dea:	d002      	beq.n	8005df2 <I2C_ITMasterCplt+0xc6>
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d006      	beq.n	8005e00 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df6:	4619      	mov	r1, r3
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 f9c5 	bl	8006188 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005dfe:	e054      	b.n	8005eaa <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	2b21      	cmp	r3, #33	; 0x21
 8005e0a:	d124      	bne.n	8005e56 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2220      	movs	r2, #32
 8005e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	2b40      	cmp	r3, #64	; 0x40
 8005e24:	d10b      	bne.n	8005e3e <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7fc ffa0 	bl	8002d7c <HAL_I2C_MemTxCpltCallback>
}
 8005e3c:	e035      	b.n	8005eaa <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7ff fa3d 	bl	80052ce <HAL_I2C_MasterTxCpltCallback>
}
 8005e54:	e029      	b.n	8005eaa <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b22      	cmp	r3, #34	; 0x22
 8005e60:	d123      	bne.n	8005eaa <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2220      	movs	r2, #32
 8005e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	2b40      	cmp	r3, #64	; 0x40
 8005e7a:	d10b      	bne.n	8005e94 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f7fc ff65 	bl	8002d5c <HAL_I2C_MemRxCpltCallback>
}
 8005e92:	e00a      	b.n	8005eaa <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f7ff fa1c 	bl	80052e2 <HAL_I2C_MasterRxCpltCallback>
}
 8005eaa:	bf00      	nop
 8005eac:	3718      	adds	r7, #24
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	fe00e800 	.word	0xfe00e800
 8005eb8:	ffff0000 	.word	0xffff0000

08005ebc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ed8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2220      	movs	r2, #32
 8005ee0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005ee2:	7bfb      	ldrb	r3, [r7, #15]
 8005ee4:	2b21      	cmp	r3, #33	; 0x21
 8005ee6:	d002      	beq.n	8005eee <I2C_ITSlaveCplt+0x32>
 8005ee8:	7bfb      	ldrb	r3, [r7, #15]
 8005eea:	2b29      	cmp	r3, #41	; 0x29
 8005eec:	d108      	bne.n	8005f00 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005eee:	f248 0101 	movw	r1, #32769	; 0x8001
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 fb58 	bl	80065a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2221      	movs	r2, #33	; 0x21
 8005efc:	631a      	str	r2, [r3, #48]	; 0x30
 8005efe:	e019      	b.n	8005f34 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005f00:	7bfb      	ldrb	r3, [r7, #15]
 8005f02:	2b22      	cmp	r3, #34	; 0x22
 8005f04:	d002      	beq.n	8005f0c <I2C_ITSlaveCplt+0x50>
 8005f06:	7bfb      	ldrb	r3, [r7, #15]
 8005f08:	2b2a      	cmp	r3, #42	; 0x2a
 8005f0a:	d108      	bne.n	8005f1e <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005f0c:	f248 0102 	movw	r1, #32770	; 0x8002
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fb49 	bl	80065a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2222      	movs	r2, #34	; 0x22
 8005f1a:	631a      	str	r2, [r3, #48]	; 0x30
 8005f1c:	e00a      	b.n	8005f34 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8005f1e:	7bfb      	ldrb	r3, [r7, #15]
 8005f20:	2b28      	cmp	r3, #40	; 0x28
 8005f22:	d107      	bne.n	8005f34 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8005f24:	f248 0103 	movw	r1, #32771	; 0x8003
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 fb3d 	bl	80065a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	685a      	ldr	r2, [r3, #4]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f42:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	6859      	ldr	r1, [r3, #4]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	4b62      	ldr	r3, [pc, #392]	; (80060d8 <I2C_ITSlaveCplt+0x21c>)
 8005f50:	400b      	ands	r3, r1
 8005f52:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 fa2e 	bl	80063b6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d013      	beq.n	8005f8c <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005f72:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d01f      	beq.n	8005fbc <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f8a:	e017      	b.n	8005fbc <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d012      	beq.n	8005fbc <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005fa4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d006      	beq.n	8005fbc <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	f003 0304 	and.w	r3, r3, #4
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d020      	beq.n	8006008 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	f023 0304 	bic.w	r3, r3, #4
 8005fcc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd8:	b2d2      	uxtb	r2, r2
 8005fda:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe0:	1c5a      	adds	r2, r3, #1
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00c      	beq.n	8006008 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	3b01      	subs	r3, #1
 8006002:	b29a      	uxth	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800600c:	b29b      	uxth	r3, r3
 800600e:	2b00      	cmp	r3, #0
 8006010:	d005      	beq.n	800601e <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006016:	f043 0204 	orr.w	r2, r3, #4
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006030:	2b00      	cmp	r3, #0
 8006032:	d010      	beq.n	8006056 <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006038:	4619      	mov	r1, r3
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f8a4 	bl	8006188 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006046:	b2db      	uxtb	r3, r3
 8006048:	2b28      	cmp	r3, #40	; 0x28
 800604a:	d141      	bne.n	80060d0 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800604c:	6979      	ldr	r1, [r7, #20]
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f846 	bl	80060e0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006054:	e03c      	b.n	80060d0 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800605e:	d014      	beq.n	800608a <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f7ff fe06 	bl	8005c72 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a1c      	ldr	r2, [pc, #112]	; (80060dc <I2C_ITSlaveCplt+0x220>)
 800606a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2220      	movs	r2, #32
 8006070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7fc fe8a 	bl	8002d9c <HAL_I2C_ListenCpltCallback>
}
 8006088:	e022      	b.n	80060d0 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006090:	b2db      	uxtb	r3, r3
 8006092:	2b22      	cmp	r3, #34	; 0x22
 8006094:	d10e      	bne.n	80060b4 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2220      	movs	r2, #32
 800609a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f7fc fe9b 	bl	8002de8 <HAL_I2C_SlaveRxCpltCallback>
}
 80060b2:	e00d      	b.n	80060d0 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2220      	movs	r2, #32
 80060b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7ff f913 	bl	80052f6 <HAL_I2C_SlaveTxCpltCallback>
}
 80060d0:	bf00      	nop
 80060d2:	3718      	adds	r7, #24
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	fe00e800 	.word	0xfe00e800
 80060dc:	ffff0000 	.word	0xffff0000

080060e0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a25      	ldr	r2, [pc, #148]	; (8006184 <I2C_ITListenCplt+0xa4>)
 80060ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2220      	movs	r2, #32
 80060fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	f003 0304 	and.w	r3, r3, #4
 8006112:	2b00      	cmp	r3, #0
 8006114:	d022      	beq.n	800615c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006120:	b2d2      	uxtb	r2, r2
 8006122:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006128:	1c5a      	adds	r2, r3, #1
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006132:	2b00      	cmp	r3, #0
 8006134:	d012      	beq.n	800615c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800613a:	3b01      	subs	r3, #1
 800613c:	b29a      	uxth	r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006146:	b29b      	uxth	r3, r3
 8006148:	3b01      	subs	r3, #1
 800614a:	b29a      	uxth	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006154:	f043 0204 	orr.w	r2, r3, #4
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800615c:	f248 0103 	movw	r1, #32771	; 0x8003
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 fa21 	bl	80065a8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2210      	movs	r2, #16
 800616c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f7fc fe10 	bl	8002d9c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800617c:	bf00      	nop
 800617e:	3708      	adds	r7, #8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	ffff0000 	.word	0xffff0000

08006188 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006198:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a6d      	ldr	r2, [pc, #436]	; (800635c <I2C_ITError+0x1d4>)
 80061a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	431a      	orrs	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80061ba:	7bfb      	ldrb	r3, [r7, #15]
 80061bc:	2b28      	cmp	r3, #40	; 0x28
 80061be:	d005      	beq.n	80061cc <I2C_ITError+0x44>
 80061c0:	7bfb      	ldrb	r3, [r7, #15]
 80061c2:	2b29      	cmp	r3, #41	; 0x29
 80061c4:	d002      	beq.n	80061cc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80061c6:	7bfb      	ldrb	r3, [r7, #15]
 80061c8:	2b2a      	cmp	r3, #42	; 0x2a
 80061ca:	d10b      	bne.n	80061e4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80061cc:	2103      	movs	r1, #3
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f9ea 	bl	80065a8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2228      	movs	r2, #40	; 0x28
 80061d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a60      	ldr	r2, [pc, #384]	; (8006360 <I2C_ITError+0x1d8>)
 80061e0:	635a      	str	r2, [r3, #52]	; 0x34
 80061e2:	e030      	b.n	8006246 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80061e4:	f248 0103 	movw	r1, #32771	; 0x8003
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 f9dd 	bl	80065a8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 f8e1 	bl	80063b6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	2b60      	cmp	r3, #96	; 0x60
 80061fe:	d01f      	beq.n	8006240 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2220      	movs	r2, #32
 8006204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	f003 0320 	and.w	r3, r3, #32
 8006212:	2b20      	cmp	r3, #32
 8006214:	d114      	bne.n	8006240 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	f003 0310 	and.w	r3, r3, #16
 8006220:	2b10      	cmp	r3, #16
 8006222:	d109      	bne.n	8006238 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2210      	movs	r2, #16
 800622a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006230:	f043 0204 	orr.w	r2, r3, #4
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2220      	movs	r2, #32
 800623e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800624a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006250:	2b00      	cmp	r3, #0
 8006252:	d039      	beq.n	80062c8 <I2C_ITError+0x140>
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	2b11      	cmp	r3, #17
 8006258:	d002      	beq.n	8006260 <I2C_ITError+0xd8>
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	2b21      	cmp	r3, #33	; 0x21
 800625e:	d133      	bne.n	80062c8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800626a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800626e:	d107      	bne.n	8006280 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800627e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006284:	4618      	mov	r0, r3
 8006286:	f7fe fc6e 	bl	8004b66 <HAL_DMA_GetState>
 800628a:	4603      	mov	r3, r0
 800628c:	2b01      	cmp	r3, #1
 800628e:	d017      	beq.n	80062c0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006294:	4a33      	ldr	r2, [pc, #204]	; (8006364 <I2C_ITError+0x1dc>)
 8006296:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7fe fbff 	bl	8004aa8 <HAL_DMA_Abort_IT>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d04d      	beq.n	800634c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80062ba:	4610      	mov	r0, r2
 80062bc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80062be:	e045      	b.n	800634c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 f851 	bl	8006368 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80062c6:	e041      	b.n	800634c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d039      	beq.n	8006344 <I2C_ITError+0x1bc>
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	2b12      	cmp	r3, #18
 80062d4:	d002      	beq.n	80062dc <I2C_ITError+0x154>
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	2b22      	cmp	r3, #34	; 0x22
 80062da:	d133      	bne.n	8006344 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062ea:	d107      	bne.n	80062fc <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062fa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006300:	4618      	mov	r0, r3
 8006302:	f7fe fc30 	bl	8004b66 <HAL_DMA_GetState>
 8006306:	4603      	mov	r3, r0
 8006308:	2b01      	cmp	r3, #1
 800630a:	d017      	beq.n	800633c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006310:	4a14      	ldr	r2, [pc, #80]	; (8006364 <I2C_ITError+0x1dc>)
 8006312:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006320:	4618      	mov	r0, r3
 8006322:	f7fe fbc1 	bl	8004aa8 <HAL_DMA_Abort_IT>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d011      	beq.n	8006350 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006336:	4610      	mov	r0, r2
 8006338:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800633a:	e009      	b.n	8006350 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 f813 	bl	8006368 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006342:	e005      	b.n	8006350 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 f80f 	bl	8006368 <I2C_TreatErrorCallback>
  }
}
 800634a:	e002      	b.n	8006352 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800634c:	bf00      	nop
 800634e:	e000      	b.n	8006352 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006350:	bf00      	nop
}
 8006352:	bf00      	nop
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	ffff0000 	.word	0xffff0000
 8006360:	08005333 	.word	0x08005333
 8006364:	080063ff 	.word	0x080063ff

08006368 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006376:	b2db      	uxtb	r3, r3
 8006378:	2b60      	cmp	r3, #96	; 0x60
 800637a:	d10e      	bne.n	800639a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2220      	movs	r2, #32
 8006380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f7fe ffc3 	bl	800531e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006398:	e009      	b.n	80063ae <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f7fe ffae 	bl	800530a <HAL_I2C_ErrorCallback>
}
 80063ae:	bf00      	nop
 80063b0:	3708      	adds	r7, #8
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80063b6:	b480      	push	{r7}
 80063b8:	b083      	sub	sp, #12
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	699b      	ldr	r3, [r3, #24]
 80063c4:	f003 0302 	and.w	r3, r3, #2
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d103      	bne.n	80063d4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2200      	movs	r2, #0
 80063d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	f003 0301 	and.w	r3, r3, #1
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d007      	beq.n	80063f2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	699a      	ldr	r2, [r3, #24]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f042 0201 	orr.w	r2, r2, #1
 80063f0:	619a      	str	r2, [r3, #24]
  }
}
 80063f2:	bf00      	nop
 80063f4:	370c      	adds	r7, #12
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b084      	sub	sp, #16
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006410:	2b00      	cmp	r3, #0
 8006412:	d003      	beq.n	800641c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006418:	2200      	movs	r2, #0
 800641a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006420:	2b00      	cmp	r3, #0
 8006422:	d003      	beq.n	800642c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006428:	2200      	movs	r2, #0
 800642a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f7ff ff9b 	bl	8006368 <I2C_TreatErrorCallback>
}
 8006432:	bf00      	nop
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
	...

0800643c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800643c:	b480      	push	{r7}
 800643e:	b087      	sub	sp, #28
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	607b      	str	r3, [r7, #4]
 8006446:	460b      	mov	r3, r1
 8006448:	817b      	strh	r3, [r7, #10]
 800644a:	4613      	mov	r3, r2
 800644c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800644e:	897b      	ldrh	r3, [r7, #10]
 8006450:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006454:	7a7b      	ldrb	r3, [r7, #9]
 8006456:	041b      	lsls	r3, r3, #16
 8006458:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800645c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006462:	6a3b      	ldr	r3, [r7, #32]
 8006464:	4313      	orrs	r3, r2
 8006466:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800646a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685a      	ldr	r2, [r3, #4]
 8006472:	6a3b      	ldr	r3, [r7, #32]
 8006474:	0d5b      	lsrs	r3, r3, #21
 8006476:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800647a:	4b08      	ldr	r3, [pc, #32]	; (800649c <I2C_TransferConfig+0x60>)
 800647c:	430b      	orrs	r3, r1
 800647e:	43db      	mvns	r3, r3
 8006480:	ea02 0103 	and.w	r1, r2, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	697a      	ldr	r2, [r7, #20]
 800648a:	430a      	orrs	r2, r1
 800648c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800648e:	bf00      	nop
 8006490:	371c      	adds	r7, #28
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	03ff63ff 	.word	0x03ff63ff

080064a0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	460b      	mov	r3, r1
 80064aa:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80064ac:	2300      	movs	r3, #0
 80064ae:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064b4:	4a39      	ldr	r2, [pc, #228]	; (800659c <I2C_Enable_IRQ+0xfc>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d032      	beq.n	8006520 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80064be:	4a38      	ldr	r2, [pc, #224]	; (80065a0 <I2C_Enable_IRQ+0x100>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d02d      	beq.n	8006520 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80064c8:	4a36      	ldr	r2, [pc, #216]	; (80065a4 <I2C_Enable_IRQ+0x104>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d028      	beq.n	8006520 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80064ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	da03      	bge.n	80064de <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80064dc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80064de:	887b      	ldrh	r3, [r7, #2]
 80064e0:	f003 0301 	and.w	r3, r3, #1
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d003      	beq.n	80064f0 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80064ee:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80064f0:	887b      	ldrh	r3, [r7, #2]
 80064f2:	f003 0302 	and.w	r3, r3, #2
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d003      	beq.n	8006502 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8006500:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006502:	887b      	ldrh	r3, [r7, #2]
 8006504:	2b10      	cmp	r3, #16
 8006506:	d103      	bne.n	8006510 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800650e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006510:	887b      	ldrh	r3, [r7, #2]
 8006512:	2b20      	cmp	r3, #32
 8006514:	d133      	bne.n	800657e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f043 0320 	orr.w	r3, r3, #32
 800651c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800651e:	e02e      	b.n	800657e <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006520:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006524:	2b00      	cmp	r3, #0
 8006526:	da03      	bge.n	8006530 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800652e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006530:	887b      	ldrh	r3, [r7, #2]
 8006532:	f003 0301 	and.w	r3, r3, #1
 8006536:	2b00      	cmp	r3, #0
 8006538:	d003      	beq.n	8006542 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8006540:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006542:	887b      	ldrh	r3, [r7, #2]
 8006544:	f003 0302 	and.w	r3, r3, #2
 8006548:	2b00      	cmp	r3, #0
 800654a:	d003      	beq.n	8006554 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8006552:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006554:	887b      	ldrh	r3, [r7, #2]
 8006556:	2b10      	cmp	r3, #16
 8006558:	d103      	bne.n	8006562 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006560:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006562:	887b      	ldrh	r3, [r7, #2]
 8006564:	2b20      	cmp	r3, #32
 8006566:	d103      	bne.n	8006570 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800656e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006570:	887b      	ldrh	r3, [r7, #2]
 8006572:	2b40      	cmp	r3, #64	; 0x40
 8006574:	d103      	bne.n	800657e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800657c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	6819      	ldr	r1, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	430a      	orrs	r2, r1
 800658c:	601a      	str	r2, [r3, #0]
}
 800658e:	bf00      	nop
 8006590:	3714      	adds	r7, #20
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	08005523 	.word	0x08005523
 80065a0:	08005945 	.word	0x08005945
 80065a4:	080056f9 	.word	0x080056f9

080065a8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	460b      	mov	r3, r1
 80065b2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80065b4:	2300      	movs	r3, #0
 80065b6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80065b8:	887b      	ldrh	r3, [r7, #2]
 80065ba:	f003 0301 	and.w	r3, r3, #1
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00f      	beq.n	80065e2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80065c8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80065d6:	2b28      	cmp	r3, #40	; 0x28
 80065d8:	d003      	beq.n	80065e2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80065e0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80065e2:	887b      	ldrh	r3, [r7, #2]
 80065e4:	f003 0302 	and.w	r3, r3, #2
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00f      	beq.n	800660c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80065f2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006600:	2b28      	cmp	r3, #40	; 0x28
 8006602:	d003      	beq.n	800660c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800660a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800660c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006610:	2b00      	cmp	r3, #0
 8006612:	da03      	bge.n	800661c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800661a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800661c:	887b      	ldrh	r3, [r7, #2]
 800661e:	2b10      	cmp	r3, #16
 8006620:	d103      	bne.n	800662a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006628:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800662a:	887b      	ldrh	r3, [r7, #2]
 800662c:	2b20      	cmp	r3, #32
 800662e:	d103      	bne.n	8006638 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f043 0320 	orr.w	r3, r3, #32
 8006636:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006638:	887b      	ldrh	r3, [r7, #2]
 800663a:	2b40      	cmp	r3, #64	; 0x40
 800663c:	d103      	bne.n	8006646 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006644:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	6819      	ldr	r1, [r3, #0]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	43da      	mvns	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	400a      	ands	r2, r1
 8006656:	601a      	str	r2, [r3, #0]
}
 8006658:	bf00      	nop
 800665a:	3714      	adds	r7, #20
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b20      	cmp	r3, #32
 8006678:	d138      	bne.n	80066ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006680:	2b01      	cmp	r3, #1
 8006682:	d101      	bne.n	8006688 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006684:	2302      	movs	r3, #2
 8006686:	e032      	b.n	80066ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2224      	movs	r2, #36	; 0x24
 8006694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f022 0201 	bic.w	r2, r2, #1
 80066a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80066b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	6819      	ldr	r1, [r3, #0]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	430a      	orrs	r2, r1
 80066c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f042 0201 	orr.w	r2, r2, #1
 80066d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2220      	movs	r2, #32
 80066dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80066e8:	2300      	movs	r3, #0
 80066ea:	e000      	b.n	80066ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80066ec:	2302      	movs	r3, #2
  }
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80066fa:	b480      	push	{r7}
 80066fc:	b085      	sub	sp, #20
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
 8006702:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800670a:	b2db      	uxtb	r3, r3
 800670c:	2b20      	cmp	r3, #32
 800670e:	d139      	bne.n	8006784 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006716:	2b01      	cmp	r3, #1
 8006718:	d101      	bne.n	800671e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800671a:	2302      	movs	r3, #2
 800671c:	e033      	b.n	8006786 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2224      	movs	r2, #36	; 0x24
 800672a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f022 0201 	bic.w	r2, r2, #1
 800673c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800674c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	021b      	lsls	r3, r3, #8
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	4313      	orrs	r3, r2
 8006756:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f042 0201 	orr.w	r2, r2, #1
 800676e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2220      	movs	r2, #32
 8006774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006780:	2300      	movs	r3, #0
 8006782:	e000      	b.n	8006786 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006784:	2302      	movs	r3, #2
  }
}
 8006786:	4618      	mov	r0, r3
 8006788:	3714      	adds	r7, #20
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
	...

08006794 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b086      	sub	sp, #24
 8006798:	af02      	add	r7, sp, #8
 800679a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800679c:	2300      	movs	r3, #0
 800679e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80067a0:	f7fd f84a 	bl	8003838 <HAL_GetTick>
 80067a4:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d102      	bne.n	80067b2 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	73fb      	strb	r3, [r7, #15]
 80067b0:	e092      	b.n	80068d8 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067bc:	2b00      	cmp	r3, #0
 80067be:	f040 808b 	bne.w	80068d8 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f7fc fcc2 	bl	800314c <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80067c8:	f241 3188 	movw	r1, #5000	; 0x1388
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 f88b 	bl	80068e8 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	689a      	ldr	r2, [r3, #8]
 80067d8:	4b42      	ldr	r3, [pc, #264]	; (80068e4 <HAL_OSPI_Init+0x150>)
 80067da:	4013      	ands	r3, r2
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	68d1      	ldr	r1, [r2, #12]
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	6912      	ldr	r2, [r2, #16]
 80067e4:	3a01      	subs	r2, #1
 80067e6:	0412      	lsls	r2, r2, #16
 80067e8:	4311      	orrs	r1, r2
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	6952      	ldr	r2, [r2, #20]
 80067ee:	3a01      	subs	r2, #1
 80067f0:	0212      	lsls	r2, r2, #8
 80067f2:	4311      	orrs	r1, r2
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80067f8:	4311      	orrs	r1, r2
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	69d2      	ldr	r2, [r2, #28]
 80067fe:	4311      	orrs	r1, r2
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	6812      	ldr	r2, [r2, #0]
 8006804:	430b      	orrs	r3, r1
 8006806:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	0412      	lsls	r2, r2, #16
 8006812:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	3b01      	subs	r3, #1
 8006824:	021a      	lsls	r2, r3, #8
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	430a      	orrs	r2, r1
 800682c:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006832:	9300      	str	r3, [sp, #0]
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	2200      	movs	r2, #0
 8006838:	2120      	movs	r1, #32
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 fb98 	bl	8006f70 <OSPI_WaitFlagStateUntilTimeout>
 8006840:	4603      	mov	r3, r0
 8006842:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006844:	7bfb      	ldrb	r3, [r7, #15]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d146      	bne.n	80068d8 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a1b      	ldr	r3, [r3, #32]
 8006858:	1e5a      	subs	r2, r3, #1
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	430a      	orrs	r2, r1
 8006860:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	689a      	ldr	r2, [r3, #8]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	430a      	orrs	r2, r1
 8006876:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006880:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688c:	431a      	orrs	r2, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	430a      	orrs	r2, r1
 8006894:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f042 0201 	orr.w	r2, r2, #1
 80068a6:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d107      	bne.n	80068c0 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	689a      	ldr	r2, [r3, #8]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f042 0202 	orr.w	r2, r2, #2
 80068be:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068c8:	d103      	bne.n	80068d2 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	645a      	str	r2, [r3, #68]	; 0x44
 80068d0:	e002      	b.n	80068d8 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2202      	movs	r2, #2
 80068d6:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 80068d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	f8e0f8f4 	.word	0xf8e0f8f4

080068e8 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	683a      	ldr	r2, [r7, #0]
 80068f6:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	370c      	adds	r7, #12
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
	...

08006908 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b092      	sub	sp, #72	; 0x48
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006914:	2300      	movs	r3, #0
 8006916:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800691a:	2300      	movs	r3, #0
 800691c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a08      	ldr	r2, [pc, #32]	; (8006948 <HAL_OSPIM_Config+0x40>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d105      	bne.n	8006936 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800692a:	2300      	movs	r3, #0
 800692c:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 800692e:	2301      	movs	r3, #1
 8006930:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8006934:	e004      	b.n	8006940 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8006936:	2301      	movs	r3, #1
 8006938:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 800693a:	2300      	movs	r3, #0
 800693c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8006940:	2300      	movs	r3, #0
 8006942:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006946:	e01f      	b.n	8006988 <HAL_OSPIM_Config+0x80>
 8006948:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 800694c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006950:	3301      	adds	r3, #1
 8006952:	b2d8      	uxtb	r0, r3
 8006954:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006958:	f107 0114 	add.w	r1, r7, #20
 800695c:	4613      	mov	r3, r2
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	4413      	add	r3, r2
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	440b      	add	r3, r1
 8006966:	4619      	mov	r1, r3
 8006968:	f000 fb3a 	bl	8006fe0 <OSPIM_GetConfig>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d005      	beq.n	800697e <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2208      	movs	r2, #8
 800697c:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800697e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006982:	3301      	adds	r3, #1
 8006984:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006988:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800698c:	2b01      	cmp	r3, #1
 800698e:	d9dd      	bls.n	800694c <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8006990:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006994:	2b00      	cmp	r3, #0
 8006996:	f040 82de 	bne.w	8006f56 <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800699a:	4bc6      	ldr	r3, [pc, #792]	; (8006cb4 <HAL_OSPIM_Config+0x3ac>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00b      	beq.n	80069be <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80069a6:	4bc3      	ldr	r3, [pc, #780]	; (8006cb4 <HAL_OSPIM_Config+0x3ac>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4ac2      	ldr	r2, [pc, #776]	; (8006cb4 <HAL_OSPIM_Config+0x3ac>)
 80069ac:	f023 0301 	bic.w	r3, r3, #1
 80069b0:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80069b2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80069b6:	f043 0301 	orr.w	r3, r3, #1
 80069ba:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80069be:	4bbe      	ldr	r3, [pc, #760]	; (8006cb8 <HAL_OSPIM_Config+0x3b0>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00b      	beq.n	80069e2 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80069ca:	4bbb      	ldr	r3, [pc, #748]	; (8006cb8 <HAL_OSPIM_Config+0x3b0>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4aba      	ldr	r2, [pc, #744]	; (8006cb8 <HAL_OSPIM_Config+0x3b0>)
 80069d0:	f023 0301 	bic.w	r3, r3, #1
 80069d4:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80069d6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80069da:	f043 0302 	orr.w	r3, r3, #2
 80069de:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80069e2:	49b6      	ldr	r1, [pc, #728]	; (8006cbc <HAL_OSPIM_Config+0x3b4>)
 80069e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069e6:	4613      	mov	r3, r2
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	4413      	add	r3, r2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	3348      	adds	r3, #72	; 0x48
 80069f0:	443b      	add	r3, r7
 80069f2:	3b2c      	subs	r3, #44	; 0x2c
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	3b01      	subs	r3, #1
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	440b      	add	r3, r1
 80069fc:	6859      	ldr	r1, [r3, #4]
 80069fe:	48af      	ldr	r0, [pc, #700]	; (8006cbc <HAL_OSPIM_Config+0x3b4>)
 8006a00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a02:	4613      	mov	r3, r2
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	4413      	add	r3, r2
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	3348      	adds	r3, #72	; 0x48
 8006a0c:	443b      	add	r3, r7
 8006a0e:	3b2c      	subs	r3, #44	; 0x2c
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	3b01      	subs	r3, #1
 8006a14:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4403      	add	r3, r0
 8006a1c:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8006a1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a20:	4613      	mov	r3, r2
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	4413      	add	r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	3348      	adds	r3, #72	; 0x48
 8006a2a:	443b      	add	r3, r7
 8006a2c:	3b34      	subs	r3, #52	; 0x34
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f000 80a1 	beq.w	8006b78 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8006a36:	49a1      	ldr	r1, [pc, #644]	; (8006cbc <HAL_OSPIM_Config+0x3b4>)
 8006a38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	4413      	add	r3, r2
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	3348      	adds	r3, #72	; 0x48
 8006a44:	443b      	add	r3, r7
 8006a46:	3b34      	subs	r3, #52	; 0x34
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	440b      	add	r3, r1
 8006a50:	6859      	ldr	r1, [r3, #4]
 8006a52:	489a      	ldr	r0, [pc, #616]	; (8006cbc <HAL_OSPIM_Config+0x3b4>)
 8006a54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a56:	4613      	mov	r3, r2
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	4413      	add	r3, r2
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	3348      	adds	r3, #72	; 0x48
 8006a60:	443b      	add	r3, r7
 8006a62:	3b34      	subs	r3, #52	; 0x34
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	3b01      	subs	r3, #1
 8006a68:	f021 0201 	bic.w	r2, r1, #1
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	4403      	add	r3, r0
 8006a70:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8006a72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a74:	4613      	mov	r3, r2
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4413      	add	r3, r2
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	3348      	adds	r3, #72	; 0x48
 8006a7e:	443b      	add	r3, r7
 8006a80:	3b30      	subs	r3, #48	; 0x30
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d01d      	beq.n	8006ac4 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8006a88:	498c      	ldr	r1, [pc, #560]	; (8006cbc <HAL_OSPIM_Config+0x3b4>)
 8006a8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	4413      	add	r3, r2
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	3348      	adds	r3, #72	; 0x48
 8006a96:	443b      	add	r3, r7
 8006a98:	3b30      	subs	r3, #48	; 0x30
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	3b01      	subs	r3, #1
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	440b      	add	r3, r1
 8006aa2:	6859      	ldr	r1, [r3, #4]
 8006aa4:	4885      	ldr	r0, [pc, #532]	; (8006cbc <HAL_OSPIM_Config+0x3b4>)
 8006aa6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	4413      	add	r3, r2
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	3348      	adds	r3, #72	; 0x48
 8006ab2:	443b      	add	r3, r7
 8006ab4:	3b30      	subs	r3, #48	; 0x30
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	f021 0210 	bic.w	r2, r1, #16
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4403      	add	r3, r0
 8006ac2:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006ac4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	4413      	add	r3, r2
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	3348      	adds	r3, #72	; 0x48
 8006ad0:	443b      	add	r3, r7
 8006ad2:	3b28      	subs	r3, #40	; 0x28
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d021      	beq.n	8006b1e <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8006ada:	4978      	ldr	r1, [pc, #480]	; (8006cbc <HAL_OSPIM_Config+0x3b4>)
 8006adc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ade:	4613      	mov	r3, r2
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	4413      	add	r3, r2
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	3348      	adds	r3, #72	; 0x48
 8006ae8:	443b      	add	r3, r7
 8006aea:	3b28      	subs	r3, #40	; 0x28
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	3b01      	subs	r3, #1
 8006af0:	f003 0301 	and.w	r3, r3, #1
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	440b      	add	r3, r1
 8006af8:	6859      	ldr	r1, [r3, #4]
 8006afa:	4870      	ldr	r0, [pc, #448]	; (8006cbc <HAL_OSPIM_Config+0x3b4>)
 8006afc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006afe:	4613      	mov	r3, r2
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	4413      	add	r3, r2
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	3348      	adds	r3, #72	; 0x48
 8006b08:	443b      	add	r3, r7
 8006b0a:	3b28      	subs	r3, #40	; 0x28
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	f003 0301 	and.w	r3, r3, #1
 8006b14:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	4403      	add	r3, r0
 8006b1c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006b1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b20:	4613      	mov	r3, r2
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	4413      	add	r3, r2
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	3348      	adds	r3, #72	; 0x48
 8006b2a:	443b      	add	r3, r7
 8006b2c:	3b24      	subs	r3, #36	; 0x24
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d021      	beq.n	8006b78 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8006b34:	4961      	ldr	r1, [pc, #388]	; (8006cbc <HAL_OSPIM_Config+0x3b4>)
 8006b36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b38:	4613      	mov	r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	4413      	add	r3, r2
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	3348      	adds	r3, #72	; 0x48
 8006b42:	443b      	add	r3, r7
 8006b44:	3b24      	subs	r3, #36	; 0x24
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	f003 0301 	and.w	r3, r3, #1
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	440b      	add	r3, r1
 8006b52:	6859      	ldr	r1, [r3, #4]
 8006b54:	4859      	ldr	r0, [pc, #356]	; (8006cbc <HAL_OSPIM_Config+0x3b4>)
 8006b56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b58:	4613      	mov	r3, r2
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	4413      	add	r3, r2
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	3348      	adds	r3, #72	; 0x48
 8006b62:	443b      	add	r3, r7
 8006b64:	3b24      	subs	r3, #36	; 0x24
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	f003 0301 	and.w	r3, r3, #1
 8006b6e:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4403      	add	r3, r0
 8006b76:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	6819      	ldr	r1, [r3, #0]
 8006b7c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006b80:	4613      	mov	r3, r2
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	4413      	add	r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	3348      	adds	r3, #72	; 0x48
 8006b8a:	443b      	add	r3, r7
 8006b8c:	3b34      	subs	r3, #52	; 0x34
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4299      	cmp	r1, r3
 8006b92:	d038      	beq.n	8006c06 <HAL_OSPIM_Config+0x2fe>
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	6859      	ldr	r1, [r3, #4]
 8006b98:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	4413      	add	r3, r2
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	3348      	adds	r3, #72	; 0x48
 8006ba6:	443b      	add	r3, r7
 8006ba8:	3b30      	subs	r3, #48	; 0x30
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4299      	cmp	r1, r3
 8006bae:	d02a      	beq.n	8006c06 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	6899      	ldr	r1, [r3, #8]
 8006bb4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006bb8:	4613      	mov	r3, r2
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	4413      	add	r3, r2
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	3348      	adds	r3, #72	; 0x48
 8006bc2:	443b      	add	r3, r7
 8006bc4:	3b2c      	subs	r3, #44	; 0x2c
 8006bc6:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8006bc8:	4299      	cmp	r1, r3
 8006bca:	d01c      	beq.n	8006c06 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	68d9      	ldr	r1, [r3, #12]
 8006bd0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	4413      	add	r3, r2
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	3348      	adds	r3, #72	; 0x48
 8006bde:	443b      	add	r3, r7
 8006be0:	3b28      	subs	r3, #40	; 0x28
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4299      	cmp	r1, r3
 8006be6:	d00e      	beq.n	8006c06 <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	6919      	ldr	r1, [r3, #16]
 8006bec:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	4413      	add	r3, r2
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	3348      	adds	r3, #72	; 0x48
 8006bfa:	443b      	add	r3, r7
 8006bfc:	3b24      	subs	r3, #36	; 0x24
 8006bfe:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006c00:	4299      	cmp	r1, r3
 8006c02:	f040 80d3 	bne.w	8006dac <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8006c06:	492d      	ldr	r1, [pc, #180]	; (8006cbc <HAL_OSPIM_Config+0x3b4>)
 8006c08:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4413      	add	r3, r2
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	3348      	adds	r3, #72	; 0x48
 8006c16:	443b      	add	r3, r7
 8006c18:	3b34      	subs	r3, #52	; 0x34
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	440b      	add	r3, r1
 8006c22:	6859      	ldr	r1, [r3, #4]
 8006c24:	4825      	ldr	r0, [pc, #148]	; (8006cbc <HAL_OSPIM_Config+0x3b4>)
 8006c26:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	4413      	add	r3, r2
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	3348      	adds	r3, #72	; 0x48
 8006c34:	443b      	add	r3, r7
 8006c36:	3b34      	subs	r3, #52	; 0x34
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	f021 0201 	bic.w	r2, r1, #1
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	4403      	add	r3, r0
 8006c44:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8006c46:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	4413      	add	r3, r2
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	3348      	adds	r3, #72	; 0x48
 8006c54:	443b      	add	r3, r7
 8006c56:	3b30      	subs	r3, #48	; 0x30
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d01f      	beq.n	8006c9e <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8006c5e:	4917      	ldr	r1, [pc, #92]	; (8006cbc <HAL_OSPIM_Config+0x3b4>)
 8006c60:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006c64:	4613      	mov	r3, r2
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	4413      	add	r3, r2
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	3348      	adds	r3, #72	; 0x48
 8006c6e:	443b      	add	r3, r7
 8006c70:	3b30      	subs	r3, #48	; 0x30
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	3b01      	subs	r3, #1
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	440b      	add	r3, r1
 8006c7a:	6859      	ldr	r1, [r3, #4]
 8006c7c:	480f      	ldr	r0, [pc, #60]	; (8006cbc <HAL_OSPIM_Config+0x3b4>)
 8006c7e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006c82:	4613      	mov	r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4413      	add	r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	3348      	adds	r3, #72	; 0x48
 8006c8c:	443b      	add	r3, r7
 8006c8e:	3b30      	subs	r3, #48	; 0x30
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	3b01      	subs	r3, #1
 8006c94:	f021 0210 	bic.w	r2, r1, #16
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4403      	add	r3, r0
 8006c9c:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8006c9e:	4907      	ldr	r1, [pc, #28]	; (8006cbc <HAL_OSPIM_Config+0x3b4>)
 8006ca0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	4413      	add	r3, r2
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	3348      	adds	r3, #72	; 0x48
 8006cae:	443b      	add	r3, r7
 8006cb0:	3b2c      	subs	r3, #44	; 0x2c
 8006cb2:	e005      	b.n	8006cc0 <HAL_OSPIM_Config+0x3b8>
 8006cb4:	a0001000 	.word	0xa0001000
 8006cb8:	a0001400 	.word	0xa0001400
 8006cbc:	50061c00 	.word	0x50061c00
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	3b01      	subs	r3, #1
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	440b      	add	r3, r1
 8006cc8:	6859      	ldr	r1, [r3, #4]
 8006cca:	48a6      	ldr	r0, [pc, #664]	; (8006f64 <HAL_OSPIM_Config+0x65c>)
 8006ccc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4413      	add	r3, r2
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	3348      	adds	r3, #72	; 0x48
 8006cda:	443b      	add	r3, r7
 8006cdc:	3b2c      	subs	r3, #44	; 0x2c
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	3b01      	subs	r3, #1
 8006ce2:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	4403      	add	r3, r0
 8006cea:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006cec:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	4413      	add	r3, r2
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	3348      	adds	r3, #72	; 0x48
 8006cfa:	443b      	add	r3, r7
 8006cfc:	3b28      	subs	r3, #40	; 0x28
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d023      	beq.n	8006d4c <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006d04:	4997      	ldr	r1, [pc, #604]	; (8006f64 <HAL_OSPIM_Config+0x65c>)
 8006d06:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4413      	add	r3, r2
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	3348      	adds	r3, #72	; 0x48
 8006d14:	443b      	add	r3, r7
 8006d16:	3b28      	subs	r3, #40	; 0x28
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	f003 0301 	and.w	r3, r3, #1
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	440b      	add	r3, r1
 8006d24:	6859      	ldr	r1, [r3, #4]
 8006d26:	488f      	ldr	r0, [pc, #572]	; (8006f64 <HAL_OSPIM_Config+0x65c>)
 8006d28:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4413      	add	r3, r2
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	3348      	adds	r3, #72	; 0x48
 8006d36:	443b      	add	r3, r7
 8006d38:	3b28      	subs	r3, #40	; 0x28
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	3b01      	subs	r3, #1
 8006d3e:	f003 0301 	and.w	r3, r3, #1
 8006d42:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	4403      	add	r3, r0
 8006d4a:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006d4c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006d50:	4613      	mov	r3, r2
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4413      	add	r3, r2
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	3348      	adds	r3, #72	; 0x48
 8006d5a:	443b      	add	r3, r7
 8006d5c:	3b24      	subs	r3, #36	; 0x24
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d023      	beq.n	8006dac <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006d64:	497f      	ldr	r1, [pc, #508]	; (8006f64 <HAL_OSPIM_Config+0x65c>)
 8006d66:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	4413      	add	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	3348      	adds	r3, #72	; 0x48
 8006d74:	443b      	add	r3, r7
 8006d76:	3b24      	subs	r3, #36	; 0x24
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	f003 0301 	and.w	r3, r3, #1
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	440b      	add	r3, r1
 8006d84:	6859      	ldr	r1, [r3, #4]
 8006d86:	4877      	ldr	r0, [pc, #476]	; (8006f64 <HAL_OSPIM_Config+0x65c>)
 8006d88:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	4413      	add	r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	3348      	adds	r3, #72	; 0x48
 8006d96:	443b      	add	r3, r7
 8006d98:	3b24      	subs	r3, #36	; 0x24
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	f003 0301 	and.w	r3, r3, #1
 8006da2:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	4403      	add	r3, r0
 8006daa:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8006dac:	4a6d      	ldr	r2, [pc, #436]	; (8006f64 <HAL_OSPIM_Config+0x65c>)
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	3b01      	subs	r3, #1
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	4413      	add	r3, r2
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006dbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dc0:	025b      	lsls	r3, r3, #9
 8006dc2:	431a      	orrs	r2, r3
 8006dc4:	4967      	ldr	r1, [pc, #412]	; (8006f64 <HAL_OSPIM_Config+0x65c>)
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	440b      	add	r3, r1
 8006dd4:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8006dd6:	4a63      	ldr	r2, [pc, #396]	; (8006f64 <HAL_OSPIM_Config+0x65c>)
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	4413      	add	r3, r2
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	f023 0203 	bic.w	r2, r3, #3
 8006de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dea:	005b      	lsls	r3, r3, #1
 8006dec:	431a      	orrs	r2, r3
 8006dee:	495d      	ldr	r1, [pc, #372]	; (8006f64 <HAL_OSPIM_Config+0x65c>)
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	3b01      	subs	r3, #1
 8006df6:	f042 0201 	orr.w	r2, r2, #1
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	440b      	add	r3, r1
 8006dfe:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d014      	beq.n	8006e32 <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8006e08:	4a56      	ldr	r2, [pc, #344]	; (8006f64 <HAL_OSPIM_Config+0x65c>)
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	3b01      	subs	r3, #1
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	4413      	add	r3, r2
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006e1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e1c:	015b      	lsls	r3, r3, #5
 8006e1e:	431a      	orrs	r2, r3
 8006e20:	4950      	ldr	r1, [pc, #320]	; (8006f64 <HAL_OSPIM_Config+0x65c>)
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	3b01      	subs	r3, #1
 8006e28:	f042 0210 	orr.w	r2, r2, #16
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	440b      	add	r3, r1
 8006e30:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d019      	beq.n	8006e72 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006e3e:	4a49      	ldr	r2, [pc, #292]	; (8006f64 <HAL_OSPIM_Config+0x65c>)
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	3b01      	subs	r3, #1
 8006e46:	f003 0301 	and.w	r3, r3, #1
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	4413      	add	r3, r2
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e56:	049b      	lsls	r3, r3, #18
 8006e58:	431a      	orrs	r2, r3
 8006e5a:	4942      	ldr	r1, [pc, #264]	; (8006f64 <HAL_OSPIM_Config+0x65c>)
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	3b01      	subs	r3, #1
 8006e62:	f003 0301 	and.w	r3, r3, #1
 8006e66:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	440b      	add	r3, r1
 8006e6e:	605a      	str	r2, [r3, #4]
 8006e70:	e01c      	b.n	8006eac <HAL_OSPIM_Config+0x5a4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d018      	beq.n	8006eac <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006e7a:	4a3a      	ldr	r2, [pc, #232]	; (8006f64 <HAL_OSPIM_Config+0x65c>)
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	3b01      	subs	r3, #1
 8006e82:	f003 0301 	and.w	r3, r3, #1
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	4413      	add	r3, r2
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e92:	069b      	lsls	r3, r3, #26
 8006e94:	431a      	orrs	r2, r3
 8006e96:	4933      	ldr	r1, [pc, #204]	; (8006f64 <HAL_OSPIM_Config+0x65c>)
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	f003 0301 	and.w	r3, r3, #1
 8006ea2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	440b      	add	r3, r1
 8006eaa:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d019      	beq.n	8006eec <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006eb8:	4a2a      	ldr	r2, [pc, #168]	; (8006f64 <HAL_OSPIM_Config+0x65c>)
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	f003 0301 	and.w	r3, r3, #1
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	4413      	add	r3, r2
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006ece:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ed0:	049b      	lsls	r3, r3, #18
 8006ed2:	431a      	orrs	r2, r3
 8006ed4:	4923      	ldr	r1, [pc, #140]	; (8006f64 <HAL_OSPIM_Config+0x65c>)
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	3b01      	subs	r3, #1
 8006edc:	f003 0301 	and.w	r3, r3, #1
 8006ee0:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	440b      	add	r3, r1
 8006ee8:	605a      	str	r2, [r3, #4]
 8006eea:	e01c      	b.n	8006f26 <HAL_OSPIM_Config+0x61e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d018      	beq.n	8006f26 <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006ef4:	4a1b      	ldr	r2, [pc, #108]	; (8006f64 <HAL_OSPIM_Config+0x65c>)
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	3b01      	subs	r3, #1
 8006efc:	f003 0301 	and.w	r3, r3, #1
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	4413      	add	r3, r2
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006f0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f0c:	069b      	lsls	r3, r3, #26
 8006f0e:	431a      	orrs	r2, r3
 8006f10:	4914      	ldr	r1, [pc, #80]	; (8006f64 <HAL_OSPIM_Config+0x65c>)
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	3b01      	subs	r3, #1
 8006f18:	f003 0301 	and.w	r3, r3, #1
 8006f1c:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	440b      	add	r3, r1
 8006f24:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8006f26:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006f2a:	f003 0301 	and.w	r3, r3, #1
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d005      	beq.n	8006f3e <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8006f32:	4b0d      	ldr	r3, [pc, #52]	; (8006f68 <HAL_OSPIM_Config+0x660>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a0c      	ldr	r2, [pc, #48]	; (8006f68 <HAL_OSPIM_Config+0x660>)
 8006f38:	f043 0301 	orr.w	r3, r3, #1
 8006f3c:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8006f3e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006f42:	f003 0302 	and.w	r3, r3, #2
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d005      	beq.n	8006f56 <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8006f4a:	4b08      	ldr	r3, [pc, #32]	; (8006f6c <HAL_OSPIM_Config+0x664>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a07      	ldr	r2, [pc, #28]	; (8006f6c <HAL_OSPIM_Config+0x664>)
 8006f50:	f043 0301 	orr.w	r3, r3, #1
 8006f54:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8006f56:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3748      	adds	r7, #72	; 0x48
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	50061c00 	.word	0x50061c00
 8006f68:	a0001000 	.word	0xa0001000
 8006f6c:	a0001400 	.word	0xa0001400

08006f70 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	603b      	str	r3, [r7, #0]
 8006f7c:	4613      	mov	r3, r2
 8006f7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8006f80:	e01a      	b.n	8006fb8 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f88:	d016      	beq.n	8006fb8 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f8a:	f7fc fc55 	bl	8003838 <HAL_GetTick>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	1ad3      	subs	r3, r2, r3
 8006f94:	69ba      	ldr	r2, [r7, #24]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d302      	bcc.n	8006fa0 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d10b      	bne.n	8006fb8 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fa6:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fac:	f043 0201 	orr.w	r2, r3, #1
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e00e      	b.n	8006fd6 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	6a1a      	ldr	r2, [r3, #32]
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	bf14      	ite	ne
 8006fc6:	2301      	movne	r3, #1
 8006fc8:	2300      	moveq	r3, #0
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	461a      	mov	r2, r3
 8006fce:	79fb      	ldrb	r3, [r7, #7]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d1d6      	bne.n	8006f82 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
	...

08006fe0 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b087      	sub	sp, #28
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	6039      	str	r1, [r7, #0]
 8006fea:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8006fec:	2300      	movs	r3, #0
 8006fee:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8006ff4:	79fb      	ldrb	r3, [r7, #7]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d005      	beq.n	8007006 <OSPIM_GetConfig+0x26>
 8006ffa:	79fb      	ldrb	r3, [r7, #7]
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d802      	bhi.n	8007006 <OSPIM_GetConfig+0x26>
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d102      	bne.n	800700c <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	75fb      	strb	r3, [r7, #23]
 800700a:	e08e      	b.n	800712a <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	2200      	movs	r2, #0
 8007010:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	2200      	movs	r2, #0
 8007016:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	2200      	movs	r2, #0
 800701c:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	2200      	movs	r2, #0
 8007022:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	2200      	movs	r2, #0
 8007028:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800702a:	79fb      	ldrb	r3, [r7, #7]
 800702c:	2b02      	cmp	r3, #2
 800702e:	d101      	bne.n	8007034 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8007030:	4b41      	ldr	r3, [pc, #260]	; (8007138 <OSPIM_GetConfig+0x158>)
 8007032:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8007034:	2300      	movs	r3, #0
 8007036:	60fb      	str	r3, [r7, #12]
 8007038:	e074      	b.n	8007124 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 800703a:	4a40      	ldr	r2, [pc, #256]	; (800713c <OSPIM_GetConfig+0x15c>)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	4413      	add	r3, r2
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	f003 0301 	and.w	r3, r3, #1
 800704c:	2b00      	cmp	r3, #0
 800704e:	d00a      	beq.n	8007066 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	4053      	eors	r3, r2
 8007056:	f003 0302 	and.w	r3, r3, #2
 800705a:	2b00      	cmp	r3, #0
 800705c:	d103      	bne.n	8007066 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	1c5a      	adds	r2, r3, #1
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	f003 0310 	and.w	r3, r3, #16
 800706c:	2b00      	cmp	r3, #0
 800706e:	d00a      	beq.n	8007086 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8007070:	68ba      	ldr	r2, [r7, #8]
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	4053      	eors	r3, r2
 8007076:	f003 0320 	and.w	r3, r3, #32
 800707a:	2b00      	cmp	r3, #0
 800707c:	d103      	bne.n	8007086 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	1c5a      	adds	r2, r3, #1
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00a      	beq.n	80070a6 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8007090:	68ba      	ldr	r2, [r7, #8]
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	4053      	eors	r3, r2
 8007096:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800709a:	2b00      	cmp	r3, #0
 800709c:	d103      	bne.n	80070a6 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	1c5a      	adds	r2, r3, #1
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d018      	beq.n	80070e2 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80070b0:	68ba      	ldr	r2, [r7, #8]
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	4053      	eors	r3, r2
 80070b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d111      	bne.n	80070e2 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d106      	bne.n	80070d6 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	3301      	adds	r3, #1
 80070cc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	60da      	str	r2, [r3, #12]
 80070d4:	e005      	b.n	80070e2 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	3301      	adds	r3, #1
 80070da:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d018      	beq.n	800711e <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	4053      	eors	r3, r2
 80070f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d111      	bne.n	800711e <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007100:	2b00      	cmp	r3, #0
 8007102:	d106      	bne.n	8007112 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	3301      	adds	r3, #1
 8007108:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	611a      	str	r2, [r3, #16]
 8007110:	e005      	b.n	800711e <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	3301      	adds	r3, #1
 8007116:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	3301      	adds	r3, #1
 8007122:	60fb      	str	r3, [r7, #12]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2b01      	cmp	r3, #1
 8007128:	d987      	bls.n	800703a <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 800712a:	7dfb      	ldrb	r3, [r7, #23]
}
 800712c:	4618      	mov	r0, r3
 800712e:	371c      	adds	r7, #28
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr
 8007138:	04040222 	.word	0x04040222
 800713c:	50061c00 	.word	0x50061c00

08007140 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007140:	b480      	push	{r7}
 8007142:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007144:	4b05      	ldr	r3, [pc, #20]	; (800715c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a04      	ldr	r2, [pc, #16]	; (800715c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800714a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800714e:	6013      	str	r3, [r2, #0]
}
 8007150:	bf00      	nop
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	40007000 	.word	0x40007000

08007160 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007160:	b480      	push	{r7}
 8007162:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007164:	4b0d      	ldr	r3, [pc, #52]	; (800719c <HAL_PWREx_GetVoltageRange+0x3c>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800716c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007170:	d102      	bne.n	8007178 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8007172:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007176:	e00b      	b.n	8007190 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8007178:	4b08      	ldr	r3, [pc, #32]	; (800719c <HAL_PWREx_GetVoltageRange+0x3c>)
 800717a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800717e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007186:	d102      	bne.n	800718e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8007188:	f44f 7300 	mov.w	r3, #512	; 0x200
 800718c:	e000      	b.n	8007190 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800718e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8007190:	4618      	mov	r0, r3
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	40007000 	.word	0x40007000

080071a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d141      	bne.n	8007232 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80071ae:	4b4b      	ldr	r3, [pc, #300]	; (80072dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80071b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071ba:	d131      	bne.n	8007220 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80071bc:	4b47      	ldr	r3, [pc, #284]	; (80072dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071c2:	4a46      	ldr	r2, [pc, #280]	; (80072dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80071cc:	4b43      	ldr	r3, [pc, #268]	; (80072dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80071d4:	4a41      	ldr	r2, [pc, #260]	; (80072dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80071da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80071dc:	4b40      	ldr	r3, [pc, #256]	; (80072e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2232      	movs	r2, #50	; 0x32
 80071e2:	fb02 f303 	mul.w	r3, r2, r3
 80071e6:	4a3f      	ldr	r2, [pc, #252]	; (80072e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80071e8:	fba2 2303 	umull	r2, r3, r2, r3
 80071ec:	0c9b      	lsrs	r3, r3, #18
 80071ee:	3301      	adds	r3, #1
 80071f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80071f2:	e002      	b.n	80071fa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	3b01      	subs	r3, #1
 80071f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80071fa:	4b38      	ldr	r3, [pc, #224]	; (80072dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071fc:	695b      	ldr	r3, [r3, #20]
 80071fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007206:	d102      	bne.n	800720e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1f2      	bne.n	80071f4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800720e:	4b33      	ldr	r3, [pc, #204]	; (80072dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007210:	695b      	ldr	r3, [r3, #20]
 8007212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800721a:	d158      	bne.n	80072ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800721c:	2303      	movs	r3, #3
 800721e:	e057      	b.n	80072d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007220:	4b2e      	ldr	r3, [pc, #184]	; (80072dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007222:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007226:	4a2d      	ldr	r2, [pc, #180]	; (80072dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007228:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800722c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007230:	e04d      	b.n	80072ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007238:	d141      	bne.n	80072be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800723a:	4b28      	ldr	r3, [pc, #160]	; (80072dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007246:	d131      	bne.n	80072ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007248:	4b24      	ldr	r3, [pc, #144]	; (80072dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800724a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800724e:	4a23      	ldr	r2, [pc, #140]	; (80072dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007254:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007258:	4b20      	ldr	r3, [pc, #128]	; (80072dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007260:	4a1e      	ldr	r2, [pc, #120]	; (80072dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007262:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007266:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8007268:	4b1d      	ldr	r3, [pc, #116]	; (80072e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2232      	movs	r2, #50	; 0x32
 800726e:	fb02 f303 	mul.w	r3, r2, r3
 8007272:	4a1c      	ldr	r2, [pc, #112]	; (80072e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007274:	fba2 2303 	umull	r2, r3, r2, r3
 8007278:	0c9b      	lsrs	r3, r3, #18
 800727a:	3301      	adds	r3, #1
 800727c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800727e:	e002      	b.n	8007286 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	3b01      	subs	r3, #1
 8007284:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007286:	4b15      	ldr	r3, [pc, #84]	; (80072dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007288:	695b      	ldr	r3, [r3, #20]
 800728a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800728e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007292:	d102      	bne.n	800729a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d1f2      	bne.n	8007280 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800729a:	4b10      	ldr	r3, [pc, #64]	; (80072dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800729c:	695b      	ldr	r3, [r3, #20]
 800729e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072a6:	d112      	bne.n	80072ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80072a8:	2303      	movs	r3, #3
 80072aa:	e011      	b.n	80072d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80072ac:	4b0b      	ldr	r3, [pc, #44]	; (80072dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072b2:	4a0a      	ldr	r2, [pc, #40]	; (80072dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80072bc:	e007      	b.n	80072ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80072be:	4b07      	ldr	r3, [pc, #28]	; (80072dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80072c6:	4a05      	ldr	r2, [pc, #20]	; (80072dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80072cc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3714      	adds	r7, #20
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr
 80072dc:	40007000 	.word	0x40007000
 80072e0:	2000003c 	.word	0x2000003c
 80072e4:	431bde83 	.word	0x431bde83

080072e8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b088      	sub	sp, #32
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d102      	bne.n	80072fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	f000 bc08 	b.w	8007b0c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072fc:	4b96      	ldr	r3, [pc, #600]	; (8007558 <HAL_RCC_OscConfig+0x270>)
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	f003 030c 	and.w	r3, r3, #12
 8007304:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007306:	4b94      	ldr	r3, [pc, #592]	; (8007558 <HAL_RCC_OscConfig+0x270>)
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	f003 0303 	and.w	r3, r3, #3
 800730e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 0310 	and.w	r3, r3, #16
 8007318:	2b00      	cmp	r3, #0
 800731a:	f000 80e4 	beq.w	80074e6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d007      	beq.n	8007334 <HAL_RCC_OscConfig+0x4c>
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	2b0c      	cmp	r3, #12
 8007328:	f040 808b 	bne.w	8007442 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	2b01      	cmp	r3, #1
 8007330:	f040 8087 	bne.w	8007442 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007334:	4b88      	ldr	r3, [pc, #544]	; (8007558 <HAL_RCC_OscConfig+0x270>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 0302 	and.w	r3, r3, #2
 800733c:	2b00      	cmp	r3, #0
 800733e:	d005      	beq.n	800734c <HAL_RCC_OscConfig+0x64>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	699b      	ldr	r3, [r3, #24]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d101      	bne.n	800734c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	e3df      	b.n	8007b0c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a1a      	ldr	r2, [r3, #32]
 8007350:	4b81      	ldr	r3, [pc, #516]	; (8007558 <HAL_RCC_OscConfig+0x270>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 0308 	and.w	r3, r3, #8
 8007358:	2b00      	cmp	r3, #0
 800735a:	d004      	beq.n	8007366 <HAL_RCC_OscConfig+0x7e>
 800735c:	4b7e      	ldr	r3, [pc, #504]	; (8007558 <HAL_RCC_OscConfig+0x270>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007364:	e005      	b.n	8007372 <HAL_RCC_OscConfig+0x8a>
 8007366:	4b7c      	ldr	r3, [pc, #496]	; (8007558 <HAL_RCC_OscConfig+0x270>)
 8007368:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800736c:	091b      	lsrs	r3, r3, #4
 800736e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007372:	4293      	cmp	r3, r2
 8007374:	d223      	bcs.n	80073be <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a1b      	ldr	r3, [r3, #32]
 800737a:	4618      	mov	r0, r3
 800737c:	f000 fdfe 	bl	8007f7c <RCC_SetFlashLatencyFromMSIRange>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d001      	beq.n	800738a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	e3c0      	b.n	8007b0c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800738a:	4b73      	ldr	r3, [pc, #460]	; (8007558 <HAL_RCC_OscConfig+0x270>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a72      	ldr	r2, [pc, #456]	; (8007558 <HAL_RCC_OscConfig+0x270>)
 8007390:	f043 0308 	orr.w	r3, r3, #8
 8007394:	6013      	str	r3, [r2, #0]
 8007396:	4b70      	ldr	r3, [pc, #448]	; (8007558 <HAL_RCC_OscConfig+0x270>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	496d      	ldr	r1, [pc, #436]	; (8007558 <HAL_RCC_OscConfig+0x270>)
 80073a4:	4313      	orrs	r3, r2
 80073a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80073a8:	4b6b      	ldr	r3, [pc, #428]	; (8007558 <HAL_RCC_OscConfig+0x270>)
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	69db      	ldr	r3, [r3, #28]
 80073b4:	021b      	lsls	r3, r3, #8
 80073b6:	4968      	ldr	r1, [pc, #416]	; (8007558 <HAL_RCC_OscConfig+0x270>)
 80073b8:	4313      	orrs	r3, r2
 80073ba:	604b      	str	r3, [r1, #4]
 80073bc:	e025      	b.n	800740a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80073be:	4b66      	ldr	r3, [pc, #408]	; (8007558 <HAL_RCC_OscConfig+0x270>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a65      	ldr	r2, [pc, #404]	; (8007558 <HAL_RCC_OscConfig+0x270>)
 80073c4:	f043 0308 	orr.w	r3, r3, #8
 80073c8:	6013      	str	r3, [r2, #0]
 80073ca:	4b63      	ldr	r3, [pc, #396]	; (8007558 <HAL_RCC_OscConfig+0x270>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a1b      	ldr	r3, [r3, #32]
 80073d6:	4960      	ldr	r1, [pc, #384]	; (8007558 <HAL_RCC_OscConfig+0x270>)
 80073d8:	4313      	orrs	r3, r2
 80073da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80073dc:	4b5e      	ldr	r3, [pc, #376]	; (8007558 <HAL_RCC_OscConfig+0x270>)
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	69db      	ldr	r3, [r3, #28]
 80073e8:	021b      	lsls	r3, r3, #8
 80073ea:	495b      	ldr	r1, [pc, #364]	; (8007558 <HAL_RCC_OscConfig+0x270>)
 80073ec:	4313      	orrs	r3, r2
 80073ee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d109      	bne.n	800740a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	4618      	mov	r0, r3
 80073fc:	f000 fdbe 	bl	8007f7c <RCC_SetFlashLatencyFromMSIRange>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d001      	beq.n	800740a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e380      	b.n	8007b0c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800740a:	f000 fcc1 	bl	8007d90 <HAL_RCC_GetSysClockFreq>
 800740e:	4602      	mov	r2, r0
 8007410:	4b51      	ldr	r3, [pc, #324]	; (8007558 <HAL_RCC_OscConfig+0x270>)
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	091b      	lsrs	r3, r3, #4
 8007416:	f003 030f 	and.w	r3, r3, #15
 800741a:	4950      	ldr	r1, [pc, #320]	; (800755c <HAL_RCC_OscConfig+0x274>)
 800741c:	5ccb      	ldrb	r3, [r1, r3]
 800741e:	f003 031f 	and.w	r3, r3, #31
 8007422:	fa22 f303 	lsr.w	r3, r2, r3
 8007426:	4a4e      	ldr	r2, [pc, #312]	; (8007560 <HAL_RCC_OscConfig+0x278>)
 8007428:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800742a:	4b4e      	ldr	r3, [pc, #312]	; (8007564 <HAL_RCC_OscConfig+0x27c>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4618      	mov	r0, r3
 8007430:	f7fc f8a0 	bl	8003574 <HAL_InitTick>
 8007434:	4603      	mov	r3, r0
 8007436:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007438:	7bfb      	ldrb	r3, [r7, #15]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d052      	beq.n	80074e4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800743e:	7bfb      	ldrb	r3, [r7, #15]
 8007440:	e364      	b.n	8007b0c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d032      	beq.n	80074b0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800744a:	4b43      	ldr	r3, [pc, #268]	; (8007558 <HAL_RCC_OscConfig+0x270>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a42      	ldr	r2, [pc, #264]	; (8007558 <HAL_RCC_OscConfig+0x270>)
 8007450:	f043 0301 	orr.w	r3, r3, #1
 8007454:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007456:	f7fc f9ef 	bl	8003838 <HAL_GetTick>
 800745a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800745c:	e008      	b.n	8007470 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800745e:	f7fc f9eb 	bl	8003838 <HAL_GetTick>
 8007462:	4602      	mov	r2, r0
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	2b02      	cmp	r3, #2
 800746a:	d901      	bls.n	8007470 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800746c:	2303      	movs	r3, #3
 800746e:	e34d      	b.n	8007b0c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007470:	4b39      	ldr	r3, [pc, #228]	; (8007558 <HAL_RCC_OscConfig+0x270>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 0302 	and.w	r3, r3, #2
 8007478:	2b00      	cmp	r3, #0
 800747a:	d0f0      	beq.n	800745e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800747c:	4b36      	ldr	r3, [pc, #216]	; (8007558 <HAL_RCC_OscConfig+0x270>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a35      	ldr	r2, [pc, #212]	; (8007558 <HAL_RCC_OscConfig+0x270>)
 8007482:	f043 0308 	orr.w	r3, r3, #8
 8007486:	6013      	str	r3, [r2, #0]
 8007488:	4b33      	ldr	r3, [pc, #204]	; (8007558 <HAL_RCC_OscConfig+0x270>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6a1b      	ldr	r3, [r3, #32]
 8007494:	4930      	ldr	r1, [pc, #192]	; (8007558 <HAL_RCC_OscConfig+0x270>)
 8007496:	4313      	orrs	r3, r2
 8007498:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800749a:	4b2f      	ldr	r3, [pc, #188]	; (8007558 <HAL_RCC_OscConfig+0x270>)
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	69db      	ldr	r3, [r3, #28]
 80074a6:	021b      	lsls	r3, r3, #8
 80074a8:	492b      	ldr	r1, [pc, #172]	; (8007558 <HAL_RCC_OscConfig+0x270>)
 80074aa:	4313      	orrs	r3, r2
 80074ac:	604b      	str	r3, [r1, #4]
 80074ae:	e01a      	b.n	80074e6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80074b0:	4b29      	ldr	r3, [pc, #164]	; (8007558 <HAL_RCC_OscConfig+0x270>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a28      	ldr	r2, [pc, #160]	; (8007558 <HAL_RCC_OscConfig+0x270>)
 80074b6:	f023 0301 	bic.w	r3, r3, #1
 80074ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80074bc:	f7fc f9bc 	bl	8003838 <HAL_GetTick>
 80074c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80074c2:	e008      	b.n	80074d6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80074c4:	f7fc f9b8 	bl	8003838 <HAL_GetTick>
 80074c8:	4602      	mov	r2, r0
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	1ad3      	subs	r3, r2, r3
 80074ce:	2b02      	cmp	r3, #2
 80074d0:	d901      	bls.n	80074d6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80074d2:	2303      	movs	r3, #3
 80074d4:	e31a      	b.n	8007b0c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80074d6:	4b20      	ldr	r3, [pc, #128]	; (8007558 <HAL_RCC_OscConfig+0x270>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 0302 	and.w	r3, r3, #2
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d1f0      	bne.n	80074c4 <HAL_RCC_OscConfig+0x1dc>
 80074e2:	e000      	b.n	80074e6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80074e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 0301 	and.w	r3, r3, #1
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d073      	beq.n	80075da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	2b08      	cmp	r3, #8
 80074f6:	d005      	beq.n	8007504 <HAL_RCC_OscConfig+0x21c>
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	2b0c      	cmp	r3, #12
 80074fc:	d10e      	bne.n	800751c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	2b03      	cmp	r3, #3
 8007502:	d10b      	bne.n	800751c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007504:	4b14      	ldr	r3, [pc, #80]	; (8007558 <HAL_RCC_OscConfig+0x270>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800750c:	2b00      	cmp	r3, #0
 800750e:	d063      	beq.n	80075d8 <HAL_RCC_OscConfig+0x2f0>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d15f      	bne.n	80075d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	e2f7      	b.n	8007b0c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007524:	d106      	bne.n	8007534 <HAL_RCC_OscConfig+0x24c>
 8007526:	4b0c      	ldr	r3, [pc, #48]	; (8007558 <HAL_RCC_OscConfig+0x270>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a0b      	ldr	r2, [pc, #44]	; (8007558 <HAL_RCC_OscConfig+0x270>)
 800752c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007530:	6013      	str	r3, [r2, #0]
 8007532:	e025      	b.n	8007580 <HAL_RCC_OscConfig+0x298>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800753c:	d114      	bne.n	8007568 <HAL_RCC_OscConfig+0x280>
 800753e:	4b06      	ldr	r3, [pc, #24]	; (8007558 <HAL_RCC_OscConfig+0x270>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a05      	ldr	r2, [pc, #20]	; (8007558 <HAL_RCC_OscConfig+0x270>)
 8007544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007548:	6013      	str	r3, [r2, #0]
 800754a:	4b03      	ldr	r3, [pc, #12]	; (8007558 <HAL_RCC_OscConfig+0x270>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a02      	ldr	r2, [pc, #8]	; (8007558 <HAL_RCC_OscConfig+0x270>)
 8007550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007554:	6013      	str	r3, [r2, #0]
 8007556:	e013      	b.n	8007580 <HAL_RCC_OscConfig+0x298>
 8007558:	40021000 	.word	0x40021000
 800755c:	0800a804 	.word	0x0800a804
 8007560:	2000003c 	.word	0x2000003c
 8007564:	20000040 	.word	0x20000040
 8007568:	4ba0      	ldr	r3, [pc, #640]	; (80077ec <HAL_RCC_OscConfig+0x504>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a9f      	ldr	r2, [pc, #636]	; (80077ec <HAL_RCC_OscConfig+0x504>)
 800756e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007572:	6013      	str	r3, [r2, #0]
 8007574:	4b9d      	ldr	r3, [pc, #628]	; (80077ec <HAL_RCC_OscConfig+0x504>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a9c      	ldr	r2, [pc, #624]	; (80077ec <HAL_RCC_OscConfig+0x504>)
 800757a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800757e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d013      	beq.n	80075b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007588:	f7fc f956 	bl	8003838 <HAL_GetTick>
 800758c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800758e:	e008      	b.n	80075a2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007590:	f7fc f952 	bl	8003838 <HAL_GetTick>
 8007594:	4602      	mov	r2, r0
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	2b64      	cmp	r3, #100	; 0x64
 800759c:	d901      	bls.n	80075a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800759e:	2303      	movs	r3, #3
 80075a0:	e2b4      	b.n	8007b0c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80075a2:	4b92      	ldr	r3, [pc, #584]	; (80077ec <HAL_RCC_OscConfig+0x504>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d0f0      	beq.n	8007590 <HAL_RCC_OscConfig+0x2a8>
 80075ae:	e014      	b.n	80075da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075b0:	f7fc f942 	bl	8003838 <HAL_GetTick>
 80075b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80075b6:	e008      	b.n	80075ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075b8:	f7fc f93e 	bl	8003838 <HAL_GetTick>
 80075bc:	4602      	mov	r2, r0
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	1ad3      	subs	r3, r2, r3
 80075c2:	2b64      	cmp	r3, #100	; 0x64
 80075c4:	d901      	bls.n	80075ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80075c6:	2303      	movs	r3, #3
 80075c8:	e2a0      	b.n	8007b0c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80075ca:	4b88      	ldr	r3, [pc, #544]	; (80077ec <HAL_RCC_OscConfig+0x504>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1f0      	bne.n	80075b8 <HAL_RCC_OscConfig+0x2d0>
 80075d6:	e000      	b.n	80075da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 0302 	and.w	r3, r3, #2
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d060      	beq.n	80076a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80075e6:	69bb      	ldr	r3, [r7, #24]
 80075e8:	2b04      	cmp	r3, #4
 80075ea:	d005      	beq.n	80075f8 <HAL_RCC_OscConfig+0x310>
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	2b0c      	cmp	r3, #12
 80075f0:	d119      	bne.n	8007626 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	d116      	bne.n	8007626 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80075f8:	4b7c      	ldr	r3, [pc, #496]	; (80077ec <HAL_RCC_OscConfig+0x504>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007600:	2b00      	cmp	r3, #0
 8007602:	d005      	beq.n	8007610 <HAL_RCC_OscConfig+0x328>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d101      	bne.n	8007610 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e27d      	b.n	8007b0c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007610:	4b76      	ldr	r3, [pc, #472]	; (80077ec <HAL_RCC_OscConfig+0x504>)
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	691b      	ldr	r3, [r3, #16]
 800761c:	061b      	lsls	r3, r3, #24
 800761e:	4973      	ldr	r1, [pc, #460]	; (80077ec <HAL_RCC_OscConfig+0x504>)
 8007620:	4313      	orrs	r3, r2
 8007622:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007624:	e040      	b.n	80076a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d023      	beq.n	8007676 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800762e:	4b6f      	ldr	r3, [pc, #444]	; (80077ec <HAL_RCC_OscConfig+0x504>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a6e      	ldr	r2, [pc, #440]	; (80077ec <HAL_RCC_OscConfig+0x504>)
 8007634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007638:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800763a:	f7fc f8fd 	bl	8003838 <HAL_GetTick>
 800763e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007640:	e008      	b.n	8007654 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007642:	f7fc f8f9 	bl	8003838 <HAL_GetTick>
 8007646:	4602      	mov	r2, r0
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	1ad3      	subs	r3, r2, r3
 800764c:	2b02      	cmp	r3, #2
 800764e:	d901      	bls.n	8007654 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007650:	2303      	movs	r3, #3
 8007652:	e25b      	b.n	8007b0c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007654:	4b65      	ldr	r3, [pc, #404]	; (80077ec <HAL_RCC_OscConfig+0x504>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800765c:	2b00      	cmp	r3, #0
 800765e:	d0f0      	beq.n	8007642 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007660:	4b62      	ldr	r3, [pc, #392]	; (80077ec <HAL_RCC_OscConfig+0x504>)
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	691b      	ldr	r3, [r3, #16]
 800766c:	061b      	lsls	r3, r3, #24
 800766e:	495f      	ldr	r1, [pc, #380]	; (80077ec <HAL_RCC_OscConfig+0x504>)
 8007670:	4313      	orrs	r3, r2
 8007672:	604b      	str	r3, [r1, #4]
 8007674:	e018      	b.n	80076a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007676:	4b5d      	ldr	r3, [pc, #372]	; (80077ec <HAL_RCC_OscConfig+0x504>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a5c      	ldr	r2, [pc, #368]	; (80077ec <HAL_RCC_OscConfig+0x504>)
 800767c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007682:	f7fc f8d9 	bl	8003838 <HAL_GetTick>
 8007686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007688:	e008      	b.n	800769c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800768a:	f7fc f8d5 	bl	8003838 <HAL_GetTick>
 800768e:	4602      	mov	r2, r0
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	1ad3      	subs	r3, r2, r3
 8007694:	2b02      	cmp	r3, #2
 8007696:	d901      	bls.n	800769c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007698:	2303      	movs	r3, #3
 800769a:	e237      	b.n	8007b0c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800769c:	4b53      	ldr	r3, [pc, #332]	; (80077ec <HAL_RCC_OscConfig+0x504>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d1f0      	bne.n	800768a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 0308 	and.w	r3, r3, #8
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d03c      	beq.n	800772e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	695b      	ldr	r3, [r3, #20]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d01c      	beq.n	80076f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076bc:	4b4b      	ldr	r3, [pc, #300]	; (80077ec <HAL_RCC_OscConfig+0x504>)
 80076be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076c2:	4a4a      	ldr	r2, [pc, #296]	; (80077ec <HAL_RCC_OscConfig+0x504>)
 80076c4:	f043 0301 	orr.w	r3, r3, #1
 80076c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076cc:	f7fc f8b4 	bl	8003838 <HAL_GetTick>
 80076d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80076d2:	e008      	b.n	80076e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076d4:	f7fc f8b0 	bl	8003838 <HAL_GetTick>
 80076d8:	4602      	mov	r2, r0
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	1ad3      	subs	r3, r2, r3
 80076de:	2b02      	cmp	r3, #2
 80076e0:	d901      	bls.n	80076e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80076e2:	2303      	movs	r3, #3
 80076e4:	e212      	b.n	8007b0c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80076e6:	4b41      	ldr	r3, [pc, #260]	; (80077ec <HAL_RCC_OscConfig+0x504>)
 80076e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076ec:	f003 0302 	and.w	r3, r3, #2
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d0ef      	beq.n	80076d4 <HAL_RCC_OscConfig+0x3ec>
 80076f4:	e01b      	b.n	800772e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80076f6:	4b3d      	ldr	r3, [pc, #244]	; (80077ec <HAL_RCC_OscConfig+0x504>)
 80076f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076fc:	4a3b      	ldr	r2, [pc, #236]	; (80077ec <HAL_RCC_OscConfig+0x504>)
 80076fe:	f023 0301 	bic.w	r3, r3, #1
 8007702:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007706:	f7fc f897 	bl	8003838 <HAL_GetTick>
 800770a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800770c:	e008      	b.n	8007720 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800770e:	f7fc f893 	bl	8003838 <HAL_GetTick>
 8007712:	4602      	mov	r2, r0
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	1ad3      	subs	r3, r2, r3
 8007718:	2b02      	cmp	r3, #2
 800771a:	d901      	bls.n	8007720 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800771c:	2303      	movs	r3, #3
 800771e:	e1f5      	b.n	8007b0c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007720:	4b32      	ldr	r3, [pc, #200]	; (80077ec <HAL_RCC_OscConfig+0x504>)
 8007722:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007726:	f003 0302 	and.w	r3, r3, #2
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1ef      	bne.n	800770e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 0304 	and.w	r3, r3, #4
 8007736:	2b00      	cmp	r3, #0
 8007738:	f000 80a6 	beq.w	8007888 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800773c:	2300      	movs	r3, #0
 800773e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007740:	4b2a      	ldr	r3, [pc, #168]	; (80077ec <HAL_RCC_OscConfig+0x504>)
 8007742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007748:	2b00      	cmp	r3, #0
 800774a:	d10d      	bne.n	8007768 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800774c:	4b27      	ldr	r3, [pc, #156]	; (80077ec <HAL_RCC_OscConfig+0x504>)
 800774e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007750:	4a26      	ldr	r2, [pc, #152]	; (80077ec <HAL_RCC_OscConfig+0x504>)
 8007752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007756:	6593      	str	r3, [r2, #88]	; 0x58
 8007758:	4b24      	ldr	r3, [pc, #144]	; (80077ec <HAL_RCC_OscConfig+0x504>)
 800775a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800775c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007760:	60bb      	str	r3, [r7, #8]
 8007762:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007764:	2301      	movs	r3, #1
 8007766:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007768:	4b21      	ldr	r3, [pc, #132]	; (80077f0 <HAL_RCC_OscConfig+0x508>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007770:	2b00      	cmp	r3, #0
 8007772:	d118      	bne.n	80077a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007774:	4b1e      	ldr	r3, [pc, #120]	; (80077f0 <HAL_RCC_OscConfig+0x508>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a1d      	ldr	r2, [pc, #116]	; (80077f0 <HAL_RCC_OscConfig+0x508>)
 800777a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800777e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007780:	f7fc f85a 	bl	8003838 <HAL_GetTick>
 8007784:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007786:	e008      	b.n	800779a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007788:	f7fc f856 	bl	8003838 <HAL_GetTick>
 800778c:	4602      	mov	r2, r0
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	1ad3      	subs	r3, r2, r3
 8007792:	2b02      	cmp	r3, #2
 8007794:	d901      	bls.n	800779a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007796:	2303      	movs	r3, #3
 8007798:	e1b8      	b.n	8007b0c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800779a:	4b15      	ldr	r3, [pc, #84]	; (80077f0 <HAL_RCC_OscConfig+0x508>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d0f0      	beq.n	8007788 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d108      	bne.n	80077c0 <HAL_RCC_OscConfig+0x4d8>
 80077ae:	4b0f      	ldr	r3, [pc, #60]	; (80077ec <HAL_RCC_OscConfig+0x504>)
 80077b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077b4:	4a0d      	ldr	r2, [pc, #52]	; (80077ec <HAL_RCC_OscConfig+0x504>)
 80077b6:	f043 0301 	orr.w	r3, r3, #1
 80077ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80077be:	e029      	b.n	8007814 <HAL_RCC_OscConfig+0x52c>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	2b05      	cmp	r3, #5
 80077c6:	d115      	bne.n	80077f4 <HAL_RCC_OscConfig+0x50c>
 80077c8:	4b08      	ldr	r3, [pc, #32]	; (80077ec <HAL_RCC_OscConfig+0x504>)
 80077ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ce:	4a07      	ldr	r2, [pc, #28]	; (80077ec <HAL_RCC_OscConfig+0x504>)
 80077d0:	f043 0304 	orr.w	r3, r3, #4
 80077d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80077d8:	4b04      	ldr	r3, [pc, #16]	; (80077ec <HAL_RCC_OscConfig+0x504>)
 80077da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077de:	4a03      	ldr	r2, [pc, #12]	; (80077ec <HAL_RCC_OscConfig+0x504>)
 80077e0:	f043 0301 	orr.w	r3, r3, #1
 80077e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80077e8:	e014      	b.n	8007814 <HAL_RCC_OscConfig+0x52c>
 80077ea:	bf00      	nop
 80077ec:	40021000 	.word	0x40021000
 80077f0:	40007000 	.word	0x40007000
 80077f4:	4b9d      	ldr	r3, [pc, #628]	; (8007a6c <HAL_RCC_OscConfig+0x784>)
 80077f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077fa:	4a9c      	ldr	r2, [pc, #624]	; (8007a6c <HAL_RCC_OscConfig+0x784>)
 80077fc:	f023 0301 	bic.w	r3, r3, #1
 8007800:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007804:	4b99      	ldr	r3, [pc, #612]	; (8007a6c <HAL_RCC_OscConfig+0x784>)
 8007806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800780a:	4a98      	ldr	r2, [pc, #608]	; (8007a6c <HAL_RCC_OscConfig+0x784>)
 800780c:	f023 0304 	bic.w	r3, r3, #4
 8007810:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d016      	beq.n	800784a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800781c:	f7fc f80c 	bl	8003838 <HAL_GetTick>
 8007820:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007822:	e00a      	b.n	800783a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007824:	f7fc f808 	bl	8003838 <HAL_GetTick>
 8007828:	4602      	mov	r2, r0
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	1ad3      	subs	r3, r2, r3
 800782e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007832:	4293      	cmp	r3, r2
 8007834:	d901      	bls.n	800783a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e168      	b.n	8007b0c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800783a:	4b8c      	ldr	r3, [pc, #560]	; (8007a6c <HAL_RCC_OscConfig+0x784>)
 800783c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007840:	f003 0302 	and.w	r3, r3, #2
 8007844:	2b00      	cmp	r3, #0
 8007846:	d0ed      	beq.n	8007824 <HAL_RCC_OscConfig+0x53c>
 8007848:	e015      	b.n	8007876 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800784a:	f7fb fff5 	bl	8003838 <HAL_GetTick>
 800784e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007850:	e00a      	b.n	8007868 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007852:	f7fb fff1 	bl	8003838 <HAL_GetTick>
 8007856:	4602      	mov	r2, r0
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	1ad3      	subs	r3, r2, r3
 800785c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007860:	4293      	cmp	r3, r2
 8007862:	d901      	bls.n	8007868 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007864:	2303      	movs	r3, #3
 8007866:	e151      	b.n	8007b0c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007868:	4b80      	ldr	r3, [pc, #512]	; (8007a6c <HAL_RCC_OscConfig+0x784>)
 800786a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800786e:	f003 0302 	and.w	r3, r3, #2
 8007872:	2b00      	cmp	r3, #0
 8007874:	d1ed      	bne.n	8007852 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007876:	7ffb      	ldrb	r3, [r7, #31]
 8007878:	2b01      	cmp	r3, #1
 800787a:	d105      	bne.n	8007888 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800787c:	4b7b      	ldr	r3, [pc, #492]	; (8007a6c <HAL_RCC_OscConfig+0x784>)
 800787e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007880:	4a7a      	ldr	r2, [pc, #488]	; (8007a6c <HAL_RCC_OscConfig+0x784>)
 8007882:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007886:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 0320 	and.w	r3, r3, #32
 8007890:	2b00      	cmp	r3, #0
 8007892:	d03c      	beq.n	800790e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007898:	2b00      	cmp	r3, #0
 800789a:	d01c      	beq.n	80078d6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800789c:	4b73      	ldr	r3, [pc, #460]	; (8007a6c <HAL_RCC_OscConfig+0x784>)
 800789e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80078a2:	4a72      	ldr	r2, [pc, #456]	; (8007a6c <HAL_RCC_OscConfig+0x784>)
 80078a4:	f043 0301 	orr.w	r3, r3, #1
 80078a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078ac:	f7fb ffc4 	bl	8003838 <HAL_GetTick>
 80078b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80078b2:	e008      	b.n	80078c6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80078b4:	f7fb ffc0 	bl	8003838 <HAL_GetTick>
 80078b8:	4602      	mov	r2, r0
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	1ad3      	subs	r3, r2, r3
 80078be:	2b02      	cmp	r3, #2
 80078c0:	d901      	bls.n	80078c6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80078c2:	2303      	movs	r3, #3
 80078c4:	e122      	b.n	8007b0c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80078c6:	4b69      	ldr	r3, [pc, #420]	; (8007a6c <HAL_RCC_OscConfig+0x784>)
 80078c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80078cc:	f003 0302 	and.w	r3, r3, #2
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d0ef      	beq.n	80078b4 <HAL_RCC_OscConfig+0x5cc>
 80078d4:	e01b      	b.n	800790e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80078d6:	4b65      	ldr	r3, [pc, #404]	; (8007a6c <HAL_RCC_OscConfig+0x784>)
 80078d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80078dc:	4a63      	ldr	r2, [pc, #396]	; (8007a6c <HAL_RCC_OscConfig+0x784>)
 80078de:	f023 0301 	bic.w	r3, r3, #1
 80078e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078e6:	f7fb ffa7 	bl	8003838 <HAL_GetTick>
 80078ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80078ec:	e008      	b.n	8007900 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80078ee:	f7fb ffa3 	bl	8003838 <HAL_GetTick>
 80078f2:	4602      	mov	r2, r0
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	1ad3      	subs	r3, r2, r3
 80078f8:	2b02      	cmp	r3, #2
 80078fa:	d901      	bls.n	8007900 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80078fc:	2303      	movs	r3, #3
 80078fe:	e105      	b.n	8007b0c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007900:	4b5a      	ldr	r3, [pc, #360]	; (8007a6c <HAL_RCC_OscConfig+0x784>)
 8007902:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007906:	f003 0302 	and.w	r3, r3, #2
 800790a:	2b00      	cmp	r3, #0
 800790c:	d1ef      	bne.n	80078ee <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007912:	2b00      	cmp	r3, #0
 8007914:	f000 80f9 	beq.w	8007b0a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800791c:	2b02      	cmp	r3, #2
 800791e:	f040 80cf 	bne.w	8007ac0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007922:	4b52      	ldr	r3, [pc, #328]	; (8007a6c <HAL_RCC_OscConfig+0x784>)
 8007924:	68db      	ldr	r3, [r3, #12]
 8007926:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	f003 0203 	and.w	r2, r3, #3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007932:	429a      	cmp	r2, r3
 8007934:	d12c      	bne.n	8007990 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007940:	3b01      	subs	r3, #1
 8007942:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007944:	429a      	cmp	r2, r3
 8007946:	d123      	bne.n	8007990 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007952:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007954:	429a      	cmp	r2, r3
 8007956:	d11b      	bne.n	8007990 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007962:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007964:	429a      	cmp	r2, r3
 8007966:	d113      	bne.n	8007990 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007972:	085b      	lsrs	r3, r3, #1
 8007974:	3b01      	subs	r3, #1
 8007976:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007978:	429a      	cmp	r2, r3
 800797a:	d109      	bne.n	8007990 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007986:	085b      	lsrs	r3, r3, #1
 8007988:	3b01      	subs	r3, #1
 800798a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800798c:	429a      	cmp	r2, r3
 800798e:	d071      	beq.n	8007a74 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	2b0c      	cmp	r3, #12
 8007994:	d068      	beq.n	8007a68 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007996:	4b35      	ldr	r3, [pc, #212]	; (8007a6c <HAL_RCC_OscConfig+0x784>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d105      	bne.n	80079ae <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80079a2:	4b32      	ldr	r3, [pc, #200]	; (8007a6c <HAL_RCC_OscConfig+0x784>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d001      	beq.n	80079b2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e0ac      	b.n	8007b0c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80079b2:	4b2e      	ldr	r3, [pc, #184]	; (8007a6c <HAL_RCC_OscConfig+0x784>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a2d      	ldr	r2, [pc, #180]	; (8007a6c <HAL_RCC_OscConfig+0x784>)
 80079b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079bc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80079be:	f7fb ff3b 	bl	8003838 <HAL_GetTick>
 80079c2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80079c4:	e008      	b.n	80079d8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079c6:	f7fb ff37 	bl	8003838 <HAL_GetTick>
 80079ca:	4602      	mov	r2, r0
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	1ad3      	subs	r3, r2, r3
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	d901      	bls.n	80079d8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80079d4:	2303      	movs	r3, #3
 80079d6:	e099      	b.n	8007b0c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80079d8:	4b24      	ldr	r3, [pc, #144]	; (8007a6c <HAL_RCC_OscConfig+0x784>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d1f0      	bne.n	80079c6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80079e4:	4b21      	ldr	r3, [pc, #132]	; (8007a6c <HAL_RCC_OscConfig+0x784>)
 80079e6:	68da      	ldr	r2, [r3, #12]
 80079e8:	4b21      	ldr	r3, [pc, #132]	; (8007a70 <HAL_RCC_OscConfig+0x788>)
 80079ea:	4013      	ands	r3, r2
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80079f4:	3a01      	subs	r2, #1
 80079f6:	0112      	lsls	r2, r2, #4
 80079f8:	4311      	orrs	r1, r2
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80079fe:	0212      	lsls	r2, r2, #8
 8007a00:	4311      	orrs	r1, r2
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007a06:	0852      	lsrs	r2, r2, #1
 8007a08:	3a01      	subs	r2, #1
 8007a0a:	0552      	lsls	r2, r2, #21
 8007a0c:	4311      	orrs	r1, r2
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007a12:	0852      	lsrs	r2, r2, #1
 8007a14:	3a01      	subs	r2, #1
 8007a16:	0652      	lsls	r2, r2, #25
 8007a18:	4311      	orrs	r1, r2
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007a1e:	06d2      	lsls	r2, r2, #27
 8007a20:	430a      	orrs	r2, r1
 8007a22:	4912      	ldr	r1, [pc, #72]	; (8007a6c <HAL_RCC_OscConfig+0x784>)
 8007a24:	4313      	orrs	r3, r2
 8007a26:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007a28:	4b10      	ldr	r3, [pc, #64]	; (8007a6c <HAL_RCC_OscConfig+0x784>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a0f      	ldr	r2, [pc, #60]	; (8007a6c <HAL_RCC_OscConfig+0x784>)
 8007a2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a32:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007a34:	4b0d      	ldr	r3, [pc, #52]	; (8007a6c <HAL_RCC_OscConfig+0x784>)
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	4a0c      	ldr	r2, [pc, #48]	; (8007a6c <HAL_RCC_OscConfig+0x784>)
 8007a3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a3e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007a40:	f7fb fefa 	bl	8003838 <HAL_GetTick>
 8007a44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a46:	e008      	b.n	8007a5a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a48:	f7fb fef6 	bl	8003838 <HAL_GetTick>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	2b02      	cmp	r3, #2
 8007a54:	d901      	bls.n	8007a5a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8007a56:	2303      	movs	r3, #3
 8007a58:	e058      	b.n	8007b0c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a5a:	4b04      	ldr	r3, [pc, #16]	; (8007a6c <HAL_RCC_OscConfig+0x784>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d0f0      	beq.n	8007a48 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007a66:	e050      	b.n	8007b0a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e04f      	b.n	8007b0c <HAL_RCC_OscConfig+0x824>
 8007a6c:	40021000 	.word	0x40021000
 8007a70:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a74:	4b27      	ldr	r3, [pc, #156]	; (8007b14 <HAL_RCC_OscConfig+0x82c>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d144      	bne.n	8007b0a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007a80:	4b24      	ldr	r3, [pc, #144]	; (8007b14 <HAL_RCC_OscConfig+0x82c>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a23      	ldr	r2, [pc, #140]	; (8007b14 <HAL_RCC_OscConfig+0x82c>)
 8007a86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a8a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007a8c:	4b21      	ldr	r3, [pc, #132]	; (8007b14 <HAL_RCC_OscConfig+0x82c>)
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	4a20      	ldr	r2, [pc, #128]	; (8007b14 <HAL_RCC_OscConfig+0x82c>)
 8007a92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a96:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007a98:	f7fb fece 	bl	8003838 <HAL_GetTick>
 8007a9c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a9e:	e008      	b.n	8007ab2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007aa0:	f7fb feca 	bl	8003838 <HAL_GetTick>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	1ad3      	subs	r3, r2, r3
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	d901      	bls.n	8007ab2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8007aae:	2303      	movs	r3, #3
 8007ab0:	e02c      	b.n	8007b0c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ab2:	4b18      	ldr	r3, [pc, #96]	; (8007b14 <HAL_RCC_OscConfig+0x82c>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d0f0      	beq.n	8007aa0 <HAL_RCC_OscConfig+0x7b8>
 8007abe:	e024      	b.n	8007b0a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	2b0c      	cmp	r3, #12
 8007ac4:	d01f      	beq.n	8007b06 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ac6:	4b13      	ldr	r3, [pc, #76]	; (8007b14 <HAL_RCC_OscConfig+0x82c>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a12      	ldr	r2, [pc, #72]	; (8007b14 <HAL_RCC_OscConfig+0x82c>)
 8007acc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ad0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ad2:	f7fb feb1 	bl	8003838 <HAL_GetTick>
 8007ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ad8:	e008      	b.n	8007aec <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ada:	f7fb fead 	bl	8003838 <HAL_GetTick>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	1ad3      	subs	r3, r2, r3
 8007ae4:	2b02      	cmp	r3, #2
 8007ae6:	d901      	bls.n	8007aec <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8007ae8:	2303      	movs	r3, #3
 8007aea:	e00f      	b.n	8007b0c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007aec:	4b09      	ldr	r3, [pc, #36]	; (8007b14 <HAL_RCC_OscConfig+0x82c>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d1f0      	bne.n	8007ada <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007af8:	4b06      	ldr	r3, [pc, #24]	; (8007b14 <HAL_RCC_OscConfig+0x82c>)
 8007afa:	68da      	ldr	r2, [r3, #12]
 8007afc:	4905      	ldr	r1, [pc, #20]	; (8007b14 <HAL_RCC_OscConfig+0x82c>)
 8007afe:	4b06      	ldr	r3, [pc, #24]	; (8007b18 <HAL_RCC_OscConfig+0x830>)
 8007b00:	4013      	ands	r3, r2
 8007b02:	60cb      	str	r3, [r1, #12]
 8007b04:	e001      	b.n	8007b0a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e000      	b.n	8007b0c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3720      	adds	r7, #32
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	40021000 	.word	0x40021000
 8007b18:	feeefffc 	.word	0xfeeefffc

08007b1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b086      	sub	sp, #24
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007b26:	2300      	movs	r3, #0
 8007b28:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d101      	bne.n	8007b34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	e11d      	b.n	8007d70 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007b34:	4b90      	ldr	r3, [pc, #576]	; (8007d78 <HAL_RCC_ClockConfig+0x25c>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f003 030f 	and.w	r3, r3, #15
 8007b3c:	683a      	ldr	r2, [r7, #0]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d910      	bls.n	8007b64 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b42:	4b8d      	ldr	r3, [pc, #564]	; (8007d78 <HAL_RCC_ClockConfig+0x25c>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f023 020f 	bic.w	r2, r3, #15
 8007b4a:	498b      	ldr	r1, [pc, #556]	; (8007d78 <HAL_RCC_ClockConfig+0x25c>)
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b52:	4b89      	ldr	r3, [pc, #548]	; (8007d78 <HAL_RCC_ClockConfig+0x25c>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f003 030f 	and.w	r3, r3, #15
 8007b5a:	683a      	ldr	r2, [r7, #0]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d001      	beq.n	8007b64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	e105      	b.n	8007d70 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f003 0302 	and.w	r3, r3, #2
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d010      	beq.n	8007b92 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	689a      	ldr	r2, [r3, #8]
 8007b74:	4b81      	ldr	r3, [pc, #516]	; (8007d7c <HAL_RCC_ClockConfig+0x260>)
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d908      	bls.n	8007b92 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b80:	4b7e      	ldr	r3, [pc, #504]	; (8007d7c <HAL_RCC_ClockConfig+0x260>)
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	497b      	ldr	r1, [pc, #492]	; (8007d7c <HAL_RCC_ClockConfig+0x260>)
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f003 0301 	and.w	r3, r3, #1
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d079      	beq.n	8007c92 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	2b03      	cmp	r3, #3
 8007ba4:	d11e      	bne.n	8007be4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ba6:	4b75      	ldr	r3, [pc, #468]	; (8007d7c <HAL_RCC_ClockConfig+0x260>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d101      	bne.n	8007bb6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e0dc      	b.n	8007d70 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8007bb6:	f000 fa3b 	bl	8008030 <RCC_GetSysClockFreqFromPLLSource>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	4a70      	ldr	r2, [pc, #448]	; (8007d80 <HAL_RCC_ClockConfig+0x264>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d946      	bls.n	8007c50 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8007bc2:	4b6e      	ldr	r3, [pc, #440]	; (8007d7c <HAL_RCC_ClockConfig+0x260>)
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d140      	bne.n	8007c50 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007bce:	4b6b      	ldr	r3, [pc, #428]	; (8007d7c <HAL_RCC_ClockConfig+0x260>)
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007bd6:	4a69      	ldr	r2, [pc, #420]	; (8007d7c <HAL_RCC_ClockConfig+0x260>)
 8007bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bdc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007bde:	2380      	movs	r3, #128	; 0x80
 8007be0:	617b      	str	r3, [r7, #20]
 8007be2:	e035      	b.n	8007c50 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	d107      	bne.n	8007bfc <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007bec:	4b63      	ldr	r3, [pc, #396]	; (8007d7c <HAL_RCC_ClockConfig+0x260>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d115      	bne.n	8007c24 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e0b9      	b.n	8007d70 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d107      	bne.n	8007c14 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007c04:	4b5d      	ldr	r3, [pc, #372]	; (8007d7c <HAL_RCC_ClockConfig+0x260>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f003 0302 	and.w	r3, r3, #2
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d109      	bne.n	8007c24 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8007c10:	2301      	movs	r3, #1
 8007c12:	e0ad      	b.n	8007d70 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007c14:	4b59      	ldr	r3, [pc, #356]	; (8007d7c <HAL_RCC_ClockConfig+0x260>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d101      	bne.n	8007c24 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8007c20:	2301      	movs	r3, #1
 8007c22:	e0a5      	b.n	8007d70 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8007c24:	f000 f8b4 	bl	8007d90 <HAL_RCC_GetSysClockFreq>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	4a55      	ldr	r2, [pc, #340]	; (8007d80 <HAL_RCC_ClockConfig+0x264>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d90f      	bls.n	8007c50 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8007c30:	4b52      	ldr	r3, [pc, #328]	; (8007d7c <HAL_RCC_ClockConfig+0x260>)
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d109      	bne.n	8007c50 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007c3c:	4b4f      	ldr	r3, [pc, #316]	; (8007d7c <HAL_RCC_ClockConfig+0x260>)
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c44:	4a4d      	ldr	r2, [pc, #308]	; (8007d7c <HAL_RCC_ClockConfig+0x260>)
 8007c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c4a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007c4c:	2380      	movs	r3, #128	; 0x80
 8007c4e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007c50:	4b4a      	ldr	r3, [pc, #296]	; (8007d7c <HAL_RCC_ClockConfig+0x260>)
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	f023 0203 	bic.w	r2, r3, #3
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	4947      	ldr	r1, [pc, #284]	; (8007d7c <HAL_RCC_ClockConfig+0x260>)
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c62:	f7fb fde9 	bl	8003838 <HAL_GetTick>
 8007c66:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c68:	e00a      	b.n	8007c80 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c6a:	f7fb fde5 	bl	8003838 <HAL_GetTick>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	1ad3      	subs	r3, r2, r3
 8007c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d901      	bls.n	8007c80 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8007c7c:	2303      	movs	r3, #3
 8007c7e:	e077      	b.n	8007d70 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c80:	4b3e      	ldr	r3, [pc, #248]	; (8007d7c <HAL_RCC_ClockConfig+0x260>)
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	f003 020c 	and.w	r2, r3, #12
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d1eb      	bne.n	8007c6a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	2b80      	cmp	r3, #128	; 0x80
 8007c96:	d105      	bne.n	8007ca4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007c98:	4b38      	ldr	r3, [pc, #224]	; (8007d7c <HAL_RCC_ClockConfig+0x260>)
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	4a37      	ldr	r2, [pc, #220]	; (8007d7c <HAL_RCC_ClockConfig+0x260>)
 8007c9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ca2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 0302 	and.w	r3, r3, #2
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d010      	beq.n	8007cd2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	689a      	ldr	r2, [r3, #8]
 8007cb4:	4b31      	ldr	r3, [pc, #196]	; (8007d7c <HAL_RCC_ClockConfig+0x260>)
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d208      	bcs.n	8007cd2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007cc0:	4b2e      	ldr	r3, [pc, #184]	; (8007d7c <HAL_RCC_ClockConfig+0x260>)
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	492b      	ldr	r1, [pc, #172]	; (8007d7c <HAL_RCC_ClockConfig+0x260>)
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007cd2:	4b29      	ldr	r3, [pc, #164]	; (8007d78 <HAL_RCC_ClockConfig+0x25c>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 030f 	and.w	r3, r3, #15
 8007cda:	683a      	ldr	r2, [r7, #0]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d210      	bcs.n	8007d02 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ce0:	4b25      	ldr	r3, [pc, #148]	; (8007d78 <HAL_RCC_ClockConfig+0x25c>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f023 020f 	bic.w	r2, r3, #15
 8007ce8:	4923      	ldr	r1, [pc, #140]	; (8007d78 <HAL_RCC_ClockConfig+0x25c>)
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	4313      	orrs	r3, r2
 8007cee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cf0:	4b21      	ldr	r3, [pc, #132]	; (8007d78 <HAL_RCC_ClockConfig+0x25c>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f003 030f 	and.w	r3, r3, #15
 8007cf8:	683a      	ldr	r2, [r7, #0]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d001      	beq.n	8007d02 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e036      	b.n	8007d70 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f003 0304 	and.w	r3, r3, #4
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d008      	beq.n	8007d20 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d0e:	4b1b      	ldr	r3, [pc, #108]	; (8007d7c <HAL_RCC_ClockConfig+0x260>)
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	4918      	ldr	r1, [pc, #96]	; (8007d7c <HAL_RCC_ClockConfig+0x260>)
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 0308 	and.w	r3, r3, #8
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d009      	beq.n	8007d40 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d2c:	4b13      	ldr	r3, [pc, #76]	; (8007d7c <HAL_RCC_ClockConfig+0x260>)
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	691b      	ldr	r3, [r3, #16]
 8007d38:	00db      	lsls	r3, r3, #3
 8007d3a:	4910      	ldr	r1, [pc, #64]	; (8007d7c <HAL_RCC_ClockConfig+0x260>)
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007d40:	f000 f826 	bl	8007d90 <HAL_RCC_GetSysClockFreq>
 8007d44:	4602      	mov	r2, r0
 8007d46:	4b0d      	ldr	r3, [pc, #52]	; (8007d7c <HAL_RCC_ClockConfig+0x260>)
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	091b      	lsrs	r3, r3, #4
 8007d4c:	f003 030f 	and.w	r3, r3, #15
 8007d50:	490c      	ldr	r1, [pc, #48]	; (8007d84 <HAL_RCC_ClockConfig+0x268>)
 8007d52:	5ccb      	ldrb	r3, [r1, r3]
 8007d54:	f003 031f 	and.w	r3, r3, #31
 8007d58:	fa22 f303 	lsr.w	r3, r2, r3
 8007d5c:	4a0a      	ldr	r2, [pc, #40]	; (8007d88 <HAL_RCC_ClockConfig+0x26c>)
 8007d5e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007d60:	4b0a      	ldr	r3, [pc, #40]	; (8007d8c <HAL_RCC_ClockConfig+0x270>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4618      	mov	r0, r3
 8007d66:	f7fb fc05 	bl	8003574 <HAL_InitTick>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	73fb      	strb	r3, [r7, #15]

  return status;
 8007d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3718      	adds	r7, #24
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}
 8007d78:	40022000 	.word	0x40022000
 8007d7c:	40021000 	.word	0x40021000
 8007d80:	04c4b400 	.word	0x04c4b400
 8007d84:	0800a804 	.word	0x0800a804
 8007d88:	2000003c 	.word	0x2000003c
 8007d8c:	20000040 	.word	0x20000040

08007d90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b089      	sub	sp, #36	; 0x24
 8007d94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007d96:	2300      	movs	r3, #0
 8007d98:	61fb      	str	r3, [r7, #28]
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d9e:	4b3e      	ldr	r3, [pc, #248]	; (8007e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	f003 030c 	and.w	r3, r3, #12
 8007da6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007da8:	4b3b      	ldr	r3, [pc, #236]	; (8007e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	f003 0303 	and.w	r3, r3, #3
 8007db0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d005      	beq.n	8007dc4 <HAL_RCC_GetSysClockFreq+0x34>
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	2b0c      	cmp	r3, #12
 8007dbc:	d121      	bne.n	8007e02 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d11e      	bne.n	8007e02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007dc4:	4b34      	ldr	r3, [pc, #208]	; (8007e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f003 0308 	and.w	r3, r3, #8
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d107      	bne.n	8007de0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007dd0:	4b31      	ldr	r3, [pc, #196]	; (8007e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8007dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007dd6:	0a1b      	lsrs	r3, r3, #8
 8007dd8:	f003 030f 	and.w	r3, r3, #15
 8007ddc:	61fb      	str	r3, [r7, #28]
 8007dde:	e005      	b.n	8007dec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007de0:	4b2d      	ldr	r3, [pc, #180]	; (8007e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	091b      	lsrs	r3, r3, #4
 8007de6:	f003 030f 	and.w	r3, r3, #15
 8007dea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007dec:	4a2b      	ldr	r2, [pc, #172]	; (8007e9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007df4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d10d      	bne.n	8007e18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007e00:	e00a      	b.n	8007e18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	2b04      	cmp	r3, #4
 8007e06:	d102      	bne.n	8007e0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007e08:	4b25      	ldr	r3, [pc, #148]	; (8007ea0 <HAL_RCC_GetSysClockFreq+0x110>)
 8007e0a:	61bb      	str	r3, [r7, #24]
 8007e0c:	e004      	b.n	8007e18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	2b08      	cmp	r3, #8
 8007e12:	d101      	bne.n	8007e18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007e14:	4b23      	ldr	r3, [pc, #140]	; (8007ea4 <HAL_RCC_GetSysClockFreq+0x114>)
 8007e16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	2b0c      	cmp	r3, #12
 8007e1c:	d134      	bne.n	8007e88 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007e1e:	4b1e      	ldr	r3, [pc, #120]	; (8007e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	f003 0303 	and.w	r3, r3, #3
 8007e26:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	2b02      	cmp	r3, #2
 8007e2c:	d003      	beq.n	8007e36 <HAL_RCC_GetSysClockFreq+0xa6>
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	2b03      	cmp	r3, #3
 8007e32:	d003      	beq.n	8007e3c <HAL_RCC_GetSysClockFreq+0xac>
 8007e34:	e005      	b.n	8007e42 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007e36:	4b1a      	ldr	r3, [pc, #104]	; (8007ea0 <HAL_RCC_GetSysClockFreq+0x110>)
 8007e38:	617b      	str	r3, [r7, #20]
      break;
 8007e3a:	e005      	b.n	8007e48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007e3c:	4b19      	ldr	r3, [pc, #100]	; (8007ea4 <HAL_RCC_GetSysClockFreq+0x114>)
 8007e3e:	617b      	str	r3, [r7, #20]
      break;
 8007e40:	e002      	b.n	8007e48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007e42:	69fb      	ldr	r3, [r7, #28]
 8007e44:	617b      	str	r3, [r7, #20]
      break;
 8007e46:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007e48:	4b13      	ldr	r3, [pc, #76]	; (8007e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	091b      	lsrs	r3, r3, #4
 8007e4e:	f003 030f 	and.w	r3, r3, #15
 8007e52:	3301      	adds	r3, #1
 8007e54:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007e56:	4b10      	ldr	r3, [pc, #64]	; (8007e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	0a1b      	lsrs	r3, r3, #8
 8007e5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e60:	697a      	ldr	r2, [r7, #20]
 8007e62:	fb03 f202 	mul.w	r2, r3, r2
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e6c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007e6e:	4b0a      	ldr	r3, [pc, #40]	; (8007e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	0e5b      	lsrs	r3, r3, #25
 8007e74:	f003 0303 	and.w	r3, r3, #3
 8007e78:	3301      	adds	r3, #1
 8007e7a:	005b      	lsls	r3, r3, #1
 8007e7c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007e7e:	697a      	ldr	r2, [r7, #20]
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e86:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007e88:	69bb      	ldr	r3, [r7, #24]
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3724      	adds	r7, #36	; 0x24
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	40021000 	.word	0x40021000
 8007e9c:	0800a81c 	.word	0x0800a81c
 8007ea0:	00f42400 	.word	0x00f42400
 8007ea4:	007a1200 	.word	0x007a1200

08007ea8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007eac:	4b03      	ldr	r3, [pc, #12]	; (8007ebc <HAL_RCC_GetHCLKFreq+0x14>)
 8007eae:	681b      	ldr	r3, [r3, #0]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr
 8007eba:	bf00      	nop
 8007ebc:	2000003c 	.word	0x2000003c

08007ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007ec4:	f7ff fff0 	bl	8007ea8 <HAL_RCC_GetHCLKFreq>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	4b06      	ldr	r3, [pc, #24]	; (8007ee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	0a1b      	lsrs	r3, r3, #8
 8007ed0:	f003 0307 	and.w	r3, r3, #7
 8007ed4:	4904      	ldr	r1, [pc, #16]	; (8007ee8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007ed6:	5ccb      	ldrb	r3, [r1, r3]
 8007ed8:	f003 031f 	and.w	r3, r3, #31
 8007edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	40021000 	.word	0x40021000
 8007ee8:	0800a814 	.word	0x0800a814

08007eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007ef0:	f7ff ffda 	bl	8007ea8 <HAL_RCC_GetHCLKFreq>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	4b06      	ldr	r3, [pc, #24]	; (8007f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	0adb      	lsrs	r3, r3, #11
 8007efc:	f003 0307 	and.w	r3, r3, #7
 8007f00:	4904      	ldr	r1, [pc, #16]	; (8007f14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007f02:	5ccb      	ldrb	r3, [r1, r3]
 8007f04:	f003 031f 	and.w	r3, r3, #31
 8007f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	40021000 	.word	0x40021000
 8007f14:	0800a814 	.word	0x0800a814

08007f18 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	220f      	movs	r2, #15
 8007f26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8007f28:	4b12      	ldr	r3, [pc, #72]	; (8007f74 <HAL_RCC_GetClockConfig+0x5c>)
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	f003 0203 	and.w	r2, r3, #3
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8007f34:	4b0f      	ldr	r3, [pc, #60]	; (8007f74 <HAL_RCC_GetClockConfig+0x5c>)
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007f40:	4b0c      	ldr	r3, [pc, #48]	; (8007f74 <HAL_RCC_GetClockConfig+0x5c>)
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007f4c:	4b09      	ldr	r3, [pc, #36]	; (8007f74 <HAL_RCC_GetClockConfig+0x5c>)
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	08db      	lsrs	r3, r3, #3
 8007f52:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007f5a:	4b07      	ldr	r3, [pc, #28]	; (8007f78 <HAL_RCC_GetClockConfig+0x60>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f003 020f 	and.w	r2, r3, #15
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	601a      	str	r2, [r3, #0]
}
 8007f66:	bf00      	nop
 8007f68:	370c      	adds	r7, #12
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	40021000 	.word	0x40021000
 8007f78:	40022000 	.word	0x40022000

08007f7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b086      	sub	sp, #24
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007f84:	2300      	movs	r3, #0
 8007f86:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007f88:	4b27      	ldr	r3, [pc, #156]	; (8008028 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d003      	beq.n	8007f9c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007f94:	f7ff f8e4 	bl	8007160 <HAL_PWREx_GetVoltageRange>
 8007f98:	6178      	str	r0, [r7, #20]
 8007f9a:	e014      	b.n	8007fc6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007f9c:	4b22      	ldr	r3, [pc, #136]	; (8008028 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fa0:	4a21      	ldr	r2, [pc, #132]	; (8008028 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007fa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fa6:	6593      	str	r3, [r2, #88]	; 0x58
 8007fa8:	4b1f      	ldr	r3, [pc, #124]	; (8008028 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fb0:	60fb      	str	r3, [r7, #12]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007fb4:	f7ff f8d4 	bl	8007160 <HAL_PWREx_GetVoltageRange>
 8007fb8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007fba:	4b1b      	ldr	r3, [pc, #108]	; (8008028 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fbe:	4a1a      	ldr	r2, [pc, #104]	; (8008028 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007fc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fc4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fcc:	d10b      	bne.n	8007fe6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2b80      	cmp	r3, #128	; 0x80
 8007fd2:	d913      	bls.n	8007ffc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2ba0      	cmp	r3, #160	; 0xa0
 8007fd8:	d902      	bls.n	8007fe0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007fda:	2302      	movs	r3, #2
 8007fdc:	613b      	str	r3, [r7, #16]
 8007fde:	e00d      	b.n	8007ffc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	613b      	str	r3, [r7, #16]
 8007fe4:	e00a      	b.n	8007ffc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2b7f      	cmp	r3, #127	; 0x7f
 8007fea:	d902      	bls.n	8007ff2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8007fec:	2302      	movs	r3, #2
 8007fee:	613b      	str	r3, [r7, #16]
 8007ff0:	e004      	b.n	8007ffc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2b70      	cmp	r3, #112	; 0x70
 8007ff6:	d101      	bne.n	8007ffc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007ffc:	4b0b      	ldr	r3, [pc, #44]	; (800802c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f023 020f 	bic.w	r2, r3, #15
 8008004:	4909      	ldr	r1, [pc, #36]	; (800802c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	4313      	orrs	r3, r2
 800800a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800800c:	4b07      	ldr	r3, [pc, #28]	; (800802c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f003 030f 	and.w	r3, r3, #15
 8008014:	693a      	ldr	r2, [r7, #16]
 8008016:	429a      	cmp	r2, r3
 8008018:	d001      	beq.n	800801e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	e000      	b.n	8008020 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800801e:	2300      	movs	r3, #0
}
 8008020:	4618      	mov	r0, r3
 8008022:	3718      	adds	r7, #24
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}
 8008028:	40021000 	.word	0x40021000
 800802c:	40022000 	.word	0x40022000

08008030 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008030:	b480      	push	{r7}
 8008032:	b087      	sub	sp, #28
 8008034:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008036:	4b2d      	ldr	r3, [pc, #180]	; (80080ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008038:	68db      	ldr	r3, [r3, #12]
 800803a:	f003 0303 	and.w	r3, r3, #3
 800803e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2b03      	cmp	r3, #3
 8008044:	d00b      	beq.n	800805e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2b03      	cmp	r3, #3
 800804a:	d825      	bhi.n	8008098 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2b01      	cmp	r3, #1
 8008050:	d008      	beq.n	8008064 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2b02      	cmp	r3, #2
 8008056:	d11f      	bne.n	8008098 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8008058:	4b25      	ldr	r3, [pc, #148]	; (80080f0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800805a:	613b      	str	r3, [r7, #16]
    break;
 800805c:	e01f      	b.n	800809e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800805e:	4b25      	ldr	r3, [pc, #148]	; (80080f4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8008060:	613b      	str	r3, [r7, #16]
    break;
 8008062:	e01c      	b.n	800809e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008064:	4b21      	ldr	r3, [pc, #132]	; (80080ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f003 0308 	and.w	r3, r3, #8
 800806c:	2b00      	cmp	r3, #0
 800806e:	d107      	bne.n	8008080 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008070:	4b1e      	ldr	r3, [pc, #120]	; (80080ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008072:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008076:	0a1b      	lsrs	r3, r3, #8
 8008078:	f003 030f 	and.w	r3, r3, #15
 800807c:	617b      	str	r3, [r7, #20]
 800807e:	e005      	b.n	800808c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008080:	4b1a      	ldr	r3, [pc, #104]	; (80080ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	091b      	lsrs	r3, r3, #4
 8008086:	f003 030f 	and.w	r3, r3, #15
 800808a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800808c:	4a1a      	ldr	r2, [pc, #104]	; (80080f8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008094:	613b      	str	r3, [r7, #16]
    break;
 8008096:	e002      	b.n	800809e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8008098:	2300      	movs	r3, #0
 800809a:	613b      	str	r3, [r7, #16]
    break;
 800809c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800809e:	4b13      	ldr	r3, [pc, #76]	; (80080ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	091b      	lsrs	r3, r3, #4
 80080a4:	f003 030f 	and.w	r3, r3, #15
 80080a8:	3301      	adds	r3, #1
 80080aa:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80080ac:	4b0f      	ldr	r3, [pc, #60]	; (80080ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	0a1b      	lsrs	r3, r3, #8
 80080b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080b6:	693a      	ldr	r2, [r7, #16]
 80080b8:	fb03 f202 	mul.w	r2, r3, r2
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	fbb2 f3f3 	udiv	r3, r2, r3
 80080c2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80080c4:	4b09      	ldr	r3, [pc, #36]	; (80080ec <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	0e5b      	lsrs	r3, r3, #25
 80080ca:	f003 0303 	and.w	r3, r3, #3
 80080ce:	3301      	adds	r3, #1
 80080d0:	005b      	lsls	r3, r3, #1
 80080d2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80080d4:	693a      	ldr	r2, [r7, #16]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80080dc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80080de:	683b      	ldr	r3, [r7, #0]
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	371c      	adds	r7, #28
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr
 80080ec:	40021000 	.word	0x40021000
 80080f0:	00f42400 	.word	0x00f42400
 80080f4:	007a1200 	.word	0x007a1200
 80080f8:	0800a81c 	.word	0x0800a81c

080080fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b086      	sub	sp, #24
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008104:	2300      	movs	r3, #0
 8008106:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008108:	2300      	movs	r3, #0
 800810a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008114:	2b00      	cmp	r3, #0
 8008116:	d040      	beq.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800811c:	2b80      	cmp	r3, #128	; 0x80
 800811e:	d02a      	beq.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008120:	2b80      	cmp	r3, #128	; 0x80
 8008122:	d825      	bhi.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8008124:	2b60      	cmp	r3, #96	; 0x60
 8008126:	d026      	beq.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008128:	2b60      	cmp	r3, #96	; 0x60
 800812a:	d821      	bhi.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800812c:	2b40      	cmp	r3, #64	; 0x40
 800812e:	d006      	beq.n	800813e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8008130:	2b40      	cmp	r3, #64	; 0x40
 8008132:	d81d      	bhi.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8008134:	2b00      	cmp	r3, #0
 8008136:	d009      	beq.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8008138:	2b20      	cmp	r3, #32
 800813a:	d010      	beq.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800813c:	e018      	b.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800813e:	4b89      	ldr	r3, [pc, #548]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	4a88      	ldr	r2, [pc, #544]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008148:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800814a:	e015      	b.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	3304      	adds	r3, #4
 8008150:	2100      	movs	r1, #0
 8008152:	4618      	mov	r0, r3
 8008154:	f000 fb12 	bl	800877c <RCCEx_PLLSAI1_Config>
 8008158:	4603      	mov	r3, r0
 800815a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800815c:	e00c      	b.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	3320      	adds	r3, #32
 8008162:	2100      	movs	r1, #0
 8008164:	4618      	mov	r0, r3
 8008166:	f000 fbfd 	bl	8008964 <RCCEx_PLLSAI2_Config>
 800816a:	4603      	mov	r3, r0
 800816c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800816e:	e003      	b.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008170:	2301      	movs	r3, #1
 8008172:	74fb      	strb	r3, [r7, #19]
      break;
 8008174:	e000      	b.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8008176:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008178:	7cfb      	ldrb	r3, [r7, #19]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d10b      	bne.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800817e:	4b79      	ldr	r3, [pc, #484]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008180:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008184:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800818c:	4975      	ldr	r1, [pc, #468]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800818e:	4313      	orrs	r3, r2
 8008190:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8008194:	e001      	b.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008196:	7cfb      	ldrb	r3, [r7, #19]
 8008198:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d047      	beq.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081ae:	d030      	beq.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80081b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081b4:	d82a      	bhi.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80081b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081ba:	d02a      	beq.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80081bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081c0:	d824      	bhi.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80081c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081c6:	d008      	beq.n	80081da <HAL_RCCEx_PeriphCLKConfig+0xde>
 80081c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081cc:	d81e      	bhi.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d00a      	beq.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80081d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081d6:	d010      	beq.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80081d8:	e018      	b.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80081da:	4b62      	ldr	r3, [pc, #392]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	4a61      	ldr	r2, [pc, #388]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80081e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081e4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80081e6:	e015      	b.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	3304      	adds	r3, #4
 80081ec:	2100      	movs	r1, #0
 80081ee:	4618      	mov	r0, r3
 80081f0:	f000 fac4 	bl	800877c <RCCEx_PLLSAI1_Config>
 80081f4:	4603      	mov	r3, r0
 80081f6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80081f8:	e00c      	b.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	3320      	adds	r3, #32
 80081fe:	2100      	movs	r1, #0
 8008200:	4618      	mov	r0, r3
 8008202:	f000 fbaf 	bl	8008964 <RCCEx_PLLSAI2_Config>
 8008206:	4603      	mov	r3, r0
 8008208:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800820a:	e003      	b.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	74fb      	strb	r3, [r7, #19]
      break;
 8008210:	e000      	b.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8008212:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008214:	7cfb      	ldrb	r3, [r7, #19]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d10b      	bne.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800821a:	4b52      	ldr	r3, [pc, #328]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800821c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008220:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008228:	494e      	ldr	r1, [pc, #312]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800822a:	4313      	orrs	r3, r2
 800822c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8008230:	e001      	b.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008232:	7cfb      	ldrb	r3, [r7, #19]
 8008234:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800823e:	2b00      	cmp	r3, #0
 8008240:	f000 809f 	beq.w	8008382 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008244:	2300      	movs	r3, #0
 8008246:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008248:	4b46      	ldr	r3, [pc, #280]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800824a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800824c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008250:	2b00      	cmp	r3, #0
 8008252:	d101      	bne.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8008254:	2301      	movs	r3, #1
 8008256:	e000      	b.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8008258:	2300      	movs	r3, #0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00d      	beq.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800825e:	4b41      	ldr	r3, [pc, #260]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008262:	4a40      	ldr	r2, [pc, #256]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008268:	6593      	str	r3, [r2, #88]	; 0x58
 800826a:	4b3e      	ldr	r3, [pc, #248]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800826c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800826e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008272:	60bb      	str	r3, [r7, #8]
 8008274:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008276:	2301      	movs	r3, #1
 8008278:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800827a:	4b3b      	ldr	r3, [pc, #236]	; (8008368 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a3a      	ldr	r2, [pc, #232]	; (8008368 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008284:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008286:	f7fb fad7 	bl	8003838 <HAL_GetTick>
 800828a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800828c:	e009      	b.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800828e:	f7fb fad3 	bl	8003838 <HAL_GetTick>
 8008292:	4602      	mov	r2, r0
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	1ad3      	subs	r3, r2, r3
 8008298:	2b02      	cmp	r3, #2
 800829a:	d902      	bls.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800829c:	2303      	movs	r3, #3
 800829e:	74fb      	strb	r3, [r7, #19]
        break;
 80082a0:	e005      	b.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80082a2:	4b31      	ldr	r3, [pc, #196]	; (8008368 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d0ef      	beq.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80082ae:	7cfb      	ldrb	r3, [r7, #19]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d15b      	bne.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80082b4:	4b2b      	ldr	r3, [pc, #172]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80082b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082be:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d01f      	beq.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082cc:	697a      	ldr	r2, [r7, #20]
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d019      	beq.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80082d2:	4b24      	ldr	r3, [pc, #144]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80082d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082dc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80082de:	4b21      	ldr	r3, [pc, #132]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80082e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082e4:	4a1f      	ldr	r2, [pc, #124]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80082e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80082ee:	4b1d      	ldr	r3, [pc, #116]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80082f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082f4:	4a1b      	ldr	r2, [pc, #108]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80082f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80082fe:	4a19      	ldr	r2, [pc, #100]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	f003 0301 	and.w	r3, r3, #1
 800830c:	2b00      	cmp	r3, #0
 800830e:	d016      	beq.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008310:	f7fb fa92 	bl	8003838 <HAL_GetTick>
 8008314:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008316:	e00b      	b.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008318:	f7fb fa8e 	bl	8003838 <HAL_GetTick>
 800831c:	4602      	mov	r2, r0
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	1ad3      	subs	r3, r2, r3
 8008322:	f241 3288 	movw	r2, #5000	; 0x1388
 8008326:	4293      	cmp	r3, r2
 8008328:	d902      	bls.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800832a:	2303      	movs	r3, #3
 800832c:	74fb      	strb	r3, [r7, #19]
            break;
 800832e:	e006      	b.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008330:	4b0c      	ldr	r3, [pc, #48]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008336:	f003 0302 	and.w	r3, r3, #2
 800833a:	2b00      	cmp	r3, #0
 800833c:	d0ec      	beq.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800833e:	7cfb      	ldrb	r3, [r7, #19]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d10c      	bne.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008344:	4b07      	ldr	r3, [pc, #28]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800834a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008354:	4903      	ldr	r1, [pc, #12]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008356:	4313      	orrs	r3, r2
 8008358:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800835c:	e008      	b.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800835e:	7cfb      	ldrb	r3, [r7, #19]
 8008360:	74bb      	strb	r3, [r7, #18]
 8008362:	e005      	b.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8008364:	40021000 	.word	0x40021000
 8008368:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800836c:	7cfb      	ldrb	r3, [r7, #19]
 800836e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008370:	7c7b      	ldrb	r3, [r7, #17]
 8008372:	2b01      	cmp	r3, #1
 8008374:	d105      	bne.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008376:	4ba0      	ldr	r3, [pc, #640]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800837a:	4a9f      	ldr	r2, [pc, #636]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800837c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008380:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f003 0301 	and.w	r3, r3, #1
 800838a:	2b00      	cmp	r3, #0
 800838c:	d00a      	beq.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800838e:	4b9a      	ldr	r3, [pc, #616]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008394:	f023 0203 	bic.w	r2, r3, #3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800839c:	4996      	ldr	r1, [pc, #600]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800839e:	4313      	orrs	r3, r2
 80083a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f003 0302 	and.w	r3, r3, #2
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d00a      	beq.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80083b0:	4b91      	ldr	r3, [pc, #580]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80083b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083b6:	f023 020c 	bic.w	r2, r3, #12
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083be:	498e      	ldr	r1, [pc, #568]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80083c0:	4313      	orrs	r3, r2
 80083c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f003 0304 	and.w	r3, r3, #4
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d00a      	beq.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80083d2:	4b89      	ldr	r3, [pc, #548]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80083d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083e0:	4985      	ldr	r1, [pc, #532]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80083e2:	4313      	orrs	r3, r2
 80083e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f003 0308 	and.w	r3, r3, #8
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d00a      	beq.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80083f4:	4b80      	ldr	r3, [pc, #512]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80083f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008402:	497d      	ldr	r1, [pc, #500]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008404:	4313      	orrs	r3, r2
 8008406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f003 0310 	and.w	r3, r3, #16
 8008412:	2b00      	cmp	r3, #0
 8008414:	d00a      	beq.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008416:	4b78      	ldr	r3, [pc, #480]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800841c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008424:	4974      	ldr	r1, [pc, #464]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008426:	4313      	orrs	r3, r2
 8008428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f003 0320 	and.w	r3, r3, #32
 8008434:	2b00      	cmp	r3, #0
 8008436:	d00a      	beq.n	800844e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008438:	4b6f      	ldr	r3, [pc, #444]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800843a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800843e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008446:	496c      	ldr	r1, [pc, #432]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008448:	4313      	orrs	r3, r2
 800844a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008456:	2b00      	cmp	r3, #0
 8008458:	d00a      	beq.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800845a:	4b67      	ldr	r3, [pc, #412]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800845c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008460:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008468:	4963      	ldr	r1, [pc, #396]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800846a:	4313      	orrs	r3, r2
 800846c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008478:	2b00      	cmp	r3, #0
 800847a:	d00a      	beq.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800847c:	4b5e      	ldr	r3, [pc, #376]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800847e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008482:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800848a:	495b      	ldr	r1, [pc, #364]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800848c:	4313      	orrs	r3, r2
 800848e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800849a:	2b00      	cmp	r3, #0
 800849c:	d00a      	beq.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800849e:	4b56      	ldr	r3, [pc, #344]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80084a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084ac:	4952      	ldr	r1, [pc, #328]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80084ae:	4313      	orrs	r3, r2
 80084b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d00a      	beq.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80084c0:	4b4d      	ldr	r3, [pc, #308]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80084c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084ce:	494a      	ldr	r1, [pc, #296]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80084d0:	4313      	orrs	r3, r2
 80084d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d00a      	beq.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80084e2:	4b45      	ldr	r3, [pc, #276]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80084e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084f0:	4941      	ldr	r1, [pc, #260]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80084f2:	4313      	orrs	r3, r2
 80084f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008500:	2b00      	cmp	r3, #0
 8008502:	d00a      	beq.n	800851a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008504:	4b3c      	ldr	r3, [pc, #240]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008506:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800850a:	f023 0203 	bic.w	r2, r3, #3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008512:	4939      	ldr	r1, [pc, #228]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008514:	4313      	orrs	r3, r2
 8008516:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008522:	2b00      	cmp	r3, #0
 8008524:	d028      	beq.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008526:	4b34      	ldr	r3, [pc, #208]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800852c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008534:	4930      	ldr	r1, [pc, #192]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008536:	4313      	orrs	r3, r2
 8008538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008540:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008544:	d106      	bne.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008546:	4b2c      	ldr	r3, [pc, #176]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008548:	68db      	ldr	r3, [r3, #12]
 800854a:	4a2b      	ldr	r2, [pc, #172]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800854c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008550:	60d3      	str	r3, [r2, #12]
 8008552:	e011      	b.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008558:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800855c:	d10c      	bne.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	3304      	adds	r3, #4
 8008562:	2101      	movs	r1, #1
 8008564:	4618      	mov	r0, r3
 8008566:	f000 f909 	bl	800877c <RCCEx_PLLSAI1_Config>
 800856a:	4603      	mov	r3, r0
 800856c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800856e:	7cfb      	ldrb	r3, [r7, #19]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d001      	beq.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8008574:	7cfb      	ldrb	r3, [r7, #19]
 8008576:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008580:	2b00      	cmp	r3, #0
 8008582:	d04d      	beq.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008588:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800858c:	d108      	bne.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800858e:	4b1a      	ldr	r3, [pc, #104]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008590:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008594:	4a18      	ldr	r2, [pc, #96]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008596:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800859a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800859e:	e012      	b.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80085a0:	4b15      	ldr	r3, [pc, #84]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80085a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80085a6:	4a14      	ldr	r2, [pc, #80]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80085a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085ac:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80085b0:	4b11      	ldr	r3, [pc, #68]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80085b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085be:	490e      	ldr	r1, [pc, #56]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80085c0:	4313      	orrs	r3, r2
 80085c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085ce:	d106      	bne.n	80085de <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80085d0:	4b09      	ldr	r3, [pc, #36]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80085d2:	68db      	ldr	r3, [r3, #12]
 80085d4:	4a08      	ldr	r2, [pc, #32]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80085d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085da:	60d3      	str	r3, [r2, #12]
 80085dc:	e020      	b.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085e6:	d109      	bne.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80085e8:	4b03      	ldr	r3, [pc, #12]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	4a02      	ldr	r2, [pc, #8]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80085ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085f2:	60d3      	str	r3, [r2, #12]
 80085f4:	e014      	b.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80085f6:	bf00      	nop
 80085f8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008600:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008604:	d10c      	bne.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	3304      	adds	r3, #4
 800860a:	2101      	movs	r1, #1
 800860c:	4618      	mov	r0, r3
 800860e:	f000 f8b5 	bl	800877c <RCCEx_PLLSAI1_Config>
 8008612:	4603      	mov	r3, r0
 8008614:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008616:	7cfb      	ldrb	r3, [r7, #19]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d001      	beq.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800861c:	7cfb      	ldrb	r3, [r7, #19]
 800861e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008628:	2b00      	cmp	r3, #0
 800862a:	d028      	beq.n	800867e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800862c:	4b4a      	ldr	r3, [pc, #296]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800862e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008632:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800863a:	4947      	ldr	r1, [pc, #284]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800863c:	4313      	orrs	r3, r2
 800863e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008646:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800864a:	d106      	bne.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800864c:	4b42      	ldr	r3, [pc, #264]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800864e:	68db      	ldr	r3, [r3, #12]
 8008650:	4a41      	ldr	r2, [pc, #260]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008652:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008656:	60d3      	str	r3, [r2, #12]
 8008658:	e011      	b.n	800867e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800865e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008662:	d10c      	bne.n	800867e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	3304      	adds	r3, #4
 8008668:	2101      	movs	r1, #1
 800866a:	4618      	mov	r0, r3
 800866c:	f000 f886 	bl	800877c <RCCEx_PLLSAI1_Config>
 8008670:	4603      	mov	r3, r0
 8008672:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008674:	7cfb      	ldrb	r3, [r7, #19]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d001      	beq.n	800867e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800867a:	7cfb      	ldrb	r3, [r7, #19]
 800867c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008686:	2b00      	cmp	r3, #0
 8008688:	d01e      	beq.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800868a:	4b33      	ldr	r3, [pc, #204]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800868c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008690:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800869a:	492f      	ldr	r1, [pc, #188]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800869c:	4313      	orrs	r3, r2
 800869e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086ac:	d10c      	bne.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	3304      	adds	r3, #4
 80086b2:	2102      	movs	r1, #2
 80086b4:	4618      	mov	r0, r3
 80086b6:	f000 f861 	bl	800877c <RCCEx_PLLSAI1_Config>
 80086ba:	4603      	mov	r3, r0
 80086bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80086be:	7cfb      	ldrb	r3, [r7, #19]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d001      	beq.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80086c4:	7cfb      	ldrb	r3, [r7, #19]
 80086c6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d00b      	beq.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80086d4:	4b20      	ldr	r3, [pc, #128]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80086da:	f023 0204 	bic.w	r2, r3, #4
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086e4:	491c      	ldr	r1, [pc, #112]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086e6:	4313      	orrs	r3, r2
 80086e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d00b      	beq.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80086f8:	4b17      	ldr	r3, [pc, #92]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80086fe:	f023 0218 	bic.w	r2, r3, #24
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008708:	4913      	ldr	r1, [pc, #76]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800870a:	4313      	orrs	r3, r2
 800870c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008718:	2b00      	cmp	r3, #0
 800871a:	d017      	beq.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800871c:	4b0e      	ldr	r3, [pc, #56]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800871e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008722:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800872c:	490a      	ldr	r1, [pc, #40]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800872e:	4313      	orrs	r3, r2
 8008730:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800873a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800873e:	d105      	bne.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008740:	4b05      	ldr	r3, [pc, #20]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	4a04      	ldr	r2, [pc, #16]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008746:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800874a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800874c:	7cbb      	ldrb	r3, [r7, #18]
}
 800874e:	4618      	mov	r0, r3
 8008750:	3718      	adds	r7, #24
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	40021000 	.word	0x40021000

0800875c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800875c:	b480      	push	{r7}
 800875e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8008760:	4b05      	ldr	r3, [pc, #20]	; (8008778 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a04      	ldr	r2, [pc, #16]	; (8008778 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8008766:	f043 0304 	orr.w	r3, r3, #4
 800876a:	6013      	str	r3, [r2, #0]
}
 800876c:	bf00      	nop
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr
 8008776:	bf00      	nop
 8008778:	40021000 	.word	0x40021000

0800877c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008786:	2300      	movs	r3, #0
 8008788:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800878a:	4b72      	ldr	r3, [pc, #456]	; (8008954 <RCCEx_PLLSAI1_Config+0x1d8>)
 800878c:	68db      	ldr	r3, [r3, #12]
 800878e:	f003 0303 	and.w	r3, r3, #3
 8008792:	2b00      	cmp	r3, #0
 8008794:	d00e      	beq.n	80087b4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008796:	4b6f      	ldr	r3, [pc, #444]	; (8008954 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	f003 0203 	and.w	r2, r3, #3
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d103      	bne.n	80087ae <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
       ||
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d142      	bne.n	8008834 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	73fb      	strb	r3, [r7, #15]
 80087b2:	e03f      	b.n	8008834 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	2b03      	cmp	r3, #3
 80087ba:	d018      	beq.n	80087ee <RCCEx_PLLSAI1_Config+0x72>
 80087bc:	2b03      	cmp	r3, #3
 80087be:	d825      	bhi.n	800880c <RCCEx_PLLSAI1_Config+0x90>
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d002      	beq.n	80087ca <RCCEx_PLLSAI1_Config+0x4e>
 80087c4:	2b02      	cmp	r3, #2
 80087c6:	d009      	beq.n	80087dc <RCCEx_PLLSAI1_Config+0x60>
 80087c8:	e020      	b.n	800880c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80087ca:	4b62      	ldr	r3, [pc, #392]	; (8008954 <RCCEx_PLLSAI1_Config+0x1d8>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f003 0302 	and.w	r3, r3, #2
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d11d      	bne.n	8008812 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80087d6:	2301      	movs	r3, #1
 80087d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80087da:	e01a      	b.n	8008812 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80087dc:	4b5d      	ldr	r3, [pc, #372]	; (8008954 <RCCEx_PLLSAI1_Config+0x1d8>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d116      	bne.n	8008816 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80087e8:	2301      	movs	r3, #1
 80087ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80087ec:	e013      	b.n	8008816 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80087ee:	4b59      	ldr	r3, [pc, #356]	; (8008954 <RCCEx_PLLSAI1_Config+0x1d8>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d10f      	bne.n	800881a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80087fa:	4b56      	ldr	r3, [pc, #344]	; (8008954 <RCCEx_PLLSAI1_Config+0x1d8>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008802:	2b00      	cmp	r3, #0
 8008804:	d109      	bne.n	800881a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8008806:	2301      	movs	r3, #1
 8008808:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800880a:	e006      	b.n	800881a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	73fb      	strb	r3, [r7, #15]
      break;
 8008810:	e004      	b.n	800881c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8008812:	bf00      	nop
 8008814:	e002      	b.n	800881c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8008816:	bf00      	nop
 8008818:	e000      	b.n	800881c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800881a:	bf00      	nop
    }

    if(status == HAL_OK)
 800881c:	7bfb      	ldrb	r3, [r7, #15]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d108      	bne.n	8008834 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8008822:	4b4c      	ldr	r3, [pc, #304]	; (8008954 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	f023 0203 	bic.w	r2, r3, #3
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4949      	ldr	r1, [pc, #292]	; (8008954 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008830:	4313      	orrs	r3, r2
 8008832:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8008834:	7bfb      	ldrb	r3, [r7, #15]
 8008836:	2b00      	cmp	r3, #0
 8008838:	f040 8086 	bne.w	8008948 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800883c:	4b45      	ldr	r3, [pc, #276]	; (8008954 <RCCEx_PLLSAI1_Config+0x1d8>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a44      	ldr	r2, [pc, #272]	; (8008954 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008842:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008846:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008848:	f7fa fff6 	bl	8003838 <HAL_GetTick>
 800884c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800884e:	e009      	b.n	8008864 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008850:	f7fa fff2 	bl	8003838 <HAL_GetTick>
 8008854:	4602      	mov	r2, r0
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	1ad3      	subs	r3, r2, r3
 800885a:	2b02      	cmp	r3, #2
 800885c:	d902      	bls.n	8008864 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800885e:	2303      	movs	r3, #3
 8008860:	73fb      	strb	r3, [r7, #15]
        break;
 8008862:	e005      	b.n	8008870 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008864:	4b3b      	ldr	r3, [pc, #236]	; (8008954 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800886c:	2b00      	cmp	r3, #0
 800886e:	d1ef      	bne.n	8008850 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8008870:	7bfb      	ldrb	r3, [r7, #15]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d168      	bne.n	8008948 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d113      	bne.n	80088a4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800887c:	4b35      	ldr	r3, [pc, #212]	; (8008954 <RCCEx_PLLSAI1_Config+0x1d8>)
 800887e:	691a      	ldr	r2, [r3, #16]
 8008880:	4b35      	ldr	r3, [pc, #212]	; (8008958 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008882:	4013      	ands	r3, r2
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	6892      	ldr	r2, [r2, #8]
 8008888:	0211      	lsls	r1, r2, #8
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	68d2      	ldr	r2, [r2, #12]
 800888e:	06d2      	lsls	r2, r2, #27
 8008890:	4311      	orrs	r1, r2
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	6852      	ldr	r2, [r2, #4]
 8008896:	3a01      	subs	r2, #1
 8008898:	0112      	lsls	r2, r2, #4
 800889a:	430a      	orrs	r2, r1
 800889c:	492d      	ldr	r1, [pc, #180]	; (8008954 <RCCEx_PLLSAI1_Config+0x1d8>)
 800889e:	4313      	orrs	r3, r2
 80088a0:	610b      	str	r3, [r1, #16]
 80088a2:	e02d      	b.n	8008900 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d115      	bne.n	80088d6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80088aa:	4b2a      	ldr	r3, [pc, #168]	; (8008954 <RCCEx_PLLSAI1_Config+0x1d8>)
 80088ac:	691a      	ldr	r2, [r3, #16]
 80088ae:	4b2b      	ldr	r3, [pc, #172]	; (800895c <RCCEx_PLLSAI1_Config+0x1e0>)
 80088b0:	4013      	ands	r3, r2
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	6892      	ldr	r2, [r2, #8]
 80088b6:	0211      	lsls	r1, r2, #8
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	6912      	ldr	r2, [r2, #16]
 80088bc:	0852      	lsrs	r2, r2, #1
 80088be:	3a01      	subs	r2, #1
 80088c0:	0552      	lsls	r2, r2, #21
 80088c2:	4311      	orrs	r1, r2
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	6852      	ldr	r2, [r2, #4]
 80088c8:	3a01      	subs	r2, #1
 80088ca:	0112      	lsls	r2, r2, #4
 80088cc:	430a      	orrs	r2, r1
 80088ce:	4921      	ldr	r1, [pc, #132]	; (8008954 <RCCEx_PLLSAI1_Config+0x1d8>)
 80088d0:	4313      	orrs	r3, r2
 80088d2:	610b      	str	r3, [r1, #16]
 80088d4:	e014      	b.n	8008900 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80088d6:	4b1f      	ldr	r3, [pc, #124]	; (8008954 <RCCEx_PLLSAI1_Config+0x1d8>)
 80088d8:	691a      	ldr	r2, [r3, #16]
 80088da:	4b21      	ldr	r3, [pc, #132]	; (8008960 <RCCEx_PLLSAI1_Config+0x1e4>)
 80088dc:	4013      	ands	r3, r2
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	6892      	ldr	r2, [r2, #8]
 80088e2:	0211      	lsls	r1, r2, #8
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	6952      	ldr	r2, [r2, #20]
 80088e8:	0852      	lsrs	r2, r2, #1
 80088ea:	3a01      	subs	r2, #1
 80088ec:	0652      	lsls	r2, r2, #25
 80088ee:	4311      	orrs	r1, r2
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	6852      	ldr	r2, [r2, #4]
 80088f4:	3a01      	subs	r2, #1
 80088f6:	0112      	lsls	r2, r2, #4
 80088f8:	430a      	orrs	r2, r1
 80088fa:	4916      	ldr	r1, [pc, #88]	; (8008954 <RCCEx_PLLSAI1_Config+0x1d8>)
 80088fc:	4313      	orrs	r3, r2
 80088fe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008900:	4b14      	ldr	r3, [pc, #80]	; (8008954 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a13      	ldr	r2, [pc, #76]	; (8008954 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008906:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800890a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800890c:	f7fa ff94 	bl	8003838 <HAL_GetTick>
 8008910:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008912:	e009      	b.n	8008928 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008914:	f7fa ff90 	bl	8003838 <HAL_GetTick>
 8008918:	4602      	mov	r2, r0
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	1ad3      	subs	r3, r2, r3
 800891e:	2b02      	cmp	r3, #2
 8008920:	d902      	bls.n	8008928 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8008922:	2303      	movs	r3, #3
 8008924:	73fb      	strb	r3, [r7, #15]
          break;
 8008926:	e005      	b.n	8008934 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008928:	4b0a      	ldr	r3, [pc, #40]	; (8008954 <RCCEx_PLLSAI1_Config+0x1d8>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008930:	2b00      	cmp	r3, #0
 8008932:	d0ef      	beq.n	8008914 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8008934:	7bfb      	ldrb	r3, [r7, #15]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d106      	bne.n	8008948 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800893a:	4b06      	ldr	r3, [pc, #24]	; (8008954 <RCCEx_PLLSAI1_Config+0x1d8>)
 800893c:	691a      	ldr	r2, [r3, #16]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	699b      	ldr	r3, [r3, #24]
 8008942:	4904      	ldr	r1, [pc, #16]	; (8008954 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008944:	4313      	orrs	r3, r2
 8008946:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008948:	7bfb      	ldrb	r3, [r7, #15]
}
 800894a:	4618      	mov	r0, r3
 800894c:	3710      	adds	r7, #16
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	bf00      	nop
 8008954:	40021000 	.word	0x40021000
 8008958:	07ff800f 	.word	0x07ff800f
 800895c:	ff9f800f 	.word	0xff9f800f
 8008960:	f9ff800f 	.word	0xf9ff800f

08008964 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b084      	sub	sp, #16
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800896e:	2300      	movs	r3, #0
 8008970:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008972:	4b72      	ldr	r3, [pc, #456]	; (8008b3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	f003 0303 	and.w	r3, r3, #3
 800897a:	2b00      	cmp	r3, #0
 800897c:	d00e      	beq.n	800899c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800897e:	4b6f      	ldr	r3, [pc, #444]	; (8008b3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008980:	68db      	ldr	r3, [r3, #12]
 8008982:	f003 0203 	and.w	r2, r3, #3
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	429a      	cmp	r2, r3
 800898c:	d103      	bne.n	8008996 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
       ||
 8008992:	2b00      	cmp	r3, #0
 8008994:	d142      	bne.n	8008a1c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8008996:	2301      	movs	r3, #1
 8008998:	73fb      	strb	r3, [r7, #15]
 800899a:	e03f      	b.n	8008a1c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	2b03      	cmp	r3, #3
 80089a2:	d018      	beq.n	80089d6 <RCCEx_PLLSAI2_Config+0x72>
 80089a4:	2b03      	cmp	r3, #3
 80089a6:	d825      	bhi.n	80089f4 <RCCEx_PLLSAI2_Config+0x90>
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d002      	beq.n	80089b2 <RCCEx_PLLSAI2_Config+0x4e>
 80089ac:	2b02      	cmp	r3, #2
 80089ae:	d009      	beq.n	80089c4 <RCCEx_PLLSAI2_Config+0x60>
 80089b0:	e020      	b.n	80089f4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80089b2:	4b62      	ldr	r3, [pc, #392]	; (8008b3c <RCCEx_PLLSAI2_Config+0x1d8>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f003 0302 	and.w	r3, r3, #2
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d11d      	bne.n	80089fa <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80089c2:	e01a      	b.n	80089fa <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80089c4:	4b5d      	ldr	r3, [pc, #372]	; (8008b3c <RCCEx_PLLSAI2_Config+0x1d8>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d116      	bne.n	80089fe <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80089d0:	2301      	movs	r3, #1
 80089d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80089d4:	e013      	b.n	80089fe <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80089d6:	4b59      	ldr	r3, [pc, #356]	; (8008b3c <RCCEx_PLLSAI2_Config+0x1d8>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d10f      	bne.n	8008a02 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80089e2:	4b56      	ldr	r3, [pc, #344]	; (8008b3c <RCCEx_PLLSAI2_Config+0x1d8>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d109      	bne.n	8008a02 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80089f2:	e006      	b.n	8008a02 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80089f4:	2301      	movs	r3, #1
 80089f6:	73fb      	strb	r3, [r7, #15]
      break;
 80089f8:	e004      	b.n	8008a04 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80089fa:	bf00      	nop
 80089fc:	e002      	b.n	8008a04 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80089fe:	bf00      	nop
 8008a00:	e000      	b.n	8008a04 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008a02:	bf00      	nop
    }

    if(status == HAL_OK)
 8008a04:	7bfb      	ldrb	r3, [r7, #15]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d108      	bne.n	8008a1c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8008a0a:	4b4c      	ldr	r3, [pc, #304]	; (8008b3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008a0c:	68db      	ldr	r3, [r3, #12]
 8008a0e:	f023 0203 	bic.w	r2, r3, #3
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4949      	ldr	r1, [pc, #292]	; (8008b3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8008a1c:	7bfb      	ldrb	r3, [r7, #15]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	f040 8086 	bne.w	8008b30 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008a24:	4b45      	ldr	r3, [pc, #276]	; (8008b3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a44      	ldr	r2, [pc, #272]	; (8008b3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008a2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a30:	f7fa ff02 	bl	8003838 <HAL_GetTick>
 8008a34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008a36:	e009      	b.n	8008a4c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008a38:	f7fa fefe 	bl	8003838 <HAL_GetTick>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	1ad3      	subs	r3, r2, r3
 8008a42:	2b02      	cmp	r3, #2
 8008a44:	d902      	bls.n	8008a4c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8008a46:	2303      	movs	r3, #3
 8008a48:	73fb      	strb	r3, [r7, #15]
        break;
 8008a4a:	e005      	b.n	8008a58 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008a4c:	4b3b      	ldr	r3, [pc, #236]	; (8008b3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d1ef      	bne.n	8008a38 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8008a58:	7bfb      	ldrb	r3, [r7, #15]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d168      	bne.n	8008b30 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d113      	bne.n	8008a8c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008a64:	4b35      	ldr	r3, [pc, #212]	; (8008b3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008a66:	695a      	ldr	r2, [r3, #20]
 8008a68:	4b35      	ldr	r3, [pc, #212]	; (8008b40 <RCCEx_PLLSAI2_Config+0x1dc>)
 8008a6a:	4013      	ands	r3, r2
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	6892      	ldr	r2, [r2, #8]
 8008a70:	0211      	lsls	r1, r2, #8
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	68d2      	ldr	r2, [r2, #12]
 8008a76:	06d2      	lsls	r2, r2, #27
 8008a78:	4311      	orrs	r1, r2
 8008a7a:	687a      	ldr	r2, [r7, #4]
 8008a7c:	6852      	ldr	r2, [r2, #4]
 8008a7e:	3a01      	subs	r2, #1
 8008a80:	0112      	lsls	r2, r2, #4
 8008a82:	430a      	orrs	r2, r1
 8008a84:	492d      	ldr	r1, [pc, #180]	; (8008b3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008a86:	4313      	orrs	r3, r2
 8008a88:	614b      	str	r3, [r1, #20]
 8008a8a:	e02d      	b.n	8008ae8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d115      	bne.n	8008abe <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008a92:	4b2a      	ldr	r3, [pc, #168]	; (8008b3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008a94:	695a      	ldr	r2, [r3, #20]
 8008a96:	4b2b      	ldr	r3, [pc, #172]	; (8008b44 <RCCEx_PLLSAI2_Config+0x1e0>)
 8008a98:	4013      	ands	r3, r2
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	6892      	ldr	r2, [r2, #8]
 8008a9e:	0211      	lsls	r1, r2, #8
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	6912      	ldr	r2, [r2, #16]
 8008aa4:	0852      	lsrs	r2, r2, #1
 8008aa6:	3a01      	subs	r2, #1
 8008aa8:	0552      	lsls	r2, r2, #21
 8008aaa:	4311      	orrs	r1, r2
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	6852      	ldr	r2, [r2, #4]
 8008ab0:	3a01      	subs	r2, #1
 8008ab2:	0112      	lsls	r2, r2, #4
 8008ab4:	430a      	orrs	r2, r1
 8008ab6:	4921      	ldr	r1, [pc, #132]	; (8008b3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	614b      	str	r3, [r1, #20]
 8008abc:	e014      	b.n	8008ae8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008abe:	4b1f      	ldr	r3, [pc, #124]	; (8008b3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008ac0:	695a      	ldr	r2, [r3, #20]
 8008ac2:	4b21      	ldr	r3, [pc, #132]	; (8008b48 <RCCEx_PLLSAI2_Config+0x1e4>)
 8008ac4:	4013      	ands	r3, r2
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	6892      	ldr	r2, [r2, #8]
 8008aca:	0211      	lsls	r1, r2, #8
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	6952      	ldr	r2, [r2, #20]
 8008ad0:	0852      	lsrs	r2, r2, #1
 8008ad2:	3a01      	subs	r2, #1
 8008ad4:	0652      	lsls	r2, r2, #25
 8008ad6:	4311      	orrs	r1, r2
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	6852      	ldr	r2, [r2, #4]
 8008adc:	3a01      	subs	r2, #1
 8008ade:	0112      	lsls	r2, r2, #4
 8008ae0:	430a      	orrs	r2, r1
 8008ae2:	4916      	ldr	r1, [pc, #88]	; (8008b3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008ae8:	4b14      	ldr	r3, [pc, #80]	; (8008b3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a13      	ldr	r2, [pc, #76]	; (8008b3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008af2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008af4:	f7fa fea0 	bl	8003838 <HAL_GetTick>
 8008af8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008afa:	e009      	b.n	8008b10 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008afc:	f7fa fe9c 	bl	8003838 <HAL_GetTick>
 8008b00:	4602      	mov	r2, r0
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	1ad3      	subs	r3, r2, r3
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	d902      	bls.n	8008b10 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8008b0a:	2303      	movs	r3, #3
 8008b0c:	73fb      	strb	r3, [r7, #15]
          break;
 8008b0e:	e005      	b.n	8008b1c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008b10:	4b0a      	ldr	r3, [pc, #40]	; (8008b3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d0ef      	beq.n	8008afc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8008b1c:	7bfb      	ldrb	r3, [r7, #15]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d106      	bne.n	8008b30 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008b22:	4b06      	ldr	r3, [pc, #24]	; (8008b3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008b24:	695a      	ldr	r2, [r3, #20]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	699b      	ldr	r3, [r3, #24]
 8008b2a:	4904      	ldr	r1, [pc, #16]	; (8008b3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3710      	adds	r7, #16
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	40021000 	.word	0x40021000
 8008b40:	07ff800f 	.word	0x07ff800f
 8008b44:	ff9f800f 	.word	0xff9f800f
 8008b48:	f9ff800f 	.word	0xf9ff800f

08008b4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d101      	bne.n	8008b5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	e095      	b.n	8008c8a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d108      	bne.n	8008b78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b6e:	d009      	beq.n	8008b84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2200      	movs	r2, #0
 8008b74:	61da      	str	r2, [r3, #28]
 8008b76:	e005      	b.n	8008b84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2200      	movs	r2, #0
 8008b82:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2200      	movs	r2, #0
 8008b88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d106      	bne.n	8008ba4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f7fa fb40 	bl	8003224 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2202      	movs	r2, #2
 8008ba8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008bc4:	d902      	bls.n	8008bcc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	60fb      	str	r3, [r7, #12]
 8008bca:	e002      	b.n	8008bd2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008bd0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	68db      	ldr	r3, [r3, #12]
 8008bd6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008bda:	d007      	beq.n	8008bec <HAL_SPI_Init+0xa0>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008be4:	d002      	beq.n	8008bec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008bfc:	431a      	orrs	r2, r3
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	691b      	ldr	r3, [r3, #16]
 8008c02:	f003 0302 	and.w	r3, r3, #2
 8008c06:	431a      	orrs	r2, r3
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	695b      	ldr	r3, [r3, #20]
 8008c0c:	f003 0301 	and.w	r3, r3, #1
 8008c10:	431a      	orrs	r2, r3
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	699b      	ldr	r3, [r3, #24]
 8008c16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c1a:	431a      	orrs	r2, r3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	69db      	ldr	r3, [r3, #28]
 8008c20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c24:	431a      	orrs	r2, r3
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a1b      	ldr	r3, [r3, #32]
 8008c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c2e:	ea42 0103 	orr.w	r1, r2, r3
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c36:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	430a      	orrs	r2, r1
 8008c40:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	699b      	ldr	r3, [r3, #24]
 8008c46:	0c1b      	lsrs	r3, r3, #16
 8008c48:	f003 0204 	and.w	r2, r3, #4
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c50:	f003 0310 	and.w	r3, r3, #16
 8008c54:	431a      	orrs	r2, r3
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c5a:	f003 0308 	and.w	r3, r3, #8
 8008c5e:	431a      	orrs	r2, r3
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008c68:	ea42 0103 	orr.w	r1, r2, r3
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	430a      	orrs	r2, r1
 8008c78:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2201      	movs	r2, #1
 8008c84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008c88:	2300      	movs	r3, #0
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c92:	b580      	push	{r7, lr}
 8008c94:	b082      	sub	sp, #8
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d101      	bne.n	8008ca4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	e049      	b.n	8008d38 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d106      	bne.n	8008cbe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 f841 	bl	8008d40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2202      	movs	r2, #2
 8008cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	3304      	adds	r3, #4
 8008cce:	4619      	mov	r1, r3
 8008cd0:	4610      	mov	r0, r2
 8008cd2:	f000 f9d9 	bl	8009088 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2201      	movs	r2, #1
 8008d02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2201      	movs	r2, #1
 8008d0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2201      	movs	r2, #1
 8008d12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2201      	movs	r2, #1
 8008d22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2201      	movs	r2, #1
 8008d2a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2201      	movs	r2, #1
 8008d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d36:	2300      	movs	r3, #0
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3708      	adds	r7, #8
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008d48:	bf00      	nop
 8008d4a:	370c      	adds	r7, #12
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b085      	sub	sp, #20
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d001      	beq.n	8008d6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	e04f      	b.n	8008e0c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2202      	movs	r2, #2
 8008d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	68da      	ldr	r2, [r3, #12]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f042 0201 	orr.w	r2, r2, #1
 8008d82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a23      	ldr	r2, [pc, #140]	; (8008e18 <HAL_TIM_Base_Start_IT+0xc4>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d01d      	beq.n	8008dca <HAL_TIM_Base_Start_IT+0x76>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d96:	d018      	beq.n	8008dca <HAL_TIM_Base_Start_IT+0x76>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a1f      	ldr	r2, [pc, #124]	; (8008e1c <HAL_TIM_Base_Start_IT+0xc8>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d013      	beq.n	8008dca <HAL_TIM_Base_Start_IT+0x76>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a1e      	ldr	r2, [pc, #120]	; (8008e20 <HAL_TIM_Base_Start_IT+0xcc>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d00e      	beq.n	8008dca <HAL_TIM_Base_Start_IT+0x76>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a1c      	ldr	r2, [pc, #112]	; (8008e24 <HAL_TIM_Base_Start_IT+0xd0>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d009      	beq.n	8008dca <HAL_TIM_Base_Start_IT+0x76>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a1b      	ldr	r2, [pc, #108]	; (8008e28 <HAL_TIM_Base_Start_IT+0xd4>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d004      	beq.n	8008dca <HAL_TIM_Base_Start_IT+0x76>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a19      	ldr	r2, [pc, #100]	; (8008e2c <HAL_TIM_Base_Start_IT+0xd8>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d115      	bne.n	8008df6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	689a      	ldr	r2, [r3, #8]
 8008dd0:	4b17      	ldr	r3, [pc, #92]	; (8008e30 <HAL_TIM_Base_Start_IT+0xdc>)
 8008dd2:	4013      	ands	r3, r2
 8008dd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2b06      	cmp	r3, #6
 8008dda:	d015      	beq.n	8008e08 <HAL_TIM_Base_Start_IT+0xb4>
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008de2:	d011      	beq.n	8008e08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f042 0201 	orr.w	r2, r2, #1
 8008df2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008df4:	e008      	b.n	8008e08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	681a      	ldr	r2, [r3, #0]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f042 0201 	orr.w	r2, r2, #1
 8008e04:	601a      	str	r2, [r3, #0]
 8008e06:	e000      	b.n	8008e0a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e08:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008e0a:	2300      	movs	r3, #0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3714      	adds	r7, #20
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr
 8008e18:	40012c00 	.word	0x40012c00
 8008e1c:	40000400 	.word	0x40000400
 8008e20:	40000800 	.word	0x40000800
 8008e24:	40000c00 	.word	0x40000c00
 8008e28:	40013400 	.word	0x40013400
 8008e2c:	40014000 	.word	0x40014000
 8008e30:	00010007 	.word	0x00010007

08008e34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	68db      	ldr	r3, [r3, #12]
 8008e42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	691b      	ldr	r3, [r3, #16]
 8008e4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	f003 0302 	and.w	r3, r3, #2
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d020      	beq.n	8008e98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f003 0302 	and.w	r3, r3, #2
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d01b      	beq.n	8008e98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f06f 0202 	mvn.w	r2, #2
 8008e68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	699b      	ldr	r3, [r3, #24]
 8008e76:	f003 0303 	and.w	r3, r3, #3
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d003      	beq.n	8008e86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 f8e4 	bl	800904c <HAL_TIM_IC_CaptureCallback>
 8008e84:	e005      	b.n	8008e92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 f8d6 	bl	8009038 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 f8e7 	bl	8009060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2200      	movs	r2, #0
 8008e96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	f003 0304 	and.w	r3, r3, #4
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d020      	beq.n	8008ee4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f003 0304 	and.w	r3, r3, #4
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d01b      	beq.n	8008ee4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f06f 0204 	mvn.w	r2, #4
 8008eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2202      	movs	r2, #2
 8008eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	699b      	ldr	r3, [r3, #24]
 8008ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d003      	beq.n	8008ed2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 f8be 	bl	800904c <HAL_TIM_IC_CaptureCallback>
 8008ed0:	e005      	b.n	8008ede <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 f8b0 	bl	8009038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 f8c1 	bl	8009060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	f003 0308 	and.w	r3, r3, #8
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d020      	beq.n	8008f30 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f003 0308 	and.w	r3, r3, #8
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d01b      	beq.n	8008f30 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f06f 0208 	mvn.w	r2, #8
 8008f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2204      	movs	r2, #4
 8008f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	69db      	ldr	r3, [r3, #28]
 8008f0e:	f003 0303 	and.w	r3, r3, #3
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d003      	beq.n	8008f1e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 f898 	bl	800904c <HAL_TIM_IC_CaptureCallback>
 8008f1c:	e005      	b.n	8008f2a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 f88a 	bl	8009038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 f89b 	bl	8009060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	f003 0310 	and.w	r3, r3, #16
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d020      	beq.n	8008f7c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f003 0310 	and.w	r3, r3, #16
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d01b      	beq.n	8008f7c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f06f 0210 	mvn.w	r2, #16
 8008f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2208      	movs	r2, #8
 8008f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	69db      	ldr	r3, [r3, #28]
 8008f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d003      	beq.n	8008f6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 f872 	bl	800904c <HAL_TIM_IC_CaptureCallback>
 8008f68:	e005      	b.n	8008f76 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 f864 	bl	8009038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 f875 	bl	8009060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	f003 0301 	and.w	r3, r3, #1
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d00c      	beq.n	8008fa0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	f003 0301 	and.w	r3, r3, #1
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d007      	beq.n	8008fa0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f06f 0201 	mvn.w	r2, #1
 8008f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f7f9 ff34 	bl	8002e08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d00c      	beq.n	8008fc4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d007      	beq.n	8008fc4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 f906 	bl	80091d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d00c      	beq.n	8008fe8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d007      	beq.n	8008fe8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 f8fe 	bl	80091e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d00c      	beq.n	800900c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d007      	beq.n	800900c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 f834 	bl	8009074 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	f003 0320 	and.w	r3, r3, #32
 8009012:	2b00      	cmp	r3, #0
 8009014:	d00c      	beq.n	8009030 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f003 0320 	and.w	r3, r3, #32
 800901c:	2b00      	cmp	r3, #0
 800901e:	d007      	beq.n	8009030 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f06f 0220 	mvn.w	r2, #32
 8009028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 f8c6 	bl	80091bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009030:	bf00      	nop
 8009032:	3710      	adds	r7, #16
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009038:	b480      	push	{r7}
 800903a:	b083      	sub	sp, #12
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009040:	bf00      	nop
 8009042:	370c      	adds	r7, #12
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009054:	bf00      	nop
 8009056:	370c      	adds	r7, #12
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009060:	b480      	push	{r7}
 8009062:	b083      	sub	sp, #12
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009068:	bf00      	nop
 800906a:	370c      	adds	r7, #12
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr

08009074 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800907c:	bf00      	nop
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr

08009088 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009088:	b480      	push	{r7}
 800908a:	b085      	sub	sp, #20
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	4a40      	ldr	r2, [pc, #256]	; (800919c <TIM_Base_SetConfig+0x114>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d013      	beq.n	80090c8 <TIM_Base_SetConfig+0x40>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090a6:	d00f      	beq.n	80090c8 <TIM_Base_SetConfig+0x40>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	4a3d      	ldr	r2, [pc, #244]	; (80091a0 <TIM_Base_SetConfig+0x118>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d00b      	beq.n	80090c8 <TIM_Base_SetConfig+0x40>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	4a3c      	ldr	r2, [pc, #240]	; (80091a4 <TIM_Base_SetConfig+0x11c>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d007      	beq.n	80090c8 <TIM_Base_SetConfig+0x40>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	4a3b      	ldr	r2, [pc, #236]	; (80091a8 <TIM_Base_SetConfig+0x120>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d003      	beq.n	80090c8 <TIM_Base_SetConfig+0x40>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	4a3a      	ldr	r2, [pc, #232]	; (80091ac <TIM_Base_SetConfig+0x124>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d108      	bne.n	80090da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	68fa      	ldr	r2, [r7, #12]
 80090d6:	4313      	orrs	r3, r2
 80090d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	4a2f      	ldr	r2, [pc, #188]	; (800919c <TIM_Base_SetConfig+0x114>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d01f      	beq.n	8009122 <TIM_Base_SetConfig+0x9a>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090e8:	d01b      	beq.n	8009122 <TIM_Base_SetConfig+0x9a>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	4a2c      	ldr	r2, [pc, #176]	; (80091a0 <TIM_Base_SetConfig+0x118>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d017      	beq.n	8009122 <TIM_Base_SetConfig+0x9a>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	4a2b      	ldr	r2, [pc, #172]	; (80091a4 <TIM_Base_SetConfig+0x11c>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d013      	beq.n	8009122 <TIM_Base_SetConfig+0x9a>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	4a2a      	ldr	r2, [pc, #168]	; (80091a8 <TIM_Base_SetConfig+0x120>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d00f      	beq.n	8009122 <TIM_Base_SetConfig+0x9a>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	4a29      	ldr	r2, [pc, #164]	; (80091ac <TIM_Base_SetConfig+0x124>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d00b      	beq.n	8009122 <TIM_Base_SetConfig+0x9a>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	4a28      	ldr	r2, [pc, #160]	; (80091b0 <TIM_Base_SetConfig+0x128>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d007      	beq.n	8009122 <TIM_Base_SetConfig+0x9a>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	4a27      	ldr	r2, [pc, #156]	; (80091b4 <TIM_Base_SetConfig+0x12c>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d003      	beq.n	8009122 <TIM_Base_SetConfig+0x9a>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	4a26      	ldr	r2, [pc, #152]	; (80091b8 <TIM_Base_SetConfig+0x130>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d108      	bne.n	8009134 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009128:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	68fa      	ldr	r2, [r7, #12]
 8009130:	4313      	orrs	r3, r2
 8009132:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	695b      	ldr	r3, [r3, #20]
 800913e:	4313      	orrs	r3, r2
 8009140:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	68fa      	ldr	r2, [r7, #12]
 8009146:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	689a      	ldr	r2, [r3, #8]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	4a10      	ldr	r2, [pc, #64]	; (800919c <TIM_Base_SetConfig+0x114>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d00f      	beq.n	8009180 <TIM_Base_SetConfig+0xf8>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	4a12      	ldr	r2, [pc, #72]	; (80091ac <TIM_Base_SetConfig+0x124>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d00b      	beq.n	8009180 <TIM_Base_SetConfig+0xf8>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	4a11      	ldr	r2, [pc, #68]	; (80091b0 <TIM_Base_SetConfig+0x128>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d007      	beq.n	8009180 <TIM_Base_SetConfig+0xf8>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	4a10      	ldr	r2, [pc, #64]	; (80091b4 <TIM_Base_SetConfig+0x12c>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d003      	beq.n	8009180 <TIM_Base_SetConfig+0xf8>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	4a0f      	ldr	r2, [pc, #60]	; (80091b8 <TIM_Base_SetConfig+0x130>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d103      	bne.n	8009188 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	691a      	ldr	r2, [r3, #16]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2201      	movs	r2, #1
 800918c:	615a      	str	r2, [r3, #20]
}
 800918e:	bf00      	nop
 8009190:	3714      	adds	r7, #20
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr
 800919a:	bf00      	nop
 800919c:	40012c00 	.word	0x40012c00
 80091a0:	40000400 	.word	0x40000400
 80091a4:	40000800 	.word	0x40000800
 80091a8:	40000c00 	.word	0x40000c00
 80091ac:	40013400 	.word	0x40013400
 80091b0:	40014000 	.word	0x40014000
 80091b4:	40014400 	.word	0x40014400
 80091b8:	40014800 	.word	0x40014800

080091bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80091c4:	bf00      	nop
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80091d8:	bf00      	nop
 80091da:	370c      	adds	r7, #12
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b083      	sub	sp, #12
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80091ec:	bf00      	nop
 80091ee:	370c      	adds	r7, #12
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr

080091f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d101      	bne.n	800920a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009206:	2301      	movs	r3, #1
 8009208:	e042      	b.n	8009290 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009210:	2b00      	cmp	r3, #0
 8009212:	d106      	bne.n	8009222 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f7fa f877 	bl	8003310 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2224      	movs	r2, #36	; 0x24
 8009226:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	681a      	ldr	r2, [r3, #0]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f022 0201 	bic.w	r2, r2, #1
 8009238:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800923e:	2b00      	cmp	r3, #0
 8009240:	d002      	beq.n	8009248 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 fef8 	bl	800a038 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 fbf9 	bl	8009a40 <UART_SetConfig>
 800924e:	4603      	mov	r3, r0
 8009250:	2b01      	cmp	r3, #1
 8009252:	d101      	bne.n	8009258 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009254:	2301      	movs	r3, #1
 8009256:	e01b      	b.n	8009290 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	685a      	ldr	r2, [r3, #4]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009266:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	689a      	ldr	r2, [r3, #8]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009276:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	681a      	ldr	r2, [r3, #0]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f042 0201 	orr.w	r2, r2, #1
 8009286:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 ff77 	bl	800a17c <UART_CheckIdleState>
 800928e:	4603      	mov	r3, r0
}
 8009290:	4618      	mov	r0, r3
 8009292:	3708      	adds	r7, #8
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b08a      	sub	sp, #40	; 0x28
 800929c:	af02      	add	r7, sp, #8
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	603b      	str	r3, [r7, #0]
 80092a4:	4613      	mov	r3, r2
 80092a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092ae:	2b20      	cmp	r3, #32
 80092b0:	d17c      	bne.n	80093ac <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d002      	beq.n	80092be <HAL_UART_Transmit+0x26>
 80092b8:	88fb      	ldrh	r3, [r7, #6]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d101      	bne.n	80092c2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80092be:	2301      	movs	r3, #1
 80092c0:	e075      	b.n	80093ae <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2200      	movs	r2, #0
 80092c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2221      	movs	r2, #33	; 0x21
 80092ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80092d2:	f7fa fab1 	bl	8003838 <HAL_GetTick>
 80092d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	88fa      	ldrh	r2, [r7, #6]
 80092dc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	88fa      	ldrh	r2, [r7, #6]
 80092e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092f0:	d108      	bne.n	8009304 <HAL_UART_Transmit+0x6c>
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	691b      	ldr	r3, [r3, #16]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d104      	bne.n	8009304 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80092fa:	2300      	movs	r3, #0
 80092fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	61bb      	str	r3, [r7, #24]
 8009302:	e003      	b.n	800930c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009308:	2300      	movs	r3, #0
 800930a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800930c:	e031      	b.n	8009372 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	9300      	str	r3, [sp, #0]
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	2200      	movs	r2, #0
 8009316:	2180      	movs	r1, #128	; 0x80
 8009318:	68f8      	ldr	r0, [r7, #12]
 800931a:	f000 ffd9 	bl	800a2d0 <UART_WaitOnFlagUntilTimeout>
 800931e:	4603      	mov	r3, r0
 8009320:	2b00      	cmp	r3, #0
 8009322:	d005      	beq.n	8009330 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2220      	movs	r2, #32
 8009328:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800932c:	2303      	movs	r3, #3
 800932e:	e03e      	b.n	80093ae <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8009330:	69fb      	ldr	r3, [r7, #28]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d10b      	bne.n	800934e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009336:	69bb      	ldr	r3, [r7, #24]
 8009338:	881a      	ldrh	r2, [r3, #0]
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009342:	b292      	uxth	r2, r2
 8009344:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009346:	69bb      	ldr	r3, [r7, #24]
 8009348:	3302      	adds	r3, #2
 800934a:	61bb      	str	r3, [r7, #24]
 800934c:	e008      	b.n	8009360 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	781a      	ldrb	r2, [r3, #0]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	b292      	uxth	r2, r2
 8009358:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800935a:	69fb      	ldr	r3, [r7, #28]
 800935c:	3301      	adds	r3, #1
 800935e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009366:	b29b      	uxth	r3, r3
 8009368:	3b01      	subs	r3, #1
 800936a:	b29a      	uxth	r2, r3
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009378:	b29b      	uxth	r3, r3
 800937a:	2b00      	cmp	r3, #0
 800937c:	d1c7      	bne.n	800930e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	9300      	str	r3, [sp, #0]
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	2200      	movs	r2, #0
 8009386:	2140      	movs	r1, #64	; 0x40
 8009388:	68f8      	ldr	r0, [r7, #12]
 800938a:	f000 ffa1 	bl	800a2d0 <UART_WaitOnFlagUntilTimeout>
 800938e:	4603      	mov	r3, r0
 8009390:	2b00      	cmp	r3, #0
 8009392:	d005      	beq.n	80093a0 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2220      	movs	r2, #32
 8009398:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800939c:	2303      	movs	r3, #3
 800939e:	e006      	b.n	80093ae <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2220      	movs	r2, #32
 80093a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80093a8:	2300      	movs	r3, #0
 80093aa:	e000      	b.n	80093ae <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 80093ac:	2302      	movs	r3, #2
  }
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3720      	adds	r7, #32
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
	...

080093b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b0ba      	sub	sp, #232	; 0xe8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	69db      	ldr	r3, [r3, #28]
 80093c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	689b      	ldr	r3, [r3, #8]
 80093da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80093de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80093e2:	f640 030f 	movw	r3, #2063	; 0x80f
 80093e6:	4013      	ands	r3, r2
 80093e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80093ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d11b      	bne.n	800942c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80093f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093f8:	f003 0320 	and.w	r3, r3, #32
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d015      	beq.n	800942c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009404:	f003 0320 	and.w	r3, r3, #32
 8009408:	2b00      	cmp	r3, #0
 800940a:	d105      	bne.n	8009418 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800940c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009414:	2b00      	cmp	r3, #0
 8009416:	d009      	beq.n	800942c <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800941c:	2b00      	cmp	r3, #0
 800941e:	f000 82e3 	beq.w	80099e8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	4798      	blx	r3
      }
      return;
 800942a:	e2dd      	b.n	80099e8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800942c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009430:	2b00      	cmp	r3, #0
 8009432:	f000 8123 	beq.w	800967c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009436:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800943a:	4b8d      	ldr	r3, [pc, #564]	; (8009670 <HAL_UART_IRQHandler+0x2b8>)
 800943c:	4013      	ands	r3, r2
 800943e:	2b00      	cmp	r3, #0
 8009440:	d106      	bne.n	8009450 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009442:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009446:	4b8b      	ldr	r3, [pc, #556]	; (8009674 <HAL_UART_IRQHandler+0x2bc>)
 8009448:	4013      	ands	r3, r2
 800944a:	2b00      	cmp	r3, #0
 800944c:	f000 8116 	beq.w	800967c <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009454:	f003 0301 	and.w	r3, r3, #1
 8009458:	2b00      	cmp	r3, #0
 800945a:	d011      	beq.n	8009480 <HAL_UART_IRQHandler+0xc8>
 800945c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009464:	2b00      	cmp	r3, #0
 8009466:	d00b      	beq.n	8009480 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	2201      	movs	r2, #1
 800946e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009476:	f043 0201 	orr.w	r2, r3, #1
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009484:	f003 0302 	and.w	r3, r3, #2
 8009488:	2b00      	cmp	r3, #0
 800948a:	d011      	beq.n	80094b0 <HAL_UART_IRQHandler+0xf8>
 800948c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009490:	f003 0301 	and.w	r3, r3, #1
 8009494:	2b00      	cmp	r3, #0
 8009496:	d00b      	beq.n	80094b0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2202      	movs	r2, #2
 800949e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094a6:	f043 0204 	orr.w	r2, r3, #4
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094b4:	f003 0304 	and.w	r3, r3, #4
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d011      	beq.n	80094e0 <HAL_UART_IRQHandler+0x128>
 80094bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094c0:	f003 0301 	and.w	r3, r3, #1
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d00b      	beq.n	80094e0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	2204      	movs	r2, #4
 80094ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094d6:	f043 0202 	orr.w	r2, r3, #2
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80094e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094e4:	f003 0308 	and.w	r3, r3, #8
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d017      	beq.n	800951c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80094ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094f0:	f003 0320 	and.w	r3, r3, #32
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d105      	bne.n	8009504 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80094f8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80094fc:	4b5c      	ldr	r3, [pc, #368]	; (8009670 <HAL_UART_IRQHandler+0x2b8>)
 80094fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009500:	2b00      	cmp	r3, #0
 8009502:	d00b      	beq.n	800951c <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2208      	movs	r2, #8
 800950a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009512:	f043 0208 	orr.w	r2, r3, #8
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800951c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009524:	2b00      	cmp	r3, #0
 8009526:	d012      	beq.n	800954e <HAL_UART_IRQHandler+0x196>
 8009528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800952c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009530:	2b00      	cmp	r3, #0
 8009532:	d00c      	beq.n	800954e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800953c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009544:	f043 0220 	orr.w	r2, r3, #32
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009554:	2b00      	cmp	r3, #0
 8009556:	f000 8249 	beq.w	80099ec <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800955a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800955e:	f003 0320 	and.w	r3, r3, #32
 8009562:	2b00      	cmp	r3, #0
 8009564:	d013      	beq.n	800958e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009566:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800956a:	f003 0320 	and.w	r3, r3, #32
 800956e:	2b00      	cmp	r3, #0
 8009570:	d105      	bne.n	800957e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800957a:	2b00      	cmp	r3, #0
 800957c:	d007      	beq.n	800958e <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009582:	2b00      	cmp	r3, #0
 8009584:	d003      	beq.n	800958e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009594:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	689b      	ldr	r3, [r3, #8]
 800959e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095a2:	2b40      	cmp	r3, #64	; 0x40
 80095a4:	d005      	beq.n	80095b2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80095a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80095aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d054      	beq.n	800965c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f000 fef3 	bl	800a39e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	689b      	ldr	r3, [r3, #8]
 80095be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095c2:	2b40      	cmp	r3, #64	; 0x40
 80095c4:	d146      	bne.n	8009654 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	3308      	adds	r3, #8
 80095cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80095d4:	e853 3f00 	ldrex	r3, [r3]
 80095d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80095dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80095e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	3308      	adds	r3, #8
 80095ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80095f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80095f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80095fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009602:	e841 2300 	strex	r3, r2, [r1]
 8009606:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800960a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800960e:	2b00      	cmp	r3, #0
 8009610:	d1d9      	bne.n	80095c6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009618:	2b00      	cmp	r3, #0
 800961a:	d017      	beq.n	800964c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009622:	4a15      	ldr	r2, [pc, #84]	; (8009678 <HAL_UART_IRQHandler+0x2c0>)
 8009624:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800962c:	4618      	mov	r0, r3
 800962e:	f7fb fa3b 	bl	8004aa8 <HAL_DMA_Abort_IT>
 8009632:	4603      	mov	r3, r0
 8009634:	2b00      	cmp	r3, #0
 8009636:	d019      	beq.n	800966c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800963e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8009646:	4610      	mov	r0, r2
 8009648:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800964a:	e00f      	b.n	800966c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 f9e1 	bl	8009a14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009652:	e00b      	b.n	800966c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 f9dd 	bl	8009a14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800965a:	e007      	b.n	800966c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 f9d9 	bl	8009a14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2200      	movs	r2, #0
 8009666:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800966a:	e1bf      	b.n	80099ec <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800966c:	bf00      	nop
    return;
 800966e:	e1bd      	b.n	80099ec <HAL_UART_IRQHandler+0x634>
 8009670:	10000001 	.word	0x10000001
 8009674:	04000120 	.word	0x04000120
 8009678:	0800a46b 	.word	0x0800a46b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009680:	2b01      	cmp	r3, #1
 8009682:	f040 8153 	bne.w	800992c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800968a:	f003 0310 	and.w	r3, r3, #16
 800968e:	2b00      	cmp	r3, #0
 8009690:	f000 814c 	beq.w	800992c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009698:	f003 0310 	and.w	r3, r3, #16
 800969c:	2b00      	cmp	r3, #0
 800969e:	f000 8145 	beq.w	800992c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	2210      	movs	r2, #16
 80096a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	689b      	ldr	r3, [r3, #8]
 80096b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096b4:	2b40      	cmp	r3, #64	; 0x40
 80096b6:	f040 80bb 	bne.w	8009830 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80096c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	f000 818f 	beq.w	80099f0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80096d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80096dc:	429a      	cmp	r2, r3
 80096de:	f080 8187 	bcs.w	80099f0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80096e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f003 0320 	and.w	r3, r3, #32
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	f040 8087 	bne.w	800980e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009708:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800970c:	e853 3f00 	ldrex	r3, [r3]
 8009710:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009714:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009718:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800971c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	461a      	mov	r2, r3
 8009726:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800972a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800972e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009732:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009736:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800973a:	e841 2300 	strex	r3, r2, [r1]
 800973e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009742:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009746:	2b00      	cmp	r3, #0
 8009748:	d1da      	bne.n	8009700 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	3308      	adds	r3, #8
 8009750:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009752:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009754:	e853 3f00 	ldrex	r3, [r3]
 8009758:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800975a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800975c:	f023 0301 	bic.w	r3, r3, #1
 8009760:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	3308      	adds	r3, #8
 800976a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800976e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009772:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009774:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009776:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800977a:	e841 2300 	strex	r3, r2, [r1]
 800977e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009780:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009782:	2b00      	cmp	r3, #0
 8009784:	d1e1      	bne.n	800974a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	3308      	adds	r3, #8
 800978c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800978e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009790:	e853 3f00 	ldrex	r3, [r3]
 8009794:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009796:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009798:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800979c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	3308      	adds	r3, #8
 80097a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80097aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80097ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80097b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80097b2:	e841 2300 	strex	r3, r2, [r1]
 80097b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80097b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d1e3      	bne.n	8009786 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2220      	movs	r2, #32
 80097c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2200      	movs	r2, #0
 80097ca:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097d4:	e853 3f00 	ldrex	r3, [r3]
 80097d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80097da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097dc:	f023 0310 	bic.w	r3, r3, #16
 80097e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	461a      	mov	r2, r3
 80097ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80097ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80097f0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80097f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80097f6:	e841 2300 	strex	r3, r2, [r1]
 80097fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80097fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d1e4      	bne.n	80097cc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009808:	4618      	mov	r0, r3
 800980a:	f7fb f8f1 	bl	80049f0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2202      	movs	r2, #2
 8009812:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009820:	b29b      	uxth	r3, r3
 8009822:	1ad3      	subs	r3, r2, r3
 8009824:	b29b      	uxth	r3, r3
 8009826:	4619      	mov	r1, r3
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f000 f8fd 	bl	8009a28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800982e:	e0df      	b.n	80099f0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800983c:	b29b      	uxth	r3, r3
 800983e:	1ad3      	subs	r3, r2, r3
 8009840:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800984a:	b29b      	uxth	r3, r3
 800984c:	2b00      	cmp	r3, #0
 800984e:	f000 80d1 	beq.w	80099f4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8009852:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009856:	2b00      	cmp	r3, #0
 8009858:	f000 80cc 	beq.w	80099f4 <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009864:	e853 3f00 	ldrex	r3, [r3]
 8009868:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800986a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800986c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009870:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	461a      	mov	r2, r3
 800987a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800987e:	647b      	str	r3, [r7, #68]	; 0x44
 8009880:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009882:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009884:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009886:	e841 2300 	strex	r3, r2, [r1]
 800988a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800988c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800988e:	2b00      	cmp	r3, #0
 8009890:	d1e4      	bne.n	800985c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	3308      	adds	r3, #8
 8009898:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800989a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989c:	e853 3f00 	ldrex	r3, [r3]
 80098a0:	623b      	str	r3, [r7, #32]
   return(result);
 80098a2:	6a3b      	ldr	r3, [r7, #32]
 80098a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80098a8:	f023 0301 	bic.w	r3, r3, #1
 80098ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	3308      	adds	r3, #8
 80098b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80098ba:	633a      	str	r2, [r7, #48]	; 0x30
 80098bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80098c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098c2:	e841 2300 	strex	r3, r2, [r1]
 80098c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80098c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d1e1      	bne.n	8009892 <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2220      	movs	r2, #32
 80098d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2200      	movs	r2, #0
 80098da:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2200      	movs	r2, #0
 80098e0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	e853 3f00 	ldrex	r3, [r3]
 80098ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f023 0310 	bic.w	r3, r3, #16
 80098f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	461a      	mov	r2, r3
 8009900:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009904:	61fb      	str	r3, [r7, #28]
 8009906:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009908:	69b9      	ldr	r1, [r7, #24]
 800990a:	69fa      	ldr	r2, [r7, #28]
 800990c:	e841 2300 	strex	r3, r2, [r1]
 8009910:	617b      	str	r3, [r7, #20]
   return(result);
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d1e4      	bne.n	80098e2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2202      	movs	r2, #2
 800991c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800991e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009922:	4619      	mov	r1, r3
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 f87f 	bl	8009a28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800992a:	e063      	b.n	80099f4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800992c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009930:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009934:	2b00      	cmp	r3, #0
 8009936:	d00e      	beq.n	8009956 <HAL_UART_IRQHandler+0x59e>
 8009938:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800993c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009940:	2b00      	cmp	r3, #0
 8009942:	d008      	beq.n	8009956 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800994c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f000 fdcc 	bl	800a4ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009954:	e051      	b.n	80099fa <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800995a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800995e:	2b00      	cmp	r3, #0
 8009960:	d014      	beq.n	800998c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009962:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800996a:	2b00      	cmp	r3, #0
 800996c:	d105      	bne.n	800997a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800996e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009972:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009976:	2b00      	cmp	r3, #0
 8009978:	d008      	beq.n	800998c <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800997e:	2b00      	cmp	r3, #0
 8009980:	d03a      	beq.n	80099f8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	4798      	blx	r3
    }
    return;
 800998a:	e035      	b.n	80099f8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800998c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009994:	2b00      	cmp	r3, #0
 8009996:	d009      	beq.n	80099ac <HAL_UART_IRQHandler+0x5f4>
 8009998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800999c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d003      	beq.n	80099ac <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 fd76 	bl	800a496 <UART_EndTransmit_IT>
    return;
 80099aa:	e026      	b.n	80099fa <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80099ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d009      	beq.n	80099cc <HAL_UART_IRQHandler+0x614>
 80099b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d003      	beq.n	80099cc <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 fda5 	bl	800a514 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80099ca:	e016      	b.n	80099fa <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80099cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d010      	beq.n	80099fa <HAL_UART_IRQHandler+0x642>
 80099d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099dc:	2b00      	cmp	r3, #0
 80099de:	da0c      	bge.n	80099fa <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 fd8d 	bl	800a500 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80099e6:	e008      	b.n	80099fa <HAL_UART_IRQHandler+0x642>
      return;
 80099e8:	bf00      	nop
 80099ea:	e006      	b.n	80099fa <HAL_UART_IRQHandler+0x642>
    return;
 80099ec:	bf00      	nop
 80099ee:	e004      	b.n	80099fa <HAL_UART_IRQHandler+0x642>
      return;
 80099f0:	bf00      	nop
 80099f2:	e002      	b.n	80099fa <HAL_UART_IRQHandler+0x642>
      return;
 80099f4:	bf00      	nop
 80099f6:	e000      	b.n	80099fa <HAL_UART_IRQHandler+0x642>
    return;
 80099f8:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 80099fa:	37e8      	adds	r7, #232	; 0xe8
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b083      	sub	sp, #12
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009a08:	bf00      	nop
 8009a0a:	370c      	adds	r7, #12
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b083      	sub	sp, #12
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009a1c:	bf00      	nop
 8009a1e:	370c      	adds	r7, #12
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	460b      	mov	r3, r1
 8009a32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009a34:	bf00      	nop
 8009a36:	370c      	adds	r7, #12
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr

08009a40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a44:	b08c      	sub	sp, #48	; 0x30
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	689a      	ldr	r2, [r3, #8]
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	691b      	ldr	r3, [r3, #16]
 8009a58:	431a      	orrs	r2, r3
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	695b      	ldr	r3, [r3, #20]
 8009a5e:	431a      	orrs	r2, r3
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	69db      	ldr	r3, [r3, #28]
 8009a64:	4313      	orrs	r3, r2
 8009a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	681a      	ldr	r2, [r3, #0]
 8009a6e:	4baa      	ldr	r3, [pc, #680]	; (8009d18 <UART_SetConfig+0x2d8>)
 8009a70:	4013      	ands	r3, r2
 8009a72:	697a      	ldr	r2, [r7, #20]
 8009a74:	6812      	ldr	r2, [r2, #0]
 8009a76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a78:	430b      	orrs	r3, r1
 8009a7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	68da      	ldr	r2, [r3, #12]
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	430a      	orrs	r2, r1
 8009a90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	699b      	ldr	r3, [r3, #24]
 8009a96:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a9f      	ldr	r2, [pc, #636]	; (8009d1c <UART_SetConfig+0x2dc>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d004      	beq.n	8009aac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	6a1b      	ldr	r3, [r3, #32]
 8009aa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	689b      	ldr	r3, [r3, #8]
 8009ab2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009ab6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009aba:	697a      	ldr	r2, [r7, #20]
 8009abc:	6812      	ldr	r2, [r2, #0]
 8009abe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ac0:	430b      	orrs	r3, r1
 8009ac2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aca:	f023 010f 	bic.w	r1, r3, #15
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	430a      	orrs	r2, r1
 8009ad8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4a90      	ldr	r2, [pc, #576]	; (8009d20 <UART_SetConfig+0x2e0>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d125      	bne.n	8009b30 <UART_SetConfig+0xf0>
 8009ae4:	4b8f      	ldr	r3, [pc, #572]	; (8009d24 <UART_SetConfig+0x2e4>)
 8009ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009aea:	f003 0303 	and.w	r3, r3, #3
 8009aee:	2b03      	cmp	r3, #3
 8009af0:	d81a      	bhi.n	8009b28 <UART_SetConfig+0xe8>
 8009af2:	a201      	add	r2, pc, #4	; (adr r2, 8009af8 <UART_SetConfig+0xb8>)
 8009af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af8:	08009b09 	.word	0x08009b09
 8009afc:	08009b19 	.word	0x08009b19
 8009b00:	08009b11 	.word	0x08009b11
 8009b04:	08009b21 	.word	0x08009b21
 8009b08:	2301      	movs	r3, #1
 8009b0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b0e:	e116      	b.n	8009d3e <UART_SetConfig+0x2fe>
 8009b10:	2302      	movs	r3, #2
 8009b12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b16:	e112      	b.n	8009d3e <UART_SetConfig+0x2fe>
 8009b18:	2304      	movs	r3, #4
 8009b1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b1e:	e10e      	b.n	8009d3e <UART_SetConfig+0x2fe>
 8009b20:	2308      	movs	r3, #8
 8009b22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b26:	e10a      	b.n	8009d3e <UART_SetConfig+0x2fe>
 8009b28:	2310      	movs	r3, #16
 8009b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b2e:	e106      	b.n	8009d3e <UART_SetConfig+0x2fe>
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a7c      	ldr	r2, [pc, #496]	; (8009d28 <UART_SetConfig+0x2e8>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d138      	bne.n	8009bac <UART_SetConfig+0x16c>
 8009b3a:	4b7a      	ldr	r3, [pc, #488]	; (8009d24 <UART_SetConfig+0x2e4>)
 8009b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b40:	f003 030c 	and.w	r3, r3, #12
 8009b44:	2b0c      	cmp	r3, #12
 8009b46:	d82d      	bhi.n	8009ba4 <UART_SetConfig+0x164>
 8009b48:	a201      	add	r2, pc, #4	; (adr r2, 8009b50 <UART_SetConfig+0x110>)
 8009b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b4e:	bf00      	nop
 8009b50:	08009b85 	.word	0x08009b85
 8009b54:	08009ba5 	.word	0x08009ba5
 8009b58:	08009ba5 	.word	0x08009ba5
 8009b5c:	08009ba5 	.word	0x08009ba5
 8009b60:	08009b95 	.word	0x08009b95
 8009b64:	08009ba5 	.word	0x08009ba5
 8009b68:	08009ba5 	.word	0x08009ba5
 8009b6c:	08009ba5 	.word	0x08009ba5
 8009b70:	08009b8d 	.word	0x08009b8d
 8009b74:	08009ba5 	.word	0x08009ba5
 8009b78:	08009ba5 	.word	0x08009ba5
 8009b7c:	08009ba5 	.word	0x08009ba5
 8009b80:	08009b9d 	.word	0x08009b9d
 8009b84:	2300      	movs	r3, #0
 8009b86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b8a:	e0d8      	b.n	8009d3e <UART_SetConfig+0x2fe>
 8009b8c:	2302      	movs	r3, #2
 8009b8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b92:	e0d4      	b.n	8009d3e <UART_SetConfig+0x2fe>
 8009b94:	2304      	movs	r3, #4
 8009b96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b9a:	e0d0      	b.n	8009d3e <UART_SetConfig+0x2fe>
 8009b9c:	2308      	movs	r3, #8
 8009b9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ba2:	e0cc      	b.n	8009d3e <UART_SetConfig+0x2fe>
 8009ba4:	2310      	movs	r3, #16
 8009ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009baa:	e0c8      	b.n	8009d3e <UART_SetConfig+0x2fe>
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a5e      	ldr	r2, [pc, #376]	; (8009d2c <UART_SetConfig+0x2ec>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d125      	bne.n	8009c02 <UART_SetConfig+0x1c2>
 8009bb6:	4b5b      	ldr	r3, [pc, #364]	; (8009d24 <UART_SetConfig+0x2e4>)
 8009bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bbc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009bc0:	2b30      	cmp	r3, #48	; 0x30
 8009bc2:	d016      	beq.n	8009bf2 <UART_SetConfig+0x1b2>
 8009bc4:	2b30      	cmp	r3, #48	; 0x30
 8009bc6:	d818      	bhi.n	8009bfa <UART_SetConfig+0x1ba>
 8009bc8:	2b20      	cmp	r3, #32
 8009bca:	d00a      	beq.n	8009be2 <UART_SetConfig+0x1a2>
 8009bcc:	2b20      	cmp	r3, #32
 8009bce:	d814      	bhi.n	8009bfa <UART_SetConfig+0x1ba>
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d002      	beq.n	8009bda <UART_SetConfig+0x19a>
 8009bd4:	2b10      	cmp	r3, #16
 8009bd6:	d008      	beq.n	8009bea <UART_SetConfig+0x1aa>
 8009bd8:	e00f      	b.n	8009bfa <UART_SetConfig+0x1ba>
 8009bda:	2300      	movs	r3, #0
 8009bdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009be0:	e0ad      	b.n	8009d3e <UART_SetConfig+0x2fe>
 8009be2:	2302      	movs	r3, #2
 8009be4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009be8:	e0a9      	b.n	8009d3e <UART_SetConfig+0x2fe>
 8009bea:	2304      	movs	r3, #4
 8009bec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009bf0:	e0a5      	b.n	8009d3e <UART_SetConfig+0x2fe>
 8009bf2:	2308      	movs	r3, #8
 8009bf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009bf8:	e0a1      	b.n	8009d3e <UART_SetConfig+0x2fe>
 8009bfa:	2310      	movs	r3, #16
 8009bfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c00:	e09d      	b.n	8009d3e <UART_SetConfig+0x2fe>
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4a4a      	ldr	r2, [pc, #296]	; (8009d30 <UART_SetConfig+0x2f0>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d125      	bne.n	8009c58 <UART_SetConfig+0x218>
 8009c0c:	4b45      	ldr	r3, [pc, #276]	; (8009d24 <UART_SetConfig+0x2e4>)
 8009c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009c16:	2bc0      	cmp	r3, #192	; 0xc0
 8009c18:	d016      	beq.n	8009c48 <UART_SetConfig+0x208>
 8009c1a:	2bc0      	cmp	r3, #192	; 0xc0
 8009c1c:	d818      	bhi.n	8009c50 <UART_SetConfig+0x210>
 8009c1e:	2b80      	cmp	r3, #128	; 0x80
 8009c20:	d00a      	beq.n	8009c38 <UART_SetConfig+0x1f8>
 8009c22:	2b80      	cmp	r3, #128	; 0x80
 8009c24:	d814      	bhi.n	8009c50 <UART_SetConfig+0x210>
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d002      	beq.n	8009c30 <UART_SetConfig+0x1f0>
 8009c2a:	2b40      	cmp	r3, #64	; 0x40
 8009c2c:	d008      	beq.n	8009c40 <UART_SetConfig+0x200>
 8009c2e:	e00f      	b.n	8009c50 <UART_SetConfig+0x210>
 8009c30:	2300      	movs	r3, #0
 8009c32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c36:	e082      	b.n	8009d3e <UART_SetConfig+0x2fe>
 8009c38:	2302      	movs	r3, #2
 8009c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c3e:	e07e      	b.n	8009d3e <UART_SetConfig+0x2fe>
 8009c40:	2304      	movs	r3, #4
 8009c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c46:	e07a      	b.n	8009d3e <UART_SetConfig+0x2fe>
 8009c48:	2308      	movs	r3, #8
 8009c4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c4e:	e076      	b.n	8009d3e <UART_SetConfig+0x2fe>
 8009c50:	2310      	movs	r3, #16
 8009c52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c56:	e072      	b.n	8009d3e <UART_SetConfig+0x2fe>
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a35      	ldr	r2, [pc, #212]	; (8009d34 <UART_SetConfig+0x2f4>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d12a      	bne.n	8009cb8 <UART_SetConfig+0x278>
 8009c62:	4b30      	ldr	r3, [pc, #192]	; (8009d24 <UART_SetConfig+0x2e4>)
 8009c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c70:	d01a      	beq.n	8009ca8 <UART_SetConfig+0x268>
 8009c72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c76:	d81b      	bhi.n	8009cb0 <UART_SetConfig+0x270>
 8009c78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c7c:	d00c      	beq.n	8009c98 <UART_SetConfig+0x258>
 8009c7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c82:	d815      	bhi.n	8009cb0 <UART_SetConfig+0x270>
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d003      	beq.n	8009c90 <UART_SetConfig+0x250>
 8009c88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c8c:	d008      	beq.n	8009ca0 <UART_SetConfig+0x260>
 8009c8e:	e00f      	b.n	8009cb0 <UART_SetConfig+0x270>
 8009c90:	2300      	movs	r3, #0
 8009c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c96:	e052      	b.n	8009d3e <UART_SetConfig+0x2fe>
 8009c98:	2302      	movs	r3, #2
 8009c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c9e:	e04e      	b.n	8009d3e <UART_SetConfig+0x2fe>
 8009ca0:	2304      	movs	r3, #4
 8009ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ca6:	e04a      	b.n	8009d3e <UART_SetConfig+0x2fe>
 8009ca8:	2308      	movs	r3, #8
 8009caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009cae:	e046      	b.n	8009d3e <UART_SetConfig+0x2fe>
 8009cb0:	2310      	movs	r3, #16
 8009cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009cb6:	e042      	b.n	8009d3e <UART_SetConfig+0x2fe>
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a17      	ldr	r2, [pc, #92]	; (8009d1c <UART_SetConfig+0x2dc>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d13a      	bne.n	8009d38 <UART_SetConfig+0x2f8>
 8009cc2:	4b18      	ldr	r3, [pc, #96]	; (8009d24 <UART_SetConfig+0x2e4>)
 8009cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cc8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009ccc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009cd0:	d01a      	beq.n	8009d08 <UART_SetConfig+0x2c8>
 8009cd2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009cd6:	d81b      	bhi.n	8009d10 <UART_SetConfig+0x2d0>
 8009cd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009cdc:	d00c      	beq.n	8009cf8 <UART_SetConfig+0x2b8>
 8009cde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ce2:	d815      	bhi.n	8009d10 <UART_SetConfig+0x2d0>
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d003      	beq.n	8009cf0 <UART_SetConfig+0x2b0>
 8009ce8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009cec:	d008      	beq.n	8009d00 <UART_SetConfig+0x2c0>
 8009cee:	e00f      	b.n	8009d10 <UART_SetConfig+0x2d0>
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009cf6:	e022      	b.n	8009d3e <UART_SetConfig+0x2fe>
 8009cf8:	2302      	movs	r3, #2
 8009cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009cfe:	e01e      	b.n	8009d3e <UART_SetConfig+0x2fe>
 8009d00:	2304      	movs	r3, #4
 8009d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d06:	e01a      	b.n	8009d3e <UART_SetConfig+0x2fe>
 8009d08:	2308      	movs	r3, #8
 8009d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d0e:	e016      	b.n	8009d3e <UART_SetConfig+0x2fe>
 8009d10:	2310      	movs	r3, #16
 8009d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d16:	e012      	b.n	8009d3e <UART_SetConfig+0x2fe>
 8009d18:	cfff69f3 	.word	0xcfff69f3
 8009d1c:	40008000 	.word	0x40008000
 8009d20:	40013800 	.word	0x40013800
 8009d24:	40021000 	.word	0x40021000
 8009d28:	40004400 	.word	0x40004400
 8009d2c:	40004800 	.word	0x40004800
 8009d30:	40004c00 	.word	0x40004c00
 8009d34:	40005000 	.word	0x40005000
 8009d38:	2310      	movs	r3, #16
 8009d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4aae      	ldr	r2, [pc, #696]	; (8009ffc <UART_SetConfig+0x5bc>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	f040 8097 	bne.w	8009e78 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009d4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009d4e:	2b08      	cmp	r3, #8
 8009d50:	d823      	bhi.n	8009d9a <UART_SetConfig+0x35a>
 8009d52:	a201      	add	r2, pc, #4	; (adr r2, 8009d58 <UART_SetConfig+0x318>)
 8009d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d58:	08009d7d 	.word	0x08009d7d
 8009d5c:	08009d9b 	.word	0x08009d9b
 8009d60:	08009d85 	.word	0x08009d85
 8009d64:	08009d9b 	.word	0x08009d9b
 8009d68:	08009d8b 	.word	0x08009d8b
 8009d6c:	08009d9b 	.word	0x08009d9b
 8009d70:	08009d9b 	.word	0x08009d9b
 8009d74:	08009d9b 	.word	0x08009d9b
 8009d78:	08009d93 	.word	0x08009d93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d7c:	f7fe f8a0 	bl	8007ec0 <HAL_RCC_GetPCLK1Freq>
 8009d80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009d82:	e010      	b.n	8009da6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d84:	4b9e      	ldr	r3, [pc, #632]	; (800a000 <UART_SetConfig+0x5c0>)
 8009d86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009d88:	e00d      	b.n	8009da6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d8a:	f7fe f801 	bl	8007d90 <HAL_RCC_GetSysClockFreq>
 8009d8e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009d90:	e009      	b.n	8009da6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009d98:	e005      	b.n	8009da6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009d9e:	2301      	movs	r3, #1
 8009da0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009da4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	f000 8130 	beq.w	800a00e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db2:	4a94      	ldr	r2, [pc, #592]	; (800a004 <UART_SetConfig+0x5c4>)
 8009db4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009db8:	461a      	mov	r2, r3
 8009dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009dc0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	685a      	ldr	r2, [r3, #4]
 8009dc6:	4613      	mov	r3, r2
 8009dc8:	005b      	lsls	r3, r3, #1
 8009dca:	4413      	add	r3, r2
 8009dcc:	69ba      	ldr	r2, [r7, #24]
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	d305      	bcc.n	8009dde <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009dd8:	69ba      	ldr	r2, [r7, #24]
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d903      	bls.n	8009de6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009dde:	2301      	movs	r3, #1
 8009de0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009de4:	e113      	b.n	800a00e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de8:	2200      	movs	r2, #0
 8009dea:	60bb      	str	r3, [r7, #8]
 8009dec:	60fa      	str	r2, [r7, #12]
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df2:	4a84      	ldr	r2, [pc, #528]	; (800a004 <UART_SetConfig+0x5c4>)
 8009df4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009df8:	b29b      	uxth	r3, r3
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	603b      	str	r3, [r7, #0]
 8009dfe:	607a      	str	r2, [r7, #4]
 8009e00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e04:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009e08:	f7f6 fa02 	bl	8000210 <__aeabi_uldivmod>
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	460b      	mov	r3, r1
 8009e10:	4610      	mov	r0, r2
 8009e12:	4619      	mov	r1, r3
 8009e14:	f04f 0200 	mov.w	r2, #0
 8009e18:	f04f 0300 	mov.w	r3, #0
 8009e1c:	020b      	lsls	r3, r1, #8
 8009e1e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009e22:	0202      	lsls	r2, r0, #8
 8009e24:	6979      	ldr	r1, [r7, #20]
 8009e26:	6849      	ldr	r1, [r1, #4]
 8009e28:	0849      	lsrs	r1, r1, #1
 8009e2a:	2000      	movs	r0, #0
 8009e2c:	460c      	mov	r4, r1
 8009e2e:	4605      	mov	r5, r0
 8009e30:	eb12 0804 	adds.w	r8, r2, r4
 8009e34:	eb43 0905 	adc.w	r9, r3, r5
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	469a      	mov	sl, r3
 8009e40:	4693      	mov	fp, r2
 8009e42:	4652      	mov	r2, sl
 8009e44:	465b      	mov	r3, fp
 8009e46:	4640      	mov	r0, r8
 8009e48:	4649      	mov	r1, r9
 8009e4a:	f7f6 f9e1 	bl	8000210 <__aeabi_uldivmod>
 8009e4e:	4602      	mov	r2, r0
 8009e50:	460b      	mov	r3, r1
 8009e52:	4613      	mov	r3, r2
 8009e54:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009e56:	6a3b      	ldr	r3, [r7, #32]
 8009e58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e5c:	d308      	bcc.n	8009e70 <UART_SetConfig+0x430>
 8009e5e:	6a3b      	ldr	r3, [r7, #32]
 8009e60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e64:	d204      	bcs.n	8009e70 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	6a3a      	ldr	r2, [r7, #32]
 8009e6c:	60da      	str	r2, [r3, #12]
 8009e6e:	e0ce      	b.n	800a00e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009e70:	2301      	movs	r3, #1
 8009e72:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009e76:	e0ca      	b.n	800a00e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	69db      	ldr	r3, [r3, #28]
 8009e7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e80:	d166      	bne.n	8009f50 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009e82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009e86:	2b08      	cmp	r3, #8
 8009e88:	d827      	bhi.n	8009eda <UART_SetConfig+0x49a>
 8009e8a:	a201      	add	r2, pc, #4	; (adr r2, 8009e90 <UART_SetConfig+0x450>)
 8009e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e90:	08009eb5 	.word	0x08009eb5
 8009e94:	08009ebd 	.word	0x08009ebd
 8009e98:	08009ec5 	.word	0x08009ec5
 8009e9c:	08009edb 	.word	0x08009edb
 8009ea0:	08009ecb 	.word	0x08009ecb
 8009ea4:	08009edb 	.word	0x08009edb
 8009ea8:	08009edb 	.word	0x08009edb
 8009eac:	08009edb 	.word	0x08009edb
 8009eb0:	08009ed3 	.word	0x08009ed3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009eb4:	f7fe f804 	bl	8007ec0 <HAL_RCC_GetPCLK1Freq>
 8009eb8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009eba:	e014      	b.n	8009ee6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ebc:	f7fe f816 	bl	8007eec <HAL_RCC_GetPCLK2Freq>
 8009ec0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009ec2:	e010      	b.n	8009ee6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ec4:	4b4e      	ldr	r3, [pc, #312]	; (800a000 <UART_SetConfig+0x5c0>)
 8009ec6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009ec8:	e00d      	b.n	8009ee6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009eca:	f7fd ff61 	bl	8007d90 <HAL_RCC_GetSysClockFreq>
 8009ece:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009ed0:	e009      	b.n	8009ee6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ed2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ed6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009ed8:	e005      	b.n	8009ee6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009eda:	2300      	movs	r3, #0
 8009edc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009ee4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	f000 8090 	beq.w	800a00e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef2:	4a44      	ldr	r2, [pc, #272]	; (800a004 <UART_SetConfig+0x5c4>)
 8009ef4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ef8:	461a      	mov	r2, r3
 8009efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f00:	005a      	lsls	r2, r3, #1
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	085b      	lsrs	r3, r3, #1
 8009f08:	441a      	add	r2, r3
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	685b      	ldr	r3, [r3, #4]
 8009f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f12:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f14:	6a3b      	ldr	r3, [r7, #32]
 8009f16:	2b0f      	cmp	r3, #15
 8009f18:	d916      	bls.n	8009f48 <UART_SetConfig+0x508>
 8009f1a:	6a3b      	ldr	r3, [r7, #32]
 8009f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f20:	d212      	bcs.n	8009f48 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009f22:	6a3b      	ldr	r3, [r7, #32]
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	f023 030f 	bic.w	r3, r3, #15
 8009f2a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009f2c:	6a3b      	ldr	r3, [r7, #32]
 8009f2e:	085b      	lsrs	r3, r3, #1
 8009f30:	b29b      	uxth	r3, r3
 8009f32:	f003 0307 	and.w	r3, r3, #7
 8009f36:	b29a      	uxth	r2, r3
 8009f38:	8bfb      	ldrh	r3, [r7, #30]
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	8bfa      	ldrh	r2, [r7, #30]
 8009f44:	60da      	str	r2, [r3, #12]
 8009f46:	e062      	b.n	800a00e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009f4e:	e05e      	b.n	800a00e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009f50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009f54:	2b08      	cmp	r3, #8
 8009f56:	d828      	bhi.n	8009faa <UART_SetConfig+0x56a>
 8009f58:	a201      	add	r2, pc, #4	; (adr r2, 8009f60 <UART_SetConfig+0x520>)
 8009f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f5e:	bf00      	nop
 8009f60:	08009f85 	.word	0x08009f85
 8009f64:	08009f8d 	.word	0x08009f8d
 8009f68:	08009f95 	.word	0x08009f95
 8009f6c:	08009fab 	.word	0x08009fab
 8009f70:	08009f9b 	.word	0x08009f9b
 8009f74:	08009fab 	.word	0x08009fab
 8009f78:	08009fab 	.word	0x08009fab
 8009f7c:	08009fab 	.word	0x08009fab
 8009f80:	08009fa3 	.word	0x08009fa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f84:	f7fd ff9c 	bl	8007ec0 <HAL_RCC_GetPCLK1Freq>
 8009f88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009f8a:	e014      	b.n	8009fb6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f8c:	f7fd ffae 	bl	8007eec <HAL_RCC_GetPCLK2Freq>
 8009f90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009f92:	e010      	b.n	8009fb6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f94:	4b1a      	ldr	r3, [pc, #104]	; (800a000 <UART_SetConfig+0x5c0>)
 8009f96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009f98:	e00d      	b.n	8009fb6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f9a:	f7fd fef9 	bl	8007d90 <HAL_RCC_GetSysClockFreq>
 8009f9e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009fa0:	e009      	b.n	8009fb6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009fa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009fa6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009fa8:	e005      	b.n	8009fb6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009faa:	2300      	movs	r3, #0
 8009fac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009fb4:	bf00      	nop
    }

    if (pclk != 0U)
 8009fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d028      	beq.n	800a00e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc0:	4a10      	ldr	r2, [pc, #64]	; (800a004 <UART_SetConfig+0x5c4>)
 8009fc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fca:	fbb3 f2f2 	udiv	r2, r3, r2
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	085b      	lsrs	r3, r3, #1
 8009fd4:	441a      	add	r2, r3
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fde:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009fe0:	6a3b      	ldr	r3, [r7, #32]
 8009fe2:	2b0f      	cmp	r3, #15
 8009fe4:	d910      	bls.n	800a008 <UART_SetConfig+0x5c8>
 8009fe6:	6a3b      	ldr	r3, [r7, #32]
 8009fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fec:	d20c      	bcs.n	800a008 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009fee:	6a3b      	ldr	r3, [r7, #32]
 8009ff0:	b29a      	uxth	r2, r3
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	60da      	str	r2, [r3, #12]
 8009ff8:	e009      	b.n	800a00e <UART_SetConfig+0x5ce>
 8009ffa:	bf00      	nop
 8009ffc:	40008000 	.word	0x40008000
 800a000:	00f42400 	.word	0x00f42400
 800a004:	0800a84c 	.word	0x0800a84c
      }
      else
      {
        ret = HAL_ERROR;
 800a008:	2301      	movs	r3, #1
 800a00a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	2201      	movs	r2, #1
 800a012:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	2201      	movs	r2, #1
 800a01a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	2200      	movs	r2, #0
 800a022:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	2200      	movs	r2, #0
 800a028:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a02a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3730      	adds	r7, #48	; 0x30
 800a032:	46bd      	mov	sp, r7
 800a034:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a038 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a038:	b480      	push	{r7}
 800a03a:	b083      	sub	sp, #12
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a044:	f003 0308 	and.w	r3, r3, #8
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d00a      	beq.n	800a062 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	430a      	orrs	r2, r1
 800a060:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a066:	f003 0301 	and.w	r3, r3, #1
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d00a      	beq.n	800a084 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	430a      	orrs	r2, r1
 800a082:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a088:	f003 0302 	and.w	r3, r3, #2
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d00a      	beq.n	800a0a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	430a      	orrs	r2, r1
 800a0a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0aa:	f003 0304 	and.w	r3, r3, #4
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d00a      	beq.n	800a0c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	685b      	ldr	r3, [r3, #4]
 800a0b8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	430a      	orrs	r2, r1
 800a0c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0cc:	f003 0310 	and.w	r3, r3, #16
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d00a      	beq.n	800a0ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	430a      	orrs	r2, r1
 800a0e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ee:	f003 0320 	and.w	r3, r3, #32
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d00a      	beq.n	800a10c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	689b      	ldr	r3, [r3, #8]
 800a0fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	430a      	orrs	r2, r1
 800a10a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a114:	2b00      	cmp	r3, #0
 800a116:	d01a      	beq.n	800a14e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	430a      	orrs	r2, r1
 800a12c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a132:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a136:	d10a      	bne.n	800a14e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	430a      	orrs	r2, r1
 800a14c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a156:	2b00      	cmp	r3, #0
 800a158:	d00a      	beq.n	800a170 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	685b      	ldr	r3, [r3, #4]
 800a160:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	430a      	orrs	r2, r1
 800a16e:	605a      	str	r2, [r3, #4]
  }
}
 800a170:	bf00      	nop
 800a172:	370c      	adds	r7, #12
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr

0800a17c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b098      	sub	sp, #96	; 0x60
 800a180:	af02      	add	r7, sp, #8
 800a182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2200      	movs	r2, #0
 800a188:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a18c:	f7f9 fb54 	bl	8003838 <HAL_GetTick>
 800a190:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f003 0308 	and.w	r3, r3, #8
 800a19c:	2b08      	cmp	r3, #8
 800a19e:	d12f      	bne.n	800a200 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a1a4:	9300      	str	r3, [sp, #0]
 800a1a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f000 f88e 	bl	800a2d0 <UART_WaitOnFlagUntilTimeout>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d022      	beq.n	800a200 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c2:	e853 3f00 	ldrex	r3, [r3]
 800a1c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a1c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a1ce:	653b      	str	r3, [r7, #80]	; 0x50
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1d8:	647b      	str	r3, [r7, #68]	; 0x44
 800a1da:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a1de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a1e0:	e841 2300 	strex	r3, r2, [r1]
 800a1e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a1e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d1e6      	bne.n	800a1ba <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2220      	movs	r2, #32
 800a1f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1fc:	2303      	movs	r3, #3
 800a1fe:	e063      	b.n	800a2c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f003 0304 	and.w	r3, r3, #4
 800a20a:	2b04      	cmp	r3, #4
 800a20c:	d149      	bne.n	800a2a2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a20e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a212:	9300      	str	r3, [sp, #0]
 800a214:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a216:	2200      	movs	r2, #0
 800a218:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f000 f857 	bl	800a2d0 <UART_WaitOnFlagUntilTimeout>
 800a222:	4603      	mov	r3, r0
 800a224:	2b00      	cmp	r3, #0
 800a226:	d03c      	beq.n	800a2a2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a230:	e853 3f00 	ldrex	r3, [r3]
 800a234:	623b      	str	r3, [r7, #32]
   return(result);
 800a236:	6a3b      	ldr	r3, [r7, #32]
 800a238:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a23c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	461a      	mov	r2, r3
 800a244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a246:	633b      	str	r3, [r7, #48]	; 0x30
 800a248:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a24a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a24c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a24e:	e841 2300 	strex	r3, r2, [r1]
 800a252:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a256:	2b00      	cmp	r3, #0
 800a258:	d1e6      	bne.n	800a228 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	3308      	adds	r3, #8
 800a260:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	e853 3f00 	ldrex	r3, [r3]
 800a268:	60fb      	str	r3, [r7, #12]
   return(result);
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f023 0301 	bic.w	r3, r3, #1
 800a270:	64bb      	str	r3, [r7, #72]	; 0x48
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	3308      	adds	r3, #8
 800a278:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a27a:	61fa      	str	r2, [r7, #28]
 800a27c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a27e:	69b9      	ldr	r1, [r7, #24]
 800a280:	69fa      	ldr	r2, [r7, #28]
 800a282:	e841 2300 	strex	r3, r2, [r1]
 800a286:	617b      	str	r3, [r7, #20]
   return(result);
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d1e5      	bne.n	800a25a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2220      	movs	r2, #32
 800a292:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2200      	movs	r2, #0
 800a29a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a29e:	2303      	movs	r3, #3
 800a2a0:	e012      	b.n	800a2c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2220      	movs	r2, #32
 800a2a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2220      	movs	r2, #32
 800a2ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a2c6:	2300      	movs	r3, #0
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3758      	adds	r7, #88	; 0x58
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b084      	sub	sp, #16
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	60f8      	str	r0, [r7, #12]
 800a2d8:	60b9      	str	r1, [r7, #8]
 800a2da:	603b      	str	r3, [r7, #0]
 800a2dc:	4613      	mov	r3, r2
 800a2de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2e0:	e049      	b.n	800a376 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2e2:	69bb      	ldr	r3, [r7, #24]
 800a2e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2e8:	d045      	beq.n	800a376 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2ea:	f7f9 faa5 	bl	8003838 <HAL_GetTick>
 800a2ee:	4602      	mov	r2, r0
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	1ad3      	subs	r3, r2, r3
 800a2f4:	69ba      	ldr	r2, [r7, #24]
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d302      	bcc.n	800a300 <UART_WaitOnFlagUntilTimeout+0x30>
 800a2fa:	69bb      	ldr	r3, [r7, #24]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d101      	bne.n	800a304 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a300:	2303      	movs	r3, #3
 800a302:	e048      	b.n	800a396 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f003 0304 	and.w	r3, r3, #4
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d031      	beq.n	800a376 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	69db      	ldr	r3, [r3, #28]
 800a318:	f003 0308 	and.w	r3, r3, #8
 800a31c:	2b08      	cmp	r3, #8
 800a31e:	d110      	bne.n	800a342 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	2208      	movs	r2, #8
 800a326:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a328:	68f8      	ldr	r0, [r7, #12]
 800a32a:	f000 f838 	bl	800a39e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2208      	movs	r2, #8
 800a332:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2200      	movs	r2, #0
 800a33a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800a33e:	2301      	movs	r3, #1
 800a340:	e029      	b.n	800a396 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	69db      	ldr	r3, [r3, #28]
 800a348:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a34c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a350:	d111      	bne.n	800a376 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a35a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a35c:	68f8      	ldr	r0, [r7, #12]
 800a35e:	f000 f81e 	bl	800a39e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2220      	movs	r2, #32
 800a366:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2200      	movs	r2, #0
 800a36e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a372:	2303      	movs	r3, #3
 800a374:	e00f      	b.n	800a396 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	69da      	ldr	r2, [r3, #28]
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	4013      	ands	r3, r2
 800a380:	68ba      	ldr	r2, [r7, #8]
 800a382:	429a      	cmp	r2, r3
 800a384:	bf0c      	ite	eq
 800a386:	2301      	moveq	r3, #1
 800a388:	2300      	movne	r3, #0
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	461a      	mov	r2, r3
 800a38e:	79fb      	ldrb	r3, [r7, #7]
 800a390:	429a      	cmp	r2, r3
 800a392:	d0a6      	beq.n	800a2e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a394:	2300      	movs	r3, #0
}
 800a396:	4618      	mov	r0, r3
 800a398:	3710      	adds	r7, #16
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}

0800a39e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a39e:	b480      	push	{r7}
 800a3a0:	b095      	sub	sp, #84	; 0x54
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3ae:	e853 3f00 	ldrex	r3, [r3]
 800a3b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a3ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3c4:	643b      	str	r3, [r7, #64]	; 0x40
 800a3c6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a3ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a3cc:	e841 2300 	strex	r3, r2, [r1]
 800a3d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d1e6      	bne.n	800a3a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	3308      	adds	r3, #8
 800a3de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3e0:	6a3b      	ldr	r3, [r7, #32]
 800a3e2:	e853 3f00 	ldrex	r3, [r3]
 800a3e6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3e8:	69fb      	ldr	r3, [r7, #28]
 800a3ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a3ee:	f023 0301 	bic.w	r3, r3, #1
 800a3f2:	64bb      	str	r3, [r7, #72]	; 0x48
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	3308      	adds	r3, #8
 800a3fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a3fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a3fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a400:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a402:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a404:	e841 2300 	strex	r3, r2, [r1]
 800a408:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d1e3      	bne.n	800a3d8 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a414:	2b01      	cmp	r3, #1
 800a416:	d118      	bne.n	800a44a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	e853 3f00 	ldrex	r3, [r3]
 800a424:	60bb      	str	r3, [r7, #8]
   return(result);
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	f023 0310 	bic.w	r3, r3, #16
 800a42c:	647b      	str	r3, [r7, #68]	; 0x44
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	461a      	mov	r2, r3
 800a434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a436:	61bb      	str	r3, [r7, #24]
 800a438:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a43a:	6979      	ldr	r1, [r7, #20]
 800a43c:	69ba      	ldr	r2, [r7, #24]
 800a43e:	e841 2300 	strex	r3, r2, [r1]
 800a442:	613b      	str	r3, [r7, #16]
   return(result);
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d1e6      	bne.n	800a418 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2220      	movs	r2, #32
 800a44e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2200      	movs	r2, #0
 800a456:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2200      	movs	r2, #0
 800a45c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a45e:	bf00      	nop
 800a460:	3754      	adds	r7, #84	; 0x54
 800a462:	46bd      	mov	sp, r7
 800a464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a468:	4770      	bx	lr

0800a46a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a46a:	b580      	push	{r7, lr}
 800a46c:	b084      	sub	sp, #16
 800a46e:	af00      	add	r7, sp, #0
 800a470:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a476:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2200      	movs	r2, #0
 800a47c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2200      	movs	r2, #0
 800a484:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a488:	68f8      	ldr	r0, [r7, #12]
 800a48a:	f7ff fac3 	bl	8009a14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a48e:	bf00      	nop
 800a490:	3710      	adds	r7, #16
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}

0800a496 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a496:	b580      	push	{r7, lr}
 800a498:	b088      	sub	sp, #32
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	e853 3f00 	ldrex	r3, [r3]
 800a4aa:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4b2:	61fb      	str	r3, [r7, #28]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	69fb      	ldr	r3, [r7, #28]
 800a4bc:	61bb      	str	r3, [r7, #24]
 800a4be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c0:	6979      	ldr	r1, [r7, #20]
 800a4c2:	69ba      	ldr	r2, [r7, #24]
 800a4c4:	e841 2300 	strex	r3, r2, [r1]
 800a4c8:	613b      	str	r3, [r7, #16]
   return(result);
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d1e6      	bne.n	800a49e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2220      	movs	r2, #32
 800a4d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f7ff fa8e 	bl	8009a00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4e4:	bf00      	nop
 800a4e6:	3720      	adds	r7, #32
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b083      	sub	sp, #12
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a4f4:	bf00      	nop
 800a4f6:	370c      	adds	r7, #12
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr

0800a500 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a500:	b480      	push	{r7}
 800a502:	b083      	sub	sp, #12
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a508:	bf00      	nop
 800a50a:	370c      	adds	r7, #12
 800a50c:	46bd      	mov	sp, r7
 800a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a512:	4770      	bx	lr

0800a514 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a51c:	bf00      	nop
 800a51e:	370c      	adds	r7, #12
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr

0800a528 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a528:	b480      	push	{r7}
 800a52a:	b085      	sub	sp, #20
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a536:	2b01      	cmp	r3, #1
 800a538:	d101      	bne.n	800a53e <HAL_UARTEx_DisableFifoMode+0x16>
 800a53a:	2302      	movs	r3, #2
 800a53c:	e027      	b.n	800a58e <HAL_UARTEx_DisableFifoMode+0x66>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2201      	movs	r2, #1
 800a542:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2224      	movs	r2, #36	; 0x24
 800a54a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	681a      	ldr	r2, [r3, #0]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f022 0201 	bic.w	r2, r2, #1
 800a564:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a56c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2200      	movs	r2, #0
 800a572:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	68fa      	ldr	r2, [r7, #12]
 800a57a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2220      	movs	r2, #32
 800a580:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2200      	movs	r2, #0
 800a588:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a58c:	2300      	movs	r3, #0
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3714      	adds	r7, #20
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr

0800a59a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a59a:	b580      	push	{r7, lr}
 800a59c:	b084      	sub	sp, #16
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
 800a5a2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a5aa:	2b01      	cmp	r3, #1
 800a5ac:	d101      	bne.n	800a5b2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a5ae:	2302      	movs	r3, #2
 800a5b0:	e02d      	b.n	800a60e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2224      	movs	r2, #36	; 0x24
 800a5be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	681a      	ldr	r2, [r3, #0]
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f022 0201 	bic.w	r2, r2, #1
 800a5d8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	689b      	ldr	r3, [r3, #8]
 800a5e0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	683a      	ldr	r2, [r7, #0]
 800a5ea:	430a      	orrs	r2, r1
 800a5ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 f850 	bl	800a694 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	68fa      	ldr	r2, [r7, #12]
 800a5fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2220      	movs	r2, #32
 800a600:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2200      	movs	r2, #0
 800a608:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a60c:	2300      	movs	r3, #0
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3710      	adds	r7, #16
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}

0800a616 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a616:	b580      	push	{r7, lr}
 800a618:	b084      	sub	sp, #16
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	6078      	str	r0, [r7, #4]
 800a61e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a626:	2b01      	cmp	r3, #1
 800a628:	d101      	bne.n	800a62e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a62a:	2302      	movs	r3, #2
 800a62c:	e02d      	b.n	800a68a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2201      	movs	r2, #1
 800a632:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2224      	movs	r2, #36	; 0x24
 800a63a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	681a      	ldr	r2, [r3, #0]
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f022 0201 	bic.w	r2, r2, #1
 800a654:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	689b      	ldr	r3, [r3, #8]
 800a65c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	683a      	ldr	r2, [r7, #0]
 800a666:	430a      	orrs	r2, r1
 800a668:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f000 f812 	bl	800a694 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	68fa      	ldr	r2, [r7, #12]
 800a676:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2220      	movs	r2, #32
 800a67c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2200      	movs	r2, #0
 800a684:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a688:	2300      	movs	r3, #0
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3710      	adds	r7, #16
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
	...

0800a694 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a694:	b480      	push	{r7}
 800a696:	b085      	sub	sp, #20
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d108      	bne.n	800a6b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a6b4:	e031      	b.n	800a71a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a6b6:	2308      	movs	r3, #8
 800a6b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a6ba:	2308      	movs	r3, #8
 800a6bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	689b      	ldr	r3, [r3, #8]
 800a6c4:	0e5b      	lsrs	r3, r3, #25
 800a6c6:	b2db      	uxtb	r3, r3
 800a6c8:	f003 0307 	and.w	r3, r3, #7
 800a6cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	689b      	ldr	r3, [r3, #8]
 800a6d4:	0f5b      	lsrs	r3, r3, #29
 800a6d6:	b2db      	uxtb	r3, r3
 800a6d8:	f003 0307 	and.w	r3, r3, #7
 800a6dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6de:	7bbb      	ldrb	r3, [r7, #14]
 800a6e0:	7b3a      	ldrb	r2, [r7, #12]
 800a6e2:	4911      	ldr	r1, [pc, #68]	; (800a728 <UARTEx_SetNbDataToProcess+0x94>)
 800a6e4:	5c8a      	ldrb	r2, [r1, r2]
 800a6e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a6ea:	7b3a      	ldrb	r2, [r7, #12]
 800a6ec:	490f      	ldr	r1, [pc, #60]	; (800a72c <UARTEx_SetNbDataToProcess+0x98>)
 800a6ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6f0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6f4:	b29a      	uxth	r2, r3
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6fc:	7bfb      	ldrb	r3, [r7, #15]
 800a6fe:	7b7a      	ldrb	r2, [r7, #13]
 800a700:	4909      	ldr	r1, [pc, #36]	; (800a728 <UARTEx_SetNbDataToProcess+0x94>)
 800a702:	5c8a      	ldrb	r2, [r1, r2]
 800a704:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a708:	7b7a      	ldrb	r2, [r7, #13]
 800a70a:	4908      	ldr	r1, [pc, #32]	; (800a72c <UARTEx_SetNbDataToProcess+0x98>)
 800a70c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a70e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a712:	b29a      	uxth	r2, r3
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a71a:	bf00      	nop
 800a71c:	3714      	adds	r7, #20
 800a71e:	46bd      	mov	sp, r7
 800a720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a724:	4770      	bx	lr
 800a726:	bf00      	nop
 800a728:	0800a864 	.word	0x0800a864
 800a72c:	0800a86c 	.word	0x0800a86c

0800a730 <memset>:
 800a730:	4402      	add	r2, r0
 800a732:	4603      	mov	r3, r0
 800a734:	4293      	cmp	r3, r2
 800a736:	d100      	bne.n	800a73a <memset+0xa>
 800a738:	4770      	bx	lr
 800a73a:	f803 1b01 	strb.w	r1, [r3], #1
 800a73e:	e7f9      	b.n	800a734 <memset+0x4>

0800a740 <__libc_init_array>:
 800a740:	b570      	push	{r4, r5, r6, lr}
 800a742:	4d0d      	ldr	r5, [pc, #52]	; (800a778 <__libc_init_array+0x38>)
 800a744:	4c0d      	ldr	r4, [pc, #52]	; (800a77c <__libc_init_array+0x3c>)
 800a746:	1b64      	subs	r4, r4, r5
 800a748:	10a4      	asrs	r4, r4, #2
 800a74a:	2600      	movs	r6, #0
 800a74c:	42a6      	cmp	r6, r4
 800a74e:	d109      	bne.n	800a764 <__libc_init_array+0x24>
 800a750:	4d0b      	ldr	r5, [pc, #44]	; (800a780 <__libc_init_array+0x40>)
 800a752:	4c0c      	ldr	r4, [pc, #48]	; (800a784 <__libc_init_array+0x44>)
 800a754:	f000 f818 	bl	800a788 <_init>
 800a758:	1b64      	subs	r4, r4, r5
 800a75a:	10a4      	asrs	r4, r4, #2
 800a75c:	2600      	movs	r6, #0
 800a75e:	42a6      	cmp	r6, r4
 800a760:	d105      	bne.n	800a76e <__libc_init_array+0x2e>
 800a762:	bd70      	pop	{r4, r5, r6, pc}
 800a764:	f855 3b04 	ldr.w	r3, [r5], #4
 800a768:	4798      	blx	r3
 800a76a:	3601      	adds	r6, #1
 800a76c:	e7ee      	b.n	800a74c <__libc_init_array+0xc>
 800a76e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a772:	4798      	blx	r3
 800a774:	3601      	adds	r6, #1
 800a776:	e7f2      	b.n	800a75e <__libc_init_array+0x1e>
 800a778:	0800a87c 	.word	0x0800a87c
 800a77c:	0800a87c 	.word	0x0800a87c
 800a780:	0800a87c 	.word	0x0800a87c
 800a784:	0800a880 	.word	0x0800a880

0800a788 <_init>:
 800a788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a78a:	bf00      	nop
 800a78c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a78e:	bc08      	pop	{r3}
 800a790:	469e      	mov	lr, r3
 800a792:	4770      	bx	lr

0800a794 <_fini>:
 800a794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a796:	bf00      	nop
 800a798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a79a:	bc08      	pop	{r3}
 800a79c:	469e      	mov	lr, r3
 800a79e:	4770      	bx	lr

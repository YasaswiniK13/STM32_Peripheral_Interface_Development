
Module6_I2C_TargetTransmit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc68  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  0800be28  0800be28  0001be28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf24  0800bf24  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf24  0800bf24  0001bf24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf2c  0800bf2c  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf2c  0800bf2c  0001bf2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf30  0800bf30  0001bf30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800bf34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013f0  20000098  0800bfcc  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001488  0800bfcc  00021488  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023951  00000000  00000000  0002010b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004056  00000000  00000000  00043a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f70  00000000  00000000  00047ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000018a3  00000000  00000000  00049a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e5bc  00000000  00000000  0004b2cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002581b  00000000  00000000  00079887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00131562  00000000  00000000  0009f0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008d60  00000000  00000000  001d0604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  001d9364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000098 	.word	0x20000098
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800be10 	.word	0x0800be10

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000009c 	.word	0x2000009c
 80001fc:	0800be10 	.word	0x0800be10

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_d2iz>:
 8000628:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800062c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000630:	d215      	bcs.n	800065e <__aeabi_d2iz+0x36>
 8000632:	d511      	bpl.n	8000658 <__aeabi_d2iz+0x30>
 8000634:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000638:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800063c:	d912      	bls.n	8000664 <__aeabi_d2iz+0x3c>
 800063e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000642:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000646:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800064a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800064e:	fa23 f002 	lsr.w	r0, r3, r2
 8000652:	bf18      	it	ne
 8000654:	4240      	negne	r0, r0
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000662:	d105      	bne.n	8000670 <__aeabi_d2iz+0x48>
 8000664:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000668:	bf08      	it	eq
 800066a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800066e:	4770      	bx	lr
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_uldivmod>:
 8000678:	b953      	cbnz	r3, 8000690 <__aeabi_uldivmod+0x18>
 800067a:	b94a      	cbnz	r2, 8000690 <__aeabi_uldivmod+0x18>
 800067c:	2900      	cmp	r1, #0
 800067e:	bf08      	it	eq
 8000680:	2800      	cmpeq	r0, #0
 8000682:	bf1c      	itt	ne
 8000684:	f04f 31ff 	movne.w	r1, #4294967295
 8000688:	f04f 30ff 	movne.w	r0, #4294967295
 800068c:	f000 b970 	b.w	8000970 <__aeabi_idiv0>
 8000690:	f1ad 0c08 	sub.w	ip, sp, #8
 8000694:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000698:	f000 f806 	bl	80006a8 <__udivmoddi4>
 800069c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006a4:	b004      	add	sp, #16
 80006a6:	4770      	bx	lr

080006a8 <__udivmoddi4>:
 80006a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006ac:	9e08      	ldr	r6, [sp, #32]
 80006ae:	460d      	mov	r5, r1
 80006b0:	4604      	mov	r4, r0
 80006b2:	460f      	mov	r7, r1
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d14a      	bne.n	800074e <__udivmoddi4+0xa6>
 80006b8:	428a      	cmp	r2, r1
 80006ba:	4694      	mov	ip, r2
 80006bc:	d965      	bls.n	800078a <__udivmoddi4+0xe2>
 80006be:	fab2 f382 	clz	r3, r2
 80006c2:	b143      	cbz	r3, 80006d6 <__udivmoddi4+0x2e>
 80006c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80006c8:	f1c3 0220 	rsb	r2, r3, #32
 80006cc:	409f      	lsls	r7, r3
 80006ce:	fa20 f202 	lsr.w	r2, r0, r2
 80006d2:	4317      	orrs	r7, r2
 80006d4:	409c      	lsls	r4, r3
 80006d6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80006da:	fa1f f58c 	uxth.w	r5, ip
 80006de:	fbb7 f1fe 	udiv	r1, r7, lr
 80006e2:	0c22      	lsrs	r2, r4, #16
 80006e4:	fb0e 7711 	mls	r7, lr, r1, r7
 80006e8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80006ec:	fb01 f005 	mul.w	r0, r1, r5
 80006f0:	4290      	cmp	r0, r2
 80006f2:	d90a      	bls.n	800070a <__udivmoddi4+0x62>
 80006f4:	eb1c 0202 	adds.w	r2, ip, r2
 80006f8:	f101 37ff 	add.w	r7, r1, #4294967295
 80006fc:	f080 811c 	bcs.w	8000938 <__udivmoddi4+0x290>
 8000700:	4290      	cmp	r0, r2
 8000702:	f240 8119 	bls.w	8000938 <__udivmoddi4+0x290>
 8000706:	3902      	subs	r1, #2
 8000708:	4462      	add	r2, ip
 800070a:	1a12      	subs	r2, r2, r0
 800070c:	b2a4      	uxth	r4, r4
 800070e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000712:	fb0e 2210 	mls	r2, lr, r0, r2
 8000716:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800071a:	fb00 f505 	mul.w	r5, r0, r5
 800071e:	42a5      	cmp	r5, r4
 8000720:	d90a      	bls.n	8000738 <__udivmoddi4+0x90>
 8000722:	eb1c 0404 	adds.w	r4, ip, r4
 8000726:	f100 32ff 	add.w	r2, r0, #4294967295
 800072a:	f080 8107 	bcs.w	800093c <__udivmoddi4+0x294>
 800072e:	42a5      	cmp	r5, r4
 8000730:	f240 8104 	bls.w	800093c <__udivmoddi4+0x294>
 8000734:	4464      	add	r4, ip
 8000736:	3802      	subs	r0, #2
 8000738:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800073c:	1b64      	subs	r4, r4, r5
 800073e:	2100      	movs	r1, #0
 8000740:	b11e      	cbz	r6, 800074a <__udivmoddi4+0xa2>
 8000742:	40dc      	lsrs	r4, r3
 8000744:	2300      	movs	r3, #0
 8000746:	e9c6 4300 	strd	r4, r3, [r6]
 800074a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800074e:	428b      	cmp	r3, r1
 8000750:	d908      	bls.n	8000764 <__udivmoddi4+0xbc>
 8000752:	2e00      	cmp	r6, #0
 8000754:	f000 80ed 	beq.w	8000932 <__udivmoddi4+0x28a>
 8000758:	2100      	movs	r1, #0
 800075a:	e9c6 0500 	strd	r0, r5, [r6]
 800075e:	4608      	mov	r0, r1
 8000760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000764:	fab3 f183 	clz	r1, r3
 8000768:	2900      	cmp	r1, #0
 800076a:	d149      	bne.n	8000800 <__udivmoddi4+0x158>
 800076c:	42ab      	cmp	r3, r5
 800076e:	d302      	bcc.n	8000776 <__udivmoddi4+0xce>
 8000770:	4282      	cmp	r2, r0
 8000772:	f200 80f8 	bhi.w	8000966 <__udivmoddi4+0x2be>
 8000776:	1a84      	subs	r4, r0, r2
 8000778:	eb65 0203 	sbc.w	r2, r5, r3
 800077c:	2001      	movs	r0, #1
 800077e:	4617      	mov	r7, r2
 8000780:	2e00      	cmp	r6, #0
 8000782:	d0e2      	beq.n	800074a <__udivmoddi4+0xa2>
 8000784:	e9c6 4700 	strd	r4, r7, [r6]
 8000788:	e7df      	b.n	800074a <__udivmoddi4+0xa2>
 800078a:	b902      	cbnz	r2, 800078e <__udivmoddi4+0xe6>
 800078c:	deff      	udf	#255	; 0xff
 800078e:	fab2 f382 	clz	r3, r2
 8000792:	2b00      	cmp	r3, #0
 8000794:	f040 8090 	bne.w	80008b8 <__udivmoddi4+0x210>
 8000798:	1a8a      	subs	r2, r1, r2
 800079a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800079e:	fa1f fe8c 	uxth.w	lr, ip
 80007a2:	2101      	movs	r1, #1
 80007a4:	fbb2 f5f7 	udiv	r5, r2, r7
 80007a8:	fb07 2015 	mls	r0, r7, r5, r2
 80007ac:	0c22      	lsrs	r2, r4, #16
 80007ae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80007b2:	fb0e f005 	mul.w	r0, lr, r5
 80007b6:	4290      	cmp	r0, r2
 80007b8:	d908      	bls.n	80007cc <__udivmoddi4+0x124>
 80007ba:	eb1c 0202 	adds.w	r2, ip, r2
 80007be:	f105 38ff 	add.w	r8, r5, #4294967295
 80007c2:	d202      	bcs.n	80007ca <__udivmoddi4+0x122>
 80007c4:	4290      	cmp	r0, r2
 80007c6:	f200 80cb 	bhi.w	8000960 <__udivmoddi4+0x2b8>
 80007ca:	4645      	mov	r5, r8
 80007cc:	1a12      	subs	r2, r2, r0
 80007ce:	b2a4      	uxth	r4, r4
 80007d0:	fbb2 f0f7 	udiv	r0, r2, r7
 80007d4:	fb07 2210 	mls	r2, r7, r0, r2
 80007d8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80007dc:	fb0e fe00 	mul.w	lr, lr, r0
 80007e0:	45a6      	cmp	lr, r4
 80007e2:	d908      	bls.n	80007f6 <__udivmoddi4+0x14e>
 80007e4:	eb1c 0404 	adds.w	r4, ip, r4
 80007e8:	f100 32ff 	add.w	r2, r0, #4294967295
 80007ec:	d202      	bcs.n	80007f4 <__udivmoddi4+0x14c>
 80007ee:	45a6      	cmp	lr, r4
 80007f0:	f200 80bb 	bhi.w	800096a <__udivmoddi4+0x2c2>
 80007f4:	4610      	mov	r0, r2
 80007f6:	eba4 040e 	sub.w	r4, r4, lr
 80007fa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80007fe:	e79f      	b.n	8000740 <__udivmoddi4+0x98>
 8000800:	f1c1 0720 	rsb	r7, r1, #32
 8000804:	408b      	lsls	r3, r1
 8000806:	fa22 fc07 	lsr.w	ip, r2, r7
 800080a:	ea4c 0c03 	orr.w	ip, ip, r3
 800080e:	fa05 f401 	lsl.w	r4, r5, r1
 8000812:	fa20 f307 	lsr.w	r3, r0, r7
 8000816:	40fd      	lsrs	r5, r7
 8000818:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800081c:	4323      	orrs	r3, r4
 800081e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000822:	fa1f fe8c 	uxth.w	lr, ip
 8000826:	fb09 5518 	mls	r5, r9, r8, r5
 800082a:	0c1c      	lsrs	r4, r3, #16
 800082c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000830:	fb08 f50e 	mul.w	r5, r8, lr
 8000834:	42a5      	cmp	r5, r4
 8000836:	fa02 f201 	lsl.w	r2, r2, r1
 800083a:	fa00 f001 	lsl.w	r0, r0, r1
 800083e:	d90b      	bls.n	8000858 <__udivmoddi4+0x1b0>
 8000840:	eb1c 0404 	adds.w	r4, ip, r4
 8000844:	f108 3aff 	add.w	sl, r8, #4294967295
 8000848:	f080 8088 	bcs.w	800095c <__udivmoddi4+0x2b4>
 800084c:	42a5      	cmp	r5, r4
 800084e:	f240 8085 	bls.w	800095c <__udivmoddi4+0x2b4>
 8000852:	f1a8 0802 	sub.w	r8, r8, #2
 8000856:	4464      	add	r4, ip
 8000858:	1b64      	subs	r4, r4, r5
 800085a:	b29d      	uxth	r5, r3
 800085c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000860:	fb09 4413 	mls	r4, r9, r3, r4
 8000864:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000868:	fb03 fe0e 	mul.w	lr, r3, lr
 800086c:	45a6      	cmp	lr, r4
 800086e:	d908      	bls.n	8000882 <__udivmoddi4+0x1da>
 8000870:	eb1c 0404 	adds.w	r4, ip, r4
 8000874:	f103 35ff 	add.w	r5, r3, #4294967295
 8000878:	d26c      	bcs.n	8000954 <__udivmoddi4+0x2ac>
 800087a:	45a6      	cmp	lr, r4
 800087c:	d96a      	bls.n	8000954 <__udivmoddi4+0x2ac>
 800087e:	3b02      	subs	r3, #2
 8000880:	4464      	add	r4, ip
 8000882:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000886:	fba3 9502 	umull	r9, r5, r3, r2
 800088a:	eba4 040e 	sub.w	r4, r4, lr
 800088e:	42ac      	cmp	r4, r5
 8000890:	46c8      	mov	r8, r9
 8000892:	46ae      	mov	lr, r5
 8000894:	d356      	bcc.n	8000944 <__udivmoddi4+0x29c>
 8000896:	d053      	beq.n	8000940 <__udivmoddi4+0x298>
 8000898:	b156      	cbz	r6, 80008b0 <__udivmoddi4+0x208>
 800089a:	ebb0 0208 	subs.w	r2, r0, r8
 800089e:	eb64 040e 	sbc.w	r4, r4, lr
 80008a2:	fa04 f707 	lsl.w	r7, r4, r7
 80008a6:	40ca      	lsrs	r2, r1
 80008a8:	40cc      	lsrs	r4, r1
 80008aa:	4317      	orrs	r7, r2
 80008ac:	e9c6 7400 	strd	r7, r4, [r6]
 80008b0:	4618      	mov	r0, r3
 80008b2:	2100      	movs	r1, #0
 80008b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008b8:	f1c3 0120 	rsb	r1, r3, #32
 80008bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80008c0:	fa20 f201 	lsr.w	r2, r0, r1
 80008c4:	fa25 f101 	lsr.w	r1, r5, r1
 80008c8:	409d      	lsls	r5, r3
 80008ca:	432a      	orrs	r2, r5
 80008cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008d0:	fa1f fe8c 	uxth.w	lr, ip
 80008d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80008d8:	fb07 1510 	mls	r5, r7, r0, r1
 80008dc:	0c11      	lsrs	r1, r2, #16
 80008de:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80008e2:	fb00 f50e 	mul.w	r5, r0, lr
 80008e6:	428d      	cmp	r5, r1
 80008e8:	fa04 f403 	lsl.w	r4, r4, r3
 80008ec:	d908      	bls.n	8000900 <__udivmoddi4+0x258>
 80008ee:	eb1c 0101 	adds.w	r1, ip, r1
 80008f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80008f6:	d22f      	bcs.n	8000958 <__udivmoddi4+0x2b0>
 80008f8:	428d      	cmp	r5, r1
 80008fa:	d92d      	bls.n	8000958 <__udivmoddi4+0x2b0>
 80008fc:	3802      	subs	r0, #2
 80008fe:	4461      	add	r1, ip
 8000900:	1b49      	subs	r1, r1, r5
 8000902:	b292      	uxth	r2, r2
 8000904:	fbb1 f5f7 	udiv	r5, r1, r7
 8000908:	fb07 1115 	mls	r1, r7, r5, r1
 800090c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000910:	fb05 f10e 	mul.w	r1, r5, lr
 8000914:	4291      	cmp	r1, r2
 8000916:	d908      	bls.n	800092a <__udivmoddi4+0x282>
 8000918:	eb1c 0202 	adds.w	r2, ip, r2
 800091c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000920:	d216      	bcs.n	8000950 <__udivmoddi4+0x2a8>
 8000922:	4291      	cmp	r1, r2
 8000924:	d914      	bls.n	8000950 <__udivmoddi4+0x2a8>
 8000926:	3d02      	subs	r5, #2
 8000928:	4462      	add	r2, ip
 800092a:	1a52      	subs	r2, r2, r1
 800092c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000930:	e738      	b.n	80007a4 <__udivmoddi4+0xfc>
 8000932:	4631      	mov	r1, r6
 8000934:	4630      	mov	r0, r6
 8000936:	e708      	b.n	800074a <__udivmoddi4+0xa2>
 8000938:	4639      	mov	r1, r7
 800093a:	e6e6      	b.n	800070a <__udivmoddi4+0x62>
 800093c:	4610      	mov	r0, r2
 800093e:	e6fb      	b.n	8000738 <__udivmoddi4+0x90>
 8000940:	4548      	cmp	r0, r9
 8000942:	d2a9      	bcs.n	8000898 <__udivmoddi4+0x1f0>
 8000944:	ebb9 0802 	subs.w	r8, r9, r2
 8000948:	eb65 0e0c 	sbc.w	lr, r5, ip
 800094c:	3b01      	subs	r3, #1
 800094e:	e7a3      	b.n	8000898 <__udivmoddi4+0x1f0>
 8000950:	4645      	mov	r5, r8
 8000952:	e7ea      	b.n	800092a <__udivmoddi4+0x282>
 8000954:	462b      	mov	r3, r5
 8000956:	e794      	b.n	8000882 <__udivmoddi4+0x1da>
 8000958:	4640      	mov	r0, r8
 800095a:	e7d1      	b.n	8000900 <__udivmoddi4+0x258>
 800095c:	46d0      	mov	r8, sl
 800095e:	e77b      	b.n	8000858 <__udivmoddi4+0x1b0>
 8000960:	3d02      	subs	r5, #2
 8000962:	4462      	add	r2, ip
 8000964:	e732      	b.n	80007cc <__udivmoddi4+0x124>
 8000966:	4608      	mov	r0, r1
 8000968:	e70a      	b.n	8000780 <__udivmoddi4+0xd8>
 800096a:	4464      	add	r4, ip
 800096c:	3802      	subs	r0, #2
 800096e:	e742      	b.n	80007f6 <__udivmoddi4+0x14e>

08000970 <__aeabi_idiv0>:
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop

08000974 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f103 0208 	add.w	r2, r3, #8
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	f04f 32ff 	mov.w	r2, #4294967295
 800098c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	f103 0208 	add.w	r2, r3, #8
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f103 0208 	add.w	r2, r3, #8
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80009ce:	b480      	push	{r7}
 80009d0:	b085      	sub	sp, #20
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
 80009d6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	68fa      	ldr	r2, [r7, #12]
 80009e2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	689a      	ldr	r2, [r3, #8]
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	683a      	ldr	r2, [r7, #0]
 80009f2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	683a      	ldr	r2, [r7, #0]
 80009f8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	1c5a      	adds	r2, r3, #1
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	601a      	str	r2, [r3, #0]
}
 8000a0a:	bf00      	nop
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000a16:	b480      	push	{r7}
 8000a18:	b085      	sub	sp, #20
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
 8000a1e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a2c:	d103      	bne.n	8000a36 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	691b      	ldr	r3, [r3, #16]
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	e00c      	b.n	8000a50 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	3308      	adds	r3, #8
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	e002      	b.n	8000a44 <vListInsert+0x2e>
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	68ba      	ldr	r2, [r7, #8]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d2f6      	bcs.n	8000a3e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	685a      	ldr	r2, [r3, #4]
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	683a      	ldr	r2, [r7, #0]
 8000a5e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	68fa      	ldr	r2, [r7, #12]
 8000a64:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	683a      	ldr	r2, [r7, #0]
 8000a6a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	1c5a      	adds	r2, r3, #1
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	601a      	str	r2, [r3, #0]
}
 8000a7c:	bf00      	nop
 8000a7e:	3714      	adds	r7, #20
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	691b      	ldr	r3, [r3, #16]
 8000a94:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	6892      	ldr	r2, [r2, #8]
 8000a9e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	687a      	ldr	r2, [r7, #4]
 8000aa6:	6852      	ldr	r2, [r2, #4]
 8000aa8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d103      	bne.n	8000abc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	689a      	ldr	r2, [r3, #8]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	1e5a      	subs	r2, r3, #1
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	681b      	ldr	r3, [r3, #0]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3714      	adds	r7, #20
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08c      	sub	sp, #48	; 0x30
 8000ae0:	af04      	add	r7, sp, #16
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	4613      	mov	r3, r2
 8000aea:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000aec:	88fb      	ldrh	r3, [r7, #6]
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	4618      	mov	r0, r3
 8000af2:	f001 fab3 	bl	800205c <pvPortMalloc>
 8000af6:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d013      	beq.n	8000b26 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000afe:	2054      	movs	r0, #84	; 0x54
 8000b00:	f001 faac 	bl	800205c <pvPortMalloc>
 8000b04:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d008      	beq.n	8000b1e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000b0c:	2254      	movs	r2, #84	; 0x54
 8000b0e:	2100      	movs	r1, #0
 8000b10:	69f8      	ldr	r0, [r7, #28]
 8000b12:	f00a fcbf 	bl	800b494 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	697a      	ldr	r2, [r7, #20]
 8000b1a:	631a      	str	r2, [r3, #48]	; 0x30
 8000b1c:	e005      	b.n	8000b2a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8000b1e:	6978      	ldr	r0, [r7, #20]
 8000b20:	f001 fb56 	bl	80021d0 <vPortFree>
 8000b24:	e001      	b.n	8000b2a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d013      	beq.n	8000b58 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000b30:	88fa      	ldrh	r2, [r7, #6]
 8000b32:	2300      	movs	r3, #0
 8000b34:	9303      	str	r3, [sp, #12]
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	9302      	str	r3, [sp, #8]
 8000b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b3c:	9301      	str	r3, [sp, #4]
 8000b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b40:	9300      	str	r3, [sp, #0]
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	68b9      	ldr	r1, [r7, #8]
 8000b46:	68f8      	ldr	r0, [r7, #12]
 8000b48:	f000 f80e 	bl	8000b68 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000b4c:	69f8      	ldr	r0, [r7, #28]
 8000b4e:	f000 f891 	bl	8000c74 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000b52:	2301      	movs	r3, #1
 8000b54:	61bb      	str	r3, [r7, #24]
 8000b56:	e002      	b.n	8000b5e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000b58:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000b5e:	69bb      	ldr	r3, [r7, #24]
    }
 8000b60:	4618      	mov	r0, r3
 8000b62:	3720      	adds	r7, #32
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b088      	sub	sp, #32
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
 8000b74:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000b80:	3b01      	subs	r3, #1
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	4413      	add	r3, r2
 8000b86:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	f023 0307 	bic.w	r3, r3, #7
 8000b8e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	f003 0307 	and.w	r3, r3, #7
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d00a      	beq.n	8000bb0 <prvInitialiseNewTask+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b9e:	f383 8811 	msr	BASEPRI, r3
 8000ba2:	f3bf 8f6f 	isb	sy
 8000ba6:	f3bf 8f4f 	dsb	sy
 8000baa:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000bac:	bf00      	nop
 8000bae:	e7fe      	b.n	8000bae <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d01e      	beq.n	8000bf4 <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
 8000bba:	e012      	b.n	8000be2 <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000bbc:	68ba      	ldr	r2, [r7, #8]
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	7819      	ldrb	r1, [r3, #0]
 8000bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	4413      	add	r3, r2
 8000bca:	3334      	adds	r3, #52	; 0x34
 8000bcc:	460a      	mov	r2, r1
 8000bce:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000bd0:	68ba      	ldr	r2, [r7, #8]
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d006      	beq.n	8000bea <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	3301      	adds	r3, #1
 8000be0:	61fb      	str	r3, [r7, #28]
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	2b0f      	cmp	r3, #15
 8000be6:	d9e9      	bls.n	8000bbc <prvInitialiseNewTask+0x54>
 8000be8:	e000      	b.n	8000bec <prvInitialiseNewTask+0x84>
            {
                break;
 8000bea:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bf6:	2b06      	cmp	r3, #6
 8000bf8:	d90a      	bls.n	8000c10 <prvInitialiseNewTask+0xa8>
        __asm volatile
 8000bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bfe:	f383 8811 	msr	BASEPRI, r3
 8000c02:	f3bf 8f6f 	isb	sy
 8000c06:	f3bf 8f4f 	dsb	sy
 8000c0a:	613b      	str	r3, [r7, #16]
    }
 8000c0c:	bf00      	nop
 8000c0e:	e7fe      	b.n	8000c0e <prvInitialiseNewTask+0xa6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c12:	2b06      	cmp	r3, #6
 8000c14:	d901      	bls.n	8000c1a <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000c16:	2306      	movs	r3, #6
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c1e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c24:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c28:	3304      	adds	r3, #4
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff fec2 	bl	80009b4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c32:	3318      	adds	r3, #24
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff febd 	bl	80009b4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c3e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c42:	f1c3 0207 	rsb	r2, r3, #7
 8000c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c48:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c4e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000c50:	683a      	ldr	r2, [r7, #0]
 8000c52:	68f9      	ldr	r1, [r7, #12]
 8000c54:	69b8      	ldr	r0, [r7, #24]
 8000c56:	f000 ffaf 	bl	8001bb8 <pxPortInitialiseStack>
 8000c5a:	4602      	mov	r2, r0
 8000c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c5e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d002      	beq.n	8000c6c <prvInitialiseNewTask+0x104>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c6a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000c6c:	bf00      	nop
 8000c6e:	3720      	adds	r7, #32
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000c7c:	f001 f8cc 	bl	8001e18 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000c80:	4b3e      	ldr	r3, [pc, #248]	; (8000d7c <prvAddNewTaskToReadyList+0x108>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	3301      	adds	r3, #1
 8000c86:	4a3d      	ldr	r2, [pc, #244]	; (8000d7c <prvAddNewTaskToReadyList+0x108>)
 8000c88:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000c8a:	4b3d      	ldr	r3, [pc, #244]	; (8000d80 <prvAddNewTaskToReadyList+0x10c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d109      	bne.n	8000ca6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000c92:	4a3b      	ldr	r2, [pc, #236]	; (8000d80 <prvAddNewTaskToReadyList+0x10c>)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000c98:	4b38      	ldr	r3, [pc, #224]	; (8000d7c <prvAddNewTaskToReadyList+0x108>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d110      	bne.n	8000cc2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000ca0:	f000 fd0e 	bl	80016c0 <prvInitialiseTaskLists>
 8000ca4:	e00d      	b.n	8000cc2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000ca6:	4b37      	ldr	r3, [pc, #220]	; (8000d84 <prvAddNewTaskToReadyList+0x110>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d109      	bne.n	8000cc2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000cae:	4b34      	ldr	r3, [pc, #208]	; (8000d80 <prvAddNewTaskToReadyList+0x10c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d802      	bhi.n	8000cc2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000cbc:	4a30      	ldr	r2, [pc, #192]	; (8000d80 <prvAddNewTaskToReadyList+0x10c>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000cc2:	4b31      	ldr	r3, [pc, #196]	; (8000d88 <prvAddNewTaskToReadyList+0x114>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	4a2f      	ldr	r2, [pc, #188]	; (8000d88 <prvAddNewTaskToReadyList+0x114>)
 8000cca:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	409a      	lsls	r2, r3
 8000cd4:	4b2d      	ldr	r3, [pc, #180]	; (8000d8c <prvAddNewTaskToReadyList+0x118>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	4a2c      	ldr	r2, [pc, #176]	; (8000d8c <prvAddNewTaskToReadyList+0x118>)
 8000cdc:	6013      	str	r3, [r2, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ce2:	492b      	ldr	r1, [pc, #172]	; (8000d90 <prvAddNewTaskToReadyList+0x11c>)
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	4413      	add	r3, r2
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	440b      	add	r3, r1
 8000cee:	3304      	adds	r3, #4
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	689a      	ldr	r2, [r3, #8]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	3204      	adds	r2, #4
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	1d1a      	adds	r2, r3, #4
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d18:	4613      	mov	r3, r2
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	4413      	add	r3, r2
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	4a1b      	ldr	r2, [pc, #108]	; (8000d90 <prvAddNewTaskToReadyList+0x11c>)
 8000d22:	441a      	add	r2, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	615a      	str	r2, [r3, #20]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d2c:	4918      	ldr	r1, [pc, #96]	; (8000d90 <prvAddNewTaskToReadyList+0x11c>)
 8000d2e:	4613      	mov	r3, r2
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	4413      	add	r3, r2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	440b      	add	r3, r1
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	1c59      	adds	r1, r3, #1
 8000d3c:	4814      	ldr	r0, [pc, #80]	; (8000d90 <prvAddNewTaskToReadyList+0x11c>)
 8000d3e:	4613      	mov	r3, r2
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	4413      	add	r3, r2
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	4403      	add	r3, r0
 8000d48:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000d4a:	f001 f895 	bl	8001e78 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <prvAddNewTaskToReadyList+0x110>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d00e      	beq.n	8000d74 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000d56:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <prvAddNewTaskToReadyList+0x10c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d207      	bcs.n	8000d74 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000d64:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <prvAddNewTaskToReadyList+0x120>)
 8000d66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	f3bf 8f4f 	dsb	sy
 8000d70:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000d74:	bf00      	nop
 8000d76:	3710      	adds	r7, #16
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	200001b4 	.word	0x200001b4
 8000d80:	200000b4 	.word	0x200000b4
 8000d84:	200001c0 	.word	0x200001c0
 8000d88:	200001d0 	.word	0x200001d0
 8000d8c:	200001bc 	.word	0x200001bc
 8000d90:	200000b8 	.word	0x200000b8
 8000d94:	e000ed04 	.word	0xe000ed04

08000d98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d017      	beq.n	8000dda <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8000daa:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <vTaskDelay+0x60>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d00a      	beq.n	8000dc8 <vTaskDelay+0x30>
        __asm volatile
 8000db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000db6:	f383 8811 	msr	BASEPRI, r3
 8000dba:	f3bf 8f6f 	isb	sy
 8000dbe:	f3bf 8f4f 	dsb	sy
 8000dc2:	60bb      	str	r3, [r7, #8]
    }
 8000dc4:	bf00      	nop
 8000dc6:	e7fe      	b.n	8000dc6 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8000dc8:	f000 f9d6 	bl	8001178 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000dcc:	2100      	movs	r1, #0
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f000 fe72 	bl	8001ab8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8000dd4:	f000 f9de 	bl	8001194 <xTaskResumeAll>
 8000dd8:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d107      	bne.n	8000df0 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <vTaskDelay+0x64>)
 8000de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	f3bf 8f4f 	dsb	sy
 8000dec:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000df0:	bf00      	nop
 8000df2:	3710      	adds	r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	200001dc 	.word	0x200001dc
 8000dfc:	e000ed04 	.word	0xe000ed04

08000e00 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8000e08:	f001 f806 	bl	8001e18 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d102      	bne.n	8000e18 <vTaskSuspend+0x18>
 8000e12:	4b43      	ldr	r3, [pc, #268]	; (8000f20 <vTaskSuspend+0x120>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	e000      	b.n	8000e1a <vTaskSuspend+0x1a>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	3304      	adds	r3, #4
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff fe31 	bl	8000a88 <uxListRemove>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d115      	bne.n	8000e58 <vTaskSuspend+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e30:	493c      	ldr	r1, [pc, #240]	; (8000f24 <vTaskSuspend+0x124>)
 8000e32:	4613      	mov	r3, r2
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	4413      	add	r3, r2
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	440b      	add	r3, r1
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d10a      	bne.n	8000e58 <vTaskSuspend+0x58>
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e46:	2201      	movs	r2, #1
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43da      	mvns	r2, r3
 8000e4e:	4b36      	ldr	r3, [pc, #216]	; (8000f28 <vTaskSuspend+0x128>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4013      	ands	r3, r2
 8000e54:	4a34      	ldr	r2, [pc, #208]	; (8000f28 <vTaskSuspend+0x128>)
 8000e56:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d004      	beq.n	8000e6a <vTaskSuspend+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	3318      	adds	r3, #24
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff fe0f 	bl	8000a88 <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	3304      	adds	r3, #4
 8000e6e:	4619      	mov	r1, r3
 8000e70:	482e      	ldr	r0, [pc, #184]	; (8000f2c <vTaskSuspend+0x12c>)
 8000e72:	f7ff fdac 	bl	80009ce <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
 8000e7a:	e010      	b.n	8000e9e <vTaskSuspend+0x9e>
                {
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	4413      	add	r3, r2
 8000e82:	3350      	adds	r3, #80	; 0x50
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d105      	bne.n	8000e98 <vTaskSuspend+0x98>
                    {
                        /* The task was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	4413      	add	r3, r2
 8000e92:	3350      	adds	r3, #80	; 0x50
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]
                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	617b      	str	r3, [r7, #20]
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	ddeb      	ble.n	8000e7c <vTaskSuspend+0x7c>
                    }
                }
            }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8000ea4:	f000 ffe8 	bl	8001e78 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8000ea8:	4b21      	ldr	r3, [pc, #132]	; (8000f30 <vTaskSuspend+0x130>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d005      	beq.n	8000ebc <vTaskSuspend+0xbc>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8000eb0:	f000 ffb2 	bl	8001e18 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8000eb4:	f000 fc82 	bl	80017bc <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8000eb8:	f000 ffde 	bl	8001e78 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8000ebc:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <vTaskSuspend+0x120>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d127      	bne.n	8000f16 <vTaskSuspend+0x116>
        {
            if( xSchedulerRunning != pdFALSE )
 8000ec6:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <vTaskSuspend+0x130>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d017      	beq.n	8000efe <vTaskSuspend+0xfe>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 8000ece:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <vTaskSuspend+0x134>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d00a      	beq.n	8000eec <vTaskSuspend+0xec>
        __asm volatile
 8000ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eda:	f383 8811 	msr	BASEPRI, r3
 8000ede:	f3bf 8f6f 	isb	sy
 8000ee2:	f3bf 8f4f 	dsb	sy
 8000ee6:	60fb      	str	r3, [r7, #12]
    }
 8000ee8:	bf00      	nop
 8000eea:	e7fe      	b.n	8000eea <vTaskSuspend+0xea>
                portYIELD_WITHIN_API();
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <vTaskSuspend+0x138>)
 8000eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	f3bf 8f4f 	dsb	sy
 8000ef8:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000efc:	e00b      	b.n	8000f16 <vTaskSuspend+0x116>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8000efe:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <vTaskSuspend+0x12c>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <vTaskSuspend+0x13c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d103      	bne.n	8000f12 <vTaskSuspend+0x112>
                    pxCurrentTCB = NULL;
 8000f0a:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <vTaskSuspend+0x120>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
    }
 8000f10:	e001      	b.n	8000f16 <vTaskSuspend+0x116>
                    vTaskSwitchContext();
 8000f12:	f000 fb61 	bl	80015d8 <vTaskSwitchContext>
    }
 8000f16:	bf00      	nop
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200000b4 	.word	0x200000b4
 8000f24:	200000b8 	.word	0x200000b8
 8000f28:	200001bc 	.word	0x200001bc
 8000f2c:	200001a0 	.word	0x200001a0
 8000f30:	200001c0 	.word	0x200001c0
 8000f34:	200001dc 	.word	0x200001dc
 8000f38:	e000ed04 	.word	0xe000ed04
 8000f3c:	200001b4 	.word	0x200001b4

08000f40 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8000f40:	b480      	push	{r7}
 8000f42:	b087      	sub	sp, #28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	613b      	str	r3, [r7, #16]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d10a      	bne.n	8000f6c <prvTaskIsTaskSuspended+0x2c>
        __asm volatile
 8000f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f5a:	f383 8811 	msr	BASEPRI, r3
 8000f5e:	f3bf 8f6f 	isb	sy
 8000f62:	f3bf 8f4f 	dsb	sy
 8000f66:	60fb      	str	r3, [r7, #12]
    }
 8000f68:	bf00      	nop
 8000f6a:	e7fe      	b.n	8000f6a <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	695b      	ldr	r3, [r3, #20]
 8000f70:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <prvTaskIsTaskSuspended+0x5c>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d10a      	bne.n	8000f8c <prvTaskIsTaskSuspended+0x4c>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f7a:	4a09      	ldr	r2, [pc, #36]	; (8000fa0 <prvTaskIsTaskSuspended+0x60>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d005      	beq.n	8000f8c <prvTaskIsTaskSuspended+0x4c>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d101      	bne.n	8000f8c <prvTaskIsTaskSuspended+0x4c>
                {
                    xReturn = pdTRUE;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8000f8c:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8000f8e:	4618      	mov	r0, r3
 8000f90:	371c      	adds	r7, #28
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	200001a0 	.word	0x200001a0
 8000fa0:	20000174 	.word	0x20000174

08000fa4 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

    BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
    {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08a      	sub	sp, #40	; 0x28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
        BaseType_t xYieldRequired = pdFALSE;
 8000fac:	2300      	movs	r3, #0
 8000fae:	627b      	str	r3, [r7, #36]	; 0x24
        TCB_t * const pxTCB = xTaskToResume;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	623b      	str	r3, [r7, #32]
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToResume );
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d10a      	bne.n	8000fd0 <xTaskResumeFromISR+0x2c>
        __asm volatile
 8000fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fbe:	f383 8811 	msr	BASEPRI, r3
 8000fc2:	f3bf 8f6f 	isb	sy
 8000fc6:	f3bf 8f4f 	dsb	sy
 8000fca:	617b      	str	r3, [r7, #20]
    }
 8000fcc:	bf00      	nop
 8000fce:	e7fe      	b.n	8000fce <xTaskResumeFromISR+0x2a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000fd0:	f001 f804 	bl	8001fdc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8000fd4:	f3ef 8211 	mrs	r2, BASEPRI
 8000fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fdc:	f383 8811 	msr	BASEPRI, r3
 8000fe0:	f3bf 8f6f 	isb	sy
 8000fe4:	f3bf 8f4f 	dsb	sy
 8000fe8:	613a      	str	r2, [r7, #16]
 8000fea:	60fb      	str	r3, [r7, #12]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8000fec:	693b      	ldr	r3, [r7, #16]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000fee:	61fb      	str	r3, [r7, #28]
        {
            if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8000ff0:	6a38      	ldr	r0, [r7, #32]
 8000ff2:	f7ff ffa5 	bl	8000f40 <prvTaskIsTaskSuspended>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d05a      	beq.n	80010b2 <xTaskResumeFromISR+0x10e>
            {
                traceTASK_RESUME_FROM_ISR( pxTCB );

                /* Check the ready lists can be accessed. */
                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000ffc:	4b32      	ldr	r3, [pc, #200]	; (80010c8 <xTaskResumeFromISR+0x124>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d150      	bne.n	80010a6 <xTaskResumeFromISR+0x102>
                {
                    /* Ready lists can be accessed so move the task from the
                     * suspended list to the ready list directly. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001004:	6a3b      	ldr	r3, [r7, #32]
 8001006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001008:	4b30      	ldr	r3, [pc, #192]	; (80010cc <xTaskResumeFromISR+0x128>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800100e:	429a      	cmp	r2, r3
 8001010:	d304      	bcc.n	800101c <xTaskResumeFromISR+0x78>
                    {
                        xYieldRequired = pdTRUE;
 8001012:	2301      	movs	r3, #1
 8001014:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Mark that a yield is pending in case the user is not
                         * using the return value to initiate a context switch
                         * from the ISR using portYIELD_FROM_ISR. */
                        xYieldPending = pdTRUE;
 8001016:	4b2e      	ldr	r3, [pc, #184]	; (80010d0 <xTaskResumeFromISR+0x12c>)
 8001018:	2201      	movs	r2, #1
 800101a:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800101c:	6a3b      	ldr	r3, [r7, #32]
 800101e:	3304      	adds	r3, #4
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fd31 	bl	8000a88 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001026:	6a3b      	ldr	r3, [r7, #32]
 8001028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800102a:	2201      	movs	r2, #1
 800102c:	409a      	lsls	r2, r3
 800102e:	4b29      	ldr	r3, [pc, #164]	; (80010d4 <xTaskResumeFromISR+0x130>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4313      	orrs	r3, r2
 8001034:	4a27      	ldr	r2, [pc, #156]	; (80010d4 <xTaskResumeFromISR+0x130>)
 8001036:	6013      	str	r3, [r2, #0]
 8001038:	6a3b      	ldr	r3, [r7, #32]
 800103a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800103c:	4926      	ldr	r1, [pc, #152]	; (80010d8 <xTaskResumeFromISR+0x134>)
 800103e:	4613      	mov	r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4413      	add	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	440b      	add	r3, r1
 8001048:	3304      	adds	r3, #4
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	61bb      	str	r3, [r7, #24]
 800104e:	6a3b      	ldr	r3, [r7, #32]
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	689a      	ldr	r2, [r3, #8]
 8001058:	6a3b      	ldr	r3, [r7, #32]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	6a3a      	ldr	r2, [r7, #32]
 8001062:	3204      	adds	r2, #4
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	6a3b      	ldr	r3, [r7, #32]
 8001068:	1d1a      	adds	r2, r3, #4
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	6a3b      	ldr	r3, [r7, #32]
 8001070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001072:	4613      	mov	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	4a17      	ldr	r2, [pc, #92]	; (80010d8 <xTaskResumeFromISR+0x134>)
 800107c:	441a      	add	r2, r3
 800107e:	6a3b      	ldr	r3, [r7, #32]
 8001080:	615a      	str	r2, [r3, #20]
 8001082:	6a3b      	ldr	r3, [r7, #32]
 8001084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001086:	4914      	ldr	r1, [pc, #80]	; (80010d8 <xTaskResumeFromISR+0x134>)
 8001088:	4613      	mov	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	440b      	add	r3, r1
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	1c59      	adds	r1, r3, #1
 8001096:	4810      	ldr	r0, [pc, #64]	; (80010d8 <xTaskResumeFromISR+0x134>)
 8001098:	4613      	mov	r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	4413      	add	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4403      	add	r3, r0
 80010a2:	6019      	str	r1, [r3, #0]
 80010a4:	e005      	b.n	80010b2 <xTaskResumeFromISR+0x10e>
                else
                {
                    /* The delayed or ready lists cannot be accessed so the task
                     * is held in the pending ready list until the scheduler is
                     * unsuspended. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80010a6:	6a3b      	ldr	r3, [r7, #32]
 80010a8:	3318      	adds	r3, #24
 80010aa:	4619      	mov	r1, r3
 80010ac:	480b      	ldr	r0, [pc, #44]	; (80010dc <xTaskResumeFromISR+0x138>)
 80010ae:	f7ff fc8e 	bl	80009ce <vListInsertEnd>
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	60bb      	str	r3, [r7, #8]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80010bc:	bf00      	nop
                mtCOVERAGE_TEST_MARKER();
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xYieldRequired;
 80010be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80010c0:	4618      	mov	r0, r3
 80010c2:	3728      	adds	r7, #40	; 0x28
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	200001dc 	.word	0x200001dc
 80010cc:	200000b4 	.word	0x200000b4
 80010d0:	200001c8 	.word	0x200001c8
 80010d4:	200001bc 	.word	0x200001bc
 80010d8:	200000b8 	.word	0x200000b8
 80010dc:	20000174 	.word	0x20000174

080010e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80010e6:	4b1d      	ldr	r3, [pc, #116]	; (800115c <vTaskStartScheduler+0x7c>)
 80010e8:	9301      	str	r3, [sp, #4]
 80010ea:	2300      	movs	r3, #0
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	2300      	movs	r3, #0
 80010f0:	2280      	movs	r2, #128	; 0x80
 80010f2:	491b      	ldr	r1, [pc, #108]	; (8001160 <vTaskStartScheduler+0x80>)
 80010f4:	481b      	ldr	r0, [pc, #108]	; (8001164 <vTaskStartScheduler+0x84>)
 80010f6:	f7ff fcf1 	bl	8000adc <xTaskCreate>
 80010fa:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d116      	bne.n	8001130 <vTaskStartScheduler+0x50>
        __asm volatile
 8001102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001106:	f383 8811 	msr	BASEPRI, r3
 800110a:	f3bf 8f6f 	isb	sy
 800110e:	f3bf 8f4f 	dsb	sy
 8001112:	60bb      	str	r3, [r7, #8]
    }
 8001114:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <vTaskStartScheduler+0x88>)
 8001118:	f04f 32ff 	mov.w	r2, #4294967295
 800111c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800111e:	4b13      	ldr	r3, [pc, #76]	; (800116c <vTaskStartScheduler+0x8c>)
 8001120:	2201      	movs	r2, #1
 8001122:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <vTaskStartScheduler+0x90>)
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800112a:	f000 fdd3 	bl	8001cd4 <xPortStartScheduler>
 800112e:	e00e      	b.n	800114e <vTaskStartScheduler+0x6e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001136:	d10a      	bne.n	800114e <vTaskStartScheduler+0x6e>
        __asm volatile
 8001138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800113c:	f383 8811 	msr	BASEPRI, r3
 8001140:	f3bf 8f6f 	isb	sy
 8001144:	f3bf 8f4f 	dsb	sy
 8001148:	607b      	str	r3, [r7, #4]
    }
 800114a:	bf00      	nop
 800114c:	e7fe      	b.n	800114c <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <vTaskStartScheduler+0x94>)
 8001150:	681b      	ldr	r3, [r3, #0]
}
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200001d8 	.word	0x200001d8
 8001160:	0800be28 	.word	0x0800be28
 8001164:	08001691 	.word	0x08001691
 8001168:	200001d4 	.word	0x200001d4
 800116c:	200001c0 	.word	0x200001c0
 8001170:	200001b8 	.word	0x200001b8
 8001174:	20000000 	.word	0x20000000

08001178 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <vTaskSuspendAll+0x18>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	3301      	adds	r3, #1
 8001182:	4a03      	ldr	r2, [pc, #12]	; (8001190 <vTaskSuspendAll+0x18>)
 8001184:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	200001dc 	.word	0x200001dc

08001194 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b088      	sub	sp, #32
 8001198:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800119e:	2300      	movs	r3, #0
 80011a0:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80011a2:	4b71      	ldr	r3, [pc, #452]	; (8001368 <xTaskResumeAll+0x1d4>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d10a      	bne.n	80011c0 <xTaskResumeAll+0x2c>
        __asm volatile
 80011aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011ae:	f383 8811 	msr	BASEPRI, r3
 80011b2:	f3bf 8f6f 	isb	sy
 80011b6:	f3bf 8f4f 	dsb	sy
 80011ba:	607b      	str	r3, [r7, #4]
    }
 80011bc:	bf00      	nop
 80011be:	e7fe      	b.n	80011be <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80011c0:	f000 fe2a 	bl	8001e18 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80011c4:	4b68      	ldr	r3, [pc, #416]	; (8001368 <xTaskResumeAll+0x1d4>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	3b01      	subs	r3, #1
 80011ca:	4a67      	ldr	r2, [pc, #412]	; (8001368 <xTaskResumeAll+0x1d4>)
 80011cc:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80011ce:	4b66      	ldr	r3, [pc, #408]	; (8001368 <xTaskResumeAll+0x1d4>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f040 80c0 	bne.w	8001358 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80011d8:	4b64      	ldr	r3, [pc, #400]	; (800136c <xTaskResumeAll+0x1d8>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	f000 80bb 	beq.w	8001358 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80011e2:	e08a      	b.n	80012fa <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80011e4:	4b62      	ldr	r3, [pc, #392]	; (8001370 <xTaskResumeAll+0x1dc>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	69db      	ldr	r3, [r3, #28]
 80011f6:	69fa      	ldr	r2, [r7, #28]
 80011f8:	6a12      	ldr	r2, [r2, #32]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	6a1b      	ldr	r3, [r3, #32]
 8001200:	69fa      	ldr	r2, [r7, #28]
 8001202:	69d2      	ldr	r2, [r2, #28]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	685a      	ldr	r2, [r3, #4]
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3318      	adds	r3, #24
 800120e:	429a      	cmp	r2, r3
 8001210:	d103      	bne.n	800121a <xTaskResumeAll+0x86>
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	6a1a      	ldr	r2, [r3, #32]
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	2200      	movs	r2, #0
 800121e:	629a      	str	r2, [r3, #40]	; 0x28
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	1e5a      	subs	r2, r3, #1
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	69fa      	ldr	r2, [r7, #28]
 8001236:	68d2      	ldr	r2, [r2, #12]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	69fa      	ldr	r2, [r7, #28]
 8001240:	6892      	ldr	r2, [r2, #8]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	3304      	adds	r3, #4
 800124c:	429a      	cmp	r2, r3
 800124e:	d103      	bne.n	8001258 <xTaskResumeAll+0xc4>
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	68da      	ldr	r2, [r3, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	2200      	movs	r2, #0
 800125c:	615a      	str	r2, [r3, #20]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	1e5a      	subs	r2, r3, #1
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800126c:	2201      	movs	r2, #1
 800126e:	409a      	lsls	r2, r3
 8001270:	4b40      	ldr	r3, [pc, #256]	; (8001374 <xTaskResumeAll+0x1e0>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4313      	orrs	r3, r2
 8001276:	4a3f      	ldr	r2, [pc, #252]	; (8001374 <xTaskResumeAll+0x1e0>)
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800127e:	493e      	ldr	r1, [pc, #248]	; (8001378 <xTaskResumeAll+0x1e4>)
 8001280:	4613      	mov	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4413      	add	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	440b      	add	r3, r1
 800128a:	3304      	adds	r3, #4
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	69fa      	ldr	r2, [r7, #28]
 80012a4:	3204      	adds	r2, #4
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	1d1a      	adds	r2, r3, #4
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012b4:	4613      	mov	r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	4413      	add	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4a2e      	ldr	r2, [pc, #184]	; (8001378 <xTaskResumeAll+0x1e4>)
 80012be:	441a      	add	r2, r3
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	615a      	str	r2, [r3, #20]
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012c8:	492b      	ldr	r1, [pc, #172]	; (8001378 <xTaskResumeAll+0x1e4>)
 80012ca:	4613      	mov	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4413      	add	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	440b      	add	r3, r1
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	1c59      	adds	r1, r3, #1
 80012d8:	4827      	ldr	r0, [pc, #156]	; (8001378 <xTaskResumeAll+0x1e4>)
 80012da:	4613      	mov	r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4413      	add	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4403      	add	r3, r0
 80012e4:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012ea:	4b24      	ldr	r3, [pc, #144]	; (800137c <xTaskResumeAll+0x1e8>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d302      	bcc.n	80012fa <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 80012f4:	4b22      	ldr	r3, [pc, #136]	; (8001380 <xTaskResumeAll+0x1ec>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80012fa:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <xTaskResumeAll+0x1dc>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f47f af70 	bne.w	80011e4 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800130a:	f000 fa57 	bl	80017bc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800130e:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <xTaskResumeAll+0x1f0>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d010      	beq.n	800133c <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800131a:	f000 f847 	bl	80013ac <xTaskIncrementTick>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d002      	beq.n	800132a <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8001324:	4b16      	ldr	r3, [pc, #88]	; (8001380 <xTaskResumeAll+0x1ec>)
 8001326:	2201      	movs	r2, #1
 8001328:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	3b01      	subs	r3, #1
 800132e:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1f1      	bne.n	800131a <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8001336:	4b13      	ldr	r3, [pc, #76]	; (8001384 <xTaskResumeAll+0x1f0>)
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800133c:	4b10      	ldr	r3, [pc, #64]	; (8001380 <xTaskResumeAll+0x1ec>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d009      	beq.n	8001358 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8001344:	2301      	movs	r3, #1
 8001346:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <xTaskResumeAll+0x1f4>)
 800134a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	f3bf 8f4f 	dsb	sy
 8001354:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001358:	f000 fd8e 	bl	8001e78 <vPortExitCritical>

    return xAlreadyYielded;
 800135c:	69bb      	ldr	r3, [r7, #24]
}
 800135e:	4618      	mov	r0, r3
 8001360:	3720      	adds	r7, #32
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200001dc 	.word	0x200001dc
 800136c:	200001b4 	.word	0x200001b4
 8001370:	20000174 	.word	0x20000174
 8001374:	200001bc 	.word	0x200001bc
 8001378:	200000b8 	.word	0x200000b8
 800137c:	200000b4 	.word	0x200000b4
 8001380:	200001c8 	.word	0x200001c8
 8001384:	200001c4 	.word	0x200001c4
 8001388:	e000ed04 	.word	0xe000ed04

0800138c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001392:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <xTaskGetTickCount+0x1c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001398:	687b      	ldr	r3, [r7, #4]
}
 800139a:	4618      	mov	r0, r3
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	200001b8 	.word	0x200001b8

080013ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	; 0x28
 80013b0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80013b2:	2300      	movs	r3, #0
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80013b6:	4b7d      	ldr	r3, [pc, #500]	; (80015ac <xTaskIncrementTick+0x200>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f040 80ec 	bne.w	8001598 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80013c0:	4b7b      	ldr	r3, [pc, #492]	; (80015b0 <xTaskIncrementTick+0x204>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	3301      	adds	r3, #1
 80013c6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80013c8:	4a79      	ldr	r2, [pc, #484]	; (80015b0 <xTaskIncrementTick+0x204>)
 80013ca:	6a3b      	ldr	r3, [r7, #32]
 80013cc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80013ce:	6a3b      	ldr	r3, [r7, #32]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d120      	bne.n	8001416 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80013d4:	4b77      	ldr	r3, [pc, #476]	; (80015b4 <xTaskIncrementTick+0x208>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00a      	beq.n	80013f4 <xTaskIncrementTick+0x48>
        __asm volatile
 80013de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013e2:	f383 8811 	msr	BASEPRI, r3
 80013e6:	f3bf 8f6f 	isb	sy
 80013ea:	f3bf 8f4f 	dsb	sy
 80013ee:	607b      	str	r3, [r7, #4]
    }
 80013f0:	bf00      	nop
 80013f2:	e7fe      	b.n	80013f2 <xTaskIncrementTick+0x46>
 80013f4:	4b6f      	ldr	r3, [pc, #444]	; (80015b4 <xTaskIncrementTick+0x208>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	61fb      	str	r3, [r7, #28]
 80013fa:	4b6f      	ldr	r3, [pc, #444]	; (80015b8 <xTaskIncrementTick+0x20c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a6d      	ldr	r2, [pc, #436]	; (80015b4 <xTaskIncrementTick+0x208>)
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	4a6d      	ldr	r2, [pc, #436]	; (80015b8 <xTaskIncrementTick+0x20c>)
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	6013      	str	r3, [r2, #0]
 8001408:	4b6c      	ldr	r3, [pc, #432]	; (80015bc <xTaskIncrementTick+0x210>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	3301      	adds	r3, #1
 800140e:	4a6b      	ldr	r2, [pc, #428]	; (80015bc <xTaskIncrementTick+0x210>)
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	f000 f9d3 	bl	80017bc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001416:	4b6a      	ldr	r3, [pc, #424]	; (80015c0 <xTaskIncrementTick+0x214>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	6a3a      	ldr	r2, [r7, #32]
 800141c:	429a      	cmp	r2, r3
 800141e:	f0c0 80a6 	bcc.w	800156e <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001422:	4b64      	ldr	r3, [pc, #400]	; (80015b4 <xTaskIncrementTick+0x208>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d104      	bne.n	8001436 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800142c:	4b64      	ldr	r3, [pc, #400]	; (80015c0 <xTaskIncrementTick+0x214>)
 800142e:	f04f 32ff 	mov.w	r2, #4294967295
 8001432:	601a      	str	r2, [r3, #0]
                    break;
 8001434:	e09b      	b.n	800156e <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001436:	4b5f      	ldr	r3, [pc, #380]	; (80015b4 <xTaskIncrementTick+0x208>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001446:	6a3a      	ldr	r2, [r7, #32]
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	429a      	cmp	r2, r3
 800144c:	d203      	bcs.n	8001456 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800144e:	4a5c      	ldr	r2, [pc, #368]	; (80015c0 <xTaskIncrementTick+0x214>)
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001454:	e08b      	b.n	800156e <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	68d2      	ldr	r2, [r2, #12]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	6892      	ldr	r2, [r2, #8]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	3304      	adds	r3, #4
 8001478:	429a      	cmp	r2, r3
 800147a:	d103      	bne.n	8001484 <xTaskIncrementTick+0xd8>
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	68da      	ldr	r2, [r3, #12]
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	2200      	movs	r2, #0
 8001488:	615a      	str	r2, [r3, #20]
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	1e5a      	subs	r2, r3, #1
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001498:	2b00      	cmp	r3, #0
 800149a:	d01e      	beq.n	80014da <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	6a12      	ldr	r2, [r2, #32]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	69d2      	ldr	r2, [r2, #28]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	3318      	adds	r3, #24
 80014be:	429a      	cmp	r2, r3
 80014c0:	d103      	bne.n	80014ca <xTaskIncrementTick+0x11e>
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	6a1a      	ldr	r2, [r3, #32]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	2200      	movs	r2, #0
 80014ce:	629a      	str	r2, [r3, #40]	; 0x28
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	1e5a      	subs	r2, r3, #1
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014de:	2201      	movs	r2, #1
 80014e0:	409a      	lsls	r2, r3
 80014e2:	4b38      	ldr	r3, [pc, #224]	; (80015c4 <xTaskIncrementTick+0x218>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	4a36      	ldr	r2, [pc, #216]	; (80015c4 <xTaskIncrementTick+0x218>)
 80014ea:	6013      	str	r3, [r2, #0]
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014f0:	4935      	ldr	r1, [pc, #212]	; (80015c8 <xTaskIncrementTick+0x21c>)
 80014f2:	4613      	mov	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	440b      	add	r3, r1
 80014fc:	3304      	adds	r3, #4
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	68ba      	ldr	r2, [r7, #8]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	60da      	str	r2, [r3, #12]
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	3204      	adds	r2, #4
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	1d1a      	adds	r2, r3, #4
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001526:	4613      	mov	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4a26      	ldr	r2, [pc, #152]	; (80015c8 <xTaskIncrementTick+0x21c>)
 8001530:	441a      	add	r2, r3
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	615a      	str	r2, [r3, #20]
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800153a:	4923      	ldr	r1, [pc, #140]	; (80015c8 <xTaskIncrementTick+0x21c>)
 800153c:	4613      	mov	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4413      	add	r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	440b      	add	r3, r1
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	1c59      	adds	r1, r3, #1
 800154a:	481f      	ldr	r0, [pc, #124]	; (80015c8 <xTaskIncrementTick+0x21c>)
 800154c:	4613      	mov	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4413      	add	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4403      	add	r3, r0
 8001556:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800155c:	4b1b      	ldr	r3, [pc, #108]	; (80015cc <xTaskIncrementTick+0x220>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001562:	429a      	cmp	r2, r3
 8001564:	f67f af5d 	bls.w	8001422 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8001568:	2301      	movs	r3, #1
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800156c:	e759      	b.n	8001422 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800156e:	4b17      	ldr	r3, [pc, #92]	; (80015cc <xTaskIncrementTick+0x220>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001574:	4914      	ldr	r1, [pc, #80]	; (80015c8 <xTaskIncrementTick+0x21c>)
 8001576:	4613      	mov	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4413      	add	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	440b      	add	r3, r1
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d901      	bls.n	800158a <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8001586:	2301      	movs	r3, #1
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800158a:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <xTaskIncrementTick+0x224>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d007      	beq.n	80015a2 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8001592:	2301      	movs	r3, #1
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
 8001596:	e004      	b.n	80015a2 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001598:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <xTaskIncrementTick+0x228>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	3301      	adds	r3, #1
 800159e:	4a0d      	ldr	r2, [pc, #52]	; (80015d4 <xTaskIncrementTick+0x228>)
 80015a0:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80015a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3728      	adds	r7, #40	; 0x28
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	200001dc 	.word	0x200001dc
 80015b0:	200001b8 	.word	0x200001b8
 80015b4:	2000016c 	.word	0x2000016c
 80015b8:	20000170 	.word	0x20000170
 80015bc:	200001cc 	.word	0x200001cc
 80015c0:	200001d4 	.word	0x200001d4
 80015c4:	200001bc 	.word	0x200001bc
 80015c8:	200000b8 	.word	0x200000b8
 80015cc:	200000b4 	.word	0x200000b4
 80015d0:	200001c8 	.word	0x200001c8
 80015d4:	200001c4 	.word	0x200001c4

080015d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80015d8:	b480      	push	{r7}
 80015da:	b087      	sub	sp, #28
 80015dc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80015de:	4b27      	ldr	r3, [pc, #156]	; (800167c <vTaskSwitchContext+0xa4>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80015e6:	4b26      	ldr	r3, [pc, #152]	; (8001680 <vTaskSwitchContext+0xa8>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80015ec:	e03f      	b.n	800166e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80015ee:	4b24      	ldr	r3, [pc, #144]	; (8001680 <vTaskSwitchContext+0xa8>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80015f4:	4b23      	ldr	r3, [pc, #140]	; (8001684 <vTaskSwitchContext+0xac>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	fab3 f383 	clz	r3, r3
 8001600:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001602:	7afb      	ldrb	r3, [r7, #11]
 8001604:	f1c3 031f 	rsb	r3, r3, #31
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	491f      	ldr	r1, [pc, #124]	; (8001688 <vTaskSwitchContext+0xb0>)
 800160c:	697a      	ldr	r2, [r7, #20]
 800160e:	4613      	mov	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	440b      	add	r3, r1
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d10a      	bne.n	8001634 <vTaskSwitchContext+0x5c>
        __asm volatile
 800161e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001622:	f383 8811 	msr	BASEPRI, r3
 8001626:	f3bf 8f6f 	isb	sy
 800162a:	f3bf 8f4f 	dsb	sy
 800162e:	607b      	str	r3, [r7, #4]
    }
 8001630:	bf00      	nop
 8001632:	e7fe      	b.n	8001632 <vTaskSwitchContext+0x5a>
 8001634:	697a      	ldr	r2, [r7, #20]
 8001636:	4613      	mov	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4a12      	ldr	r2, [pc, #72]	; (8001688 <vTaskSwitchContext+0xb0>)
 8001640:	4413      	add	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	685a      	ldr	r2, [r3, #4]
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	3308      	adds	r3, #8
 8001656:	429a      	cmp	r2, r3
 8001658:	d104      	bne.n	8001664 <vTaskSwitchContext+0x8c>
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	685a      	ldr	r2, [r3, #4]
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	4a08      	ldr	r2, [pc, #32]	; (800168c <vTaskSwitchContext+0xb4>)
 800166c:	6013      	str	r3, [r2, #0]
}
 800166e:	bf00      	nop
 8001670:	371c      	adds	r7, #28
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	200001dc 	.word	0x200001dc
 8001680:	200001c8 	.word	0x200001c8
 8001684:	200001bc 	.word	0x200001bc
 8001688:	200000b8 	.word	0x200000b8
 800168c:	200000b4 	.word	0x200000b4

08001690 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001698:	f000 f852 	bl	8001740 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <prvIdleTask+0x28>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d9f9      	bls.n	8001698 <prvIdleTask+0x8>
            {
                taskYIELD();
 80016a4:	4b05      	ldr	r3, [pc, #20]	; (80016bc <prvIdleTask+0x2c>)
 80016a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	f3bf 8f4f 	dsb	sy
 80016b0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80016b4:	e7f0      	b.n	8001698 <prvIdleTask+0x8>
 80016b6:	bf00      	nop
 80016b8:	200000b8 	.word	0x200000b8
 80016bc:	e000ed04 	.word	0xe000ed04

080016c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80016c6:	2300      	movs	r3, #0
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	e00c      	b.n	80016e6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	4613      	mov	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4a12      	ldr	r2, [pc, #72]	; (8001720 <prvInitialiseTaskLists+0x60>)
 80016d8:	4413      	add	r3, r2
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff f94a 	bl	8000974 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3301      	adds	r3, #1
 80016e4:	607b      	str	r3, [r7, #4]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b06      	cmp	r3, #6
 80016ea:	d9ef      	bls.n	80016cc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80016ec:	480d      	ldr	r0, [pc, #52]	; (8001724 <prvInitialiseTaskLists+0x64>)
 80016ee:	f7ff f941 	bl	8000974 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80016f2:	480d      	ldr	r0, [pc, #52]	; (8001728 <prvInitialiseTaskLists+0x68>)
 80016f4:	f7ff f93e 	bl	8000974 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80016f8:	480c      	ldr	r0, [pc, #48]	; (800172c <prvInitialiseTaskLists+0x6c>)
 80016fa:	f7ff f93b 	bl	8000974 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80016fe:	480c      	ldr	r0, [pc, #48]	; (8001730 <prvInitialiseTaskLists+0x70>)
 8001700:	f7ff f938 	bl	8000974 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8001704:	480b      	ldr	r0, [pc, #44]	; (8001734 <prvInitialiseTaskLists+0x74>)
 8001706:	f7ff f935 	bl	8000974 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800170a:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <prvInitialiseTaskLists+0x78>)
 800170c:	4a05      	ldr	r2, [pc, #20]	; (8001724 <prvInitialiseTaskLists+0x64>)
 800170e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001710:	4b0a      	ldr	r3, [pc, #40]	; (800173c <prvInitialiseTaskLists+0x7c>)
 8001712:	4a05      	ldr	r2, [pc, #20]	; (8001728 <prvInitialiseTaskLists+0x68>)
 8001714:	601a      	str	r2, [r3, #0]
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200000b8 	.word	0x200000b8
 8001724:	20000144 	.word	0x20000144
 8001728:	20000158 	.word	0x20000158
 800172c:	20000174 	.word	0x20000174
 8001730:	20000188 	.word	0x20000188
 8001734:	200001a0 	.word	0x200001a0
 8001738:	2000016c 	.word	0x2000016c
 800173c:	20000170 	.word	0x20000170

08001740 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001746:	e019      	b.n	800177c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8001748:	f000 fb66 	bl	8001e18 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800174c:	4b10      	ldr	r3, [pc, #64]	; (8001790 <prvCheckTasksWaitingTermination+0x50>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3304      	adds	r3, #4
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff f995 	bl	8000a88 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800175e:	4b0d      	ldr	r3, [pc, #52]	; (8001794 <prvCheckTasksWaitingTermination+0x54>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	3b01      	subs	r3, #1
 8001764:	4a0b      	ldr	r2, [pc, #44]	; (8001794 <prvCheckTasksWaitingTermination+0x54>)
 8001766:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8001768:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <prvCheckTasksWaitingTermination+0x58>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	3b01      	subs	r3, #1
 800176e:	4a0a      	ldr	r2, [pc, #40]	; (8001798 <prvCheckTasksWaitingTermination+0x58>)
 8001770:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8001772:	f000 fb81 	bl	8001e78 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 f810 	bl	800179c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <prvCheckTasksWaitingTermination+0x58>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1e1      	bne.n	8001748 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001784:	bf00      	nop
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000188 	.word	0x20000188
 8001794:	200001b4 	.word	0x200001b4
 8001798:	2000019c 	.word	0x2000019c

0800179c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a8:	4618      	mov	r0, r3
 80017aa:	f000 fd11 	bl	80021d0 <vPortFree>
            vPortFree( pxTCB );
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f000 fd0e 	bl	80021d0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80017c0:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <prvResetNextTaskUnblockTime+0x30>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d104      	bne.n	80017d4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <prvResetNextTaskUnblockTime+0x34>)
 80017cc:	f04f 32ff 	mov.w	r2, #4294967295
 80017d0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80017d2:	e005      	b.n	80017e0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <prvResetNextTaskUnblockTime+0x30>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a04      	ldr	r2, [pc, #16]	; (80017f0 <prvResetNextTaskUnblockTime+0x34>)
 80017de:	6013      	str	r3, [r2, #0]
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	2000016c 	.word	0x2000016c
 80017f0:	200001d4 	.word	0x200001d4

080017f4 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b092      	sub	sp, #72	; 0x48
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
 8001800:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8001802:	2301      	movs	r3, #1
 8001804:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d10a      	bne.n	8001822 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 800180c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001810:	f383 8811 	msr	BASEPRI, r3
 8001814:	f3bf 8f6f 	isb	sy
 8001818:	f3bf 8f4f 	dsb	sy
 800181c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800181e:	bf00      	nop
 8001820:	e7fe      	b.n	8001820 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d00a      	beq.n	800183e <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8001828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800182c:	f383 8811 	msr	BASEPRI, r3
 8001830:	f3bf 8f6f 	isb	sy
 8001834:	f3bf 8f4f 	dsb	sy
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800183a:	bf00      	nop
 800183c:	e7fe      	b.n	800183c <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800183e:	f000 fbcd 	bl	8001fdc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	643b      	str	r3, [r7, #64]	; 0x40
        __asm volatile
 8001846:	f3ef 8211 	mrs	r2, BASEPRI
 800184a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800184e:	f383 8811 	msr	BASEPRI, r3
 8001852:	f3bf 8f6f 	isb	sy
 8001856:	f3bf 8f4f 	dsb	sy
 800185a:	623a      	str	r2, [r7, #32]
 800185c:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 800185e:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001860:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 8001862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001864:	2b00      	cmp	r3, #0
 8001866:	d007      	beq.n	8001878 <xTaskGenericNotifyFromISR+0x84>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8001868:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	3312      	adds	r3, #18
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001876:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8001878:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	4413      	add	r3, r2
 800187e:	3350      	adds	r3, #80	; 0x50
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8001886:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	4413      	add	r3, r2
 800188c:	3350      	adds	r3, #80	; 0x50
 800188e:	2202      	movs	r2, #2
 8001890:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8001892:	78fb      	ldrb	r3, [r7, #3]
 8001894:	2b04      	cmp	r3, #4
 8001896:	d841      	bhi.n	800191c <xTaskGenericNotifyFromISR+0x128>
 8001898:	a201      	add	r2, pc, #4	; (adr r2, 80018a0 <xTaskGenericNotifyFromISR+0xac>)
 800189a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800189e:	bf00      	nop
 80018a0:	0800193b 	.word	0x0800193b
 80018a4:	080018b5 	.word	0x080018b5
 80018a8:	080018d3 	.word	0x080018d3
 80018ac:	080018ef 	.word	0x080018ef
 80018b0:	080018ff 	.word	0x080018ff
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80018b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	3312      	adds	r3, #18
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	431a      	orrs	r2, r3
 80018c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	3312      	adds	r3, #18
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	440b      	add	r3, r1
 80018ce:	605a      	str	r2, [r3, #4]
                    break;
 80018d0:	e036      	b.n	8001940 <xTaskGenericNotifyFromISR+0x14c>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80018d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	3312      	adds	r3, #18
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4413      	add	r3, r2
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	1c5a      	adds	r2, r3, #1
 80018e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	3312      	adds	r3, #18
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	440b      	add	r3, r1
 80018ea:	605a      	str	r2, [r3, #4]
                    break;
 80018ec:	e028      	b.n	8001940 <xTaskGenericNotifyFromISR+0x14c>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80018ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	3312      	adds	r3, #18
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	605a      	str	r2, [r3, #4]
                    break;
 80018fc:	e020      	b.n	8001940 <xTaskGenericNotifyFromISR+0x14c>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80018fe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001902:	2b02      	cmp	r3, #2
 8001904:	d007      	beq.n	8001916 <xTaskGenericNotifyFromISR+0x122>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001906:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	3312      	adds	r3, #18
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	4413      	add	r3, r2
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8001914:	e014      	b.n	8001940 <xTaskGenericNotifyFromISR+0x14c>
                        xReturn = pdFAIL;
 8001916:	2300      	movs	r3, #0
 8001918:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 800191a:	e011      	b.n	8001940 <xTaskGenericNotifyFromISR+0x14c>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800191c:	4b5f      	ldr	r3, [pc, #380]	; (8001a9c <xTaskGenericNotifyFromISR+0x2a8>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d00c      	beq.n	800193e <xTaskGenericNotifyFromISR+0x14a>
        __asm volatile
 8001924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001928:	f383 8811 	msr	BASEPRI, r3
 800192c:	f3bf 8f6f 	isb	sy
 8001930:	f3bf 8f4f 	dsb	sy
 8001934:	61bb      	str	r3, [r7, #24]
    }
 8001936:	bf00      	nop
 8001938:	e7fe      	b.n	8001938 <xTaskGenericNotifyFromISR+0x144>
                    break;
 800193a:	bf00      	nop
 800193c:	e000      	b.n	8001940 <xTaskGenericNotifyFromISR+0x14c>
                    break;
 800193e:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8001940:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001944:	2b01      	cmp	r3, #1
 8001946:	f040 809e 	bne.w	8001a86 <xTaskGenericNotifyFromISR+0x292>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800194a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800194c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194e:	2b00      	cmp	r3, #0
 8001950:	d00a      	beq.n	8001968 <xTaskGenericNotifyFromISR+0x174>
        __asm volatile
 8001952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001956:	f383 8811 	msr	BASEPRI, r3
 800195a:	f3bf 8f6f 	isb	sy
 800195e:	f3bf 8f4f 	dsb	sy
 8001962:	617b      	str	r3, [r7, #20]
    }
 8001964:	bf00      	nop
 8001966:	e7fe      	b.n	8001966 <xTaskGenericNotifyFromISR+0x172>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001968:	4b4d      	ldr	r3, [pc, #308]	; (8001aa0 <xTaskGenericNotifyFromISR+0x2ac>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d15e      	bne.n	8001a2e <xTaskGenericNotifyFromISR+0x23a>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001970:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	633b      	str	r3, [r7, #48]	; 0x30
 8001976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800197c:	68d2      	ldr	r2, [r2, #12]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001986:	6892      	ldr	r2, [r2, #8]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800198c:	685a      	ldr	r2, [r3, #4]
 800198e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001990:	3304      	adds	r3, #4
 8001992:	429a      	cmp	r2, r3
 8001994:	d103      	bne.n	800199e <xTaskGenericNotifyFromISR+0x1aa>
 8001996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001998:	68da      	ldr	r2, [r3, #12]
 800199a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019a0:	2200      	movs	r2, #0
 80019a2:	615a      	str	r2, [r3, #20]
 80019a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	1e5a      	subs	r2, r3, #1
 80019aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ac:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80019ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b2:	2201      	movs	r2, #1
 80019b4:	409a      	lsls	r2, r3
 80019b6:	4b3b      	ldr	r3, [pc, #236]	; (8001aa4 <xTaskGenericNotifyFromISR+0x2b0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	4a39      	ldr	r2, [pc, #228]	; (8001aa4 <xTaskGenericNotifyFromISR+0x2b0>)
 80019be:	6013      	str	r3, [r2, #0]
 80019c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019c4:	4938      	ldr	r1, [pc, #224]	; (8001aa8 <xTaskGenericNotifyFromISR+0x2b4>)
 80019c6:	4613      	mov	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	440b      	add	r3, r1
 80019d0:	3304      	adds	r3, #4
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019e2:	60da      	str	r2, [r3, #12]
 80019e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80019ea:	3204      	adds	r2, #4
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019f0:	1d1a      	adds	r2, r3, #4
 80019f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019f4:	609a      	str	r2, [r3, #8]
 80019f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019fa:	4613      	mov	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4a29      	ldr	r2, [pc, #164]	; (8001aa8 <xTaskGenericNotifyFromISR+0x2b4>)
 8001a04:	441a      	add	r2, r3
 8001a06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a08:	615a      	str	r2, [r3, #20]
 8001a0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a0e:	4926      	ldr	r1, [pc, #152]	; (8001aa8 <xTaskGenericNotifyFromISR+0x2b4>)
 8001a10:	4613      	mov	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	440b      	add	r3, r1
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	1c59      	adds	r1, r3, #1
 8001a1e:	4822      	ldr	r0, [pc, #136]	; (8001aa8 <xTaskGenericNotifyFromISR+0x2b4>)
 8001a20:	4613      	mov	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4403      	add	r3, r0
 8001a2a:	6019      	str	r1, [r3, #0]
 8001a2c:	e01b      	b.n	8001a66 <xTaskGenericNotifyFromISR+0x272>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8001a2e:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <xTaskGenericNotifyFromISR+0x2b8>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	637b      	str	r3, [r7, #52]	; 0x34
 8001a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a38:	61da      	str	r2, [r3, #28]
 8001a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a3c:	689a      	ldr	r2, [r3, #8]
 8001a3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a40:	621a      	str	r2, [r3, #32]
 8001a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001a48:	3218      	adds	r2, #24
 8001a4a:	605a      	str	r2, [r3, #4]
 8001a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a4e:	f103 0218 	add.w	r2, r3, #24
 8001a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a54:	609a      	str	r2, [r3, #8]
 8001a56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a58:	4a14      	ldr	r2, [pc, #80]	; (8001aac <xTaskGenericNotifyFromISR+0x2b8>)
 8001a5a:	629a      	str	r2, [r3, #40]	; 0x28
 8001a5c:	4b13      	ldr	r3, [pc, #76]	; (8001aac <xTaskGenericNotifyFromISR+0x2b8>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	3301      	adds	r3, #1
 8001a62:	4a12      	ldr	r2, [pc, #72]	; (8001aac <xTaskGenericNotifyFromISR+0x2b8>)
 8001a64:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001a66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a6a:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <xTaskGenericNotifyFromISR+0x2bc>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d908      	bls.n	8001a86 <xTaskGenericNotifyFromISR+0x292>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8001a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d002      	beq.n	8001a80 <xTaskGenericNotifyFromISR+0x28c>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8001a7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8001a80:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <xTaskGenericNotifyFromISR+0x2c0>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a88:	613b      	str	r3, [r7, #16]
        __asm volatile
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	f383 8811 	msr	BASEPRI, r3
    }
 8001a90:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8001a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 8001a94:	4618      	mov	r0, r3
 8001a96:	3748      	adds	r7, #72	; 0x48
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	200001b8 	.word	0x200001b8
 8001aa0:	200001dc 	.word	0x200001dc
 8001aa4:	200001bc 	.word	0x200001bc
 8001aa8:	200000b8 	.word	0x200000b8
 8001aac:	20000174 	.word	0x20000174
 8001ab0:	200000b4 	.word	0x200000b4
 8001ab4:	200001c8 	.word	0x200001c8

08001ab8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001ac2:	4b36      	ldr	r3, [pc, #216]	; (8001b9c <prvAddCurrentTaskToDelayedList+0xe4>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001ac8:	4b35      	ldr	r3, [pc, #212]	; (8001ba0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	3304      	adds	r3, #4
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7fe ffda 	bl	8000a88 <uxListRemove>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10b      	bne.n	8001af2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001ada:	4b31      	ldr	r3, [pc, #196]	; (8001ba0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43da      	mvns	r2, r3
 8001ae8:	4b2e      	ldr	r3, [pc, #184]	; (8001ba4 <prvAddCurrentTaskToDelayedList+0xec>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4013      	ands	r3, r2
 8001aee:	4a2d      	ldr	r2, [pc, #180]	; (8001ba4 <prvAddCurrentTaskToDelayedList+0xec>)
 8001af0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af8:	d124      	bne.n	8001b44 <prvAddCurrentTaskToDelayedList+0x8c>
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d021      	beq.n	8001b44 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001b00:	4b29      	ldr	r3, [pc, #164]	; (8001ba8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	613b      	str	r3, [r7, #16]
 8001b06:	4b26      	ldr	r3, [pc, #152]	; (8001ba0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	4b24      	ldr	r3, [pc, #144]	; (8001ba0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	6892      	ldr	r2, [r2, #8]
 8001b16:	60da      	str	r2, [r3, #12]
 8001b18:	4b21      	ldr	r3, [pc, #132]	; (8001ba0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	3204      	adds	r2, #4
 8001b22:	605a      	str	r2, [r3, #4]
 8001b24:	4b1e      	ldr	r3, [pc, #120]	; (8001ba0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	1d1a      	adds	r2, r3, #4
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ba0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a1d      	ldr	r2, [pc, #116]	; (8001ba8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001b34:	615a      	str	r2, [r3, #20]
 8001b36:	4b1c      	ldr	r3, [pc, #112]	; (8001ba8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	4a1a      	ldr	r2, [pc, #104]	; (8001ba8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001b3e:	6013      	str	r3, [r2, #0]
 8001b40:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001b42:	e026      	b.n	8001b92 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4413      	add	r3, r2
 8001b4a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001b4c:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d209      	bcs.n	8001b70 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001b5c:	4b13      	ldr	r3, [pc, #76]	; (8001bac <prvAddCurrentTaskToDelayedList+0xf4>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	3304      	adds	r3, #4
 8001b66:	4619      	mov	r1, r3
 8001b68:	4610      	mov	r0, r2
 8001b6a:	f7fe ff54 	bl	8000a16 <vListInsert>
}
 8001b6e:	e010      	b.n	8001b92 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001b70:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <prvAddCurrentTaskToDelayedList+0xf8>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4610      	mov	r0, r2
 8001b7e:	f7fe ff4a 	bl	8000a16 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8001b82:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d202      	bcs.n	8001b92 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8001b8c:	4a09      	ldr	r2, [pc, #36]	; (8001bb4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6013      	str	r3, [r2, #0]
}
 8001b92:	bf00      	nop
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	200001b8 	.word	0x200001b8
 8001ba0:	200000b4 	.word	0x200000b4
 8001ba4:	200001bc 	.word	0x200001bc
 8001ba8:	200001a0 	.word	0x200001a0
 8001bac:	20000170 	.word	0x20000170
 8001bb0:	2000016c 	.word	0x2000016c
 8001bb4:	200001d4 	.word	0x200001d4

08001bb8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	3b04      	subs	r3, #4
 8001bc8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bd0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	3b04      	subs	r3, #4
 8001bd6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	f023 0201 	bic.w	r2, r3, #1
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	3b04      	subs	r3, #4
 8001be6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001be8:	4a0c      	ldr	r2, [pc, #48]	; (8001c1c <pxPortInitialiseStack+0x64>)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	3b14      	subs	r3, #20
 8001bf2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	3b04      	subs	r3, #4
 8001bfe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f06f 0202 	mvn.w	r2, #2
 8001c06:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	3b20      	subs	r3, #32
 8001c0c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	08001c21 	.word	0x08001c21

08001c20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8001c26:	2300      	movs	r3, #0
 8001c28:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8001c2a:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <prvTaskExitError+0x54>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c32:	d00a      	beq.n	8001c4a <prvTaskExitError+0x2a>
        __asm volatile
 8001c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c38:	f383 8811 	msr	BASEPRI, r3
 8001c3c:	f3bf 8f6f 	isb	sy
 8001c40:	f3bf 8f4f 	dsb	sy
 8001c44:	60fb      	str	r3, [r7, #12]
    }
 8001c46:	bf00      	nop
 8001c48:	e7fe      	b.n	8001c48 <prvTaskExitError+0x28>
        __asm volatile
 8001c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c4e:	f383 8811 	msr	BASEPRI, r3
 8001c52:	f3bf 8f6f 	isb	sy
 8001c56:	f3bf 8f4f 	dsb	sy
 8001c5a:	60bb      	str	r3, [r7, #8]
    }
 8001c5c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001c5e:	bf00      	nop
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d0fc      	beq.n	8001c60 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001c66:	bf00      	nop
 8001c68:	bf00      	nop
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	20000004 	.word	0x20000004
	...

08001c80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001c80:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <pxCurrentTCBConst2>)
 8001c82:	6819      	ldr	r1, [r3, #0]
 8001c84:	6808      	ldr	r0, [r1, #0]
 8001c86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c8a:	f380 8809 	msr	PSP, r0
 8001c8e:	f3bf 8f6f 	isb	sy
 8001c92:	f04f 0000 	mov.w	r0, #0
 8001c96:	f380 8811 	msr	BASEPRI, r0
 8001c9a:	4770      	bx	lr
 8001c9c:	f3af 8000 	nop.w

08001ca0 <pxCurrentTCBConst2>:
 8001ca0:	200000b4 	.word	0x200000b4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001ca4:	bf00      	nop
 8001ca6:	bf00      	nop

08001ca8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8001ca8:	4808      	ldr	r0, [pc, #32]	; (8001ccc <prvPortStartFirstTask+0x24>)
 8001caa:	6800      	ldr	r0, [r0, #0]
 8001cac:	6800      	ldr	r0, [r0, #0]
 8001cae:	f380 8808 	msr	MSP, r0
 8001cb2:	f04f 0000 	mov.w	r0, #0
 8001cb6:	f380 8814 	msr	CONTROL, r0
 8001cba:	b662      	cpsie	i
 8001cbc:	b661      	cpsie	f
 8001cbe:	f3bf 8f4f 	dsb	sy
 8001cc2:	f3bf 8f6f 	isb	sy
 8001cc6:	df00      	svc	0
 8001cc8:	bf00      	nop
 8001cca:	0000      	.short	0x0000
 8001ccc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001cd0:	bf00      	nop
 8001cd2:	bf00      	nop

08001cd4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001cda:	4b46      	ldr	r3, [pc, #280]	; (8001df4 <xPortStartScheduler+0x120>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a46      	ldr	r2, [pc, #280]	; (8001df8 <xPortStartScheduler+0x124>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d10a      	bne.n	8001cfa <xPortStartScheduler+0x26>
        __asm volatile
 8001ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ce8:	f383 8811 	msr	BASEPRI, r3
 8001cec:	f3bf 8f6f 	isb	sy
 8001cf0:	f3bf 8f4f 	dsb	sy
 8001cf4:	613b      	str	r3, [r7, #16]
    }
 8001cf6:	bf00      	nop
 8001cf8:	e7fe      	b.n	8001cf8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001cfa:	4b3e      	ldr	r3, [pc, #248]	; (8001df4 <xPortStartScheduler+0x120>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a3f      	ldr	r2, [pc, #252]	; (8001dfc <xPortStartScheduler+0x128>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d10a      	bne.n	8001d1a <xPortStartScheduler+0x46>
        __asm volatile
 8001d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d08:	f383 8811 	msr	BASEPRI, r3
 8001d0c:	f3bf 8f6f 	isb	sy
 8001d10:	f3bf 8f4f 	dsb	sy
 8001d14:	60fb      	str	r3, [r7, #12]
    }
 8001d16:	bf00      	nop
 8001d18:	e7fe      	b.n	8001d18 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001d1a:	4b39      	ldr	r3, [pc, #228]	; (8001e00 <xPortStartScheduler+0x12c>)
 8001d1c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	22ff      	movs	r2, #255	; 0xff
 8001d2a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001d34:	78fb      	ldrb	r3, [r7, #3]
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	4b31      	ldr	r3, [pc, #196]	; (8001e04 <xPortStartScheduler+0x130>)
 8001d40:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001d42:	4b31      	ldr	r3, [pc, #196]	; (8001e08 <xPortStartScheduler+0x134>)
 8001d44:	2207      	movs	r2, #7
 8001d46:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001d48:	e009      	b.n	8001d5e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8001d4a:	4b2f      	ldr	r3, [pc, #188]	; (8001e08 <xPortStartScheduler+0x134>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	4a2d      	ldr	r2, [pc, #180]	; (8001e08 <xPortStartScheduler+0x134>)
 8001d52:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001d54:	78fb      	ldrb	r3, [r7, #3]
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001d5e:	78fb      	ldrb	r3, [r7, #3]
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d66:	2b80      	cmp	r3, #128	; 0x80
 8001d68:	d0ef      	beq.n	8001d4a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001d6a:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <xPortStartScheduler+0x134>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f1c3 0307 	rsb	r3, r3, #7
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	d00a      	beq.n	8001d8c <xPortStartScheduler+0xb8>
        __asm volatile
 8001d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d7a:	f383 8811 	msr	BASEPRI, r3
 8001d7e:	f3bf 8f6f 	isb	sy
 8001d82:	f3bf 8f4f 	dsb	sy
 8001d86:	60bb      	str	r3, [r7, #8]
    }
 8001d88:	bf00      	nop
 8001d8a:	e7fe      	b.n	8001d8a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001d8c:	4b1e      	ldr	r3, [pc, #120]	; (8001e08 <xPortStartScheduler+0x134>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	021b      	lsls	r3, r3, #8
 8001d92:	4a1d      	ldr	r2, [pc, #116]	; (8001e08 <xPortStartScheduler+0x134>)
 8001d94:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001d96:	4b1c      	ldr	r3, [pc, #112]	; (8001e08 <xPortStartScheduler+0x134>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d9e:	4a1a      	ldr	r2, [pc, #104]	; (8001e08 <xPortStartScheduler+0x134>)
 8001da0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001daa:	4b18      	ldr	r3, [pc, #96]	; (8001e0c <xPortStartScheduler+0x138>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a17      	ldr	r2, [pc, #92]	; (8001e0c <xPortStartScheduler+0x138>)
 8001db0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001db4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001db6:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <xPortStartScheduler+0x138>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a14      	ldr	r2, [pc, #80]	; (8001e0c <xPortStartScheduler+0x138>)
 8001dbc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001dc0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001dc2:	f000 f8db 	bl	8001f7c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001dc6:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <xPortStartScheduler+0x13c>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8001dcc:	f000 f8fa 	bl	8001fc4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001dd0:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <xPortStartScheduler+0x140>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a0f      	ldr	r2, [pc, #60]	; (8001e14 <xPortStartScheduler+0x140>)
 8001dd6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001dda:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001ddc:	f7ff ff64 	bl	8001ca8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001de0:	f7ff fbfa 	bl	80015d8 <vTaskSwitchContext>
    prvTaskExitError();
 8001de4:	f7ff ff1c 	bl	8001c20 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	e000ed00 	.word	0xe000ed00
 8001df8:	410fc271 	.word	0x410fc271
 8001dfc:	410fc270 	.word	0x410fc270
 8001e00:	e000e400 	.word	0xe000e400
 8001e04:	200001e0 	.word	0x200001e0
 8001e08:	200001e4 	.word	0x200001e4
 8001e0c:	e000ed20 	.word	0xe000ed20
 8001e10:	20000004 	.word	0x20000004
 8001e14:	e000ef34 	.word	0xe000ef34

08001e18 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
        __asm volatile
 8001e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e22:	f383 8811 	msr	BASEPRI, r3
 8001e26:	f3bf 8f6f 	isb	sy
 8001e2a:	f3bf 8f4f 	dsb	sy
 8001e2e:	607b      	str	r3, [r7, #4]
    }
 8001e30:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8001e32:	4b0f      	ldr	r3, [pc, #60]	; (8001e70 <vPortEnterCritical+0x58>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	3301      	adds	r3, #1
 8001e38:	4a0d      	ldr	r2, [pc, #52]	; (8001e70 <vPortEnterCritical+0x58>)
 8001e3a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <vPortEnterCritical+0x58>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d10f      	bne.n	8001e64 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001e44:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <vPortEnterCritical+0x5c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00a      	beq.n	8001e64 <vPortEnterCritical+0x4c>
        __asm volatile
 8001e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e52:	f383 8811 	msr	BASEPRI, r3
 8001e56:	f3bf 8f6f 	isb	sy
 8001e5a:	f3bf 8f4f 	dsb	sy
 8001e5e:	603b      	str	r3, [r7, #0]
    }
 8001e60:	bf00      	nop
 8001e62:	e7fe      	b.n	8001e62 <vPortEnterCritical+0x4a>
    }
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	20000004 	.word	0x20000004
 8001e74:	e000ed04 	.word	0xe000ed04

08001e78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8001e7e:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <vPortExitCritical+0x50>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10a      	bne.n	8001e9c <vPortExitCritical+0x24>
        __asm volatile
 8001e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e8a:	f383 8811 	msr	BASEPRI, r3
 8001e8e:	f3bf 8f6f 	isb	sy
 8001e92:	f3bf 8f4f 	dsb	sy
 8001e96:	607b      	str	r3, [r7, #4]
    }
 8001e98:	bf00      	nop
 8001e9a:	e7fe      	b.n	8001e9a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8001e9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <vPortExitCritical+0x50>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	4a09      	ldr	r2, [pc, #36]	; (8001ec8 <vPortExitCritical+0x50>)
 8001ea4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001ea6:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <vPortExitCritical+0x50>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d105      	bne.n	8001eba <vPortExitCritical+0x42>
 8001eae:	2300      	movs	r3, #0
 8001eb0:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	f383 8811 	msr	BASEPRI, r3
    }
 8001eb8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	20000004 	.word	0x20000004
 8001ecc:	00000000 	.word	0x00000000

08001ed0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001ed0:	f3ef 8009 	mrs	r0, PSP
 8001ed4:	f3bf 8f6f 	isb	sy
 8001ed8:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <pxCurrentTCBConst>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	f01e 0f10 	tst.w	lr, #16
 8001ee0:	bf08      	it	eq
 8001ee2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001ee6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001eea:	6010      	str	r0, [r2, #0]
 8001eec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001ef0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001ef4:	f380 8811 	msr	BASEPRI, r0
 8001ef8:	f3bf 8f4f 	dsb	sy
 8001efc:	f3bf 8f6f 	isb	sy
 8001f00:	f7ff fb6a 	bl	80015d8 <vTaskSwitchContext>
 8001f04:	f04f 0000 	mov.w	r0, #0
 8001f08:	f380 8811 	msr	BASEPRI, r0
 8001f0c:	bc09      	pop	{r0, r3}
 8001f0e:	6819      	ldr	r1, [r3, #0]
 8001f10:	6808      	ldr	r0, [r1, #0]
 8001f12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f16:	f01e 0f10 	tst.w	lr, #16
 8001f1a:	bf08      	it	eq
 8001f1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001f20:	f380 8809 	msr	PSP, r0
 8001f24:	f3bf 8f6f 	isb	sy
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	f3af 8000 	nop.w

08001f30 <pxCurrentTCBConst>:
 8001f30:	200000b4 	.word	0x200000b4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001f34:	bf00      	nop
 8001f36:	bf00      	nop

08001f38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
        __asm volatile
 8001f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f42:	f383 8811 	msr	BASEPRI, r3
 8001f46:	f3bf 8f6f 	isb	sy
 8001f4a:	f3bf 8f4f 	dsb	sy
 8001f4e:	607b      	str	r3, [r7, #4]
    }
 8001f50:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001f52:	f7ff fa2b 	bl	80013ac <xTaskIncrementTick>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001f5c:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <SysTick_Handler+0x40>)
 8001f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	2300      	movs	r3, #0
 8001f66:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	f383 8811 	msr	BASEPRI, r3
    }
 8001f6e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	e000ed04 	.word	0xe000ed04

08001f7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001f80:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <vPortSetupTimerInterrupt+0x34>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001f86:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <vPortSetupTimerInterrupt+0x38>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001f8c:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <vPortSetupTimerInterrupt+0x3c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a0a      	ldr	r2, [pc, #40]	; (8001fbc <vPortSetupTimerInterrupt+0x40>)
 8001f92:	fba2 2303 	umull	r2, r3, r2, r3
 8001f96:	099b      	lsrs	r3, r3, #6
 8001f98:	4a09      	ldr	r2, [pc, #36]	; (8001fc0 <vPortSetupTimerInterrupt+0x44>)
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001f9e:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <vPortSetupTimerInterrupt+0x34>)
 8001fa0:	2207      	movs	r2, #7
 8001fa2:	601a      	str	r2, [r3, #0]
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	e000e010 	.word	0xe000e010
 8001fb4:	e000e018 	.word	0xe000e018
 8001fb8:	2000003c 	.word	0x2000003c
 8001fbc:	10624dd3 	.word	0x10624dd3
 8001fc0:	e000e014 	.word	0xe000e014

08001fc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8001fc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001fd4 <vPortEnableVFP+0x10>
 8001fc8:	6801      	ldr	r1, [r0, #0]
 8001fca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001fce:	6001      	str	r1, [r0, #0]
 8001fd0:	4770      	bx	lr
 8001fd2:	0000      	.short	0x0000
 8001fd4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8001fd8:	bf00      	nop
 8001fda:	bf00      	nop

08001fdc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8001fe2:	f3ef 8305 	mrs	r3, IPSR
 8001fe6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2b0f      	cmp	r3, #15
 8001fec:	d914      	bls.n	8002018 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001fee:	4a17      	ldr	r2, [pc, #92]	; (800204c <vPortValidateInterruptPriority+0x70>)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001ff8:	4b15      	ldr	r3, [pc, #84]	; (8002050 <vPortValidateInterruptPriority+0x74>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	7afa      	ldrb	r2, [r7, #11]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d20a      	bcs.n	8002018 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8002002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002006:	f383 8811 	msr	BASEPRI, r3
 800200a:	f3bf 8f6f 	isb	sy
 800200e:	f3bf 8f4f 	dsb	sy
 8002012:	607b      	str	r3, [r7, #4]
    }
 8002014:	bf00      	nop
 8002016:	e7fe      	b.n	8002016 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002018:	4b0e      	ldr	r3, [pc, #56]	; (8002054 <vPortValidateInterruptPriority+0x78>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002020:	4b0d      	ldr	r3, [pc, #52]	; (8002058 <vPortValidateInterruptPriority+0x7c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	d90a      	bls.n	800203e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8002028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800202c:	f383 8811 	msr	BASEPRI, r3
 8002030:	f3bf 8f6f 	isb	sy
 8002034:	f3bf 8f4f 	dsb	sy
 8002038:	603b      	str	r3, [r7, #0]
    }
 800203a:	bf00      	nop
 800203c:	e7fe      	b.n	800203c <vPortValidateInterruptPriority+0x60>
    }
 800203e:	bf00      	nop
 8002040:	3714      	adds	r7, #20
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	e000e3f0 	.word	0xe000e3f0
 8002050:	200001e0 	.word	0x200001e0
 8002054:	e000ed0c 	.word	0xe000ed0c
 8002058:	200001e4 	.word	0x200001e4

0800205c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08a      	sub	sp, #40	; 0x28
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002064:	2300      	movs	r3, #0
 8002066:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8002068:	f7ff f886 	bl	8001178 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800206c:	4b53      	ldr	r3, [pc, #332]	; (80021bc <pvPortMalloc+0x160>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002074:	f000 f908 	bl	8002288 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d012      	beq.n	80020a4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800207e:	2208      	movs	r2, #8
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	3308      	adds	r3, #8
 800208a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	43db      	mvns	r3, r3
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	429a      	cmp	r2, r3
 8002094:	d804      	bhi.n	80020a0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	4413      	add	r3, r2
 800209c:	607b      	str	r3, [r7, #4]
 800209e:	e001      	b.n	80020a4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80020a0:	2300      	movs	r3, #0
 80020a2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	db70      	blt.n	800218c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d06d      	beq.n	800218c <pvPortMalloc+0x130>
 80020b0:	4b43      	ldr	r3, [pc, #268]	; (80021c0 <pvPortMalloc+0x164>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d868      	bhi.n	800218c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80020ba:	4b42      	ldr	r3, [pc, #264]	; (80021c4 <pvPortMalloc+0x168>)
 80020bc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80020be:	4b41      	ldr	r3, [pc, #260]	; (80021c4 <pvPortMalloc+0x168>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80020c4:	e004      	b.n	80020d0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d903      	bls.n	80020e2 <pvPortMalloc+0x86>
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f1      	bne.n	80020c6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80020e2:	4b36      	ldr	r3, [pc, #216]	; (80021bc <pvPortMalloc+0x160>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d04f      	beq.n	800218c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80020ec:	6a3b      	ldr	r3, [r7, #32]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2208      	movs	r2, #8
 80020f2:	4413      	add	r3, r2
 80020f4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	6a3b      	ldr	r3, [r7, #32]
 80020fc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	1ad2      	subs	r2, r2, r3
 8002106:	2308      	movs	r3, #8
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	429a      	cmp	r2, r3
 800210c:	d91f      	bls.n	800214e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800210e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4413      	add	r3, r2
 8002114:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00a      	beq.n	8002136 <pvPortMalloc+0xda>
        __asm volatile
 8002120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002124:	f383 8811 	msr	BASEPRI, r3
 8002128:	f3bf 8f6f 	isb	sy
 800212c:	f3bf 8f4f 	dsb	sy
 8002130:	613b      	str	r3, [r7, #16]
    }
 8002132:	bf00      	nop
 8002134:	e7fe      	b.n	8002134 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	1ad2      	subs	r2, r2, r3
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002148:	6978      	ldr	r0, [r7, #20]
 800214a:	f000 f8f9 	bl	8002340 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800214e:	4b1c      	ldr	r3, [pc, #112]	; (80021c0 <pvPortMalloc+0x164>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	4a19      	ldr	r2, [pc, #100]	; (80021c0 <pvPortMalloc+0x164>)
 800215a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800215c:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <pvPortMalloc+0x164>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4b19      	ldr	r3, [pc, #100]	; (80021c8 <pvPortMalloc+0x16c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	429a      	cmp	r2, r3
 8002166:	d203      	bcs.n	8002170 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002168:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <pvPortMalloc+0x164>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a16      	ldr	r2, [pc, #88]	; (80021c8 <pvPortMalloc+0x16c>)
 800216e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8002170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002182:	4b12      	ldr	r3, [pc, #72]	; (80021cc <pvPortMalloc+0x170>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	3301      	adds	r3, #1
 8002188:	4a10      	ldr	r2, [pc, #64]	; (80021cc <pvPortMalloc+0x170>)
 800218a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800218c:	f7ff f802 	bl	8001194 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00a      	beq.n	80021b0 <pvPortMalloc+0x154>
        __asm volatile
 800219a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800219e:	f383 8811 	msr	BASEPRI, r3
 80021a2:	f3bf 8f6f 	isb	sy
 80021a6:	f3bf 8f4f 	dsb	sy
 80021aa:	60fb      	str	r3, [r7, #12]
    }
 80021ac:	bf00      	nop
 80021ae:	e7fe      	b.n	80021ae <pvPortMalloc+0x152>
    return pvReturn;
 80021b0:	69fb      	ldr	r3, [r7, #28]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3728      	adds	r7, #40	; 0x28
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	20000da8 	.word	0x20000da8
 80021c0:	20000dac 	.word	0x20000dac
 80021c4:	20000da0 	.word	0x20000da0
 80021c8:	20000db0 	.word	0x20000db0
 80021cc:	20000db4 	.word	0x20000db4

080021d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d049      	beq.n	8002276 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80021e2:	2308      	movs	r3, #8
 80021e4:	425b      	negs	r3, r3
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	4413      	add	r3, r2
 80021ea:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	db0a      	blt.n	800220e <vPortFree+0x3e>
        __asm volatile
 80021f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021fc:	f383 8811 	msr	BASEPRI, r3
 8002200:	f3bf 8f6f 	isb	sy
 8002204:	f3bf 8f4f 	dsb	sy
 8002208:	60fb      	str	r3, [r7, #12]
    }
 800220a:	bf00      	nop
 800220c:	e7fe      	b.n	800220c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00a      	beq.n	800222c <vPortFree+0x5c>
        __asm volatile
 8002216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800221a:	f383 8811 	msr	BASEPRI, r3
 800221e:	f3bf 8f6f 	isb	sy
 8002222:	f3bf 8f4f 	dsb	sy
 8002226:	60bb      	str	r3, [r7, #8]
    }
 8002228:	bf00      	nop
 800222a:	e7fe      	b.n	800222a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	0fdb      	lsrs	r3, r3, #31
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	d01c      	beq.n	8002276 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d118      	bne.n	8002276 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8002250:	f7fe ff92 	bl	8001178 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	4b09      	ldr	r3, [pc, #36]	; (8002280 <vPortFree+0xb0>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4413      	add	r3, r2
 800225e:	4a08      	ldr	r2, [pc, #32]	; (8002280 <vPortFree+0xb0>)
 8002260:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002262:	6938      	ldr	r0, [r7, #16]
 8002264:	f000 f86c 	bl	8002340 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002268:	4b06      	ldr	r3, [pc, #24]	; (8002284 <vPortFree+0xb4>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	3301      	adds	r3, #1
 800226e:	4a05      	ldr	r2, [pc, #20]	; (8002284 <vPortFree+0xb4>)
 8002270:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002272:	f7fe ff8f 	bl	8001194 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002276:	bf00      	nop
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20000dac 	.word	0x20000dac
 8002284:	20000db8 	.word	0x20000db8

08002288 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800228e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002292:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002294:	4b25      	ldr	r3, [pc, #148]	; (800232c <prvHeapInit+0xa4>)
 8002296:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00c      	beq.n	80022bc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	3307      	adds	r3, #7
 80022a6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f023 0307 	bic.w	r3, r3, #7
 80022ae:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80022b0:	68ba      	ldr	r2, [r7, #8]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	4a1d      	ldr	r2, [pc, #116]	; (800232c <prvHeapInit+0xa4>)
 80022b8:	4413      	add	r3, r2
 80022ba:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80022c0:	4a1b      	ldr	r2, [pc, #108]	; (8002330 <prvHeapInit+0xa8>)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80022c6:	4b1a      	ldr	r3, [pc, #104]	; (8002330 <prvHeapInit+0xa8>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	4413      	add	r3, r2
 80022d2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80022d4:	2208      	movs	r2, #8
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	1a9b      	subs	r3, r3, r2
 80022da:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f023 0307 	bic.w	r3, r3, #7
 80022e2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4a13      	ldr	r2, [pc, #76]	; (8002334 <prvHeapInit+0xac>)
 80022e8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80022ea:	4b12      	ldr	r3, [pc, #72]	; (8002334 <prvHeapInit+0xac>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2200      	movs	r2, #0
 80022f0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80022f2:	4b10      	ldr	r3, [pc, #64]	; (8002334 <prvHeapInit+0xac>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	1ad2      	subs	r2, r2, r3
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002308:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <prvHeapInit+0xac>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	4a08      	ldr	r2, [pc, #32]	; (8002338 <prvHeapInit+0xb0>)
 8002316:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	4a07      	ldr	r2, [pc, #28]	; (800233c <prvHeapInit+0xb4>)
 800231e:	6013      	str	r3, [r2, #0]
}
 8002320:	bf00      	nop
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	200001e8 	.word	0x200001e8
 8002330:	20000da0 	.word	0x20000da0
 8002334:	20000da8 	.word	0x20000da8
 8002338:	20000db0 	.word	0x20000db0
 800233c:	20000dac 	.word	0x20000dac

08002340 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002348:	4b28      	ldr	r3, [pc, #160]	; (80023ec <prvInsertBlockIntoFreeList+0xac>)
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	e002      	b.n	8002354 <prvInsertBlockIntoFreeList+0x14>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	429a      	cmp	r2, r3
 800235c:	d8f7      	bhi.n	800234e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	4413      	add	r3, r2
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	429a      	cmp	r2, r3
 800236e:	d108      	bne.n	8002382 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	441a      	add	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	441a      	add	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d118      	bne.n	80023c8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	4b15      	ldr	r3, [pc, #84]	; (80023f0 <prvInsertBlockIntoFreeList+0xb0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d00d      	beq.n	80023be <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685a      	ldr	r2, [r3, #4]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	441a      	add	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	e008      	b.n	80023d0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80023be:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <prvInsertBlockIntoFreeList+0xb0>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	e003      	b.n	80023d0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d002      	beq.n	80023de <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80023de:	bf00      	nop
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	20000da0 	.word	0x20000da0
 80023f0:	20000da8 	.word	0x20000da8

080023f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023fa:	f001 fd8e 	bl	8003f1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023fe:	f000 f86f 	bl	80024e0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002402:	f000 f8cb 	bl	800259c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002406:	f000 fc1d 	bl	8002c44 <MX_GPIO_Init>
  MX_ADC1_Init();
 800240a:	f000 f8f7 	bl	80025fc <MX_ADC1_Init>
  MX_DFSDM1_Init();
 800240e:	f000 f959 	bl	80026c4 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 8002412:	f000 f98f 	bl	8002734 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002416:	f000 f9cb 	bl	80027b0 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 800241a:	f000 fa07 	bl	800282c <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 800241e:	f000 fa5b 	bl	80028d8 <MX_SPI1_Init>
  MX_SPI3_Init();
 8002422:	f000 fa97 	bl	8002954 <MX_SPI3_Init>
  MX_UART4_Init();
 8002426:	f000 fad3 	bl	80029d0 <MX_UART4_Init>
  MX_USART1_UART_Init();
 800242a:	f000 fb1d 	bl	8002a68 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800242e:	f000 fb67 	bl	8002b00 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002432:	f000 fbb3 	bl	8002b9c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8002436:	f000 fbfd 	bl	8002c34 <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
 MyLED2_init();
 800243a:	f000 fd55 	bl	8002ee8 <MyLED2_init>
 MyButton_init();
 800243e:	f000 fd85 	bl	8002f4c <MyButton_init>
 MyUART1_init();
 8002442:	f000 fdcb 	bl	8002fdc <MyUART1_init>
 //BSP_TSENSOR_Init();


 HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), 1000);
 8002446:	481b      	ldr	r0, [pc, #108]	; (80024b4 <main+0xc0>)
 8002448:	f7fd feda 	bl	8000200 <strlen>
 800244c:	4603      	mov	r3, r0
 800244e:	b29a      	uxth	r2, r3
 8002450:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002454:	4917      	ldr	r1, [pc, #92]	; (80024b4 <main+0xc0>)
 8002456:	4818      	ldr	r0, [pc, #96]	; (80024b8 <main+0xc4>)
 8002458:	f007 fd9c 	bl	8009f94 <HAL_UART_Transmit>

 HAL_I2C_EnableListen_IT(&hi2c1);
 800245c:	4817      	ldr	r0, [pc, #92]	; (80024bc <main+0xc8>)
 800245e:	f003 fc01 	bl	8005c64 <HAL_I2C_EnableListen_IT>

 flag = xTaskCreate(SOS_Transmit, "SOS_Transmit", 200, (void *) 300, 3, &pSOS_Transmit);
 8002462:	4b17      	ldr	r3, [pc, #92]	; (80024c0 <main+0xcc>)
 8002464:	9301      	str	r3, [sp, #4]
 8002466:	2303      	movs	r3, #3
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800246e:	22c8      	movs	r2, #200	; 0xc8
 8002470:	4914      	ldr	r1, [pc, #80]	; (80024c4 <main+0xd0>)
 8002472:	4815      	ldr	r0, [pc, #84]	; (80024c8 <main+0xd4>)
 8002474:	f7fe fb32 	bl	8000adc <xTaskCreate>
 8002478:	6078      	str	r0, [r7, #4]
 if(flag!=pdPASS)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d001      	beq.n	8002484 <main+0x90>
 {
	 Error_Handler();
 8002480:	f001 f83c 	bl	80034fc <Error_Handler>
 }
 LastWakeTime=xTaskGetTickCount();
 8002484:	f7fe ff82 	bl	800138c <xTaskGetTickCount>
 8002488:	4603      	mov	r3, r0
 800248a:	4a10      	ldr	r2, [pc, #64]	; (80024cc <main+0xd8>)
 800248c:	6013      	str	r3, [r2, #0]

 HAL_UART_Receive_IT(&huart1, &receiveBuf, 1);
 pUARTQueue = xQueueCreate(10, sizeof(uint8_t));
*/

 flag_tempSensor = xTaskCreate(TempSensorRead, "TempSensorRead", 200, "\r\n Temperature Sensor Reading!!!", 3, &pTempSensorRead);
 800248e:	4b10      	ldr	r3, [pc, #64]	; (80024d0 <main+0xdc>)
 8002490:	9301      	str	r3, [sp, #4]
 8002492:	2303      	movs	r3, #3
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <main+0xe0>)
 8002498:	22c8      	movs	r2, #200	; 0xc8
 800249a:	490f      	ldr	r1, [pc, #60]	; (80024d8 <main+0xe4>)
 800249c:	480f      	ldr	r0, [pc, #60]	; (80024dc <main+0xe8>)
 800249e:	f7fe fb1d 	bl	8000adc <xTaskCreate>
 80024a2:	6038      	str	r0, [r7, #0]
 if(flag_tempSensor!=pdPASS)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d001      	beq.n	80024ae <main+0xba>
  {
 	 Error_Handler();
 80024aa:	f001 f827 	bl	80034fc <Error_Handler>
 if(flag_targetReceive != pdPASS)
   {
  	 Error_Handler();
   }*/
 //start Scheduler
 vTaskStartScheduler();
 80024ae:	f7fe fe17 	bl	80010e0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80024b2:	e7fe      	b.n	80024b2 <main+0xbe>
 80024b4:	20000008 	.word	0x20000008
 80024b8:	20001108 	.word	0x20001108
 80024bc:	20000eb4 	.word	0x20000eb4
 80024c0:	20000dbc 	.word	0x20000dbc
 80024c4:	0800be30 	.word	0x0800be30
 80024c8:	0800309d 	.word	0x0800309d
 80024cc:	20000dc0 	.word	0x20000dc0
 80024d0:	20000dcc 	.word	0x20000dcc
 80024d4:	0800be40 	.word	0x0800be40
 80024d8:	0800be64 	.word	0x0800be64
 80024dc:	08003205 	.word	0x08003205

080024e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b096      	sub	sp, #88	; 0x58
 80024e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024e6:	f107 0314 	add.w	r3, r7, #20
 80024ea:	2244      	movs	r2, #68	; 0x44
 80024ec:	2100      	movs	r1, #0
 80024ee:	4618      	mov	r0, r3
 80024f0:	f008 ffd0 	bl	800b494 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024f4:	463b      	mov	r3, r7
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	605a      	str	r2, [r3, #4]
 80024fc:	609a      	str	r2, [r3, #8]
 80024fe:	60da      	str	r2, [r3, #12]
 8002500:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002502:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002506:	f005 fcc9 	bl	8007e9c <HAL_PWREx_ControlVoltageScaling>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002510:	f000 fff4 	bl	80034fc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002514:	f005 fc92 	bl	8007e3c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002518:	4b1f      	ldr	r3, [pc, #124]	; (8002598 <SystemClock_Config+0xb8>)
 800251a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251e:	4a1e      	ldr	r2, [pc, #120]	; (8002598 <SystemClock_Config+0xb8>)
 8002520:	f023 0318 	bic.w	r3, r3, #24
 8002524:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8002528:	2316      	movs	r3, #22
 800252a:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800252c:	2301      	movs	r3, #1
 800252e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002530:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002534:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002536:	2340      	movs	r3, #64	; 0x40
 8002538:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800253a:	2301      	movs	r3, #1
 800253c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800253e:	2300      	movs	r3, #0
 8002540:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002542:	2360      	movs	r3, #96	; 0x60
 8002544:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002546:	2300      	movs	r3, #0
 8002548:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800254a:	f107 0314 	add.w	r3, r7, #20
 800254e:	4618      	mov	r0, r3
 8002550:	f005 fd48 	bl	8007fe4 <HAL_RCC_OscConfig>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800255a:	f000 ffcf 	bl	80034fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800255e:	230f      	movs	r3, #15
 8002560:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002562:	2301      	movs	r3, #1
 8002564:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002566:	2300      	movs	r3, #0
 8002568:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800256a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800256e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8002570:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002574:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002576:	463b      	mov	r3, r7
 8002578:	2100      	movs	r1, #0
 800257a:	4618      	mov	r0, r3
 800257c:	f006 f94c 	bl	8008818 <HAL_RCC_ClockConfig>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002586:	f000 ffb9 	bl	80034fc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800258a:	f006 ff65 	bl	8009458 <HAL_RCCEx_EnableMSIPLLMode>
}
 800258e:	bf00      	nop
 8002590:	3758      	adds	r7, #88	; 0x58
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40021000 	.word	0x40021000

0800259c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b0a6      	sub	sp, #152	; 0x98
 80025a0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025a2:	1d3b      	adds	r3, r7, #4
 80025a4:	2294      	movs	r2, #148	; 0x94
 80025a6:	2100      	movs	r1, #0
 80025a8:	4618      	mov	r0, r3
 80025aa:	f008 ff73 	bl	800b494 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 80025ae:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80025b2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80025b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80025b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80025bc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80025c0:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80025c2:	2301      	movs	r3, #1
 80025c4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80025c6:	2301      	movs	r3, #1
 80025c8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80025ca:	2318      	movs	r3, #24
 80025cc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80025ce:	2302      	movs	r3, #2
 80025d0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80025d2:	2302      	movs	r3, #2
 80025d4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80025d6:	2302      	movs	r3, #2
 80025d8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80025da:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80025de:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025e0:	1d3b      	adds	r3, r7, #4
 80025e2:	4618      	mov	r0, r3
 80025e4:	f006 fc08 	bl	8008df8 <HAL_RCCEx_PeriphCLKConfig>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80025ee:	f000 ff85 	bl	80034fc <Error_Handler>
  }
}
 80025f2:	bf00      	nop
 80025f4:	3798      	adds	r7, #152	; 0x98
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
	...

080025fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002602:	463b      	mov	r3, r7
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	60da      	str	r2, [r3, #12]
 800260e:	611a      	str	r2, [r3, #16]
 8002610:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002612:	4b29      	ldr	r3, [pc, #164]	; (80026b8 <MX_ADC1_Init+0xbc>)
 8002614:	4a29      	ldr	r2, [pc, #164]	; (80026bc <MX_ADC1_Init+0xc0>)
 8002616:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002618:	4b27      	ldr	r3, [pc, #156]	; (80026b8 <MX_ADC1_Init+0xbc>)
 800261a:	2200      	movs	r2, #0
 800261c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800261e:	4b26      	ldr	r3, [pc, #152]	; (80026b8 <MX_ADC1_Init+0xbc>)
 8002620:	2200      	movs	r2, #0
 8002622:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002624:	4b24      	ldr	r3, [pc, #144]	; (80026b8 <MX_ADC1_Init+0xbc>)
 8002626:	2200      	movs	r2, #0
 8002628:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800262a:	4b23      	ldr	r3, [pc, #140]	; (80026b8 <MX_ADC1_Init+0xbc>)
 800262c:	2200      	movs	r2, #0
 800262e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002630:	4b21      	ldr	r3, [pc, #132]	; (80026b8 <MX_ADC1_Init+0xbc>)
 8002632:	2204      	movs	r2, #4
 8002634:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002636:	4b20      	ldr	r3, [pc, #128]	; (80026b8 <MX_ADC1_Init+0xbc>)
 8002638:	2200      	movs	r2, #0
 800263a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800263c:	4b1e      	ldr	r3, [pc, #120]	; (80026b8 <MX_ADC1_Init+0xbc>)
 800263e:	2200      	movs	r2, #0
 8002640:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002642:	4b1d      	ldr	r3, [pc, #116]	; (80026b8 <MX_ADC1_Init+0xbc>)
 8002644:	2201      	movs	r2, #1
 8002646:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002648:	4b1b      	ldr	r3, [pc, #108]	; (80026b8 <MX_ADC1_Init+0xbc>)
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002650:	4b19      	ldr	r3, [pc, #100]	; (80026b8 <MX_ADC1_Init+0xbc>)
 8002652:	2200      	movs	r2, #0
 8002654:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002656:	4b18      	ldr	r3, [pc, #96]	; (80026b8 <MX_ADC1_Init+0xbc>)
 8002658:	2200      	movs	r2, #0
 800265a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800265c:	4b16      	ldr	r3, [pc, #88]	; (80026b8 <MX_ADC1_Init+0xbc>)
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002664:	4b14      	ldr	r3, [pc, #80]	; (80026b8 <MX_ADC1_Init+0xbc>)
 8002666:	2200      	movs	r2, #0
 8002668:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800266a:	4b13      	ldr	r3, [pc, #76]	; (80026b8 <MX_ADC1_Init+0xbc>)
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002672:	4811      	ldr	r0, [pc, #68]	; (80026b8 <MX_ADC1_Init+0xbc>)
 8002674:	f001 fe2a 	bl	80042cc <HAL_ADC_Init>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800267e:	f000 ff3d 	bl	80034fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002682:	4b0f      	ldr	r3, [pc, #60]	; (80026c0 <MX_ADC1_Init+0xc4>)
 8002684:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002686:	2306      	movs	r3, #6
 8002688:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800268a:	2300      	movs	r3, #0
 800268c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800268e:	237f      	movs	r3, #127	; 0x7f
 8002690:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002692:	2304      	movs	r3, #4
 8002694:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002696:	2300      	movs	r3, #0
 8002698:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800269a:	463b      	mov	r3, r7
 800269c:	4619      	mov	r1, r3
 800269e:	4806      	ldr	r0, [pc, #24]	; (80026b8 <MX_ADC1_Init+0xbc>)
 80026a0:	f001 ff5a 	bl	8004558 <HAL_ADC_ConfigChannel>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80026aa:	f000 ff27 	bl	80034fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80026ae:	bf00      	nop
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	20000e14 	.word	0x20000e14
 80026bc:	50040000 	.word	0x50040000
 80026c0:	04300002 	.word	0x04300002

080026c4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 80026c8:	4b18      	ldr	r3, [pc, #96]	; (800272c <MX_DFSDM1_Init+0x68>)
 80026ca:	4a19      	ldr	r2, [pc, #100]	; (8002730 <MX_DFSDM1_Init+0x6c>)
 80026cc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 80026ce:	4b17      	ldr	r3, [pc, #92]	; (800272c <MX_DFSDM1_Init+0x68>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80026d4:	4b15      	ldr	r3, [pc, #84]	; (800272c <MX_DFSDM1_Init+0x68>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 80026da:	4b14      	ldr	r3, [pc, #80]	; (800272c <MX_DFSDM1_Init+0x68>)
 80026dc:	2202      	movs	r2, #2
 80026de:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80026e0:	4b12      	ldr	r3, [pc, #72]	; (800272c <MX_DFSDM1_Init+0x68>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80026e6:	4b11      	ldr	r3, [pc, #68]	; (800272c <MX_DFSDM1_Init+0x68>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80026ec:	4b0f      	ldr	r3, [pc, #60]	; (800272c <MX_DFSDM1_Init+0x68>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80026f2:	4b0e      	ldr	r3, [pc, #56]	; (800272c <MX_DFSDM1_Init+0x68>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80026f8:	4b0c      	ldr	r3, [pc, #48]	; (800272c <MX_DFSDM1_Init+0x68>)
 80026fa:	2204      	movs	r2, #4
 80026fc:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80026fe:	4b0b      	ldr	r3, [pc, #44]	; (800272c <MX_DFSDM1_Init+0x68>)
 8002700:	2200      	movs	r2, #0
 8002702:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8002704:	4b09      	ldr	r3, [pc, #36]	; (800272c <MX_DFSDM1_Init+0x68>)
 8002706:	2201      	movs	r2, #1
 8002708:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 800270a:	4b08      	ldr	r3, [pc, #32]	; (800272c <MX_DFSDM1_Init+0x68>)
 800270c:	2200      	movs	r2, #0
 800270e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8002710:	4b06      	ldr	r3, [pc, #24]	; (800272c <MX_DFSDM1_Init+0x68>)
 8002712:	2200      	movs	r2, #0
 8002714:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8002716:	4805      	ldr	r0, [pc, #20]	; (800272c <MX_DFSDM1_Init+0x68>)
 8002718:	f002 fbfc 	bl	8004f14 <HAL_DFSDM_ChannelInit>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8002722:	f000 feeb 	bl	80034fc <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	20000e7c 	.word	0x20000e7c
 8002730:	40016040 	.word	0x40016040

08002734 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002738:	4b1b      	ldr	r3, [pc, #108]	; (80027a8 <MX_I2C1_Init+0x74>)
 800273a:	4a1c      	ldr	r2, [pc, #112]	; (80027ac <MX_I2C1_Init+0x78>)
 800273c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800273e:	4b1a      	ldr	r3, [pc, #104]	; (80027a8 <MX_I2C1_Init+0x74>)
 8002740:	f640 6214 	movw	r2, #3604	; 0xe14
 8002744:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 44;
 8002746:	4b18      	ldr	r3, [pc, #96]	; (80027a8 <MX_I2C1_Init+0x74>)
 8002748:	222c      	movs	r2, #44	; 0x2c
 800274a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800274c:	4b16      	ldr	r3, [pc, #88]	; (80027a8 <MX_I2C1_Init+0x74>)
 800274e:	2201      	movs	r2, #1
 8002750:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002752:	4b15      	ldr	r3, [pc, #84]	; (80027a8 <MX_I2C1_Init+0x74>)
 8002754:	2200      	movs	r2, #0
 8002756:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002758:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <MX_I2C1_Init+0x74>)
 800275a:	2200      	movs	r2, #0
 800275c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800275e:	4b12      	ldr	r3, [pc, #72]	; (80027a8 <MX_I2C1_Init+0x74>)
 8002760:	2200      	movs	r2, #0
 8002762:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002764:	4b10      	ldr	r3, [pc, #64]	; (80027a8 <MX_I2C1_Init+0x74>)
 8002766:	2200      	movs	r2, #0
 8002768:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800276a:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <MX_I2C1_Init+0x74>)
 800276c:	2200      	movs	r2, #0
 800276e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002770:	480d      	ldr	r0, [pc, #52]	; (80027a8 <MX_I2C1_Init+0x74>)
 8002772:	f002 ff67 	bl	8005644 <HAL_I2C_Init>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800277c:	f000 febe 	bl	80034fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002780:	2100      	movs	r1, #0
 8002782:	4809      	ldr	r0, [pc, #36]	; (80027a8 <MX_I2C1_Init+0x74>)
 8002784:	f004 fdec 	bl	8007360 <HAL_I2CEx_ConfigAnalogFilter>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800278e:	f000 feb5 	bl	80034fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002792:	2100      	movs	r1, #0
 8002794:	4804      	ldr	r0, [pc, #16]	; (80027a8 <MX_I2C1_Init+0x74>)
 8002796:	f004 fe2e 	bl	80073f6 <HAL_I2CEx_ConfigDigitalFilter>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80027a0:	f000 feac 	bl	80034fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80027a4:	bf00      	nop
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	20000eb4 	.word	0x20000eb4
 80027ac:	40005400 	.word	0x40005400

080027b0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80027b4:	4b1b      	ldr	r3, [pc, #108]	; (8002824 <MX_I2C2_Init+0x74>)
 80027b6:	4a1c      	ldr	r2, [pc, #112]	; (8002828 <MX_I2C2_Init+0x78>)
 80027b8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80027ba:	4b1a      	ldr	r3, [pc, #104]	; (8002824 <MX_I2C2_Init+0x74>)
 80027bc:	f640 6214 	movw	r2, #3604	; 0xe14
 80027c0:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80027c2:	4b18      	ldr	r3, [pc, #96]	; (8002824 <MX_I2C2_Init+0x74>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027c8:	4b16      	ldr	r3, [pc, #88]	; (8002824 <MX_I2C2_Init+0x74>)
 80027ca:	2201      	movs	r2, #1
 80027cc:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027ce:	4b15      	ldr	r3, [pc, #84]	; (8002824 <MX_I2C2_Init+0x74>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80027d4:	4b13      	ldr	r3, [pc, #76]	; (8002824 <MX_I2C2_Init+0x74>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80027da:	4b12      	ldr	r3, [pc, #72]	; (8002824 <MX_I2C2_Init+0x74>)
 80027dc:	2200      	movs	r2, #0
 80027de:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027e0:	4b10      	ldr	r3, [pc, #64]	; (8002824 <MX_I2C2_Init+0x74>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027e6:	4b0f      	ldr	r3, [pc, #60]	; (8002824 <MX_I2C2_Init+0x74>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80027ec:	480d      	ldr	r0, [pc, #52]	; (8002824 <MX_I2C2_Init+0x74>)
 80027ee:	f002 ff29 	bl	8005644 <HAL_I2C_Init>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80027f8:	f000 fe80 	bl	80034fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80027fc:	2100      	movs	r1, #0
 80027fe:	4809      	ldr	r0, [pc, #36]	; (8002824 <MX_I2C2_Init+0x74>)
 8002800:	f004 fdae 	bl	8007360 <HAL_I2CEx_ConfigAnalogFilter>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800280a:	f000 fe77 	bl	80034fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800280e:	2100      	movs	r1, #0
 8002810:	4804      	ldr	r0, [pc, #16]	; (8002824 <MX_I2C2_Init+0x74>)
 8002812:	f004 fdf0 	bl	80073f6 <HAL_I2CEx_ConfigDigitalFilter>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800281c:	f000 fe6e 	bl	80034fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002820:	bf00      	nop
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20000f08 	.word	0x20000f08
 8002828:	40005800 	.word	0x40005800

0800282c <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8002832:	1d3b      	adds	r3, r7, #4
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	605a      	str	r2, [r3, #4]
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	60da      	str	r2, [r3, #12]
 800283e:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8002840:	4b23      	ldr	r3, [pc, #140]	; (80028d0 <MX_OCTOSPI1_Init+0xa4>)
 8002842:	4a24      	ldr	r2, [pc, #144]	; (80028d4 <MX_OCTOSPI1_Init+0xa8>)
 8002844:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8002846:	4b22      	ldr	r3, [pc, #136]	; (80028d0 <MX_OCTOSPI1_Init+0xa4>)
 8002848:	2201      	movs	r2, #1
 800284a:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 800284c:	4b20      	ldr	r3, [pc, #128]	; (80028d0 <MX_OCTOSPI1_Init+0xa4>)
 800284e:	2200      	movs	r2, #0
 8002850:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8002852:	4b1f      	ldr	r3, [pc, #124]	; (80028d0 <MX_OCTOSPI1_Init+0xa4>)
 8002854:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002858:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 800285a:	4b1d      	ldr	r3, [pc, #116]	; (80028d0 <MX_OCTOSPI1_Init+0xa4>)
 800285c:	2220      	movs	r2, #32
 800285e:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8002860:	4b1b      	ldr	r3, [pc, #108]	; (80028d0 <MX_OCTOSPI1_Init+0xa4>)
 8002862:	2201      	movs	r2, #1
 8002864:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8002866:	4b1a      	ldr	r3, [pc, #104]	; (80028d0 <MX_OCTOSPI1_Init+0xa4>)
 8002868:	2200      	movs	r2, #0
 800286a:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 800286c:	4b18      	ldr	r3, [pc, #96]	; (80028d0 <MX_OCTOSPI1_Init+0xa4>)
 800286e:	2200      	movs	r2, #0
 8002870:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8002872:	4b17      	ldr	r3, [pc, #92]	; (80028d0 <MX_OCTOSPI1_Init+0xa4>)
 8002874:	2201      	movs	r2, #1
 8002876:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8002878:	4b15      	ldr	r3, [pc, #84]	; (80028d0 <MX_OCTOSPI1_Init+0xa4>)
 800287a:	2200      	movs	r2, #0
 800287c:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800287e:	4b14      	ldr	r3, [pc, #80]	; (80028d0 <MX_OCTOSPI1_Init+0xa4>)
 8002880:	2200      	movs	r2, #0
 8002882:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8002884:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <MX_OCTOSPI1_Init+0xa4>)
 8002886:	2200      	movs	r2, #0
 8002888:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800288a:	4b11      	ldr	r3, [pc, #68]	; (80028d0 <MX_OCTOSPI1_Init+0xa4>)
 800288c:	2208      	movs	r2, #8
 800288e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8002890:	480f      	ldr	r0, [pc, #60]	; (80028d0 <MX_OCTOSPI1_Init+0xa4>)
 8002892:	f004 fdfd 	bl	8007490 <HAL_OSPI_Init>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 800289c:	f000 fe2e 	bl	80034fc <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 80028a0:	2301      	movs	r3, #1
 80028a2:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 80028a4:	2301      	movs	r3, #1
 80028a6:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 80028a8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80028ac:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80028ae:	1d3b      	adds	r3, r7, #4
 80028b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b4:	4619      	mov	r1, r3
 80028b6:	4806      	ldr	r0, [pc, #24]	; (80028d0 <MX_OCTOSPI1_Init+0xa4>)
 80028b8:	f004 fea4 	bl	8007604 <HAL_OSPIM_Config>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 80028c2:	f000 fe1b 	bl	80034fc <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 80028c6:	bf00      	nop
 80028c8:	3718      	adds	r7, #24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	20000f5c 	.word	0x20000f5c
 80028d4:	a0001000 	.word	0xa0001000

080028d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80028dc:	4b1b      	ldr	r3, [pc, #108]	; (800294c <MX_SPI1_Init+0x74>)
 80028de:	4a1c      	ldr	r2, [pc, #112]	; (8002950 <MX_SPI1_Init+0x78>)
 80028e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80028e2:	4b1a      	ldr	r3, [pc, #104]	; (800294c <MX_SPI1_Init+0x74>)
 80028e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80028ea:	4b18      	ldr	r3, [pc, #96]	; (800294c <MX_SPI1_Init+0x74>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80028f0:	4b16      	ldr	r3, [pc, #88]	; (800294c <MX_SPI1_Init+0x74>)
 80028f2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80028f6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028f8:	4b14      	ldr	r3, [pc, #80]	; (800294c <MX_SPI1_Init+0x74>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028fe:	4b13      	ldr	r3, [pc, #76]	; (800294c <MX_SPI1_Init+0x74>)
 8002900:	2200      	movs	r2, #0
 8002902:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002904:	4b11      	ldr	r3, [pc, #68]	; (800294c <MX_SPI1_Init+0x74>)
 8002906:	f44f 7200 	mov.w	r2, #512	; 0x200
 800290a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800290c:	4b0f      	ldr	r3, [pc, #60]	; (800294c <MX_SPI1_Init+0x74>)
 800290e:	2208      	movs	r2, #8
 8002910:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002912:	4b0e      	ldr	r3, [pc, #56]	; (800294c <MX_SPI1_Init+0x74>)
 8002914:	2200      	movs	r2, #0
 8002916:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002918:	4b0c      	ldr	r3, [pc, #48]	; (800294c <MX_SPI1_Init+0x74>)
 800291a:	2200      	movs	r2, #0
 800291c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800291e:	4b0b      	ldr	r3, [pc, #44]	; (800294c <MX_SPI1_Init+0x74>)
 8002920:	2200      	movs	r2, #0
 8002922:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002924:	4b09      	ldr	r3, [pc, #36]	; (800294c <MX_SPI1_Init+0x74>)
 8002926:	2207      	movs	r2, #7
 8002928:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800292a:	4b08      	ldr	r3, [pc, #32]	; (800294c <MX_SPI1_Init+0x74>)
 800292c:	2200      	movs	r2, #0
 800292e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002930:	4b06      	ldr	r3, [pc, #24]	; (800294c <MX_SPI1_Init+0x74>)
 8002932:	2208      	movs	r2, #8
 8002934:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002936:	4805      	ldr	r0, [pc, #20]	; (800294c <MX_SPI1_Init+0x74>)
 8002938:	f006 ff86 	bl	8009848 <HAL_SPI_Init>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002942:	f000 fddb 	bl	80034fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002946:	bf00      	nop
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20000fac 	.word	0x20000fac
 8002950:	40013000 	.word	0x40013000

08002954 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002958:	4b1b      	ldr	r3, [pc, #108]	; (80029c8 <MX_SPI3_Init+0x74>)
 800295a:	4a1c      	ldr	r2, [pc, #112]	; (80029cc <MX_SPI3_Init+0x78>)
 800295c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800295e:	4b1a      	ldr	r3, [pc, #104]	; (80029c8 <MX_SPI3_Init+0x74>)
 8002960:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002964:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002966:	4b18      	ldr	r3, [pc, #96]	; (80029c8 <MX_SPI3_Init+0x74>)
 8002968:	2200      	movs	r2, #0
 800296a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800296c:	4b16      	ldr	r3, [pc, #88]	; (80029c8 <MX_SPI3_Init+0x74>)
 800296e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002972:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002974:	4b14      	ldr	r3, [pc, #80]	; (80029c8 <MX_SPI3_Init+0x74>)
 8002976:	2200      	movs	r2, #0
 8002978:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800297a:	4b13      	ldr	r3, [pc, #76]	; (80029c8 <MX_SPI3_Init+0x74>)
 800297c:	2200      	movs	r2, #0
 800297e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002980:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <MX_SPI3_Init+0x74>)
 8002982:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002986:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002988:	4b0f      	ldr	r3, [pc, #60]	; (80029c8 <MX_SPI3_Init+0x74>)
 800298a:	2208      	movs	r2, #8
 800298c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800298e:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <MX_SPI3_Init+0x74>)
 8002990:	2200      	movs	r2, #0
 8002992:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002994:	4b0c      	ldr	r3, [pc, #48]	; (80029c8 <MX_SPI3_Init+0x74>)
 8002996:	2200      	movs	r2, #0
 8002998:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800299a:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <MX_SPI3_Init+0x74>)
 800299c:	2200      	movs	r2, #0
 800299e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80029a0:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <MX_SPI3_Init+0x74>)
 80029a2:	2207      	movs	r2, #7
 80029a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80029a6:	4b08      	ldr	r3, [pc, #32]	; (80029c8 <MX_SPI3_Init+0x74>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80029ac:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <MX_SPI3_Init+0x74>)
 80029ae:	2208      	movs	r2, #8
 80029b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80029b2:	4805      	ldr	r0, [pc, #20]	; (80029c8 <MX_SPI3_Init+0x74>)
 80029b4:	f006 ff48 	bl	8009848 <HAL_SPI_Init>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80029be:	f000 fd9d 	bl	80034fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20001010 	.word	0x20001010
 80029cc:	40003c00 	.word	0x40003c00

080029d0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80029d4:	4b22      	ldr	r3, [pc, #136]	; (8002a60 <MX_UART4_Init+0x90>)
 80029d6:	4a23      	ldr	r2, [pc, #140]	; (8002a64 <MX_UART4_Init+0x94>)
 80029d8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80029da:	4b21      	ldr	r3, [pc, #132]	; (8002a60 <MX_UART4_Init+0x90>)
 80029dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029e0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80029e2:	4b1f      	ldr	r3, [pc, #124]	; (8002a60 <MX_UART4_Init+0x90>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80029e8:	4b1d      	ldr	r3, [pc, #116]	; (8002a60 <MX_UART4_Init+0x90>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80029ee:	4b1c      	ldr	r3, [pc, #112]	; (8002a60 <MX_UART4_Init+0x90>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80029f4:	4b1a      	ldr	r3, [pc, #104]	; (8002a60 <MX_UART4_Init+0x90>)
 80029f6:	220c      	movs	r2, #12
 80029f8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029fa:	4b19      	ldr	r3, [pc, #100]	; (8002a60 <MX_UART4_Init+0x90>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a00:	4b17      	ldr	r3, [pc, #92]	; (8002a60 <MX_UART4_Init+0x90>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a06:	4b16      	ldr	r3, [pc, #88]	; (8002a60 <MX_UART4_Init+0x90>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a0c:	4b14      	ldr	r3, [pc, #80]	; (8002a60 <MX_UART4_Init+0x90>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a12:	4b13      	ldr	r3, [pc, #76]	; (8002a60 <MX_UART4_Init+0x90>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002a18:	4811      	ldr	r0, [pc, #68]	; (8002a60 <MX_UART4_Init+0x90>)
 8002a1a:	f007 fa6b 	bl	8009ef4 <HAL_UART_Init>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002a24:	f000 fd6a 	bl	80034fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a28:	2100      	movs	r1, #0
 8002a2a:	480d      	ldr	r0, [pc, #52]	; (8002a60 <MX_UART4_Init+0x90>)
 8002a2c:	f008 fc33 	bl	800b296 <HAL_UARTEx_SetTxFifoThreshold>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002a36:	f000 fd61 	bl	80034fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	4808      	ldr	r0, [pc, #32]	; (8002a60 <MX_UART4_Init+0x90>)
 8002a3e:	f008 fc68 	bl	800b312 <HAL_UARTEx_SetRxFifoThreshold>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002a48:	f000 fd58 	bl	80034fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002a4c:	4804      	ldr	r0, [pc, #16]	; (8002a60 <MX_UART4_Init+0x90>)
 8002a4e:	f008 fbe9 	bl	800b224 <HAL_UARTEx_DisableFifoMode>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002a58:	f000 fd50 	bl	80034fc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002a5c:	bf00      	nop
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	20001074 	.word	0x20001074
 8002a64:	40004c00 	.word	0x40004c00

08002a68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a6c:	4b22      	ldr	r3, [pc, #136]	; (8002af8 <MX_USART1_UART_Init+0x90>)
 8002a6e:	4a23      	ldr	r2, [pc, #140]	; (8002afc <MX_USART1_UART_Init+0x94>)
 8002a70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a72:	4b21      	ldr	r3, [pc, #132]	; (8002af8 <MX_USART1_UART_Init+0x90>)
 8002a74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a7a:	4b1f      	ldr	r3, [pc, #124]	; (8002af8 <MX_USART1_UART_Init+0x90>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a80:	4b1d      	ldr	r3, [pc, #116]	; (8002af8 <MX_USART1_UART_Init+0x90>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a86:	4b1c      	ldr	r3, [pc, #112]	; (8002af8 <MX_USART1_UART_Init+0x90>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a8c:	4b1a      	ldr	r3, [pc, #104]	; (8002af8 <MX_USART1_UART_Init+0x90>)
 8002a8e:	220c      	movs	r2, #12
 8002a90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a92:	4b19      	ldr	r3, [pc, #100]	; (8002af8 <MX_USART1_UART_Init+0x90>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a98:	4b17      	ldr	r3, [pc, #92]	; (8002af8 <MX_USART1_UART_Init+0x90>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a9e:	4b16      	ldr	r3, [pc, #88]	; (8002af8 <MX_USART1_UART_Init+0x90>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002aa4:	4b14      	ldr	r3, [pc, #80]	; (8002af8 <MX_USART1_UART_Init+0x90>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002aaa:	4b13      	ldr	r3, [pc, #76]	; (8002af8 <MX_USART1_UART_Init+0x90>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ab0:	4811      	ldr	r0, [pc, #68]	; (8002af8 <MX_USART1_UART_Init+0x90>)
 8002ab2:	f007 fa1f 	bl	8009ef4 <HAL_UART_Init>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002abc:	f000 fd1e 	bl	80034fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	480d      	ldr	r0, [pc, #52]	; (8002af8 <MX_USART1_UART_Init+0x90>)
 8002ac4:	f008 fbe7 	bl	800b296 <HAL_UARTEx_SetTxFifoThreshold>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002ace:	f000 fd15 	bl	80034fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	4808      	ldr	r0, [pc, #32]	; (8002af8 <MX_USART1_UART_Init+0x90>)
 8002ad6:	f008 fc1c 	bl	800b312 <HAL_UARTEx_SetRxFifoThreshold>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002ae0:	f000 fd0c 	bl	80034fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002ae4:	4804      	ldr	r0, [pc, #16]	; (8002af8 <MX_USART1_UART_Init+0x90>)
 8002ae6:	f008 fb9d 	bl	800b224 <HAL_UARTEx_DisableFifoMode>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002af0:	f000 fd04 	bl	80034fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002af4:	bf00      	nop
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	20001108 	.word	0x20001108
 8002afc:	40013800 	.word	0x40013800

08002b00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b04:	4b23      	ldr	r3, [pc, #140]	; (8002b94 <MX_USART2_UART_Init+0x94>)
 8002b06:	4a24      	ldr	r2, [pc, #144]	; (8002b98 <MX_USART2_UART_Init+0x98>)
 8002b08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002b0a:	4b22      	ldr	r3, [pc, #136]	; (8002b94 <MX_USART2_UART_Init+0x94>)
 8002b0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b12:	4b20      	ldr	r3, [pc, #128]	; (8002b94 <MX_USART2_UART_Init+0x94>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b18:	4b1e      	ldr	r3, [pc, #120]	; (8002b94 <MX_USART2_UART_Init+0x94>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b1e:	4b1d      	ldr	r3, [pc, #116]	; (8002b94 <MX_USART2_UART_Init+0x94>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b24:	4b1b      	ldr	r3, [pc, #108]	; (8002b94 <MX_USART2_UART_Init+0x94>)
 8002b26:	220c      	movs	r2, #12
 8002b28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002b2a:	4b1a      	ldr	r3, [pc, #104]	; (8002b94 <MX_USART2_UART_Init+0x94>)
 8002b2c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002b30:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b32:	4b18      	ldr	r3, [pc, #96]	; (8002b94 <MX_USART2_UART_Init+0x94>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b38:	4b16      	ldr	r3, [pc, #88]	; (8002b94 <MX_USART2_UART_Init+0x94>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b3e:	4b15      	ldr	r3, [pc, #84]	; (8002b94 <MX_USART2_UART_Init+0x94>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b44:	4b13      	ldr	r3, [pc, #76]	; (8002b94 <MX_USART2_UART_Init+0x94>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b4a:	4812      	ldr	r0, [pc, #72]	; (8002b94 <MX_USART2_UART_Init+0x94>)
 8002b4c:	f007 f9d2 	bl	8009ef4 <HAL_UART_Init>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8002b56:	f000 fcd1 	bl	80034fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	480d      	ldr	r0, [pc, #52]	; (8002b94 <MX_USART2_UART_Init+0x94>)
 8002b5e:	f008 fb9a 	bl	800b296 <HAL_UARTEx_SetTxFifoThreshold>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8002b68:	f000 fcc8 	bl	80034fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	4809      	ldr	r0, [pc, #36]	; (8002b94 <MX_USART2_UART_Init+0x94>)
 8002b70:	f008 fbcf 	bl	800b312 <HAL_UARTEx_SetRxFifoThreshold>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8002b7a:	f000 fcbf 	bl	80034fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002b7e:	4805      	ldr	r0, [pc, #20]	; (8002b94 <MX_USART2_UART_Init+0x94>)
 8002b80:	f008 fb50 	bl	800b224 <HAL_UARTEx_DisableFifoMode>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8002b8a:	f000 fcb7 	bl	80034fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	2000119c 	.word	0x2000119c
 8002b98:	40004400 	.word	0x40004400

08002b9c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002ba0:	4b22      	ldr	r3, [pc, #136]	; (8002c2c <MX_USART3_UART_Init+0x90>)
 8002ba2:	4a23      	ldr	r2, [pc, #140]	; (8002c30 <MX_USART3_UART_Init+0x94>)
 8002ba4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002ba6:	4b21      	ldr	r3, [pc, #132]	; (8002c2c <MX_USART3_UART_Init+0x90>)
 8002ba8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002bae:	4b1f      	ldr	r3, [pc, #124]	; (8002c2c <MX_USART3_UART_Init+0x90>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002bb4:	4b1d      	ldr	r3, [pc, #116]	; (8002c2c <MX_USART3_UART_Init+0x90>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002bba:	4b1c      	ldr	r3, [pc, #112]	; (8002c2c <MX_USART3_UART_Init+0x90>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002bc0:	4b1a      	ldr	r3, [pc, #104]	; (8002c2c <MX_USART3_UART_Init+0x90>)
 8002bc2:	220c      	movs	r2, #12
 8002bc4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bc6:	4b19      	ldr	r3, [pc, #100]	; (8002c2c <MX_USART3_UART_Init+0x90>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bcc:	4b17      	ldr	r3, [pc, #92]	; (8002c2c <MX_USART3_UART_Init+0x90>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bd2:	4b16      	ldr	r3, [pc, #88]	; (8002c2c <MX_USART3_UART_Init+0x90>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002bd8:	4b14      	ldr	r3, [pc, #80]	; (8002c2c <MX_USART3_UART_Init+0x90>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bde:	4b13      	ldr	r3, [pc, #76]	; (8002c2c <MX_USART3_UART_Init+0x90>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002be4:	4811      	ldr	r0, [pc, #68]	; (8002c2c <MX_USART3_UART_Init+0x90>)
 8002be6:	f007 f985 	bl	8009ef4 <HAL_UART_Init>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002bf0:	f000 fc84 	bl	80034fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	480d      	ldr	r0, [pc, #52]	; (8002c2c <MX_USART3_UART_Init+0x90>)
 8002bf8:	f008 fb4d 	bl	800b296 <HAL_UARTEx_SetTxFifoThreshold>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002c02:	f000 fc7b 	bl	80034fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c06:	2100      	movs	r1, #0
 8002c08:	4808      	ldr	r0, [pc, #32]	; (8002c2c <MX_USART3_UART_Init+0x90>)
 8002c0a:	f008 fb82 	bl	800b312 <HAL_UARTEx_SetRxFifoThreshold>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002c14:	f000 fc72 	bl	80034fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002c18:	4804      	ldr	r0, [pc, #16]	; (8002c2c <MX_USART3_UART_Init+0x90>)
 8002c1a:	f008 fb03 	bl	800b224 <HAL_UARTEx_DisableFifoMode>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002c24:	f000 fc6a 	bl	80034fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002c28:	bf00      	nop
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	20001230 	.word	0x20001230
 8002c30:	40004800 	.word	0x40004800

08002c34 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002c38:	bf00      	nop
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
	...

08002c44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b08c      	sub	sp, #48	; 0x30
 8002c48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c4a:	f107 031c 	add.w	r3, r7, #28
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	605a      	str	r2, [r3, #4]
 8002c54:	609a      	str	r2, [r3, #8]
 8002c56:	60da      	str	r2, [r3, #12]
 8002c58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c5a:	4b9e      	ldr	r3, [pc, #632]	; (8002ed4 <MX_GPIO_Init+0x290>)
 8002c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c5e:	4a9d      	ldr	r2, [pc, #628]	; (8002ed4 <MX_GPIO_Init+0x290>)
 8002c60:	f043 0310 	orr.w	r3, r3, #16
 8002c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c66:	4b9b      	ldr	r3, [pc, #620]	; (8002ed4 <MX_GPIO_Init+0x290>)
 8002c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c6a:	f003 0310 	and.w	r3, r3, #16
 8002c6e:	61bb      	str	r3, [r7, #24]
 8002c70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c72:	4b98      	ldr	r3, [pc, #608]	; (8002ed4 <MX_GPIO_Init+0x290>)
 8002c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c76:	4a97      	ldr	r2, [pc, #604]	; (8002ed4 <MX_GPIO_Init+0x290>)
 8002c78:	f043 0304 	orr.w	r3, r3, #4
 8002c7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c7e:	4b95      	ldr	r3, [pc, #596]	; (8002ed4 <MX_GPIO_Init+0x290>)
 8002c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c82:	f003 0304 	and.w	r3, r3, #4
 8002c86:	617b      	str	r3, [r7, #20]
 8002c88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c8a:	4b92      	ldr	r3, [pc, #584]	; (8002ed4 <MX_GPIO_Init+0x290>)
 8002c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c8e:	4a91      	ldr	r2, [pc, #580]	; (8002ed4 <MX_GPIO_Init+0x290>)
 8002c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c96:	4b8f      	ldr	r3, [pc, #572]	; (8002ed4 <MX_GPIO_Init+0x290>)
 8002c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9e:	613b      	str	r3, [r7, #16]
 8002ca0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca2:	4b8c      	ldr	r3, [pc, #560]	; (8002ed4 <MX_GPIO_Init+0x290>)
 8002ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca6:	4a8b      	ldr	r2, [pc, #556]	; (8002ed4 <MX_GPIO_Init+0x290>)
 8002ca8:	f043 0301 	orr.w	r3, r3, #1
 8002cac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cae:	4b89      	ldr	r3, [pc, #548]	; (8002ed4 <MX_GPIO_Init+0x290>)
 8002cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	60fb      	str	r3, [r7, #12]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cba:	4b86      	ldr	r3, [pc, #536]	; (8002ed4 <MX_GPIO_Init+0x290>)
 8002cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cbe:	4a85      	ldr	r2, [pc, #532]	; (8002ed4 <MX_GPIO_Init+0x290>)
 8002cc0:	f043 0302 	orr.w	r3, r3, #2
 8002cc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cc6:	4b83      	ldr	r3, [pc, #524]	; (8002ed4 <MX_GPIO_Init+0x290>)
 8002cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	60bb      	str	r3, [r7, #8]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cd2:	4b80      	ldr	r3, [pc, #512]	; (8002ed4 <MX_GPIO_Init+0x290>)
 8002cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd6:	4a7f      	ldr	r2, [pc, #508]	; (8002ed4 <MX_GPIO_Init+0x290>)
 8002cd8:	f043 0308 	orr.w	r3, r3, #8
 8002cdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cde:	4b7d      	ldr	r3, [pc, #500]	; (8002ed4 <MX_GPIO_Init+0x290>)
 8002ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce2:	f003 0308 	and.w	r3, r3, #8
 8002ce6:	607b      	str	r3, [r7, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8002cea:	2200      	movs	r2, #0
 8002cec:	f240 1105 	movw	r1, #261	; 0x105
 8002cf0:	4879      	ldr	r0, [pc, #484]	; (8002ed8 <MX_GPIO_Init+0x294>)
 8002cf2:	f002 fc77 	bl	80055e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f248 111c 	movw	r1, #33052	; 0x811c
 8002cfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d00:	f002 fc70 	bl	80055e4 <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8002d04:	2200      	movs	r2, #0
 8002d06:	f24f 0134 	movw	r1, #61492	; 0xf034
 8002d0a:	4874      	ldr	r0, [pc, #464]	; (8002edc <MX_GPIO_Init+0x298>)
 8002d0c:	f002 fc6a 	bl	80055e4 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8002d10:	2200      	movs	r2, #0
 8002d12:	f242 0183 	movw	r1, #8323	; 0x2083
 8002d16:	4872      	ldr	r0, [pc, #456]	; (8002ee0 <MX_GPIO_Init+0x29c>)
 8002d18:	f002 fc64 	bl	80055e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8002d22:	4870      	ldr	r0, [pc, #448]	; (8002ee4 <MX_GPIO_Init+0x2a0>)
 8002d24:	f002 fc5e 	bl	80055e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8002d28:	f240 1305 	movw	r3, #261	; 0x105
 8002d2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d32:	2300      	movs	r3, #0
 8002d34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d36:	2300      	movs	r3, #0
 8002d38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d3a:	f107 031c 	add.w	r3, r7, #28
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4865      	ldr	r0, [pc, #404]	; (8002ed8 <MX_GPIO_Init+0x294>)
 8002d42:	f002 fabd 	bl	80052c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8002d46:	237a      	movs	r3, #122	; 0x7a
 8002d48:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d4a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002d4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d50:	2300      	movs	r3, #0
 8002d52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d54:	f107 031c 	add.w	r3, r7, #28
 8002d58:	4619      	mov	r1, r3
 8002d5a:	485f      	ldr	r0, [pc, #380]	; (8002ed8 <MX_GPIO_Init+0x294>)
 8002d5c:	f002 fab0 	bl	80052c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8002d60:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8002d64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d66:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002d6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d70:	f107 031c 	add.w	r3, r7, #28
 8002d74:	4619      	mov	r1, r3
 8002d76:	485b      	ldr	r0, [pc, #364]	; (8002ee4 <MX_GPIO_Init+0x2a0>)
 8002d78:	f002 faa2 	bl	80052c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8002d7c:	f248 131c 	movw	r3, #33052	; 0x811c
 8002d80:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d82:	2301      	movs	r3, #1
 8002d84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d86:	2300      	movs	r3, #0
 8002d88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d8e:	f107 031c 	add.w	r3, r7, #28
 8002d92:	4619      	mov	r1, r3
 8002d94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d98:	f002 fa92 	bl	80052c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002da0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002da4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da6:	2300      	movs	r3, #0
 8002da8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8002daa:	f107 031c 	add.w	r3, r7, #28
 8002dae:	4619      	mov	r1, r3
 8002db0:	484a      	ldr	r0, [pc, #296]	; (8002edc <MX_GPIO_Init+0x298>)
 8002db2:	f002 fa85 	bl	80052c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8002db6:	2302      	movs	r3, #2
 8002db8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dba:	2302      	movs	r3, #2
 8002dbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8002dca:	f107 031c 	add.w	r3, r7, #28
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4842      	ldr	r0, [pc, #264]	; (8002edc <MX_GPIO_Init+0x298>)
 8002dd2:	f002 fa75 	bl	80052c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 8002dd6:	f24b 0334 	movw	r3, #45108	; 0xb034
 8002dda:	61fb      	str	r3, [r7, #28]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de0:	2300      	movs	r3, #0
 8002de2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de4:	2300      	movs	r3, #0
 8002de6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002de8:	f107 031c 	add.w	r3, r7, #28
 8002dec:	4619      	mov	r1, r3
 8002dee:	483b      	ldr	r0, [pc, #236]	; (8002edc <MX_GPIO_Init+0x298>)
 8002df0:	f002 fa66 	bl	80052c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8002df4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002df8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e02:	2303      	movs	r3, #3
 8002e04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8002e06:	f107 031c 	add.w	r3, r7, #28
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	4833      	ldr	r0, [pc, #204]	; (8002edc <MX_GPIO_Init+0x298>)
 8002e0e:	f002 fa57 	bl	80052c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8002e12:	f64d 4304 	movw	r3, #56324	; 0xdc04
 8002e16:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e18:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002e1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e22:	f107 031c 	add.w	r3, r7, #28
 8002e26:	4619      	mov	r1, r3
 8002e28:	482d      	ldr	r0, [pc, #180]	; (8002ee0 <MX_GPIO_Init+0x29c>)
 8002e2a:	f002 fa49 	bl	80052c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8002e2e:	f242 0383 	movw	r3, #8323	; 0x2083
 8002e32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e34:	2301      	movs	r3, #1
 8002e36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e40:	f107 031c 	add.w	r3, r7, #28
 8002e44:	4619      	mov	r1, r3
 8002e46:	4826      	ldr	r0, [pc, #152]	; (8002ee0 <MX_GPIO_Init+0x29c>)
 8002e48:	f002 fa3a 	bl	80052c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8002e4c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002e50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e52:	2301      	movs	r3, #1
 8002e54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e5e:	f107 031c 	add.w	r3, r7, #28
 8002e62:	4619      	mov	r1, r3
 8002e64:	481f      	ldr	r0, [pc, #124]	; (8002ee4 <MX_GPIO_Init+0x2a0>)
 8002e66:	f002 fa2b 	bl	80052c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8002e6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e70:	2300      	movs	r3, #0
 8002e72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e74:	2300      	movs	r3, #0
 8002e76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002e78:	f107 031c 	add.w	r3, r7, #28
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e82:	f002 fa1d 	bl	80052c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8002e86:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002e8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e90:	2300      	movs	r3, #0
 8002e92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e94:	2303      	movs	r3, #3
 8002e96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002e98:	230a      	movs	r3, #10
 8002e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e9c:	f107 031c 	add.w	r3, r7, #28
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ea6:	f002 fa0b 	bl	80052c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002eaa:	2200      	movs	r2, #0
 8002eac:	2100      	movs	r1, #0
 8002eae:	2017      	movs	r0, #23
 8002eb0:	f002 f806 	bl	8004ec0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002eb4:	2017      	movs	r0, #23
 8002eb6:	f002 f81f 	bl	8004ef8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8002eba:	2200      	movs	r2, #0
 8002ebc:	2106      	movs	r1, #6
 8002ebe:	2028      	movs	r0, #40	; 0x28
 8002ec0:	f001 fffe 	bl	8004ec0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002ec4:	2028      	movs	r0, #40	; 0x28
 8002ec6:	f002 f817 	bl	8004ef8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002eca:	bf00      	nop
 8002ecc:	3730      	adds	r7, #48	; 0x30
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	48001000 	.word	0x48001000
 8002edc:	48000400 	.word	0x48000400
 8002ee0:	48000c00 	.word	0x48000c00
 8002ee4:	48000800 	.word	0x48000800

08002ee8 <MyLED2_init>:

/* USER CODE BEGIN 4 */
static void MyLED2_init(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  //Configure the MODE register
  //01:general purpose output
  //MODER Bit 29 and Bit 28
  //Reset both bits 28 and 29 to 0
	GPIOB->MODER &=~(0x3 <<28);
 8002eec:	4b16      	ldr	r3, [pc, #88]	; (8002f48 <MyLED2_init+0x60>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a15      	ldr	r2, [pc, #84]	; (8002f48 <MyLED2_init+0x60>)
 8002ef2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002ef6:	6013      	str	r3, [r2, #0]
  //Set the values to 1
	GPIOB->MODER |=(0x1 <<28);
 8002ef8:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <MyLED2_init+0x60>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a12      	ldr	r2, [pc, #72]	; (8002f48 <MyLED2_init+0x60>)
 8002efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f02:	6013      	str	r3, [r2, #0]

  //Configure the output type register
  //0:Push-Pull
  //OTYPER Bit 14 to 0
	GPIOB->OTYPER &=~(1<<14);
 8002f04:	4b10      	ldr	r3, [pc, #64]	; (8002f48 <MyLED2_init+0x60>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	4a0f      	ldr	r2, [pc, #60]	; (8002f48 <MyLED2_init+0x60>)
 8002f0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f0e:	6053      	str	r3, [r2, #4]

  //Configure the speed register
  //11:Very high speed
  //OSPEEDR Bit 29 and Bit 28
  //Reset both bits 28 and 29 to 0
	GPIOB->OSPEEDR &=~(0x3 <<28);
 8002f10:	4b0d      	ldr	r3, [pc, #52]	; (8002f48 <MyLED2_init+0x60>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	4a0c      	ldr	r2, [pc, #48]	; (8002f48 <MyLED2_init+0x60>)
 8002f16:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002f1a:	6093      	str	r3, [r2, #8]
  //Set the values to 1
	GPIOB->OSPEEDR |=(0x1 <<28);
 8002f1c:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <MyLED2_init+0x60>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	4a09      	ldr	r2, [pc, #36]	; (8002f48 <MyLED2_init+0x60>)
 8002f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f26:	6093      	str	r3, [r2, #8]

  //Configure pull-up/pull-down register
  //00: no pull-up/pull-down
  //PUPDR Bit 29 and Bit 28
  //Reset both bits 28 and 29 to 0
	GPIOB->PUPDR &=~(0x3 <<28);
 8002f28:	4b07      	ldr	r3, [pc, #28]	; (8002f48 <MyLED2_init+0x60>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	4a06      	ldr	r2, [pc, #24]	; (8002f48 <MyLED2_init+0x60>)
 8002f2e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002f32:	60d3      	str	r3, [r2, #12]
  //Set the values to 0
	GPIOB->PUPDR |=(0x0 <<28);
 8002f34:	4b04      	ldr	r3, [pc, #16]	; (8002f48 <MyLED2_init+0x60>)
 8002f36:	4a04      	ldr	r2, [pc, #16]	; (8002f48 <MyLED2_init+0x60>)
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	60d3      	str	r3, [r2, #12]

}
 8002f3c:	bf00      	nop
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	48000400 	.word	0x48000400

08002f4c <MyButton_init>:

static void MyButton_init(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
  //Button is Port C, Pin 13, EXTI13
  //Configure SYSCLK
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f52:	4b1d      	ldr	r3, [pc, #116]	; (8002fc8 <MyButton_init+0x7c>)
 8002f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f56:	4a1c      	ldr	r2, [pc, #112]	; (8002fc8 <MyButton_init+0x7c>)
 8002f58:	f043 0301 	orr.w	r3, r3, #1
 8002f5c:	6613      	str	r3, [r2, #96]	; 0x60
 8002f5e:	4b1a      	ldr	r3, [pc, #104]	; (8002fc8 <MyButton_init+0x7c>)
 8002f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	607b      	str	r3, [r7, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]

  //Configure the MODE register
  //00:input mode
  //MODER Bit 27 and Bit 26
  //Reset both bits 27 and 26 to 0
	GPIOC->MODER &=~(0x3 <<26);
 8002f6a:	4b18      	ldr	r3, [pc, #96]	; (8002fcc <MyButton_init+0x80>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a17      	ldr	r2, [pc, #92]	; (8002fcc <MyButton_init+0x80>)
 8002f70:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002f74:	6013      	str	r3, [r2, #0]

  //Configure pull-up/pull-down register
  //00: no pull-up/pull-down
  //PUPDR Bit 27 and Bit 26
  //Reset both bits 27 and 26 to 0
	GPIOC->PUPDR &=~(0x3 <<26);
 8002f76:	4b15      	ldr	r3, [pc, #84]	; (8002fcc <MyButton_init+0x80>)
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	4a14      	ldr	r2, [pc, #80]	; (8002fcc <MyButton_init+0x80>)
 8002f7c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002f80:	60d3      	str	r3, [r2, #12]
  //Set the values to 0
	GPIOC->PUPDR |=(0x0 <<26);
 8002f82:	4b12      	ldr	r3, [pc, #72]	; (8002fcc <MyButton_init+0x80>)
 8002f84:	4a11      	ldr	r2, [pc, #68]	; (8002fcc <MyButton_init+0x80>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	60d3      	str	r3, [r2, #12]

  //sysconfig Register
  //EXTI13, Choose port C
  //Configure the External Interrupt Configuration Register
  //SYSCFG_EXTICR4 :only 2nd bit in EXTICR[3] is set to 1
	SYSCFG->EXTICR[3]|=(0x1<<5);
 8002f8a:	4b11      	ldr	r3, [pc, #68]	; (8002fd0 <MyButton_init+0x84>)
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	4a10      	ldr	r2, [pc, #64]	; (8002fd0 <MyButton_init+0x84>)
 8002f90:	f043 0320 	orr.w	r3, r3, #32
 8002f94:	6153      	str	r3, [r2, #20]

  //Configure the falling trigger selection register
  //EXTI_FTSR
	EXTI->FTSR1 |=(0x1 <<13) ;
 8002f96:	4b0f      	ldr	r3, [pc, #60]	; (8002fd4 <MyButton_init+0x88>)
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	4a0e      	ldr	r2, [pc, #56]	; (8002fd4 <MyButton_init+0x88>)
 8002f9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002fa0:	60d3      	str	r3, [r2, #12]

  //Configure the Interrupt Mask Register
  //EXTI_IMR
	EXTI->IMR1 |=(0x1 <<13);
 8002fa2:	4b0c      	ldr	r3, [pc, #48]	; (8002fd4 <MyButton_init+0x88>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a0b      	ldr	r2, [pc, #44]	; (8002fd4 <MyButton_init+0x88>)
 8002fa8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002fac:	6013      	str	r3, [r2, #0]

  //Configure NVIC Set Enable Register
  //NVIC_ISER
  //NVIC->ISER[] Register no. & location based on position
  //NVIC->ISER[(((uint32_t)EXTI15_10_IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)EXTI15_10_IRQn) & 0x1FUL));
	NVIC->ISER[1] |= (0x1 << 8);
 8002fae:	4b0a      	ldr	r3, [pc, #40]	; (8002fd8 <MyButton_init+0x8c>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	4a09      	ldr	r2, [pc, #36]	; (8002fd8 <MyButton_init+0x8c>)
 8002fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb8:	6053      	str	r3, [r2, #4]
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	48000800 	.word	0x48000800
 8002fd0:	40010000 	.word	0x40010000
 8002fd4:	40010400 	.word	0x40010400
 8002fd8:	e000e100 	.word	0xe000e100

08002fdc <MyUART1_init>:

static void MyUART1_init(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
	//configure UART1 manually excluding Baud Rate Register
	//configuring M bits-Bits 12,28 to 0,0 for 1 start bit, 8 data bits, n stop bits in USART_CR1 register
	huart1.Instance->CR1 &=~(0x1 <<12);
 8002fe0:	4b22      	ldr	r3, [pc, #136]	; (800306c <MyUART1_init+0x90>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	4b21      	ldr	r3, [pc, #132]	; (800306c <MyUART1_init+0x90>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002fee:	601a      	str	r2, [r3, #0]
	huart1.Instance->CR1 &=~(0x1 <<28);
 8002ff0:	4b1e      	ldr	r3, [pc, #120]	; (800306c <MyUART1_init+0x90>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	4b1d      	ldr	r3, [pc, #116]	; (800306c <MyUART1_init+0x90>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002ffe:	601a      	str	r2, [r3, #0]
	//configuring Bit 15 to 1 for oversampling by 8 in USART_CR1 register
	huart1.Instance->CR1 |=(0x1 <<15);
 8003000:	4b1a      	ldr	r3, [pc, #104]	; (800306c <MyUART1_init+0x90>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	4b19      	ldr	r3, [pc, #100]	; (800306c <MyUART1_init+0x90>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800300e:	601a      	str	r2, [r3, #0]
	//configuring Bit 10 to 0 to disable parity control in USART_CR1 register
	huart1.Instance->CR1 &=~(0x1 <<10);
 8003010:	4b16      	ldr	r3, [pc, #88]	; (800306c <MyUART1_init+0x90>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	4b15      	ldr	r3, [pc, #84]	; (800306c <MyUART1_init+0x90>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800301e:	601a      	str	r2, [r3, #0]
	//configuring Bit 0 to 1 to enable UART in USART_CR1 register
	huart1.Instance->CR1 |=(0x1 <<0);
 8003020:	4b12      	ldr	r3, [pc, #72]	; (800306c <MyUART1_init+0x90>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	4b11      	ldr	r3, [pc, #68]	; (800306c <MyUART1_init+0x90>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0201 	orr.w	r2, r2, #1
 800302e:	601a      	str	r2, [r3, #0]
	//configuring Bit 3 to 1 to enable Transmitter in USART_CR1 register
	huart1.Instance->CR1 |=(0x1 <<3);
 8003030:	4b0e      	ldr	r3, [pc, #56]	; (800306c <MyUART1_init+0x90>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	4b0d      	ldr	r3, [pc, #52]	; (800306c <MyUART1_init+0x90>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f042 0208 	orr.w	r2, r2, #8
 800303e:	601a      	str	r2, [r3, #0]
	//configuring Bit 2 to 1 to enable Receiver in USART_CR1 register
	huart1.Instance->CR1 |=(0x1 <<2);
 8003040:	4b0a      	ldr	r3, [pc, #40]	; (800306c <MyUART1_init+0x90>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	4b09      	ldr	r3, [pc, #36]	; (800306c <MyUART1_init+0x90>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f042 0204 	orr.w	r2, r2, #4
 800304e:	601a      	str	r2, [r3, #0]
	//configuring Bits 12,13 to 0,0 for 1 stop bit in USART_CR2 register
	huart1.Instance->CR2 &=(0x3 <<12);
 8003050:	4b06      	ldr	r3, [pc, #24]	; (800306c <MyUART1_init+0x90>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	4b05      	ldr	r3, [pc, #20]	; (800306c <MyUART1_init+0x90>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 800305e:	605a      	str	r2, [r3, #4]

}
 8003060:	bf00      	nop
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	20001108 	.word	0x20001108

08003070 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af02      	add	r7, sp, #8
 8003076:	4603      	mov	r3, r0
 8003078:	80fb      	strh	r3, [r7, #6]
	//activate the message transmission once a button is pushed
	xTaskNotifyFromISR(pUART_SendMsg, 0, eNoAction, NULL);
 800307a:	4b07      	ldr	r3, [pc, #28]	; (8003098 <HAL_GPIO_EXTI_Callback+0x28>)
 800307c:	6818      	ldr	r0, [r3, #0]
 800307e:	2300      	movs	r3, #0
 8003080:	9301      	str	r3, [sp, #4]
 8003082:	2300      	movs	r3, #0
 8003084:	9300      	str	r3, [sp, #0]
 8003086:	2300      	movs	r3, #0
 8003088:	2200      	movs	r2, #0
 800308a:	2100      	movs	r1, #0
 800308c:	f7fe fbb2 	bl	80017f4 <xTaskGenericNotifyFromISR>
}
 8003090:	bf00      	nop
 8003092:	3708      	adds	r7, #8
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	20000dc4 	.word	0x20000dc4

0800309c <SOS_Transmit>:
static void SOS_Transmit(void *parameter)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  repeat = 2;
 80030a4:	4b36      	ldr	r3, [pc, #216]	; (8003180 <SOS_Transmit+0xe4>)
 80030a6:	2202      	movs	r2, #2
 80030a8:	701a      	strb	r2, [r3, #0]
	      //while(repeat>0)
	      while(1)
		  {

	        //sending 's'
	        for(int i=0; i<3; i++)
 80030aa:	2300      	movs	r3, #0
 80030ac:	613b      	str	r3, [r7, #16]
 80030ae:	e016      	b.n	80030de <SOS_Transmit+0x42>
	           {
		        //turning up the led for a dot
		        //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET); or
		        //write a 1 to Bit 14 of GPIOB ODR(output data register)
		          GPIOB->ODR |=(1<<14);
 80030b0:	4b34      	ldr	r3, [pc, #208]	; (8003184 <SOS_Transmit+0xe8>)
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	4a33      	ldr	r2, [pc, #204]	; (8003184 <SOS_Transmit+0xe8>)
 80030b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030ba:	6153      	str	r3, [r2, #20]
		          //HAL_Delay(300);
		          vTaskDelay(300);
 80030bc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80030c0:	f7fd fe6a 	bl	8000d98 <vTaskDelay>

	            //turning the led off for spacing
		        //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET); or
		        //write a 0 to Bit 14 of GPIOB ODR(output data register)
		          GPIOB->ODR &=~(1<<14);
 80030c4:	4b2f      	ldr	r3, [pc, #188]	; (8003184 <SOS_Transmit+0xe8>)
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	4a2e      	ldr	r2, [pc, #184]	; (8003184 <SOS_Transmit+0xe8>)
 80030ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030ce:	6153      	str	r3, [r2, #20]
		          vTaskDelay(300);
 80030d0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80030d4:	f7fd fe60 	bl	8000d98 <vTaskDelay>
	        for(int i=0; i<3; i++)
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	3301      	adds	r3, #1
 80030dc:	613b      	str	r3, [r7, #16]
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	dde5      	ble.n	80030b0 <SOS_Transmit+0x14>
	            }
	         //3 time units between characters
	         // HAL_Delay(300*2);
	         vTaskDelay(300*2);
 80030e4:	f44f 7016 	mov.w	r0, #600	; 0x258
 80030e8:	f7fd fe56 	bl	8000d98 <vTaskDelay>

	         //sending 'o'
	         for(int i=0; i<3; i++)
 80030ec:	2300      	movs	r3, #0
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	e016      	b.n	8003120 <SOS_Transmit+0x84>
	 	       {
	 		    //turning up the led for a dash
	 		    //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
		        //write a 1 to Bit 14 of GPIOB ODR(output data register)
		  	    GPIOB->ODR |=(1<<14);
 80030f2:	4b24      	ldr	r3, [pc, #144]	; (8003184 <SOS_Transmit+0xe8>)
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	4a23      	ldr	r2, [pc, #140]	; (8003184 <SOS_Transmit+0xe8>)
 80030f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030fc:	6153      	str	r3, [r2, #20]
	 		    //HAL_Delay(300*3);
		  	    vTaskDelay(300*3);
 80030fe:	f44f 7061 	mov.w	r0, #900	; 0x384
 8003102:	f7fd fe49 	bl	8000d98 <vTaskDelay>
	 	        //turning the led off for spacing
	 		    //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
	 		    //write a 0 to Bit 14 of GPIOB ODR(output data register)
	 		    GPIOB->ODR &=~(1<<14);
 8003106:	4b1f      	ldr	r3, [pc, #124]	; (8003184 <SOS_Transmit+0xe8>)
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	4a1e      	ldr	r2, [pc, #120]	; (8003184 <SOS_Transmit+0xe8>)
 800310c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003110:	6153      	str	r3, [r2, #20]
	 		    //HAL_Delay(300);
	 		    vTaskDelay(300);
 8003112:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003116:	f7fd fe3f 	bl	8000d98 <vTaskDelay>
	         for(int i=0; i<3; i++)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	3301      	adds	r3, #1
 800311e:	60fb      	str	r3, [r7, #12]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2b02      	cmp	r3, #2
 8003124:	dde5      	ble.n	80030f2 <SOS_Transmit+0x56>
	 	       }
	 	     //3 time units between characters
	         //HAL_Delay(300*2);
	         vTaskDelay(300*2);
 8003126:	f44f 7016 	mov.w	r0, #600	; 0x258
 800312a:	f7fd fe35 	bl	8000d98 <vTaskDelay>
	         //sending 's'
	         for(int i=0; i<3; i++)
 800312e:	2300      	movs	r3, #0
 8003130:	617b      	str	r3, [r7, #20]
 8003132:	e016      	b.n	8003162 <SOS_Transmit+0xc6>
	 		  {
	 			  //turning up the led for a dot
	 			  //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
		         //write a 1 to Bit 14 of GPIOB ODR(output data register)
		  		  GPIOB->ODR |=(1<<14);
 8003134:	4b13      	ldr	r3, [pc, #76]	; (8003184 <SOS_Transmit+0xe8>)
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	4a12      	ldr	r2, [pc, #72]	; (8003184 <SOS_Transmit+0xe8>)
 800313a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800313e:	6153      	str	r3, [r2, #20]
		       // HAL_Delay(300);
		  		vTaskDelay(300);
 8003140:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003144:	f7fd fe28 	bl	8000d98 <vTaskDelay>
	 		      //turning the led off for spacing
	 			  //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
		          //write a 0 to Bit 14 of GPIOB ODR(output data register)
		          GPIOB->ODR &=~(1<<14);
 8003148:	4b0e      	ldr	r3, [pc, #56]	; (8003184 <SOS_Transmit+0xe8>)
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	4a0d      	ldr	r2, [pc, #52]	; (8003184 <SOS_Transmit+0xe8>)
 800314e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003152:	6153      	str	r3, [r2, #20]
		        //HAL_Delay(300);
		          vTaskDelay(300);
 8003154:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003158:	f7fd fe1e 	bl	8000d98 <vTaskDelay>
	         for(int i=0; i<3; i++)
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	3301      	adds	r3, #1
 8003160:	617b      	str	r3, [r7, #20]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	2b02      	cmp	r3, #2
 8003166:	dde5      	ble.n	8003134 <SOS_Transmit+0x98>
	 		  }
	         //7 time units between words
	 	     // HAL_Delay(300*6);
	         vTaskDelay(300*6);
 8003168:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 800316c:	f7fd fe14 	bl	8000d98 <vTaskDelay>
             repeat--;
 8003170:	4b03      	ldr	r3, [pc, #12]	; (8003180 <SOS_Transmit+0xe4>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	3b01      	subs	r3, #1
 8003176:	b2da      	uxtb	r2, r3
 8003178:	4b01      	ldr	r3, [pc, #4]	; (8003180 <SOS_Transmit+0xe4>)
 800317a:	701a      	strb	r2, [r3, #0]
	        for(int i=0; i<3; i++)
 800317c:	e795      	b.n	80030aa <SOS_Transmit+0xe>
 800317e:	bf00      	nop
 8003180:	20000dc8 	.word	0x20000dc8
 8003184:	48000400 	.word	0x48000400

08003188 <MyTSENSOR_init>:
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
	}
}

static void MyTSENSOR_init()
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af02      	add	r7, sp, #8
	//HAL_I2C_Mem_Read(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout);
	//HAL_I2C_Mem_Read(&hi2c2, 0xBF, 0x20, 0x1U, &tmp,1, 1000);

	//Interrupt based API
	//HAL_I2C_Mem_Read_IT(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size)
	HAL_I2C_Mem_Read_IT(&hi2c2, 0xBF, 0x20, 0x1U, &tmp,1);
 800318e:	2301      	movs	r3, #1
 8003190:	9301      	str	r3, [sp, #4]
 8003192:	1dfb      	adds	r3, r7, #7
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	2301      	movs	r3, #1
 8003198:	2220      	movs	r2, #32
 800319a:	21bf      	movs	r1, #191	; 0xbf
 800319c:	4817      	ldr	r0, [pc, #92]	; (80031fc <MyTSENSOR_init+0x74>)
 800319e:	f002 fb77 	bl	8005890 <HAL_I2C_Mem_Read_IT>

	//while(readComplete == 0);
	//readComplete = 0;

	vTaskSuspend(pTempSensorRead);
 80031a2:	4b17      	ldr	r3, [pc, #92]	; (8003200 <MyTSENSOR_init+0x78>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fd fe2a 	bl	8000e00 <vTaskSuspend>

	//configure BDU:1 //BDU: Bit 2
	tmp |= (1<<0x02);
 80031ac:	79fb      	ldrb	r3, [r7, #7]
 80031ae:	f043 0304 	orr.w	r3, r3, #4
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	71fb      	strb	r3, [r7, #7]

	//Set ODR to 1Hz //ODR:01 //ODR:Bit 1 and 0
	tmp &= ~ 0x03;
 80031b6:	79fb      	ldrb	r3, [r7, #7]
 80031b8:	f023 0303 	bic.w	r3, r3, #3
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	71fb      	strb	r3, [r7, #7]
	tmp |= (1<<0x00);
 80031c0:	79fb      	ldrb	r3, [r7, #7]
 80031c2:	f043 0301 	orr.w	r3, r3, #1
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	71fb      	strb	r3, [r7, #7]

	//Activate the device PD:1
	tmp |= (1<<0x07);
 80031ca:	79fb      	ldrb	r3, [r7, #7]
 80031cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	71fb      	strb	r3, [r7, #7]
	//HAL_I2C_Mem_Write(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout);
	//HAL_I2C_Mem_Write(&hi2c2, 0xBF, 0x20, 0x1U, &tmp,1, 1000);

	//Interrupt based API
	//HAL_I2C_Mem_Write_IT(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size)
	HAL_I2C_Mem_Write_IT(&hi2c2, 0xBF, 0x20, 0x1U, &tmp,1);
 80031d4:	2301      	movs	r3, #1
 80031d6:	9301      	str	r3, [sp, #4]
 80031d8:	1dfb      	adds	r3, r7, #7
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	2301      	movs	r3, #1
 80031de:	2220      	movs	r2, #32
 80031e0:	21bf      	movs	r1, #191	; 0xbf
 80031e2:	4806      	ldr	r0, [pc, #24]	; (80031fc <MyTSENSOR_init+0x74>)
 80031e4:	f002 faca 	bl	800577c <HAL_I2C_Mem_Write_IT>

	//while(writeComplete == 0);
	//writeComplete = 0;

	vTaskSuspend(pTempSensorRead);
 80031e8:	4b05      	ldr	r3, [pc, #20]	; (8003200 <MyTSENSOR_init+0x78>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7fd fe07 	bl	8000e00 <vTaskSuspend>
}
 80031f2:	bf00      	nop
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	20000f08 	.word	0x20000f08
 8003200:	20000dcc 	.word	0x20000dcc

08003204 <TempSensorRead>:

static void TempSensorRead(void *parameter)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b0a2      	sub	sp, #136	; 0x88
 8003208:	af02      	add	r7, sp, #8
 800320a:	6078      	str	r0, [r7, #4]
  char tempReading[100];
  float tempValue =0;
 800320c:	f04f 0300 	mov.w	r3, #0
 8003210:	67fb      	str	r3, [r7, #124]	; 0x7c

  MyTSENSOR_init();
 8003212:	f7ff ffb9 	bl	8003188 <MyTSENSOR_init>

  while(1)
  {
	  //tempValue = BSP_TSENSOR_ReadTemp();
	  tempValue = MyTSENSOR_ReadTemp();
 8003216:	f000 f843 	bl	80032a0 <MyTSENSOR_ReadTemp>
 800321a:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
	  int tempValueInt=tempValue;
 800321e:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8003222:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003226:	ee17 3a90 	vmov	r3, s15
 800322a:	67bb      	str	r3, [r7, #120]	; 0x78
	  float tempValueFrac=0;
 800322c:	f04f 0300 	mov.w	r3, #0
 8003230:	677b      	str	r3, [r7, #116]	; 0x74

	  tempValueFrac = tempValue - tempValueInt;
 8003232:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003234:	ee07 3a90 	vmov	s15, r3
 8003238:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800323c:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8003240:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003244:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	  int tempValueFrac2digits = trunc(tempValueFrac * 100);
 8003248:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800324c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003294 <TempSensorRead+0x90>
 8003250:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003254:	ee17 0a90 	vmov	r0, s15
 8003258:	f7fd f98e 	bl	8000578 <__aeabi_f2d>
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	ec43 2b10 	vmov	d0, r2, r3
 8003264:	f008 fd9a 	bl	800bd9c <trunc>
 8003268:	ec53 2b10 	vmov	r2, r3, d0
 800326c:	4610      	mov	r0, r2
 800326e:	4619      	mov	r1, r3
 8003270:	f7fd f9da 	bl	8000628 <__aeabi_d2iz>
 8003274:	4603      	mov	r3, r0
 8003276:	673b      	str	r3, [r7, #112]	; 0x70

	  //snprintf(tempReading, 100, "\r\n TEMPERATURE = %1d.%0.2d \n\r", tempValueInt, tempValueFrac2digits);
	  snprintf(TxBuf, 100, "%1d.%02d\r\n", tempValueInt, tempValueFrac2digits);
 8003278:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800327e:	4a06      	ldr	r2, [pc, #24]	; (8003298 <TempSensorRead+0x94>)
 8003280:	2164      	movs	r1, #100	; 0x64
 8003282:	4806      	ldr	r0, [pc, #24]	; (800329c <TempSensorRead+0x98>)
 8003284:	f008 f8d2 	bl	800b42c <sniprintf>
      //HAL_UART_Transmit(&huart1, (uint8_t *)tempReading, strlen(tempReading), 1000);

      vTaskDelay(5000);
 8003288:	f241 3088 	movw	r0, #5000	; 0x1388
 800328c:	f7fd fd84 	bl	8000d98 <vTaskDelay>
  {
 8003290:	e7c1      	b.n	8003216 <TempSensorRead+0x12>
 8003292:	bf00      	nop
 8003294:	42c80000 	.word	0x42c80000
 8003298:	0800be74 	.word	0x0800be74
 800329c:	20000df4 	.word	0x20000df4

080032a0 <MyTSENSOR_ReadTemp>:
  }
}

static float MyTSENSOR_ReadTemp()
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b08a      	sub	sp, #40	; 0x28
 80032a4:	af02      	add	r7, sp, #8

	  //SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
	  //HTS221_T0_DEGC_X8: Address 32
	  //HAL_I2C_Mem_Read(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout);
	  //HAL_I2C_Mem_Read(&hi2c2, 0xBF, 0x32 | 0x80, 0x1U, buffer, 2, 1000);
	  HAL_I2C_Mem_Read_IT(&hi2c2, 0xBF, 0x32 | 0x80, 0x1U, buffer, 2);
 80032a6:	2302      	movs	r3, #2
 80032a8:	9301      	str	r3, [sp, #4]
 80032aa:	f107 0308 	add.w	r3, r7, #8
 80032ae:	9300      	str	r3, [sp, #0]
 80032b0:	2301      	movs	r3, #1
 80032b2:	22b2      	movs	r2, #178	; 0xb2
 80032b4:	21bf      	movs	r1, #191	; 0xbf
 80032b6:	484c      	ldr	r0, [pc, #304]	; (80033e8 <MyTSENSOR_ReadTemp+0x148>)
 80032b8:	f002 faea 	bl	8005890 <HAL_I2C_Mem_Read_IT>
	  //while(readComplete == 0);
	  //readComplete = 0;

	  vTaskSuspend(pTempSensorRead);
 80032bc:	4b4b      	ldr	r3, [pc, #300]	; (80033ec <MyTSENSOR_ReadTemp+0x14c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fd fd9d 	bl	8000e00 <vTaskSuspend>

	  //tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
	  //HTS221_T0_T1_DEGC_H2: Address 0x35
	  //HAL_I2C_Mem_Read(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout);
	  //HAL_I2C_Mem_Read(&hi2c2, 0xBF, 0x35, 0x1U, &tmp,1, 1000);
	  HAL_I2C_Mem_Read_IT(&hi2c2, 0xBF, 0x35, 0x1U, &tmp,1);
 80032c6:	2301      	movs	r3, #1
 80032c8:	9301      	str	r3, [sp, #4]
 80032ca:	1dfb      	adds	r3, r7, #7
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	2301      	movs	r3, #1
 80032d0:	2235      	movs	r2, #53	; 0x35
 80032d2:	21bf      	movs	r1, #191	; 0xbf
 80032d4:	4844      	ldr	r0, [pc, #272]	; (80033e8 <MyTSENSOR_ReadTemp+0x148>)
 80032d6:	f002 fadb 	bl	8005890 <HAL_I2C_Mem_Read_IT>
	  //while(readComplete == 0);
	  //readComplete = 0;

	  vTaskSuspend(pTempSensorRead);
 80032da:	4b44      	ldr	r3, [pc, #272]	; (80033ec <MyTSENSOR_ReadTemp+0x14c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fd fd8e 	bl	8000e00 <vTaskSuspend>

	  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80032e4:	79fb      	ldrb	r3, [r7, #7]
 80032e6:	021b      	lsls	r3, r3, #8
 80032e8:	b21b      	sxth	r3, r3
 80032ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ee:	b21a      	sxth	r2, r3
 80032f0:	7a3b      	ldrb	r3, [r7, #8]
 80032f2:	b21b      	sxth	r3, r3
 80032f4:	4313      	orrs	r3, r2
 80032f6:	83fb      	strh	r3, [r7, #30]
	  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80032f8:	79fb      	ldrb	r3, [r7, #7]
 80032fa:	019b      	lsls	r3, r3, #6
 80032fc:	b21b      	sxth	r3, r3
 80032fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003302:	b21a      	sxth	r2, r3
 8003304:	7a7b      	ldrb	r3, [r7, #9]
 8003306:	b21b      	sxth	r3, r3
 8003308:	4313      	orrs	r3, r2
 800330a:	83bb      	strh	r3, [r7, #28]
	  T0_degC = T0_degC_x8_u16 >> 3;
 800330c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003310:	10db      	asrs	r3, r3, #3
 8003312:	837b      	strh	r3, [r7, #26]
	  T1_degC = T1_degC_x8_u16 >> 3;
 8003314:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003318:	10db      	asrs	r3, r3, #3
 800331a:	833b      	strh	r3, [r7, #24]

	  //SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
	  //HTS221_T0_OUT_L: Address 0x3C
	  //HAL_I2C_Mem_Read(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout);
	  //HAL_I2C_Mem_Read(&hi2c2, 0xBF, 0x3C | 0x80, 0x1U, buffer, 4, 1000);
	  HAL_I2C_Mem_Read_IT(&hi2c2, 0xBF, 0x3C | 0x80, 0x1U, buffer, 4);
 800331c:	2304      	movs	r3, #4
 800331e:	9301      	str	r3, [sp, #4]
 8003320:	f107 0308 	add.w	r3, r7, #8
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	2301      	movs	r3, #1
 8003328:	22bc      	movs	r2, #188	; 0xbc
 800332a:	21bf      	movs	r1, #191	; 0xbf
 800332c:	482e      	ldr	r0, [pc, #184]	; (80033e8 <MyTSENSOR_ReadTemp+0x148>)
 800332e:	f002 faaf 	bl	8005890 <HAL_I2C_Mem_Read_IT>
	  //while(readComplete == 0);
	  //readComplete = 0;

	  vTaskSuspend(pTempSensorRead);
 8003332:	4b2e      	ldr	r3, [pc, #184]	; (80033ec <MyTSENSOR_ReadTemp+0x14c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f7fd fd62 	bl	8000e00 <vTaskSuspend>

	  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800333c:	7a7b      	ldrb	r3, [r7, #9]
 800333e:	021b      	lsls	r3, r3, #8
 8003340:	b21a      	sxth	r2, r3
 8003342:	7a3b      	ldrb	r3, [r7, #8]
 8003344:	b21b      	sxth	r3, r3
 8003346:	4313      	orrs	r3, r2
 8003348:	82fb      	strh	r3, [r7, #22]
	  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800334a:	7afb      	ldrb	r3, [r7, #11]
 800334c:	021b      	lsls	r3, r3, #8
 800334e:	b21a      	sxth	r2, r3
 8003350:	7abb      	ldrb	r3, [r7, #10]
 8003352:	b21b      	sxth	r3, r3
 8003354:	4313      	orrs	r3, r2
 8003356:	82bb      	strh	r3, [r7, #20]

	  //SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
      //HTS221_TEMP_OUT_L_REG: Address 0x2A
	  //HAL_I2C_Mem_Read(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout);
	  //HAL_I2C_Mem_Read(&hi2c2, 0xBF, 0x2A | 0x80, 0x1U, buffer, 2, 1000);
	  HAL_I2C_Mem_Read_IT(&hi2c2, 0xBF, 0x2A | 0x80, 0x1U, buffer, 2);
 8003358:	2302      	movs	r3, #2
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	f107 0308 	add.w	r3, r7, #8
 8003360:	9300      	str	r3, [sp, #0]
 8003362:	2301      	movs	r3, #1
 8003364:	22aa      	movs	r2, #170	; 0xaa
 8003366:	21bf      	movs	r1, #191	; 0xbf
 8003368:	481f      	ldr	r0, [pc, #124]	; (80033e8 <MyTSENSOR_ReadTemp+0x148>)
 800336a:	f002 fa91 	bl	8005890 <HAL_I2C_Mem_Read_IT>
	  //while(readComplete == 0);
	  //readComplete = 0;

	  vTaskSuspend(pTempSensorRead);
 800336e:	4b1f      	ldr	r3, [pc, #124]	; (80033ec <MyTSENSOR_ReadTemp+0x14c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f7fd fd44 	bl	8000e00 <vTaskSuspend>

	  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003378:	7a7b      	ldrb	r3, [r7, #9]
 800337a:	021b      	lsls	r3, r3, #8
 800337c:	b21a      	sxth	r2, r3
 800337e:	7a3b      	ldrb	r3, [r7, #8]
 8003380:	b21b      	sxth	r3, r3
 8003382:	4313      	orrs	r3, r2
 8003384:	827b      	strh	r3, [r7, #18]

	  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8003386:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800338a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	ee07 3a90 	vmov	s15, r3
 8003394:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003398:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800339c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	ee07 3a90 	vmov	s15, r3
 80033a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033aa:	ee67 6a27 	vmul.f32	s13, s14, s15
 80033ae:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80033b2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	ee07 3a90 	vmov	s15, r3
 80033bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033c4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80033c8:	ee07 3a90 	vmov	s15, r3
 80033cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033d4:	edc7 7a03 	vstr	s15, [r7, #12]

	  return tmp_f;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	ee07 3a90 	vmov	s15, r3
}
 80033de:	eeb0 0a67 	vmov.f32	s0, s15
 80033e2:	3720      	adds	r7, #32
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	20000f08 	.word	0x20000f08
 80033ec:	20000dcc 	.word	0x20000dcc

080033f0 <HAL_I2C_MemRxCpltCallback>:
    xQueueSendFromISR(pUARTQueue, &receiveBuf, xHigherPriorityTaskWoken);
    HAL_UART_Receive_IT(&huart1, &receiveBuf, 1);*/
}

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
	//readComplete = 1;
	xTaskResumeFromISR(pTempSensorRead);
 80033f8:	4b04      	ldr	r3, [pc, #16]	; (800340c <HAL_I2C_MemRxCpltCallback+0x1c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7fd fdd1 	bl	8000fa4 <xTaskResumeFromISR>
}
 8003402:	bf00      	nop
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	20000dcc 	.word	0x20000dcc

08003410 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
	//writeComplete = 1;
	xTaskResumeFromISR(pTempSensorRead);
 8003418:	4b04      	ldr	r3, [pc, #16]	; (800342c <HAL_I2C_MemTxCpltCallback+0x1c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f7fd fdc1 	bl	8000fa4 <xTaskResumeFromISR>
}
 8003422:	bf00      	nop
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	20000dcc 	.word	0x20000dcc

08003430 <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
   HAL_I2C_EnableListen_IT(&hi2c1);
 8003438:	4803      	ldr	r0, [pc, #12]	; (8003448 <HAL_I2C_ListenCpltCallback+0x18>)
 800343a:	f002 fc13 	bl	8005c64 <HAL_I2C_EnableListen_IT>
}
 800343e:	bf00      	nop
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	20000eb4 	.word	0x20000eb4

0800344c <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	460b      	mov	r3, r1
 8003456:	70fb      	strb	r3, [r7, #3]
 8003458:	4613      	mov	r3, r2
 800345a:	803b      	strh	r3, [r7, #0]
   if (TransferDirection == I2C_DIRECTION_TRANSMIT)
 800345c:	78fb      	ldrb	r3, [r7, #3]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d107      	bne.n	8003472 <HAL_I2C_AddrCallback+0x26>
   {
	   //HAL_I2C_Slave_Seq_Receive_IT(hi2c, pData, Size, XferOptions)
	   HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxBuf, 7, I2C_FIRST_AND_LAST_FRAME);
 8003462:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003466:	2207      	movs	r2, #7
 8003468:	4909      	ldr	r1, [pc, #36]	; (8003490 <HAL_I2C_AddrCallback+0x44>)
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f002 fb48 	bl	8005b00 <HAL_I2C_Slave_Seq_Receive_IT>
   else if (TransferDirection == I2C_DIRECTION_RECEIVE)
   {
	   HAL_I2C_Slave_Seq_Transmit_IT(hi2c, TxBuf, 7, I2C_FIRST_AND_LAST_FRAME);
   }

}
 8003470:	e009      	b.n	8003486 <HAL_I2C_AddrCallback+0x3a>
   else if (TransferDirection == I2C_DIRECTION_RECEIVE)
 8003472:	78fb      	ldrb	r3, [r7, #3]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d106      	bne.n	8003486 <HAL_I2C_AddrCallback+0x3a>
	   HAL_I2C_Slave_Seq_Transmit_IT(hi2c, TxBuf, 7, I2C_FIRST_AND_LAST_FRAME);
 8003478:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800347c:	2207      	movs	r2, #7
 800347e:	4905      	ldr	r1, [pc, #20]	; (8003494 <HAL_I2C_AddrCallback+0x48>)
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f002 fa8b 	bl	800599c <HAL_I2C_Slave_Seq_Transmit_IT>
}
 8003486:	bf00      	nop
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	20000dd4 	.word	0x20000dd4
 8003494:	20000df4 	.word	0x20000df4

08003498 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
   xTaskResumeFromISR(pTargetReceive);
 80034a0:	4b04      	ldr	r3, [pc, #16]	; (80034b4 <HAL_I2C_SlaveRxCpltCallback+0x1c>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7fd fd7d 	bl	8000fa4 <xTaskResumeFromISR>
}
 80034aa:	bf00      	nop
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	20000dd0 	.word	0x20000dd0

080034b8 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
   xTaskResumeFromISR(pTempSensorRead);
 80034c0:	4b04      	ldr	r3, [pc, #16]	; (80034d4 <HAL_I2C_SlaveTxCpltCallback+0x1c>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7fd fd6d 	bl	8000fa4 <xTaskResumeFromISR>
}
 80034ca:	bf00      	nop
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	20000dcc 	.word	0x20000dcc

080034d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a04      	ldr	r2, [pc, #16]	; (80034f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d101      	bne.n	80034ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80034ea:	f000 fd2f 	bl	8003f4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80034ee:	bf00      	nop
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40001000 	.word	0x40001000

080034fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003500:	b672      	cpsid	i
}
 8003502:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003504:	e7fe      	b.n	8003504 <Error_Handler+0x8>
	...

08003508 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800350e:	4b0f      	ldr	r3, [pc, #60]	; (800354c <HAL_MspInit+0x44>)
 8003510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003512:	4a0e      	ldr	r2, [pc, #56]	; (800354c <HAL_MspInit+0x44>)
 8003514:	f043 0301 	orr.w	r3, r3, #1
 8003518:	6613      	str	r3, [r2, #96]	; 0x60
 800351a:	4b0c      	ldr	r3, [pc, #48]	; (800354c <HAL_MspInit+0x44>)
 800351c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	607b      	str	r3, [r7, #4]
 8003524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003526:	4b09      	ldr	r3, [pc, #36]	; (800354c <HAL_MspInit+0x44>)
 8003528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352a:	4a08      	ldr	r2, [pc, #32]	; (800354c <HAL_MspInit+0x44>)
 800352c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003530:	6593      	str	r3, [r2, #88]	; 0x58
 8003532:	4b06      	ldr	r3, [pc, #24]	; (800354c <HAL_MspInit+0x44>)
 8003534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353a:	603b      	str	r3, [r7, #0]
 800353c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	40021000 	.word	0x40021000

08003550 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08a      	sub	sp, #40	; 0x28
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003558:	f107 0314 	add.w	r3, r7, #20
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	605a      	str	r2, [r3, #4]
 8003562:	609a      	str	r2, [r3, #8]
 8003564:	60da      	str	r2, [r3, #12]
 8003566:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a15      	ldr	r2, [pc, #84]	; (80035c4 <HAL_ADC_MspInit+0x74>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d123      	bne.n	80035ba <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003572:	4b15      	ldr	r3, [pc, #84]	; (80035c8 <HAL_ADC_MspInit+0x78>)
 8003574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003576:	4a14      	ldr	r2, [pc, #80]	; (80035c8 <HAL_ADC_MspInit+0x78>)
 8003578:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800357c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800357e:	4b12      	ldr	r3, [pc, #72]	; (80035c8 <HAL_ADC_MspInit+0x78>)
 8003580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003582:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003586:	613b      	str	r3, [r7, #16]
 8003588:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800358a:	4b0f      	ldr	r3, [pc, #60]	; (80035c8 <HAL_ADC_MspInit+0x78>)
 800358c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800358e:	4a0e      	ldr	r2, [pc, #56]	; (80035c8 <HAL_ADC_MspInit+0x78>)
 8003590:	f043 0304 	orr.w	r3, r3, #4
 8003594:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003596:	4b0c      	ldr	r3, [pc, #48]	; (80035c8 <HAL_ADC_MspInit+0x78>)
 8003598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800359a:	f003 0304 	and.w	r3, r3, #4
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80035a2:	233f      	movs	r3, #63	; 0x3f
 80035a4:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80035a6:	230b      	movs	r3, #11
 80035a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035aa:	2300      	movs	r3, #0
 80035ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035ae:	f107 0314 	add.w	r3, r7, #20
 80035b2:	4619      	mov	r1, r3
 80035b4:	4805      	ldr	r0, [pc, #20]	; (80035cc <HAL_ADC_MspInit+0x7c>)
 80035b6:	f001 fe83 	bl	80052c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80035ba:	bf00      	nop
 80035bc:	3728      	adds	r7, #40	; 0x28
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	50040000 	.word	0x50040000
 80035c8:	40021000 	.word	0x40021000
 80035cc:	48000800 	.word	0x48000800

080035d0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b0ae      	sub	sp, #184	; 0xb8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035d8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	605a      	str	r2, [r3, #4]
 80035e2:	609a      	str	r2, [r3, #8]
 80035e4:	60da      	str	r2, [r3, #12]
 80035e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80035e8:	f107 0310 	add.w	r3, r7, #16
 80035ec:	2294      	movs	r2, #148	; 0x94
 80035ee:	2100      	movs	r1, #0
 80035f0:	4618      	mov	r0, r3
 80035f2:	f007 ff4f 	bl	800b494 <memset>
  if(DFSDM1_Init == 0)
 80035f6:	4b25      	ldr	r3, [pc, #148]	; (800368c <HAL_DFSDM_ChannelMspInit+0xbc>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d142      	bne.n	8003684 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80035fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003602:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8003604:	2300      	movs	r3, #0
 8003606:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800360a:	f107 0310 	add.w	r3, r7, #16
 800360e:	4618      	mov	r0, r3
 8003610:	f005 fbf2 	bl	8008df8 <HAL_RCCEx_PeriphCLKConfig>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800361a:	f7ff ff6f 	bl	80034fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800361e:	4b1c      	ldr	r3, [pc, #112]	; (8003690 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003622:	4a1b      	ldr	r2, [pc, #108]	; (8003690 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003624:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003628:	6613      	str	r3, [r2, #96]	; 0x60
 800362a:	4b19      	ldr	r3, [pc, #100]	; (8003690 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800362c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800362e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003632:	60fb      	str	r3, [r7, #12]
 8003634:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003636:	4b16      	ldr	r3, [pc, #88]	; (8003690 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800363a:	4a15      	ldr	r2, [pc, #84]	; (8003690 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800363c:	f043 0310 	orr.w	r3, r3, #16
 8003640:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003642:	4b13      	ldr	r3, [pc, #76]	; (8003690 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003646:	f003 0310 	and.w	r3, r3, #16
 800364a:	60bb      	str	r3, [r7, #8]
 800364c:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800364e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8003652:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003656:	2302      	movs	r3, #2
 8003658:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365c:	2300      	movs	r3, #0
 800365e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003662:	2300      	movs	r3, #0
 8003664:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8003668:	2306      	movs	r3, #6
 800366a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800366e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003672:	4619      	mov	r1, r3
 8003674:	4807      	ldr	r0, [pc, #28]	; (8003694 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8003676:	f001 fe23 	bl	80052c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800367a:	4b04      	ldr	r3, [pc, #16]	; (800368c <HAL_DFSDM_ChannelMspInit+0xbc>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	3301      	adds	r3, #1
 8003680:	4a02      	ldr	r2, [pc, #8]	; (800368c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8003682:	6013      	str	r3, [r2, #0]
  }

}
 8003684:	bf00      	nop
 8003686:	37b8      	adds	r7, #184	; 0xb8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	200012c4 	.word	0x200012c4
 8003690:	40021000 	.word	0x40021000
 8003694:	48001000 	.word	0x48001000

08003698 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b0b0      	sub	sp, #192	; 0xc0
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036a0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80036a4:	2200      	movs	r2, #0
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	605a      	str	r2, [r3, #4]
 80036aa:	609a      	str	r2, [r3, #8]
 80036ac:	60da      	str	r2, [r3, #12]
 80036ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80036b0:	f107 0318 	add.w	r3, r7, #24
 80036b4:	2294      	movs	r2, #148	; 0x94
 80036b6:	2100      	movs	r1, #0
 80036b8:	4618      	mov	r0, r3
 80036ba:	f007 feeb 	bl	800b494 <memset>
  if(hi2c->Instance==I2C1)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a52      	ldr	r2, [pc, #328]	; (800380c <HAL_I2C_MspInit+0x174>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d14c      	bne.n	8003762 <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80036c8:	2340      	movs	r3, #64	; 0x40
 80036ca:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80036cc:	2300      	movs	r3, #0
 80036ce:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036d0:	f107 0318 	add.w	r3, r7, #24
 80036d4:	4618      	mov	r0, r3
 80036d6:	f005 fb8f 	bl	8008df8 <HAL_RCCEx_PeriphCLKConfig>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80036e0:	f7ff ff0c 	bl	80034fc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036e4:	4b4a      	ldr	r3, [pc, #296]	; (8003810 <HAL_I2C_MspInit+0x178>)
 80036e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036e8:	4a49      	ldr	r2, [pc, #292]	; (8003810 <HAL_I2C_MspInit+0x178>)
 80036ea:	f043 0302 	orr.w	r3, r3, #2
 80036ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036f0:	4b47      	ldr	r3, [pc, #284]	; (8003810 <HAL_I2C_MspInit+0x178>)
 80036f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	617b      	str	r3, [r7, #20]
 80036fa:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80036fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003700:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003704:	2312      	movs	r3, #18
 8003706:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800370a:	2301      	movs	r3, #1
 800370c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003710:	2303      	movs	r3, #3
 8003712:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003716:	2304      	movs	r3, #4
 8003718:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800371c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003720:	4619      	mov	r1, r3
 8003722:	483c      	ldr	r0, [pc, #240]	; (8003814 <HAL_I2C_MspInit+0x17c>)
 8003724:	f001 fdcc 	bl	80052c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003728:	4b39      	ldr	r3, [pc, #228]	; (8003810 <HAL_I2C_MspInit+0x178>)
 800372a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372c:	4a38      	ldr	r2, [pc, #224]	; (8003810 <HAL_I2C_MspInit+0x178>)
 800372e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003732:	6593      	str	r3, [r2, #88]	; 0x58
 8003734:	4b36      	ldr	r3, [pc, #216]	; (8003810 <HAL_I2C_MspInit+0x178>)
 8003736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800373c:	613b      	str	r3, [r7, #16]
 800373e:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 6, 0);
 8003740:	2200      	movs	r2, #0
 8003742:	2106      	movs	r1, #6
 8003744:	201f      	movs	r0, #31
 8003746:	f001 fbbb 	bl	8004ec0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800374a:	201f      	movs	r0, #31
 800374c:	f001 fbd4 	bl	8004ef8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 6, 0);
 8003750:	2200      	movs	r2, #0
 8003752:	2106      	movs	r1, #6
 8003754:	2020      	movs	r0, #32
 8003756:	f001 fbb3 	bl	8004ec0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800375a:	2020      	movs	r0, #32
 800375c:	f001 fbcc 	bl	8004ef8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003760:	e050      	b.n	8003804 <HAL_I2C_MspInit+0x16c>
  else if(hi2c->Instance==I2C2)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a2c      	ldr	r2, [pc, #176]	; (8003818 <HAL_I2C_MspInit+0x180>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d14b      	bne.n	8003804 <HAL_I2C_MspInit+0x16c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800376c:	2380      	movs	r3, #128	; 0x80
 800376e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003770:	2300      	movs	r3, #0
 8003772:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003774:	f107 0318 	add.w	r3, r7, #24
 8003778:	4618      	mov	r0, r3
 800377a:	f005 fb3d 	bl	8008df8 <HAL_RCCEx_PeriphCLKConfig>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8003784:	f7ff feba 	bl	80034fc <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003788:	4b21      	ldr	r3, [pc, #132]	; (8003810 <HAL_I2C_MspInit+0x178>)
 800378a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800378c:	4a20      	ldr	r2, [pc, #128]	; (8003810 <HAL_I2C_MspInit+0x178>)
 800378e:	f043 0302 	orr.w	r3, r3, #2
 8003792:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003794:	4b1e      	ldr	r3, [pc, #120]	; (8003810 <HAL_I2C_MspInit+0x178>)
 8003796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	60fb      	str	r3, [r7, #12]
 800379e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80037a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80037a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037a8:	2312      	movs	r3, #18
 80037aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037ae:	2301      	movs	r3, #1
 80037b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037b4:	2303      	movs	r3, #3
 80037b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80037ba:	2304      	movs	r3, #4
 80037bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037c0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80037c4:	4619      	mov	r1, r3
 80037c6:	4813      	ldr	r0, [pc, #76]	; (8003814 <HAL_I2C_MspInit+0x17c>)
 80037c8:	f001 fd7a 	bl	80052c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80037cc:	4b10      	ldr	r3, [pc, #64]	; (8003810 <HAL_I2C_MspInit+0x178>)
 80037ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d0:	4a0f      	ldr	r2, [pc, #60]	; (8003810 <HAL_I2C_MspInit+0x178>)
 80037d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037d6:	6593      	str	r3, [r2, #88]	; 0x58
 80037d8:	4b0d      	ldr	r3, [pc, #52]	; (8003810 <HAL_I2C_MspInit+0x178>)
 80037da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037e0:	60bb      	str	r3, [r7, #8]
 80037e2:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 6, 0);
 80037e4:	2200      	movs	r2, #0
 80037e6:	2106      	movs	r1, #6
 80037e8:	2021      	movs	r0, #33	; 0x21
 80037ea:	f001 fb69 	bl	8004ec0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80037ee:	2021      	movs	r0, #33	; 0x21
 80037f0:	f001 fb82 	bl	8004ef8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 6, 0);
 80037f4:	2200      	movs	r2, #0
 80037f6:	2106      	movs	r1, #6
 80037f8:	2022      	movs	r0, #34	; 0x22
 80037fa:	f001 fb61 	bl	8004ec0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80037fe:	2022      	movs	r0, #34	; 0x22
 8003800:	f001 fb7a 	bl	8004ef8 <HAL_NVIC_EnableIRQ>
}
 8003804:	bf00      	nop
 8003806:	37c0      	adds	r7, #192	; 0xc0
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40005400 	.word	0x40005400
 8003810:	40021000 	.word	0x40021000
 8003814:	48000400 	.word	0x48000400
 8003818:	40005800 	.word	0x40005800

0800381c <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b0b0      	sub	sp, #192	; 0xc0
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003824:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	605a      	str	r2, [r3, #4]
 800382e:	609a      	str	r2, [r3, #8]
 8003830:	60da      	str	r2, [r3, #12]
 8003832:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003834:	f107 0318 	add.w	r3, r7, #24
 8003838:	2294      	movs	r2, #148	; 0x94
 800383a:	2100      	movs	r1, #0
 800383c:	4618      	mov	r0, r3
 800383e:	f007 fe29 	bl	800b494 <memset>
  if(hospi->Instance==OCTOSPI1)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a28      	ldr	r2, [pc, #160]	; (80038e8 <HAL_OSPI_MspInit+0xcc>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d149      	bne.n	80038e0 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800384c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003850:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8003852:	2300      	movs	r3, #0
 8003854:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003858:	f107 0318 	add.w	r3, r7, #24
 800385c:	4618      	mov	r0, r3
 800385e:	f005 facb 	bl	8008df8 <HAL_RCCEx_PeriphCLKConfig>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8003868:	f7ff fe48 	bl	80034fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 800386c:	4b1f      	ldr	r3, [pc, #124]	; (80038ec <HAL_OSPI_MspInit+0xd0>)
 800386e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003870:	4a1e      	ldr	r2, [pc, #120]	; (80038ec <HAL_OSPI_MspInit+0xd0>)
 8003872:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003876:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003878:	4b1c      	ldr	r3, [pc, #112]	; (80038ec <HAL_OSPI_MspInit+0xd0>)
 800387a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800387c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003880:	617b      	str	r3, [r7, #20]
 8003882:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8003884:	4b19      	ldr	r3, [pc, #100]	; (80038ec <HAL_OSPI_MspInit+0xd0>)
 8003886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003888:	4a18      	ldr	r2, [pc, #96]	; (80038ec <HAL_OSPI_MspInit+0xd0>)
 800388a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800388e:	6513      	str	r3, [r2, #80]	; 0x50
 8003890:	4b16      	ldr	r3, [pc, #88]	; (80038ec <HAL_OSPI_MspInit+0xd0>)
 8003892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003898:	613b      	str	r3, [r7, #16]
 800389a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800389c:	4b13      	ldr	r3, [pc, #76]	; (80038ec <HAL_OSPI_MspInit+0xd0>)
 800389e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038a0:	4a12      	ldr	r2, [pc, #72]	; (80038ec <HAL_OSPI_MspInit+0xd0>)
 80038a2:	f043 0310 	orr.w	r3, r3, #16
 80038a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038a8:	4b10      	ldr	r3, [pc, #64]	; (80038ec <HAL_OSPI_MspInit+0xd0>)
 80038aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ac:	f003 0310 	and.w	r3, r3, #16
 80038b0:	60fb      	str	r3, [r7, #12]
 80038b2:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80038b4:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80038b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038bc:	2302      	movs	r3, #2
 80038be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c2:	2300      	movs	r3, #0
 80038c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038c8:	2303      	movs	r3, #3
 80038ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80038ce:	230a      	movs	r3, #10
 80038d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038d4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038d8:	4619      	mov	r1, r3
 80038da:	4805      	ldr	r0, [pc, #20]	; (80038f0 <HAL_OSPI_MspInit+0xd4>)
 80038dc:	f001 fcf0 	bl	80052c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 80038e0:	bf00      	nop
 80038e2:	37c0      	adds	r7, #192	; 0xc0
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	a0001000 	.word	0xa0001000
 80038ec:	40021000 	.word	0x40021000
 80038f0:	48001000 	.word	0x48001000

080038f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b08c      	sub	sp, #48	; 0x30
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038fc:	f107 031c 	add.w	r3, r7, #28
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	605a      	str	r2, [r3, #4]
 8003906:	609a      	str	r2, [r3, #8]
 8003908:	60da      	str	r2, [r3, #12]
 800390a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a2f      	ldr	r2, [pc, #188]	; (80039d0 <HAL_SPI_MspInit+0xdc>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d129      	bne.n	800396a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003916:	4b2f      	ldr	r3, [pc, #188]	; (80039d4 <HAL_SPI_MspInit+0xe0>)
 8003918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800391a:	4a2e      	ldr	r2, [pc, #184]	; (80039d4 <HAL_SPI_MspInit+0xe0>)
 800391c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003920:	6613      	str	r3, [r2, #96]	; 0x60
 8003922:	4b2c      	ldr	r3, [pc, #176]	; (80039d4 <HAL_SPI_MspInit+0xe0>)
 8003924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003926:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800392a:	61bb      	str	r3, [r7, #24]
 800392c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800392e:	4b29      	ldr	r3, [pc, #164]	; (80039d4 <HAL_SPI_MspInit+0xe0>)
 8003930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003932:	4a28      	ldr	r2, [pc, #160]	; (80039d4 <HAL_SPI_MspInit+0xe0>)
 8003934:	f043 0301 	orr.w	r3, r3, #1
 8003938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800393a:	4b26      	ldr	r3, [pc, #152]	; (80039d4 <HAL_SPI_MspInit+0xe0>)
 800393c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	617b      	str	r3, [r7, #20]
 8003944:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8003946:	23e0      	movs	r3, #224	; 0xe0
 8003948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800394a:	2302      	movs	r3, #2
 800394c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800394e:	2300      	movs	r3, #0
 8003950:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003952:	2303      	movs	r3, #3
 8003954:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003956:	2305      	movs	r3, #5
 8003958:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800395a:	f107 031c 	add.w	r3, r7, #28
 800395e:	4619      	mov	r1, r3
 8003960:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003964:	f001 fcac 	bl	80052c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003968:	e02d      	b.n	80039c6 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a1a      	ldr	r2, [pc, #104]	; (80039d8 <HAL_SPI_MspInit+0xe4>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d128      	bne.n	80039c6 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003974:	4b17      	ldr	r3, [pc, #92]	; (80039d4 <HAL_SPI_MspInit+0xe0>)
 8003976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003978:	4a16      	ldr	r2, [pc, #88]	; (80039d4 <HAL_SPI_MspInit+0xe0>)
 800397a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800397e:	6593      	str	r3, [r2, #88]	; 0x58
 8003980:	4b14      	ldr	r3, [pc, #80]	; (80039d4 <HAL_SPI_MspInit+0xe0>)
 8003982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003984:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003988:	613b      	str	r3, [r7, #16]
 800398a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800398c:	4b11      	ldr	r3, [pc, #68]	; (80039d4 <HAL_SPI_MspInit+0xe0>)
 800398e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003990:	4a10      	ldr	r2, [pc, #64]	; (80039d4 <HAL_SPI_MspInit+0xe0>)
 8003992:	f043 0304 	orr.w	r3, r3, #4
 8003996:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003998:	4b0e      	ldr	r3, [pc, #56]	; (80039d4 <HAL_SPI_MspInit+0xe0>)
 800399a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800399c:	f003 0304 	and.w	r3, r3, #4
 80039a0:	60fb      	str	r3, [r7, #12]
 80039a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80039a4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80039a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039aa:	2302      	movs	r3, #2
 80039ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ae:	2300      	movs	r3, #0
 80039b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039b2:	2303      	movs	r3, #3
 80039b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80039b6:	2306      	movs	r3, #6
 80039b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039ba:	f107 031c 	add.w	r3, r7, #28
 80039be:	4619      	mov	r1, r3
 80039c0:	4806      	ldr	r0, [pc, #24]	; (80039dc <HAL_SPI_MspInit+0xe8>)
 80039c2:	f001 fc7d 	bl	80052c0 <HAL_GPIO_Init>
}
 80039c6:	bf00      	nop
 80039c8:	3730      	adds	r7, #48	; 0x30
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40013000 	.word	0x40013000
 80039d4:	40021000 	.word	0x40021000
 80039d8:	40003c00 	.word	0x40003c00
 80039dc:	48000800 	.word	0x48000800

080039e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b0b4      	sub	sp, #208	; 0xd0
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039e8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	605a      	str	r2, [r3, #4]
 80039f2:	609a      	str	r2, [r3, #8]
 80039f4:	60da      	str	r2, [r3, #12]
 80039f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80039f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039fc:	2294      	movs	r2, #148	; 0x94
 80039fe:	2100      	movs	r1, #0
 8003a00:	4618      	mov	r0, r3
 8003a02:	f007 fd47 	bl	800b494 <memset>
  if(huart->Instance==UART4)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a87      	ldr	r2, [pc, #540]	; (8003c28 <HAL_UART_MspInit+0x248>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d13c      	bne.n	8003a8a <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003a10:	2308      	movs	r3, #8
 8003a12:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003a14:	2300      	movs	r3, #0
 8003a16:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f005 f9eb 	bl	8008df8 <HAL_RCCEx_PeriphCLKConfig>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003a28:	f7ff fd68 	bl	80034fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003a2c:	4b7f      	ldr	r3, [pc, #508]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a30:	4a7e      	ldr	r2, [pc, #504]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003a32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a36:	6593      	str	r3, [r2, #88]	; 0x58
 8003a38:	4b7c      	ldr	r3, [pc, #496]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a40:	627b      	str	r3, [r7, #36]	; 0x24
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a44:	4b79      	ldr	r3, [pc, #484]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a48:	4a78      	ldr	r2, [pc, #480]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003a4a:	f043 0301 	orr.w	r3, r3, #1
 8003a4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a50:	4b76      	ldr	r3, [pc, #472]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	623b      	str	r3, [r7, #32]
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a62:	2302      	movs	r3, #2
 8003a64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003a74:	2308      	movs	r3, #8
 8003a76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a7a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003a7e:	4619      	mov	r1, r3
 8003a80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a84:	f001 fc1c 	bl	80052c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003a88:	e0ca      	b.n	8003c20 <HAL_UART_MspInit+0x240>
  else if(huart->Instance==USART1)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a68      	ldr	r2, [pc, #416]	; (8003c30 <HAL_UART_MspInit+0x250>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d143      	bne.n	8003b1c <HAL_UART_MspInit+0x13c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003a94:	2301      	movs	r3, #1
 8003a96:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f005 f9a9 	bl	8008df8 <HAL_RCCEx_PeriphCLKConfig>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8003aac:	f7ff fd26 	bl	80034fc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ab0:	4b5e      	ldr	r3, [pc, #376]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ab4:	4a5d      	ldr	r2, [pc, #372]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003ab6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003aba:	6613      	str	r3, [r2, #96]	; 0x60
 8003abc:	4b5b      	ldr	r3, [pc, #364]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003abe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ac0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ac4:	61fb      	str	r3, [r7, #28]
 8003ac6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ac8:	4b58      	ldr	r3, [pc, #352]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003acc:	4a57      	ldr	r2, [pc, #348]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003ace:	f043 0302 	orr.w	r3, r3, #2
 8003ad2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ad4:	4b55      	ldr	r3, [pc, #340]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	61bb      	str	r3, [r7, #24]
 8003ade:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8003ae0:	23c0      	movs	r3, #192	; 0xc0
 8003ae2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aec:	2300      	movs	r3, #0
 8003aee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003af2:	2303      	movs	r3, #3
 8003af4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003af8:	2307      	movs	r3, #7
 8003afa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003afe:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003b02:	4619      	mov	r1, r3
 8003b04:	484b      	ldr	r0, [pc, #300]	; (8003c34 <HAL_UART_MspInit+0x254>)
 8003b06:	f001 fbdb 	bl	80052c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	2106      	movs	r1, #6
 8003b0e:	2025      	movs	r0, #37	; 0x25
 8003b10:	f001 f9d6 	bl	8004ec0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003b14:	2025      	movs	r0, #37	; 0x25
 8003b16:	f001 f9ef 	bl	8004ef8 <HAL_NVIC_EnableIRQ>
}
 8003b1a:	e081      	b.n	8003c20 <HAL_UART_MspInit+0x240>
  else if(huart->Instance==USART2)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a45      	ldr	r2, [pc, #276]	; (8003c38 <HAL_UART_MspInit+0x258>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d13b      	bne.n	8003b9e <HAL_UART_MspInit+0x1be>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003b26:	2302      	movs	r3, #2
 8003b28:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b32:	4618      	mov	r0, r3
 8003b34:	f005 f960 	bl	8008df8 <HAL_RCCEx_PeriphCLKConfig>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <HAL_UART_MspInit+0x162>
      Error_Handler();
 8003b3e:	f7ff fcdd 	bl	80034fc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b42:	4b3a      	ldr	r3, [pc, #232]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b46:	4a39      	ldr	r2, [pc, #228]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b4c:	6593      	str	r3, [r2, #88]	; 0x58
 8003b4e:	4b37      	ldr	r3, [pc, #220]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b56:	617b      	str	r3, [r7, #20]
 8003b58:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b5a:	4b34      	ldr	r3, [pc, #208]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b5e:	4a33      	ldr	r2, [pc, #204]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003b60:	f043 0308 	orr.w	r3, r3, #8
 8003b64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b66:	4b31      	ldr	r3, [pc, #196]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b6a:	f003 0308 	and.w	r3, r3, #8
 8003b6e:	613b      	str	r3, [r7, #16]
 8003b70:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8003b72:	2378      	movs	r3, #120	; 0x78
 8003b74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b78:	2302      	movs	r3, #2
 8003b7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b84:	2303      	movs	r3, #3
 8003b86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003b8a:	2307      	movs	r3, #7
 8003b8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b90:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003b94:	4619      	mov	r1, r3
 8003b96:	4829      	ldr	r0, [pc, #164]	; (8003c3c <HAL_UART_MspInit+0x25c>)
 8003b98:	f001 fb92 	bl	80052c0 <HAL_GPIO_Init>
}
 8003b9c:	e040      	b.n	8003c20 <HAL_UART_MspInit+0x240>
  else if(huart->Instance==USART3)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a27      	ldr	r2, [pc, #156]	; (8003c40 <HAL_UART_MspInit+0x260>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d13b      	bne.n	8003c20 <HAL_UART_MspInit+0x240>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003ba8:	2304      	movs	r3, #4
 8003baa:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003bac:	2300      	movs	r3, #0
 8003bae:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003bb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f005 f91f 	bl	8008df8 <HAL_RCCEx_PeriphCLKConfig>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d001      	beq.n	8003bc4 <HAL_UART_MspInit+0x1e4>
      Error_Handler();
 8003bc0:	f7ff fc9c 	bl	80034fc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003bc4:	4b19      	ldr	r3, [pc, #100]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc8:	4a18      	ldr	r2, [pc, #96]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003bca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bce:	6593      	str	r3, [r2, #88]	; 0x58
 8003bd0:	4b16      	ldr	r3, [pc, #88]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bd8:	60fb      	str	r3, [r7, #12]
 8003bda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bdc:	4b13      	ldr	r3, [pc, #76]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be0:	4a12      	ldr	r2, [pc, #72]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003be2:	f043 0308 	orr.w	r3, r3, #8
 8003be6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003be8:	4b10      	ldr	r3, [pc, #64]	; (8003c2c <HAL_UART_MspInit+0x24c>)
 8003bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	60bb      	str	r3, [r7, #8]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8003bf4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003bf8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c02:	2300      	movs	r3, #0
 8003c04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003c0e:	2307      	movs	r3, #7
 8003c10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c14:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4808      	ldr	r0, [pc, #32]	; (8003c3c <HAL_UART_MspInit+0x25c>)
 8003c1c:	f001 fb50 	bl	80052c0 <HAL_GPIO_Init>
}
 8003c20:	bf00      	nop
 8003c22:	37d0      	adds	r7, #208	; 0xd0
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	40004c00 	.word	0x40004c00
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	40013800 	.word	0x40013800
 8003c34:	48000400 	.word	0x48000400
 8003c38:	40004400 	.word	0x40004400
 8003c3c:	48000c00 	.word	0x48000c00
 8003c40:	40004800 	.word	0x40004800

08003c44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08e      	sub	sp, #56	; 0x38
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003c52:	4b34      	ldr	r3, [pc, #208]	; (8003d24 <HAL_InitTick+0xe0>)
 8003c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c56:	4a33      	ldr	r2, [pc, #204]	; (8003d24 <HAL_InitTick+0xe0>)
 8003c58:	f043 0310 	orr.w	r3, r3, #16
 8003c5c:	6593      	str	r3, [r2, #88]	; 0x58
 8003c5e:	4b31      	ldr	r3, [pc, #196]	; (8003d24 <HAL_InitTick+0xe0>)
 8003c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c62:	f003 0310 	and.w	r3, r3, #16
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003c6a:	f107 0210 	add.w	r2, r7, #16
 8003c6e:	f107 0314 	add.w	r3, r7, #20
 8003c72:	4611      	mov	r1, r2
 8003c74:	4618      	mov	r0, r3
 8003c76:	f004 ffcd 	bl	8008c14 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003c7a:	6a3b      	ldr	r3, [r7, #32]
 8003c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d103      	bne.n	8003c8c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003c84:	f004 ff9a 	bl	8008bbc <HAL_RCC_GetPCLK1Freq>
 8003c88:	6378      	str	r0, [r7, #52]	; 0x34
 8003c8a:	e004      	b.n	8003c96 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003c8c:	f004 ff96 	bl	8008bbc <HAL_RCC_GetPCLK1Freq>
 8003c90:	4603      	mov	r3, r0
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c98:	4a23      	ldr	r2, [pc, #140]	; (8003d28 <HAL_InitTick+0xe4>)
 8003c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9e:	0c9b      	lsrs	r3, r3, #18
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003ca4:	4b21      	ldr	r3, [pc, #132]	; (8003d2c <HAL_InitTick+0xe8>)
 8003ca6:	4a22      	ldr	r2, [pc, #136]	; (8003d30 <HAL_InitTick+0xec>)
 8003ca8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003caa:	4b20      	ldr	r3, [pc, #128]	; (8003d2c <HAL_InitTick+0xe8>)
 8003cac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003cb0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003cb2:	4a1e      	ldr	r2, [pc, #120]	; (8003d2c <HAL_InitTick+0xe8>)
 8003cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003cb8:	4b1c      	ldr	r3, [pc, #112]	; (8003d2c <HAL_InitTick+0xe8>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cbe:	4b1b      	ldr	r3, [pc, #108]	; (8003d2c <HAL_InitTick+0xe8>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cc4:	4b19      	ldr	r3, [pc, #100]	; (8003d2c <HAL_InitTick+0xe8>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003cca:	4818      	ldr	r0, [pc, #96]	; (8003d2c <HAL_InitTick+0xe8>)
 8003ccc:	f005 fe5f 	bl	800998e <HAL_TIM_Base_Init>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003cd6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d11b      	bne.n	8003d16 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003cde:	4813      	ldr	r0, [pc, #76]	; (8003d2c <HAL_InitTick+0xe8>)
 8003ce0:	f005 feb6 	bl	8009a50 <HAL_TIM_Base_Start_IT>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003cea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d111      	bne.n	8003d16 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003cf2:	2036      	movs	r0, #54	; 0x36
 8003cf4:	f001 f900 	bl	8004ef8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b0f      	cmp	r3, #15
 8003cfc:	d808      	bhi.n	8003d10 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003cfe:	2200      	movs	r2, #0
 8003d00:	6879      	ldr	r1, [r7, #4]
 8003d02:	2036      	movs	r0, #54	; 0x36
 8003d04:	f001 f8dc 	bl	8004ec0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003d08:	4a0a      	ldr	r2, [pc, #40]	; (8003d34 <HAL_InitTick+0xf0>)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6013      	str	r3, [r2, #0]
 8003d0e:	e002      	b.n	8003d16 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003d16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3738      	adds	r7, #56	; 0x38
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	40021000 	.word	0x40021000
 8003d28:	431bde83 	.word	0x431bde83
 8003d2c:	200012c8 	.word	0x200012c8
 8003d30:	40001000 	.word	0x40001000
 8003d34:	20000040 	.word	0x20000040

08003d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d3c:	e7fe      	b.n	8003d3c <NMI_Handler+0x4>

08003d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d42:	e7fe      	b.n	8003d42 <HardFault_Handler+0x4>

08003d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d48:	e7fe      	b.n	8003d48 <MemManage_Handler+0x4>

08003d4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d4e:	e7fe      	b.n	8003d4e <BusFault_Handler+0x4>

08003d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d54:	e7fe      	b.n	8003d54 <UsageFault_Handler+0x4>

08003d56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d56:	b480      	push	{r7}
 8003d58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d5a:	bf00      	nop
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8003d68:	2020      	movs	r0, #32
 8003d6a:	f001 fc53 	bl	8005614 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8003d6e:	2040      	movs	r0, #64	; 0x40
 8003d70:	f001 fc50 	bl	8005614 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8003d74:	2080      	movs	r0, #128	; 0x80
 8003d76:	f001 fc4d 	bl	8005614 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8003d7a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003d7e:	f001 fc49 	bl	8005614 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003d82:	bf00      	nop
 8003d84:	bd80      	pop	{r7, pc}
	...

08003d88 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003d8c:	4802      	ldr	r0, [pc, #8]	; (8003d98 <I2C1_EV_IRQHandler+0x10>)
 8003d8e:	f001 ff89 	bl	8005ca4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003d92:	bf00      	nop
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	20000eb4 	.word	0x20000eb4

08003d9c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003da0:	4802      	ldr	r0, [pc, #8]	; (8003dac <I2C1_ER_IRQHandler+0x10>)
 8003da2:	f001 ff99 	bl	8005cd8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003da6:	bf00      	nop
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	20000eb4 	.word	0x20000eb4

08003db0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003db4:	4802      	ldr	r0, [pc, #8]	; (8003dc0 <I2C2_EV_IRQHandler+0x10>)
 8003db6:	f001 ff75 	bl	8005ca4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003dba:	bf00      	nop
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	20000f08 	.word	0x20000f08

08003dc4 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8003dc8:	4802      	ldr	r0, [pc, #8]	; (8003dd4 <I2C2_ER_IRQHandler+0x10>)
 8003dca:	f001 ff85 	bl	8005cd8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8003dce:	bf00      	nop
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	20000f08 	.word	0x20000f08

08003dd8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003ddc:	4802      	ldr	r0, [pc, #8]	; (8003de8 <USART1_IRQHandler+0x10>)
 8003dde:	f006 f969 	bl	800a0b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003de2:	bf00      	nop
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	20001108 	.word	0x20001108

08003dec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 8003df0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003df4:	f001 fc0e 	bl	8005614 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8003df8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003dfc:	f001 fc0a 	bl	8005614 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 8003e00:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003e04:	f001 fc06 	bl	8005614 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8003e08:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003e0c:	f001 fc02 	bl	8005614 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8003e10:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003e14:	f001 fbfe 	bl	8005614 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8003e18:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003e1c:	f001 fbfa 	bl	8005614 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003e20:	bf00      	nop
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003e28:	4802      	ldr	r0, [pc, #8]	; (8003e34 <TIM6_DAC_IRQHandler+0x10>)
 8003e2a:	f005 fe81 	bl	8009b30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003e2e:	bf00      	nop
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	200012c8 	.word	0x200012c8

08003e38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e40:	4a14      	ldr	r2, [pc, #80]	; (8003e94 <_sbrk+0x5c>)
 8003e42:	4b15      	ldr	r3, [pc, #84]	; (8003e98 <_sbrk+0x60>)
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e4c:	4b13      	ldr	r3, [pc, #76]	; (8003e9c <_sbrk+0x64>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d102      	bne.n	8003e5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e54:	4b11      	ldr	r3, [pc, #68]	; (8003e9c <_sbrk+0x64>)
 8003e56:	4a12      	ldr	r2, [pc, #72]	; (8003ea0 <_sbrk+0x68>)
 8003e58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e5a:	4b10      	ldr	r3, [pc, #64]	; (8003e9c <_sbrk+0x64>)
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4413      	add	r3, r2
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d207      	bcs.n	8003e78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e68:	f007 fb1c 	bl	800b4a4 <__errno>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	220c      	movs	r2, #12
 8003e70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e72:	f04f 33ff 	mov.w	r3, #4294967295
 8003e76:	e009      	b.n	8003e8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e78:	4b08      	ldr	r3, [pc, #32]	; (8003e9c <_sbrk+0x64>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e7e:	4b07      	ldr	r3, [pc, #28]	; (8003e9c <_sbrk+0x64>)
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4413      	add	r3, r2
 8003e86:	4a05      	ldr	r2, [pc, #20]	; (8003e9c <_sbrk+0x64>)
 8003e88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3718      	adds	r7, #24
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	200a0000 	.word	0x200a0000
 8003e98:	00000400 	.word	0x00000400
 8003e9c:	20001314 	.word	0x20001314
 8003ea0:	20001488 	.word	0x20001488

08003ea4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003ea8:	4b06      	ldr	r3, [pc, #24]	; (8003ec4 <SystemInit+0x20>)
 8003eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eae:	4a05      	ldr	r2, [pc, #20]	; (8003ec4 <SystemInit+0x20>)
 8003eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003eb8:	bf00      	nop
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	e000ed00 	.word	0xe000ed00

08003ec8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003ec8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f00 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003ecc:	f7ff ffea 	bl	8003ea4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ed0:	480c      	ldr	r0, [pc, #48]	; (8003f04 <LoopForever+0x6>)
  ldr r1, =_edata
 8003ed2:	490d      	ldr	r1, [pc, #52]	; (8003f08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ed4:	4a0d      	ldr	r2, [pc, #52]	; (8003f0c <LoopForever+0xe>)
  movs r3, #0
 8003ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ed8:	e002      	b.n	8003ee0 <LoopCopyDataInit>

08003eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ede:	3304      	adds	r3, #4

08003ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ee4:	d3f9      	bcc.n	8003eda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ee6:	4a0a      	ldr	r2, [pc, #40]	; (8003f10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ee8:	4c0a      	ldr	r4, [pc, #40]	; (8003f14 <LoopForever+0x16>)
  movs r3, #0
 8003eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003eec:	e001      	b.n	8003ef2 <LoopFillZerobss>

08003eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ef0:	3204      	adds	r2, #4

08003ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ef4:	d3fb      	bcc.n	8003eee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ef6:	f007 fadb 	bl	800b4b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003efa:	f7fe fa7b 	bl	80023f4 <main>

08003efe <LoopForever>:

LoopForever:
    b LoopForever
 8003efe:	e7fe      	b.n	8003efe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003f00:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8003f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f08:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8003f0c:	0800bf34 	.word	0x0800bf34
  ldr r2, =_sbss
 8003f10:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8003f14:	20001488 	.word	0x20001488

08003f18 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003f18:	e7fe      	b.n	8003f18 <ADC1_IRQHandler>

08003f1a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b082      	sub	sp, #8
 8003f1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003f20:	2300      	movs	r3, #0
 8003f22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f24:	2003      	movs	r0, #3
 8003f26:	f000 ffc0 	bl	8004eaa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f2a:	200f      	movs	r0, #15
 8003f2c:	f7ff fe8a 	bl	8003c44 <HAL_InitTick>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d002      	beq.n	8003f3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	71fb      	strb	r3, [r7, #7]
 8003f3a:	e001      	b.n	8003f40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003f3c:	f7ff fae4 	bl	8003508 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003f40:	79fb      	ldrb	r3, [r7, #7]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
	...

08003f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f50:	4b06      	ldr	r3, [pc, #24]	; (8003f6c <HAL_IncTick+0x20>)
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	461a      	mov	r2, r3
 8003f56:	4b06      	ldr	r3, [pc, #24]	; (8003f70 <HAL_IncTick+0x24>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	4a04      	ldr	r2, [pc, #16]	; (8003f70 <HAL_IncTick+0x24>)
 8003f5e:	6013      	str	r3, [r2, #0]
}
 8003f60:	bf00      	nop
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	20000044 	.word	0x20000044
 8003f70:	20001318 	.word	0x20001318

08003f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0
  return uwTick;
 8003f78:	4b03      	ldr	r3, [pc, #12]	; (8003f88 <HAL_GetTick+0x14>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	20001318 	.word	0x20001318

08003f8c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	609a      	str	r2, [r3, #8]
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b083      	sub	sp, #12
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
 8003fba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	609a      	str	r2, [r3, #8]
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b087      	sub	sp, #28
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
 8004000:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	3360      	adds	r3, #96	; 0x60
 8004006:	461a      	mov	r2, r3
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	4413      	add	r3, r2
 800400e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	4b08      	ldr	r3, [pc, #32]	; (8004038 <LL_ADC_SetOffset+0x44>)
 8004016:	4013      	ands	r3, r2
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	4313      	orrs	r3, r2
 8004024:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800402c:	bf00      	nop
 800402e:	371c      	adds	r7, #28
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr
 8004038:	03fff000 	.word	0x03fff000

0800403c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	3360      	adds	r3, #96	; 0x60
 800404a:	461a      	mov	r2, r3
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4413      	add	r3, r2
 8004052:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800405c:	4618      	mov	r0, r3
 800405e:	3714      	adds	r7, #20
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004068:	b480      	push	{r7}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	3360      	adds	r3, #96	; 0x60
 8004078:	461a      	mov	r2, r3
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4413      	add	r3, r2
 8004080:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	431a      	orrs	r2, r3
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004092:	bf00      	nop
 8004094:	371c      	adds	r7, #28
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800409e:	b480      	push	{r7}
 80040a0:	b083      	sub	sp, #12
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
 80040a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	431a      	orrs	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	615a      	str	r2, [r3, #20]
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b087      	sub	sp, #28
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	3330      	adds	r3, #48	; 0x30
 80040d4:	461a      	mov	r2, r3
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	0a1b      	lsrs	r3, r3, #8
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	f003 030c 	and.w	r3, r3, #12
 80040e0:	4413      	add	r3, r2
 80040e2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	f003 031f 	and.w	r3, r3, #31
 80040ee:	211f      	movs	r1, #31
 80040f0:	fa01 f303 	lsl.w	r3, r1, r3
 80040f4:	43db      	mvns	r3, r3
 80040f6:	401a      	ands	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	0e9b      	lsrs	r3, r3, #26
 80040fc:	f003 011f 	and.w	r1, r3, #31
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	f003 031f 	and.w	r3, r3, #31
 8004106:	fa01 f303 	lsl.w	r3, r1, r3
 800410a:	431a      	orrs	r2, r3
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004110:	bf00      	nop
 8004112:	371c      	adds	r7, #28
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800411c:	b480      	push	{r7}
 800411e:	b087      	sub	sp, #28
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	3314      	adds	r3, #20
 800412c:	461a      	mov	r2, r3
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	0e5b      	lsrs	r3, r3, #25
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	4413      	add	r3, r2
 800413a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	0d1b      	lsrs	r3, r3, #20
 8004144:	f003 031f 	and.w	r3, r3, #31
 8004148:	2107      	movs	r1, #7
 800414a:	fa01 f303 	lsl.w	r3, r1, r3
 800414e:	43db      	mvns	r3, r3
 8004150:	401a      	ands	r2, r3
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	0d1b      	lsrs	r3, r3, #20
 8004156:	f003 031f 	and.w	r3, r3, #31
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	fa01 f303 	lsl.w	r3, r1, r3
 8004160:	431a      	orrs	r2, r3
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004166:	bf00      	nop
 8004168:	371c      	adds	r7, #28
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
	...

08004174 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800418c:	43db      	mvns	r3, r3
 800418e:	401a      	ands	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f003 0318 	and.w	r3, r3, #24
 8004196:	4908      	ldr	r1, [pc, #32]	; (80041b8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004198:	40d9      	lsrs	r1, r3
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	400b      	ands	r3, r1
 800419e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041a2:	431a      	orrs	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80041aa:	bf00      	nop
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	0007ffff 	.word	0x0007ffff

080041bc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80041cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	6093      	str	r3, [r2, #8]
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041f4:	d101      	bne.n	80041fa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80041f6:	2301      	movs	r3, #1
 80041f8:	e000      	b.n	80041fc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004218:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800421c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004240:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004244:	d101      	bne.n	800424a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004246:	2301      	movs	r3, #1
 8004248:	e000      	b.n	800424c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	2b01      	cmp	r3, #1
 800426a:	d101      	bne.n	8004270 <LL_ADC_IsEnabled+0x18>
 800426c:	2301      	movs	r3, #1
 800426e:	e000      	b.n	8004272 <LL_ADC_IsEnabled+0x1a>
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr

0800427e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800427e:	b480      	push	{r7}
 8004280:	b083      	sub	sp, #12
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f003 0304 	and.w	r3, r3, #4
 800428e:	2b04      	cmp	r3, #4
 8004290:	d101      	bne.n	8004296 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004292:	2301      	movs	r3, #1
 8004294:	e000      	b.n	8004298 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f003 0308 	and.w	r3, r3, #8
 80042b4:	2b08      	cmp	r3, #8
 80042b6:	d101      	bne.n	80042bc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80042b8:	2301      	movs	r3, #1
 80042ba:	e000      	b.n	80042be <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
	...

080042cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b088      	sub	sp, #32
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042d4:	2300      	movs	r3, #0
 80042d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80042d8:	2300      	movs	r3, #0
 80042da:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e129      	b.n	800453a <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d109      	bne.n	8004308 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f7ff f92b 	bl	8003550 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4618      	mov	r0, r3
 800430e:	f7ff ff67 	bl	80041e0 <LL_ADC_IsDeepPowerDownEnabled>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d004      	beq.n	8004322 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4618      	mov	r0, r3
 800431e:	f7ff ff4d 	bl	80041bc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4618      	mov	r0, r3
 8004328:	f7ff ff82 	bl	8004230 <LL_ADC_IsInternalRegulatorEnabled>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d115      	bne.n	800435e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4618      	mov	r0, r3
 8004338:	f7ff ff66 	bl	8004208 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800433c:	4b81      	ldr	r3, [pc, #516]	; (8004544 <HAL_ADC_Init+0x278>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	099b      	lsrs	r3, r3, #6
 8004342:	4a81      	ldr	r2, [pc, #516]	; (8004548 <HAL_ADC_Init+0x27c>)
 8004344:	fba2 2303 	umull	r2, r3, r2, r3
 8004348:	099b      	lsrs	r3, r3, #6
 800434a:	3301      	adds	r3, #1
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004350:	e002      	b.n	8004358 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	3b01      	subs	r3, #1
 8004356:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1f9      	bne.n	8004352 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4618      	mov	r0, r3
 8004364:	f7ff ff64 	bl	8004230 <LL_ADC_IsInternalRegulatorEnabled>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10d      	bne.n	800438a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004372:	f043 0210 	orr.w	r2, r3, #16
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800437e:	f043 0201 	orr.w	r2, r3, #1
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4618      	mov	r0, r3
 8004390:	f7ff ff75 	bl	800427e <LL_ADC_REG_IsConversionOngoing>
 8004394:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800439a:	f003 0310 	and.w	r3, r3, #16
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f040 80c2 	bne.w	8004528 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f040 80be 	bne.w	8004528 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80043b4:	f043 0202 	orr.w	r2, r3, #2
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff ff49 	bl	8004258 <LL_ADC_IsEnabled>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d10b      	bne.n	80043e4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043cc:	485f      	ldr	r0, [pc, #380]	; (800454c <HAL_ADC_Init+0x280>)
 80043ce:	f7ff ff43 	bl	8004258 <LL_ADC_IsEnabled>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d105      	bne.n	80043e4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	4619      	mov	r1, r3
 80043de:	485c      	ldr	r0, [pc, #368]	; (8004550 <HAL_ADC_Init+0x284>)
 80043e0:	f7ff fdd4 	bl	8003f8c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	7e5b      	ldrb	r3, [r3, #25]
 80043e8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80043ee:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80043f4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80043fa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004402:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004404:	4313      	orrs	r3, r2
 8004406:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d106      	bne.n	8004420 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004416:	3b01      	subs	r3, #1
 8004418:	045b      	lsls	r3, r3, #17
 800441a:	69ba      	ldr	r2, [r7, #24]
 800441c:	4313      	orrs	r3, r2
 800441e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004424:	2b00      	cmp	r3, #0
 8004426:	d009      	beq.n	800443c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004434:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004436:	69ba      	ldr	r2, [r7, #24]
 8004438:	4313      	orrs	r3, r2
 800443a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68da      	ldr	r2, [r3, #12]
 8004442:	4b44      	ldr	r3, [pc, #272]	; (8004554 <HAL_ADC_Init+0x288>)
 8004444:	4013      	ands	r3, r2
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	6812      	ldr	r2, [r2, #0]
 800444a:	69b9      	ldr	r1, [r7, #24]
 800444c:	430b      	orrs	r3, r1
 800444e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4618      	mov	r0, r3
 8004456:	f7ff ff25 	bl	80042a4 <LL_ADC_INJ_IsConversionOngoing>
 800445a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d140      	bne.n	80044e4 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d13d      	bne.n	80044e4 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	7e1b      	ldrb	r3, [r3, #24]
 8004470:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004472:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800447a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800447c:	4313      	orrs	r3, r2
 800447e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800448a:	f023 0306 	bic.w	r3, r3, #6
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	6812      	ldr	r2, [r2, #0]
 8004492:	69b9      	ldr	r1, [r7, #24]
 8004494:	430b      	orrs	r3, r1
 8004496:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d118      	bne.n	80044d4 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80044ac:	f023 0304 	bic.w	r3, r3, #4
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80044b8:	4311      	orrs	r1, r2
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80044be:	4311      	orrs	r1, r2
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80044c4:	430a      	orrs	r2, r1
 80044c6:	431a      	orrs	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f042 0201 	orr.w	r2, r2, #1
 80044d0:	611a      	str	r2, [r3, #16]
 80044d2:	e007      	b.n	80044e4 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	691a      	ldr	r2, [r3, #16]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 0201 	bic.w	r2, r2, #1
 80044e2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d10c      	bne.n	8004506 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f2:	f023 010f 	bic.w	r1, r3, #15
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	1e5a      	subs	r2, r3, #1
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	631a      	str	r2, [r3, #48]	; 0x30
 8004504:	e007      	b.n	8004516 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f022 020f 	bic.w	r2, r2, #15
 8004514:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800451a:	f023 0303 	bic.w	r3, r3, #3
 800451e:	f043 0201 	orr.w	r2, r3, #1
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	659a      	str	r2, [r3, #88]	; 0x58
 8004526:	e007      	b.n	8004538 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452c:	f043 0210 	orr.w	r2, r3, #16
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004538:	7ffb      	ldrb	r3, [r7, #31]
}
 800453a:	4618      	mov	r0, r3
 800453c:	3720      	adds	r7, #32
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	2000003c 	.word	0x2000003c
 8004548:	053e2d63 	.word	0x053e2d63
 800454c:	50040000 	.word	0x50040000
 8004550:	50040300 	.word	0x50040300
 8004554:	fff0c007 	.word	0xfff0c007

08004558 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b0b6      	sub	sp, #216	; 0xd8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004562:	2300      	movs	r3, #0
 8004564:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004568:	2300      	movs	r3, #0
 800456a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004572:	2b01      	cmp	r3, #1
 8004574:	d101      	bne.n	800457a <HAL_ADC_ConfigChannel+0x22>
 8004576:	2302      	movs	r3, #2
 8004578:	e3d5      	b.n	8004d26 <HAL_ADC_ConfigChannel+0x7ce>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4618      	mov	r0, r3
 8004588:	f7ff fe79 	bl	800427e <LL_ADC_REG_IsConversionOngoing>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	f040 83ba 	bne.w	8004d08 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	2b05      	cmp	r3, #5
 80045a2:	d824      	bhi.n	80045ee <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	3b02      	subs	r3, #2
 80045aa:	2b03      	cmp	r3, #3
 80045ac:	d81b      	bhi.n	80045e6 <HAL_ADC_ConfigChannel+0x8e>
 80045ae:	a201      	add	r2, pc, #4	; (adr r2, 80045b4 <HAL_ADC_ConfigChannel+0x5c>)
 80045b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b4:	080045c5 	.word	0x080045c5
 80045b8:	080045cd 	.word	0x080045cd
 80045bc:	080045d5 	.word	0x080045d5
 80045c0:	080045dd 	.word	0x080045dd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80045c4:	230c      	movs	r3, #12
 80045c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80045ca:	e010      	b.n	80045ee <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80045cc:	2312      	movs	r3, #18
 80045ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80045d2:	e00c      	b.n	80045ee <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80045d4:	2318      	movs	r3, #24
 80045d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80045da:	e008      	b.n	80045ee <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80045dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80045e4:	e003      	b.n	80045ee <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80045e6:	2306      	movs	r3, #6
 80045e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80045ec:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6818      	ldr	r0, [r3, #0]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	461a      	mov	r2, r3
 80045f8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80045fc:	f7ff fd62 	bl	80040c4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4618      	mov	r0, r3
 8004606:	f7ff fe3a 	bl	800427e <LL_ADC_REG_IsConversionOngoing>
 800460a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4618      	mov	r0, r3
 8004614:	f7ff fe46 	bl	80042a4 <LL_ADC_INJ_IsConversionOngoing>
 8004618:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800461c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004620:	2b00      	cmp	r3, #0
 8004622:	f040 81bf 	bne.w	80049a4 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004626:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800462a:	2b00      	cmp	r3, #0
 800462c:	f040 81ba 	bne.w	80049a4 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004638:	d10f      	bne.n	800465a <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6818      	ldr	r0, [r3, #0]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2200      	movs	r2, #0
 8004644:	4619      	mov	r1, r3
 8004646:	f7ff fd69 	bl	800411c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004652:	4618      	mov	r0, r3
 8004654:	f7ff fd23 	bl	800409e <LL_ADC_SetSamplingTimeCommonConfig>
 8004658:	e00e      	b.n	8004678 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6818      	ldr	r0, [r3, #0]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	6819      	ldr	r1, [r3, #0]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	461a      	mov	r2, r3
 8004668:	f7ff fd58 	bl	800411c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2100      	movs	r1, #0
 8004672:	4618      	mov	r0, r3
 8004674:	f7ff fd13 	bl	800409e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	695a      	ldr	r2, [r3, #20]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	08db      	lsrs	r3, r3, #3
 8004684:	f003 0303 	and.w	r3, r3, #3
 8004688:	005b      	lsls	r3, r3, #1
 800468a:	fa02 f303 	lsl.w	r3, r2, r3
 800468e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	2b04      	cmp	r3, #4
 8004698:	d00a      	beq.n	80046b0 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6818      	ldr	r0, [r3, #0]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	6919      	ldr	r1, [r3, #16]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046aa:	f7ff fca3 	bl	8003ff4 <LL_ADC_SetOffset>
 80046ae:	e179      	b.n	80049a4 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2100      	movs	r1, #0
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7ff fcc0 	bl	800403c <LL_ADC_GetOffsetChannel>
 80046bc:	4603      	mov	r3, r0
 80046be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10a      	bne.n	80046dc <HAL_ADC_ConfigChannel+0x184>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2100      	movs	r1, #0
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7ff fcb5 	bl	800403c <LL_ADC_GetOffsetChannel>
 80046d2:	4603      	mov	r3, r0
 80046d4:	0e9b      	lsrs	r3, r3, #26
 80046d6:	f003 021f 	and.w	r2, r3, #31
 80046da:	e01e      	b.n	800471a <HAL_ADC_ConfigChannel+0x1c2>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2100      	movs	r1, #0
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7ff fcaa 	bl	800403c <LL_ADC_GetOffsetChannel>
 80046e8:	4603      	mov	r3, r0
 80046ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80046f2:	fa93 f3a3 	rbit	r3, r3
 80046f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80046fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80046fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004702:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800470a:	2320      	movs	r3, #32
 800470c:	e004      	b.n	8004718 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800470e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004712:	fab3 f383 	clz	r3, r3
 8004716:	b2db      	uxtb	r3, r3
 8004718:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004722:	2b00      	cmp	r3, #0
 8004724:	d105      	bne.n	8004732 <HAL_ADC_ConfigChannel+0x1da>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	0e9b      	lsrs	r3, r3, #26
 800472c:	f003 031f 	and.w	r3, r3, #31
 8004730:	e018      	b.n	8004764 <HAL_ADC_ConfigChannel+0x20c>
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800473a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800473e:	fa93 f3a3 	rbit	r3, r3
 8004742:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004746:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800474a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800474e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8004756:	2320      	movs	r3, #32
 8004758:	e004      	b.n	8004764 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800475a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800475e:	fab3 f383 	clz	r3, r3
 8004762:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004764:	429a      	cmp	r2, r3
 8004766:	d106      	bne.n	8004776 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2200      	movs	r2, #0
 800476e:	2100      	movs	r1, #0
 8004770:	4618      	mov	r0, r3
 8004772:	f7ff fc79 	bl	8004068 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2101      	movs	r1, #1
 800477c:	4618      	mov	r0, r3
 800477e:	f7ff fc5d 	bl	800403c <LL_ADC_GetOffsetChannel>
 8004782:	4603      	mov	r3, r0
 8004784:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10a      	bne.n	80047a2 <HAL_ADC_ConfigChannel+0x24a>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2101      	movs	r1, #1
 8004792:	4618      	mov	r0, r3
 8004794:	f7ff fc52 	bl	800403c <LL_ADC_GetOffsetChannel>
 8004798:	4603      	mov	r3, r0
 800479a:	0e9b      	lsrs	r3, r3, #26
 800479c:	f003 021f 	and.w	r2, r3, #31
 80047a0:	e01e      	b.n	80047e0 <HAL_ADC_ConfigChannel+0x288>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2101      	movs	r1, #1
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7ff fc47 	bl	800403c <LL_ADC_GetOffsetChannel>
 80047ae:	4603      	mov	r3, r0
 80047b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047b8:	fa93 f3a3 	rbit	r3, r3
 80047bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80047c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80047c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d101      	bne.n	80047d4 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80047d0:	2320      	movs	r3, #32
 80047d2:	e004      	b.n	80047de <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80047d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80047d8:	fab3 f383 	clz	r3, r3
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d105      	bne.n	80047f8 <HAL_ADC_ConfigChannel+0x2a0>
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	0e9b      	lsrs	r3, r3, #26
 80047f2:	f003 031f 	and.w	r3, r3, #31
 80047f6:	e018      	b.n	800482a <HAL_ADC_ConfigChannel+0x2d2>
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004800:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004804:	fa93 f3a3 	rbit	r3, r3
 8004808:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800480c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004810:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004814:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004818:	2b00      	cmp	r3, #0
 800481a:	d101      	bne.n	8004820 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 800481c:	2320      	movs	r3, #32
 800481e:	e004      	b.n	800482a <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8004820:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004824:	fab3 f383 	clz	r3, r3
 8004828:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800482a:	429a      	cmp	r2, r3
 800482c:	d106      	bne.n	800483c <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2200      	movs	r2, #0
 8004834:	2101      	movs	r1, #1
 8004836:	4618      	mov	r0, r3
 8004838:	f7ff fc16 	bl	8004068 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2102      	movs	r1, #2
 8004842:	4618      	mov	r0, r3
 8004844:	f7ff fbfa 	bl	800403c <LL_ADC_GetOffsetChannel>
 8004848:	4603      	mov	r3, r0
 800484a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10a      	bne.n	8004868 <HAL_ADC_ConfigChannel+0x310>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2102      	movs	r1, #2
 8004858:	4618      	mov	r0, r3
 800485a:	f7ff fbef 	bl	800403c <LL_ADC_GetOffsetChannel>
 800485e:	4603      	mov	r3, r0
 8004860:	0e9b      	lsrs	r3, r3, #26
 8004862:	f003 021f 	and.w	r2, r3, #31
 8004866:	e01e      	b.n	80048a6 <HAL_ADC_ConfigChannel+0x34e>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2102      	movs	r1, #2
 800486e:	4618      	mov	r0, r3
 8004870:	f7ff fbe4 	bl	800403c <LL_ADC_GetOffsetChannel>
 8004874:	4603      	mov	r3, r0
 8004876:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800487e:	fa93 f3a3 	rbit	r3, r3
 8004882:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004886:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800488a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800488e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8004896:	2320      	movs	r3, #32
 8004898:	e004      	b.n	80048a4 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800489a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800489e:	fab3 f383 	clz	r3, r3
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d105      	bne.n	80048be <HAL_ADC_ConfigChannel+0x366>
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	0e9b      	lsrs	r3, r3, #26
 80048b8:	f003 031f 	and.w	r3, r3, #31
 80048bc:	e014      	b.n	80048e8 <HAL_ADC_ConfigChannel+0x390>
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80048c6:	fa93 f3a3 	rbit	r3, r3
 80048ca:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80048cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80048d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80048da:	2320      	movs	r3, #32
 80048dc:	e004      	b.n	80048e8 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80048de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80048e2:	fab3 f383 	clz	r3, r3
 80048e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d106      	bne.n	80048fa <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2200      	movs	r2, #0
 80048f2:	2102      	movs	r1, #2
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7ff fbb7 	bl	8004068 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2103      	movs	r1, #3
 8004900:	4618      	mov	r0, r3
 8004902:	f7ff fb9b 	bl	800403c <LL_ADC_GetOffsetChannel>
 8004906:	4603      	mov	r3, r0
 8004908:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10a      	bne.n	8004926 <HAL_ADC_ConfigChannel+0x3ce>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2103      	movs	r1, #3
 8004916:	4618      	mov	r0, r3
 8004918:	f7ff fb90 	bl	800403c <LL_ADC_GetOffsetChannel>
 800491c:	4603      	mov	r3, r0
 800491e:	0e9b      	lsrs	r3, r3, #26
 8004920:	f003 021f 	and.w	r2, r3, #31
 8004924:	e017      	b.n	8004956 <HAL_ADC_ConfigChannel+0x3fe>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2103      	movs	r1, #3
 800492c:	4618      	mov	r0, r3
 800492e:	f7ff fb85 	bl	800403c <LL_ADC_GetOffsetChannel>
 8004932:	4603      	mov	r3, r0
 8004934:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004936:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004938:	fa93 f3a3 	rbit	r3, r3
 800493c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800493e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004940:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004942:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004944:	2b00      	cmp	r3, #0
 8004946:	d101      	bne.n	800494c <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8004948:	2320      	movs	r3, #32
 800494a:	e003      	b.n	8004954 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 800494c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800494e:	fab3 f383 	clz	r3, r3
 8004952:	b2db      	uxtb	r3, r3
 8004954:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800495e:	2b00      	cmp	r3, #0
 8004960:	d105      	bne.n	800496e <HAL_ADC_ConfigChannel+0x416>
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	0e9b      	lsrs	r3, r3, #26
 8004968:	f003 031f 	and.w	r3, r3, #31
 800496c:	e011      	b.n	8004992 <HAL_ADC_ConfigChannel+0x43a>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004974:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004976:	fa93 f3a3 	rbit	r3, r3
 800497a:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800497c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800497e:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004980:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8004986:	2320      	movs	r3, #32
 8004988:	e003      	b.n	8004992 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800498a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800498c:	fab3 f383 	clz	r3, r3
 8004990:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004992:	429a      	cmp	r2, r3
 8004994:	d106      	bne.n	80049a4 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2200      	movs	r2, #0
 800499c:	2103      	movs	r1, #3
 800499e:	4618      	mov	r0, r3
 80049a0:	f7ff fb62 	bl	8004068 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7ff fc55 	bl	8004258 <LL_ADC_IsEnabled>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f040 813f 	bne.w	8004c34 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6818      	ldr	r0, [r3, #0]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	6819      	ldr	r1, [r3, #0]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	461a      	mov	r2, r3
 80049c4:	f7ff fbd6 	bl	8004174 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	4a8e      	ldr	r2, [pc, #568]	; (8004c08 <HAL_ADC_ConfigChannel+0x6b0>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	f040 8130 	bne.w	8004c34 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10b      	bne.n	80049fc <HAL_ADC_ConfigChannel+0x4a4>
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	0e9b      	lsrs	r3, r3, #26
 80049ea:	3301      	adds	r3, #1
 80049ec:	f003 031f 	and.w	r3, r3, #31
 80049f0:	2b09      	cmp	r3, #9
 80049f2:	bf94      	ite	ls
 80049f4:	2301      	movls	r3, #1
 80049f6:	2300      	movhi	r3, #0
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	e019      	b.n	8004a30 <HAL_ADC_ConfigChannel+0x4d8>
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a04:	fa93 f3a3 	rbit	r3, r3
 8004a08:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004a0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8004a14:	2320      	movs	r3, #32
 8004a16:	e003      	b.n	8004a20 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8004a18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a1a:	fab3 f383 	clz	r3, r3
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	3301      	adds	r3, #1
 8004a22:	f003 031f 	and.w	r3, r3, #31
 8004a26:	2b09      	cmp	r3, #9
 8004a28:	bf94      	ite	ls
 8004a2a:	2301      	movls	r3, #1
 8004a2c:	2300      	movhi	r3, #0
 8004a2e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d079      	beq.n	8004b28 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d107      	bne.n	8004a50 <HAL_ADC_ConfigChannel+0x4f8>
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	0e9b      	lsrs	r3, r3, #26
 8004a46:	3301      	adds	r3, #1
 8004a48:	069b      	lsls	r3, r3, #26
 8004a4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a4e:	e015      	b.n	8004a7c <HAL_ADC_ConfigChannel+0x524>
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a58:	fa93 f3a3 	rbit	r3, r3
 8004a5c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004a5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a60:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8004a68:	2320      	movs	r3, #32
 8004a6a:	e003      	b.n	8004a74 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8004a6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a6e:	fab3 f383 	clz	r3, r3
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	3301      	adds	r3, #1
 8004a76:	069b      	lsls	r3, r3, #26
 8004a78:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d109      	bne.n	8004a9c <HAL_ADC_ConfigChannel+0x544>
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	0e9b      	lsrs	r3, r3, #26
 8004a8e:	3301      	adds	r3, #1
 8004a90:	f003 031f 	and.w	r3, r3, #31
 8004a94:	2101      	movs	r1, #1
 8004a96:	fa01 f303 	lsl.w	r3, r1, r3
 8004a9a:	e017      	b.n	8004acc <HAL_ADC_ConfigChannel+0x574>
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aa4:	fa93 f3a3 	rbit	r3, r3
 8004aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aac:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004aae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d101      	bne.n	8004ab8 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8004ab4:	2320      	movs	r3, #32
 8004ab6:	e003      	b.n	8004ac0 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8004ab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aba:	fab3 f383 	clz	r3, r3
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	f003 031f 	and.w	r3, r3, #31
 8004ac6:	2101      	movs	r1, #1
 8004ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8004acc:	ea42 0103 	orr.w	r1, r2, r3
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10a      	bne.n	8004af2 <HAL_ADC_ConfigChannel+0x59a>
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	0e9b      	lsrs	r3, r3, #26
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	f003 021f 	and.w	r2, r3, #31
 8004ae8:	4613      	mov	r3, r2
 8004aea:	005b      	lsls	r3, r3, #1
 8004aec:	4413      	add	r3, r2
 8004aee:	051b      	lsls	r3, r3, #20
 8004af0:	e018      	b.n	8004b24 <HAL_ADC_ConfigChannel+0x5cc>
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004afa:	fa93 f3a3 	rbit	r3, r3
 8004afe:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b02:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8004b0a:	2320      	movs	r3, #32
 8004b0c:	e003      	b.n	8004b16 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8004b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b10:	fab3 f383 	clz	r3, r3
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	3301      	adds	r3, #1
 8004b18:	f003 021f 	and.w	r2, r3, #31
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	4413      	add	r3, r2
 8004b22:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b24:	430b      	orrs	r3, r1
 8004b26:	e080      	b.n	8004c2a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d107      	bne.n	8004b44 <HAL_ADC_ConfigChannel+0x5ec>
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	0e9b      	lsrs	r3, r3, #26
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	069b      	lsls	r3, r3, #26
 8004b3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b42:	e015      	b.n	8004b70 <HAL_ADC_ConfigChannel+0x618>
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4c:	fa93 f3a3 	rbit	r3, r3
 8004b50:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8004b5c:	2320      	movs	r3, #32
 8004b5e:	e003      	b.n	8004b68 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8004b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b62:	fab3 f383 	clz	r3, r3
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	3301      	adds	r3, #1
 8004b6a:	069b      	lsls	r3, r3, #26
 8004b6c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d109      	bne.n	8004b90 <HAL_ADC_ConfigChannel+0x638>
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	0e9b      	lsrs	r3, r3, #26
 8004b82:	3301      	adds	r3, #1
 8004b84:	f003 031f 	and.w	r3, r3, #31
 8004b88:	2101      	movs	r1, #1
 8004b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b8e:	e017      	b.n	8004bc0 <HAL_ADC_ConfigChannel+0x668>
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	fa93 f3a3 	rbit	r3, r3
 8004b9c:	61bb      	str	r3, [r7, #24]
  return result;
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004ba2:	6a3b      	ldr	r3, [r7, #32]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d101      	bne.n	8004bac <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8004ba8:	2320      	movs	r3, #32
 8004baa:	e003      	b.n	8004bb4 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8004bac:	6a3b      	ldr	r3, [r7, #32]
 8004bae:	fab3 f383 	clz	r3, r3
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	f003 031f 	and.w	r3, r3, #31
 8004bba:	2101      	movs	r1, #1
 8004bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8004bc0:	ea42 0103 	orr.w	r1, r2, r3
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10d      	bne.n	8004bec <HAL_ADC_ConfigChannel+0x694>
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	0e9b      	lsrs	r3, r3, #26
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	f003 021f 	and.w	r2, r3, #31
 8004bdc:	4613      	mov	r3, r2
 8004bde:	005b      	lsls	r3, r3, #1
 8004be0:	4413      	add	r3, r2
 8004be2:	3b1e      	subs	r3, #30
 8004be4:	051b      	lsls	r3, r3, #20
 8004be6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004bea:	e01d      	b.n	8004c28 <HAL_ADC_ConfigChannel+0x6d0>
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	fa93 f3a3 	rbit	r3, r3
 8004bf8:	60fb      	str	r3, [r7, #12]
  return result;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d103      	bne.n	8004c0c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8004c04:	2320      	movs	r3, #32
 8004c06:	e005      	b.n	8004c14 <HAL_ADC_ConfigChannel+0x6bc>
 8004c08:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	fab3 f383 	clz	r3, r3
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	3301      	adds	r3, #1
 8004c16:	f003 021f 	and.w	r2, r3, #31
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	005b      	lsls	r3, r3, #1
 8004c1e:	4413      	add	r3, r2
 8004c20:	3b1e      	subs	r3, #30
 8004c22:	051b      	lsls	r3, r3, #20
 8004c24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c28:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c2e:	4619      	mov	r1, r3
 8004c30:	f7ff fa74 	bl	800411c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	4b3d      	ldr	r3, [pc, #244]	; (8004d30 <HAL_ADC_ConfigChannel+0x7d8>)
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d06c      	beq.n	8004d1a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c40:	483c      	ldr	r0, [pc, #240]	; (8004d34 <HAL_ADC_ConfigChannel+0x7dc>)
 8004c42:	f7ff f9c9 	bl	8003fd8 <LL_ADC_GetCommonPathInternalCh>
 8004c46:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a3a      	ldr	r2, [pc, #232]	; (8004d38 <HAL_ADC_ConfigChannel+0x7e0>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d127      	bne.n	8004ca4 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004c54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d121      	bne.n	8004ca4 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a35      	ldr	r2, [pc, #212]	; (8004d3c <HAL_ADC_ConfigChannel+0x7e4>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d157      	bne.n	8004d1a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c72:	4619      	mov	r1, r3
 8004c74:	482f      	ldr	r0, [pc, #188]	; (8004d34 <HAL_ADC_ConfigChannel+0x7dc>)
 8004c76:	f7ff f99c 	bl	8003fb2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c7a:	4b31      	ldr	r3, [pc, #196]	; (8004d40 <HAL_ADC_ConfigChannel+0x7e8>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	099b      	lsrs	r3, r3, #6
 8004c80:	4a30      	ldr	r2, [pc, #192]	; (8004d44 <HAL_ADC_ConfigChannel+0x7ec>)
 8004c82:	fba2 2303 	umull	r2, r3, r2, r3
 8004c86:	099b      	lsrs	r3, r3, #6
 8004c88:	1c5a      	adds	r2, r3, #1
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	4413      	add	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004c94:	e002      	b.n	8004c9c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1f9      	bne.n	8004c96 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ca2:	e03a      	b.n	8004d1a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a27      	ldr	r2, [pc, #156]	; (8004d48 <HAL_ADC_ConfigChannel+0x7f0>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d113      	bne.n	8004cd6 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004cae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004cb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10d      	bne.n	8004cd6 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a1f      	ldr	r2, [pc, #124]	; (8004d3c <HAL_ADC_ConfigChannel+0x7e4>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d12a      	bne.n	8004d1a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004cc4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004cc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4819      	ldr	r0, [pc, #100]	; (8004d34 <HAL_ADC_ConfigChannel+0x7dc>)
 8004cd0:	f7ff f96f 	bl	8003fb2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004cd4:	e021      	b.n	8004d1a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a1c      	ldr	r2, [pc, #112]	; (8004d4c <HAL_ADC_ConfigChannel+0x7f4>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d11c      	bne.n	8004d1a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004ce0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004ce4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d116      	bne.n	8004d1a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a12      	ldr	r2, [pc, #72]	; (8004d3c <HAL_ADC_ConfigChannel+0x7e4>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d111      	bne.n	8004d1a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004cf6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004cfa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004cfe:	4619      	mov	r1, r3
 8004d00:	480c      	ldr	r0, [pc, #48]	; (8004d34 <HAL_ADC_ConfigChannel+0x7dc>)
 8004d02:	f7ff f956 	bl	8003fb2 <LL_ADC_SetCommonPathInternalCh>
 8004d06:	e008      	b.n	8004d1a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d0c:	f043 0220 	orr.w	r2, r3, #32
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8004d22:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	37d8      	adds	r7, #216	; 0xd8
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	80080000 	.word	0x80080000
 8004d34:	50040300 	.word	0x50040300
 8004d38:	c7520000 	.word	0xc7520000
 8004d3c:	50040000 	.word	0x50040000
 8004d40:	2000003c 	.word	0x2000003c
 8004d44:	053e2d63 	.word	0x053e2d63
 8004d48:	cb840000 	.word	0xcb840000
 8004d4c:	80000001 	.word	0x80000001

08004d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f003 0307 	and.w	r3, r3, #7
 8004d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d60:	4b0c      	ldr	r3, [pc, #48]	; (8004d94 <__NVIC_SetPriorityGrouping+0x44>)
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d66:	68ba      	ldr	r2, [r7, #8]
 8004d68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d82:	4a04      	ldr	r2, [pc, #16]	; (8004d94 <__NVIC_SetPriorityGrouping+0x44>)
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	60d3      	str	r3, [r2, #12]
}
 8004d88:	bf00      	nop
 8004d8a:	3714      	adds	r7, #20
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr
 8004d94:	e000ed00 	.word	0xe000ed00

08004d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d9c:	4b04      	ldr	r3, [pc, #16]	; (8004db0 <__NVIC_GetPriorityGrouping+0x18>)
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	0a1b      	lsrs	r3, r3, #8
 8004da2:	f003 0307 	and.w	r3, r3, #7
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr
 8004db0:	e000ed00 	.word	0xe000ed00

08004db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	4603      	mov	r3, r0
 8004dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	db0b      	blt.n	8004dde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dc6:	79fb      	ldrb	r3, [r7, #7]
 8004dc8:	f003 021f 	and.w	r2, r3, #31
 8004dcc:	4907      	ldr	r1, [pc, #28]	; (8004dec <__NVIC_EnableIRQ+0x38>)
 8004dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dd2:	095b      	lsrs	r3, r3, #5
 8004dd4:	2001      	movs	r0, #1
 8004dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8004dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004dde:	bf00      	nop
 8004de0:	370c      	adds	r7, #12
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	e000e100 	.word	0xe000e100

08004df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	4603      	mov	r3, r0
 8004df8:	6039      	str	r1, [r7, #0]
 8004dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	db0a      	blt.n	8004e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	b2da      	uxtb	r2, r3
 8004e08:	490c      	ldr	r1, [pc, #48]	; (8004e3c <__NVIC_SetPriority+0x4c>)
 8004e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e0e:	0112      	lsls	r2, r2, #4
 8004e10:	b2d2      	uxtb	r2, r2
 8004e12:	440b      	add	r3, r1
 8004e14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e18:	e00a      	b.n	8004e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	b2da      	uxtb	r2, r3
 8004e1e:	4908      	ldr	r1, [pc, #32]	; (8004e40 <__NVIC_SetPriority+0x50>)
 8004e20:	79fb      	ldrb	r3, [r7, #7]
 8004e22:	f003 030f 	and.w	r3, r3, #15
 8004e26:	3b04      	subs	r3, #4
 8004e28:	0112      	lsls	r2, r2, #4
 8004e2a:	b2d2      	uxtb	r2, r2
 8004e2c:	440b      	add	r3, r1
 8004e2e:	761a      	strb	r2, [r3, #24]
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	e000e100 	.word	0xe000e100
 8004e40:	e000ed00 	.word	0xe000ed00

08004e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b089      	sub	sp, #36	; 0x24
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f003 0307 	and.w	r3, r3, #7
 8004e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	f1c3 0307 	rsb	r3, r3, #7
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	bf28      	it	cs
 8004e62:	2304      	movcs	r3, #4
 8004e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	3304      	adds	r3, #4
 8004e6a:	2b06      	cmp	r3, #6
 8004e6c:	d902      	bls.n	8004e74 <NVIC_EncodePriority+0x30>
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	3b03      	subs	r3, #3
 8004e72:	e000      	b.n	8004e76 <NVIC_EncodePriority+0x32>
 8004e74:	2300      	movs	r3, #0
 8004e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e78:	f04f 32ff 	mov.w	r2, #4294967295
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e82:	43da      	mvns	r2, r3
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	401a      	ands	r2, r3
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	fa01 f303 	lsl.w	r3, r1, r3
 8004e96:	43d9      	mvns	r1, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e9c:	4313      	orrs	r3, r2
         );
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3724      	adds	r7, #36	; 0x24
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b082      	sub	sp, #8
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7ff ff4c 	bl	8004d50 <__NVIC_SetPriorityGrouping>
}
 8004eb8:	bf00      	nop
 8004eba:	3708      	adds	r7, #8
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
 8004ecc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ed2:	f7ff ff61 	bl	8004d98 <__NVIC_GetPriorityGrouping>
 8004ed6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	68b9      	ldr	r1, [r7, #8]
 8004edc:	6978      	ldr	r0, [r7, #20]
 8004ede:	f7ff ffb1 	bl	8004e44 <NVIC_EncodePriority>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ee8:	4611      	mov	r1, r2
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7ff ff80 	bl	8004df0 <__NVIC_SetPriority>
}
 8004ef0:	bf00      	nop
 8004ef2:	3718      	adds	r7, #24
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	4603      	mov	r3, r0
 8004f00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7ff ff54 	bl	8004db4 <__NVIC_EnableIRQ>
}
 8004f0c:	bf00      	nop
 8004f0e:	3708      	adds	r7, #8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e0ac      	b.n	8005080 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 f8b2 	bl	8005094 <DFSDM_GetChannelFromInstance>
 8004f30:	4603      	mov	r3, r0
 8004f32:	4a55      	ldr	r2, [pc, #340]	; (8005088 <HAL_DFSDM_ChannelInit+0x174>)
 8004f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d001      	beq.n	8004f40 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e09f      	b.n	8005080 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f7fe fb45 	bl	80035d0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8004f46:	4b51      	ldr	r3, [pc, #324]	; (800508c <HAL_DFSDM_ChannelInit+0x178>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	4a4f      	ldr	r2, [pc, #316]	; (800508c <HAL_DFSDM_ChannelInit+0x178>)
 8004f4e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8004f50:	4b4e      	ldr	r3, [pc, #312]	; (800508c <HAL_DFSDM_ChannelInit+0x178>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d125      	bne.n	8004fa4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004f58:	4b4d      	ldr	r3, [pc, #308]	; (8005090 <HAL_DFSDM_ChannelInit+0x17c>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a4c      	ldr	r2, [pc, #304]	; (8005090 <HAL_DFSDM_ChannelInit+0x17c>)
 8004f5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f62:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8004f64:	4b4a      	ldr	r3, [pc, #296]	; (8005090 <HAL_DFSDM_ChannelInit+0x17c>)
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	4948      	ldr	r1, [pc, #288]	; (8005090 <HAL_DFSDM_ChannelInit+0x17c>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8004f72:	4b47      	ldr	r3, [pc, #284]	; (8005090 <HAL_DFSDM_ChannelInit+0x17c>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a46      	ldr	r2, [pc, #280]	; (8005090 <HAL_DFSDM_ChannelInit+0x17c>)
 8004f78:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8004f7c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	791b      	ldrb	r3, [r3, #4]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d108      	bne.n	8004f98 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8004f86:	4b42      	ldr	r3, [pc, #264]	; (8005090 <HAL_DFSDM_ChannelInit+0x17c>)
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	041b      	lsls	r3, r3, #16
 8004f92:	493f      	ldr	r1, [pc, #252]	; (8005090 <HAL_DFSDM_ChannelInit+0x17c>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004f98:	4b3d      	ldr	r3, [pc, #244]	; (8005090 <HAL_DFSDM_ChannelInit+0x17c>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a3c      	ldr	r2, [pc, #240]	; (8005090 <HAL_DFSDM_ChannelInit+0x17c>)
 8004f9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004fa2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8004fb2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6819      	ldr	r1, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004fc2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004fc8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 020f 	bic.w	r2, r2, #15
 8004fe0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	6819      	ldr	r1, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004ff0:	431a      	orrs	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	689a      	ldr	r2, [r3, #8]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8005008:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	6899      	ldr	r1, [r3, #8]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005018:	3b01      	subs	r3, #1
 800501a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800501c:	431a      	orrs	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	430a      	orrs	r2, r1
 8005024:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f002 0207 	and.w	r2, r2, #7
 8005034:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6859      	ldr	r1, [r3, #4]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005040:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005046:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8005048:	431a      	orrs	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	430a      	orrs	r2, r1
 8005050:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005060:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4618      	mov	r0, r3
 8005070:	f000 f810 	bl	8005094 <DFSDM_GetChannelFromInstance>
 8005074:	4602      	mov	r2, r0
 8005076:	4904      	ldr	r1, [pc, #16]	; (8005088 <HAL_DFSDM_ChannelInit+0x174>)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3708      	adds	r7, #8
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	20001320 	.word	0x20001320
 800508c:	2000131c 	.word	0x2000131c
 8005090:	40016000 	.word	0x40016000

08005094 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a1c      	ldr	r2, [pc, #112]	; (8005110 <DFSDM_GetChannelFromInstance+0x7c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d102      	bne.n	80050aa <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80050a4:	2300      	movs	r3, #0
 80050a6:	60fb      	str	r3, [r7, #12]
 80050a8:	e02b      	b.n	8005102 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a19      	ldr	r2, [pc, #100]	; (8005114 <DFSDM_GetChannelFromInstance+0x80>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d102      	bne.n	80050b8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80050b2:	2301      	movs	r3, #1
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	e024      	b.n	8005102 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a17      	ldr	r2, [pc, #92]	; (8005118 <DFSDM_GetChannelFromInstance+0x84>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d102      	bne.n	80050c6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80050c0:	2302      	movs	r3, #2
 80050c2:	60fb      	str	r3, [r7, #12]
 80050c4:	e01d      	b.n	8005102 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a14      	ldr	r2, [pc, #80]	; (800511c <DFSDM_GetChannelFromInstance+0x88>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d102      	bne.n	80050d4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80050ce:	2304      	movs	r3, #4
 80050d0:	60fb      	str	r3, [r7, #12]
 80050d2:	e016      	b.n	8005102 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a12      	ldr	r2, [pc, #72]	; (8005120 <DFSDM_GetChannelFromInstance+0x8c>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d102      	bne.n	80050e2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80050dc:	2305      	movs	r3, #5
 80050de:	60fb      	str	r3, [r7, #12]
 80050e0:	e00f      	b.n	8005102 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a0f      	ldr	r2, [pc, #60]	; (8005124 <DFSDM_GetChannelFromInstance+0x90>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d102      	bne.n	80050f0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80050ea:	2306      	movs	r3, #6
 80050ec:	60fb      	str	r3, [r7, #12]
 80050ee:	e008      	b.n	8005102 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a0d      	ldr	r2, [pc, #52]	; (8005128 <DFSDM_GetChannelFromInstance+0x94>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d102      	bne.n	80050fe <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80050f8:	2307      	movs	r3, #7
 80050fa:	60fb      	str	r3, [r7, #12]
 80050fc:	e001      	b.n	8005102 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80050fe:	2303      	movs	r3, #3
 8005100:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8005102:	68fb      	ldr	r3, [r7, #12]
}
 8005104:	4618      	mov	r0, r3
 8005106:	3714      	adds	r7, #20
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	40016000 	.word	0x40016000
 8005114:	40016020 	.word	0x40016020
 8005118:	40016040 	.word	0x40016040
 800511c:	40016080 	.word	0x40016080
 8005120:	400160a0 	.word	0x400160a0
 8005124:	400160c0 	.word	0x400160c0
 8005128:	400160e0 	.word	0x400160e0

0800512c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005134:	2300      	movs	r3, #0
 8005136:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b02      	cmp	r3, #2
 8005142:	d008      	beq.n	8005156 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2204      	movs	r2, #4
 8005148:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e040      	b.n	80051d8 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f022 020e 	bic.w	r2, r2, #14
 8005164:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005170:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005174:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 0201 	bic.w	r2, r2, #1
 8005184:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800518a:	f003 021c 	and.w	r2, r3, #28
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	2101      	movs	r1, #1
 8005194:	fa01 f202 	lsl.w	r2, r1, r2
 8005198:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80051a2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00c      	beq.n	80051c6 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051ba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80051c4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80051d6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3714      	adds	r7, #20
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051ec:	2300      	movs	r3, #0
 80051ee:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d005      	beq.n	8005208 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2204      	movs	r2, #4
 8005200:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	73fb      	strb	r3, [r7, #15]
 8005206:	e047      	b.n	8005298 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f022 020e 	bic.w	r2, r2, #14
 8005216:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f022 0201 	bic.w	r2, r2, #1
 8005226:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005232:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005236:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800523c:	f003 021c 	and.w	r2, r3, #28
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005244:	2101      	movs	r1, #1
 8005246:	fa01 f202 	lsl.w	r2, r1, r2
 800524a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005254:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00c      	beq.n	8005278 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005268:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800526c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005276:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528c:	2b00      	cmp	r3, #0
 800528e:	d003      	beq.n	8005298 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	4798      	blx	r3
    }
  }
  return status;
 8005298:	7bfb      	ldrb	r3, [r7, #15]
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b083      	sub	sp, #12
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80052b0:	b2db      	uxtb	r3, r3
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
	...

080052c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b087      	sub	sp, #28
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80052ca:	2300      	movs	r3, #0
 80052cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80052ce:	e166      	b.n	800559e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	2101      	movs	r1, #1
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	fa01 f303 	lsl.w	r3, r1, r3
 80052dc:	4013      	ands	r3, r2
 80052de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f000 8158 	beq.w	8005598 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f003 0303 	and.w	r3, r3, #3
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d005      	beq.n	8005300 <HAL_GPIO_Init+0x40>
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f003 0303 	and.w	r3, r3, #3
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d130      	bne.n	8005362 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	005b      	lsls	r3, r3, #1
 800530a:	2203      	movs	r2, #3
 800530c:	fa02 f303 	lsl.w	r3, r2, r3
 8005310:	43db      	mvns	r3, r3
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	4013      	ands	r3, r2
 8005316:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	68da      	ldr	r2, [r3, #12]
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	005b      	lsls	r3, r3, #1
 8005320:	fa02 f303 	lsl.w	r3, r2, r3
 8005324:	693a      	ldr	r2, [r7, #16]
 8005326:	4313      	orrs	r3, r2
 8005328:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005336:	2201      	movs	r2, #1
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	fa02 f303 	lsl.w	r3, r2, r3
 800533e:	43db      	mvns	r3, r3
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	4013      	ands	r3, r2
 8005344:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	091b      	lsrs	r3, r3, #4
 800534c:	f003 0201 	and.w	r2, r3, #1
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	fa02 f303 	lsl.w	r3, r2, r3
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	4313      	orrs	r3, r2
 800535a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f003 0303 	and.w	r3, r3, #3
 800536a:	2b03      	cmp	r3, #3
 800536c:	d017      	beq.n	800539e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	005b      	lsls	r3, r3, #1
 8005378:	2203      	movs	r2, #3
 800537a:	fa02 f303 	lsl.w	r3, r2, r3
 800537e:	43db      	mvns	r3, r3
 8005380:	693a      	ldr	r2, [r7, #16]
 8005382:	4013      	ands	r3, r2
 8005384:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	689a      	ldr	r2, [r3, #8]
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	005b      	lsls	r3, r3, #1
 800538e:	fa02 f303 	lsl.w	r3, r2, r3
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	4313      	orrs	r3, r2
 8005396:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f003 0303 	and.w	r3, r3, #3
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d123      	bne.n	80053f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	08da      	lsrs	r2, r3, #3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	3208      	adds	r2, #8
 80053b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	f003 0307 	and.w	r3, r3, #7
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	220f      	movs	r2, #15
 80053c2:	fa02 f303 	lsl.w	r3, r2, r3
 80053c6:	43db      	mvns	r3, r3
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	4013      	ands	r3, r2
 80053cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	691a      	ldr	r2, [r3, #16]
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	f003 0307 	and.w	r3, r3, #7
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	fa02 f303 	lsl.w	r3, r2, r3
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	08da      	lsrs	r2, r3, #3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	3208      	adds	r2, #8
 80053ec:	6939      	ldr	r1, [r7, #16]
 80053ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	005b      	lsls	r3, r3, #1
 80053fc:	2203      	movs	r2, #3
 80053fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005402:	43db      	mvns	r3, r3
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	4013      	ands	r3, r2
 8005408:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f003 0203 	and.w	r2, r3, #3
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	fa02 f303 	lsl.w	r3, r2, r3
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	4313      	orrs	r3, r2
 800541e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800542e:	2b00      	cmp	r3, #0
 8005430:	f000 80b2 	beq.w	8005598 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005434:	4b61      	ldr	r3, [pc, #388]	; (80055bc <HAL_GPIO_Init+0x2fc>)
 8005436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005438:	4a60      	ldr	r2, [pc, #384]	; (80055bc <HAL_GPIO_Init+0x2fc>)
 800543a:	f043 0301 	orr.w	r3, r3, #1
 800543e:	6613      	str	r3, [r2, #96]	; 0x60
 8005440:	4b5e      	ldr	r3, [pc, #376]	; (80055bc <HAL_GPIO_Init+0x2fc>)
 8005442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005444:	f003 0301 	and.w	r3, r3, #1
 8005448:	60bb      	str	r3, [r7, #8]
 800544a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800544c:	4a5c      	ldr	r2, [pc, #368]	; (80055c0 <HAL_GPIO_Init+0x300>)
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	089b      	lsrs	r3, r3, #2
 8005452:	3302      	adds	r3, #2
 8005454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005458:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	f003 0303 	and.w	r3, r3, #3
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	220f      	movs	r2, #15
 8005464:	fa02 f303 	lsl.w	r3, r2, r3
 8005468:	43db      	mvns	r3, r3
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	4013      	ands	r3, r2
 800546e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005476:	d02b      	beq.n	80054d0 <HAL_GPIO_Init+0x210>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a52      	ldr	r2, [pc, #328]	; (80055c4 <HAL_GPIO_Init+0x304>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d025      	beq.n	80054cc <HAL_GPIO_Init+0x20c>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a51      	ldr	r2, [pc, #324]	; (80055c8 <HAL_GPIO_Init+0x308>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d01f      	beq.n	80054c8 <HAL_GPIO_Init+0x208>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a50      	ldr	r2, [pc, #320]	; (80055cc <HAL_GPIO_Init+0x30c>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d019      	beq.n	80054c4 <HAL_GPIO_Init+0x204>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a4f      	ldr	r2, [pc, #316]	; (80055d0 <HAL_GPIO_Init+0x310>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d013      	beq.n	80054c0 <HAL_GPIO_Init+0x200>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a4e      	ldr	r2, [pc, #312]	; (80055d4 <HAL_GPIO_Init+0x314>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d00d      	beq.n	80054bc <HAL_GPIO_Init+0x1fc>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a4d      	ldr	r2, [pc, #308]	; (80055d8 <HAL_GPIO_Init+0x318>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d007      	beq.n	80054b8 <HAL_GPIO_Init+0x1f8>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a4c      	ldr	r2, [pc, #304]	; (80055dc <HAL_GPIO_Init+0x31c>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d101      	bne.n	80054b4 <HAL_GPIO_Init+0x1f4>
 80054b0:	2307      	movs	r3, #7
 80054b2:	e00e      	b.n	80054d2 <HAL_GPIO_Init+0x212>
 80054b4:	2308      	movs	r3, #8
 80054b6:	e00c      	b.n	80054d2 <HAL_GPIO_Init+0x212>
 80054b8:	2306      	movs	r3, #6
 80054ba:	e00a      	b.n	80054d2 <HAL_GPIO_Init+0x212>
 80054bc:	2305      	movs	r3, #5
 80054be:	e008      	b.n	80054d2 <HAL_GPIO_Init+0x212>
 80054c0:	2304      	movs	r3, #4
 80054c2:	e006      	b.n	80054d2 <HAL_GPIO_Init+0x212>
 80054c4:	2303      	movs	r3, #3
 80054c6:	e004      	b.n	80054d2 <HAL_GPIO_Init+0x212>
 80054c8:	2302      	movs	r3, #2
 80054ca:	e002      	b.n	80054d2 <HAL_GPIO_Init+0x212>
 80054cc:	2301      	movs	r3, #1
 80054ce:	e000      	b.n	80054d2 <HAL_GPIO_Init+0x212>
 80054d0:	2300      	movs	r3, #0
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	f002 0203 	and.w	r2, r2, #3
 80054d8:	0092      	lsls	r2, r2, #2
 80054da:	4093      	lsls	r3, r2
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	4313      	orrs	r3, r2
 80054e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80054e2:	4937      	ldr	r1, [pc, #220]	; (80055c0 <HAL_GPIO_Init+0x300>)
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	089b      	lsrs	r3, r3, #2
 80054e8:	3302      	adds	r3, #2
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80054f0:	4b3b      	ldr	r3, [pc, #236]	; (80055e0 <HAL_GPIO_Init+0x320>)
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	43db      	mvns	r3, r3
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	4013      	ands	r3, r2
 80054fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d003      	beq.n	8005514 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	4313      	orrs	r3, r2
 8005512:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005514:	4a32      	ldr	r2, [pc, #200]	; (80055e0 <HAL_GPIO_Init+0x320>)
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800551a:	4b31      	ldr	r3, [pc, #196]	; (80055e0 <HAL_GPIO_Init+0x320>)
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	43db      	mvns	r3, r3
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	4013      	ands	r3, r2
 8005528:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d003      	beq.n	800553e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	4313      	orrs	r3, r2
 800553c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800553e:	4a28      	ldr	r2, [pc, #160]	; (80055e0 <HAL_GPIO_Init+0x320>)
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005544:	4b26      	ldr	r3, [pc, #152]	; (80055e0 <HAL_GPIO_Init+0x320>)
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	43db      	mvns	r3, r3
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	4013      	ands	r3, r2
 8005552:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d003      	beq.n	8005568 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	4313      	orrs	r3, r2
 8005566:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005568:	4a1d      	ldr	r2, [pc, #116]	; (80055e0 <HAL_GPIO_Init+0x320>)
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800556e:	4b1c      	ldr	r3, [pc, #112]	; (80055e0 <HAL_GPIO_Init+0x320>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	43db      	mvns	r3, r3
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	4013      	ands	r3, r2
 800557c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	4313      	orrs	r3, r2
 8005590:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005592:	4a13      	ldr	r2, [pc, #76]	; (80055e0 <HAL_GPIO_Init+0x320>)
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	3301      	adds	r3, #1
 800559c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	fa22 f303 	lsr.w	r3, r2, r3
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f47f ae91 	bne.w	80052d0 <HAL_GPIO_Init+0x10>
  }
}
 80055ae:	bf00      	nop
 80055b0:	bf00      	nop
 80055b2:	371c      	adds	r7, #28
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr
 80055bc:	40021000 	.word	0x40021000
 80055c0:	40010000 	.word	0x40010000
 80055c4:	48000400 	.word	0x48000400
 80055c8:	48000800 	.word	0x48000800
 80055cc:	48000c00 	.word	0x48000c00
 80055d0:	48001000 	.word	0x48001000
 80055d4:	48001400 	.word	0x48001400
 80055d8:	48001800 	.word	0x48001800
 80055dc:	48001c00 	.word	0x48001c00
 80055e0:	40010400 	.word	0x40010400

080055e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	460b      	mov	r3, r1
 80055ee:	807b      	strh	r3, [r7, #2]
 80055f0:	4613      	mov	r3, r2
 80055f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80055f4:	787b      	ldrb	r3, [r7, #1]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d003      	beq.n	8005602 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80055fa:	887a      	ldrh	r2, [r7, #2]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005600:	e002      	b.n	8005608 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005602:	887a      	ldrh	r2, [r7, #2]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	4603      	mov	r3, r0
 800561c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800561e:	4b08      	ldr	r3, [pc, #32]	; (8005640 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005620:	695a      	ldr	r2, [r3, #20]
 8005622:	88fb      	ldrh	r3, [r7, #6]
 8005624:	4013      	ands	r3, r2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d006      	beq.n	8005638 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800562a:	4a05      	ldr	r2, [pc, #20]	; (8005640 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800562c:	88fb      	ldrh	r3, [r7, #6]
 800562e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005630:	88fb      	ldrh	r3, [r7, #6]
 8005632:	4618      	mov	r0, r3
 8005634:	f7fd fd1c 	bl	8003070 <HAL_GPIO_EXTI_Callback>
  }
}
 8005638:	bf00      	nop
 800563a:	3708      	adds	r7, #8
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	40010400 	.word	0x40010400

08005644 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e08d      	b.n	8005772 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d106      	bne.n	8005670 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f7fe f814 	bl	8003698 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2224      	movs	r2, #36	; 0x24
 8005674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f022 0201 	bic.w	r2, r2, #1
 8005686:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005694:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	689a      	ldr	r2, [r3, #8]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80056a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d107      	bne.n	80056be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	689a      	ldr	r2, [r3, #8]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056ba:	609a      	str	r2, [r3, #8]
 80056bc:	e006      	b.n	80056cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	689a      	ldr	r2, [r3, #8]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80056ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d108      	bne.n	80056e6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	685a      	ldr	r2, [r3, #4]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056e2:	605a      	str	r2, [r3, #4]
 80056e4:	e007      	b.n	80056f6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	6812      	ldr	r2, [r2, #0]
 8005700:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005708:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68da      	ldr	r2, [r3, #12]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005718:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	691a      	ldr	r2, [r3, #16]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	69d9      	ldr	r1, [r3, #28]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a1a      	ldr	r2, [r3, #32]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	430a      	orrs	r2, r1
 8005742:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f042 0201 	orr.w	r2, r2, #1
 8005752:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2220      	movs	r2, #32
 800575e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
	...

0800577c <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af02      	add	r7, sp, #8
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	4608      	mov	r0, r1
 8005786:	4611      	mov	r1, r2
 8005788:	461a      	mov	r2, r3
 800578a:	4603      	mov	r3, r0
 800578c:	817b      	strh	r3, [r7, #10]
 800578e:	460b      	mov	r3, r1
 8005790:	813b      	strh	r3, [r7, #8]
 8005792:	4613      	mov	r3, r2
 8005794:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b20      	cmp	r3, #32
 80057a0:	d16a      	bne.n	8005878 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d002      	beq.n	80057ae <HAL_I2C_Mem_Write_IT+0x32>
 80057a8:	8bbb      	ldrh	r3, [r7, #28]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d105      	bne.n	80057ba <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057b4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e05f      	b.n	800587a <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057c8:	d101      	bne.n	80057ce <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 80057ca:	2302      	movs	r3, #2
 80057cc:	e055      	b.n	800587a <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d101      	bne.n	80057dc <HAL_I2C_Mem_Write_IT+0x60>
 80057d8:	2302      	movs	r3, #2
 80057da:	e04e      	b.n	800587a <HAL_I2C_Mem_Write_IT+0xfe>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2221      	movs	r2, #33	; 0x21
 80057e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2240      	movs	r2, #64	; 0x40
 80057f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->pBuffPtr    = pData;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	69ba      	ldr	r2, [r7, #24]
 8005804:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	8bba      	ldrh	r2, [r7, #28]
 800580a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	4a1d      	ldr	r2, [pc, #116]	; (8005884 <HAL_I2C_Mem_Write_IT+0x108>)
 8005810:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	4a1c      	ldr	r2, [pc, #112]	; (8005888 <HAL_I2C_Mem_Write_IT+0x10c>)
 8005816:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 8005818:	897a      	ldrh	r2, [r7, #10]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800581e:	88fb      	ldrh	r3, [r7, #6]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d109      	bne.n	8005838 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005824:	893b      	ldrh	r3, [r7, #8]
 8005826:	b2da      	uxtb	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f04f 32ff 	mov.w	r2, #4294967295
 8005834:	651a      	str	r2, [r3, #80]	; 0x50
 8005836:	e00b      	b.n	8005850 <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005838:	893b      	ldrh	r3, [r7, #8]
 800583a:	0a1b      	lsrs	r3, r3, #8
 800583c:	b29b      	uxth	r3, r3
 800583e:	b2da      	uxtb	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8005846:	893b      	ldrh	r3, [r7, #8]
 8005848:	b2db      	uxtb	r3, r3
 800584a:	461a      	mov	r2, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005850:	88fb      	ldrh	r3, [r7, #6]
 8005852:	b2da      	uxtb	r2, r3
 8005854:	8979      	ldrh	r1, [r7, #10]
 8005856:	4b0d      	ldr	r3, [pc, #52]	; (800588c <HAL_I2C_Mem_Write_IT+0x110>)
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	f001 fc6a 	bl	8007138 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800586c:	2101      	movs	r1, #1
 800586e:	68f8      	ldr	r0, [r7, #12]
 8005870:	f001 fc94 	bl	800719c <I2C_Enable_IRQ>

    return HAL_OK;
 8005874:	2300      	movs	r3, #0
 8005876:	e000      	b.n	800587a <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005878:	2302      	movs	r3, #2
  }
}
 800587a:	4618      	mov	r0, r3
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	ffff0000 	.word	0xffff0000
 8005888:	08005de1 	.word	0x08005de1
 800588c:	80002000 	.word	0x80002000

08005890 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af02      	add	r7, sp, #8
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	4608      	mov	r0, r1
 800589a:	4611      	mov	r1, r2
 800589c:	461a      	mov	r2, r3
 800589e:	4603      	mov	r3, r0
 80058a0:	817b      	strh	r3, [r7, #10]
 80058a2:	460b      	mov	r3, r1
 80058a4:	813b      	strh	r3, [r7, #8]
 80058a6:	4613      	mov	r3, r2
 80058a8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b20      	cmp	r3, #32
 80058b4:	d166      	bne.n	8005984 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d002      	beq.n	80058c2 <HAL_I2C_Mem_Read_IT+0x32>
 80058bc:	8bbb      	ldrh	r3, [r7, #28]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d105      	bne.n	80058ce <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058c8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e05b      	b.n	8005986 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058dc:	d101      	bne.n	80058e2 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 80058de:	2302      	movs	r3, #2
 80058e0:	e051      	b.n	8005986 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d101      	bne.n	80058f0 <HAL_I2C_Mem_Read_IT+0x60>
 80058ec:	2302      	movs	r3, #2
 80058ee:	e04a      	b.n	8005986 <HAL_I2C_Mem_Read_IT+0xf6>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2222      	movs	r2, #34	; 0x22
 80058fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2240      	movs	r2, #64	; 0x40
 8005904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	8bba      	ldrh	r2, [r7, #28]
 8005918:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	4a1c      	ldr	r2, [pc, #112]	; (8005990 <HAL_I2C_Mem_Read_IT+0x100>)
 800591e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	4a1c      	ldr	r2, [pc, #112]	; (8005994 <HAL_I2C_Mem_Read_IT+0x104>)
 8005924:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 8005926:	897a      	ldrh	r2, [r7, #10]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800592c:	88fb      	ldrh	r3, [r7, #6]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d109      	bne.n	8005946 <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005932:	893b      	ldrh	r3, [r7, #8]
 8005934:	b2da      	uxtb	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f04f 32ff 	mov.w	r2, #4294967295
 8005942:	651a      	str	r2, [r3, #80]	; 0x50
 8005944:	e00b      	b.n	800595e <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005946:	893b      	ldrh	r3, [r7, #8]
 8005948:	0a1b      	lsrs	r3, r3, #8
 800594a:	b29b      	uxth	r3, r3
 800594c:	b2da      	uxtb	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8005954:	893b      	ldrh	r3, [r7, #8]
 8005956:	b2db      	uxtb	r3, r3
 8005958:	461a      	mov	r2, r3
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800595e:	88fb      	ldrh	r3, [r7, #6]
 8005960:	b2da      	uxtb	r2, r3
 8005962:	8979      	ldrh	r1, [r7, #10]
 8005964:	4b0c      	ldr	r3, [pc, #48]	; (8005998 <HAL_I2C_Mem_Read_IT+0x108>)
 8005966:	9300      	str	r3, [sp, #0]
 8005968:	2300      	movs	r3, #0
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f001 fbe4 	bl	8007138 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005978:	2101      	movs	r1, #1
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f001 fc0e 	bl	800719c <I2C_Enable_IRQ>

    return HAL_OK;
 8005980:	2300      	movs	r3, #0
 8005982:	e000      	b.n	8005986 <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 8005984:	2302      	movs	r3, #2
  }
}
 8005986:	4618      	mov	r0, r3
 8005988:	3710      	adds	r7, #16
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	ffff0000 	.word	0xffff0000
 8005994:	08005de1 	.word	0x08005de1
 8005998:	80002000 	.word	0x80002000

0800599c <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	603b      	str	r3, [r7, #0]
 80059a8:	4613      	mov	r3, r2
 80059aa:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80059b8:	2b28      	cmp	r3, #40	; 0x28
 80059ba:	f040 8098 	bne.w	8005aee <HAL_I2C_Slave_Seq_Transmit_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d002      	beq.n	80059ca <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 80059c4:	88fb      	ldrh	r3, [r7, #6]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d105      	bne.n	80059d6 <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059d0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e08c      	b.n	8005af0 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80059d6:	f248 0101 	movw	r1, #32769	; 0x8001
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f001 fc62 	bl	80072a4 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d101      	bne.n	80059ee <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 80059ea:	2302      	movs	r3, #2
 80059ec:	e080      	b.n	8005af0 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b2a      	cmp	r3, #42	; 0x2a
 8005a00:	d12a      	bne.n	8005a58 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005a02:	2102      	movs	r1, #2
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f001 fc4d 	bl	80072a4 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a18:	d11e      	bne.n	8005a58 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a28:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d012      	beq.n	8005a58 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a36:	4a30      	ldr	r2, [pc, #192]	; (8005af8 <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
 8005a38:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7ff fbd0 	bl	80051e4 <HAL_DMA_Abort_IT>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d006      	beq.n	8005a58 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005a54:	4610      	mov	r0, r2
 8005a56:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2229      	movs	r2, #41	; 0x29
 8005a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2220      	movs	r2, #32
 8005a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	685a      	ldr	r2, [r3, #4]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a7c:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	68ba      	ldr	r2, [r7, #8]
 8005a82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	88fa      	ldrh	r2, [r7, #6]
 8005a88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a8e:	b29a      	uxth	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	683a      	ldr	r2, [r7, #0]
 8005a98:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	4a17      	ldr	r2, [pc, #92]	; (8005afc <HAL_I2C_Slave_Seq_Transmit_IT+0x160>)
 8005a9e:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	f003 0308 	and.w	r3, r3, #8
 8005aaa:	2b08      	cmp	r3, #8
 8005aac:	bf0c      	ite	eq
 8005aae:	2301      	moveq	r3, #1
 8005ab0:	2300      	movne	r3, #0
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	0c1b      	lsrs	r3, r3, #16
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	f003 0301 	and.w	r3, r3, #1
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d106      	bne.n	8005ad8 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
 8005aca:	7dfb      	ldrb	r3, [r7, #23]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d003      	beq.n	8005ad8 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2208      	movs	r2, #8
 8005ad6:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8005ae0:	f248 0101 	movw	r1, #32769	; 0x8001
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f001 fb59 	bl	800719c <I2C_Enable_IRQ>

    return HAL_OK;
 8005aea:	2300      	movs	r3, #0
 8005aec:	e000      	b.n	8005af0 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
  }
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3718      	adds	r7, #24
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	080070fb 	.word	0x080070fb
 8005afc:	0800602d 	.word	0x0800602d

08005b00 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b086      	sub	sp, #24
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	603b      	str	r3, [r7, #0]
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005b1c:	2b28      	cmp	r3, #40	; 0x28
 8005b1e:	f040 8098 	bne.w	8005c52 <HAL_I2C_Slave_Seq_Receive_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d002      	beq.n	8005b2e <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 8005b28:	88fb      	ldrh	r3, [r7, #6]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d105      	bne.n	8005b3a <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b34:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e08c      	b.n	8005c54 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005b3a:	f248 0102 	movw	r1, #32770	; 0x8002
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f001 fbb0 	bl	80072a4 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d101      	bne.n	8005b52 <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 8005b4e:	2302      	movs	r3, #2
 8005b50:	e080      	b.n	8005c54 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b29      	cmp	r3, #41	; 0x29
 8005b64:	d12a      	bne.n	8005bbc <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005b66:	2101      	movs	r1, #1
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f001 fb9b 	bl	80072a4 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b7c:	d11e      	bne.n	8005bbc <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b8c:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d012      	beq.n	8005bbc <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9a:	4a30      	ldr	r2, [pc, #192]	; (8005c5c <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 8005b9c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7ff fb1e 	bl	80051e4 <HAL_DMA_Abort_IT>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d006      	beq.n	8005bbc <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005bb8:	4610      	mov	r0, r2
 8005bba:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	222a      	movs	r2, #42	; 0x2a
 8005bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2220      	movs	r2, #32
 8005bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005be0:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	68ba      	ldr	r2, [r7, #8]
 8005be6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	88fa      	ldrh	r2, [r7, #6]
 8005bec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	4a17      	ldr	r2, [pc, #92]	; (8005c60 <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 8005c02:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	f003 0308 	and.w	r3, r3, #8
 8005c0e:	2b08      	cmp	r3, #8
 8005c10:	bf0c      	ite	eq
 8005c12:	2301      	moveq	r3, #1
 8005c14:	2300      	movne	r3, #0
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	0c1b      	lsrs	r3, r3, #16
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	f003 0301 	and.w	r3, r3, #1
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d106      	bne.n	8005c3c <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
 8005c2e:	7dfb      	ldrb	r3, [r7, #23]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d003      	beq.n	8005c3c <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2208      	movs	r2, #8
 8005c3a:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8005c44:	f248 0102 	movw	r1, #32770	; 0x8002
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f001 faa7 	bl	800719c <I2C_Enable_IRQ>

    return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	e000      	b.n	8005c54 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
  }
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3718      	adds	r7, #24
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	080070fb 	.word	0x080070fb
 8005c60:	0800602d 	.word	0x0800602d

08005c64 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2b20      	cmp	r3, #32
 8005c76:	d10d      	bne.n	8005c94 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2228      	movs	r2, #40	; 0x28
 8005c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a07      	ldr	r2, [pc, #28]	; (8005ca0 <HAL_I2C_EnableListen_IT+0x3c>)
 8005c84:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005c86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f001 fa86 	bl	800719c <I2C_Enable_IRQ>

    return HAL_OK;
 8005c90:	2300      	movs	r3, #0
 8005c92:	e000      	b.n	8005c96 <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 8005c94:	2302      	movs	r3, #2
  }
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3708      	adds	r7, #8
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	0800602d 	.word	0x0800602d

08005ca4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d005      	beq.n	8005cd0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc8:	68ba      	ldr	r2, [r7, #8]
 8005cca:	68f9      	ldr	r1, [r7, #12]
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	4798      	blx	r3
  }
}
 8005cd0:	bf00      	nop
 8005cd2:	3710      	adds	r7, #16
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b086      	sub	sp, #24
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00f      	beq.n	8005d1a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00a      	beq.n	8005d1a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d08:	f043 0201 	orr.w	r2, r3, #1
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d18:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00f      	beq.n	8005d44 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00a      	beq.n	8005d44 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d32:	f043 0208 	orr.w	r2, r3, #8
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d42:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00f      	beq.n	8005d6e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00a      	beq.n	8005d6e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d5c:	f043 0202 	orr.w	r2, r3, #2
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d6c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d72:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f003 030b 	and.w	r3, r3, #11
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d003      	beq.n	8005d86 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8005d7e:	68f9      	ldr	r1, [r7, #12]
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f001 f87f 	bl	8006e84 <I2C_ITError>
  }
}
 8005d86:	bf00      	nop
 8005d88:	3718      	adds	r7, #24
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b083      	sub	sp, #12
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005d96:	bf00      	nop
 8005d98:	370c      	adds	r7, #12
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b083      	sub	sp, #12
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005daa:	bf00      	nop
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b083      	sub	sp, #12
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005dbe:	bf00      	nop
 8005dc0:	370c      	adds	r7, #12
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b083      	sub	sp, #12
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005dd2:	bf00      	nop
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
	...

08005de0 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b088      	sub	sp, #32
 8005de4:	af02      	add	r7, sp, #8
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8005dec:	4b8d      	ldr	r3, [pc, #564]	; (8006024 <I2C_Mem_ISR_IT+0x244>)
 8005dee:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d101      	bne.n	8005e02 <I2C_Mem_ISR_IT+0x22>
 8005dfe:	2302      	movs	r3, #2
 8005e00:	e10c      	b.n	800601c <I2C_Mem_ISR_IT+0x23c>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	f003 0310 	and.w	r3, r3, #16
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d012      	beq.n	8005e3a <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00d      	beq.n	8005e3a <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2210      	movs	r2, #16
 8005e24:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e2a:	f043 0204 	orr.w	r2, r3, #4
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f001 f93d 	bl	80070b2 <I2C_Flush_TXDR>
 8005e38:	e0dd      	b.n	8005ff6 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	f003 0304 	and.w	r3, r3, #4
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d022      	beq.n	8005e8a <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d01d      	beq.n	8005e8a <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	f023 0304 	bic.w	r3, r3, #4
 8005e54:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e60:	b2d2      	uxtb	r2, r2
 8005e62:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e68:	1c5a      	adds	r2, r3, #1
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e72:	3b01      	subs	r3, #1
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	3b01      	subs	r3, #1
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e88:	e0b5      	b.n	8005ff6 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	f003 0302 	and.w	r3, r3, #2
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d02c      	beq.n	8005eee <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d027      	beq.n	8005eee <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea6:	d118      	bne.n	8005eda <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eac:	781a      	ldrb	r2, [r3, #0]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb8:	1c5a      	adds	r2, r3, #1
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	b29a      	uxth	r2, r3
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8005ed8:	e08d      	b.n	8005ff6 <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005ee2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8005eea:	651a      	str	r2, [r3, #80]	; 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8005eec:	e083      	b.n	8005ff6 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d03c      	beq.n	8005f72 <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d037      	beq.n	8005f72 <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d02c      	beq.n	8005f66 <I2C_Mem_ISR_IT+0x186>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d128      	bne.n	8005f66 <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	2bff      	cmp	r3, #255	; 0xff
 8005f1c:	d910      	bls.n	8005f40 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	22ff      	movs	r2, #255	; 0xff
 8005f22:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f28:	b299      	uxth	r1, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f2e:	b2da      	uxtb	r2, r3
 8005f30:	2300      	movs	r3, #0
 8005f32:	9300      	str	r3, [sp, #0]
 8005f34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f001 f8fd 	bl	8007138 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f3e:	e017      	b.n	8005f70 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f4e:	b299      	uxth	r1, r3
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f54:	b2da      	uxtb	r2, r3
 8005f56:	2300      	movs	r3, #0
 8005f58:	9300      	str	r3, [sp, #0]
 8005f5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f001 f8ea 	bl	8007138 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f64:	e004      	b.n	8005f70 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005f66:	2140      	movs	r1, #64	; 0x40
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f000 ff8b 	bl	8006e84 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f6e:	e042      	b.n	8005ff6 <I2C_Mem_ISR_IT+0x216>
 8005f70:	e041      	b.n	8005ff6 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d03c      	beq.n	8005ff6 <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d037      	beq.n	8005ff6 <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005f86:	2101      	movs	r1, #1
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f001 f98b 	bl	80072a4 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005f8e:	2102      	movs	r1, #2
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f001 f903 	bl	800719c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b22      	cmp	r3, #34	; 0x22
 8005fa0:	d101      	bne.n	8005fa6 <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 8005fa2:	4b21      	ldr	r3, [pc, #132]	; (8006028 <I2C_Mem_ISR_IT+0x248>)
 8005fa4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	2bff      	cmp	r3, #255	; 0xff
 8005fae:	d910      	bls.n	8005fd2 <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	22ff      	movs	r2, #255	; 0xff
 8005fb4:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fba:	b299      	uxth	r1, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fc0:	b2da      	uxtb	r2, r3
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	9300      	str	r3, [sp, #0]
 8005fc6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f001 f8b4 	bl	8007138 <I2C_TransferConfig>
 8005fd0:	e011      	b.n	8005ff6 <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fe0:	b299      	uxth	r1, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fe6:	b2da      	uxtb	r2, r3
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	9300      	str	r3, [sp, #0]
 8005fec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f001 f8a1 	bl	8007138 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	f003 0320 	and.w	r3, r3, #32
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d008      	beq.n	8006012 <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006006:	2b00      	cmp	r3, #0
 8006008:	d003      	beq.n	8006012 <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800600a:	6939      	ldr	r1, [r7, #16]
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f000 fd0b 	bl	8006a28 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3718      	adds	r7, #24
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	80002000 	.word	0x80002000
 8006028:	80002400 	.word	0x80002400

0800602c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b086      	sub	sp, #24
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006048:	2b01      	cmp	r3, #1
 800604a:	d101      	bne.n	8006050 <I2C_Slave_ISR_IT+0x24>
 800604c:	2302      	movs	r3, #2
 800604e:	e0e1      	b.n	8006214 <I2C_Slave_ISR_IT+0x1e8>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	f003 0320 	and.w	r3, r3, #32
 800605e:	2b00      	cmp	r3, #0
 8006060:	d008      	beq.n	8006074 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006068:	2b00      	cmp	r3, #0
 800606a:	d003      	beq.n	8006074 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800606c:	6939      	ldr	r1, [r7, #16]
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	f000 fda2 	bl	8006bb8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	f003 0310 	and.w	r3, r3, #16
 800607a:	2b00      	cmp	r3, #0
 800607c:	d04b      	beq.n	8006116 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006084:	2b00      	cmp	r3, #0
 8006086:	d046      	beq.n	8006116 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800608c:	b29b      	uxth	r3, r3
 800608e:	2b00      	cmp	r3, #0
 8006090:	d128      	bne.n	80060e4 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b28      	cmp	r3, #40	; 0x28
 800609c:	d108      	bne.n	80060b0 <I2C_Slave_ISR_IT+0x84>
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060a4:	d104      	bne.n	80060b0 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80060a6:	6939      	ldr	r1, [r7, #16]
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f000 fe97 	bl	8006ddc <I2C_ITListenCplt>
 80060ae:	e031      	b.n	8006114 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	2b29      	cmp	r3, #41	; 0x29
 80060ba:	d10e      	bne.n	80060da <I2C_Slave_ISR_IT+0xae>
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80060c2:	d00a      	beq.n	80060da <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2210      	movs	r2, #16
 80060ca:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80060cc:	68f8      	ldr	r0, [r7, #12]
 80060ce:	f000 fff0 	bl	80070b2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f000 fc4b 	bl	800696e <I2C_ITSlaveSeqCplt>
 80060d8:	e01c      	b.n	8006114 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2210      	movs	r2, #16
 80060e0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80060e2:	e08f      	b.n	8006204 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2210      	movs	r2, #16
 80060ea:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060f0:	f043 0204 	orr.w	r2, r3, #4
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d003      	beq.n	8006106 <I2C_Slave_ISR_IT+0xda>
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006104:	d17e      	bne.n	8006204 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800610a:	4619      	mov	r1, r3
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f000 feb9 	bl	8006e84 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006112:	e077      	b.n	8006204 <I2C_Slave_ISR_IT+0x1d8>
 8006114:	e076      	b.n	8006204 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	f003 0304 	and.w	r3, r3, #4
 800611c:	2b00      	cmp	r3, #0
 800611e:	d02f      	beq.n	8006180 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006126:	2b00      	cmp	r3, #0
 8006128:	d02a      	beq.n	8006180 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800612e:	b29b      	uxth	r3, r3
 8006130:	2b00      	cmp	r3, #0
 8006132:	d018      	beq.n	8006166 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613e:	b2d2      	uxtb	r2, r2
 8006140:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006146:	1c5a      	adds	r2, r3, #1
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006150:	3b01      	subs	r3, #1
 8006152:	b29a      	uxth	r2, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800615c:	b29b      	uxth	r3, r3
 800615e:	3b01      	subs	r3, #1
 8006160:	b29a      	uxth	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800616a:	b29b      	uxth	r3, r3
 800616c:	2b00      	cmp	r3, #0
 800616e:	d14b      	bne.n	8006208 <I2C_Slave_ISR_IT+0x1dc>
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006176:	d047      	beq.n	8006208 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f000 fbf8 	bl	800696e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800617e:	e043      	b.n	8006208 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	f003 0308 	and.w	r3, r3, #8
 8006186:	2b00      	cmp	r3, #0
 8006188:	d009      	beq.n	800619e <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006190:	2b00      	cmp	r3, #0
 8006192:	d004      	beq.n	800619e <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006194:	6939      	ldr	r1, [r7, #16]
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f000 fb28 	bl	80067ec <I2C_ITAddrCplt>
 800619c:	e035      	b.n	800620a <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	f003 0302 	and.w	r3, r3, #2
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d030      	beq.n	800620a <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d02b      	beq.n	800620a <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d018      	beq.n	80061ee <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c0:	781a      	ldrb	r2, [r3, #0]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061cc:	1c5a      	adds	r2, r3, #1
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	3b01      	subs	r3, #1
 80061da:	b29a      	uxth	r2, r3
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061e4:	3b01      	subs	r3, #1
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	851a      	strh	r2, [r3, #40]	; 0x28
 80061ec:	e00d      	b.n	800620a <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061f4:	d002      	beq.n	80061fc <I2C_Slave_ISR_IT+0x1d0>
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d106      	bne.n	800620a <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f000 fbb6 	bl	800696e <I2C_ITSlaveSeqCplt>
 8006202:	e002      	b.n	800620a <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8006204:	bf00      	nop
 8006206:	e000      	b.n	800620a <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8006208:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3718      	adds	r7, #24
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b088      	sub	sp, #32
 8006220:	af02      	add	r7, sp, #8
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800622e:	2b01      	cmp	r3, #1
 8006230:	d101      	bne.n	8006236 <I2C_Master_ISR_DMA+0x1a>
 8006232:	2302      	movs	r3, #2
 8006234:	e0d9      	b.n	80063ea <I2C_Master_ISR_DMA+0x1ce>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2201      	movs	r2, #1
 800623a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	f003 0310 	and.w	r3, r3, #16
 8006244:	2b00      	cmp	r3, #0
 8006246:	d016      	beq.n	8006276 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800624e:	2b00      	cmp	r3, #0
 8006250:	d011      	beq.n	8006276 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2210      	movs	r2, #16
 8006258:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800625e:	f043 0204 	orr.w	r2, r3, #4
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006266:	2120      	movs	r1, #32
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f000 ff97 	bl	800719c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f000 ff1f 	bl	80070b2 <I2C_Flush_TXDR>
 8006274:	e0b4      	b.n	80063e0 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800627c:	2b00      	cmp	r3, #0
 800627e:	d071      	beq.n	8006364 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006286:	2b00      	cmp	r3, #0
 8006288:	d06c      	beq.n	8006364 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006298:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800629e:	b29b      	uxth	r3, r3
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d04e      	beq.n	8006342 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062b0:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	2bff      	cmp	r3, #255	; 0xff
 80062ba:	d906      	bls.n	80062ca <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	22ff      	movs	r2, #255	; 0xff
 80062c0:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80062c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80062c6:	617b      	str	r3, [r7, #20]
 80062c8:	e010      	b.n	80062ec <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80062dc:	d003      	beq.n	80062e6 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e2:	617b      	str	r3, [r7, #20]
 80062e4:	e002      	b.n	80062ec <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80062e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80062ea:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062f0:	b2da      	uxtb	r2, r3
 80062f2:	8a79      	ldrh	r1, [r7, #18]
 80062f4:	2300      	movs	r3, #0
 80062f6:	9300      	str	r3, [sp, #0]
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f000 ff1c 	bl	8007138 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006304:	b29a      	uxth	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	b29a      	uxth	r2, r3
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b22      	cmp	r3, #34	; 0x22
 800631c:	d108      	bne.n	8006330 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800632c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800632e:	e057      	b.n	80063e0 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800633e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006340:	e04e      	b.n	80063e0 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800634c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006350:	d003      	beq.n	800635a <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f000 face 	bl	80068f4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8006358:	e042      	b.n	80063e0 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800635a:	2140      	movs	r1, #64	; 0x40
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f000 fd91 	bl	8006e84 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006362:	e03d      	b.n	80063e0 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800636a:	2b00      	cmp	r3, #0
 800636c:	d028      	beq.n	80063c0 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006374:	2b00      	cmp	r3, #0
 8006376:	d023      	beq.n	80063c0 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800637c:	b29b      	uxth	r3, r3
 800637e:	2b00      	cmp	r3, #0
 8006380:	d119      	bne.n	80063b6 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800638c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006390:	d025      	beq.n	80063de <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006396:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800639a:	d108      	bne.n	80063ae <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	685a      	ldr	r2, [r3, #4]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063aa:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80063ac:	e017      	b.n	80063de <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	f000 faa0 	bl	80068f4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80063b4:	e013      	b.n	80063de <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80063b6:	2140      	movs	r1, #64	; 0x40
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f000 fd63 	bl	8006e84 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80063be:	e00e      	b.n	80063de <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	f003 0320 	and.w	r3, r3, #32
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00a      	beq.n	80063e0 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d005      	beq.n	80063e0 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80063d4:	68b9      	ldr	r1, [r7, #8]
 80063d6:	68f8      	ldr	r0, [r7, #12]
 80063d8:	f000 fb26 	bl	8006a28 <I2C_ITMasterCplt>
 80063dc:	e000      	b.n	80063e0 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80063de:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3718      	adds	r7, #24
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
	...

080063f4 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b088      	sub	sp, #32
 80063f8:	af02      	add	r7, sp, #8
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8006400:	4b8d      	ldr	r3, [pc, #564]	; (8006638 <I2C_Mem_ISR_DMA+0x244>)
 8006402:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800640a:	2b01      	cmp	r3, #1
 800640c:	d101      	bne.n	8006412 <I2C_Mem_ISR_DMA+0x1e>
 800640e:	2302      	movs	r3, #2
 8006410:	e10e      	b.n	8006630 <I2C_Mem_ISR_DMA+0x23c>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	f003 0310 	and.w	r3, r3, #16
 8006420:	2b00      	cmp	r3, #0
 8006422:	d016      	beq.n	8006452 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800642a:	2b00      	cmp	r3, #0
 800642c:	d011      	beq.n	8006452 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2210      	movs	r2, #16
 8006434:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800643a:	f043 0204 	orr.w	r2, r3, #4
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006442:	2120      	movs	r1, #32
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f000 fea9 	bl	800719c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f000 fe31 	bl	80070b2 <I2C_Flush_TXDR>
 8006450:	e0e9      	b.n	8006626 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	f003 0302 	and.w	r3, r3, #2
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00e      	beq.n	800647a <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006462:	2b00      	cmp	r3, #0
 8006464:	d009      	beq.n	800647a <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800646e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f04f 32ff 	mov.w	r2, #4294967295
 8006476:	651a      	str	r2, [r3, #80]	; 0x50
 8006478:	e0d5      	b.n	8006626 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006480:	2b00      	cmp	r3, #0
 8006482:	d05f      	beq.n	8006544 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800648a:	2b00      	cmp	r3, #0
 800648c:	d05a      	beq.n	8006544 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800648e:	2101      	movs	r1, #1
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f000 ff07 	bl	80072a4 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006496:	2110      	movs	r1, #16
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f000 fe7f 	bl	800719c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d048      	beq.n	800653a <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	2bff      	cmp	r3, #255	; 0xff
 80064b0:	d910      	bls.n	80064d4 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	22ff      	movs	r2, #255	; 0xff
 80064b6:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064bc:	b299      	uxth	r1, r3
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064c2:	b2da      	uxtb	r2, r3
 80064c4:	2300      	movs	r3, #0
 80064c6:	9300      	str	r3, [sp, #0]
 80064c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f000 fe33 	bl	8007138 <I2C_TransferConfig>
 80064d2:	e011      	b.n	80064f8 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064d8:	b29a      	uxth	r2, r3
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064e2:	b299      	uxth	r1, r3
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064e8:	b2da      	uxtb	r2, r3
 80064ea:	2300      	movs	r3, #0
 80064ec:	9300      	str	r3, [sp, #0]
 80064ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064f2:	68f8      	ldr	r0, [r7, #12]
 80064f4:	f000 fe20 	bl	8007138 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	b29a      	uxth	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006510:	b2db      	uxtb	r3, r3
 8006512:	2b22      	cmp	r3, #34	; 0x22
 8006514:	d108      	bne.n	8006528 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006524:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006526:	e07e      	b.n	8006626 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006536:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006538:	e075      	b.n	8006626 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800653a:	2140      	movs	r1, #64	; 0x40
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f000 fca1 	bl	8006e84 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006542:	e070      	b.n	8006626 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800654a:	2b00      	cmp	r3, #0
 800654c:	d05d      	beq.n	800660a <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006554:	2b00      	cmp	r3, #0
 8006556:	d058      	beq.n	800660a <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006558:	2101      	movs	r1, #1
 800655a:	68f8      	ldr	r0, [r7, #12]
 800655c:	f000 fea2 	bl	80072a4 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006560:	2110      	movs	r1, #16
 8006562:	68f8      	ldr	r0, [r7, #12]
 8006564:	f000 fe1a 	bl	800719c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b22      	cmp	r3, #34	; 0x22
 8006572:	d101      	bne.n	8006578 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8006574:	4b31      	ldr	r3, [pc, #196]	; (800663c <I2C_Mem_ISR_DMA+0x248>)
 8006576:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800657c:	b29b      	uxth	r3, r3
 800657e:	2bff      	cmp	r3, #255	; 0xff
 8006580:	d910      	bls.n	80065a4 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	22ff      	movs	r2, #255	; 0xff
 8006586:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800658c:	b299      	uxth	r1, r3
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006592:	b2da      	uxtb	r2, r3
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	9300      	str	r3, [sp, #0]
 8006598:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f000 fdcb 	bl	8007138 <I2C_TransferConfig>
 80065a2:	e011      	b.n	80065c8 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065a8:	b29a      	uxth	r2, r3
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065b2:	b299      	uxth	r1, r3
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065b8:	b2da      	uxtb	r2, r3
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f000 fdb8 	bl	8007138 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	2b22      	cmp	r3, #34	; 0x22
 80065e4:	d108      	bne.n	80065f8 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065f4:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80065f6:	e016      	b.n	8006626 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006606:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006608:	e00d      	b.n	8006626 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	f003 0320 	and.w	r3, r3, #32
 8006610:	2b00      	cmp	r3, #0
 8006612:	d008      	beq.n	8006626 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800661a:	2b00      	cmp	r3, #0
 800661c:	d003      	beq.n	8006626 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800661e:	68b9      	ldr	r1, [r7, #8]
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f000 fa01 	bl	8006a28 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3718      	adds	r7, #24
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	80002000 	.word	0x80002000
 800663c:	80002400 	.word	0x80002400

08006640 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b088      	sub	sp, #32
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006650:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006652:	2300      	movs	r3, #0
 8006654:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800665c:	2b01      	cmp	r3, #1
 800665e:	d101      	bne.n	8006664 <I2C_Slave_ISR_DMA+0x24>
 8006660:	2302      	movs	r3, #2
 8006662:	e0bf      	b.n	80067e4 <I2C_Slave_ISR_DMA+0x1a4>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	f003 0320 	and.w	r3, r3, #32
 8006672:	2b00      	cmp	r3, #0
 8006674:	d008      	beq.n	8006688 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800667c:	2b00      	cmp	r3, #0
 800667e:	d003      	beq.n	8006688 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006680:	68b9      	ldr	r1, [r7, #8]
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f000 fa98 	bl	8006bb8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	f003 0310 	and.w	r3, r3, #16
 800668e:	2b00      	cmp	r3, #0
 8006690:	f000 8095 	beq.w	80067be <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800669a:	2b00      	cmp	r3, #0
 800669c:	f000 808f 	beq.w	80067be <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d104      	bne.n	80066b4 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d07d      	beq.n	80067b0 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00c      	beq.n	80066d6 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d007      	beq.n	80066d6 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d101      	bne.n	80066d6 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 80066d2:	2301      	movs	r3, #1
 80066d4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00c      	beq.n	80066f8 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d007      	beq.n	80066f8 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d101      	bne.n	80066f8 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 80066f4:	2301      	movs	r3, #1
 80066f6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d128      	bne.n	8006750 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006704:	b2db      	uxtb	r3, r3
 8006706:	2b28      	cmp	r3, #40	; 0x28
 8006708:	d108      	bne.n	800671c <I2C_Slave_ISR_DMA+0xdc>
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006710:	d104      	bne.n	800671c <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006712:	68b9      	ldr	r1, [r7, #8]
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f000 fb61 	bl	8006ddc <I2C_ITListenCplt>
 800671a:	e048      	b.n	80067ae <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006722:	b2db      	uxtb	r3, r3
 8006724:	2b29      	cmp	r3, #41	; 0x29
 8006726:	d10e      	bne.n	8006746 <I2C_Slave_ISR_DMA+0x106>
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800672e:	d00a      	beq.n	8006746 <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2210      	movs	r2, #16
 8006736:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f000 fcba 	bl	80070b2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f000 f915 	bl	800696e <I2C_ITSlaveSeqCplt>
 8006744:	e033      	b.n	80067ae <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2210      	movs	r2, #16
 800674c:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800674e:	e034      	b.n	80067ba <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2210      	movs	r2, #16
 8006756:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800675c:	f043 0204 	orr.w	r2, r3, #4
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800676a:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d003      	beq.n	800677a <I2C_Slave_ISR_DMA+0x13a>
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006778:	d11f      	bne.n	80067ba <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800677a:	7dfb      	ldrb	r3, [r7, #23]
 800677c:	2b21      	cmp	r3, #33	; 0x21
 800677e:	d002      	beq.n	8006786 <I2C_Slave_ISR_DMA+0x146>
 8006780:	7dfb      	ldrb	r3, [r7, #23]
 8006782:	2b29      	cmp	r3, #41	; 0x29
 8006784:	d103      	bne.n	800678e <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2221      	movs	r2, #33	; 0x21
 800678a:	631a      	str	r2, [r3, #48]	; 0x30
 800678c:	e008      	b.n	80067a0 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800678e:	7dfb      	ldrb	r3, [r7, #23]
 8006790:	2b22      	cmp	r3, #34	; 0x22
 8006792:	d002      	beq.n	800679a <I2C_Slave_ISR_DMA+0x15a>
 8006794:	7dfb      	ldrb	r3, [r7, #23]
 8006796:	2b2a      	cmp	r3, #42	; 0x2a
 8006798:	d102      	bne.n	80067a0 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2222      	movs	r2, #34	; 0x22
 800679e:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a4:	4619      	mov	r1, r3
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f000 fb6c 	bl	8006e84 <I2C_ITError>
      if (treatdmanack == 1U)
 80067ac:	e005      	b.n	80067ba <I2C_Slave_ISR_DMA+0x17a>
 80067ae:	e004      	b.n	80067ba <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2210      	movs	r2, #16
 80067b6:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80067b8:	e00f      	b.n	80067da <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 80067ba:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80067bc:	e00d      	b.n	80067da <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	f003 0308 	and.w	r3, r3, #8
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d008      	beq.n	80067da <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d003      	beq.n	80067da <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80067d2:	68b9      	ldr	r1, [r7, #8]
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f000 f809 	bl	80067ec <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3720      	adds	r7, #32
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006802:	2b28      	cmp	r3, #40	; 0x28
 8006804:	d16a      	bne.n	80068dc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	0c1b      	lsrs	r3, r3, #16
 800680e:	b2db      	uxtb	r3, r3
 8006810:	f003 0301 	and.w	r3, r3, #1
 8006814:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	0c1b      	lsrs	r3, r3, #16
 800681e:	b29b      	uxth	r3, r3
 8006820:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006824:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	b29b      	uxth	r3, r3
 800682e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006832:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	b29b      	uxth	r3, r3
 800683c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006840:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	2b02      	cmp	r3, #2
 8006848:	d138      	bne.n	80068bc <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800684a:	897b      	ldrh	r3, [r7, #10]
 800684c:	09db      	lsrs	r3, r3, #7
 800684e:	b29a      	uxth	r2, r3
 8006850:	89bb      	ldrh	r3, [r7, #12]
 8006852:	4053      	eors	r3, r2
 8006854:	b29b      	uxth	r3, r3
 8006856:	f003 0306 	and.w	r3, r3, #6
 800685a:	2b00      	cmp	r3, #0
 800685c:	d11c      	bne.n	8006898 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800685e:	897b      	ldrh	r3, [r7, #10]
 8006860:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006866:	1c5a      	adds	r2, r3, #1
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006870:	2b02      	cmp	r3, #2
 8006872:	d13b      	bne.n	80068ec <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2208      	movs	r2, #8
 8006880:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800688a:	89ba      	ldrh	r2, [r7, #12]
 800688c:	7bfb      	ldrb	r3, [r7, #15]
 800688e:	4619      	mov	r1, r3
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f7fc fddb 	bl	800344c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006896:	e029      	b.n	80068ec <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006898:	893b      	ldrh	r3, [r7, #8]
 800689a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800689c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 fcff 	bl	80072a4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80068ae:	89ba      	ldrh	r2, [r7, #12]
 80068b0:	7bfb      	ldrb	r3, [r7, #15]
 80068b2:	4619      	mov	r1, r3
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f7fc fdc9 	bl	800344c <HAL_I2C_AddrCallback>
}
 80068ba:	e017      	b.n	80068ec <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80068bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 fcef 	bl	80072a4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80068ce:	89ba      	ldrh	r2, [r7, #12]
 80068d0:	7bfb      	ldrb	r3, [r7, #15]
 80068d2:	4619      	mov	r1, r3
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f7fc fdb9 	bl	800344c <HAL_I2C_AddrCallback>
}
 80068da:	e007      	b.n	80068ec <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2208      	movs	r2, #8
 80068e2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80068ec:	bf00      	nop
 80068ee:	3710      	adds	r7, #16
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800690a:	b2db      	uxtb	r3, r3
 800690c:	2b21      	cmp	r3, #33	; 0x21
 800690e:	d115      	bne.n	800693c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2220      	movs	r2, #32
 8006914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2211      	movs	r2, #17
 800691c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006924:	2101      	movs	r1, #1
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 fcbc 	bl	80072a4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f7ff fa2a 	bl	8005d8e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800693a:	e014      	b.n	8006966 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2220      	movs	r2, #32
 8006940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2212      	movs	r2, #18
 8006948:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006950:	2102      	movs	r1, #2
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 fca6 	bl	80072a4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f7ff fa1e 	bl	8005da2 <HAL_I2C_MasterRxCpltCallback>
}
 8006966:	bf00      	nop
 8006968:	3708      	adds	r7, #8
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800696e:	b580      	push	{r7, lr}
 8006970:	b084      	sub	sp, #16
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800698c:	2b00      	cmp	r3, #0
 800698e:	d008      	beq.n	80069a2 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800699e:	601a      	str	r2, [r3, #0]
 80069a0:	e00c      	b.n	80069bc <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d007      	beq.n	80069bc <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80069ba:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	2b29      	cmp	r3, #41	; 0x29
 80069c6:	d112      	bne.n	80069ee <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2228      	movs	r2, #40	; 0x28
 80069cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2221      	movs	r2, #33	; 0x21
 80069d4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80069d6:	2101      	movs	r1, #1
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 fc63 	bl	80072a4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f7fc fd66 	bl	80034b8 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80069ec:	e017      	b.n	8006a1e <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	2b2a      	cmp	r3, #42	; 0x2a
 80069f8:	d111      	bne.n	8006a1e <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2228      	movs	r2, #40	; 0x28
 80069fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2222      	movs	r2, #34	; 0x22
 8006a06:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006a08:	2102      	movs	r1, #2
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 fc4a 	bl	80072a4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f7fc fd3d 	bl	8003498 <HAL_I2C_SlaveRxCpltCallback>
}
 8006a1e:	bf00      	nop
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
	...

08006a28 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b086      	sub	sp, #24
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2220      	movs	r2, #32
 8006a3c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b21      	cmp	r3, #33	; 0x21
 8006a48:	d107      	bne.n	8006a5a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006a4a:	2101      	movs	r1, #1
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 fc29 	bl	80072a4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2211      	movs	r2, #17
 8006a56:	631a      	str	r2, [r3, #48]	; 0x30
 8006a58:	e00c      	b.n	8006a74 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	2b22      	cmp	r3, #34	; 0x22
 8006a64:	d106      	bne.n	8006a74 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006a66:	2102      	movs	r1, #2
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 fc1b 	bl	80072a4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2212      	movs	r2, #18
 8006a72:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	6859      	ldr	r1, [r3, #4]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	4b4c      	ldr	r3, [pc, #304]	; (8006bb0 <I2C_ITMasterCplt+0x188>)
 8006a80:	400b      	ands	r3, r1
 8006a82:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a49      	ldr	r2, [pc, #292]	; (8006bb4 <I2C_ITMasterCplt+0x18c>)
 8006a8e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	f003 0310 	and.w	r3, r3, #16
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d009      	beq.n	8006aae <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2210      	movs	r2, #16
 8006aa0:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aa6:	f043 0204 	orr.w	r2, r3, #4
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b60      	cmp	r3, #96	; 0x60
 8006ab8:	d10a      	bne.n	8006ad0 <I2C_ITMasterCplt+0xa8>
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	f003 0304 	and.w	r3, r3, #4
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d005      	beq.n	8006ad0 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006ace:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 faee 	bl	80070b2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ada:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	2b60      	cmp	r3, #96	; 0x60
 8006ae6:	d002      	beq.n	8006aee <I2C_ITMasterCplt+0xc6>
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d006      	beq.n	8006afc <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006af2:	4619      	mov	r1, r3
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 f9c5 	bl	8006e84 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006afa:	e054      	b.n	8006ba6 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	2b21      	cmp	r3, #33	; 0x21
 8006b06:	d124      	bne.n	8006b52 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2220      	movs	r2, #32
 8006b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	2b40      	cmp	r3, #64	; 0x40
 8006b20:	d10b      	bne.n	8006b3a <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f7fc fc6c 	bl	8003410 <HAL_I2C_MemTxCpltCallback>
}
 8006b38:	e035      	b.n	8006ba6 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f7ff f91f 	bl	8005d8e <HAL_I2C_MasterTxCpltCallback>
}
 8006b50:	e029      	b.n	8006ba6 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b22      	cmp	r3, #34	; 0x22
 8006b5c:	d123      	bne.n	8006ba6 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2220      	movs	r2, #32
 8006b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	2b40      	cmp	r3, #64	; 0x40
 8006b76:	d10b      	bne.n	8006b90 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f7fc fc31 	bl	80033f0 <HAL_I2C_MemRxCpltCallback>
}
 8006b8e:	e00a      	b.n	8006ba6 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f7ff f8fe 	bl	8005da2 <HAL_I2C_MasterRxCpltCallback>
}
 8006ba6:	bf00      	nop
 8006ba8:	3718      	adds	r7, #24
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	fe00e800 	.word	0xfe00e800
 8006bb4:	ffff0000 	.word	0xffff0000

08006bb8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b086      	sub	sp, #24
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bd4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2220      	movs	r2, #32
 8006bdc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006bde:	7bfb      	ldrb	r3, [r7, #15]
 8006be0:	2b21      	cmp	r3, #33	; 0x21
 8006be2:	d002      	beq.n	8006bea <I2C_ITSlaveCplt+0x32>
 8006be4:	7bfb      	ldrb	r3, [r7, #15]
 8006be6:	2b29      	cmp	r3, #41	; 0x29
 8006be8:	d108      	bne.n	8006bfc <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006bea:	f248 0101 	movw	r1, #32769	; 0x8001
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 fb58 	bl	80072a4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2221      	movs	r2, #33	; 0x21
 8006bf8:	631a      	str	r2, [r3, #48]	; 0x30
 8006bfa:	e019      	b.n	8006c30 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006bfc:	7bfb      	ldrb	r3, [r7, #15]
 8006bfe:	2b22      	cmp	r3, #34	; 0x22
 8006c00:	d002      	beq.n	8006c08 <I2C_ITSlaveCplt+0x50>
 8006c02:	7bfb      	ldrb	r3, [r7, #15]
 8006c04:	2b2a      	cmp	r3, #42	; 0x2a
 8006c06:	d108      	bne.n	8006c1a <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006c08:	f248 0102 	movw	r1, #32770	; 0x8002
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 fb49 	bl	80072a4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2222      	movs	r2, #34	; 0x22
 8006c16:	631a      	str	r2, [r3, #48]	; 0x30
 8006c18:	e00a      	b.n	8006c30 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8006c1a:	7bfb      	ldrb	r3, [r7, #15]
 8006c1c:	2b28      	cmp	r3, #40	; 0x28
 8006c1e:	d107      	bne.n	8006c30 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8006c20:	f248 0103 	movw	r1, #32771	; 0x8003
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 fb3d 	bl	80072a4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	685a      	ldr	r2, [r3, #4]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c3e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6859      	ldr	r1, [r3, #4]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	4b62      	ldr	r3, [pc, #392]	; (8006dd4 <I2C_ITSlaveCplt+0x21c>)
 8006c4c:	400b      	ands	r3, r1
 8006c4e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 fa2e 	bl	80070b2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d013      	beq.n	8006c88 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006c6e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d01f      	beq.n	8006cb8 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c86:	e017      	b.n	8006cb8 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d012      	beq.n	8006cb8 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ca0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d006      	beq.n	8006cb8 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	b29a      	uxth	r2, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	f003 0304 	and.w	r3, r3, #4
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d020      	beq.n	8006d04 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	f023 0304 	bic.w	r3, r3, #4
 8006cc8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd4:	b2d2      	uxtb	r2, r2
 8006cd6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cdc:	1c5a      	adds	r2, r3, #1
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00c      	beq.n	8006d04 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	b29a      	uxth	r2, r3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d005      	beq.n	8006d1a <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d12:	f043 0204 	orr.w	r2, r3, #4
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d010      	beq.n	8006d52 <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d34:	4619      	mov	r1, r3
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f8a4 	bl	8006e84 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	2b28      	cmp	r3, #40	; 0x28
 8006d46:	d141      	bne.n	8006dcc <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006d48:	6979      	ldr	r1, [r7, #20]
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 f846 	bl	8006ddc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006d50:	e03c      	b.n	8006dcc <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d56:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006d5a:	d014      	beq.n	8006d86 <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f7ff fe06 	bl	800696e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a1c      	ldr	r2, [pc, #112]	; (8006dd8 <I2C_ITSlaveCplt+0x220>)
 8006d66:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2220      	movs	r2, #32
 8006d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f7fc fb56 	bl	8003430 <HAL_I2C_ListenCpltCallback>
}
 8006d84:	e022      	b.n	8006dcc <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	2b22      	cmp	r3, #34	; 0x22
 8006d90:	d10e      	bne.n	8006db0 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2220      	movs	r2, #32
 8006d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f7fc fb75 	bl	8003498 <HAL_I2C_SlaveRxCpltCallback>
}
 8006dae:	e00d      	b.n	8006dcc <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2220      	movs	r2, #32
 8006db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f7fc fb76 	bl	80034b8 <HAL_I2C_SlaveTxCpltCallback>
}
 8006dcc:	bf00      	nop
 8006dce:	3718      	adds	r7, #24
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	fe00e800 	.word	0xfe00e800
 8006dd8:	ffff0000 	.word	0xffff0000

08006ddc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a25      	ldr	r2, [pc, #148]	; (8006e80 <I2C_ITListenCplt+0xa4>)
 8006dea:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2220      	movs	r2, #32
 8006df6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	f003 0304 	and.w	r3, r3, #4
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d022      	beq.n	8006e58 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1c:	b2d2      	uxtb	r2, r2
 8006e1e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e24:	1c5a      	adds	r2, r3, #1
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d012      	beq.n	8006e58 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e36:	3b01      	subs	r3, #1
 8006e38:	b29a      	uxth	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	3b01      	subs	r3, #1
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e50:	f043 0204 	orr.w	r2, r3, #4
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006e58:	f248 0103 	movw	r1, #32771	; 0x8003
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 fa21 	bl	80072a4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2210      	movs	r2, #16
 8006e68:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f7fc fadc 	bl	8003430 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006e78:	bf00      	nop
 8006e7a:	3708      	adds	r7, #8
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	ffff0000 	.word	0xffff0000

08006e84 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e94:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a6d      	ldr	r2, [pc, #436]	; (8007058 <I2C_ITError+0x1d4>)
 8006ea2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	431a      	orrs	r2, r3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006eb6:	7bfb      	ldrb	r3, [r7, #15]
 8006eb8:	2b28      	cmp	r3, #40	; 0x28
 8006eba:	d005      	beq.n	8006ec8 <I2C_ITError+0x44>
 8006ebc:	7bfb      	ldrb	r3, [r7, #15]
 8006ebe:	2b29      	cmp	r3, #41	; 0x29
 8006ec0:	d002      	beq.n	8006ec8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006ec2:	7bfb      	ldrb	r3, [r7, #15]
 8006ec4:	2b2a      	cmp	r3, #42	; 0x2a
 8006ec6:	d10b      	bne.n	8006ee0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006ec8:	2103      	movs	r1, #3
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f9ea 	bl	80072a4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2228      	movs	r2, #40	; 0x28
 8006ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a60      	ldr	r2, [pc, #384]	; (800705c <I2C_ITError+0x1d8>)
 8006edc:	635a      	str	r2, [r3, #52]	; 0x34
 8006ede:	e030      	b.n	8006f42 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006ee0:	f248 0103 	movw	r1, #32771	; 0x8003
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 f9dd 	bl	80072a4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 f8e1 	bl	80070b2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	2b60      	cmp	r3, #96	; 0x60
 8006efa:	d01f      	beq.n	8006f3c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2220      	movs	r2, #32
 8006f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	f003 0320 	and.w	r3, r3, #32
 8006f0e:	2b20      	cmp	r3, #32
 8006f10:	d114      	bne.n	8006f3c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	699b      	ldr	r3, [r3, #24]
 8006f18:	f003 0310 	and.w	r3, r3, #16
 8006f1c:	2b10      	cmp	r3, #16
 8006f1e:	d109      	bne.n	8006f34 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2210      	movs	r2, #16
 8006f26:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f2c:	f043 0204 	orr.w	r2, r3, #4
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2220      	movs	r2, #32
 8006f3a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f46:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d039      	beq.n	8006fc4 <I2C_ITError+0x140>
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	2b11      	cmp	r3, #17
 8006f54:	d002      	beq.n	8006f5c <I2C_ITError+0xd8>
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	2b21      	cmp	r3, #33	; 0x21
 8006f5a:	d133      	bne.n	8006fc4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f6a:	d107      	bne.n	8006f7c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006f7a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f80:	4618      	mov	r0, r3
 8006f82:	f7fe f98e 	bl	80052a2 <HAL_DMA_GetState>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d017      	beq.n	8006fbc <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f90:	4a33      	ldr	r2, [pc, #204]	; (8007060 <I2C_ITError+0x1dc>)
 8006f92:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f7fe f91f 	bl	80051e4 <HAL_DMA_Abort_IT>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d04d      	beq.n	8007048 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006fb6:	4610      	mov	r0, r2
 8006fb8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006fba:	e045      	b.n	8007048 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 f851 	bl	8007064 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006fc2:	e041      	b.n	8007048 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d039      	beq.n	8007040 <I2C_ITError+0x1bc>
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	2b12      	cmp	r3, #18
 8006fd0:	d002      	beq.n	8006fd8 <I2C_ITError+0x154>
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	2b22      	cmp	r3, #34	; 0x22
 8006fd6:	d133      	bne.n	8007040 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fe6:	d107      	bne.n	8006ff8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ff6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7fe f950 	bl	80052a2 <HAL_DMA_GetState>
 8007002:	4603      	mov	r3, r0
 8007004:	2b01      	cmp	r3, #1
 8007006:	d017      	beq.n	8007038 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800700c:	4a14      	ldr	r2, [pc, #80]	; (8007060 <I2C_ITError+0x1dc>)
 800700e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800701c:	4618      	mov	r0, r3
 800701e:	f7fe f8e1 	bl	80051e4 <HAL_DMA_Abort_IT>
 8007022:	4603      	mov	r3, r0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d011      	beq.n	800704c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800702c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007032:	4610      	mov	r0, r2
 8007034:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007036:	e009      	b.n	800704c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 f813 	bl	8007064 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800703e:	e005      	b.n	800704c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 f80f 	bl	8007064 <I2C_TreatErrorCallback>
  }
}
 8007046:	e002      	b.n	800704e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007048:	bf00      	nop
 800704a:	e000      	b.n	800704e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800704c:	bf00      	nop
}
 800704e:	bf00      	nop
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	ffff0000 	.word	0xffff0000
 800705c:	0800602d 	.word	0x0800602d
 8007060:	080070fb 	.word	0x080070fb

08007064 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007072:	b2db      	uxtb	r3, r3
 8007074:	2b60      	cmp	r3, #96	; 0x60
 8007076:	d10e      	bne.n	8007096 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2220      	movs	r2, #32
 800707c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f7fe fe9b 	bl	8005dca <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007094:	e009      	b.n	80070aa <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f7fe fe86 	bl	8005db6 <HAL_I2C_ErrorCallback>
}
 80070aa:	bf00      	nop
 80070ac:	3708      	adds	r7, #8
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80070b2:	b480      	push	{r7}
 80070b4:	b083      	sub	sp, #12
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	699b      	ldr	r3, [r3, #24]
 80070c0:	f003 0302 	and.w	r3, r3, #2
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	d103      	bne.n	80070d0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2200      	movs	r2, #0
 80070ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	f003 0301 	and.w	r3, r3, #1
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d007      	beq.n	80070ee <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	699a      	ldr	r2, [r3, #24]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f042 0201 	orr.w	r2, r2, #1
 80070ec:	619a      	str	r2, [r3, #24]
  }
}
 80070ee:	bf00      	nop
 80070f0:	370c      	adds	r7, #12
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr

080070fa <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b084      	sub	sp, #16
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007106:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800710c:	2b00      	cmp	r3, #0
 800710e:	d003      	beq.n	8007118 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007114:	2200      	movs	r2, #0
 8007116:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800711c:	2b00      	cmp	r3, #0
 800711e:	d003      	beq.n	8007128 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007124:	2200      	movs	r2, #0
 8007126:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f7ff ff9b 	bl	8007064 <I2C_TreatErrorCallback>
}
 800712e:	bf00      	nop
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
	...

08007138 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007138:	b480      	push	{r7}
 800713a:	b087      	sub	sp, #28
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	607b      	str	r3, [r7, #4]
 8007142:	460b      	mov	r3, r1
 8007144:	817b      	strh	r3, [r7, #10]
 8007146:	4613      	mov	r3, r2
 8007148:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800714a:	897b      	ldrh	r3, [r7, #10]
 800714c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007150:	7a7b      	ldrb	r3, [r7, #9]
 8007152:	041b      	lsls	r3, r3, #16
 8007154:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007158:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800715e:	6a3b      	ldr	r3, [r7, #32]
 8007160:	4313      	orrs	r3, r2
 8007162:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007166:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	685a      	ldr	r2, [r3, #4]
 800716e:	6a3b      	ldr	r3, [r7, #32]
 8007170:	0d5b      	lsrs	r3, r3, #21
 8007172:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007176:	4b08      	ldr	r3, [pc, #32]	; (8007198 <I2C_TransferConfig+0x60>)
 8007178:	430b      	orrs	r3, r1
 800717a:	43db      	mvns	r3, r3
 800717c:	ea02 0103 	and.w	r1, r2, r3
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	697a      	ldr	r2, [r7, #20]
 8007186:	430a      	orrs	r2, r1
 8007188:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800718a:	bf00      	nop
 800718c:	371c      	adds	r7, #28
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	03ff63ff 	.word	0x03ff63ff

0800719c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800719c:	b480      	push	{r7}
 800719e:	b085      	sub	sp, #20
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	460b      	mov	r3, r1
 80071a6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80071a8:	2300      	movs	r3, #0
 80071aa:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071b0:	4a39      	ldr	r2, [pc, #228]	; (8007298 <I2C_Enable_IRQ+0xfc>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d032      	beq.n	800721c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80071ba:	4a38      	ldr	r2, [pc, #224]	; (800729c <I2C_Enable_IRQ+0x100>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d02d      	beq.n	800721c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80071c4:	4a36      	ldr	r2, [pc, #216]	; (80072a0 <I2C_Enable_IRQ+0x104>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d028      	beq.n	800721c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80071ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	da03      	bge.n	80071da <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80071d8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80071da:	887b      	ldrh	r3, [r7, #2]
 80071dc:	f003 0301 	and.w	r3, r3, #1
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d003      	beq.n	80071ec <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80071ea:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80071ec:	887b      	ldrh	r3, [r7, #2]
 80071ee:	f003 0302 	and.w	r3, r3, #2
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d003      	beq.n	80071fe <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80071fc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80071fe:	887b      	ldrh	r3, [r7, #2]
 8007200:	2b10      	cmp	r3, #16
 8007202:	d103      	bne.n	800720c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800720a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800720c:	887b      	ldrh	r3, [r7, #2]
 800720e:	2b20      	cmp	r3, #32
 8007210:	d133      	bne.n	800727a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f043 0320 	orr.w	r3, r3, #32
 8007218:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800721a:	e02e      	b.n	800727a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800721c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007220:	2b00      	cmp	r3, #0
 8007222:	da03      	bge.n	800722c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800722a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800722c:	887b      	ldrh	r3, [r7, #2]
 800722e:	f003 0301 	and.w	r3, r3, #1
 8007232:	2b00      	cmp	r3, #0
 8007234:	d003      	beq.n	800723e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800723c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800723e:	887b      	ldrh	r3, [r7, #2]
 8007240:	f003 0302 	and.w	r3, r3, #2
 8007244:	2b00      	cmp	r3, #0
 8007246:	d003      	beq.n	8007250 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800724e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007250:	887b      	ldrh	r3, [r7, #2]
 8007252:	2b10      	cmp	r3, #16
 8007254:	d103      	bne.n	800725e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800725c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800725e:	887b      	ldrh	r3, [r7, #2]
 8007260:	2b20      	cmp	r3, #32
 8007262:	d103      	bne.n	800726c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800726a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800726c:	887b      	ldrh	r3, [r7, #2]
 800726e:	2b40      	cmp	r3, #64	; 0x40
 8007270:	d103      	bne.n	800727a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007278:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	6819      	ldr	r1, [r3, #0]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68fa      	ldr	r2, [r7, #12]
 8007286:	430a      	orrs	r2, r1
 8007288:	601a      	str	r2, [r3, #0]
}
 800728a:	bf00      	nop
 800728c:	3714      	adds	r7, #20
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop
 8007298:	0800621d 	.word	0x0800621d
 800729c:	08006641 	.word	0x08006641
 80072a0:	080063f5 	.word	0x080063f5

080072a4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	460b      	mov	r3, r1
 80072ae:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80072b0:	2300      	movs	r3, #0
 80072b2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80072b4:	887b      	ldrh	r3, [r7, #2]
 80072b6:	f003 0301 	and.w	r3, r3, #1
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00f      	beq.n	80072de <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80072c4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80072d2:	2b28      	cmp	r3, #40	; 0x28
 80072d4:	d003      	beq.n	80072de <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80072dc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80072de:	887b      	ldrh	r3, [r7, #2]
 80072e0:	f003 0302 	and.w	r3, r3, #2
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d00f      	beq.n	8007308 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80072ee:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80072fc:	2b28      	cmp	r3, #40	; 0x28
 80072fe:	d003      	beq.n	8007308 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8007306:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007308:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800730c:	2b00      	cmp	r3, #0
 800730e:	da03      	bge.n	8007318 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007316:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007318:	887b      	ldrh	r3, [r7, #2]
 800731a:	2b10      	cmp	r3, #16
 800731c:	d103      	bne.n	8007326 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007324:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007326:	887b      	ldrh	r3, [r7, #2]
 8007328:	2b20      	cmp	r3, #32
 800732a:	d103      	bne.n	8007334 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f043 0320 	orr.w	r3, r3, #32
 8007332:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007334:	887b      	ldrh	r3, [r7, #2]
 8007336:	2b40      	cmp	r3, #64	; 0x40
 8007338:	d103      	bne.n	8007342 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007340:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	6819      	ldr	r1, [r3, #0]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	43da      	mvns	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	400a      	ands	r2, r1
 8007352:	601a      	str	r2, [r3, #0]
}
 8007354:	bf00      	nop
 8007356:	3714      	adds	r7, #20
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007370:	b2db      	uxtb	r3, r3
 8007372:	2b20      	cmp	r3, #32
 8007374:	d138      	bne.n	80073e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800737c:	2b01      	cmp	r3, #1
 800737e:	d101      	bne.n	8007384 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007380:	2302      	movs	r3, #2
 8007382:	e032      	b.n	80073ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2224      	movs	r2, #36	; 0x24
 8007390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f022 0201 	bic.w	r2, r2, #1
 80073a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80073b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	6819      	ldr	r1, [r3, #0]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	683a      	ldr	r2, [r7, #0]
 80073c0:	430a      	orrs	r2, r1
 80073c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f042 0201 	orr.w	r2, r2, #1
 80073d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2220      	movs	r2, #32
 80073d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80073e4:	2300      	movs	r3, #0
 80073e6:	e000      	b.n	80073ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80073e8:	2302      	movs	r3, #2
  }
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	370c      	adds	r7, #12
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr

080073f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80073f6:	b480      	push	{r7}
 80073f8:	b085      	sub	sp, #20
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
 80073fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007406:	b2db      	uxtb	r3, r3
 8007408:	2b20      	cmp	r3, #32
 800740a:	d139      	bne.n	8007480 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007412:	2b01      	cmp	r3, #1
 8007414:	d101      	bne.n	800741a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007416:	2302      	movs	r3, #2
 8007418:	e033      	b.n	8007482 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2201      	movs	r2, #1
 800741e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2224      	movs	r2, #36	; 0x24
 8007426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f022 0201 	bic.w	r2, r2, #1
 8007438:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007448:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	021b      	lsls	r3, r3, #8
 800744e:	68fa      	ldr	r2, [r7, #12]
 8007450:	4313      	orrs	r3, r2
 8007452:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f042 0201 	orr.w	r2, r2, #1
 800746a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2220      	movs	r2, #32
 8007470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800747c:	2300      	movs	r3, #0
 800747e:	e000      	b.n	8007482 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007480:	2302      	movs	r3, #2
  }
}
 8007482:	4618      	mov	r0, r3
 8007484:	3714      	adds	r7, #20
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
	...

08007490 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b086      	sub	sp, #24
 8007494:	af02      	add	r7, sp, #8
 8007496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007498:	2300      	movs	r3, #0
 800749a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800749c:	f7fc fd6a 	bl	8003f74 <HAL_GetTick>
 80074a0:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d102      	bne.n	80074ae <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	73fb      	strb	r3, [r7, #15]
 80074ac:	e092      	b.n	80075d4 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f040 808b 	bne.w	80075d4 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f7fc f9ac 	bl	800381c <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80074c4:	f241 3188 	movw	r1, #5000	; 0x1388
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 f88b 	bl	80075e4 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	689a      	ldr	r2, [r3, #8]
 80074d4:	4b42      	ldr	r3, [pc, #264]	; (80075e0 <HAL_OSPI_Init+0x150>)
 80074d6:	4013      	ands	r3, r2
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	68d1      	ldr	r1, [r2, #12]
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	6912      	ldr	r2, [r2, #16]
 80074e0:	3a01      	subs	r2, #1
 80074e2:	0412      	lsls	r2, r2, #16
 80074e4:	4311      	orrs	r1, r2
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	6952      	ldr	r2, [r2, #20]
 80074ea:	3a01      	subs	r2, #1
 80074ec:	0212      	lsls	r2, r2, #8
 80074ee:	4311      	orrs	r1, r2
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80074f4:	4311      	orrs	r1, r2
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	69d2      	ldr	r2, [r2, #28]
 80074fa:	4311      	orrs	r1, r2
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	6812      	ldr	r2, [r2, #0]
 8007500:	430b      	orrs	r3, r1
 8007502:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	0412      	lsls	r2, r2, #16
 800750e:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	3b01      	subs	r3, #1
 8007520:	021a      	lsls	r2, r3, #8
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	430a      	orrs	r2, r1
 8007528:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800752e:	9300      	str	r3, [sp, #0]
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	2200      	movs	r2, #0
 8007534:	2120      	movs	r1, #32
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 fb98 	bl	8007c6c <OSPI_WaitFlagStateUntilTimeout>
 800753c:	4603      	mov	r3, r0
 800753e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8007540:	7bfb      	ldrb	r3, [r7, #15]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d146      	bne.n	80075d4 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a1b      	ldr	r3, [r3, #32]
 8007554:	1e5a      	subs	r2, r3, #1
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	430a      	orrs	r2, r1
 800755c:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	689a      	ldr	r2, [r3, #8]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	430a      	orrs	r2, r1
 8007572:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800757c:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007588:	431a      	orrs	r2, r3
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	430a      	orrs	r2, r1
 8007590:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f042 0201 	orr.w	r2, r2, #1
 80075a2:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	699b      	ldr	r3, [r3, #24]
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	d107      	bne.n	80075bc <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	689a      	ldr	r2, [r3, #8]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f042 0202 	orr.w	r2, r2, #2
 80075ba:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80075c4:	d103      	bne.n	80075ce <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2201      	movs	r2, #1
 80075ca:	645a      	str	r2, [r3, #68]	; 0x44
 80075cc:	e002      	b.n	80075d4 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2202      	movs	r2, #2
 80075d2:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 80075d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	f8e0f8f4 	.word	0xf8e0f8f4

080075e4 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	683a      	ldr	r2, [r7, #0]
 80075f2:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	370c      	adds	r7, #12
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
	...

08007604 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b092      	sub	sp, #72	; 0x48
 8007608:	af00      	add	r7, sp, #0
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	60b9      	str	r1, [r7, #8]
 800760e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007610:	2300      	movs	r3, #0
 8007612:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8007616:	2300      	movs	r3, #0
 8007618:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a08      	ldr	r2, [pc, #32]	; (8007644 <HAL_OSPIM_Config+0x40>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d105      	bne.n	8007632 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8007626:	2300      	movs	r3, #0
 8007628:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 800762a:	2301      	movs	r3, #1
 800762c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8007630:	e004      	b.n	800763c <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8007632:	2301      	movs	r3, #1
 8007634:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 8007636:	2300      	movs	r3, #0
 8007638:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800763c:	2300      	movs	r3, #0
 800763e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007642:	e01f      	b.n	8007684 <HAL_OSPIM_Config+0x80>
 8007644:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8007648:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800764c:	3301      	adds	r3, #1
 800764e:	b2d8      	uxtb	r0, r3
 8007650:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8007654:	f107 0114 	add.w	r1, r7, #20
 8007658:	4613      	mov	r3, r2
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	4413      	add	r3, r2
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	440b      	add	r3, r1
 8007662:	4619      	mov	r1, r3
 8007664:	f000 fb3a 	bl	8007cdc <OSPIM_GetConfig>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d005      	beq.n	800767a <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2208      	movs	r2, #8
 8007678:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800767a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800767e:	3301      	adds	r3, #1
 8007680:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007684:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007688:	2b01      	cmp	r3, #1
 800768a:	d9dd      	bls.n	8007648 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 800768c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007690:	2b00      	cmp	r3, #0
 8007692:	f040 82de 	bne.w	8007c52 <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8007696:	4bc6      	ldr	r3, [pc, #792]	; (80079b0 <HAL_OSPIM_Config+0x3ac>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 0301 	and.w	r3, r3, #1
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00b      	beq.n	80076ba <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80076a2:	4bc3      	ldr	r3, [pc, #780]	; (80079b0 <HAL_OSPIM_Config+0x3ac>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4ac2      	ldr	r2, [pc, #776]	; (80079b0 <HAL_OSPIM_Config+0x3ac>)
 80076a8:	f023 0301 	bic.w	r3, r3, #1
 80076ac:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80076ae:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80076b2:	f043 0301 	orr.w	r3, r3, #1
 80076b6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80076ba:	4bbe      	ldr	r3, [pc, #760]	; (80079b4 <HAL_OSPIM_Config+0x3b0>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 0301 	and.w	r3, r3, #1
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d00b      	beq.n	80076de <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80076c6:	4bbb      	ldr	r3, [pc, #748]	; (80079b4 <HAL_OSPIM_Config+0x3b0>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4aba      	ldr	r2, [pc, #744]	; (80079b4 <HAL_OSPIM_Config+0x3b0>)
 80076cc:	f023 0301 	bic.w	r3, r3, #1
 80076d0:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80076d2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80076d6:	f043 0302 	orr.w	r3, r3, #2
 80076da:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80076de:	49b6      	ldr	r1, [pc, #728]	; (80079b8 <HAL_OSPIM_Config+0x3b4>)
 80076e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80076e2:	4613      	mov	r3, r2
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	4413      	add	r3, r2
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	3348      	adds	r3, #72	; 0x48
 80076ec:	443b      	add	r3, r7
 80076ee:	3b2c      	subs	r3, #44	; 0x2c
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	3b01      	subs	r3, #1
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	440b      	add	r3, r1
 80076f8:	6859      	ldr	r1, [r3, #4]
 80076fa:	48af      	ldr	r0, [pc, #700]	; (80079b8 <HAL_OSPIM_Config+0x3b4>)
 80076fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80076fe:	4613      	mov	r3, r2
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	4413      	add	r3, r2
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	3348      	adds	r3, #72	; 0x48
 8007708:	443b      	add	r3, r7
 800770a:	3b2c      	subs	r3, #44	; 0x2c
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	3b01      	subs	r3, #1
 8007710:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	4403      	add	r3, r0
 8007718:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 800771a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800771c:	4613      	mov	r3, r2
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	4413      	add	r3, r2
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	3348      	adds	r3, #72	; 0x48
 8007726:	443b      	add	r3, r7
 8007728:	3b34      	subs	r3, #52	; 0x34
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	f000 80a1 	beq.w	8007874 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8007732:	49a1      	ldr	r1, [pc, #644]	; (80079b8 <HAL_OSPIM_Config+0x3b4>)
 8007734:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007736:	4613      	mov	r3, r2
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	4413      	add	r3, r2
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	3348      	adds	r3, #72	; 0x48
 8007740:	443b      	add	r3, r7
 8007742:	3b34      	subs	r3, #52	; 0x34
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	3b01      	subs	r3, #1
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	440b      	add	r3, r1
 800774c:	6859      	ldr	r1, [r3, #4]
 800774e:	489a      	ldr	r0, [pc, #616]	; (80079b8 <HAL_OSPIM_Config+0x3b4>)
 8007750:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007752:	4613      	mov	r3, r2
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	4413      	add	r3, r2
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	3348      	adds	r3, #72	; 0x48
 800775c:	443b      	add	r3, r7
 800775e:	3b34      	subs	r3, #52	; 0x34
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	3b01      	subs	r3, #1
 8007764:	f021 0201 	bic.w	r2, r1, #1
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	4403      	add	r3, r0
 800776c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800776e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007770:	4613      	mov	r3, r2
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	4413      	add	r3, r2
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	3348      	adds	r3, #72	; 0x48
 800777a:	443b      	add	r3, r7
 800777c:	3b30      	subs	r3, #48	; 0x30
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d01d      	beq.n	80077c0 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8007784:	498c      	ldr	r1, [pc, #560]	; (80079b8 <HAL_OSPIM_Config+0x3b4>)
 8007786:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007788:	4613      	mov	r3, r2
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	4413      	add	r3, r2
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	3348      	adds	r3, #72	; 0x48
 8007792:	443b      	add	r3, r7
 8007794:	3b30      	subs	r3, #48	; 0x30
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	3b01      	subs	r3, #1
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	440b      	add	r3, r1
 800779e:	6859      	ldr	r1, [r3, #4]
 80077a0:	4885      	ldr	r0, [pc, #532]	; (80079b8 <HAL_OSPIM_Config+0x3b4>)
 80077a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077a4:	4613      	mov	r3, r2
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	4413      	add	r3, r2
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	3348      	adds	r3, #72	; 0x48
 80077ae:	443b      	add	r3, r7
 80077b0:	3b30      	subs	r3, #48	; 0x30
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	3b01      	subs	r3, #1
 80077b6:	f021 0210 	bic.w	r2, r1, #16
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	4403      	add	r3, r0
 80077be:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80077c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077c2:	4613      	mov	r3, r2
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	4413      	add	r3, r2
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	3348      	adds	r3, #72	; 0x48
 80077cc:	443b      	add	r3, r7
 80077ce:	3b28      	subs	r3, #40	; 0x28
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d021      	beq.n	800781a <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80077d6:	4978      	ldr	r1, [pc, #480]	; (80079b8 <HAL_OSPIM_Config+0x3b4>)
 80077d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077da:	4613      	mov	r3, r2
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	4413      	add	r3, r2
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	3348      	adds	r3, #72	; 0x48
 80077e4:	443b      	add	r3, r7
 80077e6:	3b28      	subs	r3, #40	; 0x28
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	3b01      	subs	r3, #1
 80077ec:	f003 0301 	and.w	r3, r3, #1
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	440b      	add	r3, r1
 80077f4:	6859      	ldr	r1, [r3, #4]
 80077f6:	4870      	ldr	r0, [pc, #448]	; (80079b8 <HAL_OSPIM_Config+0x3b4>)
 80077f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077fa:	4613      	mov	r3, r2
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	4413      	add	r3, r2
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	3348      	adds	r3, #72	; 0x48
 8007804:	443b      	add	r3, r7
 8007806:	3b28      	subs	r3, #40	; 0x28
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	3b01      	subs	r3, #1
 800780c:	f003 0301 	and.w	r3, r3, #1
 8007810:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	4403      	add	r3, r0
 8007818:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800781a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800781c:	4613      	mov	r3, r2
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	4413      	add	r3, r2
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	3348      	adds	r3, #72	; 0x48
 8007826:	443b      	add	r3, r7
 8007828:	3b24      	subs	r3, #36	; 0x24
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d021      	beq.n	8007874 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8007830:	4961      	ldr	r1, [pc, #388]	; (80079b8 <HAL_OSPIM_Config+0x3b4>)
 8007832:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007834:	4613      	mov	r3, r2
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	4413      	add	r3, r2
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	3348      	adds	r3, #72	; 0x48
 800783e:	443b      	add	r3, r7
 8007840:	3b24      	subs	r3, #36	; 0x24
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	3b01      	subs	r3, #1
 8007846:	f003 0301 	and.w	r3, r3, #1
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	440b      	add	r3, r1
 800784e:	6859      	ldr	r1, [r3, #4]
 8007850:	4859      	ldr	r0, [pc, #356]	; (80079b8 <HAL_OSPIM_Config+0x3b4>)
 8007852:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007854:	4613      	mov	r3, r2
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	4413      	add	r3, r2
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	3348      	adds	r3, #72	; 0x48
 800785e:	443b      	add	r3, r7
 8007860:	3b24      	subs	r3, #36	; 0x24
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	3b01      	subs	r3, #1
 8007866:	f003 0301 	and.w	r3, r3, #1
 800786a:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	4403      	add	r3, r0
 8007872:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	6819      	ldr	r1, [r3, #0]
 8007878:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800787c:	4613      	mov	r3, r2
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	4413      	add	r3, r2
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	3348      	adds	r3, #72	; 0x48
 8007886:	443b      	add	r3, r7
 8007888:	3b34      	subs	r3, #52	; 0x34
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4299      	cmp	r1, r3
 800788e:	d038      	beq.n	8007902 <HAL_OSPIM_Config+0x2fe>
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	6859      	ldr	r1, [r3, #4]
 8007894:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8007898:	4613      	mov	r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	4413      	add	r3, r2
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	3348      	adds	r3, #72	; 0x48
 80078a2:	443b      	add	r3, r7
 80078a4:	3b30      	subs	r3, #48	; 0x30
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4299      	cmp	r1, r3
 80078aa:	d02a      	beq.n	8007902 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	6899      	ldr	r1, [r3, #8]
 80078b0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80078b4:	4613      	mov	r3, r2
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	4413      	add	r3, r2
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	3348      	adds	r3, #72	; 0x48
 80078be:	443b      	add	r3, r7
 80078c0:	3b2c      	subs	r3, #44	; 0x2c
 80078c2:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80078c4:	4299      	cmp	r1, r3
 80078c6:	d01c      	beq.n	8007902 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	68d9      	ldr	r1, [r3, #12]
 80078cc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80078d0:	4613      	mov	r3, r2
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	4413      	add	r3, r2
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	3348      	adds	r3, #72	; 0x48
 80078da:	443b      	add	r3, r7
 80078dc:	3b28      	subs	r3, #40	; 0x28
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4299      	cmp	r1, r3
 80078e2:	d00e      	beq.n	8007902 <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	6919      	ldr	r1, [r3, #16]
 80078e8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80078ec:	4613      	mov	r3, r2
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	4413      	add	r3, r2
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	3348      	adds	r3, #72	; 0x48
 80078f6:	443b      	add	r3, r7
 80078f8:	3b24      	subs	r3, #36	; 0x24
 80078fa:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80078fc:	4299      	cmp	r1, r3
 80078fe:	f040 80d3 	bne.w	8007aa8 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8007902:	492d      	ldr	r1, [pc, #180]	; (80079b8 <HAL_OSPIM_Config+0x3b4>)
 8007904:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8007908:	4613      	mov	r3, r2
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	4413      	add	r3, r2
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	3348      	adds	r3, #72	; 0x48
 8007912:	443b      	add	r3, r7
 8007914:	3b34      	subs	r3, #52	; 0x34
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	3b01      	subs	r3, #1
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	440b      	add	r3, r1
 800791e:	6859      	ldr	r1, [r3, #4]
 8007920:	4825      	ldr	r0, [pc, #148]	; (80079b8 <HAL_OSPIM_Config+0x3b4>)
 8007922:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8007926:	4613      	mov	r3, r2
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	4413      	add	r3, r2
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	3348      	adds	r3, #72	; 0x48
 8007930:	443b      	add	r3, r7
 8007932:	3b34      	subs	r3, #52	; 0x34
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	3b01      	subs	r3, #1
 8007938:	f021 0201 	bic.w	r2, r1, #1
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	4403      	add	r3, r0
 8007940:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8007942:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8007946:	4613      	mov	r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	4413      	add	r3, r2
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	3348      	adds	r3, #72	; 0x48
 8007950:	443b      	add	r3, r7
 8007952:	3b30      	subs	r3, #48	; 0x30
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d01f      	beq.n	800799a <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800795a:	4917      	ldr	r1, [pc, #92]	; (80079b8 <HAL_OSPIM_Config+0x3b4>)
 800795c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8007960:	4613      	mov	r3, r2
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	4413      	add	r3, r2
 8007966:	009b      	lsls	r3, r3, #2
 8007968:	3348      	adds	r3, #72	; 0x48
 800796a:	443b      	add	r3, r7
 800796c:	3b30      	subs	r3, #48	; 0x30
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	3b01      	subs	r3, #1
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	440b      	add	r3, r1
 8007976:	6859      	ldr	r1, [r3, #4]
 8007978:	480f      	ldr	r0, [pc, #60]	; (80079b8 <HAL_OSPIM_Config+0x3b4>)
 800797a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800797e:	4613      	mov	r3, r2
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	4413      	add	r3, r2
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	3348      	adds	r3, #72	; 0x48
 8007988:	443b      	add	r3, r7
 800798a:	3b30      	subs	r3, #48	; 0x30
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	3b01      	subs	r3, #1
 8007990:	f021 0210 	bic.w	r2, r1, #16
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4403      	add	r3, r0
 8007998:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800799a:	4907      	ldr	r1, [pc, #28]	; (80079b8 <HAL_OSPIM_Config+0x3b4>)
 800799c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80079a0:	4613      	mov	r3, r2
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	4413      	add	r3, r2
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	3348      	adds	r3, #72	; 0x48
 80079aa:	443b      	add	r3, r7
 80079ac:	3b2c      	subs	r3, #44	; 0x2c
 80079ae:	e005      	b.n	80079bc <HAL_OSPIM_Config+0x3b8>
 80079b0:	a0001000 	.word	0xa0001000
 80079b4:	a0001400 	.word	0xa0001400
 80079b8:	50061c00 	.word	0x50061c00
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	3b01      	subs	r3, #1
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	440b      	add	r3, r1
 80079c4:	6859      	ldr	r1, [r3, #4]
 80079c6:	48a6      	ldr	r0, [pc, #664]	; (8007c60 <HAL_OSPIM_Config+0x65c>)
 80079c8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80079cc:	4613      	mov	r3, r2
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	4413      	add	r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	3348      	adds	r3, #72	; 0x48
 80079d6:	443b      	add	r3, r7
 80079d8:	3b2c      	subs	r3, #44	; 0x2c
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	3b01      	subs	r3, #1
 80079de:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	4403      	add	r3, r0
 80079e6:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80079e8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80079ec:	4613      	mov	r3, r2
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4413      	add	r3, r2
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	3348      	adds	r3, #72	; 0x48
 80079f6:	443b      	add	r3, r7
 80079f8:	3b28      	subs	r3, #40	; 0x28
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d023      	beq.n	8007a48 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007a00:	4997      	ldr	r1, [pc, #604]	; (8007c60 <HAL_OSPIM_Config+0x65c>)
 8007a02:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8007a06:	4613      	mov	r3, r2
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	4413      	add	r3, r2
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	3348      	adds	r3, #72	; 0x48
 8007a10:	443b      	add	r3, r7
 8007a12:	3b28      	subs	r3, #40	; 0x28
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	3b01      	subs	r3, #1
 8007a18:	f003 0301 	and.w	r3, r3, #1
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	440b      	add	r3, r1
 8007a20:	6859      	ldr	r1, [r3, #4]
 8007a22:	488f      	ldr	r0, [pc, #572]	; (8007c60 <HAL_OSPIM_Config+0x65c>)
 8007a24:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8007a28:	4613      	mov	r3, r2
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	4413      	add	r3, r2
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	3348      	adds	r3, #72	; 0x48
 8007a32:	443b      	add	r3, r7
 8007a34:	3b28      	subs	r3, #40	; 0x28
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	3b01      	subs	r3, #1
 8007a3a:	f003 0301 	and.w	r3, r3, #1
 8007a3e:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	4403      	add	r3, r0
 8007a46:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007a48:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8007a4c:	4613      	mov	r3, r2
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	4413      	add	r3, r2
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	3348      	adds	r3, #72	; 0x48
 8007a56:	443b      	add	r3, r7
 8007a58:	3b24      	subs	r3, #36	; 0x24
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d023      	beq.n	8007aa8 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007a60:	497f      	ldr	r1, [pc, #508]	; (8007c60 <HAL_OSPIM_Config+0x65c>)
 8007a62:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8007a66:	4613      	mov	r3, r2
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	4413      	add	r3, r2
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	3348      	adds	r3, #72	; 0x48
 8007a70:	443b      	add	r3, r7
 8007a72:	3b24      	subs	r3, #36	; 0x24
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	3b01      	subs	r3, #1
 8007a78:	f003 0301 	and.w	r3, r3, #1
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	440b      	add	r3, r1
 8007a80:	6859      	ldr	r1, [r3, #4]
 8007a82:	4877      	ldr	r0, [pc, #476]	; (8007c60 <HAL_OSPIM_Config+0x65c>)
 8007a84:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8007a88:	4613      	mov	r3, r2
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	4413      	add	r3, r2
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	3348      	adds	r3, #72	; 0x48
 8007a92:	443b      	add	r3, r7
 8007a94:	3b24      	subs	r3, #36	; 0x24
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	f003 0301 	and.w	r3, r3, #1
 8007a9e:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	4403      	add	r3, r0
 8007aa6:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8007aa8:	4a6d      	ldr	r2, [pc, #436]	; (8007c60 <HAL_OSPIM_Config+0x65c>)
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	4413      	add	r3, r2
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007aba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007abc:	025b      	lsls	r3, r3, #9
 8007abe:	431a      	orrs	r2, r3
 8007ac0:	4967      	ldr	r1, [pc, #412]	; (8007c60 <HAL_OSPIM_Config+0x65c>)
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	440b      	add	r3, r1
 8007ad0:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8007ad2:	4a63      	ldr	r2, [pc, #396]	; (8007c60 <HAL_OSPIM_Config+0x65c>)
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	3b01      	subs	r3, #1
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	4413      	add	r3, r2
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	f023 0203 	bic.w	r2, r3, #3
 8007ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ae6:	005b      	lsls	r3, r3, #1
 8007ae8:	431a      	orrs	r2, r3
 8007aea:	495d      	ldr	r1, [pc, #372]	; (8007c60 <HAL_OSPIM_Config+0x65c>)
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	3b01      	subs	r3, #1
 8007af2:	f042 0201 	orr.w	r2, r2, #1
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	440b      	add	r3, r1
 8007afa:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d014      	beq.n	8007b2e <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8007b04:	4a56      	ldr	r2, [pc, #344]	; (8007c60 <HAL_OSPIM_Config+0x65c>)
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	4413      	add	r3, r2
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b18:	015b      	lsls	r3, r3, #5
 8007b1a:	431a      	orrs	r2, r3
 8007b1c:	4950      	ldr	r1, [pc, #320]	; (8007c60 <HAL_OSPIM_Config+0x65c>)
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	3b01      	subs	r3, #1
 8007b24:	f042 0210 	orr.w	r2, r2, #16
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	440b      	add	r3, r1
 8007b2c:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d019      	beq.n	8007b6e <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007b3a:	4a49      	ldr	r2, [pc, #292]	; (8007c60 <HAL_OSPIM_Config+0x65c>)
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	3b01      	subs	r3, #1
 8007b42:	f003 0301 	and.w	r3, r3, #1
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	4413      	add	r3, r2
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b52:	049b      	lsls	r3, r3, #18
 8007b54:	431a      	orrs	r2, r3
 8007b56:	4942      	ldr	r1, [pc, #264]	; (8007c60 <HAL_OSPIM_Config+0x65c>)
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	3b01      	subs	r3, #1
 8007b5e:	f003 0301 	and.w	r3, r3, #1
 8007b62:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	440b      	add	r3, r1
 8007b6a:	605a      	str	r2, [r3, #4]
 8007b6c:	e01c      	b.n	8007ba8 <HAL_OSPIM_Config+0x5a4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	68db      	ldr	r3, [r3, #12]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d018      	beq.n	8007ba8 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007b76:	4a3a      	ldr	r2, [pc, #232]	; (8007c60 <HAL_OSPIM_Config+0x65c>)
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	f003 0301 	and.w	r3, r3, #1
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	4413      	add	r3, r2
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007b8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b8e:	069b      	lsls	r3, r3, #26
 8007b90:	431a      	orrs	r2, r3
 8007b92:	4933      	ldr	r1, [pc, #204]	; (8007c60 <HAL_OSPIM_Config+0x65c>)
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	f003 0301 	and.w	r3, r3, #1
 8007b9e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	440b      	add	r3, r1
 8007ba6:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	691b      	ldr	r3, [r3, #16]
 8007bac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d019      	beq.n	8007be8 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007bb4:	4a2a      	ldr	r2, [pc, #168]	; (8007c60 <HAL_OSPIM_Config+0x65c>)
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	691b      	ldr	r3, [r3, #16]
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	f003 0301 	and.w	r3, r3, #1
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	4413      	add	r3, r2
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007bca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bcc:	049b      	lsls	r3, r3, #18
 8007bce:	431a      	orrs	r2, r3
 8007bd0:	4923      	ldr	r1, [pc, #140]	; (8007c60 <HAL_OSPIM_Config+0x65c>)
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	f003 0301 	and.w	r3, r3, #1
 8007bdc:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	440b      	add	r3, r1
 8007be4:	605a      	str	r2, [r3, #4]
 8007be6:	e01c      	b.n	8007c22 <HAL_OSPIM_Config+0x61e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	691b      	ldr	r3, [r3, #16]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d018      	beq.n	8007c22 <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007bf0:	4a1b      	ldr	r2, [pc, #108]	; (8007c60 <HAL_OSPIM_Config+0x65c>)
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	3b01      	subs	r3, #1
 8007bf8:	f003 0301 	and.w	r3, r3, #1
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	4413      	add	r3, r2
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c08:	069b      	lsls	r3, r3, #26
 8007c0a:	431a      	orrs	r2, r3
 8007c0c:	4914      	ldr	r1, [pc, #80]	; (8007c60 <HAL_OSPIM_Config+0x65c>)
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	3b01      	subs	r3, #1
 8007c14:	f003 0301 	and.w	r3, r3, #1
 8007c18:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	440b      	add	r3, r1
 8007c20:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8007c22:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8007c26:	f003 0301 	and.w	r3, r3, #1
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d005      	beq.n	8007c3a <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8007c2e:	4b0d      	ldr	r3, [pc, #52]	; (8007c64 <HAL_OSPIM_Config+0x660>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a0c      	ldr	r2, [pc, #48]	; (8007c64 <HAL_OSPIM_Config+0x660>)
 8007c34:	f043 0301 	orr.w	r3, r3, #1
 8007c38:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8007c3a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8007c3e:	f003 0302 	and.w	r3, r3, #2
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d005      	beq.n	8007c52 <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8007c46:	4b08      	ldr	r3, [pc, #32]	; (8007c68 <HAL_OSPIM_Config+0x664>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a07      	ldr	r2, [pc, #28]	; (8007c68 <HAL_OSPIM_Config+0x664>)
 8007c4c:	f043 0301 	orr.w	r3, r3, #1
 8007c50:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8007c52:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3748      	adds	r7, #72	; 0x48
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	50061c00 	.word	0x50061c00
 8007c64:	a0001000 	.word	0xa0001000
 8007c68:	a0001400 	.word	0xa0001400

08007c6c <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	603b      	str	r3, [r7, #0]
 8007c78:	4613      	mov	r3, r2
 8007c7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007c7c:	e01a      	b.n	8007cb4 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c84:	d016      	beq.n	8007cb4 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c86:	f7fc f975 	bl	8003f74 <HAL_GetTick>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	1ad3      	subs	r3, r2, r3
 8007c90:	69ba      	ldr	r2, [r7, #24]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d302      	bcc.n	8007c9c <OSPI_WaitFlagStateUntilTimeout+0x30>
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d10b      	bne.n	8007cb4 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ca2:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ca8:	f043 0201 	orr.w	r2, r3, #1
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e00e      	b.n	8007cd2 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	6a1a      	ldr	r2, [r3, #32]
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	bf14      	ite	ne
 8007cc2:	2301      	movne	r3, #1
 8007cc4:	2300      	moveq	r3, #0
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	461a      	mov	r2, r3
 8007cca:	79fb      	ldrb	r3, [r7, #7]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d1d6      	bne.n	8007c7e <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3710      	adds	r7, #16
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
	...

08007cdc <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b087      	sub	sp, #28
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	6039      	str	r1, [r7, #0]
 8007ce6:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8007cec:	2300      	movs	r3, #0
 8007cee:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8007cf0:	79fb      	ldrb	r3, [r7, #7]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d005      	beq.n	8007d02 <OSPIM_GetConfig+0x26>
 8007cf6:	79fb      	ldrb	r3, [r7, #7]
 8007cf8:	2b02      	cmp	r3, #2
 8007cfa:	d802      	bhi.n	8007d02 <OSPIM_GetConfig+0x26>
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d102      	bne.n	8007d08 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	75fb      	strb	r3, [r7, #23]
 8007d06:	e08e      	b.n	8007e26 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	2200      	movs	r2, #0
 8007d12:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	2200      	movs	r2, #0
 8007d18:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	2200      	movs	r2, #0
 8007d24:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8007d26:	79fb      	ldrb	r3, [r7, #7]
 8007d28:	2b02      	cmp	r3, #2
 8007d2a:	d101      	bne.n	8007d30 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8007d2c:	4b41      	ldr	r3, [pc, #260]	; (8007e34 <OSPIM_GetConfig+0x158>)
 8007d2e:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8007d30:	2300      	movs	r3, #0
 8007d32:	60fb      	str	r3, [r7, #12]
 8007d34:	e074      	b.n	8007e20 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8007d36:	4a40      	ldr	r2, [pc, #256]	; (8007e38 <OSPIM_GetConfig+0x15c>)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	4413      	add	r3, r2
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	f003 0301 	and.w	r3, r3, #1
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00a      	beq.n	8007d62 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8007d4c:	68ba      	ldr	r2, [r7, #8]
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	4053      	eors	r3, r2
 8007d52:	f003 0302 	and.w	r3, r3, #2
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d103      	bne.n	8007d62 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	1c5a      	adds	r2, r3, #1
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	f003 0310 	and.w	r3, r3, #16
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00a      	beq.n	8007d82 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8007d6c:	68ba      	ldr	r2, [r7, #8]
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	4053      	eors	r3, r2
 8007d72:	f003 0320 	and.w	r3, r3, #32
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d103      	bne.n	8007d82 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	1c5a      	adds	r2, r3, #1
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d00a      	beq.n	8007da2 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8007d8c:	68ba      	ldr	r2, [r7, #8]
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	4053      	eors	r3, r2
 8007d92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d103      	bne.n	8007da2 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	1c5a      	adds	r2, r3, #1
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d018      	beq.n	8007dde <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8007dac:	68ba      	ldr	r2, [r7, #8]
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	4053      	eors	r3, r2
 8007db2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d111      	bne.n	8007dde <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d106      	bne.n	8007dd2 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	60da      	str	r2, [r3, #12]
 8007dd0:	e005      	b.n	8007dde <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d018      	beq.n	8007e1a <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8007de8:	68ba      	ldr	r2, [r7, #8]
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	4053      	eors	r3, r2
 8007dee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d111      	bne.n	8007e1a <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d106      	bne.n	8007e0e <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	3301      	adds	r3, #1
 8007e04:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	611a      	str	r2, [r3, #16]
 8007e0c:	e005      	b.n	8007e1a <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	3301      	adds	r3, #1
 8007e12:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	60fb      	str	r3, [r7, #12]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d987      	bls.n	8007d36 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8007e26:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	371c      	adds	r7, #28
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr
 8007e34:	04040222 	.word	0x04040222
 8007e38:	50061c00 	.word	0x50061c00

08007e3c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007e40:	4b05      	ldr	r3, [pc, #20]	; (8007e58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a04      	ldr	r2, [pc, #16]	; (8007e58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e4a:	6013      	str	r3, [r2, #0]
}
 8007e4c:	bf00      	nop
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr
 8007e56:	bf00      	nop
 8007e58:	40007000 	.word	0x40007000

08007e5c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007e60:	4b0d      	ldr	r3, [pc, #52]	; (8007e98 <HAL_PWREx_GetVoltageRange+0x3c>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e6c:	d102      	bne.n	8007e74 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8007e6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e72:	e00b      	b.n	8007e8c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8007e74:	4b08      	ldr	r3, [pc, #32]	; (8007e98 <HAL_PWREx_GetVoltageRange+0x3c>)
 8007e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e82:	d102      	bne.n	8007e8a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8007e84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e88:	e000      	b.n	8007e8c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8007e8a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	40007000 	.word	0x40007000

08007e9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b085      	sub	sp, #20
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d141      	bne.n	8007f2e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007eaa:	4b4b      	ldr	r3, [pc, #300]	; (8007fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007eb6:	d131      	bne.n	8007f1c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007eb8:	4b47      	ldr	r3, [pc, #284]	; (8007fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ebe:	4a46      	ldr	r2, [pc, #280]	; (8007fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ec0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ec4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007ec8:	4b43      	ldr	r3, [pc, #268]	; (8007fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007ed0:	4a41      	ldr	r2, [pc, #260]	; (8007fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ed2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007ed6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8007ed8:	4b40      	ldr	r3, [pc, #256]	; (8007fdc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	2232      	movs	r2, #50	; 0x32
 8007ede:	fb02 f303 	mul.w	r3, r2, r3
 8007ee2:	4a3f      	ldr	r2, [pc, #252]	; (8007fe0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ee8:	0c9b      	lsrs	r3, r3, #18
 8007eea:	3301      	adds	r3, #1
 8007eec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007eee:	e002      	b.n	8007ef6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	3b01      	subs	r3, #1
 8007ef4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007ef6:	4b38      	ldr	r3, [pc, #224]	; (8007fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ef8:	695b      	ldr	r3, [r3, #20]
 8007efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f02:	d102      	bne.n	8007f0a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d1f2      	bne.n	8007ef0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007f0a:	4b33      	ldr	r3, [pc, #204]	; (8007fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f0c:	695b      	ldr	r3, [r3, #20]
 8007f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f16:	d158      	bne.n	8007fca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	e057      	b.n	8007fcc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007f1c:	4b2e      	ldr	r3, [pc, #184]	; (8007fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f22:	4a2d      	ldr	r2, [pc, #180]	; (8007fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007f2c:	e04d      	b.n	8007fca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f34:	d141      	bne.n	8007fba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007f36:	4b28      	ldr	r3, [pc, #160]	; (8007fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007f3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f42:	d131      	bne.n	8007fa8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007f44:	4b24      	ldr	r3, [pc, #144]	; (8007fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f4a:	4a23      	ldr	r2, [pc, #140]	; (8007fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007f54:	4b20      	ldr	r3, [pc, #128]	; (8007fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007f5c:	4a1e      	ldr	r2, [pc, #120]	; (8007fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007f62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8007f64:	4b1d      	ldr	r3, [pc, #116]	; (8007fdc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2232      	movs	r2, #50	; 0x32
 8007f6a:	fb02 f303 	mul.w	r3, r2, r3
 8007f6e:	4a1c      	ldr	r2, [pc, #112]	; (8007fe0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007f70:	fba2 2303 	umull	r2, r3, r2, r3
 8007f74:	0c9b      	lsrs	r3, r3, #18
 8007f76:	3301      	adds	r3, #1
 8007f78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007f7a:	e002      	b.n	8007f82 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	3b01      	subs	r3, #1
 8007f80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007f82:	4b15      	ldr	r3, [pc, #84]	; (8007fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f84:	695b      	ldr	r3, [r3, #20]
 8007f86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f8e:	d102      	bne.n	8007f96 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d1f2      	bne.n	8007f7c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007f96:	4b10      	ldr	r3, [pc, #64]	; (8007fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f98:	695b      	ldr	r3, [r3, #20]
 8007f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fa2:	d112      	bne.n	8007fca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007fa4:	2303      	movs	r3, #3
 8007fa6:	e011      	b.n	8007fcc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007fa8:	4b0b      	ldr	r3, [pc, #44]	; (8007fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fae:	4a0a      	ldr	r2, [pc, #40]	; (8007fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007fb8:	e007      	b.n	8007fca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007fba:	4b07      	ldr	r3, [pc, #28]	; (8007fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007fc2:	4a05      	ldr	r2, [pc, #20]	; (8007fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fc4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007fc8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007fca:	2300      	movs	r3, #0
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3714      	adds	r7, #20
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr
 8007fd8:	40007000 	.word	0x40007000
 8007fdc:	2000003c 	.word	0x2000003c
 8007fe0:	431bde83 	.word	0x431bde83

08007fe4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b088      	sub	sp, #32
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d102      	bne.n	8007ff8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	f000 bc08 	b.w	8008808 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ff8:	4b96      	ldr	r3, [pc, #600]	; (8008254 <HAL_RCC_OscConfig+0x270>)
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	f003 030c 	and.w	r3, r3, #12
 8008000:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008002:	4b94      	ldr	r3, [pc, #592]	; (8008254 <HAL_RCC_OscConfig+0x270>)
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	f003 0303 	and.w	r3, r3, #3
 800800a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f003 0310 	and.w	r3, r3, #16
 8008014:	2b00      	cmp	r3, #0
 8008016:	f000 80e4 	beq.w	80081e2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d007      	beq.n	8008030 <HAL_RCC_OscConfig+0x4c>
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	2b0c      	cmp	r3, #12
 8008024:	f040 808b 	bne.w	800813e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	2b01      	cmp	r3, #1
 800802c:	f040 8087 	bne.w	800813e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008030:	4b88      	ldr	r3, [pc, #544]	; (8008254 <HAL_RCC_OscConfig+0x270>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 0302 	and.w	r3, r3, #2
 8008038:	2b00      	cmp	r3, #0
 800803a:	d005      	beq.n	8008048 <HAL_RCC_OscConfig+0x64>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	699b      	ldr	r3, [r3, #24]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d101      	bne.n	8008048 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	e3df      	b.n	8008808 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6a1a      	ldr	r2, [r3, #32]
 800804c:	4b81      	ldr	r3, [pc, #516]	; (8008254 <HAL_RCC_OscConfig+0x270>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f003 0308 	and.w	r3, r3, #8
 8008054:	2b00      	cmp	r3, #0
 8008056:	d004      	beq.n	8008062 <HAL_RCC_OscConfig+0x7e>
 8008058:	4b7e      	ldr	r3, [pc, #504]	; (8008254 <HAL_RCC_OscConfig+0x270>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008060:	e005      	b.n	800806e <HAL_RCC_OscConfig+0x8a>
 8008062:	4b7c      	ldr	r3, [pc, #496]	; (8008254 <HAL_RCC_OscConfig+0x270>)
 8008064:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008068:	091b      	lsrs	r3, r3, #4
 800806a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800806e:	4293      	cmp	r3, r2
 8008070:	d223      	bcs.n	80080ba <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6a1b      	ldr	r3, [r3, #32]
 8008076:	4618      	mov	r0, r3
 8008078:	f000 fdfe 	bl	8008c78 <RCC_SetFlashLatencyFromMSIRange>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d001      	beq.n	8008086 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	e3c0      	b.n	8008808 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008086:	4b73      	ldr	r3, [pc, #460]	; (8008254 <HAL_RCC_OscConfig+0x270>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a72      	ldr	r2, [pc, #456]	; (8008254 <HAL_RCC_OscConfig+0x270>)
 800808c:	f043 0308 	orr.w	r3, r3, #8
 8008090:	6013      	str	r3, [r2, #0]
 8008092:	4b70      	ldr	r3, [pc, #448]	; (8008254 <HAL_RCC_OscConfig+0x270>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a1b      	ldr	r3, [r3, #32]
 800809e:	496d      	ldr	r1, [pc, #436]	; (8008254 <HAL_RCC_OscConfig+0x270>)
 80080a0:	4313      	orrs	r3, r2
 80080a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80080a4:	4b6b      	ldr	r3, [pc, #428]	; (8008254 <HAL_RCC_OscConfig+0x270>)
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	69db      	ldr	r3, [r3, #28]
 80080b0:	021b      	lsls	r3, r3, #8
 80080b2:	4968      	ldr	r1, [pc, #416]	; (8008254 <HAL_RCC_OscConfig+0x270>)
 80080b4:	4313      	orrs	r3, r2
 80080b6:	604b      	str	r3, [r1, #4]
 80080b8:	e025      	b.n	8008106 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80080ba:	4b66      	ldr	r3, [pc, #408]	; (8008254 <HAL_RCC_OscConfig+0x270>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a65      	ldr	r2, [pc, #404]	; (8008254 <HAL_RCC_OscConfig+0x270>)
 80080c0:	f043 0308 	orr.w	r3, r3, #8
 80080c4:	6013      	str	r3, [r2, #0]
 80080c6:	4b63      	ldr	r3, [pc, #396]	; (8008254 <HAL_RCC_OscConfig+0x270>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a1b      	ldr	r3, [r3, #32]
 80080d2:	4960      	ldr	r1, [pc, #384]	; (8008254 <HAL_RCC_OscConfig+0x270>)
 80080d4:	4313      	orrs	r3, r2
 80080d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80080d8:	4b5e      	ldr	r3, [pc, #376]	; (8008254 <HAL_RCC_OscConfig+0x270>)
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	69db      	ldr	r3, [r3, #28]
 80080e4:	021b      	lsls	r3, r3, #8
 80080e6:	495b      	ldr	r1, [pc, #364]	; (8008254 <HAL_RCC_OscConfig+0x270>)
 80080e8:	4313      	orrs	r3, r2
 80080ea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80080ec:	69bb      	ldr	r3, [r7, #24]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d109      	bne.n	8008106 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a1b      	ldr	r3, [r3, #32]
 80080f6:	4618      	mov	r0, r3
 80080f8:	f000 fdbe 	bl	8008c78 <RCC_SetFlashLatencyFromMSIRange>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d001      	beq.n	8008106 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	e380      	b.n	8008808 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008106:	f000 fcc1 	bl	8008a8c <HAL_RCC_GetSysClockFreq>
 800810a:	4602      	mov	r2, r0
 800810c:	4b51      	ldr	r3, [pc, #324]	; (8008254 <HAL_RCC_OscConfig+0x270>)
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	091b      	lsrs	r3, r3, #4
 8008112:	f003 030f 	and.w	r3, r3, #15
 8008116:	4950      	ldr	r1, [pc, #320]	; (8008258 <HAL_RCC_OscConfig+0x274>)
 8008118:	5ccb      	ldrb	r3, [r1, r3]
 800811a:	f003 031f 	and.w	r3, r3, #31
 800811e:	fa22 f303 	lsr.w	r3, r2, r3
 8008122:	4a4e      	ldr	r2, [pc, #312]	; (800825c <HAL_RCC_OscConfig+0x278>)
 8008124:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008126:	4b4e      	ldr	r3, [pc, #312]	; (8008260 <HAL_RCC_OscConfig+0x27c>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4618      	mov	r0, r3
 800812c:	f7fb fd8a 	bl	8003c44 <HAL_InitTick>
 8008130:	4603      	mov	r3, r0
 8008132:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008134:	7bfb      	ldrb	r3, [r7, #15]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d052      	beq.n	80081e0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800813a:	7bfb      	ldrb	r3, [r7, #15]
 800813c:	e364      	b.n	8008808 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	699b      	ldr	r3, [r3, #24]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d032      	beq.n	80081ac <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008146:	4b43      	ldr	r3, [pc, #268]	; (8008254 <HAL_RCC_OscConfig+0x270>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a42      	ldr	r2, [pc, #264]	; (8008254 <HAL_RCC_OscConfig+0x270>)
 800814c:	f043 0301 	orr.w	r3, r3, #1
 8008150:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008152:	f7fb ff0f 	bl	8003f74 <HAL_GetTick>
 8008156:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008158:	e008      	b.n	800816c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800815a:	f7fb ff0b 	bl	8003f74 <HAL_GetTick>
 800815e:	4602      	mov	r2, r0
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	1ad3      	subs	r3, r2, r3
 8008164:	2b02      	cmp	r3, #2
 8008166:	d901      	bls.n	800816c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8008168:	2303      	movs	r3, #3
 800816a:	e34d      	b.n	8008808 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800816c:	4b39      	ldr	r3, [pc, #228]	; (8008254 <HAL_RCC_OscConfig+0x270>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 0302 	and.w	r3, r3, #2
 8008174:	2b00      	cmp	r3, #0
 8008176:	d0f0      	beq.n	800815a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008178:	4b36      	ldr	r3, [pc, #216]	; (8008254 <HAL_RCC_OscConfig+0x270>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a35      	ldr	r2, [pc, #212]	; (8008254 <HAL_RCC_OscConfig+0x270>)
 800817e:	f043 0308 	orr.w	r3, r3, #8
 8008182:	6013      	str	r3, [r2, #0]
 8008184:	4b33      	ldr	r3, [pc, #204]	; (8008254 <HAL_RCC_OscConfig+0x270>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6a1b      	ldr	r3, [r3, #32]
 8008190:	4930      	ldr	r1, [pc, #192]	; (8008254 <HAL_RCC_OscConfig+0x270>)
 8008192:	4313      	orrs	r3, r2
 8008194:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008196:	4b2f      	ldr	r3, [pc, #188]	; (8008254 <HAL_RCC_OscConfig+0x270>)
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	69db      	ldr	r3, [r3, #28]
 80081a2:	021b      	lsls	r3, r3, #8
 80081a4:	492b      	ldr	r1, [pc, #172]	; (8008254 <HAL_RCC_OscConfig+0x270>)
 80081a6:	4313      	orrs	r3, r2
 80081a8:	604b      	str	r3, [r1, #4]
 80081aa:	e01a      	b.n	80081e2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80081ac:	4b29      	ldr	r3, [pc, #164]	; (8008254 <HAL_RCC_OscConfig+0x270>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a28      	ldr	r2, [pc, #160]	; (8008254 <HAL_RCC_OscConfig+0x270>)
 80081b2:	f023 0301 	bic.w	r3, r3, #1
 80081b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80081b8:	f7fb fedc 	bl	8003f74 <HAL_GetTick>
 80081bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80081be:	e008      	b.n	80081d2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80081c0:	f7fb fed8 	bl	8003f74 <HAL_GetTick>
 80081c4:	4602      	mov	r2, r0
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	1ad3      	subs	r3, r2, r3
 80081ca:	2b02      	cmp	r3, #2
 80081cc:	d901      	bls.n	80081d2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80081ce:	2303      	movs	r3, #3
 80081d0:	e31a      	b.n	8008808 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80081d2:	4b20      	ldr	r3, [pc, #128]	; (8008254 <HAL_RCC_OscConfig+0x270>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f003 0302 	and.w	r3, r3, #2
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d1f0      	bne.n	80081c0 <HAL_RCC_OscConfig+0x1dc>
 80081de:	e000      	b.n	80081e2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80081e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f003 0301 	and.w	r3, r3, #1
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d073      	beq.n	80082d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80081ee:	69bb      	ldr	r3, [r7, #24]
 80081f0:	2b08      	cmp	r3, #8
 80081f2:	d005      	beq.n	8008200 <HAL_RCC_OscConfig+0x21c>
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	2b0c      	cmp	r3, #12
 80081f8:	d10e      	bne.n	8008218 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	2b03      	cmp	r3, #3
 80081fe:	d10b      	bne.n	8008218 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008200:	4b14      	ldr	r3, [pc, #80]	; (8008254 <HAL_RCC_OscConfig+0x270>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008208:	2b00      	cmp	r3, #0
 800820a:	d063      	beq.n	80082d4 <HAL_RCC_OscConfig+0x2f0>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d15f      	bne.n	80082d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8008214:	2301      	movs	r3, #1
 8008216:	e2f7      	b.n	8008808 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008220:	d106      	bne.n	8008230 <HAL_RCC_OscConfig+0x24c>
 8008222:	4b0c      	ldr	r3, [pc, #48]	; (8008254 <HAL_RCC_OscConfig+0x270>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a0b      	ldr	r2, [pc, #44]	; (8008254 <HAL_RCC_OscConfig+0x270>)
 8008228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800822c:	6013      	str	r3, [r2, #0]
 800822e:	e025      	b.n	800827c <HAL_RCC_OscConfig+0x298>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008238:	d114      	bne.n	8008264 <HAL_RCC_OscConfig+0x280>
 800823a:	4b06      	ldr	r3, [pc, #24]	; (8008254 <HAL_RCC_OscConfig+0x270>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a05      	ldr	r2, [pc, #20]	; (8008254 <HAL_RCC_OscConfig+0x270>)
 8008240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008244:	6013      	str	r3, [r2, #0]
 8008246:	4b03      	ldr	r3, [pc, #12]	; (8008254 <HAL_RCC_OscConfig+0x270>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a02      	ldr	r2, [pc, #8]	; (8008254 <HAL_RCC_OscConfig+0x270>)
 800824c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008250:	6013      	str	r3, [r2, #0]
 8008252:	e013      	b.n	800827c <HAL_RCC_OscConfig+0x298>
 8008254:	40021000 	.word	0x40021000
 8008258:	0800be80 	.word	0x0800be80
 800825c:	2000003c 	.word	0x2000003c
 8008260:	20000040 	.word	0x20000040
 8008264:	4ba0      	ldr	r3, [pc, #640]	; (80084e8 <HAL_RCC_OscConfig+0x504>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a9f      	ldr	r2, [pc, #636]	; (80084e8 <HAL_RCC_OscConfig+0x504>)
 800826a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800826e:	6013      	str	r3, [r2, #0]
 8008270:	4b9d      	ldr	r3, [pc, #628]	; (80084e8 <HAL_RCC_OscConfig+0x504>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a9c      	ldr	r2, [pc, #624]	; (80084e8 <HAL_RCC_OscConfig+0x504>)
 8008276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800827a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d013      	beq.n	80082ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008284:	f7fb fe76 	bl	8003f74 <HAL_GetTick>
 8008288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800828a:	e008      	b.n	800829e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800828c:	f7fb fe72 	bl	8003f74 <HAL_GetTick>
 8008290:	4602      	mov	r2, r0
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	1ad3      	subs	r3, r2, r3
 8008296:	2b64      	cmp	r3, #100	; 0x64
 8008298:	d901      	bls.n	800829e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800829a:	2303      	movs	r3, #3
 800829c:	e2b4      	b.n	8008808 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800829e:	4b92      	ldr	r3, [pc, #584]	; (80084e8 <HAL_RCC_OscConfig+0x504>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d0f0      	beq.n	800828c <HAL_RCC_OscConfig+0x2a8>
 80082aa:	e014      	b.n	80082d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082ac:	f7fb fe62 	bl	8003f74 <HAL_GetTick>
 80082b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80082b2:	e008      	b.n	80082c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80082b4:	f7fb fe5e 	bl	8003f74 <HAL_GetTick>
 80082b8:	4602      	mov	r2, r0
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	1ad3      	subs	r3, r2, r3
 80082be:	2b64      	cmp	r3, #100	; 0x64
 80082c0:	d901      	bls.n	80082c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80082c2:	2303      	movs	r3, #3
 80082c4:	e2a0      	b.n	8008808 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80082c6:	4b88      	ldr	r3, [pc, #544]	; (80084e8 <HAL_RCC_OscConfig+0x504>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d1f0      	bne.n	80082b4 <HAL_RCC_OscConfig+0x2d0>
 80082d2:	e000      	b.n	80082d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f003 0302 	and.w	r3, r3, #2
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d060      	beq.n	80083a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	2b04      	cmp	r3, #4
 80082e6:	d005      	beq.n	80082f4 <HAL_RCC_OscConfig+0x310>
 80082e8:	69bb      	ldr	r3, [r7, #24]
 80082ea:	2b0c      	cmp	r3, #12
 80082ec:	d119      	bne.n	8008322 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	d116      	bne.n	8008322 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80082f4:	4b7c      	ldr	r3, [pc, #496]	; (80084e8 <HAL_RCC_OscConfig+0x504>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d005      	beq.n	800830c <HAL_RCC_OscConfig+0x328>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d101      	bne.n	800830c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	e27d      	b.n	8008808 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800830c:	4b76      	ldr	r3, [pc, #472]	; (80084e8 <HAL_RCC_OscConfig+0x504>)
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	691b      	ldr	r3, [r3, #16]
 8008318:	061b      	lsls	r3, r3, #24
 800831a:	4973      	ldr	r1, [pc, #460]	; (80084e8 <HAL_RCC_OscConfig+0x504>)
 800831c:	4313      	orrs	r3, r2
 800831e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008320:	e040      	b.n	80083a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d023      	beq.n	8008372 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800832a:	4b6f      	ldr	r3, [pc, #444]	; (80084e8 <HAL_RCC_OscConfig+0x504>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a6e      	ldr	r2, [pc, #440]	; (80084e8 <HAL_RCC_OscConfig+0x504>)
 8008330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008334:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008336:	f7fb fe1d 	bl	8003f74 <HAL_GetTick>
 800833a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800833c:	e008      	b.n	8008350 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800833e:	f7fb fe19 	bl	8003f74 <HAL_GetTick>
 8008342:	4602      	mov	r2, r0
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	1ad3      	subs	r3, r2, r3
 8008348:	2b02      	cmp	r3, #2
 800834a:	d901      	bls.n	8008350 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800834c:	2303      	movs	r3, #3
 800834e:	e25b      	b.n	8008808 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008350:	4b65      	ldr	r3, [pc, #404]	; (80084e8 <HAL_RCC_OscConfig+0x504>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008358:	2b00      	cmp	r3, #0
 800835a:	d0f0      	beq.n	800833e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800835c:	4b62      	ldr	r3, [pc, #392]	; (80084e8 <HAL_RCC_OscConfig+0x504>)
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	691b      	ldr	r3, [r3, #16]
 8008368:	061b      	lsls	r3, r3, #24
 800836a:	495f      	ldr	r1, [pc, #380]	; (80084e8 <HAL_RCC_OscConfig+0x504>)
 800836c:	4313      	orrs	r3, r2
 800836e:	604b      	str	r3, [r1, #4]
 8008370:	e018      	b.n	80083a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008372:	4b5d      	ldr	r3, [pc, #372]	; (80084e8 <HAL_RCC_OscConfig+0x504>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a5c      	ldr	r2, [pc, #368]	; (80084e8 <HAL_RCC_OscConfig+0x504>)
 8008378:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800837c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800837e:	f7fb fdf9 	bl	8003f74 <HAL_GetTick>
 8008382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008384:	e008      	b.n	8008398 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008386:	f7fb fdf5 	bl	8003f74 <HAL_GetTick>
 800838a:	4602      	mov	r2, r0
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	1ad3      	subs	r3, r2, r3
 8008390:	2b02      	cmp	r3, #2
 8008392:	d901      	bls.n	8008398 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008394:	2303      	movs	r3, #3
 8008396:	e237      	b.n	8008808 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008398:	4b53      	ldr	r3, [pc, #332]	; (80084e8 <HAL_RCC_OscConfig+0x504>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d1f0      	bne.n	8008386 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f003 0308 	and.w	r3, r3, #8
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d03c      	beq.n	800842a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	695b      	ldr	r3, [r3, #20]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d01c      	beq.n	80083f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80083b8:	4b4b      	ldr	r3, [pc, #300]	; (80084e8 <HAL_RCC_OscConfig+0x504>)
 80083ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083be:	4a4a      	ldr	r2, [pc, #296]	; (80084e8 <HAL_RCC_OscConfig+0x504>)
 80083c0:	f043 0301 	orr.w	r3, r3, #1
 80083c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083c8:	f7fb fdd4 	bl	8003f74 <HAL_GetTick>
 80083cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80083ce:	e008      	b.n	80083e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80083d0:	f7fb fdd0 	bl	8003f74 <HAL_GetTick>
 80083d4:	4602      	mov	r2, r0
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	1ad3      	subs	r3, r2, r3
 80083da:	2b02      	cmp	r3, #2
 80083dc:	d901      	bls.n	80083e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80083de:	2303      	movs	r3, #3
 80083e0:	e212      	b.n	8008808 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80083e2:	4b41      	ldr	r3, [pc, #260]	; (80084e8 <HAL_RCC_OscConfig+0x504>)
 80083e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083e8:	f003 0302 	and.w	r3, r3, #2
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d0ef      	beq.n	80083d0 <HAL_RCC_OscConfig+0x3ec>
 80083f0:	e01b      	b.n	800842a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80083f2:	4b3d      	ldr	r3, [pc, #244]	; (80084e8 <HAL_RCC_OscConfig+0x504>)
 80083f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083f8:	4a3b      	ldr	r2, [pc, #236]	; (80084e8 <HAL_RCC_OscConfig+0x504>)
 80083fa:	f023 0301 	bic.w	r3, r3, #1
 80083fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008402:	f7fb fdb7 	bl	8003f74 <HAL_GetTick>
 8008406:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008408:	e008      	b.n	800841c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800840a:	f7fb fdb3 	bl	8003f74 <HAL_GetTick>
 800840e:	4602      	mov	r2, r0
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	1ad3      	subs	r3, r2, r3
 8008414:	2b02      	cmp	r3, #2
 8008416:	d901      	bls.n	800841c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8008418:	2303      	movs	r3, #3
 800841a:	e1f5      	b.n	8008808 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800841c:	4b32      	ldr	r3, [pc, #200]	; (80084e8 <HAL_RCC_OscConfig+0x504>)
 800841e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008422:	f003 0302 	and.w	r3, r3, #2
 8008426:	2b00      	cmp	r3, #0
 8008428:	d1ef      	bne.n	800840a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f003 0304 	and.w	r3, r3, #4
 8008432:	2b00      	cmp	r3, #0
 8008434:	f000 80a6 	beq.w	8008584 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008438:	2300      	movs	r3, #0
 800843a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800843c:	4b2a      	ldr	r3, [pc, #168]	; (80084e8 <HAL_RCC_OscConfig+0x504>)
 800843e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008444:	2b00      	cmp	r3, #0
 8008446:	d10d      	bne.n	8008464 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008448:	4b27      	ldr	r3, [pc, #156]	; (80084e8 <HAL_RCC_OscConfig+0x504>)
 800844a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800844c:	4a26      	ldr	r2, [pc, #152]	; (80084e8 <HAL_RCC_OscConfig+0x504>)
 800844e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008452:	6593      	str	r3, [r2, #88]	; 0x58
 8008454:	4b24      	ldr	r3, [pc, #144]	; (80084e8 <HAL_RCC_OscConfig+0x504>)
 8008456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800845c:	60bb      	str	r3, [r7, #8]
 800845e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008460:	2301      	movs	r3, #1
 8008462:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008464:	4b21      	ldr	r3, [pc, #132]	; (80084ec <HAL_RCC_OscConfig+0x508>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800846c:	2b00      	cmp	r3, #0
 800846e:	d118      	bne.n	80084a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008470:	4b1e      	ldr	r3, [pc, #120]	; (80084ec <HAL_RCC_OscConfig+0x508>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a1d      	ldr	r2, [pc, #116]	; (80084ec <HAL_RCC_OscConfig+0x508>)
 8008476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800847a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800847c:	f7fb fd7a 	bl	8003f74 <HAL_GetTick>
 8008480:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008482:	e008      	b.n	8008496 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008484:	f7fb fd76 	bl	8003f74 <HAL_GetTick>
 8008488:	4602      	mov	r2, r0
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	1ad3      	subs	r3, r2, r3
 800848e:	2b02      	cmp	r3, #2
 8008490:	d901      	bls.n	8008496 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8008492:	2303      	movs	r3, #3
 8008494:	e1b8      	b.n	8008808 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008496:	4b15      	ldr	r3, [pc, #84]	; (80084ec <HAL_RCC_OscConfig+0x508>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d0f0      	beq.n	8008484 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d108      	bne.n	80084bc <HAL_RCC_OscConfig+0x4d8>
 80084aa:	4b0f      	ldr	r3, [pc, #60]	; (80084e8 <HAL_RCC_OscConfig+0x504>)
 80084ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084b0:	4a0d      	ldr	r2, [pc, #52]	; (80084e8 <HAL_RCC_OscConfig+0x504>)
 80084b2:	f043 0301 	orr.w	r3, r3, #1
 80084b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80084ba:	e029      	b.n	8008510 <HAL_RCC_OscConfig+0x52c>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	2b05      	cmp	r3, #5
 80084c2:	d115      	bne.n	80084f0 <HAL_RCC_OscConfig+0x50c>
 80084c4:	4b08      	ldr	r3, [pc, #32]	; (80084e8 <HAL_RCC_OscConfig+0x504>)
 80084c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084ca:	4a07      	ldr	r2, [pc, #28]	; (80084e8 <HAL_RCC_OscConfig+0x504>)
 80084cc:	f043 0304 	orr.w	r3, r3, #4
 80084d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80084d4:	4b04      	ldr	r3, [pc, #16]	; (80084e8 <HAL_RCC_OscConfig+0x504>)
 80084d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084da:	4a03      	ldr	r2, [pc, #12]	; (80084e8 <HAL_RCC_OscConfig+0x504>)
 80084dc:	f043 0301 	orr.w	r3, r3, #1
 80084e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80084e4:	e014      	b.n	8008510 <HAL_RCC_OscConfig+0x52c>
 80084e6:	bf00      	nop
 80084e8:	40021000 	.word	0x40021000
 80084ec:	40007000 	.word	0x40007000
 80084f0:	4b9d      	ldr	r3, [pc, #628]	; (8008768 <HAL_RCC_OscConfig+0x784>)
 80084f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084f6:	4a9c      	ldr	r2, [pc, #624]	; (8008768 <HAL_RCC_OscConfig+0x784>)
 80084f8:	f023 0301 	bic.w	r3, r3, #1
 80084fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008500:	4b99      	ldr	r3, [pc, #612]	; (8008768 <HAL_RCC_OscConfig+0x784>)
 8008502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008506:	4a98      	ldr	r2, [pc, #608]	; (8008768 <HAL_RCC_OscConfig+0x784>)
 8008508:	f023 0304 	bic.w	r3, r3, #4
 800850c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d016      	beq.n	8008546 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008518:	f7fb fd2c 	bl	8003f74 <HAL_GetTick>
 800851c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800851e:	e00a      	b.n	8008536 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008520:	f7fb fd28 	bl	8003f74 <HAL_GetTick>
 8008524:	4602      	mov	r2, r0
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	1ad3      	subs	r3, r2, r3
 800852a:	f241 3288 	movw	r2, #5000	; 0x1388
 800852e:	4293      	cmp	r3, r2
 8008530:	d901      	bls.n	8008536 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8008532:	2303      	movs	r3, #3
 8008534:	e168      	b.n	8008808 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008536:	4b8c      	ldr	r3, [pc, #560]	; (8008768 <HAL_RCC_OscConfig+0x784>)
 8008538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800853c:	f003 0302 	and.w	r3, r3, #2
 8008540:	2b00      	cmp	r3, #0
 8008542:	d0ed      	beq.n	8008520 <HAL_RCC_OscConfig+0x53c>
 8008544:	e015      	b.n	8008572 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008546:	f7fb fd15 	bl	8003f74 <HAL_GetTick>
 800854a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800854c:	e00a      	b.n	8008564 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800854e:	f7fb fd11 	bl	8003f74 <HAL_GetTick>
 8008552:	4602      	mov	r2, r0
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	1ad3      	subs	r3, r2, r3
 8008558:	f241 3288 	movw	r2, #5000	; 0x1388
 800855c:	4293      	cmp	r3, r2
 800855e:	d901      	bls.n	8008564 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008560:	2303      	movs	r3, #3
 8008562:	e151      	b.n	8008808 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008564:	4b80      	ldr	r3, [pc, #512]	; (8008768 <HAL_RCC_OscConfig+0x784>)
 8008566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800856a:	f003 0302 	and.w	r3, r3, #2
 800856e:	2b00      	cmp	r3, #0
 8008570:	d1ed      	bne.n	800854e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008572:	7ffb      	ldrb	r3, [r7, #31]
 8008574:	2b01      	cmp	r3, #1
 8008576:	d105      	bne.n	8008584 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008578:	4b7b      	ldr	r3, [pc, #492]	; (8008768 <HAL_RCC_OscConfig+0x784>)
 800857a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800857c:	4a7a      	ldr	r2, [pc, #488]	; (8008768 <HAL_RCC_OscConfig+0x784>)
 800857e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008582:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f003 0320 	and.w	r3, r3, #32
 800858c:	2b00      	cmp	r3, #0
 800858e:	d03c      	beq.n	800860a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008594:	2b00      	cmp	r3, #0
 8008596:	d01c      	beq.n	80085d2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008598:	4b73      	ldr	r3, [pc, #460]	; (8008768 <HAL_RCC_OscConfig+0x784>)
 800859a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800859e:	4a72      	ldr	r2, [pc, #456]	; (8008768 <HAL_RCC_OscConfig+0x784>)
 80085a0:	f043 0301 	orr.w	r3, r3, #1
 80085a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085a8:	f7fb fce4 	bl	8003f74 <HAL_GetTick>
 80085ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80085ae:	e008      	b.n	80085c2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80085b0:	f7fb fce0 	bl	8003f74 <HAL_GetTick>
 80085b4:	4602      	mov	r2, r0
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	1ad3      	subs	r3, r2, r3
 80085ba:	2b02      	cmp	r3, #2
 80085bc:	d901      	bls.n	80085c2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80085be:	2303      	movs	r3, #3
 80085c0:	e122      	b.n	8008808 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80085c2:	4b69      	ldr	r3, [pc, #420]	; (8008768 <HAL_RCC_OscConfig+0x784>)
 80085c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80085c8:	f003 0302 	and.w	r3, r3, #2
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d0ef      	beq.n	80085b0 <HAL_RCC_OscConfig+0x5cc>
 80085d0:	e01b      	b.n	800860a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80085d2:	4b65      	ldr	r3, [pc, #404]	; (8008768 <HAL_RCC_OscConfig+0x784>)
 80085d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80085d8:	4a63      	ldr	r2, [pc, #396]	; (8008768 <HAL_RCC_OscConfig+0x784>)
 80085da:	f023 0301 	bic.w	r3, r3, #1
 80085de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085e2:	f7fb fcc7 	bl	8003f74 <HAL_GetTick>
 80085e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80085e8:	e008      	b.n	80085fc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80085ea:	f7fb fcc3 	bl	8003f74 <HAL_GetTick>
 80085ee:	4602      	mov	r2, r0
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	1ad3      	subs	r3, r2, r3
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	d901      	bls.n	80085fc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80085f8:	2303      	movs	r3, #3
 80085fa:	e105      	b.n	8008808 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80085fc:	4b5a      	ldr	r3, [pc, #360]	; (8008768 <HAL_RCC_OscConfig+0x784>)
 80085fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008602:	f003 0302 	and.w	r3, r3, #2
 8008606:	2b00      	cmp	r3, #0
 8008608:	d1ef      	bne.n	80085ea <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800860e:	2b00      	cmp	r3, #0
 8008610:	f000 80f9 	beq.w	8008806 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008618:	2b02      	cmp	r3, #2
 800861a:	f040 80cf 	bne.w	80087bc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800861e:	4b52      	ldr	r3, [pc, #328]	; (8008768 <HAL_RCC_OscConfig+0x784>)
 8008620:	68db      	ldr	r3, [r3, #12]
 8008622:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	f003 0203 	and.w	r2, r3, #3
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800862e:	429a      	cmp	r2, r3
 8008630:	d12c      	bne.n	800868c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863c:	3b01      	subs	r3, #1
 800863e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008640:	429a      	cmp	r2, r3
 8008642:	d123      	bne.n	800868c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800864e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008650:	429a      	cmp	r2, r3
 8008652:	d11b      	bne.n	800868c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800865e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008660:	429a      	cmp	r2, r3
 8008662:	d113      	bne.n	800868c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800866e:	085b      	lsrs	r3, r3, #1
 8008670:	3b01      	subs	r3, #1
 8008672:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008674:	429a      	cmp	r2, r3
 8008676:	d109      	bne.n	800868c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008682:	085b      	lsrs	r3, r3, #1
 8008684:	3b01      	subs	r3, #1
 8008686:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008688:	429a      	cmp	r2, r3
 800868a:	d071      	beq.n	8008770 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800868c:	69bb      	ldr	r3, [r7, #24]
 800868e:	2b0c      	cmp	r3, #12
 8008690:	d068      	beq.n	8008764 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008692:	4b35      	ldr	r3, [pc, #212]	; (8008768 <HAL_RCC_OscConfig+0x784>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800869a:	2b00      	cmp	r3, #0
 800869c:	d105      	bne.n	80086aa <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800869e:	4b32      	ldr	r3, [pc, #200]	; (8008768 <HAL_RCC_OscConfig+0x784>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d001      	beq.n	80086ae <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80086aa:	2301      	movs	r3, #1
 80086ac:	e0ac      	b.n	8008808 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80086ae:	4b2e      	ldr	r3, [pc, #184]	; (8008768 <HAL_RCC_OscConfig+0x784>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a2d      	ldr	r2, [pc, #180]	; (8008768 <HAL_RCC_OscConfig+0x784>)
 80086b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80086b8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80086ba:	f7fb fc5b 	bl	8003f74 <HAL_GetTick>
 80086be:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80086c0:	e008      	b.n	80086d4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086c2:	f7fb fc57 	bl	8003f74 <HAL_GetTick>
 80086c6:	4602      	mov	r2, r0
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	1ad3      	subs	r3, r2, r3
 80086cc:	2b02      	cmp	r3, #2
 80086ce:	d901      	bls.n	80086d4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80086d0:	2303      	movs	r3, #3
 80086d2:	e099      	b.n	8008808 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80086d4:	4b24      	ldr	r3, [pc, #144]	; (8008768 <HAL_RCC_OscConfig+0x784>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d1f0      	bne.n	80086c2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80086e0:	4b21      	ldr	r3, [pc, #132]	; (8008768 <HAL_RCC_OscConfig+0x784>)
 80086e2:	68da      	ldr	r2, [r3, #12]
 80086e4:	4b21      	ldr	r3, [pc, #132]	; (800876c <HAL_RCC_OscConfig+0x788>)
 80086e6:	4013      	ands	r3, r2
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80086f0:	3a01      	subs	r2, #1
 80086f2:	0112      	lsls	r2, r2, #4
 80086f4:	4311      	orrs	r1, r2
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80086fa:	0212      	lsls	r2, r2, #8
 80086fc:	4311      	orrs	r1, r2
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008702:	0852      	lsrs	r2, r2, #1
 8008704:	3a01      	subs	r2, #1
 8008706:	0552      	lsls	r2, r2, #21
 8008708:	4311      	orrs	r1, r2
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800870e:	0852      	lsrs	r2, r2, #1
 8008710:	3a01      	subs	r2, #1
 8008712:	0652      	lsls	r2, r2, #25
 8008714:	4311      	orrs	r1, r2
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800871a:	06d2      	lsls	r2, r2, #27
 800871c:	430a      	orrs	r2, r1
 800871e:	4912      	ldr	r1, [pc, #72]	; (8008768 <HAL_RCC_OscConfig+0x784>)
 8008720:	4313      	orrs	r3, r2
 8008722:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008724:	4b10      	ldr	r3, [pc, #64]	; (8008768 <HAL_RCC_OscConfig+0x784>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a0f      	ldr	r2, [pc, #60]	; (8008768 <HAL_RCC_OscConfig+0x784>)
 800872a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800872e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008730:	4b0d      	ldr	r3, [pc, #52]	; (8008768 <HAL_RCC_OscConfig+0x784>)
 8008732:	68db      	ldr	r3, [r3, #12]
 8008734:	4a0c      	ldr	r2, [pc, #48]	; (8008768 <HAL_RCC_OscConfig+0x784>)
 8008736:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800873a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800873c:	f7fb fc1a 	bl	8003f74 <HAL_GetTick>
 8008740:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008742:	e008      	b.n	8008756 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008744:	f7fb fc16 	bl	8003f74 <HAL_GetTick>
 8008748:	4602      	mov	r2, r0
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	1ad3      	subs	r3, r2, r3
 800874e:	2b02      	cmp	r3, #2
 8008750:	d901      	bls.n	8008756 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8008752:	2303      	movs	r3, #3
 8008754:	e058      	b.n	8008808 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008756:	4b04      	ldr	r3, [pc, #16]	; (8008768 <HAL_RCC_OscConfig+0x784>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800875e:	2b00      	cmp	r3, #0
 8008760:	d0f0      	beq.n	8008744 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008762:	e050      	b.n	8008806 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	e04f      	b.n	8008808 <HAL_RCC_OscConfig+0x824>
 8008768:	40021000 	.word	0x40021000
 800876c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008770:	4b27      	ldr	r3, [pc, #156]	; (8008810 <HAL_RCC_OscConfig+0x82c>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008778:	2b00      	cmp	r3, #0
 800877a:	d144      	bne.n	8008806 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800877c:	4b24      	ldr	r3, [pc, #144]	; (8008810 <HAL_RCC_OscConfig+0x82c>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a23      	ldr	r2, [pc, #140]	; (8008810 <HAL_RCC_OscConfig+0x82c>)
 8008782:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008786:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008788:	4b21      	ldr	r3, [pc, #132]	; (8008810 <HAL_RCC_OscConfig+0x82c>)
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	4a20      	ldr	r2, [pc, #128]	; (8008810 <HAL_RCC_OscConfig+0x82c>)
 800878e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008792:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008794:	f7fb fbee 	bl	8003f74 <HAL_GetTick>
 8008798:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800879a:	e008      	b.n	80087ae <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800879c:	f7fb fbea 	bl	8003f74 <HAL_GetTick>
 80087a0:	4602      	mov	r2, r0
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	1ad3      	subs	r3, r2, r3
 80087a6:	2b02      	cmp	r3, #2
 80087a8:	d901      	bls.n	80087ae <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80087aa:	2303      	movs	r3, #3
 80087ac:	e02c      	b.n	8008808 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80087ae:	4b18      	ldr	r3, [pc, #96]	; (8008810 <HAL_RCC_OscConfig+0x82c>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d0f0      	beq.n	800879c <HAL_RCC_OscConfig+0x7b8>
 80087ba:	e024      	b.n	8008806 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	2b0c      	cmp	r3, #12
 80087c0:	d01f      	beq.n	8008802 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087c2:	4b13      	ldr	r3, [pc, #76]	; (8008810 <HAL_RCC_OscConfig+0x82c>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a12      	ldr	r2, [pc, #72]	; (8008810 <HAL_RCC_OscConfig+0x82c>)
 80087c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80087cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087ce:	f7fb fbd1 	bl	8003f74 <HAL_GetTick>
 80087d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80087d4:	e008      	b.n	80087e8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087d6:	f7fb fbcd 	bl	8003f74 <HAL_GetTick>
 80087da:	4602      	mov	r2, r0
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	1ad3      	subs	r3, r2, r3
 80087e0:	2b02      	cmp	r3, #2
 80087e2:	d901      	bls.n	80087e8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80087e4:	2303      	movs	r3, #3
 80087e6:	e00f      	b.n	8008808 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80087e8:	4b09      	ldr	r3, [pc, #36]	; (8008810 <HAL_RCC_OscConfig+0x82c>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d1f0      	bne.n	80087d6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80087f4:	4b06      	ldr	r3, [pc, #24]	; (8008810 <HAL_RCC_OscConfig+0x82c>)
 80087f6:	68da      	ldr	r2, [r3, #12]
 80087f8:	4905      	ldr	r1, [pc, #20]	; (8008810 <HAL_RCC_OscConfig+0x82c>)
 80087fa:	4b06      	ldr	r3, [pc, #24]	; (8008814 <HAL_RCC_OscConfig+0x830>)
 80087fc:	4013      	ands	r3, r2
 80087fe:	60cb      	str	r3, [r1, #12]
 8008800:	e001      	b.n	8008806 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008802:	2301      	movs	r3, #1
 8008804:	e000      	b.n	8008808 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8008806:	2300      	movs	r3, #0
}
 8008808:	4618      	mov	r0, r3
 800880a:	3720      	adds	r7, #32
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}
 8008810:	40021000 	.word	0x40021000
 8008814:	feeefffc 	.word	0xfeeefffc

08008818 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b086      	sub	sp, #24
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008822:	2300      	movs	r3, #0
 8008824:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d101      	bne.n	8008830 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800882c:	2301      	movs	r3, #1
 800882e:	e11d      	b.n	8008a6c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008830:	4b90      	ldr	r3, [pc, #576]	; (8008a74 <HAL_RCC_ClockConfig+0x25c>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f003 030f 	and.w	r3, r3, #15
 8008838:	683a      	ldr	r2, [r7, #0]
 800883a:	429a      	cmp	r2, r3
 800883c:	d910      	bls.n	8008860 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800883e:	4b8d      	ldr	r3, [pc, #564]	; (8008a74 <HAL_RCC_ClockConfig+0x25c>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f023 020f 	bic.w	r2, r3, #15
 8008846:	498b      	ldr	r1, [pc, #556]	; (8008a74 <HAL_RCC_ClockConfig+0x25c>)
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	4313      	orrs	r3, r2
 800884c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800884e:	4b89      	ldr	r3, [pc, #548]	; (8008a74 <HAL_RCC_ClockConfig+0x25c>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f003 030f 	and.w	r3, r3, #15
 8008856:	683a      	ldr	r2, [r7, #0]
 8008858:	429a      	cmp	r2, r3
 800885a:	d001      	beq.n	8008860 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800885c:	2301      	movs	r3, #1
 800885e:	e105      	b.n	8008a6c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f003 0302 	and.w	r3, r3, #2
 8008868:	2b00      	cmp	r3, #0
 800886a:	d010      	beq.n	800888e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	689a      	ldr	r2, [r3, #8]
 8008870:	4b81      	ldr	r3, [pc, #516]	; (8008a78 <HAL_RCC_ClockConfig+0x260>)
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008878:	429a      	cmp	r2, r3
 800887a:	d908      	bls.n	800888e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800887c:	4b7e      	ldr	r3, [pc, #504]	; (8008a78 <HAL_RCC_ClockConfig+0x260>)
 800887e:	689b      	ldr	r3, [r3, #8]
 8008880:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	497b      	ldr	r1, [pc, #492]	; (8008a78 <HAL_RCC_ClockConfig+0x260>)
 800888a:	4313      	orrs	r3, r2
 800888c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f003 0301 	and.w	r3, r3, #1
 8008896:	2b00      	cmp	r3, #0
 8008898:	d079      	beq.n	800898e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	2b03      	cmp	r3, #3
 80088a0:	d11e      	bne.n	80088e0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80088a2:	4b75      	ldr	r3, [pc, #468]	; (8008a78 <HAL_RCC_ClockConfig+0x260>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d101      	bne.n	80088b2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80088ae:	2301      	movs	r3, #1
 80088b0:	e0dc      	b.n	8008a6c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80088b2:	f000 fa3b 	bl	8008d2c <RCC_GetSysClockFreqFromPLLSource>
 80088b6:	4603      	mov	r3, r0
 80088b8:	4a70      	ldr	r2, [pc, #448]	; (8008a7c <HAL_RCC_ClockConfig+0x264>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d946      	bls.n	800894c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80088be:	4b6e      	ldr	r3, [pc, #440]	; (8008a78 <HAL_RCC_ClockConfig+0x260>)
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d140      	bne.n	800894c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80088ca:	4b6b      	ldr	r3, [pc, #428]	; (8008a78 <HAL_RCC_ClockConfig+0x260>)
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80088d2:	4a69      	ldr	r2, [pc, #420]	; (8008a78 <HAL_RCC_ClockConfig+0x260>)
 80088d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088d8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80088da:	2380      	movs	r3, #128	; 0x80
 80088dc:	617b      	str	r3, [r7, #20]
 80088de:	e035      	b.n	800894c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	2b02      	cmp	r3, #2
 80088e6:	d107      	bne.n	80088f8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80088e8:	4b63      	ldr	r3, [pc, #396]	; (8008a78 <HAL_RCC_ClockConfig+0x260>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d115      	bne.n	8008920 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80088f4:	2301      	movs	r3, #1
 80088f6:	e0b9      	b.n	8008a6c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d107      	bne.n	8008910 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008900:	4b5d      	ldr	r3, [pc, #372]	; (8008a78 <HAL_RCC_ClockConfig+0x260>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f003 0302 	and.w	r3, r3, #2
 8008908:	2b00      	cmp	r3, #0
 800890a:	d109      	bne.n	8008920 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800890c:	2301      	movs	r3, #1
 800890e:	e0ad      	b.n	8008a6c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008910:	4b59      	ldr	r3, [pc, #356]	; (8008a78 <HAL_RCC_ClockConfig+0x260>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008918:	2b00      	cmp	r3, #0
 800891a:	d101      	bne.n	8008920 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	e0a5      	b.n	8008a6c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8008920:	f000 f8b4 	bl	8008a8c <HAL_RCC_GetSysClockFreq>
 8008924:	4603      	mov	r3, r0
 8008926:	4a55      	ldr	r2, [pc, #340]	; (8008a7c <HAL_RCC_ClockConfig+0x264>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d90f      	bls.n	800894c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800892c:	4b52      	ldr	r3, [pc, #328]	; (8008a78 <HAL_RCC_ClockConfig+0x260>)
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d109      	bne.n	800894c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008938:	4b4f      	ldr	r3, [pc, #316]	; (8008a78 <HAL_RCC_ClockConfig+0x260>)
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008940:	4a4d      	ldr	r2, [pc, #308]	; (8008a78 <HAL_RCC_ClockConfig+0x260>)
 8008942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008946:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008948:	2380      	movs	r3, #128	; 0x80
 800894a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800894c:	4b4a      	ldr	r3, [pc, #296]	; (8008a78 <HAL_RCC_ClockConfig+0x260>)
 800894e:	689b      	ldr	r3, [r3, #8]
 8008950:	f023 0203 	bic.w	r2, r3, #3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	4947      	ldr	r1, [pc, #284]	; (8008a78 <HAL_RCC_ClockConfig+0x260>)
 800895a:	4313      	orrs	r3, r2
 800895c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800895e:	f7fb fb09 	bl	8003f74 <HAL_GetTick>
 8008962:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008964:	e00a      	b.n	800897c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008966:	f7fb fb05 	bl	8003f74 <HAL_GetTick>
 800896a:	4602      	mov	r2, r0
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	1ad3      	subs	r3, r2, r3
 8008970:	f241 3288 	movw	r2, #5000	; 0x1388
 8008974:	4293      	cmp	r3, r2
 8008976:	d901      	bls.n	800897c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8008978:	2303      	movs	r3, #3
 800897a:	e077      	b.n	8008a6c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800897c:	4b3e      	ldr	r3, [pc, #248]	; (8008a78 <HAL_RCC_ClockConfig+0x260>)
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	f003 020c 	and.w	r2, r3, #12
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	429a      	cmp	r2, r3
 800898c:	d1eb      	bne.n	8008966 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	2b80      	cmp	r3, #128	; 0x80
 8008992:	d105      	bne.n	80089a0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008994:	4b38      	ldr	r3, [pc, #224]	; (8008a78 <HAL_RCC_ClockConfig+0x260>)
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	4a37      	ldr	r2, [pc, #220]	; (8008a78 <HAL_RCC_ClockConfig+0x260>)
 800899a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800899e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f003 0302 	and.w	r3, r3, #2
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d010      	beq.n	80089ce <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	689a      	ldr	r2, [r3, #8]
 80089b0:	4b31      	ldr	r3, [pc, #196]	; (8008a78 <HAL_RCC_ClockConfig+0x260>)
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d208      	bcs.n	80089ce <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089bc:	4b2e      	ldr	r3, [pc, #184]	; (8008a78 <HAL_RCC_ClockConfig+0x260>)
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	492b      	ldr	r1, [pc, #172]	; (8008a78 <HAL_RCC_ClockConfig+0x260>)
 80089ca:	4313      	orrs	r3, r2
 80089cc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80089ce:	4b29      	ldr	r3, [pc, #164]	; (8008a74 <HAL_RCC_ClockConfig+0x25c>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f003 030f 	and.w	r3, r3, #15
 80089d6:	683a      	ldr	r2, [r7, #0]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d210      	bcs.n	80089fe <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089dc:	4b25      	ldr	r3, [pc, #148]	; (8008a74 <HAL_RCC_ClockConfig+0x25c>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f023 020f 	bic.w	r2, r3, #15
 80089e4:	4923      	ldr	r1, [pc, #140]	; (8008a74 <HAL_RCC_ClockConfig+0x25c>)
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	4313      	orrs	r3, r2
 80089ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089ec:	4b21      	ldr	r3, [pc, #132]	; (8008a74 <HAL_RCC_ClockConfig+0x25c>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f003 030f 	and.w	r3, r3, #15
 80089f4:	683a      	ldr	r2, [r7, #0]
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d001      	beq.n	80089fe <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80089fa:	2301      	movs	r3, #1
 80089fc:	e036      	b.n	8008a6c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 0304 	and.w	r3, r3, #4
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d008      	beq.n	8008a1c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008a0a:	4b1b      	ldr	r3, [pc, #108]	; (8008a78 <HAL_RCC_ClockConfig+0x260>)
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	68db      	ldr	r3, [r3, #12]
 8008a16:	4918      	ldr	r1, [pc, #96]	; (8008a78 <HAL_RCC_ClockConfig+0x260>)
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f003 0308 	and.w	r3, r3, #8
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d009      	beq.n	8008a3c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008a28:	4b13      	ldr	r3, [pc, #76]	; (8008a78 <HAL_RCC_ClockConfig+0x260>)
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	691b      	ldr	r3, [r3, #16]
 8008a34:	00db      	lsls	r3, r3, #3
 8008a36:	4910      	ldr	r1, [pc, #64]	; (8008a78 <HAL_RCC_ClockConfig+0x260>)
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008a3c:	f000 f826 	bl	8008a8c <HAL_RCC_GetSysClockFreq>
 8008a40:	4602      	mov	r2, r0
 8008a42:	4b0d      	ldr	r3, [pc, #52]	; (8008a78 <HAL_RCC_ClockConfig+0x260>)
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	091b      	lsrs	r3, r3, #4
 8008a48:	f003 030f 	and.w	r3, r3, #15
 8008a4c:	490c      	ldr	r1, [pc, #48]	; (8008a80 <HAL_RCC_ClockConfig+0x268>)
 8008a4e:	5ccb      	ldrb	r3, [r1, r3]
 8008a50:	f003 031f 	and.w	r3, r3, #31
 8008a54:	fa22 f303 	lsr.w	r3, r2, r3
 8008a58:	4a0a      	ldr	r2, [pc, #40]	; (8008a84 <HAL_RCC_ClockConfig+0x26c>)
 8008a5a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008a5c:	4b0a      	ldr	r3, [pc, #40]	; (8008a88 <HAL_RCC_ClockConfig+0x270>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7fb f8ef 	bl	8003c44 <HAL_InitTick>
 8008a66:	4603      	mov	r3, r0
 8008a68:	73fb      	strb	r3, [r7, #15]

  return status;
 8008a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3718      	adds	r7, #24
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}
 8008a74:	40022000 	.word	0x40022000
 8008a78:	40021000 	.word	0x40021000
 8008a7c:	04c4b400 	.word	0x04c4b400
 8008a80:	0800be80 	.word	0x0800be80
 8008a84:	2000003c 	.word	0x2000003c
 8008a88:	20000040 	.word	0x20000040

08008a8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b089      	sub	sp, #36	; 0x24
 8008a90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008a92:	2300      	movs	r3, #0
 8008a94:	61fb      	str	r3, [r7, #28]
 8008a96:	2300      	movs	r3, #0
 8008a98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a9a:	4b3e      	ldr	r3, [pc, #248]	; (8008b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	f003 030c 	and.w	r3, r3, #12
 8008aa2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008aa4:	4b3b      	ldr	r3, [pc, #236]	; (8008b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8008aa6:	68db      	ldr	r3, [r3, #12]
 8008aa8:	f003 0303 	and.w	r3, r3, #3
 8008aac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d005      	beq.n	8008ac0 <HAL_RCC_GetSysClockFreq+0x34>
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	2b0c      	cmp	r3, #12
 8008ab8:	d121      	bne.n	8008afe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d11e      	bne.n	8008afe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008ac0:	4b34      	ldr	r3, [pc, #208]	; (8008b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f003 0308 	and.w	r3, r3, #8
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d107      	bne.n	8008adc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008acc:	4b31      	ldr	r3, [pc, #196]	; (8008b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8008ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ad2:	0a1b      	lsrs	r3, r3, #8
 8008ad4:	f003 030f 	and.w	r3, r3, #15
 8008ad8:	61fb      	str	r3, [r7, #28]
 8008ada:	e005      	b.n	8008ae8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008adc:	4b2d      	ldr	r3, [pc, #180]	; (8008b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	091b      	lsrs	r3, r3, #4
 8008ae2:	f003 030f 	and.w	r3, r3, #15
 8008ae6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008ae8:	4a2b      	ldr	r2, [pc, #172]	; (8008b98 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008aea:	69fb      	ldr	r3, [r7, #28]
 8008aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008af0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d10d      	bne.n	8008b14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008afc:	e00a      	b.n	8008b14 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	2b04      	cmp	r3, #4
 8008b02:	d102      	bne.n	8008b0a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008b04:	4b25      	ldr	r3, [pc, #148]	; (8008b9c <HAL_RCC_GetSysClockFreq+0x110>)
 8008b06:	61bb      	str	r3, [r7, #24]
 8008b08:	e004      	b.n	8008b14 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	2b08      	cmp	r3, #8
 8008b0e:	d101      	bne.n	8008b14 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008b10:	4b23      	ldr	r3, [pc, #140]	; (8008ba0 <HAL_RCC_GetSysClockFreq+0x114>)
 8008b12:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	2b0c      	cmp	r3, #12
 8008b18:	d134      	bne.n	8008b84 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008b1a:	4b1e      	ldr	r3, [pc, #120]	; (8008b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8008b1c:	68db      	ldr	r3, [r3, #12]
 8008b1e:	f003 0303 	and.w	r3, r3, #3
 8008b22:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	d003      	beq.n	8008b32 <HAL_RCC_GetSysClockFreq+0xa6>
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	2b03      	cmp	r3, #3
 8008b2e:	d003      	beq.n	8008b38 <HAL_RCC_GetSysClockFreq+0xac>
 8008b30:	e005      	b.n	8008b3e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008b32:	4b1a      	ldr	r3, [pc, #104]	; (8008b9c <HAL_RCC_GetSysClockFreq+0x110>)
 8008b34:	617b      	str	r3, [r7, #20]
      break;
 8008b36:	e005      	b.n	8008b44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008b38:	4b19      	ldr	r3, [pc, #100]	; (8008ba0 <HAL_RCC_GetSysClockFreq+0x114>)
 8008b3a:	617b      	str	r3, [r7, #20]
      break;
 8008b3c:	e002      	b.n	8008b44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	617b      	str	r3, [r7, #20]
      break;
 8008b42:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008b44:	4b13      	ldr	r3, [pc, #76]	; (8008b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	091b      	lsrs	r3, r3, #4
 8008b4a:	f003 030f 	and.w	r3, r3, #15
 8008b4e:	3301      	adds	r3, #1
 8008b50:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008b52:	4b10      	ldr	r3, [pc, #64]	; (8008b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8008b54:	68db      	ldr	r3, [r3, #12]
 8008b56:	0a1b      	lsrs	r3, r3, #8
 8008b58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b5c:	697a      	ldr	r2, [r7, #20]
 8008b5e:	fb03 f202 	mul.w	r2, r3, r2
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b68:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008b6a:	4b0a      	ldr	r3, [pc, #40]	; (8008b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	0e5b      	lsrs	r3, r3, #25
 8008b70:	f003 0303 	and.w	r3, r3, #3
 8008b74:	3301      	adds	r3, #1
 8008b76:	005b      	lsls	r3, r3, #1
 8008b78:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008b7a:	697a      	ldr	r2, [r7, #20]
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b82:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008b84:	69bb      	ldr	r3, [r7, #24]
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3724      	adds	r7, #36	; 0x24
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop
 8008b94:	40021000 	.word	0x40021000
 8008b98:	0800be98 	.word	0x0800be98
 8008b9c:	00f42400 	.word	0x00f42400
 8008ba0:	007a1200 	.word	0x007a1200

08008ba4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008ba8:	4b03      	ldr	r3, [pc, #12]	; (8008bb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8008baa:	681b      	ldr	r3, [r3, #0]
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr
 8008bb6:	bf00      	nop
 8008bb8:	2000003c 	.word	0x2000003c

08008bbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008bc0:	f7ff fff0 	bl	8008ba4 <HAL_RCC_GetHCLKFreq>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	4b06      	ldr	r3, [pc, #24]	; (8008be0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	0a1b      	lsrs	r3, r3, #8
 8008bcc:	f003 0307 	and.w	r3, r3, #7
 8008bd0:	4904      	ldr	r1, [pc, #16]	; (8008be4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008bd2:	5ccb      	ldrb	r3, [r1, r3]
 8008bd4:	f003 031f 	and.w	r3, r3, #31
 8008bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	bd80      	pop	{r7, pc}
 8008be0:	40021000 	.word	0x40021000
 8008be4:	0800be90 	.word	0x0800be90

08008be8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008bec:	f7ff ffda 	bl	8008ba4 <HAL_RCC_GetHCLKFreq>
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	4b06      	ldr	r3, [pc, #24]	; (8008c0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	0adb      	lsrs	r3, r3, #11
 8008bf8:	f003 0307 	and.w	r3, r3, #7
 8008bfc:	4904      	ldr	r1, [pc, #16]	; (8008c10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008bfe:	5ccb      	ldrb	r3, [r1, r3]
 8008c00:	f003 031f 	and.w	r3, r3, #31
 8008c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	bd80      	pop	{r7, pc}
 8008c0c:	40021000 	.word	0x40021000
 8008c10:	0800be90 	.word	0x0800be90

08008c14 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	220f      	movs	r2, #15
 8008c22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8008c24:	4b12      	ldr	r3, [pc, #72]	; (8008c70 <HAL_RCC_GetClockConfig+0x5c>)
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	f003 0203 	and.w	r2, r3, #3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8008c30:	4b0f      	ldr	r3, [pc, #60]	; (8008c70 <HAL_RCC_GetClockConfig+0x5c>)
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8008c3c:	4b0c      	ldr	r3, [pc, #48]	; (8008c70 <HAL_RCC_GetClockConfig+0x5c>)
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8008c48:	4b09      	ldr	r3, [pc, #36]	; (8008c70 <HAL_RCC_GetClockConfig+0x5c>)
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	08db      	lsrs	r3, r3, #3
 8008c4e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8008c56:	4b07      	ldr	r3, [pc, #28]	; (8008c74 <HAL_RCC_GetClockConfig+0x60>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f003 020f 	and.w	r2, r3, #15
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	601a      	str	r2, [r3, #0]
}
 8008c62:	bf00      	nop
 8008c64:	370c      	adds	r7, #12
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr
 8008c6e:	bf00      	nop
 8008c70:	40021000 	.word	0x40021000
 8008c74:	40022000 	.word	0x40022000

08008c78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b086      	sub	sp, #24
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008c80:	2300      	movs	r3, #0
 8008c82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008c84:	4b27      	ldr	r3, [pc, #156]	; (8008d24 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d003      	beq.n	8008c98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008c90:	f7ff f8e4 	bl	8007e5c <HAL_PWREx_GetVoltageRange>
 8008c94:	6178      	str	r0, [r7, #20]
 8008c96:	e014      	b.n	8008cc2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008c98:	4b22      	ldr	r3, [pc, #136]	; (8008d24 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c9c:	4a21      	ldr	r2, [pc, #132]	; (8008d24 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ca2:	6593      	str	r3, [r2, #88]	; 0x58
 8008ca4:	4b1f      	ldr	r3, [pc, #124]	; (8008d24 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cac:	60fb      	str	r3, [r7, #12]
 8008cae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008cb0:	f7ff f8d4 	bl	8007e5c <HAL_PWREx_GetVoltageRange>
 8008cb4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008cb6:	4b1b      	ldr	r3, [pc, #108]	; (8008d24 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cba:	4a1a      	ldr	r2, [pc, #104]	; (8008d24 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008cbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008cc0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cc8:	d10b      	bne.n	8008ce2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2b80      	cmp	r3, #128	; 0x80
 8008cce:	d913      	bls.n	8008cf8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2ba0      	cmp	r3, #160	; 0xa0
 8008cd4:	d902      	bls.n	8008cdc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008cd6:	2302      	movs	r3, #2
 8008cd8:	613b      	str	r3, [r7, #16]
 8008cda:	e00d      	b.n	8008cf8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008cdc:	2301      	movs	r3, #1
 8008cde:	613b      	str	r3, [r7, #16]
 8008ce0:	e00a      	b.n	8008cf8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2b7f      	cmp	r3, #127	; 0x7f
 8008ce6:	d902      	bls.n	8008cee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8008ce8:	2302      	movs	r3, #2
 8008cea:	613b      	str	r3, [r7, #16]
 8008cec:	e004      	b.n	8008cf8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2b70      	cmp	r3, #112	; 0x70
 8008cf2:	d101      	bne.n	8008cf8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008cf8:	4b0b      	ldr	r3, [pc, #44]	; (8008d28 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f023 020f 	bic.w	r2, r3, #15
 8008d00:	4909      	ldr	r1, [pc, #36]	; (8008d28 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	4313      	orrs	r3, r2
 8008d06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008d08:	4b07      	ldr	r3, [pc, #28]	; (8008d28 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f003 030f 	and.w	r3, r3, #15
 8008d10:	693a      	ldr	r2, [r7, #16]
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d001      	beq.n	8008d1a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8008d16:	2301      	movs	r3, #1
 8008d18:	e000      	b.n	8008d1c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8008d1a:	2300      	movs	r3, #0
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3718      	adds	r7, #24
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}
 8008d24:	40021000 	.word	0x40021000
 8008d28:	40022000 	.word	0x40022000

08008d2c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b087      	sub	sp, #28
 8008d30:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008d32:	4b2d      	ldr	r3, [pc, #180]	; (8008de8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	f003 0303 	and.w	r3, r3, #3
 8008d3a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2b03      	cmp	r3, #3
 8008d40:	d00b      	beq.n	8008d5a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2b03      	cmp	r3, #3
 8008d46:	d825      	bhi.n	8008d94 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d008      	beq.n	8008d60 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2b02      	cmp	r3, #2
 8008d52:	d11f      	bne.n	8008d94 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8008d54:	4b25      	ldr	r3, [pc, #148]	; (8008dec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8008d56:	613b      	str	r3, [r7, #16]
    break;
 8008d58:	e01f      	b.n	8008d9a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8008d5a:	4b25      	ldr	r3, [pc, #148]	; (8008df0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8008d5c:	613b      	str	r3, [r7, #16]
    break;
 8008d5e:	e01c      	b.n	8008d9a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008d60:	4b21      	ldr	r3, [pc, #132]	; (8008de8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f003 0308 	and.w	r3, r3, #8
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d107      	bne.n	8008d7c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008d6c:	4b1e      	ldr	r3, [pc, #120]	; (8008de8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d72:	0a1b      	lsrs	r3, r3, #8
 8008d74:	f003 030f 	and.w	r3, r3, #15
 8008d78:	617b      	str	r3, [r7, #20]
 8008d7a:	e005      	b.n	8008d88 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008d7c:	4b1a      	ldr	r3, [pc, #104]	; (8008de8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	091b      	lsrs	r3, r3, #4
 8008d82:	f003 030f 	and.w	r3, r3, #15
 8008d86:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8008d88:	4a1a      	ldr	r2, [pc, #104]	; (8008df4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d90:	613b      	str	r3, [r7, #16]
    break;
 8008d92:	e002      	b.n	8008d9a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8008d94:	2300      	movs	r3, #0
 8008d96:	613b      	str	r3, [r7, #16]
    break;
 8008d98:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008d9a:	4b13      	ldr	r3, [pc, #76]	; (8008de8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008d9c:	68db      	ldr	r3, [r3, #12]
 8008d9e:	091b      	lsrs	r3, r3, #4
 8008da0:	f003 030f 	and.w	r3, r3, #15
 8008da4:	3301      	adds	r3, #1
 8008da6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008da8:	4b0f      	ldr	r3, [pc, #60]	; (8008de8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	0a1b      	lsrs	r3, r3, #8
 8008dae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008db2:	693a      	ldr	r2, [r7, #16]
 8008db4:	fb03 f202 	mul.w	r2, r3, r2
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dbe:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008dc0:	4b09      	ldr	r3, [pc, #36]	; (8008de8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	0e5b      	lsrs	r3, r3, #25
 8008dc6:	f003 0303 	and.w	r3, r3, #3
 8008dca:	3301      	adds	r3, #1
 8008dcc:	005b      	lsls	r3, r3, #1
 8008dce:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8008dd0:	693a      	ldr	r2, [r7, #16]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dd8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8008dda:	683b      	ldr	r3, [r7, #0]
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	371c      	adds	r7, #28
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr
 8008de8:	40021000 	.word	0x40021000
 8008dec:	00f42400 	.word	0x00f42400
 8008df0:	007a1200 	.word	0x007a1200
 8008df4:	0800be98 	.word	0x0800be98

08008df8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b086      	sub	sp, #24
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008e00:	2300      	movs	r3, #0
 8008e02:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008e04:	2300      	movs	r3, #0
 8008e06:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d040      	beq.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e18:	2b80      	cmp	r3, #128	; 0x80
 8008e1a:	d02a      	beq.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008e1c:	2b80      	cmp	r3, #128	; 0x80
 8008e1e:	d825      	bhi.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8008e20:	2b60      	cmp	r3, #96	; 0x60
 8008e22:	d026      	beq.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008e24:	2b60      	cmp	r3, #96	; 0x60
 8008e26:	d821      	bhi.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8008e28:	2b40      	cmp	r3, #64	; 0x40
 8008e2a:	d006      	beq.n	8008e3a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8008e2c:	2b40      	cmp	r3, #64	; 0x40
 8008e2e:	d81d      	bhi.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d009      	beq.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8008e34:	2b20      	cmp	r3, #32
 8008e36:	d010      	beq.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8008e38:	e018      	b.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008e3a:	4b89      	ldr	r3, [pc, #548]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	4a88      	ldr	r2, [pc, #544]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e44:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008e46:	e015      	b.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	3304      	adds	r3, #4
 8008e4c:	2100      	movs	r1, #0
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f000 fb12 	bl	8009478 <RCCEx_PLLSAI1_Config>
 8008e54:	4603      	mov	r3, r0
 8008e56:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008e58:	e00c      	b.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	3320      	adds	r3, #32
 8008e5e:	2100      	movs	r1, #0
 8008e60:	4618      	mov	r0, r3
 8008e62:	f000 fbfd 	bl	8009660 <RCCEx_PLLSAI2_Config>
 8008e66:	4603      	mov	r3, r0
 8008e68:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008e6a:	e003      	b.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	74fb      	strb	r3, [r7, #19]
      break;
 8008e70:	e000      	b.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8008e72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e74:	7cfb      	ldrb	r3, [r7, #19]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d10b      	bne.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008e7a:	4b79      	ldr	r3, [pc, #484]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008e7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008e80:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e88:	4975      	ldr	r1, [pc, #468]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8008e90:	e001      	b.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e92:	7cfb      	ldrb	r3, [r7, #19]
 8008e94:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d047      	beq.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008eaa:	d030      	beq.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8008eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008eb0:	d82a      	bhi.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8008eb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008eb6:	d02a      	beq.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8008eb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ebc:	d824      	bhi.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8008ebe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ec2:	d008      	beq.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8008ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ec8:	d81e      	bhi.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d00a      	beq.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8008ece:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ed2:	d010      	beq.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008ed4:	e018      	b.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008ed6:	4b62      	ldr	r3, [pc, #392]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	4a61      	ldr	r2, [pc, #388]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ee0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008ee2:	e015      	b.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	3304      	adds	r3, #4
 8008ee8:	2100      	movs	r1, #0
 8008eea:	4618      	mov	r0, r3
 8008eec:	f000 fac4 	bl	8009478 <RCCEx_PLLSAI1_Config>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008ef4:	e00c      	b.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	3320      	adds	r3, #32
 8008efa:	2100      	movs	r1, #0
 8008efc:	4618      	mov	r0, r3
 8008efe:	f000 fbaf 	bl	8009660 <RCCEx_PLLSAI2_Config>
 8008f02:	4603      	mov	r3, r0
 8008f04:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008f06:	e003      	b.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	74fb      	strb	r3, [r7, #19]
      break;
 8008f0c:	e000      	b.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8008f0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f10:	7cfb      	ldrb	r3, [r7, #19]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d10b      	bne.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008f16:	4b52      	ldr	r3, [pc, #328]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008f18:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008f1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f24:	494e      	ldr	r1, [pc, #312]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008f26:	4313      	orrs	r3, r2
 8008f28:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8008f2c:	e001      	b.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f2e:	7cfb      	ldrb	r3, [r7, #19]
 8008f30:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	f000 809f 	beq.w	800907e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008f40:	2300      	movs	r3, #0
 8008f42:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008f44:	4b46      	ldr	r3, [pc, #280]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d101      	bne.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8008f50:	2301      	movs	r3, #1
 8008f52:	e000      	b.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8008f54:	2300      	movs	r3, #0
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d00d      	beq.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008f5a:	4b41      	ldr	r3, [pc, #260]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f5e:	4a40      	ldr	r2, [pc, #256]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f64:	6593      	str	r3, [r2, #88]	; 0x58
 8008f66:	4b3e      	ldr	r3, [pc, #248]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f6e:	60bb      	str	r3, [r7, #8]
 8008f70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008f72:	2301      	movs	r3, #1
 8008f74:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008f76:	4b3b      	ldr	r3, [pc, #236]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a3a      	ldr	r2, [pc, #232]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008f82:	f7fa fff7 	bl	8003f74 <HAL_GetTick>
 8008f86:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008f88:	e009      	b.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f8a:	f7fa fff3 	bl	8003f74 <HAL_GetTick>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	1ad3      	subs	r3, r2, r3
 8008f94:	2b02      	cmp	r3, #2
 8008f96:	d902      	bls.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8008f98:	2303      	movs	r3, #3
 8008f9a:	74fb      	strb	r3, [r7, #19]
        break;
 8008f9c:	e005      	b.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008f9e:	4b31      	ldr	r3, [pc, #196]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d0ef      	beq.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8008faa:	7cfb      	ldrb	r3, [r7, #19]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d15b      	bne.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008fb0:	4b2b      	ldr	r3, [pc, #172]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fba:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d01f      	beq.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fc8:	697a      	ldr	r2, [r7, #20]
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d019      	beq.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008fce:	4b24      	ldr	r3, [pc, #144]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fd8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008fda:	4b21      	ldr	r3, [pc, #132]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fe0:	4a1f      	ldr	r2, [pc, #124]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fe6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008fea:	4b1d      	ldr	r3, [pc, #116]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ff0:	4a1b      	ldr	r2, [pc, #108]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ff6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008ffa:	4a19      	ldr	r2, [pc, #100]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	f003 0301 	and.w	r3, r3, #1
 8009008:	2b00      	cmp	r3, #0
 800900a:	d016      	beq.n	800903a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800900c:	f7fa ffb2 	bl	8003f74 <HAL_GetTick>
 8009010:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009012:	e00b      	b.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009014:	f7fa ffae 	bl	8003f74 <HAL_GetTick>
 8009018:	4602      	mov	r2, r0
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	1ad3      	subs	r3, r2, r3
 800901e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009022:	4293      	cmp	r3, r2
 8009024:	d902      	bls.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8009026:	2303      	movs	r3, #3
 8009028:	74fb      	strb	r3, [r7, #19]
            break;
 800902a:	e006      	b.n	800903a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800902c:	4b0c      	ldr	r3, [pc, #48]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800902e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009032:	f003 0302 	and.w	r3, r3, #2
 8009036:	2b00      	cmp	r3, #0
 8009038:	d0ec      	beq.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800903a:	7cfb      	ldrb	r3, [r7, #19]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d10c      	bne.n	800905a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009040:	4b07      	ldr	r3, [pc, #28]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009046:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009050:	4903      	ldr	r1, [pc, #12]	; (8009060 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009052:	4313      	orrs	r3, r2
 8009054:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009058:	e008      	b.n	800906c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800905a:	7cfb      	ldrb	r3, [r7, #19]
 800905c:	74bb      	strb	r3, [r7, #18]
 800905e:	e005      	b.n	800906c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8009060:	40021000 	.word	0x40021000
 8009064:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009068:	7cfb      	ldrb	r3, [r7, #19]
 800906a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800906c:	7c7b      	ldrb	r3, [r7, #17]
 800906e:	2b01      	cmp	r3, #1
 8009070:	d105      	bne.n	800907e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009072:	4ba0      	ldr	r3, [pc, #640]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009076:	4a9f      	ldr	r2, [pc, #636]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009078:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800907c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f003 0301 	and.w	r3, r3, #1
 8009086:	2b00      	cmp	r3, #0
 8009088:	d00a      	beq.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800908a:	4b9a      	ldr	r3, [pc, #616]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800908c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009090:	f023 0203 	bic.w	r2, r3, #3
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009098:	4996      	ldr	r1, [pc, #600]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800909a:	4313      	orrs	r3, r2
 800909c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f003 0302 	and.w	r3, r3, #2
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d00a      	beq.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80090ac:	4b91      	ldr	r3, [pc, #580]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80090ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090b2:	f023 020c 	bic.w	r2, r3, #12
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ba:	498e      	ldr	r1, [pc, #568]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80090bc:	4313      	orrs	r3, r2
 80090be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f003 0304 	and.w	r3, r3, #4
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d00a      	beq.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80090ce:	4b89      	ldr	r3, [pc, #548]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80090d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090dc:	4985      	ldr	r1, [pc, #532]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80090de:	4313      	orrs	r3, r2
 80090e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f003 0308 	and.w	r3, r3, #8
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d00a      	beq.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80090f0:	4b80      	ldr	r3, [pc, #512]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80090f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090fe:	497d      	ldr	r1, [pc, #500]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009100:	4313      	orrs	r3, r2
 8009102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f003 0310 	and.w	r3, r3, #16
 800910e:	2b00      	cmp	r3, #0
 8009110:	d00a      	beq.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009112:	4b78      	ldr	r3, [pc, #480]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009118:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009120:	4974      	ldr	r1, [pc, #464]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009122:	4313      	orrs	r3, r2
 8009124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f003 0320 	and.w	r3, r3, #32
 8009130:	2b00      	cmp	r3, #0
 8009132:	d00a      	beq.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009134:	4b6f      	ldr	r3, [pc, #444]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800913a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009142:	496c      	ldr	r1, [pc, #432]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009144:	4313      	orrs	r3, r2
 8009146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009152:	2b00      	cmp	r3, #0
 8009154:	d00a      	beq.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009156:	4b67      	ldr	r3, [pc, #412]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800915c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009164:	4963      	ldr	r1, [pc, #396]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009166:	4313      	orrs	r3, r2
 8009168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009174:	2b00      	cmp	r3, #0
 8009176:	d00a      	beq.n	800918e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009178:	4b5e      	ldr	r3, [pc, #376]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800917a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800917e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009186:	495b      	ldr	r1, [pc, #364]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009188:	4313      	orrs	r3, r2
 800918a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009196:	2b00      	cmp	r3, #0
 8009198:	d00a      	beq.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800919a:	4b56      	ldr	r3, [pc, #344]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800919c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091a8:	4952      	ldr	r1, [pc, #328]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80091aa:	4313      	orrs	r3, r2
 80091ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d00a      	beq.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80091bc:	4b4d      	ldr	r3, [pc, #308]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80091be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091ca:	494a      	ldr	r1, [pc, #296]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80091cc:	4313      	orrs	r3, r2
 80091ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d00a      	beq.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80091de:	4b45      	ldr	r3, [pc, #276]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80091e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091ec:	4941      	ldr	r1, [pc, #260]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80091ee:	4313      	orrs	r3, r2
 80091f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d00a      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009200:	4b3c      	ldr	r3, [pc, #240]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009202:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009206:	f023 0203 	bic.w	r2, r3, #3
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800920e:	4939      	ldr	r1, [pc, #228]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009210:	4313      	orrs	r3, r2
 8009212:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800921e:	2b00      	cmp	r3, #0
 8009220:	d028      	beq.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009222:	4b34      	ldr	r3, [pc, #208]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009228:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009230:	4930      	ldr	r1, [pc, #192]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009232:	4313      	orrs	r3, r2
 8009234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800923c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009240:	d106      	bne.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009242:	4b2c      	ldr	r3, [pc, #176]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009244:	68db      	ldr	r3, [r3, #12]
 8009246:	4a2b      	ldr	r2, [pc, #172]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009248:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800924c:	60d3      	str	r3, [r2, #12]
 800924e:	e011      	b.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009254:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009258:	d10c      	bne.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	3304      	adds	r3, #4
 800925e:	2101      	movs	r1, #1
 8009260:	4618      	mov	r0, r3
 8009262:	f000 f909 	bl	8009478 <RCCEx_PLLSAI1_Config>
 8009266:	4603      	mov	r3, r0
 8009268:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800926a:	7cfb      	ldrb	r3, [r7, #19]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d001      	beq.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8009270:	7cfb      	ldrb	r3, [r7, #19]
 8009272:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800927c:	2b00      	cmp	r3, #0
 800927e:	d04d      	beq.n	800931c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009284:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009288:	d108      	bne.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800928a:	4b1a      	ldr	r3, [pc, #104]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800928c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009290:	4a18      	ldr	r2, [pc, #96]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009292:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009296:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800929a:	e012      	b.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800929c:	4b15      	ldr	r3, [pc, #84]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800929e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80092a2:	4a14      	ldr	r2, [pc, #80]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80092a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092a8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80092ac:	4b11      	ldr	r3, [pc, #68]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80092ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092ba:	490e      	ldr	r1, [pc, #56]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80092bc:	4313      	orrs	r3, r2
 80092be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80092ca:	d106      	bne.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80092cc:	4b09      	ldr	r3, [pc, #36]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	4a08      	ldr	r2, [pc, #32]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80092d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80092d6:	60d3      	str	r3, [r2, #12]
 80092d8:	e020      	b.n	800931c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80092e2:	d109      	bne.n	80092f8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80092e4:	4b03      	ldr	r3, [pc, #12]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80092e6:	68db      	ldr	r3, [r3, #12]
 80092e8:	4a02      	ldr	r2, [pc, #8]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80092ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092ee:	60d3      	str	r3, [r2, #12]
 80092f0:	e014      	b.n	800931c <HAL_RCCEx_PeriphCLKConfig+0x524>
 80092f2:	bf00      	nop
 80092f4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009300:	d10c      	bne.n	800931c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	3304      	adds	r3, #4
 8009306:	2101      	movs	r1, #1
 8009308:	4618      	mov	r0, r3
 800930a:	f000 f8b5 	bl	8009478 <RCCEx_PLLSAI1_Config>
 800930e:	4603      	mov	r3, r0
 8009310:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009312:	7cfb      	ldrb	r3, [r7, #19]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d001      	beq.n	800931c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8009318:	7cfb      	ldrb	r3, [r7, #19]
 800931a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009324:	2b00      	cmp	r3, #0
 8009326:	d028      	beq.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009328:	4b4a      	ldr	r3, [pc, #296]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800932a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800932e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009336:	4947      	ldr	r1, [pc, #284]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009338:	4313      	orrs	r3, r2
 800933a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009342:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009346:	d106      	bne.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009348:	4b42      	ldr	r3, [pc, #264]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	4a41      	ldr	r2, [pc, #260]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800934e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009352:	60d3      	str	r3, [r2, #12]
 8009354:	e011      	b.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800935a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800935e:	d10c      	bne.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	3304      	adds	r3, #4
 8009364:	2101      	movs	r1, #1
 8009366:	4618      	mov	r0, r3
 8009368:	f000 f886 	bl	8009478 <RCCEx_PLLSAI1_Config>
 800936c:	4603      	mov	r3, r0
 800936e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009370:	7cfb      	ldrb	r3, [r7, #19]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d001      	beq.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8009376:	7cfb      	ldrb	r3, [r7, #19]
 8009378:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009382:	2b00      	cmp	r3, #0
 8009384:	d01e      	beq.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009386:	4b33      	ldr	r3, [pc, #204]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800938c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009396:	492f      	ldr	r1, [pc, #188]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009398:	4313      	orrs	r3, r2
 800939a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093a8:	d10c      	bne.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	3304      	adds	r3, #4
 80093ae:	2102      	movs	r1, #2
 80093b0:	4618      	mov	r0, r3
 80093b2:	f000 f861 	bl	8009478 <RCCEx_PLLSAI1_Config>
 80093b6:	4603      	mov	r3, r0
 80093b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80093ba:	7cfb      	ldrb	r3, [r7, #19]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d001      	beq.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80093c0:	7cfb      	ldrb	r3, [r7, #19]
 80093c2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d00b      	beq.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80093d0:	4b20      	ldr	r3, [pc, #128]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80093d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80093d6:	f023 0204 	bic.w	r2, r3, #4
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093e0:	491c      	ldr	r1, [pc, #112]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80093e2:	4313      	orrs	r3, r2
 80093e4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d00b      	beq.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80093f4:	4b17      	ldr	r3, [pc, #92]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80093f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80093fa:	f023 0218 	bic.w	r2, r3, #24
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009404:	4913      	ldr	r1, [pc, #76]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009406:	4313      	orrs	r3, r2
 8009408:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009414:	2b00      	cmp	r3, #0
 8009416:	d017      	beq.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009418:	4b0e      	ldr	r3, [pc, #56]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800941a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800941e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009428:	490a      	ldr	r1, [pc, #40]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800942a:	4313      	orrs	r3, r2
 800942c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009436:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800943a:	d105      	bne.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800943c:	4b05      	ldr	r3, [pc, #20]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	4a04      	ldr	r2, [pc, #16]	; (8009454 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009442:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009446:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009448:	7cbb      	ldrb	r3, [r7, #18]
}
 800944a:	4618      	mov	r0, r3
 800944c:	3718      	adds	r7, #24
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	40021000 	.word	0x40021000

08009458 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8009458:	b480      	push	{r7}
 800945a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800945c:	4b05      	ldr	r3, [pc, #20]	; (8009474 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4a04      	ldr	r2, [pc, #16]	; (8009474 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8009462:	f043 0304 	orr.w	r3, r3, #4
 8009466:	6013      	str	r3, [r2, #0]
}
 8009468:	bf00      	nop
 800946a:	46bd      	mov	sp, r7
 800946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009470:	4770      	bx	lr
 8009472:	bf00      	nop
 8009474:	40021000 	.word	0x40021000

08009478 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009482:	2300      	movs	r3, #0
 8009484:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009486:	4b72      	ldr	r3, [pc, #456]	; (8009650 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	f003 0303 	and.w	r3, r3, #3
 800948e:	2b00      	cmp	r3, #0
 8009490:	d00e      	beq.n	80094b0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8009492:	4b6f      	ldr	r3, [pc, #444]	; (8009650 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009494:	68db      	ldr	r3, [r3, #12]
 8009496:	f003 0203 	and.w	r2, r3, #3
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	429a      	cmp	r2, r3
 80094a0:	d103      	bne.n	80094aa <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
       ||
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d142      	bne.n	8009530 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80094aa:	2301      	movs	r3, #1
 80094ac:	73fb      	strb	r3, [r7, #15]
 80094ae:	e03f      	b.n	8009530 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	2b03      	cmp	r3, #3
 80094b6:	d018      	beq.n	80094ea <RCCEx_PLLSAI1_Config+0x72>
 80094b8:	2b03      	cmp	r3, #3
 80094ba:	d825      	bhi.n	8009508 <RCCEx_PLLSAI1_Config+0x90>
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d002      	beq.n	80094c6 <RCCEx_PLLSAI1_Config+0x4e>
 80094c0:	2b02      	cmp	r3, #2
 80094c2:	d009      	beq.n	80094d8 <RCCEx_PLLSAI1_Config+0x60>
 80094c4:	e020      	b.n	8009508 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80094c6:	4b62      	ldr	r3, [pc, #392]	; (8009650 <RCCEx_PLLSAI1_Config+0x1d8>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f003 0302 	and.w	r3, r3, #2
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d11d      	bne.n	800950e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80094d2:	2301      	movs	r3, #1
 80094d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80094d6:	e01a      	b.n	800950e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80094d8:	4b5d      	ldr	r3, [pc, #372]	; (8009650 <RCCEx_PLLSAI1_Config+0x1d8>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d116      	bne.n	8009512 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80094e4:	2301      	movs	r3, #1
 80094e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80094e8:	e013      	b.n	8009512 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80094ea:	4b59      	ldr	r3, [pc, #356]	; (8009650 <RCCEx_PLLSAI1_Config+0x1d8>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d10f      	bne.n	8009516 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80094f6:	4b56      	ldr	r3, [pc, #344]	; (8009650 <RCCEx_PLLSAI1_Config+0x1d8>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d109      	bne.n	8009516 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8009502:	2301      	movs	r3, #1
 8009504:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009506:	e006      	b.n	8009516 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8009508:	2301      	movs	r3, #1
 800950a:	73fb      	strb	r3, [r7, #15]
      break;
 800950c:	e004      	b.n	8009518 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800950e:	bf00      	nop
 8009510:	e002      	b.n	8009518 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8009512:	bf00      	nop
 8009514:	e000      	b.n	8009518 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8009516:	bf00      	nop
    }

    if(status == HAL_OK)
 8009518:	7bfb      	ldrb	r3, [r7, #15]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d108      	bne.n	8009530 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800951e:	4b4c      	ldr	r3, [pc, #304]	; (8009650 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009520:	68db      	ldr	r3, [r3, #12]
 8009522:	f023 0203 	bic.w	r2, r3, #3
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4949      	ldr	r1, [pc, #292]	; (8009650 <RCCEx_PLLSAI1_Config+0x1d8>)
 800952c:	4313      	orrs	r3, r2
 800952e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8009530:	7bfb      	ldrb	r3, [r7, #15]
 8009532:	2b00      	cmp	r3, #0
 8009534:	f040 8086 	bne.w	8009644 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009538:	4b45      	ldr	r3, [pc, #276]	; (8009650 <RCCEx_PLLSAI1_Config+0x1d8>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a44      	ldr	r2, [pc, #272]	; (8009650 <RCCEx_PLLSAI1_Config+0x1d8>)
 800953e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009542:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009544:	f7fa fd16 	bl	8003f74 <HAL_GetTick>
 8009548:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800954a:	e009      	b.n	8009560 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800954c:	f7fa fd12 	bl	8003f74 <HAL_GetTick>
 8009550:	4602      	mov	r2, r0
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	1ad3      	subs	r3, r2, r3
 8009556:	2b02      	cmp	r3, #2
 8009558:	d902      	bls.n	8009560 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800955a:	2303      	movs	r3, #3
 800955c:	73fb      	strb	r3, [r7, #15]
        break;
 800955e:	e005      	b.n	800956c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009560:	4b3b      	ldr	r3, [pc, #236]	; (8009650 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009568:	2b00      	cmp	r3, #0
 800956a:	d1ef      	bne.n	800954c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800956c:	7bfb      	ldrb	r3, [r7, #15]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d168      	bne.n	8009644 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d113      	bne.n	80095a0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009578:	4b35      	ldr	r3, [pc, #212]	; (8009650 <RCCEx_PLLSAI1_Config+0x1d8>)
 800957a:	691a      	ldr	r2, [r3, #16]
 800957c:	4b35      	ldr	r3, [pc, #212]	; (8009654 <RCCEx_PLLSAI1_Config+0x1dc>)
 800957e:	4013      	ands	r3, r2
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	6892      	ldr	r2, [r2, #8]
 8009584:	0211      	lsls	r1, r2, #8
 8009586:	687a      	ldr	r2, [r7, #4]
 8009588:	68d2      	ldr	r2, [r2, #12]
 800958a:	06d2      	lsls	r2, r2, #27
 800958c:	4311      	orrs	r1, r2
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	6852      	ldr	r2, [r2, #4]
 8009592:	3a01      	subs	r2, #1
 8009594:	0112      	lsls	r2, r2, #4
 8009596:	430a      	orrs	r2, r1
 8009598:	492d      	ldr	r1, [pc, #180]	; (8009650 <RCCEx_PLLSAI1_Config+0x1d8>)
 800959a:	4313      	orrs	r3, r2
 800959c:	610b      	str	r3, [r1, #16]
 800959e:	e02d      	b.n	80095fc <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	d115      	bne.n	80095d2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80095a6:	4b2a      	ldr	r3, [pc, #168]	; (8009650 <RCCEx_PLLSAI1_Config+0x1d8>)
 80095a8:	691a      	ldr	r2, [r3, #16]
 80095aa:	4b2b      	ldr	r3, [pc, #172]	; (8009658 <RCCEx_PLLSAI1_Config+0x1e0>)
 80095ac:	4013      	ands	r3, r2
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	6892      	ldr	r2, [r2, #8]
 80095b2:	0211      	lsls	r1, r2, #8
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	6912      	ldr	r2, [r2, #16]
 80095b8:	0852      	lsrs	r2, r2, #1
 80095ba:	3a01      	subs	r2, #1
 80095bc:	0552      	lsls	r2, r2, #21
 80095be:	4311      	orrs	r1, r2
 80095c0:	687a      	ldr	r2, [r7, #4]
 80095c2:	6852      	ldr	r2, [r2, #4]
 80095c4:	3a01      	subs	r2, #1
 80095c6:	0112      	lsls	r2, r2, #4
 80095c8:	430a      	orrs	r2, r1
 80095ca:	4921      	ldr	r1, [pc, #132]	; (8009650 <RCCEx_PLLSAI1_Config+0x1d8>)
 80095cc:	4313      	orrs	r3, r2
 80095ce:	610b      	str	r3, [r1, #16]
 80095d0:	e014      	b.n	80095fc <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80095d2:	4b1f      	ldr	r3, [pc, #124]	; (8009650 <RCCEx_PLLSAI1_Config+0x1d8>)
 80095d4:	691a      	ldr	r2, [r3, #16]
 80095d6:	4b21      	ldr	r3, [pc, #132]	; (800965c <RCCEx_PLLSAI1_Config+0x1e4>)
 80095d8:	4013      	ands	r3, r2
 80095da:	687a      	ldr	r2, [r7, #4]
 80095dc:	6892      	ldr	r2, [r2, #8]
 80095de:	0211      	lsls	r1, r2, #8
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	6952      	ldr	r2, [r2, #20]
 80095e4:	0852      	lsrs	r2, r2, #1
 80095e6:	3a01      	subs	r2, #1
 80095e8:	0652      	lsls	r2, r2, #25
 80095ea:	4311      	orrs	r1, r2
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	6852      	ldr	r2, [r2, #4]
 80095f0:	3a01      	subs	r2, #1
 80095f2:	0112      	lsls	r2, r2, #4
 80095f4:	430a      	orrs	r2, r1
 80095f6:	4916      	ldr	r1, [pc, #88]	; (8009650 <RCCEx_PLLSAI1_Config+0x1d8>)
 80095f8:	4313      	orrs	r3, r2
 80095fa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80095fc:	4b14      	ldr	r3, [pc, #80]	; (8009650 <RCCEx_PLLSAI1_Config+0x1d8>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a13      	ldr	r2, [pc, #76]	; (8009650 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009602:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009606:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009608:	f7fa fcb4 	bl	8003f74 <HAL_GetTick>
 800960c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800960e:	e009      	b.n	8009624 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009610:	f7fa fcb0 	bl	8003f74 <HAL_GetTick>
 8009614:	4602      	mov	r2, r0
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	1ad3      	subs	r3, r2, r3
 800961a:	2b02      	cmp	r3, #2
 800961c:	d902      	bls.n	8009624 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800961e:	2303      	movs	r3, #3
 8009620:	73fb      	strb	r3, [r7, #15]
          break;
 8009622:	e005      	b.n	8009630 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009624:	4b0a      	ldr	r3, [pc, #40]	; (8009650 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800962c:	2b00      	cmp	r3, #0
 800962e:	d0ef      	beq.n	8009610 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8009630:	7bfb      	ldrb	r3, [r7, #15]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d106      	bne.n	8009644 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009636:	4b06      	ldr	r3, [pc, #24]	; (8009650 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009638:	691a      	ldr	r2, [r3, #16]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	699b      	ldr	r3, [r3, #24]
 800963e:	4904      	ldr	r1, [pc, #16]	; (8009650 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009640:	4313      	orrs	r3, r2
 8009642:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009644:	7bfb      	ldrb	r3, [r7, #15]
}
 8009646:	4618      	mov	r0, r3
 8009648:	3710      	adds	r7, #16
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
 800964e:	bf00      	nop
 8009650:	40021000 	.word	0x40021000
 8009654:	07ff800f 	.word	0x07ff800f
 8009658:	ff9f800f 	.word	0xff9f800f
 800965c:	f9ff800f 	.word	0xf9ff800f

08009660 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800966a:	2300      	movs	r3, #0
 800966c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800966e:	4b72      	ldr	r3, [pc, #456]	; (8009838 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009670:	68db      	ldr	r3, [r3, #12]
 8009672:	f003 0303 	and.w	r3, r3, #3
 8009676:	2b00      	cmp	r3, #0
 8009678:	d00e      	beq.n	8009698 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800967a:	4b6f      	ldr	r3, [pc, #444]	; (8009838 <RCCEx_PLLSAI2_Config+0x1d8>)
 800967c:	68db      	ldr	r3, [r3, #12]
 800967e:	f003 0203 	and.w	r2, r3, #3
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	429a      	cmp	r2, r3
 8009688:	d103      	bne.n	8009692 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
       ||
 800968e:	2b00      	cmp	r3, #0
 8009690:	d142      	bne.n	8009718 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	73fb      	strb	r3, [r7, #15]
 8009696:	e03f      	b.n	8009718 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2b03      	cmp	r3, #3
 800969e:	d018      	beq.n	80096d2 <RCCEx_PLLSAI2_Config+0x72>
 80096a0:	2b03      	cmp	r3, #3
 80096a2:	d825      	bhi.n	80096f0 <RCCEx_PLLSAI2_Config+0x90>
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d002      	beq.n	80096ae <RCCEx_PLLSAI2_Config+0x4e>
 80096a8:	2b02      	cmp	r3, #2
 80096aa:	d009      	beq.n	80096c0 <RCCEx_PLLSAI2_Config+0x60>
 80096ac:	e020      	b.n	80096f0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80096ae:	4b62      	ldr	r3, [pc, #392]	; (8009838 <RCCEx_PLLSAI2_Config+0x1d8>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f003 0302 	and.w	r3, r3, #2
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d11d      	bne.n	80096f6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80096ba:	2301      	movs	r3, #1
 80096bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80096be:	e01a      	b.n	80096f6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80096c0:	4b5d      	ldr	r3, [pc, #372]	; (8009838 <RCCEx_PLLSAI2_Config+0x1d8>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d116      	bne.n	80096fa <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80096cc:	2301      	movs	r3, #1
 80096ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80096d0:	e013      	b.n	80096fa <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80096d2:	4b59      	ldr	r3, [pc, #356]	; (8009838 <RCCEx_PLLSAI2_Config+0x1d8>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d10f      	bne.n	80096fe <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80096de:	4b56      	ldr	r3, [pc, #344]	; (8009838 <RCCEx_PLLSAI2_Config+0x1d8>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d109      	bne.n	80096fe <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80096ea:	2301      	movs	r3, #1
 80096ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80096ee:	e006      	b.n	80096fe <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80096f0:	2301      	movs	r3, #1
 80096f2:	73fb      	strb	r3, [r7, #15]
      break;
 80096f4:	e004      	b.n	8009700 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80096f6:	bf00      	nop
 80096f8:	e002      	b.n	8009700 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80096fa:	bf00      	nop
 80096fc:	e000      	b.n	8009700 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80096fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8009700:	7bfb      	ldrb	r3, [r7, #15]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d108      	bne.n	8009718 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8009706:	4b4c      	ldr	r3, [pc, #304]	; (8009838 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	f023 0203 	bic.w	r2, r3, #3
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4949      	ldr	r1, [pc, #292]	; (8009838 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009714:	4313      	orrs	r3, r2
 8009716:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8009718:	7bfb      	ldrb	r3, [r7, #15]
 800971a:	2b00      	cmp	r3, #0
 800971c:	f040 8086 	bne.w	800982c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8009720:	4b45      	ldr	r3, [pc, #276]	; (8009838 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a44      	ldr	r2, [pc, #272]	; (8009838 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009726:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800972a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800972c:	f7fa fc22 	bl	8003f74 <HAL_GetTick>
 8009730:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009732:	e009      	b.n	8009748 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009734:	f7fa fc1e 	bl	8003f74 <HAL_GetTick>
 8009738:	4602      	mov	r2, r0
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	1ad3      	subs	r3, r2, r3
 800973e:	2b02      	cmp	r3, #2
 8009740:	d902      	bls.n	8009748 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8009742:	2303      	movs	r3, #3
 8009744:	73fb      	strb	r3, [r7, #15]
        break;
 8009746:	e005      	b.n	8009754 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009748:	4b3b      	ldr	r3, [pc, #236]	; (8009838 <RCCEx_PLLSAI2_Config+0x1d8>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009750:	2b00      	cmp	r3, #0
 8009752:	d1ef      	bne.n	8009734 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8009754:	7bfb      	ldrb	r3, [r7, #15]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d168      	bne.n	800982c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d113      	bne.n	8009788 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009760:	4b35      	ldr	r3, [pc, #212]	; (8009838 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009762:	695a      	ldr	r2, [r3, #20]
 8009764:	4b35      	ldr	r3, [pc, #212]	; (800983c <RCCEx_PLLSAI2_Config+0x1dc>)
 8009766:	4013      	ands	r3, r2
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	6892      	ldr	r2, [r2, #8]
 800976c:	0211      	lsls	r1, r2, #8
 800976e:	687a      	ldr	r2, [r7, #4]
 8009770:	68d2      	ldr	r2, [r2, #12]
 8009772:	06d2      	lsls	r2, r2, #27
 8009774:	4311      	orrs	r1, r2
 8009776:	687a      	ldr	r2, [r7, #4]
 8009778:	6852      	ldr	r2, [r2, #4]
 800977a:	3a01      	subs	r2, #1
 800977c:	0112      	lsls	r2, r2, #4
 800977e:	430a      	orrs	r2, r1
 8009780:	492d      	ldr	r1, [pc, #180]	; (8009838 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009782:	4313      	orrs	r3, r2
 8009784:	614b      	str	r3, [r1, #20]
 8009786:	e02d      	b.n	80097e4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	2b01      	cmp	r3, #1
 800978c:	d115      	bne.n	80097ba <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800978e:	4b2a      	ldr	r3, [pc, #168]	; (8009838 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009790:	695a      	ldr	r2, [r3, #20]
 8009792:	4b2b      	ldr	r3, [pc, #172]	; (8009840 <RCCEx_PLLSAI2_Config+0x1e0>)
 8009794:	4013      	ands	r3, r2
 8009796:	687a      	ldr	r2, [r7, #4]
 8009798:	6892      	ldr	r2, [r2, #8]
 800979a:	0211      	lsls	r1, r2, #8
 800979c:	687a      	ldr	r2, [r7, #4]
 800979e:	6912      	ldr	r2, [r2, #16]
 80097a0:	0852      	lsrs	r2, r2, #1
 80097a2:	3a01      	subs	r2, #1
 80097a4:	0552      	lsls	r2, r2, #21
 80097a6:	4311      	orrs	r1, r2
 80097a8:	687a      	ldr	r2, [r7, #4]
 80097aa:	6852      	ldr	r2, [r2, #4]
 80097ac:	3a01      	subs	r2, #1
 80097ae:	0112      	lsls	r2, r2, #4
 80097b0:	430a      	orrs	r2, r1
 80097b2:	4921      	ldr	r1, [pc, #132]	; (8009838 <RCCEx_PLLSAI2_Config+0x1d8>)
 80097b4:	4313      	orrs	r3, r2
 80097b6:	614b      	str	r3, [r1, #20]
 80097b8:	e014      	b.n	80097e4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80097ba:	4b1f      	ldr	r3, [pc, #124]	; (8009838 <RCCEx_PLLSAI2_Config+0x1d8>)
 80097bc:	695a      	ldr	r2, [r3, #20]
 80097be:	4b21      	ldr	r3, [pc, #132]	; (8009844 <RCCEx_PLLSAI2_Config+0x1e4>)
 80097c0:	4013      	ands	r3, r2
 80097c2:	687a      	ldr	r2, [r7, #4]
 80097c4:	6892      	ldr	r2, [r2, #8]
 80097c6:	0211      	lsls	r1, r2, #8
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	6952      	ldr	r2, [r2, #20]
 80097cc:	0852      	lsrs	r2, r2, #1
 80097ce:	3a01      	subs	r2, #1
 80097d0:	0652      	lsls	r2, r2, #25
 80097d2:	4311      	orrs	r1, r2
 80097d4:	687a      	ldr	r2, [r7, #4]
 80097d6:	6852      	ldr	r2, [r2, #4]
 80097d8:	3a01      	subs	r2, #1
 80097da:	0112      	lsls	r2, r2, #4
 80097dc:	430a      	orrs	r2, r1
 80097de:	4916      	ldr	r1, [pc, #88]	; (8009838 <RCCEx_PLLSAI2_Config+0x1d8>)
 80097e0:	4313      	orrs	r3, r2
 80097e2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80097e4:	4b14      	ldr	r3, [pc, #80]	; (8009838 <RCCEx_PLLSAI2_Config+0x1d8>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4a13      	ldr	r2, [pc, #76]	; (8009838 <RCCEx_PLLSAI2_Config+0x1d8>)
 80097ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097f0:	f7fa fbc0 	bl	8003f74 <HAL_GetTick>
 80097f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80097f6:	e009      	b.n	800980c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80097f8:	f7fa fbbc 	bl	8003f74 <HAL_GetTick>
 80097fc:	4602      	mov	r2, r0
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	1ad3      	subs	r3, r2, r3
 8009802:	2b02      	cmp	r3, #2
 8009804:	d902      	bls.n	800980c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8009806:	2303      	movs	r3, #3
 8009808:	73fb      	strb	r3, [r7, #15]
          break;
 800980a:	e005      	b.n	8009818 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800980c:	4b0a      	ldr	r3, [pc, #40]	; (8009838 <RCCEx_PLLSAI2_Config+0x1d8>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009814:	2b00      	cmp	r3, #0
 8009816:	d0ef      	beq.n	80097f8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8009818:	7bfb      	ldrb	r3, [r7, #15]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d106      	bne.n	800982c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800981e:	4b06      	ldr	r3, [pc, #24]	; (8009838 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009820:	695a      	ldr	r2, [r3, #20]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	699b      	ldr	r3, [r3, #24]
 8009826:	4904      	ldr	r1, [pc, #16]	; (8009838 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009828:	4313      	orrs	r3, r2
 800982a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800982c:	7bfb      	ldrb	r3, [r7, #15]
}
 800982e:	4618      	mov	r0, r3
 8009830:	3710      	adds	r7, #16
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop
 8009838:	40021000 	.word	0x40021000
 800983c:	07ff800f 	.word	0x07ff800f
 8009840:	ff9f800f 	.word	0xff9f800f
 8009844:	f9ff800f 	.word	0xf9ff800f

08009848 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d101      	bne.n	800985a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009856:	2301      	movs	r3, #1
 8009858:	e095      	b.n	8009986 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800985e:	2b00      	cmp	r3, #0
 8009860:	d108      	bne.n	8009874 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800986a:	d009      	beq.n	8009880 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2200      	movs	r2, #0
 8009870:	61da      	str	r2, [r3, #28]
 8009872:	e005      	b.n	8009880 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2200      	movs	r2, #0
 8009884:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800988c:	b2db      	uxtb	r3, r3
 800988e:	2b00      	cmp	r3, #0
 8009890:	d106      	bne.n	80098a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2200      	movs	r2, #0
 8009896:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f7fa f82a 	bl	80038f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2202      	movs	r2, #2
 80098a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	681a      	ldr	r2, [r3, #0]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	68db      	ldr	r3, [r3, #12]
 80098bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80098c0:	d902      	bls.n	80098c8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80098c2:	2300      	movs	r3, #0
 80098c4:	60fb      	str	r3, [r7, #12]
 80098c6:	e002      	b.n	80098ce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80098c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098cc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	68db      	ldr	r3, [r3, #12]
 80098d2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80098d6:	d007      	beq.n	80098e8 <HAL_SPI_Init+0xa0>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	68db      	ldr	r3, [r3, #12]
 80098dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80098e0:	d002      	beq.n	80098e8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80098f8:	431a      	orrs	r2, r3
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	691b      	ldr	r3, [r3, #16]
 80098fe:	f003 0302 	and.w	r3, r3, #2
 8009902:	431a      	orrs	r2, r3
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	695b      	ldr	r3, [r3, #20]
 8009908:	f003 0301 	and.w	r3, r3, #1
 800990c:	431a      	orrs	r2, r3
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	699b      	ldr	r3, [r3, #24]
 8009912:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009916:	431a      	orrs	r2, r3
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	69db      	ldr	r3, [r3, #28]
 800991c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009920:	431a      	orrs	r2, r3
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6a1b      	ldr	r3, [r3, #32]
 8009926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800992a:	ea42 0103 	orr.w	r1, r2, r3
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009932:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	430a      	orrs	r2, r1
 800993c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	699b      	ldr	r3, [r3, #24]
 8009942:	0c1b      	lsrs	r3, r3, #16
 8009944:	f003 0204 	and.w	r2, r3, #4
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800994c:	f003 0310 	and.w	r3, r3, #16
 8009950:	431a      	orrs	r2, r3
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009956:	f003 0308 	and.w	r3, r3, #8
 800995a:	431a      	orrs	r2, r3
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	68db      	ldr	r3, [r3, #12]
 8009960:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009964:	ea42 0103 	orr.w	r1, r2, r3
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	430a      	orrs	r2, r1
 8009974:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2200      	movs	r2, #0
 800997a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2201      	movs	r2, #1
 8009980:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009984:	2300      	movs	r3, #0
}
 8009986:	4618      	mov	r0, r3
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}

0800998e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800998e:	b580      	push	{r7, lr}
 8009990:	b082      	sub	sp, #8
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d101      	bne.n	80099a0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800999c:	2301      	movs	r3, #1
 800999e:	e049      	b.n	8009a34 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d106      	bne.n	80099ba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2200      	movs	r2, #0
 80099b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 f841 	bl	8009a3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2202      	movs	r2, #2
 80099be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681a      	ldr	r2, [r3, #0]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	3304      	adds	r3, #4
 80099ca:	4619      	mov	r1, r3
 80099cc:	4610      	mov	r0, r2
 80099ce:	f000 f9d9 	bl	8009d84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2201      	movs	r2, #1
 80099d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2201      	movs	r2, #1
 80099de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2201      	movs	r2, #1
 80099e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2201      	movs	r2, #1
 80099ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2201      	movs	r2, #1
 80099f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2201      	movs	r2, #1
 80099fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2201      	movs	r2, #1
 8009a06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2201      	movs	r2, #1
 8009a16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2201      	movs	r2, #1
 8009a1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2201      	movs	r2, #1
 8009a26:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009a32:	2300      	movs	r3, #0
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3708      	adds	r7, #8
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009a44:	bf00      	nop
 8009a46:	370c      	adds	r7, #12
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr

08009a50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b085      	sub	sp, #20
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a5e:	b2db      	uxtb	r3, r3
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d001      	beq.n	8009a68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009a64:	2301      	movs	r3, #1
 8009a66:	e04f      	b.n	8009b08 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2202      	movs	r2, #2
 8009a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	68da      	ldr	r2, [r3, #12]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f042 0201 	orr.w	r2, r2, #1
 8009a7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a23      	ldr	r2, [pc, #140]	; (8009b14 <HAL_TIM_Base_Start_IT+0xc4>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d01d      	beq.n	8009ac6 <HAL_TIM_Base_Start_IT+0x76>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a92:	d018      	beq.n	8009ac6 <HAL_TIM_Base_Start_IT+0x76>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a1f      	ldr	r2, [pc, #124]	; (8009b18 <HAL_TIM_Base_Start_IT+0xc8>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d013      	beq.n	8009ac6 <HAL_TIM_Base_Start_IT+0x76>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4a1e      	ldr	r2, [pc, #120]	; (8009b1c <HAL_TIM_Base_Start_IT+0xcc>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d00e      	beq.n	8009ac6 <HAL_TIM_Base_Start_IT+0x76>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a1c      	ldr	r2, [pc, #112]	; (8009b20 <HAL_TIM_Base_Start_IT+0xd0>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d009      	beq.n	8009ac6 <HAL_TIM_Base_Start_IT+0x76>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4a1b      	ldr	r2, [pc, #108]	; (8009b24 <HAL_TIM_Base_Start_IT+0xd4>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d004      	beq.n	8009ac6 <HAL_TIM_Base_Start_IT+0x76>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a19      	ldr	r2, [pc, #100]	; (8009b28 <HAL_TIM_Base_Start_IT+0xd8>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d115      	bne.n	8009af2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	689a      	ldr	r2, [r3, #8]
 8009acc:	4b17      	ldr	r3, [pc, #92]	; (8009b2c <HAL_TIM_Base_Start_IT+0xdc>)
 8009ace:	4013      	ands	r3, r2
 8009ad0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2b06      	cmp	r3, #6
 8009ad6:	d015      	beq.n	8009b04 <HAL_TIM_Base_Start_IT+0xb4>
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ade:	d011      	beq.n	8009b04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	681a      	ldr	r2, [r3, #0]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f042 0201 	orr.w	r2, r2, #1
 8009aee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009af0:	e008      	b.n	8009b04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	681a      	ldr	r2, [r3, #0]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f042 0201 	orr.w	r2, r2, #1
 8009b00:	601a      	str	r2, [r3, #0]
 8009b02:	e000      	b.n	8009b06 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b04:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009b06:	2300      	movs	r3, #0
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3714      	adds	r7, #20
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr
 8009b14:	40012c00 	.word	0x40012c00
 8009b18:	40000400 	.word	0x40000400
 8009b1c:	40000800 	.word	0x40000800
 8009b20:	40000c00 	.word	0x40000c00
 8009b24:	40013400 	.word	0x40013400
 8009b28:	40014000 	.word	0x40014000
 8009b2c:	00010007 	.word	0x00010007

08009b30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b084      	sub	sp, #16
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	68db      	ldr	r3, [r3, #12]
 8009b3e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	691b      	ldr	r3, [r3, #16]
 8009b46:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	f003 0302 	and.w	r3, r3, #2
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d020      	beq.n	8009b94 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	f003 0302 	and.w	r3, r3, #2
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d01b      	beq.n	8009b94 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f06f 0202 	mvn.w	r2, #2
 8009b64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2201      	movs	r2, #1
 8009b6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	699b      	ldr	r3, [r3, #24]
 8009b72:	f003 0303 	and.w	r3, r3, #3
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d003      	beq.n	8009b82 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 f8e4 	bl	8009d48 <HAL_TIM_IC_CaptureCallback>
 8009b80:	e005      	b.n	8009b8e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 f8d6 	bl	8009d34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f000 f8e7 	bl	8009d5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2200      	movs	r2, #0
 8009b92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	f003 0304 	and.w	r3, r3, #4
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d020      	beq.n	8009be0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f003 0304 	and.w	r3, r3, #4
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d01b      	beq.n	8009be0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f06f 0204 	mvn.w	r2, #4
 8009bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2202      	movs	r2, #2
 8009bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	699b      	ldr	r3, [r3, #24]
 8009bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d003      	beq.n	8009bce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 f8be 	bl	8009d48 <HAL_TIM_IC_CaptureCallback>
 8009bcc:	e005      	b.n	8009bda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 f8b0 	bl	8009d34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f000 f8c1 	bl	8009d5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	f003 0308 	and.w	r3, r3, #8
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d020      	beq.n	8009c2c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	f003 0308 	and.w	r3, r3, #8
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d01b      	beq.n	8009c2c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f06f 0208 	mvn.w	r2, #8
 8009bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2204      	movs	r2, #4
 8009c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	69db      	ldr	r3, [r3, #28]
 8009c0a:	f003 0303 	and.w	r3, r3, #3
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d003      	beq.n	8009c1a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f000 f898 	bl	8009d48 <HAL_TIM_IC_CaptureCallback>
 8009c18:	e005      	b.n	8009c26 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f000 f88a 	bl	8009d34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 f89b 	bl	8009d5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	f003 0310 	and.w	r3, r3, #16
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d020      	beq.n	8009c78 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	f003 0310 	and.w	r3, r3, #16
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d01b      	beq.n	8009c78 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f06f 0210 	mvn.w	r2, #16
 8009c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2208      	movs	r2, #8
 8009c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	69db      	ldr	r3, [r3, #28]
 8009c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d003      	beq.n	8009c66 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 f872 	bl	8009d48 <HAL_TIM_IC_CaptureCallback>
 8009c64:	e005      	b.n	8009c72 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 f864 	bl	8009d34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 f875 	bl	8009d5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2200      	movs	r2, #0
 8009c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	f003 0301 	and.w	r3, r3, #1
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d00c      	beq.n	8009c9c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	f003 0301 	and.w	r3, r3, #1
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d007      	beq.n	8009c9c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f06f 0201 	mvn.w	r2, #1
 8009c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f7f9 fc1e 	bl	80034d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d00c      	beq.n	8009cc0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d007      	beq.n	8009cc0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 f906 	bl	8009ecc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00c      	beq.n	8009ce4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d007      	beq.n	8009ce4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 f8fe 	bl	8009ee0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d00c      	beq.n	8009d08 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d007      	beq.n	8009d08 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 f834 	bl	8009d70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	f003 0320 	and.w	r3, r3, #32
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d00c      	beq.n	8009d2c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f003 0320 	and.w	r3, r3, #32
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d007      	beq.n	8009d2c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f06f 0220 	mvn.w	r2, #32
 8009d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 f8c6 	bl	8009eb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d2c:	bf00      	nop
 8009d2e:	3710      	adds	r7, #16
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009d3c:	bf00      	nop
 8009d3e:	370c      	adds	r7, #12
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr

08009d48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009d50:	bf00      	nop
 8009d52:	370c      	adds	r7, #12
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr

08009d5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b083      	sub	sp, #12
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009d64:	bf00      	nop
 8009d66:	370c      	adds	r7, #12
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr

08009d70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b083      	sub	sp, #12
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d78:	bf00      	nop
 8009d7a:	370c      	adds	r7, #12
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b085      	sub	sp, #20
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	4a40      	ldr	r2, [pc, #256]	; (8009e98 <TIM_Base_SetConfig+0x114>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d013      	beq.n	8009dc4 <TIM_Base_SetConfig+0x40>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009da2:	d00f      	beq.n	8009dc4 <TIM_Base_SetConfig+0x40>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	4a3d      	ldr	r2, [pc, #244]	; (8009e9c <TIM_Base_SetConfig+0x118>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d00b      	beq.n	8009dc4 <TIM_Base_SetConfig+0x40>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	4a3c      	ldr	r2, [pc, #240]	; (8009ea0 <TIM_Base_SetConfig+0x11c>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d007      	beq.n	8009dc4 <TIM_Base_SetConfig+0x40>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	4a3b      	ldr	r2, [pc, #236]	; (8009ea4 <TIM_Base_SetConfig+0x120>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d003      	beq.n	8009dc4 <TIM_Base_SetConfig+0x40>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	4a3a      	ldr	r2, [pc, #232]	; (8009ea8 <TIM_Base_SetConfig+0x124>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d108      	bne.n	8009dd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	68fa      	ldr	r2, [r7, #12]
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	4a2f      	ldr	r2, [pc, #188]	; (8009e98 <TIM_Base_SetConfig+0x114>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d01f      	beq.n	8009e1e <TIM_Base_SetConfig+0x9a>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009de4:	d01b      	beq.n	8009e1e <TIM_Base_SetConfig+0x9a>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	4a2c      	ldr	r2, [pc, #176]	; (8009e9c <TIM_Base_SetConfig+0x118>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d017      	beq.n	8009e1e <TIM_Base_SetConfig+0x9a>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	4a2b      	ldr	r2, [pc, #172]	; (8009ea0 <TIM_Base_SetConfig+0x11c>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d013      	beq.n	8009e1e <TIM_Base_SetConfig+0x9a>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	4a2a      	ldr	r2, [pc, #168]	; (8009ea4 <TIM_Base_SetConfig+0x120>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d00f      	beq.n	8009e1e <TIM_Base_SetConfig+0x9a>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	4a29      	ldr	r2, [pc, #164]	; (8009ea8 <TIM_Base_SetConfig+0x124>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d00b      	beq.n	8009e1e <TIM_Base_SetConfig+0x9a>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	4a28      	ldr	r2, [pc, #160]	; (8009eac <TIM_Base_SetConfig+0x128>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d007      	beq.n	8009e1e <TIM_Base_SetConfig+0x9a>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	4a27      	ldr	r2, [pc, #156]	; (8009eb0 <TIM_Base_SetConfig+0x12c>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d003      	beq.n	8009e1e <TIM_Base_SetConfig+0x9a>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	4a26      	ldr	r2, [pc, #152]	; (8009eb4 <TIM_Base_SetConfig+0x130>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d108      	bne.n	8009e30 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	68db      	ldr	r3, [r3, #12]
 8009e2a:	68fa      	ldr	r2, [r7, #12]
 8009e2c:	4313      	orrs	r3, r2
 8009e2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	695b      	ldr	r3, [r3, #20]
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	68fa      	ldr	r2, [r7, #12]
 8009e42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	689a      	ldr	r2, [r3, #8]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	681a      	ldr	r2, [r3, #0]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	4a10      	ldr	r2, [pc, #64]	; (8009e98 <TIM_Base_SetConfig+0x114>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d00f      	beq.n	8009e7c <TIM_Base_SetConfig+0xf8>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	4a12      	ldr	r2, [pc, #72]	; (8009ea8 <TIM_Base_SetConfig+0x124>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d00b      	beq.n	8009e7c <TIM_Base_SetConfig+0xf8>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	4a11      	ldr	r2, [pc, #68]	; (8009eac <TIM_Base_SetConfig+0x128>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d007      	beq.n	8009e7c <TIM_Base_SetConfig+0xf8>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	4a10      	ldr	r2, [pc, #64]	; (8009eb0 <TIM_Base_SetConfig+0x12c>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d003      	beq.n	8009e7c <TIM_Base_SetConfig+0xf8>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	4a0f      	ldr	r2, [pc, #60]	; (8009eb4 <TIM_Base_SetConfig+0x130>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d103      	bne.n	8009e84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	691a      	ldr	r2, [r3, #16]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2201      	movs	r2, #1
 8009e88:	615a      	str	r2, [r3, #20]
}
 8009e8a:	bf00      	nop
 8009e8c:	3714      	adds	r7, #20
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e94:	4770      	bx	lr
 8009e96:	bf00      	nop
 8009e98:	40012c00 	.word	0x40012c00
 8009e9c:	40000400 	.word	0x40000400
 8009ea0:	40000800 	.word	0x40000800
 8009ea4:	40000c00 	.word	0x40000c00
 8009ea8:	40013400 	.word	0x40013400
 8009eac:	40014000 	.word	0x40014000
 8009eb0:	40014400 	.word	0x40014400
 8009eb4:	40014800 	.word	0x40014800

08009eb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b083      	sub	sp, #12
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009ec0:	bf00      	nop
 8009ec2:	370c      	adds	r7, #12
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr

08009ecc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b083      	sub	sp, #12
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ed4:	bf00      	nop
 8009ed6:	370c      	adds	r7, #12
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ede:	4770      	bx	lr

08009ee0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b083      	sub	sp, #12
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009ee8:	bf00      	nop
 8009eea:	370c      	adds	r7, #12
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr

08009ef4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b082      	sub	sp, #8
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d101      	bne.n	8009f06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f02:	2301      	movs	r3, #1
 8009f04:	e042      	b.n	8009f8c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d106      	bne.n	8009f1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2200      	movs	r2, #0
 8009f14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f7f9 fd61 	bl	80039e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2224      	movs	r2, #36	; 0x24
 8009f22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f022 0201 	bic.w	r2, r2, #1
 8009f34:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d002      	beq.n	8009f44 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f000 fef8 	bl	800ad34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 fbf9 	bl	800a73c <UART_SetConfig>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d101      	bne.n	8009f54 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009f50:	2301      	movs	r3, #1
 8009f52:	e01b      	b.n	8009f8c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	685a      	ldr	r2, [r3, #4]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009f62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	689a      	ldr	r2, [r3, #8]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009f72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	681a      	ldr	r2, [r3, #0]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f042 0201 	orr.w	r2, r2, #1
 8009f82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f000 ff77 	bl	800ae78 <UART_CheckIdleState>
 8009f8a:	4603      	mov	r3, r0
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3708      	adds	r7, #8
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b08a      	sub	sp, #40	; 0x28
 8009f98:	af02      	add	r7, sp, #8
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	60b9      	str	r1, [r7, #8]
 8009f9e:	603b      	str	r3, [r7, #0]
 8009fa0:	4613      	mov	r3, r2
 8009fa2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009faa:	2b20      	cmp	r3, #32
 8009fac:	d17c      	bne.n	800a0a8 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d002      	beq.n	8009fba <HAL_UART_Transmit+0x26>
 8009fb4:	88fb      	ldrh	r3, [r7, #6]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d101      	bne.n	8009fbe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009fba:	2301      	movs	r3, #1
 8009fbc:	e075      	b.n	800a0aa <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	2221      	movs	r2, #33	; 0x21
 8009fca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009fce:	f7f9 ffd1 	bl	8003f74 <HAL_GetTick>
 8009fd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	88fa      	ldrh	r2, [r7, #6]
 8009fd8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	88fa      	ldrh	r2, [r7, #6]
 8009fe0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	689b      	ldr	r3, [r3, #8]
 8009fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fec:	d108      	bne.n	800a000 <HAL_UART_Transmit+0x6c>
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	691b      	ldr	r3, [r3, #16]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d104      	bne.n	800a000 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	61bb      	str	r3, [r7, #24]
 8009ffe:	e003      	b.n	800a008 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a004:	2300      	movs	r3, #0
 800a006:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a008:	e031      	b.n	800a06e <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	9300      	str	r3, [sp, #0]
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	2200      	movs	r2, #0
 800a012:	2180      	movs	r1, #128	; 0x80
 800a014:	68f8      	ldr	r0, [r7, #12]
 800a016:	f000 ffd9 	bl	800afcc <UART_WaitOnFlagUntilTimeout>
 800a01a:	4603      	mov	r3, r0
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d005      	beq.n	800a02c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2220      	movs	r2, #32
 800a024:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800a028:	2303      	movs	r3, #3
 800a02a:	e03e      	b.n	800a0aa <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 800a02c:	69fb      	ldr	r3, [r7, #28]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d10b      	bne.n	800a04a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a032:	69bb      	ldr	r3, [r7, #24]
 800a034:	881a      	ldrh	r2, [r3, #0]
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a03e:	b292      	uxth	r2, r2
 800a040:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a042:	69bb      	ldr	r3, [r7, #24]
 800a044:	3302      	adds	r3, #2
 800a046:	61bb      	str	r3, [r7, #24]
 800a048:	e008      	b.n	800a05c <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a04a:	69fb      	ldr	r3, [r7, #28]
 800a04c:	781a      	ldrb	r2, [r3, #0]
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	b292      	uxth	r2, r2
 800a054:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a056:	69fb      	ldr	r3, [r7, #28]
 800a058:	3301      	adds	r3, #1
 800a05a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a062:	b29b      	uxth	r3, r3
 800a064:	3b01      	subs	r3, #1
 800a066:	b29a      	uxth	r2, r3
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a074:	b29b      	uxth	r3, r3
 800a076:	2b00      	cmp	r3, #0
 800a078:	d1c7      	bne.n	800a00a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	9300      	str	r3, [sp, #0]
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	2200      	movs	r2, #0
 800a082:	2140      	movs	r1, #64	; 0x40
 800a084:	68f8      	ldr	r0, [r7, #12]
 800a086:	f000 ffa1 	bl	800afcc <UART_WaitOnFlagUntilTimeout>
 800a08a:	4603      	mov	r3, r0
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d005      	beq.n	800a09c <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2220      	movs	r2, #32
 800a094:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800a098:	2303      	movs	r3, #3
 800a09a:	e006      	b.n	800a0aa <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2220      	movs	r2, #32
 800a0a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	e000      	b.n	800a0aa <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 800a0a8:	2302      	movs	r3, #2
  }
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3720      	adds	r7, #32
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
	...

0800a0b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b0ba      	sub	sp, #232	; 0xe8
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	69db      	ldr	r3, [r3, #28]
 800a0c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	689b      	ldr	r3, [r3, #8]
 800a0d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a0da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a0de:	f640 030f 	movw	r3, #2063	; 0x80f
 800a0e2:	4013      	ands	r3, r2
 800a0e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a0e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d11b      	bne.n	800a128 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a0f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0f4:	f003 0320 	and.w	r3, r3, #32
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d015      	beq.n	800a128 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a0fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a100:	f003 0320 	and.w	r3, r3, #32
 800a104:	2b00      	cmp	r3, #0
 800a106:	d105      	bne.n	800a114 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a108:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a10c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a110:	2b00      	cmp	r3, #0
 800a112:	d009      	beq.n	800a128 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a118:	2b00      	cmp	r3, #0
 800a11a:	f000 82e3 	beq.w	800a6e4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	4798      	blx	r3
      }
      return;
 800a126:	e2dd      	b.n	800a6e4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800a128:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	f000 8123 	beq.w	800a378 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a132:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a136:	4b8d      	ldr	r3, [pc, #564]	; (800a36c <HAL_UART_IRQHandler+0x2b8>)
 800a138:	4013      	ands	r3, r2
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d106      	bne.n	800a14c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a13e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a142:	4b8b      	ldr	r3, [pc, #556]	; (800a370 <HAL_UART_IRQHandler+0x2bc>)
 800a144:	4013      	ands	r3, r2
 800a146:	2b00      	cmp	r3, #0
 800a148:	f000 8116 	beq.w	800a378 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a14c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a150:	f003 0301 	and.w	r3, r3, #1
 800a154:	2b00      	cmp	r3, #0
 800a156:	d011      	beq.n	800a17c <HAL_UART_IRQHandler+0xc8>
 800a158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a15c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a160:	2b00      	cmp	r3, #0
 800a162:	d00b      	beq.n	800a17c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	2201      	movs	r2, #1
 800a16a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a172:	f043 0201 	orr.w	r2, r3, #1
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a17c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a180:	f003 0302 	and.w	r3, r3, #2
 800a184:	2b00      	cmp	r3, #0
 800a186:	d011      	beq.n	800a1ac <HAL_UART_IRQHandler+0xf8>
 800a188:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a18c:	f003 0301 	and.w	r3, r3, #1
 800a190:	2b00      	cmp	r3, #0
 800a192:	d00b      	beq.n	800a1ac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	2202      	movs	r2, #2
 800a19a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1a2:	f043 0204 	orr.w	r2, r3, #4
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a1ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1b0:	f003 0304 	and.w	r3, r3, #4
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d011      	beq.n	800a1dc <HAL_UART_IRQHandler+0x128>
 800a1b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a1bc:	f003 0301 	and.w	r3, r3, #1
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d00b      	beq.n	800a1dc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	2204      	movs	r2, #4
 800a1ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1d2:	f043 0202 	orr.w	r2, r3, #2
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a1dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1e0:	f003 0308 	and.w	r3, r3, #8
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d017      	beq.n	800a218 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a1e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1ec:	f003 0320 	and.w	r3, r3, #32
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d105      	bne.n	800a200 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a1f4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a1f8:	4b5c      	ldr	r3, [pc, #368]	; (800a36c <HAL_UART_IRQHandler+0x2b8>)
 800a1fa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d00b      	beq.n	800a218 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	2208      	movs	r2, #8
 800a206:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a20e:	f043 0208 	orr.w	r2, r3, #8
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a21c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a220:	2b00      	cmp	r3, #0
 800a222:	d012      	beq.n	800a24a <HAL_UART_IRQHandler+0x196>
 800a224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a228:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d00c      	beq.n	800a24a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a238:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a240:	f043 0220 	orr.w	r2, r3, #32
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a250:	2b00      	cmp	r3, #0
 800a252:	f000 8249 	beq.w	800a6e8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a25a:	f003 0320 	and.w	r3, r3, #32
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d013      	beq.n	800a28a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a262:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a266:	f003 0320 	and.w	r3, r3, #32
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d105      	bne.n	800a27a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a26e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a276:	2b00      	cmp	r3, #0
 800a278:	d007      	beq.n	800a28a <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d003      	beq.n	800a28a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a290:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	689b      	ldr	r3, [r3, #8]
 800a29a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a29e:	2b40      	cmp	r3, #64	; 0x40
 800a2a0:	d005      	beq.n	800a2ae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a2a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a2a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d054      	beq.n	800a358 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f000 fef3 	bl	800b09a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	689b      	ldr	r3, [r3, #8]
 800a2ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2be:	2b40      	cmp	r3, #64	; 0x40
 800a2c0:	d146      	bne.n	800a350 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	3308      	adds	r3, #8
 800a2c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a2d0:	e853 3f00 	ldrex	r3, [r3]
 800a2d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a2d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a2dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	3308      	adds	r3, #8
 800a2ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a2ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a2f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a2fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a2fe:	e841 2300 	strex	r3, r2, [r1]
 800a302:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a306:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d1d9      	bne.n	800a2c2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a314:	2b00      	cmp	r3, #0
 800a316:	d017      	beq.n	800a348 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a31e:	4a15      	ldr	r2, [pc, #84]	; (800a374 <HAL_UART_IRQHandler+0x2c0>)
 800a320:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a328:	4618      	mov	r0, r3
 800a32a:	f7fa ff5b 	bl	80051e4 <HAL_DMA_Abort_IT>
 800a32e:	4603      	mov	r3, r0
 800a330:	2b00      	cmp	r3, #0
 800a332:	d019      	beq.n	800a368 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a33a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a33c:	687a      	ldr	r2, [r7, #4]
 800a33e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800a342:	4610      	mov	r0, r2
 800a344:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a346:	e00f      	b.n	800a368 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f000 f9e1 	bl	800a710 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a34e:	e00b      	b.n	800a368 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f000 f9dd 	bl	800a710 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a356:	e007      	b.n	800a368 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f000 f9d9 	bl	800a710 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2200      	movs	r2, #0
 800a362:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800a366:	e1bf      	b.n	800a6e8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a368:	bf00      	nop
    return;
 800a36a:	e1bd      	b.n	800a6e8 <HAL_UART_IRQHandler+0x634>
 800a36c:	10000001 	.word	0x10000001
 800a370:	04000120 	.word	0x04000120
 800a374:	0800b167 	.word	0x0800b167

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a37c:	2b01      	cmp	r3, #1
 800a37e:	f040 8153 	bne.w	800a628 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a386:	f003 0310 	and.w	r3, r3, #16
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	f000 814c 	beq.w	800a628 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a394:	f003 0310 	and.w	r3, r3, #16
 800a398:	2b00      	cmp	r3, #0
 800a39a:	f000 8145 	beq.w	800a628 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	2210      	movs	r2, #16
 800a3a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3b0:	2b40      	cmp	r3, #64	; 0x40
 800a3b2:	f040 80bb 	bne.w	800a52c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a3c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	f000 818f 	beq.w	800a6ec <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a3d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	f080 8187 	bcs.w	800a6ec <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a3e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f003 0320 	and.w	r3, r3, #32
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	f040 8087 	bne.w	800a50a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a404:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a408:	e853 3f00 	ldrex	r3, [r3]
 800a40c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a410:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a414:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a418:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	461a      	mov	r2, r3
 800a422:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a426:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a42a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a42e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a432:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a436:	e841 2300 	strex	r3, r2, [r1]
 800a43a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a43e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a442:	2b00      	cmp	r3, #0
 800a444:	d1da      	bne.n	800a3fc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	3308      	adds	r3, #8
 800a44c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a44e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a450:	e853 3f00 	ldrex	r3, [r3]
 800a454:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a456:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a458:	f023 0301 	bic.w	r3, r3, #1
 800a45c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	3308      	adds	r3, #8
 800a466:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a46a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a46e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a470:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a472:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a476:	e841 2300 	strex	r3, r2, [r1]
 800a47a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a47c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d1e1      	bne.n	800a446 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	3308      	adds	r3, #8
 800a488:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a48a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a48c:	e853 3f00 	ldrex	r3, [r3]
 800a490:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a492:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a494:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a498:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	3308      	adds	r3, #8
 800a4a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a4a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a4a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a4ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a4ae:	e841 2300 	strex	r3, r2, [r1]
 800a4b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a4b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d1e3      	bne.n	800a482 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2220      	movs	r2, #32
 800a4be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4d0:	e853 3f00 	ldrex	r3, [r3]
 800a4d4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a4d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4d8:	f023 0310 	bic.w	r3, r3, #16
 800a4dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	461a      	mov	r2, r3
 800a4e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a4ea:	65bb      	str	r3, [r7, #88]	; 0x58
 800a4ec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a4f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a4f2:	e841 2300 	strex	r3, r2, [r1]
 800a4f6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a4f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d1e4      	bne.n	800a4c8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a504:	4618      	mov	r0, r3
 800a506:	f7fa fe11 	bl	800512c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2202      	movs	r2, #2
 800a50e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	1ad3      	subs	r3, r2, r3
 800a520:	b29b      	uxth	r3, r3
 800a522:	4619      	mov	r1, r3
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f000 f8fd 	bl	800a724 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a52a:	e0df      	b.n	800a6ec <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a538:	b29b      	uxth	r3, r3
 800a53a:	1ad3      	subs	r3, r2, r3
 800a53c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a546:	b29b      	uxth	r3, r3
 800a548:	2b00      	cmp	r3, #0
 800a54a:	f000 80d1 	beq.w	800a6f0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800a54e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a552:	2b00      	cmp	r3, #0
 800a554:	f000 80cc 	beq.w	800a6f0 <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a560:	e853 3f00 	ldrex	r3, [r3]
 800a564:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a568:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a56c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	461a      	mov	r2, r3
 800a576:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a57a:	647b      	str	r3, [r7, #68]	; 0x44
 800a57c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a57e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a580:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a582:	e841 2300 	strex	r3, r2, [r1]
 800a586:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d1e4      	bne.n	800a558 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	3308      	adds	r3, #8
 800a594:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a598:	e853 3f00 	ldrex	r3, [r3]
 800a59c:	623b      	str	r3, [r7, #32]
   return(result);
 800a59e:	6a3b      	ldr	r3, [r7, #32]
 800a5a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a5a4:	f023 0301 	bic.w	r3, r3, #1
 800a5a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	3308      	adds	r3, #8
 800a5b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a5b6:	633a      	str	r2, [r7, #48]	; 0x30
 800a5b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a5bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5be:	e841 2300 	strex	r3, r2, [r1]
 800a5c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a5c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d1e1      	bne.n	800a58e <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2220      	movs	r2, #32
 800a5ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	e853 3f00 	ldrex	r3, [r3]
 800a5ea:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	f023 0310 	bic.w	r3, r3, #16
 800a5f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a600:	61fb      	str	r3, [r7, #28]
 800a602:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a604:	69b9      	ldr	r1, [r7, #24]
 800a606:	69fa      	ldr	r2, [r7, #28]
 800a608:	e841 2300 	strex	r3, r2, [r1]
 800a60c:	617b      	str	r3, [r7, #20]
   return(result);
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d1e4      	bne.n	800a5de <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2202      	movs	r2, #2
 800a618:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a61a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a61e:	4619      	mov	r1, r3
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f000 f87f 	bl	800a724 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a626:	e063      	b.n	800a6f0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a62c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a630:	2b00      	cmp	r3, #0
 800a632:	d00e      	beq.n	800a652 <HAL_UART_IRQHandler+0x59e>
 800a634:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a638:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d008      	beq.n	800a652 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a648:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f000 fdcc 	bl	800b1e8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a650:	e051      	b.n	800a6f6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d014      	beq.n	800a688 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a65e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a666:	2b00      	cmp	r3, #0
 800a668:	d105      	bne.n	800a676 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a66a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a66e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a672:	2b00      	cmp	r3, #0
 800a674:	d008      	beq.n	800a688 <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d03a      	beq.n	800a6f4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	4798      	blx	r3
    }
    return;
 800a686:	e035      	b.n	800a6f4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a68c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a690:	2b00      	cmp	r3, #0
 800a692:	d009      	beq.n	800a6a8 <HAL_UART_IRQHandler+0x5f4>
 800a694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d003      	beq.n	800a6a8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 fd76 	bl	800b192 <UART_EndTransmit_IT>
    return;
 800a6a6:	e026      	b.n	800a6f6 <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a6a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d009      	beq.n	800a6c8 <HAL_UART_IRQHandler+0x614>
 800a6b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d003      	beq.n	800a6c8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f000 fda5 	bl	800b210 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a6c6:	e016      	b.n	800a6f6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a6c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d010      	beq.n	800a6f6 <HAL_UART_IRQHandler+0x642>
 800a6d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	da0c      	bge.n	800a6f6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f000 fd8d 	bl	800b1fc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a6e2:	e008      	b.n	800a6f6 <HAL_UART_IRQHandler+0x642>
      return;
 800a6e4:	bf00      	nop
 800a6e6:	e006      	b.n	800a6f6 <HAL_UART_IRQHandler+0x642>
    return;
 800a6e8:	bf00      	nop
 800a6ea:	e004      	b.n	800a6f6 <HAL_UART_IRQHandler+0x642>
      return;
 800a6ec:	bf00      	nop
 800a6ee:	e002      	b.n	800a6f6 <HAL_UART_IRQHandler+0x642>
      return;
 800a6f0:	bf00      	nop
 800a6f2:	e000      	b.n	800a6f6 <HAL_UART_IRQHandler+0x642>
    return;
 800a6f4:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800a6f6:	37e8      	adds	r7, #232	; 0xe8
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b083      	sub	sp, #12
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a704:	bf00      	nop
 800a706:	370c      	adds	r7, #12
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr

0800a710 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a710:	b480      	push	{r7}
 800a712:	b083      	sub	sp, #12
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a718:	bf00      	nop
 800a71a:	370c      	adds	r7, #12
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr

0800a724 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a724:	b480      	push	{r7}
 800a726:	b083      	sub	sp, #12
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	460b      	mov	r3, r1
 800a72e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a730:	bf00      	nop
 800a732:	370c      	adds	r7, #12
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr

0800a73c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a73c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a740:	b08c      	sub	sp, #48	; 0x30
 800a742:	af00      	add	r7, sp, #0
 800a744:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a746:	2300      	movs	r3, #0
 800a748:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	689a      	ldr	r2, [r3, #8]
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	691b      	ldr	r3, [r3, #16]
 800a754:	431a      	orrs	r2, r3
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	695b      	ldr	r3, [r3, #20]
 800a75a:	431a      	orrs	r2, r3
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	69db      	ldr	r3, [r3, #28]
 800a760:	4313      	orrs	r3, r2
 800a762:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	681a      	ldr	r2, [r3, #0]
 800a76a:	4baa      	ldr	r3, [pc, #680]	; (800aa14 <UART_SetConfig+0x2d8>)
 800a76c:	4013      	ands	r3, r2
 800a76e:	697a      	ldr	r2, [r7, #20]
 800a770:	6812      	ldr	r2, [r2, #0]
 800a772:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a774:	430b      	orrs	r3, r1
 800a776:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	68da      	ldr	r2, [r3, #12]
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	430a      	orrs	r2, r1
 800a78c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	699b      	ldr	r3, [r3, #24]
 800a792:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4a9f      	ldr	r2, [pc, #636]	; (800aa18 <UART_SetConfig+0x2dc>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d004      	beq.n	800a7a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	6a1b      	ldr	r3, [r3, #32]
 800a7a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	689b      	ldr	r3, [r3, #8]
 800a7ae:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800a7b2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800a7b6:	697a      	ldr	r2, [r7, #20]
 800a7b8:	6812      	ldr	r2, [r2, #0]
 800a7ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a7bc:	430b      	orrs	r3, r1
 800a7be:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c6:	f023 010f 	bic.w	r1, r3, #15
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	430a      	orrs	r2, r1
 800a7d4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	4a90      	ldr	r2, [pc, #576]	; (800aa1c <UART_SetConfig+0x2e0>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d125      	bne.n	800a82c <UART_SetConfig+0xf0>
 800a7e0:	4b8f      	ldr	r3, [pc, #572]	; (800aa20 <UART_SetConfig+0x2e4>)
 800a7e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7e6:	f003 0303 	and.w	r3, r3, #3
 800a7ea:	2b03      	cmp	r3, #3
 800a7ec:	d81a      	bhi.n	800a824 <UART_SetConfig+0xe8>
 800a7ee:	a201      	add	r2, pc, #4	; (adr r2, 800a7f4 <UART_SetConfig+0xb8>)
 800a7f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7f4:	0800a805 	.word	0x0800a805
 800a7f8:	0800a815 	.word	0x0800a815
 800a7fc:	0800a80d 	.word	0x0800a80d
 800a800:	0800a81d 	.word	0x0800a81d
 800a804:	2301      	movs	r3, #1
 800a806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a80a:	e116      	b.n	800aa3a <UART_SetConfig+0x2fe>
 800a80c:	2302      	movs	r3, #2
 800a80e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a812:	e112      	b.n	800aa3a <UART_SetConfig+0x2fe>
 800a814:	2304      	movs	r3, #4
 800a816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a81a:	e10e      	b.n	800aa3a <UART_SetConfig+0x2fe>
 800a81c:	2308      	movs	r3, #8
 800a81e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a822:	e10a      	b.n	800aa3a <UART_SetConfig+0x2fe>
 800a824:	2310      	movs	r3, #16
 800a826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a82a:	e106      	b.n	800aa3a <UART_SetConfig+0x2fe>
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4a7c      	ldr	r2, [pc, #496]	; (800aa24 <UART_SetConfig+0x2e8>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d138      	bne.n	800a8a8 <UART_SetConfig+0x16c>
 800a836:	4b7a      	ldr	r3, [pc, #488]	; (800aa20 <UART_SetConfig+0x2e4>)
 800a838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a83c:	f003 030c 	and.w	r3, r3, #12
 800a840:	2b0c      	cmp	r3, #12
 800a842:	d82d      	bhi.n	800a8a0 <UART_SetConfig+0x164>
 800a844:	a201      	add	r2, pc, #4	; (adr r2, 800a84c <UART_SetConfig+0x110>)
 800a846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a84a:	bf00      	nop
 800a84c:	0800a881 	.word	0x0800a881
 800a850:	0800a8a1 	.word	0x0800a8a1
 800a854:	0800a8a1 	.word	0x0800a8a1
 800a858:	0800a8a1 	.word	0x0800a8a1
 800a85c:	0800a891 	.word	0x0800a891
 800a860:	0800a8a1 	.word	0x0800a8a1
 800a864:	0800a8a1 	.word	0x0800a8a1
 800a868:	0800a8a1 	.word	0x0800a8a1
 800a86c:	0800a889 	.word	0x0800a889
 800a870:	0800a8a1 	.word	0x0800a8a1
 800a874:	0800a8a1 	.word	0x0800a8a1
 800a878:	0800a8a1 	.word	0x0800a8a1
 800a87c:	0800a899 	.word	0x0800a899
 800a880:	2300      	movs	r3, #0
 800a882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a886:	e0d8      	b.n	800aa3a <UART_SetConfig+0x2fe>
 800a888:	2302      	movs	r3, #2
 800a88a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a88e:	e0d4      	b.n	800aa3a <UART_SetConfig+0x2fe>
 800a890:	2304      	movs	r3, #4
 800a892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a896:	e0d0      	b.n	800aa3a <UART_SetConfig+0x2fe>
 800a898:	2308      	movs	r3, #8
 800a89a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a89e:	e0cc      	b.n	800aa3a <UART_SetConfig+0x2fe>
 800a8a0:	2310      	movs	r3, #16
 800a8a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a8a6:	e0c8      	b.n	800aa3a <UART_SetConfig+0x2fe>
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4a5e      	ldr	r2, [pc, #376]	; (800aa28 <UART_SetConfig+0x2ec>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d125      	bne.n	800a8fe <UART_SetConfig+0x1c2>
 800a8b2:	4b5b      	ldr	r3, [pc, #364]	; (800aa20 <UART_SetConfig+0x2e4>)
 800a8b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a8bc:	2b30      	cmp	r3, #48	; 0x30
 800a8be:	d016      	beq.n	800a8ee <UART_SetConfig+0x1b2>
 800a8c0:	2b30      	cmp	r3, #48	; 0x30
 800a8c2:	d818      	bhi.n	800a8f6 <UART_SetConfig+0x1ba>
 800a8c4:	2b20      	cmp	r3, #32
 800a8c6:	d00a      	beq.n	800a8de <UART_SetConfig+0x1a2>
 800a8c8:	2b20      	cmp	r3, #32
 800a8ca:	d814      	bhi.n	800a8f6 <UART_SetConfig+0x1ba>
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d002      	beq.n	800a8d6 <UART_SetConfig+0x19a>
 800a8d0:	2b10      	cmp	r3, #16
 800a8d2:	d008      	beq.n	800a8e6 <UART_SetConfig+0x1aa>
 800a8d4:	e00f      	b.n	800a8f6 <UART_SetConfig+0x1ba>
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a8dc:	e0ad      	b.n	800aa3a <UART_SetConfig+0x2fe>
 800a8de:	2302      	movs	r3, #2
 800a8e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a8e4:	e0a9      	b.n	800aa3a <UART_SetConfig+0x2fe>
 800a8e6:	2304      	movs	r3, #4
 800a8e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a8ec:	e0a5      	b.n	800aa3a <UART_SetConfig+0x2fe>
 800a8ee:	2308      	movs	r3, #8
 800a8f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a8f4:	e0a1      	b.n	800aa3a <UART_SetConfig+0x2fe>
 800a8f6:	2310      	movs	r3, #16
 800a8f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a8fc:	e09d      	b.n	800aa3a <UART_SetConfig+0x2fe>
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	4a4a      	ldr	r2, [pc, #296]	; (800aa2c <UART_SetConfig+0x2f0>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d125      	bne.n	800a954 <UART_SetConfig+0x218>
 800a908:	4b45      	ldr	r3, [pc, #276]	; (800aa20 <UART_SetConfig+0x2e4>)
 800a90a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a90e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a912:	2bc0      	cmp	r3, #192	; 0xc0
 800a914:	d016      	beq.n	800a944 <UART_SetConfig+0x208>
 800a916:	2bc0      	cmp	r3, #192	; 0xc0
 800a918:	d818      	bhi.n	800a94c <UART_SetConfig+0x210>
 800a91a:	2b80      	cmp	r3, #128	; 0x80
 800a91c:	d00a      	beq.n	800a934 <UART_SetConfig+0x1f8>
 800a91e:	2b80      	cmp	r3, #128	; 0x80
 800a920:	d814      	bhi.n	800a94c <UART_SetConfig+0x210>
 800a922:	2b00      	cmp	r3, #0
 800a924:	d002      	beq.n	800a92c <UART_SetConfig+0x1f0>
 800a926:	2b40      	cmp	r3, #64	; 0x40
 800a928:	d008      	beq.n	800a93c <UART_SetConfig+0x200>
 800a92a:	e00f      	b.n	800a94c <UART_SetConfig+0x210>
 800a92c:	2300      	movs	r3, #0
 800a92e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a932:	e082      	b.n	800aa3a <UART_SetConfig+0x2fe>
 800a934:	2302      	movs	r3, #2
 800a936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a93a:	e07e      	b.n	800aa3a <UART_SetConfig+0x2fe>
 800a93c:	2304      	movs	r3, #4
 800a93e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a942:	e07a      	b.n	800aa3a <UART_SetConfig+0x2fe>
 800a944:	2308      	movs	r3, #8
 800a946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a94a:	e076      	b.n	800aa3a <UART_SetConfig+0x2fe>
 800a94c:	2310      	movs	r3, #16
 800a94e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a952:	e072      	b.n	800aa3a <UART_SetConfig+0x2fe>
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	4a35      	ldr	r2, [pc, #212]	; (800aa30 <UART_SetConfig+0x2f4>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d12a      	bne.n	800a9b4 <UART_SetConfig+0x278>
 800a95e:	4b30      	ldr	r3, [pc, #192]	; (800aa20 <UART_SetConfig+0x2e4>)
 800a960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a964:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a968:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a96c:	d01a      	beq.n	800a9a4 <UART_SetConfig+0x268>
 800a96e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a972:	d81b      	bhi.n	800a9ac <UART_SetConfig+0x270>
 800a974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a978:	d00c      	beq.n	800a994 <UART_SetConfig+0x258>
 800a97a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a97e:	d815      	bhi.n	800a9ac <UART_SetConfig+0x270>
 800a980:	2b00      	cmp	r3, #0
 800a982:	d003      	beq.n	800a98c <UART_SetConfig+0x250>
 800a984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a988:	d008      	beq.n	800a99c <UART_SetConfig+0x260>
 800a98a:	e00f      	b.n	800a9ac <UART_SetConfig+0x270>
 800a98c:	2300      	movs	r3, #0
 800a98e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a992:	e052      	b.n	800aa3a <UART_SetConfig+0x2fe>
 800a994:	2302      	movs	r3, #2
 800a996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a99a:	e04e      	b.n	800aa3a <UART_SetConfig+0x2fe>
 800a99c:	2304      	movs	r3, #4
 800a99e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a9a2:	e04a      	b.n	800aa3a <UART_SetConfig+0x2fe>
 800a9a4:	2308      	movs	r3, #8
 800a9a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a9aa:	e046      	b.n	800aa3a <UART_SetConfig+0x2fe>
 800a9ac:	2310      	movs	r3, #16
 800a9ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a9b2:	e042      	b.n	800aa3a <UART_SetConfig+0x2fe>
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	4a17      	ldr	r2, [pc, #92]	; (800aa18 <UART_SetConfig+0x2dc>)
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	d13a      	bne.n	800aa34 <UART_SetConfig+0x2f8>
 800a9be:	4b18      	ldr	r3, [pc, #96]	; (800aa20 <UART_SetConfig+0x2e4>)
 800a9c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a9c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a9cc:	d01a      	beq.n	800aa04 <UART_SetConfig+0x2c8>
 800a9ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a9d2:	d81b      	bhi.n	800aa0c <UART_SetConfig+0x2d0>
 800a9d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9d8:	d00c      	beq.n	800a9f4 <UART_SetConfig+0x2b8>
 800a9da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9de:	d815      	bhi.n	800aa0c <UART_SetConfig+0x2d0>
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d003      	beq.n	800a9ec <UART_SetConfig+0x2b0>
 800a9e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9e8:	d008      	beq.n	800a9fc <UART_SetConfig+0x2c0>
 800a9ea:	e00f      	b.n	800aa0c <UART_SetConfig+0x2d0>
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a9f2:	e022      	b.n	800aa3a <UART_SetConfig+0x2fe>
 800a9f4:	2302      	movs	r3, #2
 800a9f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a9fa:	e01e      	b.n	800aa3a <UART_SetConfig+0x2fe>
 800a9fc:	2304      	movs	r3, #4
 800a9fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa02:	e01a      	b.n	800aa3a <UART_SetConfig+0x2fe>
 800aa04:	2308      	movs	r3, #8
 800aa06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa0a:	e016      	b.n	800aa3a <UART_SetConfig+0x2fe>
 800aa0c:	2310      	movs	r3, #16
 800aa0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa12:	e012      	b.n	800aa3a <UART_SetConfig+0x2fe>
 800aa14:	cfff69f3 	.word	0xcfff69f3
 800aa18:	40008000 	.word	0x40008000
 800aa1c:	40013800 	.word	0x40013800
 800aa20:	40021000 	.word	0x40021000
 800aa24:	40004400 	.word	0x40004400
 800aa28:	40004800 	.word	0x40004800
 800aa2c:	40004c00 	.word	0x40004c00
 800aa30:	40005000 	.word	0x40005000
 800aa34:	2310      	movs	r3, #16
 800aa36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	4aae      	ldr	r2, [pc, #696]	; (800acf8 <UART_SetConfig+0x5bc>)
 800aa40:	4293      	cmp	r3, r2
 800aa42:	f040 8097 	bne.w	800ab74 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aa46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aa4a:	2b08      	cmp	r3, #8
 800aa4c:	d823      	bhi.n	800aa96 <UART_SetConfig+0x35a>
 800aa4e:	a201      	add	r2, pc, #4	; (adr r2, 800aa54 <UART_SetConfig+0x318>)
 800aa50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa54:	0800aa79 	.word	0x0800aa79
 800aa58:	0800aa97 	.word	0x0800aa97
 800aa5c:	0800aa81 	.word	0x0800aa81
 800aa60:	0800aa97 	.word	0x0800aa97
 800aa64:	0800aa87 	.word	0x0800aa87
 800aa68:	0800aa97 	.word	0x0800aa97
 800aa6c:	0800aa97 	.word	0x0800aa97
 800aa70:	0800aa97 	.word	0x0800aa97
 800aa74:	0800aa8f 	.word	0x0800aa8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa78:	f7fe f8a0 	bl	8008bbc <HAL_RCC_GetPCLK1Freq>
 800aa7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aa7e:	e010      	b.n	800aaa2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aa80:	4b9e      	ldr	r3, [pc, #632]	; (800acfc <UART_SetConfig+0x5c0>)
 800aa82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800aa84:	e00d      	b.n	800aaa2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aa86:	f7fe f801 	bl	8008a8c <HAL_RCC_GetSysClockFreq>
 800aa8a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aa8c:	e009      	b.n	800aaa2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800aa94:	e005      	b.n	800aaa2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800aa96:	2300      	movs	r3, #0
 800aa98:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800aaa0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aaa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	f000 8130 	beq.w	800ad0a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaae:	4a94      	ldr	r2, [pc, #592]	; (800ad00 <UART_SetConfig+0x5c4>)
 800aab0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aab4:	461a      	mov	r2, r3
 800aab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab8:	fbb3 f3f2 	udiv	r3, r3, r2
 800aabc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	685a      	ldr	r2, [r3, #4]
 800aac2:	4613      	mov	r3, r2
 800aac4:	005b      	lsls	r3, r3, #1
 800aac6:	4413      	add	r3, r2
 800aac8:	69ba      	ldr	r2, [r7, #24]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d305      	bcc.n	800aada <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	685b      	ldr	r3, [r3, #4]
 800aad2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aad4:	69ba      	ldr	r2, [r7, #24]
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d903      	bls.n	800aae2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800aada:	2301      	movs	r3, #1
 800aadc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800aae0:	e113      	b.n	800ad0a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae4:	2200      	movs	r2, #0
 800aae6:	60bb      	str	r3, [r7, #8]
 800aae8:	60fa      	str	r2, [r7, #12]
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaee:	4a84      	ldr	r2, [pc, #528]	; (800ad00 <UART_SetConfig+0x5c4>)
 800aaf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aaf4:	b29b      	uxth	r3, r3
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	603b      	str	r3, [r7, #0]
 800aafa:	607a      	str	r2, [r7, #4]
 800aafc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab00:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ab04:	f7f5 fdb8 	bl	8000678 <__aeabi_uldivmod>
 800ab08:	4602      	mov	r2, r0
 800ab0a:	460b      	mov	r3, r1
 800ab0c:	4610      	mov	r0, r2
 800ab0e:	4619      	mov	r1, r3
 800ab10:	f04f 0200 	mov.w	r2, #0
 800ab14:	f04f 0300 	mov.w	r3, #0
 800ab18:	020b      	lsls	r3, r1, #8
 800ab1a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ab1e:	0202      	lsls	r2, r0, #8
 800ab20:	6979      	ldr	r1, [r7, #20]
 800ab22:	6849      	ldr	r1, [r1, #4]
 800ab24:	0849      	lsrs	r1, r1, #1
 800ab26:	2000      	movs	r0, #0
 800ab28:	460c      	mov	r4, r1
 800ab2a:	4605      	mov	r5, r0
 800ab2c:	eb12 0804 	adds.w	r8, r2, r4
 800ab30:	eb43 0905 	adc.w	r9, r3, r5
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	469a      	mov	sl, r3
 800ab3c:	4693      	mov	fp, r2
 800ab3e:	4652      	mov	r2, sl
 800ab40:	465b      	mov	r3, fp
 800ab42:	4640      	mov	r0, r8
 800ab44:	4649      	mov	r1, r9
 800ab46:	f7f5 fd97 	bl	8000678 <__aeabi_uldivmod>
 800ab4a:	4602      	mov	r2, r0
 800ab4c:	460b      	mov	r3, r1
 800ab4e:	4613      	mov	r3, r2
 800ab50:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ab52:	6a3b      	ldr	r3, [r7, #32]
 800ab54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab58:	d308      	bcc.n	800ab6c <UART_SetConfig+0x430>
 800ab5a:	6a3b      	ldr	r3, [r7, #32]
 800ab5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab60:	d204      	bcs.n	800ab6c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	6a3a      	ldr	r2, [r7, #32]
 800ab68:	60da      	str	r2, [r3, #12]
 800ab6a:	e0ce      	b.n	800ad0a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ab72:	e0ca      	b.n	800ad0a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	69db      	ldr	r3, [r3, #28]
 800ab78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab7c:	d166      	bne.n	800ac4c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800ab7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ab82:	2b08      	cmp	r3, #8
 800ab84:	d827      	bhi.n	800abd6 <UART_SetConfig+0x49a>
 800ab86:	a201      	add	r2, pc, #4	; (adr r2, 800ab8c <UART_SetConfig+0x450>)
 800ab88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab8c:	0800abb1 	.word	0x0800abb1
 800ab90:	0800abb9 	.word	0x0800abb9
 800ab94:	0800abc1 	.word	0x0800abc1
 800ab98:	0800abd7 	.word	0x0800abd7
 800ab9c:	0800abc7 	.word	0x0800abc7
 800aba0:	0800abd7 	.word	0x0800abd7
 800aba4:	0800abd7 	.word	0x0800abd7
 800aba8:	0800abd7 	.word	0x0800abd7
 800abac:	0800abcf 	.word	0x0800abcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abb0:	f7fe f804 	bl	8008bbc <HAL_RCC_GetPCLK1Freq>
 800abb4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800abb6:	e014      	b.n	800abe2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800abb8:	f7fe f816 	bl	8008be8 <HAL_RCC_GetPCLK2Freq>
 800abbc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800abbe:	e010      	b.n	800abe2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800abc0:	4b4e      	ldr	r3, [pc, #312]	; (800acfc <UART_SetConfig+0x5c0>)
 800abc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800abc4:	e00d      	b.n	800abe2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800abc6:	f7fd ff61 	bl	8008a8c <HAL_RCC_GetSysClockFreq>
 800abca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800abcc:	e009      	b.n	800abe2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800abce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800abd2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800abd4:	e005      	b.n	800abe2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800abd6:	2300      	movs	r3, #0
 800abd8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800abda:	2301      	movs	r3, #1
 800abdc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800abe0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800abe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	f000 8090 	beq.w	800ad0a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abee:	4a44      	ldr	r2, [pc, #272]	; (800ad00 <UART_SetConfig+0x5c4>)
 800abf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800abf4:	461a      	mov	r2, r3
 800abf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf8:	fbb3 f3f2 	udiv	r3, r3, r2
 800abfc:	005a      	lsls	r2, r3, #1
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	685b      	ldr	r3, [r3, #4]
 800ac02:	085b      	lsrs	r3, r3, #1
 800ac04:	441a      	add	r2, r3
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac0e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac10:	6a3b      	ldr	r3, [r7, #32]
 800ac12:	2b0f      	cmp	r3, #15
 800ac14:	d916      	bls.n	800ac44 <UART_SetConfig+0x508>
 800ac16:	6a3b      	ldr	r3, [r7, #32]
 800ac18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac1c:	d212      	bcs.n	800ac44 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ac1e:	6a3b      	ldr	r3, [r7, #32]
 800ac20:	b29b      	uxth	r3, r3
 800ac22:	f023 030f 	bic.w	r3, r3, #15
 800ac26:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ac28:	6a3b      	ldr	r3, [r7, #32]
 800ac2a:	085b      	lsrs	r3, r3, #1
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	f003 0307 	and.w	r3, r3, #7
 800ac32:	b29a      	uxth	r2, r3
 800ac34:	8bfb      	ldrh	r3, [r7, #30]
 800ac36:	4313      	orrs	r3, r2
 800ac38:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	8bfa      	ldrh	r2, [r7, #30]
 800ac40:	60da      	str	r2, [r3, #12]
 800ac42:	e062      	b.n	800ad0a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800ac44:	2301      	movs	r3, #1
 800ac46:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ac4a:	e05e      	b.n	800ad0a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ac4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ac50:	2b08      	cmp	r3, #8
 800ac52:	d828      	bhi.n	800aca6 <UART_SetConfig+0x56a>
 800ac54:	a201      	add	r2, pc, #4	; (adr r2, 800ac5c <UART_SetConfig+0x520>)
 800ac56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac5a:	bf00      	nop
 800ac5c:	0800ac81 	.word	0x0800ac81
 800ac60:	0800ac89 	.word	0x0800ac89
 800ac64:	0800ac91 	.word	0x0800ac91
 800ac68:	0800aca7 	.word	0x0800aca7
 800ac6c:	0800ac97 	.word	0x0800ac97
 800ac70:	0800aca7 	.word	0x0800aca7
 800ac74:	0800aca7 	.word	0x0800aca7
 800ac78:	0800aca7 	.word	0x0800aca7
 800ac7c:	0800ac9f 	.word	0x0800ac9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac80:	f7fd ff9c 	bl	8008bbc <HAL_RCC_GetPCLK1Freq>
 800ac84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ac86:	e014      	b.n	800acb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac88:	f7fd ffae 	bl	8008be8 <HAL_RCC_GetPCLK2Freq>
 800ac8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ac8e:	e010      	b.n	800acb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ac90:	4b1a      	ldr	r3, [pc, #104]	; (800acfc <UART_SetConfig+0x5c0>)
 800ac92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ac94:	e00d      	b.n	800acb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac96:	f7fd fef9 	bl	8008a8c <HAL_RCC_GetSysClockFreq>
 800ac9a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ac9c:	e009      	b.n	800acb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aca2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800aca4:	e005      	b.n	800acb2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800aca6:	2300      	movs	r3, #0
 800aca8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800acaa:	2301      	movs	r3, #1
 800acac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800acb0:	bf00      	nop
    }

    if (pclk != 0U)
 800acb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d028      	beq.n	800ad0a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acbc:	4a10      	ldr	r2, [pc, #64]	; (800ad00 <UART_SetConfig+0x5c4>)
 800acbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acc2:	461a      	mov	r2, r3
 800acc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc6:	fbb3 f2f2 	udiv	r2, r3, r2
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	085b      	lsrs	r3, r3, #1
 800acd0:	441a      	add	r2, r3
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	685b      	ldr	r3, [r3, #4]
 800acd6:	fbb2 f3f3 	udiv	r3, r2, r3
 800acda:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800acdc:	6a3b      	ldr	r3, [r7, #32]
 800acde:	2b0f      	cmp	r3, #15
 800ace0:	d910      	bls.n	800ad04 <UART_SetConfig+0x5c8>
 800ace2:	6a3b      	ldr	r3, [r7, #32]
 800ace4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ace8:	d20c      	bcs.n	800ad04 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800acea:	6a3b      	ldr	r3, [r7, #32]
 800acec:	b29a      	uxth	r2, r3
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	60da      	str	r2, [r3, #12]
 800acf4:	e009      	b.n	800ad0a <UART_SetConfig+0x5ce>
 800acf6:	bf00      	nop
 800acf8:	40008000 	.word	0x40008000
 800acfc:	00f42400 	.word	0x00f42400
 800ad00:	0800bec8 	.word	0x0800bec8
      }
      else
      {
        ret = HAL_ERROR;
 800ad04:	2301      	movs	r3, #1
 800ad06:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	2201      	movs	r2, #1
 800ad0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	2201      	movs	r2, #1
 800ad16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	2200      	movs	r2, #0
 800ad24:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ad26:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3730      	adds	r7, #48	; 0x30
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ad34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b083      	sub	sp, #12
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad40:	f003 0308 	and.w	r3, r3, #8
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d00a      	beq.n	800ad5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	685b      	ldr	r3, [r3, #4]
 800ad4e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	430a      	orrs	r2, r1
 800ad5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad62:	f003 0301 	and.w	r3, r3, #1
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d00a      	beq.n	800ad80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	430a      	orrs	r2, r1
 800ad7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad84:	f003 0302 	and.w	r3, r3, #2
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d00a      	beq.n	800ada2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	430a      	orrs	r2, r1
 800ada0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ada6:	f003 0304 	and.w	r3, r3, #4
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d00a      	beq.n	800adc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	685b      	ldr	r3, [r3, #4]
 800adb4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	430a      	orrs	r2, r1
 800adc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adc8:	f003 0310 	and.w	r3, r3, #16
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d00a      	beq.n	800ade6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	689b      	ldr	r3, [r3, #8]
 800add6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	430a      	orrs	r2, r1
 800ade4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adea:	f003 0320 	and.w	r3, r3, #32
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d00a      	beq.n	800ae08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	689b      	ldr	r3, [r3, #8]
 800adf8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	430a      	orrs	r2, r1
 800ae06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d01a      	beq.n	800ae4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	430a      	orrs	r2, r1
 800ae28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae32:	d10a      	bne.n	800ae4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	430a      	orrs	r2, r1
 800ae48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d00a      	beq.n	800ae6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	685b      	ldr	r3, [r3, #4]
 800ae5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	430a      	orrs	r2, r1
 800ae6a:	605a      	str	r2, [r3, #4]
  }
}
 800ae6c:	bf00      	nop
 800ae6e:	370c      	adds	r7, #12
 800ae70:	46bd      	mov	sp, r7
 800ae72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae76:	4770      	bx	lr

0800ae78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b098      	sub	sp, #96	; 0x60
 800ae7c:	af02      	add	r7, sp, #8
 800ae7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2200      	movs	r2, #0
 800ae84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ae88:	f7f9 f874 	bl	8003f74 <HAL_GetTick>
 800ae8c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f003 0308 	and.w	r3, r3, #8
 800ae98:	2b08      	cmp	r3, #8
 800ae9a:	d12f      	bne.n	800aefc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aea0:	9300      	str	r3, [sp, #0]
 800aea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aea4:	2200      	movs	r2, #0
 800aea6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f000 f88e 	bl	800afcc <UART_WaitOnFlagUntilTimeout>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d022      	beq.n	800aefc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aebe:	e853 3f00 	ldrex	r3, [r3]
 800aec2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aec6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aeca:	653b      	str	r3, [r7, #80]	; 0x50
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	461a      	mov	r2, r3
 800aed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aed4:	647b      	str	r3, [r7, #68]	; 0x44
 800aed6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aed8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aeda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aedc:	e841 2300 	strex	r3, r2, [r1]
 800aee0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d1e6      	bne.n	800aeb6 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2220      	movs	r2, #32
 800aeec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2200      	movs	r2, #0
 800aef4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aef8:	2303      	movs	r3, #3
 800aefa:	e063      	b.n	800afc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f003 0304 	and.w	r3, r3, #4
 800af06:	2b04      	cmp	r3, #4
 800af08:	d149      	bne.n	800af9e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af0a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800af0e:	9300      	str	r3, [sp, #0]
 800af10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af12:	2200      	movs	r2, #0
 800af14:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f000 f857 	bl	800afcc <UART_WaitOnFlagUntilTimeout>
 800af1e:	4603      	mov	r3, r0
 800af20:	2b00      	cmp	r3, #0
 800af22:	d03c      	beq.n	800af9e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af2c:	e853 3f00 	ldrex	r3, [r3]
 800af30:	623b      	str	r3, [r7, #32]
   return(result);
 800af32:	6a3b      	ldr	r3, [r7, #32]
 800af34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800af38:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	461a      	mov	r2, r3
 800af40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af42:	633b      	str	r3, [r7, #48]	; 0x30
 800af44:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af4a:	e841 2300 	strex	r3, r2, [r1]
 800af4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800af50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af52:	2b00      	cmp	r3, #0
 800af54:	d1e6      	bne.n	800af24 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	3308      	adds	r3, #8
 800af5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	e853 3f00 	ldrex	r3, [r3]
 800af64:	60fb      	str	r3, [r7, #12]
   return(result);
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	f023 0301 	bic.w	r3, r3, #1
 800af6c:	64bb      	str	r3, [r7, #72]	; 0x48
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	3308      	adds	r3, #8
 800af74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af76:	61fa      	str	r2, [r7, #28]
 800af78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af7a:	69b9      	ldr	r1, [r7, #24]
 800af7c:	69fa      	ldr	r2, [r7, #28]
 800af7e:	e841 2300 	strex	r3, r2, [r1]
 800af82:	617b      	str	r3, [r7, #20]
   return(result);
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d1e5      	bne.n	800af56 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2220      	movs	r2, #32
 800af8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2200      	movs	r2, #0
 800af96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af9a:	2303      	movs	r3, #3
 800af9c:	e012      	b.n	800afc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2220      	movs	r2, #32
 800afa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2220      	movs	r2, #32
 800afaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2200      	movs	r2, #0
 800afb2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2200      	movs	r2, #0
 800afb8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2200      	movs	r2, #0
 800afbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800afc2:	2300      	movs	r3, #0
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3758      	adds	r7, #88	; 0x58
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b084      	sub	sp, #16
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	60f8      	str	r0, [r7, #12]
 800afd4:	60b9      	str	r1, [r7, #8]
 800afd6:	603b      	str	r3, [r7, #0]
 800afd8:	4613      	mov	r3, r2
 800afda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800afdc:	e049      	b.n	800b072 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afde:	69bb      	ldr	r3, [r7, #24]
 800afe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afe4:	d045      	beq.n	800b072 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afe6:	f7f8 ffc5 	bl	8003f74 <HAL_GetTick>
 800afea:	4602      	mov	r2, r0
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	1ad3      	subs	r3, r2, r3
 800aff0:	69ba      	ldr	r2, [r7, #24]
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d302      	bcc.n	800affc <UART_WaitOnFlagUntilTimeout+0x30>
 800aff6:	69bb      	ldr	r3, [r7, #24]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d101      	bne.n	800b000 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800affc:	2303      	movs	r3, #3
 800affe:	e048      	b.n	800b092 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f003 0304 	and.w	r3, r3, #4
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d031      	beq.n	800b072 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	69db      	ldr	r3, [r3, #28]
 800b014:	f003 0308 	and.w	r3, r3, #8
 800b018:	2b08      	cmp	r3, #8
 800b01a:	d110      	bne.n	800b03e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	2208      	movs	r2, #8
 800b022:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b024:	68f8      	ldr	r0, [r7, #12]
 800b026:	f000 f838 	bl	800b09a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	2208      	movs	r2, #8
 800b02e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2200      	movs	r2, #0
 800b036:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800b03a:	2301      	movs	r3, #1
 800b03c:	e029      	b.n	800b092 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	69db      	ldr	r3, [r3, #28]
 800b044:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b048:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b04c:	d111      	bne.n	800b072 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b056:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b058:	68f8      	ldr	r0, [r7, #12]
 800b05a:	f000 f81e 	bl	800b09a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2220      	movs	r2, #32
 800b062:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	2200      	movs	r2, #0
 800b06a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b06e:	2303      	movs	r3, #3
 800b070:	e00f      	b.n	800b092 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	69da      	ldr	r2, [r3, #28]
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	4013      	ands	r3, r2
 800b07c:	68ba      	ldr	r2, [r7, #8]
 800b07e:	429a      	cmp	r2, r3
 800b080:	bf0c      	ite	eq
 800b082:	2301      	moveq	r3, #1
 800b084:	2300      	movne	r3, #0
 800b086:	b2db      	uxtb	r3, r3
 800b088:	461a      	mov	r2, r3
 800b08a:	79fb      	ldrb	r3, [r7, #7]
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d0a6      	beq.n	800afde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b090:	2300      	movs	r3, #0
}
 800b092:	4618      	mov	r0, r3
 800b094:	3710      	adds	r7, #16
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}

0800b09a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b09a:	b480      	push	{r7}
 800b09c:	b095      	sub	sp, #84	; 0x54
 800b09e:	af00      	add	r7, sp, #0
 800b0a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0aa:	e853 3f00 	ldrex	r3, [r3]
 800b0ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b0b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	461a      	mov	r2, r3
 800b0be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0c0:	643b      	str	r3, [r7, #64]	; 0x40
 800b0c2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b0c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b0c8:	e841 2300 	strex	r3, r2, [r1]
 800b0cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d1e6      	bne.n	800b0a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	3308      	adds	r3, #8
 800b0da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0dc:	6a3b      	ldr	r3, [r7, #32]
 800b0de:	e853 3f00 	ldrex	r3, [r3]
 800b0e2:	61fb      	str	r3, [r7, #28]
   return(result);
 800b0e4:	69fb      	ldr	r3, [r7, #28]
 800b0e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b0ea:	f023 0301 	bic.w	r3, r3, #1
 800b0ee:	64bb      	str	r3, [r7, #72]	; 0x48
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	3308      	adds	r3, #8
 800b0f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b0f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b0fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b0fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b100:	e841 2300 	strex	r3, r2, [r1]
 800b104:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d1e3      	bne.n	800b0d4 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b110:	2b01      	cmp	r3, #1
 800b112:	d118      	bne.n	800b146 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	e853 3f00 	ldrex	r3, [r3]
 800b120:	60bb      	str	r3, [r7, #8]
   return(result);
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	f023 0310 	bic.w	r3, r3, #16
 800b128:	647b      	str	r3, [r7, #68]	; 0x44
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	461a      	mov	r2, r3
 800b130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b132:	61bb      	str	r3, [r7, #24]
 800b134:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b136:	6979      	ldr	r1, [r7, #20]
 800b138:	69ba      	ldr	r2, [r7, #24]
 800b13a:	e841 2300 	strex	r3, r2, [r1]
 800b13e:	613b      	str	r3, [r7, #16]
   return(result);
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d1e6      	bne.n	800b114 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2220      	movs	r2, #32
 800b14a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2200      	movs	r2, #0
 800b152:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2200      	movs	r2, #0
 800b158:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b15a:	bf00      	nop
 800b15c:	3754      	adds	r7, #84	; 0x54
 800b15e:	46bd      	mov	sp, r7
 800b160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b164:	4770      	bx	lr

0800b166 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b166:	b580      	push	{r7, lr}
 800b168:	b084      	sub	sp, #16
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b172:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	2200      	movs	r2, #0
 800b178:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	2200      	movs	r2, #0
 800b180:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b184:	68f8      	ldr	r0, [r7, #12]
 800b186:	f7ff fac3 	bl	800a710 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b18a:	bf00      	nop
 800b18c:	3710      	adds	r7, #16
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}

0800b192 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b192:	b580      	push	{r7, lr}
 800b194:	b088      	sub	sp, #32
 800b196:	af00      	add	r7, sp, #0
 800b198:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	e853 3f00 	ldrex	r3, [r3]
 800b1a6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1ae:	61fb      	str	r3, [r7, #28]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	461a      	mov	r2, r3
 800b1b6:	69fb      	ldr	r3, [r7, #28]
 800b1b8:	61bb      	str	r3, [r7, #24]
 800b1ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1bc:	6979      	ldr	r1, [r7, #20]
 800b1be:	69ba      	ldr	r2, [r7, #24]
 800b1c0:	e841 2300 	strex	r3, r2, [r1]
 800b1c4:	613b      	str	r3, [r7, #16]
   return(result);
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d1e6      	bne.n	800b19a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2220      	movs	r2, #32
 800b1d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f7ff fa8e 	bl	800a6fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b1e0:	bf00      	nop
 800b1e2:	3720      	adds	r7, #32
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}

0800b1e8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b083      	sub	sp, #12
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b1f0:	bf00      	nop
 800b1f2:	370c      	adds	r7, #12
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr

0800b1fc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b083      	sub	sp, #12
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b204:	bf00      	nop
 800b206:	370c      	adds	r7, #12
 800b208:	46bd      	mov	sp, r7
 800b20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20e:	4770      	bx	lr

0800b210 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b210:	b480      	push	{r7}
 800b212:	b083      	sub	sp, #12
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b218:	bf00      	nop
 800b21a:	370c      	adds	r7, #12
 800b21c:	46bd      	mov	sp, r7
 800b21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b222:	4770      	bx	lr

0800b224 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b224:	b480      	push	{r7}
 800b226:	b085      	sub	sp, #20
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b232:	2b01      	cmp	r3, #1
 800b234:	d101      	bne.n	800b23a <HAL_UARTEx_DisableFifoMode+0x16>
 800b236:	2302      	movs	r3, #2
 800b238:	e027      	b.n	800b28a <HAL_UARTEx_DisableFifoMode+0x66>
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2201      	movs	r2, #1
 800b23e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2224      	movs	r2, #36	; 0x24
 800b246:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	681a      	ldr	r2, [r3, #0]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f022 0201 	bic.w	r2, r2, #1
 800b260:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b268:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2200      	movs	r2, #0
 800b26e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	68fa      	ldr	r2, [r7, #12]
 800b276:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2220      	movs	r2, #32
 800b27c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2200      	movs	r2, #0
 800b284:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b288:	2300      	movs	r3, #0
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3714      	adds	r7, #20
 800b28e:	46bd      	mov	sp, r7
 800b290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b294:	4770      	bx	lr

0800b296 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b296:	b580      	push	{r7, lr}
 800b298:	b084      	sub	sp, #16
 800b29a:	af00      	add	r7, sp, #0
 800b29c:	6078      	str	r0, [r7, #4]
 800b29e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b2a6:	2b01      	cmp	r3, #1
 800b2a8:	d101      	bne.n	800b2ae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b2aa:	2302      	movs	r3, #2
 800b2ac:	e02d      	b.n	800b30a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2201      	movs	r2, #1
 800b2b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2224      	movs	r2, #36	; 0x24
 800b2ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	681a      	ldr	r2, [r3, #0]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f022 0201 	bic.w	r2, r2, #1
 800b2d4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	689b      	ldr	r3, [r3, #8]
 800b2dc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	683a      	ldr	r2, [r7, #0]
 800b2e6:	430a      	orrs	r2, r1
 800b2e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 f850 	bl	800b390 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	68fa      	ldr	r2, [r7, #12]
 800b2f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2220      	movs	r2, #32
 800b2fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2200      	movs	r2, #0
 800b304:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b308:	2300      	movs	r3, #0
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3710      	adds	r7, #16
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}

0800b312 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b312:	b580      	push	{r7, lr}
 800b314:	b084      	sub	sp, #16
 800b316:	af00      	add	r7, sp, #0
 800b318:	6078      	str	r0, [r7, #4]
 800b31a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b322:	2b01      	cmp	r3, #1
 800b324:	d101      	bne.n	800b32a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b326:	2302      	movs	r3, #2
 800b328:	e02d      	b.n	800b386 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2201      	movs	r2, #1
 800b32e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2224      	movs	r2, #36	; 0x24
 800b336:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	681a      	ldr	r2, [r3, #0]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f022 0201 	bic.w	r2, r2, #1
 800b350:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	689b      	ldr	r3, [r3, #8]
 800b358:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	683a      	ldr	r2, [r7, #0]
 800b362:	430a      	orrs	r2, r1
 800b364:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f000 f812 	bl	800b390 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	68fa      	ldr	r2, [r7, #12]
 800b372:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2220      	movs	r2, #32
 800b378:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2200      	movs	r2, #0
 800b380:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b384:	2300      	movs	r3, #0
}
 800b386:	4618      	mov	r0, r3
 800b388:	3710      	adds	r7, #16
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}
	...

0800b390 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b390:	b480      	push	{r7}
 800b392:	b085      	sub	sp, #20
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d108      	bne.n	800b3b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b3b0:	e031      	b.n	800b416 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b3b2:	2308      	movs	r3, #8
 800b3b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b3b6:	2308      	movs	r3, #8
 800b3b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	689b      	ldr	r3, [r3, #8]
 800b3c0:	0e5b      	lsrs	r3, r3, #25
 800b3c2:	b2db      	uxtb	r3, r3
 800b3c4:	f003 0307 	and.w	r3, r3, #7
 800b3c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	689b      	ldr	r3, [r3, #8]
 800b3d0:	0f5b      	lsrs	r3, r3, #29
 800b3d2:	b2db      	uxtb	r3, r3
 800b3d4:	f003 0307 	and.w	r3, r3, #7
 800b3d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b3da:	7bbb      	ldrb	r3, [r7, #14]
 800b3dc:	7b3a      	ldrb	r2, [r7, #12]
 800b3de:	4911      	ldr	r1, [pc, #68]	; (800b424 <UARTEx_SetNbDataToProcess+0x94>)
 800b3e0:	5c8a      	ldrb	r2, [r1, r2]
 800b3e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b3e6:	7b3a      	ldrb	r2, [r7, #12]
 800b3e8:	490f      	ldr	r1, [pc, #60]	; (800b428 <UARTEx_SetNbDataToProcess+0x98>)
 800b3ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b3ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3f0:	b29a      	uxth	r2, r3
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b3f8:	7bfb      	ldrb	r3, [r7, #15]
 800b3fa:	7b7a      	ldrb	r2, [r7, #13]
 800b3fc:	4909      	ldr	r1, [pc, #36]	; (800b424 <UARTEx_SetNbDataToProcess+0x94>)
 800b3fe:	5c8a      	ldrb	r2, [r1, r2]
 800b400:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b404:	7b7a      	ldrb	r2, [r7, #13]
 800b406:	4908      	ldr	r1, [pc, #32]	; (800b428 <UARTEx_SetNbDataToProcess+0x98>)
 800b408:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b40a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b40e:	b29a      	uxth	r2, r3
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b416:	bf00      	nop
 800b418:	3714      	adds	r7, #20
 800b41a:	46bd      	mov	sp, r7
 800b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b420:	4770      	bx	lr
 800b422:	bf00      	nop
 800b424:	0800bee0 	.word	0x0800bee0
 800b428:	0800bee8 	.word	0x0800bee8

0800b42c <sniprintf>:
 800b42c:	b40c      	push	{r2, r3}
 800b42e:	b530      	push	{r4, r5, lr}
 800b430:	4b17      	ldr	r3, [pc, #92]	; (800b490 <sniprintf+0x64>)
 800b432:	1e0c      	subs	r4, r1, #0
 800b434:	681d      	ldr	r5, [r3, #0]
 800b436:	b09d      	sub	sp, #116	; 0x74
 800b438:	da08      	bge.n	800b44c <sniprintf+0x20>
 800b43a:	238b      	movs	r3, #139	; 0x8b
 800b43c:	602b      	str	r3, [r5, #0]
 800b43e:	f04f 30ff 	mov.w	r0, #4294967295
 800b442:	b01d      	add	sp, #116	; 0x74
 800b444:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b448:	b002      	add	sp, #8
 800b44a:	4770      	bx	lr
 800b44c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b450:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b454:	bf14      	ite	ne
 800b456:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b45a:	4623      	moveq	r3, r4
 800b45c:	9304      	str	r3, [sp, #16]
 800b45e:	9307      	str	r3, [sp, #28]
 800b460:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b464:	9002      	str	r0, [sp, #8]
 800b466:	9006      	str	r0, [sp, #24]
 800b468:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b46c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b46e:	ab21      	add	r3, sp, #132	; 0x84
 800b470:	a902      	add	r1, sp, #8
 800b472:	4628      	mov	r0, r5
 800b474:	9301      	str	r3, [sp, #4]
 800b476:	f000 f9a1 	bl	800b7bc <_svfiprintf_r>
 800b47a:	1c43      	adds	r3, r0, #1
 800b47c:	bfbc      	itt	lt
 800b47e:	238b      	movlt	r3, #139	; 0x8b
 800b480:	602b      	strlt	r3, [r5, #0]
 800b482:	2c00      	cmp	r4, #0
 800b484:	d0dd      	beq.n	800b442 <sniprintf+0x16>
 800b486:	9b02      	ldr	r3, [sp, #8]
 800b488:	2200      	movs	r2, #0
 800b48a:	701a      	strb	r2, [r3, #0]
 800b48c:	e7d9      	b.n	800b442 <sniprintf+0x16>
 800b48e:	bf00      	nop
 800b490:	20000094 	.word	0x20000094

0800b494 <memset>:
 800b494:	4402      	add	r2, r0
 800b496:	4603      	mov	r3, r0
 800b498:	4293      	cmp	r3, r2
 800b49a:	d100      	bne.n	800b49e <memset+0xa>
 800b49c:	4770      	bx	lr
 800b49e:	f803 1b01 	strb.w	r1, [r3], #1
 800b4a2:	e7f9      	b.n	800b498 <memset+0x4>

0800b4a4 <__errno>:
 800b4a4:	4b01      	ldr	r3, [pc, #4]	; (800b4ac <__errno+0x8>)
 800b4a6:	6818      	ldr	r0, [r3, #0]
 800b4a8:	4770      	bx	lr
 800b4aa:	bf00      	nop
 800b4ac:	20000094 	.word	0x20000094

0800b4b0 <__libc_init_array>:
 800b4b0:	b570      	push	{r4, r5, r6, lr}
 800b4b2:	4d0d      	ldr	r5, [pc, #52]	; (800b4e8 <__libc_init_array+0x38>)
 800b4b4:	4c0d      	ldr	r4, [pc, #52]	; (800b4ec <__libc_init_array+0x3c>)
 800b4b6:	1b64      	subs	r4, r4, r5
 800b4b8:	10a4      	asrs	r4, r4, #2
 800b4ba:	2600      	movs	r6, #0
 800b4bc:	42a6      	cmp	r6, r4
 800b4be:	d109      	bne.n	800b4d4 <__libc_init_array+0x24>
 800b4c0:	4d0b      	ldr	r5, [pc, #44]	; (800b4f0 <__libc_init_array+0x40>)
 800b4c2:	4c0c      	ldr	r4, [pc, #48]	; (800b4f4 <__libc_init_array+0x44>)
 800b4c4:	f000 fca4 	bl	800be10 <_init>
 800b4c8:	1b64      	subs	r4, r4, r5
 800b4ca:	10a4      	asrs	r4, r4, #2
 800b4cc:	2600      	movs	r6, #0
 800b4ce:	42a6      	cmp	r6, r4
 800b4d0:	d105      	bne.n	800b4de <__libc_init_array+0x2e>
 800b4d2:	bd70      	pop	{r4, r5, r6, pc}
 800b4d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4d8:	4798      	blx	r3
 800b4da:	3601      	adds	r6, #1
 800b4dc:	e7ee      	b.n	800b4bc <__libc_init_array+0xc>
 800b4de:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4e2:	4798      	blx	r3
 800b4e4:	3601      	adds	r6, #1
 800b4e6:	e7f2      	b.n	800b4ce <__libc_init_array+0x1e>
 800b4e8:	0800bf2c 	.word	0x0800bf2c
 800b4ec:	0800bf2c 	.word	0x0800bf2c
 800b4f0:	0800bf2c 	.word	0x0800bf2c
 800b4f4:	0800bf30 	.word	0x0800bf30

0800b4f8 <__retarget_lock_acquire_recursive>:
 800b4f8:	4770      	bx	lr

0800b4fa <__retarget_lock_release_recursive>:
 800b4fa:	4770      	bx	lr

0800b4fc <memcpy>:
 800b4fc:	440a      	add	r2, r1
 800b4fe:	4291      	cmp	r1, r2
 800b500:	f100 33ff 	add.w	r3, r0, #4294967295
 800b504:	d100      	bne.n	800b508 <memcpy+0xc>
 800b506:	4770      	bx	lr
 800b508:	b510      	push	{r4, lr}
 800b50a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b50e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b512:	4291      	cmp	r1, r2
 800b514:	d1f9      	bne.n	800b50a <memcpy+0xe>
 800b516:	bd10      	pop	{r4, pc}

0800b518 <_free_r>:
 800b518:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b51a:	2900      	cmp	r1, #0
 800b51c:	d044      	beq.n	800b5a8 <_free_r+0x90>
 800b51e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b522:	9001      	str	r0, [sp, #4]
 800b524:	2b00      	cmp	r3, #0
 800b526:	f1a1 0404 	sub.w	r4, r1, #4
 800b52a:	bfb8      	it	lt
 800b52c:	18e4      	addlt	r4, r4, r3
 800b52e:	f000 f8df 	bl	800b6f0 <__malloc_lock>
 800b532:	4a1e      	ldr	r2, [pc, #120]	; (800b5ac <_free_r+0x94>)
 800b534:	9801      	ldr	r0, [sp, #4]
 800b536:	6813      	ldr	r3, [r2, #0]
 800b538:	b933      	cbnz	r3, 800b548 <_free_r+0x30>
 800b53a:	6063      	str	r3, [r4, #4]
 800b53c:	6014      	str	r4, [r2, #0]
 800b53e:	b003      	add	sp, #12
 800b540:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b544:	f000 b8da 	b.w	800b6fc <__malloc_unlock>
 800b548:	42a3      	cmp	r3, r4
 800b54a:	d908      	bls.n	800b55e <_free_r+0x46>
 800b54c:	6825      	ldr	r5, [r4, #0]
 800b54e:	1961      	adds	r1, r4, r5
 800b550:	428b      	cmp	r3, r1
 800b552:	bf01      	itttt	eq
 800b554:	6819      	ldreq	r1, [r3, #0]
 800b556:	685b      	ldreq	r3, [r3, #4]
 800b558:	1949      	addeq	r1, r1, r5
 800b55a:	6021      	streq	r1, [r4, #0]
 800b55c:	e7ed      	b.n	800b53a <_free_r+0x22>
 800b55e:	461a      	mov	r2, r3
 800b560:	685b      	ldr	r3, [r3, #4]
 800b562:	b10b      	cbz	r3, 800b568 <_free_r+0x50>
 800b564:	42a3      	cmp	r3, r4
 800b566:	d9fa      	bls.n	800b55e <_free_r+0x46>
 800b568:	6811      	ldr	r1, [r2, #0]
 800b56a:	1855      	adds	r5, r2, r1
 800b56c:	42a5      	cmp	r5, r4
 800b56e:	d10b      	bne.n	800b588 <_free_r+0x70>
 800b570:	6824      	ldr	r4, [r4, #0]
 800b572:	4421      	add	r1, r4
 800b574:	1854      	adds	r4, r2, r1
 800b576:	42a3      	cmp	r3, r4
 800b578:	6011      	str	r1, [r2, #0]
 800b57a:	d1e0      	bne.n	800b53e <_free_r+0x26>
 800b57c:	681c      	ldr	r4, [r3, #0]
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	6053      	str	r3, [r2, #4]
 800b582:	440c      	add	r4, r1
 800b584:	6014      	str	r4, [r2, #0]
 800b586:	e7da      	b.n	800b53e <_free_r+0x26>
 800b588:	d902      	bls.n	800b590 <_free_r+0x78>
 800b58a:	230c      	movs	r3, #12
 800b58c:	6003      	str	r3, [r0, #0]
 800b58e:	e7d6      	b.n	800b53e <_free_r+0x26>
 800b590:	6825      	ldr	r5, [r4, #0]
 800b592:	1961      	adds	r1, r4, r5
 800b594:	428b      	cmp	r3, r1
 800b596:	bf04      	itt	eq
 800b598:	6819      	ldreq	r1, [r3, #0]
 800b59a:	685b      	ldreq	r3, [r3, #4]
 800b59c:	6063      	str	r3, [r4, #4]
 800b59e:	bf04      	itt	eq
 800b5a0:	1949      	addeq	r1, r1, r5
 800b5a2:	6021      	streq	r1, [r4, #0]
 800b5a4:	6054      	str	r4, [r2, #4]
 800b5a6:	e7ca      	b.n	800b53e <_free_r+0x26>
 800b5a8:	b003      	add	sp, #12
 800b5aa:	bd30      	pop	{r4, r5, pc}
 800b5ac:	20001480 	.word	0x20001480

0800b5b0 <sbrk_aligned>:
 800b5b0:	b570      	push	{r4, r5, r6, lr}
 800b5b2:	4e0e      	ldr	r6, [pc, #56]	; (800b5ec <sbrk_aligned+0x3c>)
 800b5b4:	460c      	mov	r4, r1
 800b5b6:	6831      	ldr	r1, [r6, #0]
 800b5b8:	4605      	mov	r5, r0
 800b5ba:	b911      	cbnz	r1, 800b5c2 <sbrk_aligned+0x12>
 800b5bc:	f000 fba6 	bl	800bd0c <_sbrk_r>
 800b5c0:	6030      	str	r0, [r6, #0]
 800b5c2:	4621      	mov	r1, r4
 800b5c4:	4628      	mov	r0, r5
 800b5c6:	f000 fba1 	bl	800bd0c <_sbrk_r>
 800b5ca:	1c43      	adds	r3, r0, #1
 800b5cc:	d00a      	beq.n	800b5e4 <sbrk_aligned+0x34>
 800b5ce:	1cc4      	adds	r4, r0, #3
 800b5d0:	f024 0403 	bic.w	r4, r4, #3
 800b5d4:	42a0      	cmp	r0, r4
 800b5d6:	d007      	beq.n	800b5e8 <sbrk_aligned+0x38>
 800b5d8:	1a21      	subs	r1, r4, r0
 800b5da:	4628      	mov	r0, r5
 800b5dc:	f000 fb96 	bl	800bd0c <_sbrk_r>
 800b5e0:	3001      	adds	r0, #1
 800b5e2:	d101      	bne.n	800b5e8 <sbrk_aligned+0x38>
 800b5e4:	f04f 34ff 	mov.w	r4, #4294967295
 800b5e8:	4620      	mov	r0, r4
 800b5ea:	bd70      	pop	{r4, r5, r6, pc}
 800b5ec:	20001484 	.word	0x20001484

0800b5f0 <_malloc_r>:
 800b5f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5f4:	1ccd      	adds	r5, r1, #3
 800b5f6:	f025 0503 	bic.w	r5, r5, #3
 800b5fa:	3508      	adds	r5, #8
 800b5fc:	2d0c      	cmp	r5, #12
 800b5fe:	bf38      	it	cc
 800b600:	250c      	movcc	r5, #12
 800b602:	2d00      	cmp	r5, #0
 800b604:	4607      	mov	r7, r0
 800b606:	db01      	blt.n	800b60c <_malloc_r+0x1c>
 800b608:	42a9      	cmp	r1, r5
 800b60a:	d905      	bls.n	800b618 <_malloc_r+0x28>
 800b60c:	230c      	movs	r3, #12
 800b60e:	603b      	str	r3, [r7, #0]
 800b610:	2600      	movs	r6, #0
 800b612:	4630      	mov	r0, r6
 800b614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b618:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b6ec <_malloc_r+0xfc>
 800b61c:	f000 f868 	bl	800b6f0 <__malloc_lock>
 800b620:	f8d8 3000 	ldr.w	r3, [r8]
 800b624:	461c      	mov	r4, r3
 800b626:	bb5c      	cbnz	r4, 800b680 <_malloc_r+0x90>
 800b628:	4629      	mov	r1, r5
 800b62a:	4638      	mov	r0, r7
 800b62c:	f7ff ffc0 	bl	800b5b0 <sbrk_aligned>
 800b630:	1c43      	adds	r3, r0, #1
 800b632:	4604      	mov	r4, r0
 800b634:	d155      	bne.n	800b6e2 <_malloc_r+0xf2>
 800b636:	f8d8 4000 	ldr.w	r4, [r8]
 800b63a:	4626      	mov	r6, r4
 800b63c:	2e00      	cmp	r6, #0
 800b63e:	d145      	bne.n	800b6cc <_malloc_r+0xdc>
 800b640:	2c00      	cmp	r4, #0
 800b642:	d048      	beq.n	800b6d6 <_malloc_r+0xe6>
 800b644:	6823      	ldr	r3, [r4, #0]
 800b646:	4631      	mov	r1, r6
 800b648:	4638      	mov	r0, r7
 800b64a:	eb04 0903 	add.w	r9, r4, r3
 800b64e:	f000 fb5d 	bl	800bd0c <_sbrk_r>
 800b652:	4581      	cmp	r9, r0
 800b654:	d13f      	bne.n	800b6d6 <_malloc_r+0xe6>
 800b656:	6821      	ldr	r1, [r4, #0]
 800b658:	1a6d      	subs	r5, r5, r1
 800b65a:	4629      	mov	r1, r5
 800b65c:	4638      	mov	r0, r7
 800b65e:	f7ff ffa7 	bl	800b5b0 <sbrk_aligned>
 800b662:	3001      	adds	r0, #1
 800b664:	d037      	beq.n	800b6d6 <_malloc_r+0xe6>
 800b666:	6823      	ldr	r3, [r4, #0]
 800b668:	442b      	add	r3, r5
 800b66a:	6023      	str	r3, [r4, #0]
 800b66c:	f8d8 3000 	ldr.w	r3, [r8]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d038      	beq.n	800b6e6 <_malloc_r+0xf6>
 800b674:	685a      	ldr	r2, [r3, #4]
 800b676:	42a2      	cmp	r2, r4
 800b678:	d12b      	bne.n	800b6d2 <_malloc_r+0xe2>
 800b67a:	2200      	movs	r2, #0
 800b67c:	605a      	str	r2, [r3, #4]
 800b67e:	e00f      	b.n	800b6a0 <_malloc_r+0xb0>
 800b680:	6822      	ldr	r2, [r4, #0]
 800b682:	1b52      	subs	r2, r2, r5
 800b684:	d41f      	bmi.n	800b6c6 <_malloc_r+0xd6>
 800b686:	2a0b      	cmp	r2, #11
 800b688:	d917      	bls.n	800b6ba <_malloc_r+0xca>
 800b68a:	1961      	adds	r1, r4, r5
 800b68c:	42a3      	cmp	r3, r4
 800b68e:	6025      	str	r5, [r4, #0]
 800b690:	bf18      	it	ne
 800b692:	6059      	strne	r1, [r3, #4]
 800b694:	6863      	ldr	r3, [r4, #4]
 800b696:	bf08      	it	eq
 800b698:	f8c8 1000 	streq.w	r1, [r8]
 800b69c:	5162      	str	r2, [r4, r5]
 800b69e:	604b      	str	r3, [r1, #4]
 800b6a0:	4638      	mov	r0, r7
 800b6a2:	f104 060b 	add.w	r6, r4, #11
 800b6a6:	f000 f829 	bl	800b6fc <__malloc_unlock>
 800b6aa:	f026 0607 	bic.w	r6, r6, #7
 800b6ae:	1d23      	adds	r3, r4, #4
 800b6b0:	1af2      	subs	r2, r6, r3
 800b6b2:	d0ae      	beq.n	800b612 <_malloc_r+0x22>
 800b6b4:	1b9b      	subs	r3, r3, r6
 800b6b6:	50a3      	str	r3, [r4, r2]
 800b6b8:	e7ab      	b.n	800b612 <_malloc_r+0x22>
 800b6ba:	42a3      	cmp	r3, r4
 800b6bc:	6862      	ldr	r2, [r4, #4]
 800b6be:	d1dd      	bne.n	800b67c <_malloc_r+0x8c>
 800b6c0:	f8c8 2000 	str.w	r2, [r8]
 800b6c4:	e7ec      	b.n	800b6a0 <_malloc_r+0xb0>
 800b6c6:	4623      	mov	r3, r4
 800b6c8:	6864      	ldr	r4, [r4, #4]
 800b6ca:	e7ac      	b.n	800b626 <_malloc_r+0x36>
 800b6cc:	4634      	mov	r4, r6
 800b6ce:	6876      	ldr	r6, [r6, #4]
 800b6d0:	e7b4      	b.n	800b63c <_malloc_r+0x4c>
 800b6d2:	4613      	mov	r3, r2
 800b6d4:	e7cc      	b.n	800b670 <_malloc_r+0x80>
 800b6d6:	230c      	movs	r3, #12
 800b6d8:	603b      	str	r3, [r7, #0]
 800b6da:	4638      	mov	r0, r7
 800b6dc:	f000 f80e 	bl	800b6fc <__malloc_unlock>
 800b6e0:	e797      	b.n	800b612 <_malloc_r+0x22>
 800b6e2:	6025      	str	r5, [r4, #0]
 800b6e4:	e7dc      	b.n	800b6a0 <_malloc_r+0xb0>
 800b6e6:	605b      	str	r3, [r3, #4]
 800b6e8:	deff      	udf	#255	; 0xff
 800b6ea:	bf00      	nop
 800b6ec:	20001480 	.word	0x20001480

0800b6f0 <__malloc_lock>:
 800b6f0:	4801      	ldr	r0, [pc, #4]	; (800b6f8 <__malloc_lock+0x8>)
 800b6f2:	f7ff bf01 	b.w	800b4f8 <__retarget_lock_acquire_recursive>
 800b6f6:	bf00      	nop
 800b6f8:	2000147c 	.word	0x2000147c

0800b6fc <__malloc_unlock>:
 800b6fc:	4801      	ldr	r0, [pc, #4]	; (800b704 <__malloc_unlock+0x8>)
 800b6fe:	f7ff befc 	b.w	800b4fa <__retarget_lock_release_recursive>
 800b702:	bf00      	nop
 800b704:	2000147c 	.word	0x2000147c

0800b708 <__ssputs_r>:
 800b708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b70c:	688e      	ldr	r6, [r1, #8]
 800b70e:	461f      	mov	r7, r3
 800b710:	42be      	cmp	r6, r7
 800b712:	680b      	ldr	r3, [r1, #0]
 800b714:	4682      	mov	sl, r0
 800b716:	460c      	mov	r4, r1
 800b718:	4690      	mov	r8, r2
 800b71a:	d82c      	bhi.n	800b776 <__ssputs_r+0x6e>
 800b71c:	898a      	ldrh	r2, [r1, #12]
 800b71e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b722:	d026      	beq.n	800b772 <__ssputs_r+0x6a>
 800b724:	6965      	ldr	r5, [r4, #20]
 800b726:	6909      	ldr	r1, [r1, #16]
 800b728:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b72c:	eba3 0901 	sub.w	r9, r3, r1
 800b730:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b734:	1c7b      	adds	r3, r7, #1
 800b736:	444b      	add	r3, r9
 800b738:	106d      	asrs	r5, r5, #1
 800b73a:	429d      	cmp	r5, r3
 800b73c:	bf38      	it	cc
 800b73e:	461d      	movcc	r5, r3
 800b740:	0553      	lsls	r3, r2, #21
 800b742:	d527      	bpl.n	800b794 <__ssputs_r+0x8c>
 800b744:	4629      	mov	r1, r5
 800b746:	f7ff ff53 	bl	800b5f0 <_malloc_r>
 800b74a:	4606      	mov	r6, r0
 800b74c:	b360      	cbz	r0, 800b7a8 <__ssputs_r+0xa0>
 800b74e:	6921      	ldr	r1, [r4, #16]
 800b750:	464a      	mov	r2, r9
 800b752:	f7ff fed3 	bl	800b4fc <memcpy>
 800b756:	89a3      	ldrh	r3, [r4, #12]
 800b758:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b75c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b760:	81a3      	strh	r3, [r4, #12]
 800b762:	6126      	str	r6, [r4, #16]
 800b764:	6165      	str	r5, [r4, #20]
 800b766:	444e      	add	r6, r9
 800b768:	eba5 0509 	sub.w	r5, r5, r9
 800b76c:	6026      	str	r6, [r4, #0]
 800b76e:	60a5      	str	r5, [r4, #8]
 800b770:	463e      	mov	r6, r7
 800b772:	42be      	cmp	r6, r7
 800b774:	d900      	bls.n	800b778 <__ssputs_r+0x70>
 800b776:	463e      	mov	r6, r7
 800b778:	6820      	ldr	r0, [r4, #0]
 800b77a:	4632      	mov	r2, r6
 800b77c:	4641      	mov	r1, r8
 800b77e:	f000 faab 	bl	800bcd8 <memmove>
 800b782:	68a3      	ldr	r3, [r4, #8]
 800b784:	1b9b      	subs	r3, r3, r6
 800b786:	60a3      	str	r3, [r4, #8]
 800b788:	6823      	ldr	r3, [r4, #0]
 800b78a:	4433      	add	r3, r6
 800b78c:	6023      	str	r3, [r4, #0]
 800b78e:	2000      	movs	r0, #0
 800b790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b794:	462a      	mov	r2, r5
 800b796:	f000 fac9 	bl	800bd2c <_realloc_r>
 800b79a:	4606      	mov	r6, r0
 800b79c:	2800      	cmp	r0, #0
 800b79e:	d1e0      	bne.n	800b762 <__ssputs_r+0x5a>
 800b7a0:	6921      	ldr	r1, [r4, #16]
 800b7a2:	4650      	mov	r0, sl
 800b7a4:	f7ff feb8 	bl	800b518 <_free_r>
 800b7a8:	230c      	movs	r3, #12
 800b7aa:	f8ca 3000 	str.w	r3, [sl]
 800b7ae:	89a3      	ldrh	r3, [r4, #12]
 800b7b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7b4:	81a3      	strh	r3, [r4, #12]
 800b7b6:	f04f 30ff 	mov.w	r0, #4294967295
 800b7ba:	e7e9      	b.n	800b790 <__ssputs_r+0x88>

0800b7bc <_svfiprintf_r>:
 800b7bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7c0:	4698      	mov	r8, r3
 800b7c2:	898b      	ldrh	r3, [r1, #12]
 800b7c4:	061b      	lsls	r3, r3, #24
 800b7c6:	b09d      	sub	sp, #116	; 0x74
 800b7c8:	4607      	mov	r7, r0
 800b7ca:	460d      	mov	r5, r1
 800b7cc:	4614      	mov	r4, r2
 800b7ce:	d50e      	bpl.n	800b7ee <_svfiprintf_r+0x32>
 800b7d0:	690b      	ldr	r3, [r1, #16]
 800b7d2:	b963      	cbnz	r3, 800b7ee <_svfiprintf_r+0x32>
 800b7d4:	2140      	movs	r1, #64	; 0x40
 800b7d6:	f7ff ff0b 	bl	800b5f0 <_malloc_r>
 800b7da:	6028      	str	r0, [r5, #0]
 800b7dc:	6128      	str	r0, [r5, #16]
 800b7de:	b920      	cbnz	r0, 800b7ea <_svfiprintf_r+0x2e>
 800b7e0:	230c      	movs	r3, #12
 800b7e2:	603b      	str	r3, [r7, #0]
 800b7e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7e8:	e0d0      	b.n	800b98c <_svfiprintf_r+0x1d0>
 800b7ea:	2340      	movs	r3, #64	; 0x40
 800b7ec:	616b      	str	r3, [r5, #20]
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	9309      	str	r3, [sp, #36]	; 0x24
 800b7f2:	2320      	movs	r3, #32
 800b7f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b7f8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7fc:	2330      	movs	r3, #48	; 0x30
 800b7fe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b9a4 <_svfiprintf_r+0x1e8>
 800b802:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b806:	f04f 0901 	mov.w	r9, #1
 800b80a:	4623      	mov	r3, r4
 800b80c:	469a      	mov	sl, r3
 800b80e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b812:	b10a      	cbz	r2, 800b818 <_svfiprintf_r+0x5c>
 800b814:	2a25      	cmp	r2, #37	; 0x25
 800b816:	d1f9      	bne.n	800b80c <_svfiprintf_r+0x50>
 800b818:	ebba 0b04 	subs.w	fp, sl, r4
 800b81c:	d00b      	beq.n	800b836 <_svfiprintf_r+0x7a>
 800b81e:	465b      	mov	r3, fp
 800b820:	4622      	mov	r2, r4
 800b822:	4629      	mov	r1, r5
 800b824:	4638      	mov	r0, r7
 800b826:	f7ff ff6f 	bl	800b708 <__ssputs_r>
 800b82a:	3001      	adds	r0, #1
 800b82c:	f000 80a9 	beq.w	800b982 <_svfiprintf_r+0x1c6>
 800b830:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b832:	445a      	add	r2, fp
 800b834:	9209      	str	r2, [sp, #36]	; 0x24
 800b836:	f89a 3000 	ldrb.w	r3, [sl]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	f000 80a1 	beq.w	800b982 <_svfiprintf_r+0x1c6>
 800b840:	2300      	movs	r3, #0
 800b842:	f04f 32ff 	mov.w	r2, #4294967295
 800b846:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b84a:	f10a 0a01 	add.w	sl, sl, #1
 800b84e:	9304      	str	r3, [sp, #16]
 800b850:	9307      	str	r3, [sp, #28]
 800b852:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b856:	931a      	str	r3, [sp, #104]	; 0x68
 800b858:	4654      	mov	r4, sl
 800b85a:	2205      	movs	r2, #5
 800b85c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b860:	4850      	ldr	r0, [pc, #320]	; (800b9a4 <_svfiprintf_r+0x1e8>)
 800b862:	f7f4 fcd5 	bl	8000210 <memchr>
 800b866:	9a04      	ldr	r2, [sp, #16]
 800b868:	b9d8      	cbnz	r0, 800b8a2 <_svfiprintf_r+0xe6>
 800b86a:	06d0      	lsls	r0, r2, #27
 800b86c:	bf44      	itt	mi
 800b86e:	2320      	movmi	r3, #32
 800b870:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b874:	0711      	lsls	r1, r2, #28
 800b876:	bf44      	itt	mi
 800b878:	232b      	movmi	r3, #43	; 0x2b
 800b87a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b87e:	f89a 3000 	ldrb.w	r3, [sl]
 800b882:	2b2a      	cmp	r3, #42	; 0x2a
 800b884:	d015      	beq.n	800b8b2 <_svfiprintf_r+0xf6>
 800b886:	9a07      	ldr	r2, [sp, #28]
 800b888:	4654      	mov	r4, sl
 800b88a:	2000      	movs	r0, #0
 800b88c:	f04f 0c0a 	mov.w	ip, #10
 800b890:	4621      	mov	r1, r4
 800b892:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b896:	3b30      	subs	r3, #48	; 0x30
 800b898:	2b09      	cmp	r3, #9
 800b89a:	d94d      	bls.n	800b938 <_svfiprintf_r+0x17c>
 800b89c:	b1b0      	cbz	r0, 800b8cc <_svfiprintf_r+0x110>
 800b89e:	9207      	str	r2, [sp, #28]
 800b8a0:	e014      	b.n	800b8cc <_svfiprintf_r+0x110>
 800b8a2:	eba0 0308 	sub.w	r3, r0, r8
 800b8a6:	fa09 f303 	lsl.w	r3, r9, r3
 800b8aa:	4313      	orrs	r3, r2
 800b8ac:	9304      	str	r3, [sp, #16]
 800b8ae:	46a2      	mov	sl, r4
 800b8b0:	e7d2      	b.n	800b858 <_svfiprintf_r+0x9c>
 800b8b2:	9b03      	ldr	r3, [sp, #12]
 800b8b4:	1d19      	adds	r1, r3, #4
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	9103      	str	r1, [sp, #12]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	bfbb      	ittet	lt
 800b8be:	425b      	neglt	r3, r3
 800b8c0:	f042 0202 	orrlt.w	r2, r2, #2
 800b8c4:	9307      	strge	r3, [sp, #28]
 800b8c6:	9307      	strlt	r3, [sp, #28]
 800b8c8:	bfb8      	it	lt
 800b8ca:	9204      	strlt	r2, [sp, #16]
 800b8cc:	7823      	ldrb	r3, [r4, #0]
 800b8ce:	2b2e      	cmp	r3, #46	; 0x2e
 800b8d0:	d10c      	bne.n	800b8ec <_svfiprintf_r+0x130>
 800b8d2:	7863      	ldrb	r3, [r4, #1]
 800b8d4:	2b2a      	cmp	r3, #42	; 0x2a
 800b8d6:	d134      	bne.n	800b942 <_svfiprintf_r+0x186>
 800b8d8:	9b03      	ldr	r3, [sp, #12]
 800b8da:	1d1a      	adds	r2, r3, #4
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	9203      	str	r2, [sp, #12]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	bfb8      	it	lt
 800b8e4:	f04f 33ff 	movlt.w	r3, #4294967295
 800b8e8:	3402      	adds	r4, #2
 800b8ea:	9305      	str	r3, [sp, #20]
 800b8ec:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b9b4 <_svfiprintf_r+0x1f8>
 800b8f0:	7821      	ldrb	r1, [r4, #0]
 800b8f2:	2203      	movs	r2, #3
 800b8f4:	4650      	mov	r0, sl
 800b8f6:	f7f4 fc8b 	bl	8000210 <memchr>
 800b8fa:	b138      	cbz	r0, 800b90c <_svfiprintf_r+0x150>
 800b8fc:	9b04      	ldr	r3, [sp, #16]
 800b8fe:	eba0 000a 	sub.w	r0, r0, sl
 800b902:	2240      	movs	r2, #64	; 0x40
 800b904:	4082      	lsls	r2, r0
 800b906:	4313      	orrs	r3, r2
 800b908:	3401      	adds	r4, #1
 800b90a:	9304      	str	r3, [sp, #16]
 800b90c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b910:	4825      	ldr	r0, [pc, #148]	; (800b9a8 <_svfiprintf_r+0x1ec>)
 800b912:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b916:	2206      	movs	r2, #6
 800b918:	f7f4 fc7a 	bl	8000210 <memchr>
 800b91c:	2800      	cmp	r0, #0
 800b91e:	d038      	beq.n	800b992 <_svfiprintf_r+0x1d6>
 800b920:	4b22      	ldr	r3, [pc, #136]	; (800b9ac <_svfiprintf_r+0x1f0>)
 800b922:	bb1b      	cbnz	r3, 800b96c <_svfiprintf_r+0x1b0>
 800b924:	9b03      	ldr	r3, [sp, #12]
 800b926:	3307      	adds	r3, #7
 800b928:	f023 0307 	bic.w	r3, r3, #7
 800b92c:	3308      	adds	r3, #8
 800b92e:	9303      	str	r3, [sp, #12]
 800b930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b932:	4433      	add	r3, r6
 800b934:	9309      	str	r3, [sp, #36]	; 0x24
 800b936:	e768      	b.n	800b80a <_svfiprintf_r+0x4e>
 800b938:	fb0c 3202 	mla	r2, ip, r2, r3
 800b93c:	460c      	mov	r4, r1
 800b93e:	2001      	movs	r0, #1
 800b940:	e7a6      	b.n	800b890 <_svfiprintf_r+0xd4>
 800b942:	2300      	movs	r3, #0
 800b944:	3401      	adds	r4, #1
 800b946:	9305      	str	r3, [sp, #20]
 800b948:	4619      	mov	r1, r3
 800b94a:	f04f 0c0a 	mov.w	ip, #10
 800b94e:	4620      	mov	r0, r4
 800b950:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b954:	3a30      	subs	r2, #48	; 0x30
 800b956:	2a09      	cmp	r2, #9
 800b958:	d903      	bls.n	800b962 <_svfiprintf_r+0x1a6>
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d0c6      	beq.n	800b8ec <_svfiprintf_r+0x130>
 800b95e:	9105      	str	r1, [sp, #20]
 800b960:	e7c4      	b.n	800b8ec <_svfiprintf_r+0x130>
 800b962:	fb0c 2101 	mla	r1, ip, r1, r2
 800b966:	4604      	mov	r4, r0
 800b968:	2301      	movs	r3, #1
 800b96a:	e7f0      	b.n	800b94e <_svfiprintf_r+0x192>
 800b96c:	ab03      	add	r3, sp, #12
 800b96e:	9300      	str	r3, [sp, #0]
 800b970:	462a      	mov	r2, r5
 800b972:	4b0f      	ldr	r3, [pc, #60]	; (800b9b0 <_svfiprintf_r+0x1f4>)
 800b974:	a904      	add	r1, sp, #16
 800b976:	4638      	mov	r0, r7
 800b978:	f3af 8000 	nop.w
 800b97c:	1c42      	adds	r2, r0, #1
 800b97e:	4606      	mov	r6, r0
 800b980:	d1d6      	bne.n	800b930 <_svfiprintf_r+0x174>
 800b982:	89ab      	ldrh	r3, [r5, #12]
 800b984:	065b      	lsls	r3, r3, #25
 800b986:	f53f af2d 	bmi.w	800b7e4 <_svfiprintf_r+0x28>
 800b98a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b98c:	b01d      	add	sp, #116	; 0x74
 800b98e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b992:	ab03      	add	r3, sp, #12
 800b994:	9300      	str	r3, [sp, #0]
 800b996:	462a      	mov	r2, r5
 800b998:	4b05      	ldr	r3, [pc, #20]	; (800b9b0 <_svfiprintf_r+0x1f4>)
 800b99a:	a904      	add	r1, sp, #16
 800b99c:	4638      	mov	r0, r7
 800b99e:	f000 f879 	bl	800ba94 <_printf_i>
 800b9a2:	e7eb      	b.n	800b97c <_svfiprintf_r+0x1c0>
 800b9a4:	0800bef0 	.word	0x0800bef0
 800b9a8:	0800befa 	.word	0x0800befa
 800b9ac:	00000000 	.word	0x00000000
 800b9b0:	0800b709 	.word	0x0800b709
 800b9b4:	0800bef6 	.word	0x0800bef6

0800b9b8 <_printf_common>:
 800b9b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9bc:	4616      	mov	r6, r2
 800b9be:	4699      	mov	r9, r3
 800b9c0:	688a      	ldr	r2, [r1, #8]
 800b9c2:	690b      	ldr	r3, [r1, #16]
 800b9c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b9c8:	4293      	cmp	r3, r2
 800b9ca:	bfb8      	it	lt
 800b9cc:	4613      	movlt	r3, r2
 800b9ce:	6033      	str	r3, [r6, #0]
 800b9d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b9d4:	4607      	mov	r7, r0
 800b9d6:	460c      	mov	r4, r1
 800b9d8:	b10a      	cbz	r2, 800b9de <_printf_common+0x26>
 800b9da:	3301      	adds	r3, #1
 800b9dc:	6033      	str	r3, [r6, #0]
 800b9de:	6823      	ldr	r3, [r4, #0]
 800b9e0:	0699      	lsls	r1, r3, #26
 800b9e2:	bf42      	ittt	mi
 800b9e4:	6833      	ldrmi	r3, [r6, #0]
 800b9e6:	3302      	addmi	r3, #2
 800b9e8:	6033      	strmi	r3, [r6, #0]
 800b9ea:	6825      	ldr	r5, [r4, #0]
 800b9ec:	f015 0506 	ands.w	r5, r5, #6
 800b9f0:	d106      	bne.n	800ba00 <_printf_common+0x48>
 800b9f2:	f104 0a19 	add.w	sl, r4, #25
 800b9f6:	68e3      	ldr	r3, [r4, #12]
 800b9f8:	6832      	ldr	r2, [r6, #0]
 800b9fa:	1a9b      	subs	r3, r3, r2
 800b9fc:	42ab      	cmp	r3, r5
 800b9fe:	dc26      	bgt.n	800ba4e <_printf_common+0x96>
 800ba00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ba04:	1e13      	subs	r3, r2, #0
 800ba06:	6822      	ldr	r2, [r4, #0]
 800ba08:	bf18      	it	ne
 800ba0a:	2301      	movne	r3, #1
 800ba0c:	0692      	lsls	r2, r2, #26
 800ba0e:	d42b      	bmi.n	800ba68 <_printf_common+0xb0>
 800ba10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ba14:	4649      	mov	r1, r9
 800ba16:	4638      	mov	r0, r7
 800ba18:	47c0      	blx	r8
 800ba1a:	3001      	adds	r0, #1
 800ba1c:	d01e      	beq.n	800ba5c <_printf_common+0xa4>
 800ba1e:	6823      	ldr	r3, [r4, #0]
 800ba20:	6922      	ldr	r2, [r4, #16]
 800ba22:	f003 0306 	and.w	r3, r3, #6
 800ba26:	2b04      	cmp	r3, #4
 800ba28:	bf02      	ittt	eq
 800ba2a:	68e5      	ldreq	r5, [r4, #12]
 800ba2c:	6833      	ldreq	r3, [r6, #0]
 800ba2e:	1aed      	subeq	r5, r5, r3
 800ba30:	68a3      	ldr	r3, [r4, #8]
 800ba32:	bf0c      	ite	eq
 800ba34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba38:	2500      	movne	r5, #0
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	bfc4      	itt	gt
 800ba3e:	1a9b      	subgt	r3, r3, r2
 800ba40:	18ed      	addgt	r5, r5, r3
 800ba42:	2600      	movs	r6, #0
 800ba44:	341a      	adds	r4, #26
 800ba46:	42b5      	cmp	r5, r6
 800ba48:	d11a      	bne.n	800ba80 <_printf_common+0xc8>
 800ba4a:	2000      	movs	r0, #0
 800ba4c:	e008      	b.n	800ba60 <_printf_common+0xa8>
 800ba4e:	2301      	movs	r3, #1
 800ba50:	4652      	mov	r2, sl
 800ba52:	4649      	mov	r1, r9
 800ba54:	4638      	mov	r0, r7
 800ba56:	47c0      	blx	r8
 800ba58:	3001      	adds	r0, #1
 800ba5a:	d103      	bne.n	800ba64 <_printf_common+0xac>
 800ba5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba64:	3501      	adds	r5, #1
 800ba66:	e7c6      	b.n	800b9f6 <_printf_common+0x3e>
 800ba68:	18e1      	adds	r1, r4, r3
 800ba6a:	1c5a      	adds	r2, r3, #1
 800ba6c:	2030      	movs	r0, #48	; 0x30
 800ba6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ba72:	4422      	add	r2, r4
 800ba74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ba78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ba7c:	3302      	adds	r3, #2
 800ba7e:	e7c7      	b.n	800ba10 <_printf_common+0x58>
 800ba80:	2301      	movs	r3, #1
 800ba82:	4622      	mov	r2, r4
 800ba84:	4649      	mov	r1, r9
 800ba86:	4638      	mov	r0, r7
 800ba88:	47c0      	blx	r8
 800ba8a:	3001      	adds	r0, #1
 800ba8c:	d0e6      	beq.n	800ba5c <_printf_common+0xa4>
 800ba8e:	3601      	adds	r6, #1
 800ba90:	e7d9      	b.n	800ba46 <_printf_common+0x8e>
	...

0800ba94 <_printf_i>:
 800ba94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba98:	7e0f      	ldrb	r7, [r1, #24]
 800ba9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ba9c:	2f78      	cmp	r7, #120	; 0x78
 800ba9e:	4691      	mov	r9, r2
 800baa0:	4680      	mov	r8, r0
 800baa2:	460c      	mov	r4, r1
 800baa4:	469a      	mov	sl, r3
 800baa6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800baaa:	d807      	bhi.n	800babc <_printf_i+0x28>
 800baac:	2f62      	cmp	r7, #98	; 0x62
 800baae:	d80a      	bhi.n	800bac6 <_printf_i+0x32>
 800bab0:	2f00      	cmp	r7, #0
 800bab2:	f000 80d4 	beq.w	800bc5e <_printf_i+0x1ca>
 800bab6:	2f58      	cmp	r7, #88	; 0x58
 800bab8:	f000 80c0 	beq.w	800bc3c <_printf_i+0x1a8>
 800babc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bac0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bac4:	e03a      	b.n	800bb3c <_printf_i+0xa8>
 800bac6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800baca:	2b15      	cmp	r3, #21
 800bacc:	d8f6      	bhi.n	800babc <_printf_i+0x28>
 800bace:	a101      	add	r1, pc, #4	; (adr r1, 800bad4 <_printf_i+0x40>)
 800bad0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bad4:	0800bb2d 	.word	0x0800bb2d
 800bad8:	0800bb41 	.word	0x0800bb41
 800badc:	0800babd 	.word	0x0800babd
 800bae0:	0800babd 	.word	0x0800babd
 800bae4:	0800babd 	.word	0x0800babd
 800bae8:	0800babd 	.word	0x0800babd
 800baec:	0800bb41 	.word	0x0800bb41
 800baf0:	0800babd 	.word	0x0800babd
 800baf4:	0800babd 	.word	0x0800babd
 800baf8:	0800babd 	.word	0x0800babd
 800bafc:	0800babd 	.word	0x0800babd
 800bb00:	0800bc45 	.word	0x0800bc45
 800bb04:	0800bb6d 	.word	0x0800bb6d
 800bb08:	0800bbff 	.word	0x0800bbff
 800bb0c:	0800babd 	.word	0x0800babd
 800bb10:	0800babd 	.word	0x0800babd
 800bb14:	0800bc67 	.word	0x0800bc67
 800bb18:	0800babd 	.word	0x0800babd
 800bb1c:	0800bb6d 	.word	0x0800bb6d
 800bb20:	0800babd 	.word	0x0800babd
 800bb24:	0800babd 	.word	0x0800babd
 800bb28:	0800bc07 	.word	0x0800bc07
 800bb2c:	682b      	ldr	r3, [r5, #0]
 800bb2e:	1d1a      	adds	r2, r3, #4
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	602a      	str	r2, [r5, #0]
 800bb34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	e09f      	b.n	800bc80 <_printf_i+0x1ec>
 800bb40:	6820      	ldr	r0, [r4, #0]
 800bb42:	682b      	ldr	r3, [r5, #0]
 800bb44:	0607      	lsls	r7, r0, #24
 800bb46:	f103 0104 	add.w	r1, r3, #4
 800bb4a:	6029      	str	r1, [r5, #0]
 800bb4c:	d501      	bpl.n	800bb52 <_printf_i+0xbe>
 800bb4e:	681e      	ldr	r6, [r3, #0]
 800bb50:	e003      	b.n	800bb5a <_printf_i+0xc6>
 800bb52:	0646      	lsls	r6, r0, #25
 800bb54:	d5fb      	bpl.n	800bb4e <_printf_i+0xba>
 800bb56:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bb5a:	2e00      	cmp	r6, #0
 800bb5c:	da03      	bge.n	800bb66 <_printf_i+0xd2>
 800bb5e:	232d      	movs	r3, #45	; 0x2d
 800bb60:	4276      	negs	r6, r6
 800bb62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb66:	485a      	ldr	r0, [pc, #360]	; (800bcd0 <_printf_i+0x23c>)
 800bb68:	230a      	movs	r3, #10
 800bb6a:	e012      	b.n	800bb92 <_printf_i+0xfe>
 800bb6c:	682b      	ldr	r3, [r5, #0]
 800bb6e:	6820      	ldr	r0, [r4, #0]
 800bb70:	1d19      	adds	r1, r3, #4
 800bb72:	6029      	str	r1, [r5, #0]
 800bb74:	0605      	lsls	r5, r0, #24
 800bb76:	d501      	bpl.n	800bb7c <_printf_i+0xe8>
 800bb78:	681e      	ldr	r6, [r3, #0]
 800bb7a:	e002      	b.n	800bb82 <_printf_i+0xee>
 800bb7c:	0641      	lsls	r1, r0, #25
 800bb7e:	d5fb      	bpl.n	800bb78 <_printf_i+0xe4>
 800bb80:	881e      	ldrh	r6, [r3, #0]
 800bb82:	4853      	ldr	r0, [pc, #332]	; (800bcd0 <_printf_i+0x23c>)
 800bb84:	2f6f      	cmp	r7, #111	; 0x6f
 800bb86:	bf0c      	ite	eq
 800bb88:	2308      	moveq	r3, #8
 800bb8a:	230a      	movne	r3, #10
 800bb8c:	2100      	movs	r1, #0
 800bb8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bb92:	6865      	ldr	r5, [r4, #4]
 800bb94:	60a5      	str	r5, [r4, #8]
 800bb96:	2d00      	cmp	r5, #0
 800bb98:	bfa2      	ittt	ge
 800bb9a:	6821      	ldrge	r1, [r4, #0]
 800bb9c:	f021 0104 	bicge.w	r1, r1, #4
 800bba0:	6021      	strge	r1, [r4, #0]
 800bba2:	b90e      	cbnz	r6, 800bba8 <_printf_i+0x114>
 800bba4:	2d00      	cmp	r5, #0
 800bba6:	d04b      	beq.n	800bc40 <_printf_i+0x1ac>
 800bba8:	4615      	mov	r5, r2
 800bbaa:	fbb6 f1f3 	udiv	r1, r6, r3
 800bbae:	fb03 6711 	mls	r7, r3, r1, r6
 800bbb2:	5dc7      	ldrb	r7, [r0, r7]
 800bbb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bbb8:	4637      	mov	r7, r6
 800bbba:	42bb      	cmp	r3, r7
 800bbbc:	460e      	mov	r6, r1
 800bbbe:	d9f4      	bls.n	800bbaa <_printf_i+0x116>
 800bbc0:	2b08      	cmp	r3, #8
 800bbc2:	d10b      	bne.n	800bbdc <_printf_i+0x148>
 800bbc4:	6823      	ldr	r3, [r4, #0]
 800bbc6:	07de      	lsls	r6, r3, #31
 800bbc8:	d508      	bpl.n	800bbdc <_printf_i+0x148>
 800bbca:	6923      	ldr	r3, [r4, #16]
 800bbcc:	6861      	ldr	r1, [r4, #4]
 800bbce:	4299      	cmp	r1, r3
 800bbd0:	bfde      	ittt	le
 800bbd2:	2330      	movle	r3, #48	; 0x30
 800bbd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bbd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bbdc:	1b52      	subs	r2, r2, r5
 800bbde:	6122      	str	r2, [r4, #16]
 800bbe0:	f8cd a000 	str.w	sl, [sp]
 800bbe4:	464b      	mov	r3, r9
 800bbe6:	aa03      	add	r2, sp, #12
 800bbe8:	4621      	mov	r1, r4
 800bbea:	4640      	mov	r0, r8
 800bbec:	f7ff fee4 	bl	800b9b8 <_printf_common>
 800bbf0:	3001      	adds	r0, #1
 800bbf2:	d14a      	bne.n	800bc8a <_printf_i+0x1f6>
 800bbf4:	f04f 30ff 	mov.w	r0, #4294967295
 800bbf8:	b004      	add	sp, #16
 800bbfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbfe:	6823      	ldr	r3, [r4, #0]
 800bc00:	f043 0320 	orr.w	r3, r3, #32
 800bc04:	6023      	str	r3, [r4, #0]
 800bc06:	4833      	ldr	r0, [pc, #204]	; (800bcd4 <_printf_i+0x240>)
 800bc08:	2778      	movs	r7, #120	; 0x78
 800bc0a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bc0e:	6823      	ldr	r3, [r4, #0]
 800bc10:	6829      	ldr	r1, [r5, #0]
 800bc12:	061f      	lsls	r7, r3, #24
 800bc14:	f851 6b04 	ldr.w	r6, [r1], #4
 800bc18:	d402      	bmi.n	800bc20 <_printf_i+0x18c>
 800bc1a:	065f      	lsls	r7, r3, #25
 800bc1c:	bf48      	it	mi
 800bc1e:	b2b6      	uxthmi	r6, r6
 800bc20:	07df      	lsls	r7, r3, #31
 800bc22:	bf48      	it	mi
 800bc24:	f043 0320 	orrmi.w	r3, r3, #32
 800bc28:	6029      	str	r1, [r5, #0]
 800bc2a:	bf48      	it	mi
 800bc2c:	6023      	strmi	r3, [r4, #0]
 800bc2e:	b91e      	cbnz	r6, 800bc38 <_printf_i+0x1a4>
 800bc30:	6823      	ldr	r3, [r4, #0]
 800bc32:	f023 0320 	bic.w	r3, r3, #32
 800bc36:	6023      	str	r3, [r4, #0]
 800bc38:	2310      	movs	r3, #16
 800bc3a:	e7a7      	b.n	800bb8c <_printf_i+0xf8>
 800bc3c:	4824      	ldr	r0, [pc, #144]	; (800bcd0 <_printf_i+0x23c>)
 800bc3e:	e7e4      	b.n	800bc0a <_printf_i+0x176>
 800bc40:	4615      	mov	r5, r2
 800bc42:	e7bd      	b.n	800bbc0 <_printf_i+0x12c>
 800bc44:	682b      	ldr	r3, [r5, #0]
 800bc46:	6826      	ldr	r6, [r4, #0]
 800bc48:	6961      	ldr	r1, [r4, #20]
 800bc4a:	1d18      	adds	r0, r3, #4
 800bc4c:	6028      	str	r0, [r5, #0]
 800bc4e:	0635      	lsls	r5, r6, #24
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	d501      	bpl.n	800bc58 <_printf_i+0x1c4>
 800bc54:	6019      	str	r1, [r3, #0]
 800bc56:	e002      	b.n	800bc5e <_printf_i+0x1ca>
 800bc58:	0670      	lsls	r0, r6, #25
 800bc5a:	d5fb      	bpl.n	800bc54 <_printf_i+0x1c0>
 800bc5c:	8019      	strh	r1, [r3, #0]
 800bc5e:	2300      	movs	r3, #0
 800bc60:	6123      	str	r3, [r4, #16]
 800bc62:	4615      	mov	r5, r2
 800bc64:	e7bc      	b.n	800bbe0 <_printf_i+0x14c>
 800bc66:	682b      	ldr	r3, [r5, #0]
 800bc68:	1d1a      	adds	r2, r3, #4
 800bc6a:	602a      	str	r2, [r5, #0]
 800bc6c:	681d      	ldr	r5, [r3, #0]
 800bc6e:	6862      	ldr	r2, [r4, #4]
 800bc70:	2100      	movs	r1, #0
 800bc72:	4628      	mov	r0, r5
 800bc74:	f7f4 facc 	bl	8000210 <memchr>
 800bc78:	b108      	cbz	r0, 800bc7e <_printf_i+0x1ea>
 800bc7a:	1b40      	subs	r0, r0, r5
 800bc7c:	6060      	str	r0, [r4, #4]
 800bc7e:	6863      	ldr	r3, [r4, #4]
 800bc80:	6123      	str	r3, [r4, #16]
 800bc82:	2300      	movs	r3, #0
 800bc84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc88:	e7aa      	b.n	800bbe0 <_printf_i+0x14c>
 800bc8a:	6923      	ldr	r3, [r4, #16]
 800bc8c:	462a      	mov	r2, r5
 800bc8e:	4649      	mov	r1, r9
 800bc90:	4640      	mov	r0, r8
 800bc92:	47d0      	blx	sl
 800bc94:	3001      	adds	r0, #1
 800bc96:	d0ad      	beq.n	800bbf4 <_printf_i+0x160>
 800bc98:	6823      	ldr	r3, [r4, #0]
 800bc9a:	079b      	lsls	r3, r3, #30
 800bc9c:	d413      	bmi.n	800bcc6 <_printf_i+0x232>
 800bc9e:	68e0      	ldr	r0, [r4, #12]
 800bca0:	9b03      	ldr	r3, [sp, #12]
 800bca2:	4298      	cmp	r0, r3
 800bca4:	bfb8      	it	lt
 800bca6:	4618      	movlt	r0, r3
 800bca8:	e7a6      	b.n	800bbf8 <_printf_i+0x164>
 800bcaa:	2301      	movs	r3, #1
 800bcac:	4632      	mov	r2, r6
 800bcae:	4649      	mov	r1, r9
 800bcb0:	4640      	mov	r0, r8
 800bcb2:	47d0      	blx	sl
 800bcb4:	3001      	adds	r0, #1
 800bcb6:	d09d      	beq.n	800bbf4 <_printf_i+0x160>
 800bcb8:	3501      	adds	r5, #1
 800bcba:	68e3      	ldr	r3, [r4, #12]
 800bcbc:	9903      	ldr	r1, [sp, #12]
 800bcbe:	1a5b      	subs	r3, r3, r1
 800bcc0:	42ab      	cmp	r3, r5
 800bcc2:	dcf2      	bgt.n	800bcaa <_printf_i+0x216>
 800bcc4:	e7eb      	b.n	800bc9e <_printf_i+0x20a>
 800bcc6:	2500      	movs	r5, #0
 800bcc8:	f104 0619 	add.w	r6, r4, #25
 800bccc:	e7f5      	b.n	800bcba <_printf_i+0x226>
 800bcce:	bf00      	nop
 800bcd0:	0800bf01 	.word	0x0800bf01
 800bcd4:	0800bf12 	.word	0x0800bf12

0800bcd8 <memmove>:
 800bcd8:	4288      	cmp	r0, r1
 800bcda:	b510      	push	{r4, lr}
 800bcdc:	eb01 0402 	add.w	r4, r1, r2
 800bce0:	d902      	bls.n	800bce8 <memmove+0x10>
 800bce2:	4284      	cmp	r4, r0
 800bce4:	4623      	mov	r3, r4
 800bce6:	d807      	bhi.n	800bcf8 <memmove+0x20>
 800bce8:	1e43      	subs	r3, r0, #1
 800bcea:	42a1      	cmp	r1, r4
 800bcec:	d008      	beq.n	800bd00 <memmove+0x28>
 800bcee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bcf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bcf6:	e7f8      	b.n	800bcea <memmove+0x12>
 800bcf8:	4402      	add	r2, r0
 800bcfa:	4601      	mov	r1, r0
 800bcfc:	428a      	cmp	r2, r1
 800bcfe:	d100      	bne.n	800bd02 <memmove+0x2a>
 800bd00:	bd10      	pop	{r4, pc}
 800bd02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bd0a:	e7f7      	b.n	800bcfc <memmove+0x24>

0800bd0c <_sbrk_r>:
 800bd0c:	b538      	push	{r3, r4, r5, lr}
 800bd0e:	4d06      	ldr	r5, [pc, #24]	; (800bd28 <_sbrk_r+0x1c>)
 800bd10:	2300      	movs	r3, #0
 800bd12:	4604      	mov	r4, r0
 800bd14:	4608      	mov	r0, r1
 800bd16:	602b      	str	r3, [r5, #0]
 800bd18:	f7f8 f88e 	bl	8003e38 <_sbrk>
 800bd1c:	1c43      	adds	r3, r0, #1
 800bd1e:	d102      	bne.n	800bd26 <_sbrk_r+0x1a>
 800bd20:	682b      	ldr	r3, [r5, #0]
 800bd22:	b103      	cbz	r3, 800bd26 <_sbrk_r+0x1a>
 800bd24:	6023      	str	r3, [r4, #0]
 800bd26:	bd38      	pop	{r3, r4, r5, pc}
 800bd28:	20001478 	.word	0x20001478

0800bd2c <_realloc_r>:
 800bd2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd30:	4680      	mov	r8, r0
 800bd32:	4614      	mov	r4, r2
 800bd34:	460e      	mov	r6, r1
 800bd36:	b921      	cbnz	r1, 800bd42 <_realloc_r+0x16>
 800bd38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd3c:	4611      	mov	r1, r2
 800bd3e:	f7ff bc57 	b.w	800b5f0 <_malloc_r>
 800bd42:	b92a      	cbnz	r2, 800bd50 <_realloc_r+0x24>
 800bd44:	f7ff fbe8 	bl	800b518 <_free_r>
 800bd48:	4625      	mov	r5, r4
 800bd4a:	4628      	mov	r0, r5
 800bd4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd50:	f000 f81b 	bl	800bd8a <_malloc_usable_size_r>
 800bd54:	4284      	cmp	r4, r0
 800bd56:	4607      	mov	r7, r0
 800bd58:	d802      	bhi.n	800bd60 <_realloc_r+0x34>
 800bd5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bd5e:	d812      	bhi.n	800bd86 <_realloc_r+0x5a>
 800bd60:	4621      	mov	r1, r4
 800bd62:	4640      	mov	r0, r8
 800bd64:	f7ff fc44 	bl	800b5f0 <_malloc_r>
 800bd68:	4605      	mov	r5, r0
 800bd6a:	2800      	cmp	r0, #0
 800bd6c:	d0ed      	beq.n	800bd4a <_realloc_r+0x1e>
 800bd6e:	42bc      	cmp	r4, r7
 800bd70:	4622      	mov	r2, r4
 800bd72:	4631      	mov	r1, r6
 800bd74:	bf28      	it	cs
 800bd76:	463a      	movcs	r2, r7
 800bd78:	f7ff fbc0 	bl	800b4fc <memcpy>
 800bd7c:	4631      	mov	r1, r6
 800bd7e:	4640      	mov	r0, r8
 800bd80:	f7ff fbca 	bl	800b518 <_free_r>
 800bd84:	e7e1      	b.n	800bd4a <_realloc_r+0x1e>
 800bd86:	4635      	mov	r5, r6
 800bd88:	e7df      	b.n	800bd4a <_realloc_r+0x1e>

0800bd8a <_malloc_usable_size_r>:
 800bd8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd8e:	1f18      	subs	r0, r3, #4
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	bfbc      	itt	lt
 800bd94:	580b      	ldrlt	r3, [r1, r0]
 800bd96:	18c0      	addlt	r0, r0, r3
 800bd98:	4770      	bx	lr
	...

0800bd9c <trunc>:
 800bd9c:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 800bda0:	ec5c bb10 	vmov	fp, ip, d0
 800bda4:	f3cc 500a 	ubfx	r0, ip, #20, #11
 800bda8:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 800bdac:	2913      	cmp	r1, #19
 800bdae:	4664      	mov	r4, ip
 800bdb0:	dc11      	bgt.n	800bdd6 <trunc+0x3a>
 800bdb2:	2900      	cmp	r1, #0
 800bdb4:	bfa7      	ittee	ge
 800bdb6:	4b15      	ldrge	r3, [pc, #84]	; (800be0c <trunc+0x70>)
 800bdb8:	fa43 f101 	asrge.w	r1, r3, r1
 800bdbc:	2200      	movlt	r2, #0
 800bdbe:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 800bdc2:	bfa4      	itt	ge
 800bdc4:	2200      	movge	r2, #0
 800bdc6:	ea01 030c 	andge.w	r3, r1, ip
 800bdca:	4693      	mov	fp, r2
 800bdcc:	469c      	mov	ip, r3
 800bdce:	ec4c bb10 	vmov	d0, fp, ip
 800bdd2:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 800bdd6:	2933      	cmp	r1, #51	; 0x33
 800bdd8:	dd0d      	ble.n	800bdf6 <trunc+0x5a>
 800bdda:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800bdde:	d1f6      	bne.n	800bdce <trunc+0x32>
 800bde0:	4663      	mov	r3, ip
 800bde2:	ee10 2a10 	vmov	r2, s0
 800bde6:	ee10 0a10 	vmov	r0, s0
 800bdea:	4621      	mov	r1, r4
 800bdec:	f7f4 fa66 	bl	80002bc <__adddf3>
 800bdf0:	4683      	mov	fp, r0
 800bdf2:	468c      	mov	ip, r1
 800bdf4:	e7eb      	b.n	800bdce <trunc+0x32>
 800bdf6:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 800bdfa:	f04f 33ff 	mov.w	r3, #4294967295
 800bdfe:	40c3      	lsrs	r3, r0
 800be00:	ea2b 0603 	bic.w	r6, fp, r3
 800be04:	46b3      	mov	fp, r6
 800be06:	46a4      	mov	ip, r4
 800be08:	e7e1      	b.n	800bdce <trunc+0x32>
 800be0a:	bf00      	nop
 800be0c:	fff00000 	.word	0xfff00000

0800be10 <_init>:
 800be10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be12:	bf00      	nop
 800be14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be16:	bc08      	pop	{r3}
 800be18:	469e      	mov	lr, r3
 800be1a:	4770      	bx	lr

0800be1c <_fini>:
 800be1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be1e:	bf00      	nop
 800be20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be22:	bc08      	pop	{r3}
 800be24:	469e      	mov	lr, r3
 800be26:	4770      	bx	lr


Module5_I2C_TempSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aae8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  0800aca8  0800aca8  0001aca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adb8  0800adb8  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800adb8  0800adb8  0001adb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800adc0  0800adc0  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800adc0  0800adc0  0001adc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800adc4  0800adc4  0001adc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800adc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001404  200000a8  0800ae70  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014ac  0800ae70  000214ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000256cb  00000000  00000000  0002011b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000459f  00000000  00000000  000457e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020a0  00000000  00000000  00049d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000197c  00000000  00000000  0004be28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ece9  00000000  00000000  0004d7a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000272c4  00000000  00000000  0007c48d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00131bf4  00000000  00000000  000a3751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000091a0  00000000  00000000  001d5348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001de4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000a8 	.word	0x200000a8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800ac90 	.word	0x0800ac90

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000ac 	.word	0x200000ac
 80001fc:	0800ac90 	.word	0x0800ac90

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_d2iz>:
 8000628:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800062c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000630:	d215      	bcs.n	800065e <__aeabi_d2iz+0x36>
 8000632:	d511      	bpl.n	8000658 <__aeabi_d2iz+0x30>
 8000634:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000638:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800063c:	d912      	bls.n	8000664 <__aeabi_d2iz+0x3c>
 800063e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000642:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000646:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800064a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800064e:	fa23 f002 	lsr.w	r0, r3, r2
 8000652:	bf18      	it	ne
 8000654:	4240      	negne	r0, r0
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000662:	d105      	bne.n	8000670 <__aeabi_d2iz+0x48>
 8000664:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000668:	bf08      	it	eq
 800066a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800066e:	4770      	bx	lr
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_uldivmod>:
 8000678:	b953      	cbnz	r3, 8000690 <__aeabi_uldivmod+0x18>
 800067a:	b94a      	cbnz	r2, 8000690 <__aeabi_uldivmod+0x18>
 800067c:	2900      	cmp	r1, #0
 800067e:	bf08      	it	eq
 8000680:	2800      	cmpeq	r0, #0
 8000682:	bf1c      	itt	ne
 8000684:	f04f 31ff 	movne.w	r1, #4294967295
 8000688:	f04f 30ff 	movne.w	r0, #4294967295
 800068c:	f000 b970 	b.w	8000970 <__aeabi_idiv0>
 8000690:	f1ad 0c08 	sub.w	ip, sp, #8
 8000694:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000698:	f000 f806 	bl	80006a8 <__udivmoddi4>
 800069c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006a4:	b004      	add	sp, #16
 80006a6:	4770      	bx	lr

080006a8 <__udivmoddi4>:
 80006a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006ac:	9e08      	ldr	r6, [sp, #32]
 80006ae:	460d      	mov	r5, r1
 80006b0:	4604      	mov	r4, r0
 80006b2:	460f      	mov	r7, r1
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d14a      	bne.n	800074e <__udivmoddi4+0xa6>
 80006b8:	428a      	cmp	r2, r1
 80006ba:	4694      	mov	ip, r2
 80006bc:	d965      	bls.n	800078a <__udivmoddi4+0xe2>
 80006be:	fab2 f382 	clz	r3, r2
 80006c2:	b143      	cbz	r3, 80006d6 <__udivmoddi4+0x2e>
 80006c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80006c8:	f1c3 0220 	rsb	r2, r3, #32
 80006cc:	409f      	lsls	r7, r3
 80006ce:	fa20 f202 	lsr.w	r2, r0, r2
 80006d2:	4317      	orrs	r7, r2
 80006d4:	409c      	lsls	r4, r3
 80006d6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80006da:	fa1f f58c 	uxth.w	r5, ip
 80006de:	fbb7 f1fe 	udiv	r1, r7, lr
 80006e2:	0c22      	lsrs	r2, r4, #16
 80006e4:	fb0e 7711 	mls	r7, lr, r1, r7
 80006e8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80006ec:	fb01 f005 	mul.w	r0, r1, r5
 80006f0:	4290      	cmp	r0, r2
 80006f2:	d90a      	bls.n	800070a <__udivmoddi4+0x62>
 80006f4:	eb1c 0202 	adds.w	r2, ip, r2
 80006f8:	f101 37ff 	add.w	r7, r1, #4294967295
 80006fc:	f080 811c 	bcs.w	8000938 <__udivmoddi4+0x290>
 8000700:	4290      	cmp	r0, r2
 8000702:	f240 8119 	bls.w	8000938 <__udivmoddi4+0x290>
 8000706:	3902      	subs	r1, #2
 8000708:	4462      	add	r2, ip
 800070a:	1a12      	subs	r2, r2, r0
 800070c:	b2a4      	uxth	r4, r4
 800070e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000712:	fb0e 2210 	mls	r2, lr, r0, r2
 8000716:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800071a:	fb00 f505 	mul.w	r5, r0, r5
 800071e:	42a5      	cmp	r5, r4
 8000720:	d90a      	bls.n	8000738 <__udivmoddi4+0x90>
 8000722:	eb1c 0404 	adds.w	r4, ip, r4
 8000726:	f100 32ff 	add.w	r2, r0, #4294967295
 800072a:	f080 8107 	bcs.w	800093c <__udivmoddi4+0x294>
 800072e:	42a5      	cmp	r5, r4
 8000730:	f240 8104 	bls.w	800093c <__udivmoddi4+0x294>
 8000734:	4464      	add	r4, ip
 8000736:	3802      	subs	r0, #2
 8000738:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800073c:	1b64      	subs	r4, r4, r5
 800073e:	2100      	movs	r1, #0
 8000740:	b11e      	cbz	r6, 800074a <__udivmoddi4+0xa2>
 8000742:	40dc      	lsrs	r4, r3
 8000744:	2300      	movs	r3, #0
 8000746:	e9c6 4300 	strd	r4, r3, [r6]
 800074a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800074e:	428b      	cmp	r3, r1
 8000750:	d908      	bls.n	8000764 <__udivmoddi4+0xbc>
 8000752:	2e00      	cmp	r6, #0
 8000754:	f000 80ed 	beq.w	8000932 <__udivmoddi4+0x28a>
 8000758:	2100      	movs	r1, #0
 800075a:	e9c6 0500 	strd	r0, r5, [r6]
 800075e:	4608      	mov	r0, r1
 8000760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000764:	fab3 f183 	clz	r1, r3
 8000768:	2900      	cmp	r1, #0
 800076a:	d149      	bne.n	8000800 <__udivmoddi4+0x158>
 800076c:	42ab      	cmp	r3, r5
 800076e:	d302      	bcc.n	8000776 <__udivmoddi4+0xce>
 8000770:	4282      	cmp	r2, r0
 8000772:	f200 80f8 	bhi.w	8000966 <__udivmoddi4+0x2be>
 8000776:	1a84      	subs	r4, r0, r2
 8000778:	eb65 0203 	sbc.w	r2, r5, r3
 800077c:	2001      	movs	r0, #1
 800077e:	4617      	mov	r7, r2
 8000780:	2e00      	cmp	r6, #0
 8000782:	d0e2      	beq.n	800074a <__udivmoddi4+0xa2>
 8000784:	e9c6 4700 	strd	r4, r7, [r6]
 8000788:	e7df      	b.n	800074a <__udivmoddi4+0xa2>
 800078a:	b902      	cbnz	r2, 800078e <__udivmoddi4+0xe6>
 800078c:	deff      	udf	#255	; 0xff
 800078e:	fab2 f382 	clz	r3, r2
 8000792:	2b00      	cmp	r3, #0
 8000794:	f040 8090 	bne.w	80008b8 <__udivmoddi4+0x210>
 8000798:	1a8a      	subs	r2, r1, r2
 800079a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800079e:	fa1f fe8c 	uxth.w	lr, ip
 80007a2:	2101      	movs	r1, #1
 80007a4:	fbb2 f5f7 	udiv	r5, r2, r7
 80007a8:	fb07 2015 	mls	r0, r7, r5, r2
 80007ac:	0c22      	lsrs	r2, r4, #16
 80007ae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80007b2:	fb0e f005 	mul.w	r0, lr, r5
 80007b6:	4290      	cmp	r0, r2
 80007b8:	d908      	bls.n	80007cc <__udivmoddi4+0x124>
 80007ba:	eb1c 0202 	adds.w	r2, ip, r2
 80007be:	f105 38ff 	add.w	r8, r5, #4294967295
 80007c2:	d202      	bcs.n	80007ca <__udivmoddi4+0x122>
 80007c4:	4290      	cmp	r0, r2
 80007c6:	f200 80cb 	bhi.w	8000960 <__udivmoddi4+0x2b8>
 80007ca:	4645      	mov	r5, r8
 80007cc:	1a12      	subs	r2, r2, r0
 80007ce:	b2a4      	uxth	r4, r4
 80007d0:	fbb2 f0f7 	udiv	r0, r2, r7
 80007d4:	fb07 2210 	mls	r2, r7, r0, r2
 80007d8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80007dc:	fb0e fe00 	mul.w	lr, lr, r0
 80007e0:	45a6      	cmp	lr, r4
 80007e2:	d908      	bls.n	80007f6 <__udivmoddi4+0x14e>
 80007e4:	eb1c 0404 	adds.w	r4, ip, r4
 80007e8:	f100 32ff 	add.w	r2, r0, #4294967295
 80007ec:	d202      	bcs.n	80007f4 <__udivmoddi4+0x14c>
 80007ee:	45a6      	cmp	lr, r4
 80007f0:	f200 80bb 	bhi.w	800096a <__udivmoddi4+0x2c2>
 80007f4:	4610      	mov	r0, r2
 80007f6:	eba4 040e 	sub.w	r4, r4, lr
 80007fa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80007fe:	e79f      	b.n	8000740 <__udivmoddi4+0x98>
 8000800:	f1c1 0720 	rsb	r7, r1, #32
 8000804:	408b      	lsls	r3, r1
 8000806:	fa22 fc07 	lsr.w	ip, r2, r7
 800080a:	ea4c 0c03 	orr.w	ip, ip, r3
 800080e:	fa05 f401 	lsl.w	r4, r5, r1
 8000812:	fa20 f307 	lsr.w	r3, r0, r7
 8000816:	40fd      	lsrs	r5, r7
 8000818:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800081c:	4323      	orrs	r3, r4
 800081e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000822:	fa1f fe8c 	uxth.w	lr, ip
 8000826:	fb09 5518 	mls	r5, r9, r8, r5
 800082a:	0c1c      	lsrs	r4, r3, #16
 800082c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000830:	fb08 f50e 	mul.w	r5, r8, lr
 8000834:	42a5      	cmp	r5, r4
 8000836:	fa02 f201 	lsl.w	r2, r2, r1
 800083a:	fa00 f001 	lsl.w	r0, r0, r1
 800083e:	d90b      	bls.n	8000858 <__udivmoddi4+0x1b0>
 8000840:	eb1c 0404 	adds.w	r4, ip, r4
 8000844:	f108 3aff 	add.w	sl, r8, #4294967295
 8000848:	f080 8088 	bcs.w	800095c <__udivmoddi4+0x2b4>
 800084c:	42a5      	cmp	r5, r4
 800084e:	f240 8085 	bls.w	800095c <__udivmoddi4+0x2b4>
 8000852:	f1a8 0802 	sub.w	r8, r8, #2
 8000856:	4464      	add	r4, ip
 8000858:	1b64      	subs	r4, r4, r5
 800085a:	b29d      	uxth	r5, r3
 800085c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000860:	fb09 4413 	mls	r4, r9, r3, r4
 8000864:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000868:	fb03 fe0e 	mul.w	lr, r3, lr
 800086c:	45a6      	cmp	lr, r4
 800086e:	d908      	bls.n	8000882 <__udivmoddi4+0x1da>
 8000870:	eb1c 0404 	adds.w	r4, ip, r4
 8000874:	f103 35ff 	add.w	r5, r3, #4294967295
 8000878:	d26c      	bcs.n	8000954 <__udivmoddi4+0x2ac>
 800087a:	45a6      	cmp	lr, r4
 800087c:	d96a      	bls.n	8000954 <__udivmoddi4+0x2ac>
 800087e:	3b02      	subs	r3, #2
 8000880:	4464      	add	r4, ip
 8000882:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000886:	fba3 9502 	umull	r9, r5, r3, r2
 800088a:	eba4 040e 	sub.w	r4, r4, lr
 800088e:	42ac      	cmp	r4, r5
 8000890:	46c8      	mov	r8, r9
 8000892:	46ae      	mov	lr, r5
 8000894:	d356      	bcc.n	8000944 <__udivmoddi4+0x29c>
 8000896:	d053      	beq.n	8000940 <__udivmoddi4+0x298>
 8000898:	b156      	cbz	r6, 80008b0 <__udivmoddi4+0x208>
 800089a:	ebb0 0208 	subs.w	r2, r0, r8
 800089e:	eb64 040e 	sbc.w	r4, r4, lr
 80008a2:	fa04 f707 	lsl.w	r7, r4, r7
 80008a6:	40ca      	lsrs	r2, r1
 80008a8:	40cc      	lsrs	r4, r1
 80008aa:	4317      	orrs	r7, r2
 80008ac:	e9c6 7400 	strd	r7, r4, [r6]
 80008b0:	4618      	mov	r0, r3
 80008b2:	2100      	movs	r1, #0
 80008b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008b8:	f1c3 0120 	rsb	r1, r3, #32
 80008bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80008c0:	fa20 f201 	lsr.w	r2, r0, r1
 80008c4:	fa25 f101 	lsr.w	r1, r5, r1
 80008c8:	409d      	lsls	r5, r3
 80008ca:	432a      	orrs	r2, r5
 80008cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008d0:	fa1f fe8c 	uxth.w	lr, ip
 80008d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80008d8:	fb07 1510 	mls	r5, r7, r0, r1
 80008dc:	0c11      	lsrs	r1, r2, #16
 80008de:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80008e2:	fb00 f50e 	mul.w	r5, r0, lr
 80008e6:	428d      	cmp	r5, r1
 80008e8:	fa04 f403 	lsl.w	r4, r4, r3
 80008ec:	d908      	bls.n	8000900 <__udivmoddi4+0x258>
 80008ee:	eb1c 0101 	adds.w	r1, ip, r1
 80008f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80008f6:	d22f      	bcs.n	8000958 <__udivmoddi4+0x2b0>
 80008f8:	428d      	cmp	r5, r1
 80008fa:	d92d      	bls.n	8000958 <__udivmoddi4+0x2b0>
 80008fc:	3802      	subs	r0, #2
 80008fe:	4461      	add	r1, ip
 8000900:	1b49      	subs	r1, r1, r5
 8000902:	b292      	uxth	r2, r2
 8000904:	fbb1 f5f7 	udiv	r5, r1, r7
 8000908:	fb07 1115 	mls	r1, r7, r5, r1
 800090c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000910:	fb05 f10e 	mul.w	r1, r5, lr
 8000914:	4291      	cmp	r1, r2
 8000916:	d908      	bls.n	800092a <__udivmoddi4+0x282>
 8000918:	eb1c 0202 	adds.w	r2, ip, r2
 800091c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000920:	d216      	bcs.n	8000950 <__udivmoddi4+0x2a8>
 8000922:	4291      	cmp	r1, r2
 8000924:	d914      	bls.n	8000950 <__udivmoddi4+0x2a8>
 8000926:	3d02      	subs	r5, #2
 8000928:	4462      	add	r2, ip
 800092a:	1a52      	subs	r2, r2, r1
 800092c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000930:	e738      	b.n	80007a4 <__udivmoddi4+0xfc>
 8000932:	4631      	mov	r1, r6
 8000934:	4630      	mov	r0, r6
 8000936:	e708      	b.n	800074a <__udivmoddi4+0xa2>
 8000938:	4639      	mov	r1, r7
 800093a:	e6e6      	b.n	800070a <__udivmoddi4+0x62>
 800093c:	4610      	mov	r0, r2
 800093e:	e6fb      	b.n	8000738 <__udivmoddi4+0x90>
 8000940:	4548      	cmp	r0, r9
 8000942:	d2a9      	bcs.n	8000898 <__udivmoddi4+0x1f0>
 8000944:	ebb9 0802 	subs.w	r8, r9, r2
 8000948:	eb65 0e0c 	sbc.w	lr, r5, ip
 800094c:	3b01      	subs	r3, #1
 800094e:	e7a3      	b.n	8000898 <__udivmoddi4+0x1f0>
 8000950:	4645      	mov	r5, r8
 8000952:	e7ea      	b.n	800092a <__udivmoddi4+0x282>
 8000954:	462b      	mov	r3, r5
 8000956:	e794      	b.n	8000882 <__udivmoddi4+0x1da>
 8000958:	4640      	mov	r0, r8
 800095a:	e7d1      	b.n	8000900 <__udivmoddi4+0x258>
 800095c:	46d0      	mov	r8, sl
 800095e:	e77b      	b.n	8000858 <__udivmoddi4+0x1b0>
 8000960:	3d02      	subs	r5, #2
 8000962:	4462      	add	r2, ip
 8000964:	e732      	b.n	80007cc <__udivmoddi4+0x124>
 8000966:	4608      	mov	r0, r1
 8000968:	e70a      	b.n	8000780 <__udivmoddi4+0xd8>
 800096a:	4464      	add	r4, ip
 800096c:	3802      	subs	r0, #2
 800096e:	e742      	b.n	80007f6 <__udivmoddi4+0x14e>

08000970 <__aeabi_idiv0>:
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop

08000974 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f103 0208 	add.w	r2, r3, #8
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	f04f 32ff 	mov.w	r2, #4294967295
 800098c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	f103 0208 	add.w	r2, r3, #8
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f103 0208 	add.w	r2, r3, #8
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80009ce:	b480      	push	{r7}
 80009d0:	b085      	sub	sp, #20
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
 80009d6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009e4:	d103      	bne.n	80009ee <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	691b      	ldr	r3, [r3, #16]
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	e00c      	b.n	8000a08 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	3308      	adds	r3, #8
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	e002      	b.n	80009fc <vListInsert+0x2e>
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	68ba      	ldr	r2, [r7, #8]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d2f6      	bcs.n	80009f6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	685a      	ldr	r2, [r3, #4]
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	683a      	ldr	r2, [r7, #0]
 8000a16:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	68fa      	ldr	r2, [r7, #12]
 8000a1c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	683a      	ldr	r2, [r7, #0]
 8000a22:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	1c5a      	adds	r2, r3, #1
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	601a      	str	r2, [r3, #0]
}
 8000a34:	bf00      	nop
 8000a36:	3714      	adds	r7, #20
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	691b      	ldr	r3, [r3, #16]
 8000a4c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	6892      	ldr	r2, [r2, #8]
 8000a56:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	6852      	ldr	r2, [r2, #4]
 8000a60:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d103      	bne.n	8000a74 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	689a      	ldr	r2, [r3, #8]
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2200      	movs	r2, #0
 8000a78:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	1e5a      	subs	r2, r3, #1
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	681b      	ldr	r3, [r3, #0]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3714      	adds	r7, #20
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08c      	sub	sp, #48	; 0x30
 8000a98:	af04      	add	r7, sp, #16
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000aa4:	88fb      	ldrh	r3, [r7, #6]
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f001 f93f 	bl	8001d2c <pvPortMalloc>
 8000aae:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d013      	beq.n	8000ade <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000ab6:	2054      	movs	r0, #84	; 0x54
 8000ab8:	f001 f938 	bl	8001d2c <pvPortMalloc>
 8000abc:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d008      	beq.n	8000ad6 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000ac4:	2254      	movs	r2, #84	; 0x54
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	69f8      	ldr	r0, [r7, #28]
 8000aca:	f009 fc23 	bl	800a314 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	697a      	ldr	r2, [r7, #20]
 8000ad2:	631a      	str	r2, [r3, #48]	; 0x30
 8000ad4:	e005      	b.n	8000ae2 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8000ad6:	6978      	ldr	r0, [r7, #20]
 8000ad8:	f001 f9e2 	bl	8001ea0 <vPortFree>
 8000adc:	e001      	b.n	8000ae2 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d013      	beq.n	8000b10 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000ae8:	88fa      	ldrh	r2, [r7, #6]
 8000aea:	2300      	movs	r3, #0
 8000aec:	9303      	str	r3, [sp, #12]
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	9302      	str	r3, [sp, #8]
 8000af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af4:	9301      	str	r3, [sp, #4]
 8000af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000af8:	9300      	str	r3, [sp, #0]
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	68b9      	ldr	r1, [r7, #8]
 8000afe:	68f8      	ldr	r0, [r7, #12]
 8000b00:	f000 f80e 	bl	8000b20 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000b04:	69f8      	ldr	r0, [r7, #28]
 8000b06:	f000 f891 	bl	8000c2c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	61bb      	str	r3, [r7, #24]
 8000b0e:	e002      	b.n	8000b16 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000b10:	f04f 33ff 	mov.w	r3, #4294967295
 8000b14:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000b16:	69bb      	ldr	r3, [r7, #24]
    }
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3720      	adds	r7, #32
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b088      	sub	sp, #32
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
 8000b2c:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	4413      	add	r3, r2
 8000b3e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000b40:	69bb      	ldr	r3, [r7, #24]
 8000b42:	f023 0307 	bic.w	r3, r3, #7
 8000b46:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d00a      	beq.n	8000b68 <prvInitialiseNewTask+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b56:	f383 8811 	msr	BASEPRI, r3
 8000b5a:	f3bf 8f6f 	isb	sy
 8000b5e:	f3bf 8f4f 	dsb	sy
 8000b62:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000b64:	bf00      	nop
 8000b66:	e7fe      	b.n	8000b66 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d01e      	beq.n	8000bac <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
 8000b72:	e012      	b.n	8000b9a <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000b74:	68ba      	ldr	r2, [r7, #8]
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	4413      	add	r3, r2
 8000b7a:	7819      	ldrb	r1, [r3, #0]
 8000b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	4413      	add	r3, r2
 8000b82:	3334      	adds	r3, #52	; 0x34
 8000b84:	460a      	mov	r2, r1
 8000b86:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000b88:	68ba      	ldr	r2, [r7, #8]
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d006      	beq.n	8000ba2 <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	3301      	adds	r3, #1
 8000b98:	61fb      	str	r3, [r7, #28]
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	2b0f      	cmp	r3, #15
 8000b9e:	d9e9      	bls.n	8000b74 <prvInitialiseNewTask+0x54>
 8000ba0:	e000      	b.n	8000ba4 <prvInitialiseNewTask+0x84>
            {
                break;
 8000ba2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bae:	2b06      	cmp	r3, #6
 8000bb0:	d90a      	bls.n	8000bc8 <prvInitialiseNewTask+0xa8>
        __asm volatile
 8000bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bb6:	f383 8811 	msr	BASEPRI, r3
 8000bba:	f3bf 8f6f 	isb	sy
 8000bbe:	f3bf 8f4f 	dsb	sy
 8000bc2:	613b      	str	r3, [r7, #16]
    }
 8000bc4:	bf00      	nop
 8000bc6:	e7fe      	b.n	8000bc6 <prvInitialiseNewTask+0xa6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bca:	2b06      	cmp	r3, #6
 8000bcc:	d901      	bls.n	8000bd2 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000bce:	2306      	movs	r3, #6
 8000bd0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bd6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bdc:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000be0:	3304      	adds	r3, #4
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff fee6 	bl	80009b4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bea:	3318      	adds	r3, #24
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fee1 	bl	80009b4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000bf6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bfa:	f1c3 0207 	rsb	r2, r3, #7
 8000bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c00:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c06:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000c08:	683a      	ldr	r2, [r7, #0]
 8000c0a:	68f9      	ldr	r1, [r7, #12]
 8000c0c:	69b8      	ldr	r0, [r7, #24]
 8000c0e:	f000 fe3f 	bl	8001890 <pxPortInitialiseStack>
 8000c12:	4602      	mov	r2, r0
 8000c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c16:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d002      	beq.n	8000c24 <prvInitialiseNewTask+0x104>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c22:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000c24:	bf00      	nop
 8000c26:	3720      	adds	r7, #32
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000c34:	f000 ff58 	bl	8001ae8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000c38:	4b3e      	ldr	r3, [pc, #248]	; (8000d34 <prvAddNewTaskToReadyList+0x108>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	4a3d      	ldr	r2, [pc, #244]	; (8000d34 <prvAddNewTaskToReadyList+0x108>)
 8000c40:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000c42:	4b3d      	ldr	r3, [pc, #244]	; (8000d38 <prvAddNewTaskToReadyList+0x10c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d109      	bne.n	8000c5e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000c4a:	4a3b      	ldr	r2, [pc, #236]	; (8000d38 <prvAddNewTaskToReadyList+0x10c>)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000c50:	4b38      	ldr	r3, [pc, #224]	; (8000d34 <prvAddNewTaskToReadyList+0x108>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d110      	bne.n	8000c7a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000c58:	f000 fb9e 	bl	8001398 <prvInitialiseTaskLists>
 8000c5c:	e00d      	b.n	8000c7a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000c5e:	4b37      	ldr	r3, [pc, #220]	; (8000d3c <prvAddNewTaskToReadyList+0x110>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d109      	bne.n	8000c7a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000c66:	4b34      	ldr	r3, [pc, #208]	; (8000d38 <prvAddNewTaskToReadyList+0x10c>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d802      	bhi.n	8000c7a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000c74:	4a30      	ldr	r2, [pc, #192]	; (8000d38 <prvAddNewTaskToReadyList+0x10c>)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000c7a:	4b31      	ldr	r3, [pc, #196]	; (8000d40 <prvAddNewTaskToReadyList+0x114>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	4a2f      	ldr	r2, [pc, #188]	; (8000d40 <prvAddNewTaskToReadyList+0x114>)
 8000c82:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c88:	2201      	movs	r2, #1
 8000c8a:	409a      	lsls	r2, r3
 8000c8c:	4b2d      	ldr	r3, [pc, #180]	; (8000d44 <prvAddNewTaskToReadyList+0x118>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	4a2c      	ldr	r2, [pc, #176]	; (8000d44 <prvAddNewTaskToReadyList+0x118>)
 8000c94:	6013      	str	r3, [r2, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c9a:	492b      	ldr	r1, [pc, #172]	; (8000d48 <prvAddNewTaskToReadyList+0x11c>)
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	4413      	add	r3, r2
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	440b      	add	r3, r1
 8000ca6:	3304      	adds	r3, #4
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	68fa      	ldr	r2, [r7, #12]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	689a      	ldr	r2, [r3, #8]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	3204      	adds	r2, #4
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	1d1a      	adds	r2, r3, #4
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	4413      	add	r3, r2
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	4a1b      	ldr	r2, [pc, #108]	; (8000d48 <prvAddNewTaskToReadyList+0x11c>)
 8000cda:	441a      	add	r2, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	615a      	str	r2, [r3, #20]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ce4:	4918      	ldr	r1, [pc, #96]	; (8000d48 <prvAddNewTaskToReadyList+0x11c>)
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	4413      	add	r3, r2
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	440b      	add	r3, r1
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	1c59      	adds	r1, r3, #1
 8000cf4:	4814      	ldr	r0, [pc, #80]	; (8000d48 <prvAddNewTaskToReadyList+0x11c>)
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	4413      	add	r3, r2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	4403      	add	r3, r0
 8000d00:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000d02:	f000 ff21 	bl	8001b48 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000d06:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <prvAddNewTaskToReadyList+0x110>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d00e      	beq.n	8000d2c <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <prvAddNewTaskToReadyList+0x10c>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d207      	bcs.n	8000d2c <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000d1c:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <prvAddNewTaskToReadyList+0x120>)
 8000d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	f3bf 8f4f 	dsb	sy
 8000d28:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000d2c:	bf00      	nop
 8000d2e:	3710      	adds	r7, #16
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	200001c4 	.word	0x200001c4
 8000d38:	200000c4 	.word	0x200000c4
 8000d3c:	200001d0 	.word	0x200001d0
 8000d40:	200001e0 	.word	0x200001e0
 8000d44:	200001cc 	.word	0x200001cc
 8000d48:	200000c8 	.word	0x200000c8
 8000d4c:	e000ed04 	.word	0xe000ed04

08000d50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d017      	beq.n	8000d92 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8000d62:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <vTaskDelay+0x60>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d00a      	beq.n	8000d80 <vTaskDelay+0x30>
        __asm volatile
 8000d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d6e:	f383 8811 	msr	BASEPRI, r3
 8000d72:	f3bf 8f6f 	isb	sy
 8000d76:	f3bf 8f4f 	dsb	sy
 8000d7a:	60bb      	str	r3, [r7, #8]
    }
 8000d7c:	bf00      	nop
 8000d7e:	e7fe      	b.n	8000d7e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8000d80:	f000 f866 	bl	8000e50 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000d84:	2100      	movs	r1, #0
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f000 fd02 	bl	8001790 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8000d8c:	f000 f86e 	bl	8000e6c <xTaskResumeAll>
 8000d90:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d107      	bne.n	8000da8 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <vTaskDelay+0x64>)
 8000d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	f3bf 8f4f 	dsb	sy
 8000da4:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000da8:	bf00      	nop
 8000daa:	3710      	adds	r7, #16
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	200001ec 	.word	0x200001ec
 8000db4:	e000ed04 	.word	0xe000ed04

08000db8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8000dbe:	4b1d      	ldr	r3, [pc, #116]	; (8000e34 <vTaskStartScheduler+0x7c>)
 8000dc0:	9301      	str	r3, [sp, #4]
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	2280      	movs	r2, #128	; 0x80
 8000dca:	491b      	ldr	r1, [pc, #108]	; (8000e38 <vTaskStartScheduler+0x80>)
 8000dcc:	481b      	ldr	r0, [pc, #108]	; (8000e3c <vTaskStartScheduler+0x84>)
 8000dce:	f7ff fe61 	bl	8000a94 <xTaskCreate>
 8000dd2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d116      	bne.n	8000e08 <vTaskStartScheduler+0x50>
        __asm volatile
 8000dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dde:	f383 8811 	msr	BASEPRI, r3
 8000de2:	f3bf 8f6f 	isb	sy
 8000de6:	f3bf 8f4f 	dsb	sy
 8000dea:	60bb      	str	r3, [r7, #8]
    }
 8000dec:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8000dee:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <vTaskStartScheduler+0x88>)
 8000df0:	f04f 32ff 	mov.w	r2, #4294967295
 8000df4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000df6:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <vTaskStartScheduler+0x8c>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000dfc:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <vTaskStartScheduler+0x90>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8000e02:	f000 fdcf 	bl	80019a4 <xPortStartScheduler>
 8000e06:	e00e      	b.n	8000e26 <vTaskStartScheduler+0x6e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e0e:	d10a      	bne.n	8000e26 <vTaskStartScheduler+0x6e>
        __asm volatile
 8000e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e14:	f383 8811 	msr	BASEPRI, r3
 8000e18:	f3bf 8f6f 	isb	sy
 8000e1c:	f3bf 8f4f 	dsb	sy
 8000e20:	607b      	str	r3, [r7, #4]
    }
 8000e22:	bf00      	nop
 8000e24:	e7fe      	b.n	8000e24 <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000e26:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <vTaskStartScheduler+0x94>)
 8000e28:	681b      	ldr	r3, [r3, #0]
}
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	200001e8 	.word	0x200001e8
 8000e38:	0800aca8 	.word	0x0800aca8
 8000e3c:	08001369 	.word	0x08001369
 8000e40:	200001e4 	.word	0x200001e4
 8000e44:	200001d0 	.word	0x200001d0
 8000e48:	200001c8 	.word	0x200001c8
 8000e4c:	20000000 	.word	0x20000000

08000e50 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000e54:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <vTaskSuspendAll+0x18>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	4a03      	ldr	r2, [pc, #12]	; (8000e68 <vTaskSuspendAll+0x18>)
 8000e5c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000e5e:	bf00      	nop
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	200001ec 	.word	0x200001ec

08000e6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b088      	sub	sp, #32
 8000e70:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8000e7a:	4b71      	ldr	r3, [pc, #452]	; (8001040 <xTaskResumeAll+0x1d4>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d10a      	bne.n	8000e98 <xTaskResumeAll+0x2c>
        __asm volatile
 8000e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e86:	f383 8811 	msr	BASEPRI, r3
 8000e8a:	f3bf 8f6f 	isb	sy
 8000e8e:	f3bf 8f4f 	dsb	sy
 8000e92:	607b      	str	r3, [r7, #4]
    }
 8000e94:	bf00      	nop
 8000e96:	e7fe      	b.n	8000e96 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000e98:	f000 fe26 	bl	8001ae8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000e9c:	4b68      	ldr	r3, [pc, #416]	; (8001040 <xTaskResumeAll+0x1d4>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	3b01      	subs	r3, #1
 8000ea2:	4a67      	ldr	r2, [pc, #412]	; (8001040 <xTaskResumeAll+0x1d4>)
 8000ea4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000ea6:	4b66      	ldr	r3, [pc, #408]	; (8001040 <xTaskResumeAll+0x1d4>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f040 80c0 	bne.w	8001030 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000eb0:	4b64      	ldr	r3, [pc, #400]	; (8001044 <xTaskResumeAll+0x1d8>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	f000 80bb 	beq.w	8001030 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000eba:	e08a      	b.n	8000fd2 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000ebc:	4b62      	ldr	r3, [pc, #392]	; (8001048 <xTaskResumeAll+0x1dc>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec8:	613b      	str	r3, [r7, #16]
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	69fa      	ldr	r2, [r7, #28]
 8000ed0:	6a12      	ldr	r2, [r2, #32]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	6a1b      	ldr	r3, [r3, #32]
 8000ed8:	69fa      	ldr	r2, [r7, #28]
 8000eda:	69d2      	ldr	r2, [r2, #28]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	685a      	ldr	r2, [r3, #4]
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3318      	adds	r3, #24
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d103      	bne.n	8000ef2 <xTaskResumeAll+0x86>
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	6a1a      	ldr	r2, [r3, #32]
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	629a      	str	r2, [r3, #40]	; 0x28
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	1e5a      	subs	r2, r3, #1
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	695b      	ldr	r3, [r3, #20]
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	69fa      	ldr	r2, [r7, #28]
 8000f0e:	68d2      	ldr	r2, [r2, #12]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	68db      	ldr	r3, [r3, #12]
 8000f16:	69fa      	ldr	r2, [r7, #28]
 8000f18:	6892      	ldr	r2, [r2, #8]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	685a      	ldr	r2, [r3, #4]
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	3304      	adds	r3, #4
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d103      	bne.n	8000f30 <xTaskResumeAll+0xc4>
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	68da      	ldr	r2, [r3, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	2200      	movs	r2, #0
 8000f34:	615a      	str	r2, [r3, #20]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	1e5a      	subs	r2, r3, #1
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f44:	2201      	movs	r2, #1
 8000f46:	409a      	lsls	r2, r3
 8000f48:	4b40      	ldr	r3, [pc, #256]	; (800104c <xTaskResumeAll+0x1e0>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	4a3f      	ldr	r2, [pc, #252]	; (800104c <xTaskResumeAll+0x1e0>)
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f56:	493e      	ldr	r1, [pc, #248]	; (8001050 <xTaskResumeAll+0x1e4>)
 8000f58:	4613      	mov	r3, r2
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	4413      	add	r3, r2
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	440b      	add	r3, r1
 8000f62:	3304      	adds	r3, #4
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	68ba      	ldr	r2, [r7, #8]
 8000f6c:	609a      	str	r2, [r3, #8]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	689a      	ldr	r2, [r3, #8]
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	69fa      	ldr	r2, [r7, #28]
 8000f7c:	3204      	adds	r2, #4
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	1d1a      	adds	r2, r3, #4
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	4413      	add	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	4a2e      	ldr	r2, [pc, #184]	; (8001050 <xTaskResumeAll+0x1e4>)
 8000f96:	441a      	add	r2, r3
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	615a      	str	r2, [r3, #20]
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fa0:	492b      	ldr	r1, [pc, #172]	; (8001050 <xTaskResumeAll+0x1e4>)
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	4413      	add	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	440b      	add	r3, r1
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	1c59      	adds	r1, r3, #1
 8000fb0:	4827      	ldr	r0, [pc, #156]	; (8001050 <xTaskResumeAll+0x1e4>)
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4403      	add	r3, r0
 8000fbc:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fc2:	4b24      	ldr	r3, [pc, #144]	; (8001054 <xTaskResumeAll+0x1e8>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d302      	bcc.n	8000fd2 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8000fcc:	4b22      	ldr	r3, [pc, #136]	; (8001058 <xTaskResumeAll+0x1ec>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000fd2:	4b1d      	ldr	r3, [pc, #116]	; (8001048 <xTaskResumeAll+0x1dc>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	f47f af70 	bne.w	8000ebc <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000fe2:	f000 fa57 	bl	8001494 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000fe6:	4b1d      	ldr	r3, [pc, #116]	; (800105c <xTaskResumeAll+0x1f0>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d010      	beq.n	8001014 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000ff2:	f000 f847 	bl	8001084 <xTaskIncrementTick>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d002      	beq.n	8001002 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8000ffc:	4b16      	ldr	r3, [pc, #88]	; (8001058 <xTaskResumeAll+0x1ec>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	3b01      	subs	r3, #1
 8001006:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1f1      	bne.n	8000ff2 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 800100e:	4b13      	ldr	r3, [pc, #76]	; (800105c <xTaskResumeAll+0x1f0>)
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001014:	4b10      	ldr	r3, [pc, #64]	; (8001058 <xTaskResumeAll+0x1ec>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d009      	beq.n	8001030 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800101c:	2301      	movs	r3, #1
 800101e:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001020:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <xTaskResumeAll+0x1f4>)
 8001022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	f3bf 8f4f 	dsb	sy
 800102c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001030:	f000 fd8a 	bl	8001b48 <vPortExitCritical>

    return xAlreadyYielded;
 8001034:	69bb      	ldr	r3, [r7, #24]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3720      	adds	r7, #32
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200001ec 	.word	0x200001ec
 8001044:	200001c4 	.word	0x200001c4
 8001048:	20000184 	.word	0x20000184
 800104c:	200001cc 	.word	0x200001cc
 8001050:	200000c8 	.word	0x200000c8
 8001054:	200000c4 	.word	0x200000c4
 8001058:	200001d8 	.word	0x200001d8
 800105c:	200001d4 	.word	0x200001d4
 8001060:	e000ed04 	.word	0xe000ed04

08001064 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800106a:	4b05      	ldr	r3, [pc, #20]	; (8001080 <xTaskGetTickCount+0x1c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001070:	687b      	ldr	r3, [r7, #4]
}
 8001072:	4618      	mov	r0, r3
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	200001c8 	.word	0x200001c8

08001084 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	; 0x28
 8001088:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800108a:	2300      	movs	r3, #0
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800108e:	4b7d      	ldr	r3, [pc, #500]	; (8001284 <xTaskIncrementTick+0x200>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	f040 80ec 	bne.w	8001270 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001098:	4b7b      	ldr	r3, [pc, #492]	; (8001288 <xTaskIncrementTick+0x204>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	3301      	adds	r3, #1
 800109e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80010a0:	4a79      	ldr	r2, [pc, #484]	; (8001288 <xTaskIncrementTick+0x204>)
 80010a2:	6a3b      	ldr	r3, [r7, #32]
 80010a4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80010a6:	6a3b      	ldr	r3, [r7, #32]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d120      	bne.n	80010ee <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80010ac:	4b77      	ldr	r3, [pc, #476]	; (800128c <xTaskIncrementTick+0x208>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d00a      	beq.n	80010cc <xTaskIncrementTick+0x48>
        __asm volatile
 80010b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010ba:	f383 8811 	msr	BASEPRI, r3
 80010be:	f3bf 8f6f 	isb	sy
 80010c2:	f3bf 8f4f 	dsb	sy
 80010c6:	607b      	str	r3, [r7, #4]
    }
 80010c8:	bf00      	nop
 80010ca:	e7fe      	b.n	80010ca <xTaskIncrementTick+0x46>
 80010cc:	4b6f      	ldr	r3, [pc, #444]	; (800128c <xTaskIncrementTick+0x208>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	61fb      	str	r3, [r7, #28]
 80010d2:	4b6f      	ldr	r3, [pc, #444]	; (8001290 <xTaskIncrementTick+0x20c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a6d      	ldr	r2, [pc, #436]	; (800128c <xTaskIncrementTick+0x208>)
 80010d8:	6013      	str	r3, [r2, #0]
 80010da:	4a6d      	ldr	r2, [pc, #436]	; (8001290 <xTaskIncrementTick+0x20c>)
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	6013      	str	r3, [r2, #0]
 80010e0:	4b6c      	ldr	r3, [pc, #432]	; (8001294 <xTaskIncrementTick+0x210>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	3301      	adds	r3, #1
 80010e6:	4a6b      	ldr	r2, [pc, #428]	; (8001294 <xTaskIncrementTick+0x210>)
 80010e8:	6013      	str	r3, [r2, #0]
 80010ea:	f000 f9d3 	bl	8001494 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80010ee:	4b6a      	ldr	r3, [pc, #424]	; (8001298 <xTaskIncrementTick+0x214>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	6a3a      	ldr	r2, [r7, #32]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	f0c0 80a6 	bcc.w	8001246 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80010fa:	4b64      	ldr	r3, [pc, #400]	; (800128c <xTaskIncrementTick+0x208>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d104      	bne.n	800110e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001104:	4b64      	ldr	r3, [pc, #400]	; (8001298 <xTaskIncrementTick+0x214>)
 8001106:	f04f 32ff 	mov.w	r2, #4294967295
 800110a:	601a      	str	r2, [r3, #0]
                    break;
 800110c:	e09b      	b.n	8001246 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800110e:	4b5f      	ldr	r3, [pc, #380]	; (800128c <xTaskIncrementTick+0x208>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800111e:	6a3a      	ldr	r2, [r7, #32]
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	429a      	cmp	r2, r3
 8001124:	d203      	bcs.n	800112e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001126:	4a5c      	ldr	r2, [pc, #368]	; (8001298 <xTaskIncrementTick+0x214>)
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800112c:	e08b      	b.n	8001246 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	68d2      	ldr	r2, [r2, #12]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	6892      	ldr	r2, [r2, #8]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	3304      	adds	r3, #4
 8001150:	429a      	cmp	r2, r3
 8001152:	d103      	bne.n	800115c <xTaskIncrementTick+0xd8>
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	68da      	ldr	r2, [r3, #12]
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	2200      	movs	r2, #0
 8001160:	615a      	str	r2, [r3, #20]
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	1e5a      	subs	r2, r3, #1
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001170:	2b00      	cmp	r3, #0
 8001172:	d01e      	beq.n	80011b2 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	6a12      	ldr	r2, [r2, #32]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	6a1b      	ldr	r3, [r3, #32]
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	69d2      	ldr	r2, [r2, #28]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	3318      	adds	r3, #24
 8001196:	429a      	cmp	r2, r3
 8001198:	d103      	bne.n	80011a2 <xTaskIncrementTick+0x11e>
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	6a1a      	ldr	r2, [r3, #32]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	2200      	movs	r2, #0
 80011a6:	629a      	str	r2, [r3, #40]	; 0x28
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	1e5a      	subs	r2, r3, #1
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b6:	2201      	movs	r2, #1
 80011b8:	409a      	lsls	r2, r3
 80011ba:	4b38      	ldr	r3, [pc, #224]	; (800129c <xTaskIncrementTick+0x218>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4313      	orrs	r3, r2
 80011c0:	4a36      	ldr	r2, [pc, #216]	; (800129c <xTaskIncrementTick+0x218>)
 80011c2:	6013      	str	r3, [r2, #0]
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011c8:	4935      	ldr	r1, [pc, #212]	; (80012a0 <xTaskIncrementTick+0x21c>)
 80011ca:	4613      	mov	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	440b      	add	r3, r1
 80011d4:	3304      	adds	r3, #4
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	68ba      	ldr	r2, [r7, #8]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	689a      	ldr	r2, [r3, #8]
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	60da      	str	r2, [r3, #12]
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	3204      	adds	r2, #4
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	1d1a      	adds	r2, r3, #4
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011fe:	4613      	mov	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	4413      	add	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4a26      	ldr	r2, [pc, #152]	; (80012a0 <xTaskIncrementTick+0x21c>)
 8001208:	441a      	add	r2, r3
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	615a      	str	r2, [r3, #20]
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001212:	4923      	ldr	r1, [pc, #140]	; (80012a0 <xTaskIncrementTick+0x21c>)
 8001214:	4613      	mov	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4413      	add	r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	440b      	add	r3, r1
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	1c59      	adds	r1, r3, #1
 8001222:	481f      	ldr	r0, [pc, #124]	; (80012a0 <xTaskIncrementTick+0x21c>)
 8001224:	4613      	mov	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4403      	add	r3, r0
 800122e:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001234:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <xTaskIncrementTick+0x220>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800123a:	429a      	cmp	r2, r3
 800123c:	f67f af5d 	bls.w	80010fa <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8001240:	2301      	movs	r3, #1
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001244:	e759      	b.n	80010fa <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001246:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <xTaskIncrementTick+0x220>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800124c:	4914      	ldr	r1, [pc, #80]	; (80012a0 <xTaskIncrementTick+0x21c>)
 800124e:	4613      	mov	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	440b      	add	r3, r1
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d901      	bls.n	8001262 <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 800125e:	2301      	movs	r3, #1
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <xTaskIncrementTick+0x224>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d007      	beq.n	800127a <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 800126a:	2301      	movs	r3, #1
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
 800126e:	e004      	b.n	800127a <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001270:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <xTaskIncrementTick+0x228>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	3301      	adds	r3, #1
 8001276:	4a0d      	ldr	r2, [pc, #52]	; (80012ac <xTaskIncrementTick+0x228>)
 8001278:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800127c:	4618      	mov	r0, r3
 800127e:	3728      	adds	r7, #40	; 0x28
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	200001ec 	.word	0x200001ec
 8001288:	200001c8 	.word	0x200001c8
 800128c:	2000017c 	.word	0x2000017c
 8001290:	20000180 	.word	0x20000180
 8001294:	200001dc 	.word	0x200001dc
 8001298:	200001e4 	.word	0x200001e4
 800129c:	200001cc 	.word	0x200001cc
 80012a0:	200000c8 	.word	0x200000c8
 80012a4:	200000c4 	.word	0x200000c4
 80012a8:	200001d8 	.word	0x200001d8
 80012ac:	200001d4 	.word	0x200001d4

080012b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80012b0:	b480      	push	{r7}
 80012b2:	b087      	sub	sp, #28
 80012b4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80012b6:	4b27      	ldr	r3, [pc, #156]	; (8001354 <vTaskSwitchContext+0xa4>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80012be:	4b26      	ldr	r3, [pc, #152]	; (8001358 <vTaskSwitchContext+0xa8>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80012c4:	e03f      	b.n	8001346 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80012c6:	4b24      	ldr	r3, [pc, #144]	; (8001358 <vTaskSwitchContext+0xa8>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80012cc:	4b23      	ldr	r3, [pc, #140]	; (800135c <vTaskSwitchContext+0xac>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	fab3 f383 	clz	r3, r3
 80012d8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80012da:	7afb      	ldrb	r3, [r7, #11]
 80012dc:	f1c3 031f 	rsb	r3, r3, #31
 80012e0:	617b      	str	r3, [r7, #20]
 80012e2:	491f      	ldr	r1, [pc, #124]	; (8001360 <vTaskSwitchContext+0xb0>)
 80012e4:	697a      	ldr	r2, [r7, #20]
 80012e6:	4613      	mov	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	440b      	add	r3, r1
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d10a      	bne.n	800130c <vTaskSwitchContext+0x5c>
        __asm volatile
 80012f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012fa:	f383 8811 	msr	BASEPRI, r3
 80012fe:	f3bf 8f6f 	isb	sy
 8001302:	f3bf 8f4f 	dsb	sy
 8001306:	607b      	str	r3, [r7, #4]
    }
 8001308:	bf00      	nop
 800130a:	e7fe      	b.n	800130a <vTaskSwitchContext+0x5a>
 800130c:	697a      	ldr	r2, [r7, #20]
 800130e:	4613      	mov	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4a12      	ldr	r2, [pc, #72]	; (8001360 <vTaskSwitchContext+0xb0>)
 8001318:	4413      	add	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	685a      	ldr	r2, [r3, #4]
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	685a      	ldr	r2, [r3, #4]
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	3308      	adds	r3, #8
 800132e:	429a      	cmp	r2, r3
 8001330:	d104      	bne.n	800133c <vTaskSwitchContext+0x8c>
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	685a      	ldr	r2, [r3, #4]
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	4a08      	ldr	r2, [pc, #32]	; (8001364 <vTaskSwitchContext+0xb4>)
 8001344:	6013      	str	r3, [r2, #0]
}
 8001346:	bf00      	nop
 8001348:	371c      	adds	r7, #28
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	200001ec 	.word	0x200001ec
 8001358:	200001d8 	.word	0x200001d8
 800135c:	200001cc 	.word	0x200001cc
 8001360:	200000c8 	.word	0x200000c8
 8001364:	200000c4 	.word	0x200000c4

08001368 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001370:	f000 f852 	bl	8001418 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <prvIdleTask+0x28>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d9f9      	bls.n	8001370 <prvIdleTask+0x8>
            {
                taskYIELD();
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <prvIdleTask+0x2c>)
 800137e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	f3bf 8f4f 	dsb	sy
 8001388:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800138c:	e7f0      	b.n	8001370 <prvIdleTask+0x8>
 800138e:	bf00      	nop
 8001390:	200000c8 	.word	0x200000c8
 8001394:	e000ed04 	.word	0xe000ed04

08001398 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800139e:	2300      	movs	r3, #0
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	e00c      	b.n	80013be <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	4613      	mov	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	4a12      	ldr	r2, [pc, #72]	; (80013f8 <prvInitialiseTaskLists+0x60>)
 80013b0:	4413      	add	r3, r2
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fade 	bl	8000974 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3301      	adds	r3, #1
 80013bc:	607b      	str	r3, [r7, #4]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b06      	cmp	r3, #6
 80013c2:	d9ef      	bls.n	80013a4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80013c4:	480d      	ldr	r0, [pc, #52]	; (80013fc <prvInitialiseTaskLists+0x64>)
 80013c6:	f7ff fad5 	bl	8000974 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80013ca:	480d      	ldr	r0, [pc, #52]	; (8001400 <prvInitialiseTaskLists+0x68>)
 80013cc:	f7ff fad2 	bl	8000974 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80013d0:	480c      	ldr	r0, [pc, #48]	; (8001404 <prvInitialiseTaskLists+0x6c>)
 80013d2:	f7ff facf 	bl	8000974 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80013d6:	480c      	ldr	r0, [pc, #48]	; (8001408 <prvInitialiseTaskLists+0x70>)
 80013d8:	f7ff facc 	bl	8000974 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80013dc:	480b      	ldr	r0, [pc, #44]	; (800140c <prvInitialiseTaskLists+0x74>)
 80013de:	f7ff fac9 	bl	8000974 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <prvInitialiseTaskLists+0x78>)
 80013e4:	4a05      	ldr	r2, [pc, #20]	; (80013fc <prvInitialiseTaskLists+0x64>)
 80013e6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80013e8:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <prvInitialiseTaskLists+0x7c>)
 80013ea:	4a05      	ldr	r2, [pc, #20]	; (8001400 <prvInitialiseTaskLists+0x68>)
 80013ec:	601a      	str	r2, [r3, #0]
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	200000c8 	.word	0x200000c8
 80013fc:	20000154 	.word	0x20000154
 8001400:	20000168 	.word	0x20000168
 8001404:	20000184 	.word	0x20000184
 8001408:	20000198 	.word	0x20000198
 800140c:	200001b0 	.word	0x200001b0
 8001410:	2000017c 	.word	0x2000017c
 8001414:	20000180 	.word	0x20000180

08001418 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800141e:	e019      	b.n	8001454 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8001420:	f000 fb62 	bl	8001ae8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001424:	4b10      	ldr	r3, [pc, #64]	; (8001468 <prvCheckTasksWaitingTermination+0x50>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3304      	adds	r3, #4
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fb05 	bl	8000a40 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8001436:	4b0d      	ldr	r3, [pc, #52]	; (800146c <prvCheckTasksWaitingTermination+0x54>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	3b01      	subs	r3, #1
 800143c:	4a0b      	ldr	r2, [pc, #44]	; (800146c <prvCheckTasksWaitingTermination+0x54>)
 800143e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8001440:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <prvCheckTasksWaitingTermination+0x58>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	3b01      	subs	r3, #1
 8001446:	4a0a      	ldr	r2, [pc, #40]	; (8001470 <prvCheckTasksWaitingTermination+0x58>)
 8001448:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800144a:	f000 fb7d 	bl	8001b48 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f000 f810 	bl	8001474 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <prvCheckTasksWaitingTermination+0x58>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1e1      	bne.n	8001420 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800145c:	bf00      	nop
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000198 	.word	0x20000198
 800146c:	200001c4 	.word	0x200001c4
 8001470:	200001ac 	.word	0x200001ac

08001474 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001480:	4618      	mov	r0, r3
 8001482:	f000 fd0d 	bl	8001ea0 <vPortFree>
            vPortFree( pxTCB );
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f000 fd0a 	bl	8001ea0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001498:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <prvResetNextTaskUnblockTime+0x30>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d104      	bne.n	80014ac <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <prvResetNextTaskUnblockTime+0x34>)
 80014a4:	f04f 32ff 	mov.w	r2, #4294967295
 80014a8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80014aa:	e005      	b.n	80014b8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80014ac:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <prvResetNextTaskUnblockTime+0x30>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <prvResetNextTaskUnblockTime+0x34>)
 80014b6:	6013      	str	r3, [r2, #0]
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	2000017c 	.word	0x2000017c
 80014c8:	200001e4 	.word	0x200001e4

080014cc <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b092      	sub	sp, #72	; 0x48
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
 80014d8:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 80014da:	2301      	movs	r3, #1
 80014dc:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d10a      	bne.n	80014fa <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 80014e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014e8:	f383 8811 	msr	BASEPRI, r3
 80014ec:	f3bf 8f6f 	isb	sy
 80014f0:	f3bf 8f4f 	dsb	sy
 80014f4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80014f6:	bf00      	nop
 80014f8:	e7fe      	b.n	80014f8 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d00a      	beq.n	8001516 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8001500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001504:	f383 8811 	msr	BASEPRI, r3
 8001508:	f3bf 8f6f 	isb	sy
 800150c:	f3bf 8f4f 	dsb	sy
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8001512:	bf00      	nop
 8001514:	e7fe      	b.n	8001514 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001516:	f000 fbc9 	bl	8001cac <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	643b      	str	r3, [r7, #64]	; 0x40

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800151e:	f3ef 8211 	mrs	r2, BASEPRI
 8001522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001526:	f383 8811 	msr	BASEPRI, r3
 800152a:	f3bf 8f6f 	isb	sy
 800152e:	f3bf 8f4f 	dsb	sy
 8001532:	623a      	str	r2, [r7, #32]
 8001534:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8001536:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001538:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 800153a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800153c:	2b00      	cmp	r3, #0
 800153e:	d007      	beq.n	8001550 <xTaskGenericNotifyFromISR+0x84>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8001540:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	3312      	adds	r3, #18
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800154e:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8001550:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	4413      	add	r3, r2
 8001556:	3350      	adds	r3, #80	; 0x50
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800155e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	4413      	add	r3, r2
 8001564:	3350      	adds	r3, #80	; 0x50
 8001566:	2202      	movs	r2, #2
 8001568:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800156a:	78fb      	ldrb	r3, [r7, #3]
 800156c:	2b04      	cmp	r3, #4
 800156e:	d841      	bhi.n	80015f4 <xTaskGenericNotifyFromISR+0x128>
 8001570:	a201      	add	r2, pc, #4	; (adr r2, 8001578 <xTaskGenericNotifyFromISR+0xac>)
 8001572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001576:	bf00      	nop
 8001578:	08001613 	.word	0x08001613
 800157c:	0800158d 	.word	0x0800158d
 8001580:	080015ab 	.word	0x080015ab
 8001584:	080015c7 	.word	0x080015c7
 8001588:	080015d7 	.word	0x080015d7
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800158c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	3312      	adds	r3, #18
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	431a      	orrs	r2, r3
 800159c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	3312      	adds	r3, #18
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	440b      	add	r3, r1
 80015a6:	605a      	str	r2, [r3, #4]
                    break;
 80015a8:	e036      	b.n	8001618 <xTaskGenericNotifyFromISR+0x14c>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80015aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	3312      	adds	r3, #18
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4413      	add	r3, r2
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	1c5a      	adds	r2, r3, #1
 80015b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	3312      	adds	r3, #18
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	440b      	add	r3, r1
 80015c2:	605a      	str	r2, [r3, #4]
                    break;
 80015c4:	e028      	b.n	8001618 <xTaskGenericNotifyFromISR+0x14c>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80015c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	3312      	adds	r3, #18
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	605a      	str	r2, [r3, #4]
                    break;
 80015d4:	e020      	b.n	8001618 <xTaskGenericNotifyFromISR+0x14c>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80015d6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d007      	beq.n	80015ee <xTaskGenericNotifyFromISR+0x122>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80015de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	3312      	adds	r3, #18
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4413      	add	r3, r2
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80015ec:	e014      	b.n	8001618 <xTaskGenericNotifyFromISR+0x14c>
                        xReturn = pdFAIL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 80015f2:	e011      	b.n	8001618 <xTaskGenericNotifyFromISR+0x14c>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80015f4:	4b5f      	ldr	r3, [pc, #380]	; (8001774 <xTaskGenericNotifyFromISR+0x2a8>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d00c      	beq.n	8001616 <xTaskGenericNotifyFromISR+0x14a>
        __asm volatile
 80015fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001600:	f383 8811 	msr	BASEPRI, r3
 8001604:	f3bf 8f6f 	isb	sy
 8001608:	f3bf 8f4f 	dsb	sy
 800160c:	61bb      	str	r3, [r7, #24]
    }
 800160e:	bf00      	nop
 8001610:	e7fe      	b.n	8001610 <xTaskGenericNotifyFromISR+0x144>
                    break;
 8001612:	bf00      	nop
 8001614:	e000      	b.n	8001618 <xTaskGenericNotifyFromISR+0x14c>
                    break;
 8001616:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8001618:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800161c:	2b01      	cmp	r3, #1
 800161e:	f040 809e 	bne.w	800175e <xTaskGenericNotifyFromISR+0x292>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8001622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001626:	2b00      	cmp	r3, #0
 8001628:	d00a      	beq.n	8001640 <xTaskGenericNotifyFromISR+0x174>
        __asm volatile
 800162a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800162e:	f383 8811 	msr	BASEPRI, r3
 8001632:	f3bf 8f6f 	isb	sy
 8001636:	f3bf 8f4f 	dsb	sy
 800163a:	617b      	str	r3, [r7, #20]
    }
 800163c:	bf00      	nop
 800163e:	e7fe      	b.n	800163e <xTaskGenericNotifyFromISR+0x172>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001640:	4b4d      	ldr	r3, [pc, #308]	; (8001778 <xTaskGenericNotifyFromISR+0x2ac>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d15e      	bne.n	8001706 <xTaskGenericNotifyFromISR+0x23a>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800164a:	695b      	ldr	r3, [r3, #20]
 800164c:	633b      	str	r3, [r7, #48]	; 0x30
 800164e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001654:	68d2      	ldr	r2, [r2, #12]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800165e:	6892      	ldr	r2, [r2, #8]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001668:	3304      	adds	r3, #4
 800166a:	429a      	cmp	r2, r3
 800166c:	d103      	bne.n	8001676 <xTaskGenericNotifyFromISR+0x1aa>
 800166e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001670:	68da      	ldr	r2, [r3, #12]
 8001672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001678:	2200      	movs	r2, #0
 800167a:	615a      	str	r2, [r3, #20]
 800167c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	1e5a      	subs	r2, r3, #1
 8001682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001684:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168a:	2201      	movs	r2, #1
 800168c:	409a      	lsls	r2, r3
 800168e:	4b3b      	ldr	r3, [pc, #236]	; (800177c <xTaskGenericNotifyFromISR+0x2b0>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4313      	orrs	r3, r2
 8001694:	4a39      	ldr	r2, [pc, #228]	; (800177c <xTaskGenericNotifyFromISR+0x2b0>)
 8001696:	6013      	str	r3, [r2, #0]
 8001698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800169a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800169c:	4938      	ldr	r1, [pc, #224]	; (8001780 <xTaskGenericNotifyFromISR+0x2b4>)
 800169e:	4613      	mov	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	440b      	add	r3, r1
 80016a8:	3304      	adds	r3, #4
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016ba:	60da      	str	r2, [r3, #12]
 80016bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80016c2:	3204      	adds	r2, #4
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016c8:	1d1a      	adds	r2, r3, #4
 80016ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016d2:	4613      	mov	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4413      	add	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4a29      	ldr	r2, [pc, #164]	; (8001780 <xTaskGenericNotifyFromISR+0x2b4>)
 80016dc:	441a      	add	r2, r3
 80016de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016e0:	615a      	str	r2, [r3, #20]
 80016e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016e6:	4926      	ldr	r1, [pc, #152]	; (8001780 <xTaskGenericNotifyFromISR+0x2b4>)
 80016e8:	4613      	mov	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	440b      	add	r3, r1
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	1c59      	adds	r1, r3, #1
 80016f6:	4822      	ldr	r0, [pc, #136]	; (8001780 <xTaskGenericNotifyFromISR+0x2b4>)
 80016f8:	4613      	mov	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4403      	add	r3, r0
 8001702:	6019      	str	r1, [r3, #0]
 8001704:	e01b      	b.n	800173e <xTaskGenericNotifyFromISR+0x272>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8001706:	4b1f      	ldr	r3, [pc, #124]	; (8001784 <xTaskGenericNotifyFromISR+0x2b8>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	637b      	str	r3, [r7, #52]	; 0x34
 800170c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800170e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001710:	61da      	str	r2, [r3, #28]
 8001712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001714:	689a      	ldr	r2, [r3, #8]
 8001716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001718:	621a      	str	r2, [r3, #32]
 800171a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001720:	3218      	adds	r2, #24
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001726:	f103 0218 	add.w	r2, r3, #24
 800172a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800172c:	609a      	str	r2, [r3, #8]
 800172e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001730:	4a14      	ldr	r2, [pc, #80]	; (8001784 <xTaskGenericNotifyFromISR+0x2b8>)
 8001732:	629a      	str	r2, [r3, #40]	; 0x28
 8001734:	4b13      	ldr	r3, [pc, #76]	; (8001784 <xTaskGenericNotifyFromISR+0x2b8>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	3301      	adds	r3, #1
 800173a:	4a12      	ldr	r2, [pc, #72]	; (8001784 <xTaskGenericNotifyFromISR+0x2b8>)
 800173c:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800173e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001742:	4b11      	ldr	r3, [pc, #68]	; (8001788 <xTaskGenericNotifyFromISR+0x2bc>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001748:	429a      	cmp	r2, r3
 800174a:	d908      	bls.n	800175e <xTaskGenericNotifyFromISR+0x292>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 800174c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800174e:	2b00      	cmp	r3, #0
 8001750:	d002      	beq.n	8001758 <xTaskGenericNotifyFromISR+0x28c>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8001752:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001754:	2201      	movs	r2, #1
 8001756:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <xTaskGenericNotifyFromISR+0x2c0>)
 800175a:	2201      	movs	r2, #1
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001760:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001768:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 800176a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 800176c:	4618      	mov	r0, r3
 800176e:	3748      	adds	r7, #72	; 0x48
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	200001c8 	.word	0x200001c8
 8001778:	200001ec 	.word	0x200001ec
 800177c:	200001cc 	.word	0x200001cc
 8001780:	200000c8 	.word	0x200000c8
 8001784:	20000184 	.word	0x20000184
 8001788:	200000c4 	.word	0x200000c4
 800178c:	200001d8 	.word	0x200001d8

08001790 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800179a:	4b36      	ldr	r3, [pc, #216]	; (8001874 <prvAddCurrentTaskToDelayedList+0xe4>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80017a0:	4b35      	ldr	r3, [pc, #212]	; (8001878 <prvAddCurrentTaskToDelayedList+0xe8>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	3304      	adds	r3, #4
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff f94a 	bl	8000a40 <uxListRemove>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10b      	bne.n	80017ca <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80017b2:	4b31      	ldr	r3, [pc, #196]	; (8001878 <prvAddCurrentTaskToDelayedList+0xe8>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b8:	2201      	movs	r2, #1
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43da      	mvns	r2, r3
 80017c0:	4b2e      	ldr	r3, [pc, #184]	; (800187c <prvAddCurrentTaskToDelayedList+0xec>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4013      	ands	r3, r2
 80017c6:	4a2d      	ldr	r2, [pc, #180]	; (800187c <prvAddCurrentTaskToDelayedList+0xec>)
 80017c8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d0:	d124      	bne.n	800181c <prvAddCurrentTaskToDelayedList+0x8c>
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d021      	beq.n	800181c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80017d8:	4b29      	ldr	r3, [pc, #164]	; (8001880 <prvAddCurrentTaskToDelayedList+0xf0>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	4b26      	ldr	r3, [pc, #152]	; (8001878 <prvAddCurrentTaskToDelayedList+0xe8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	4b24      	ldr	r3, [pc, #144]	; (8001878 <prvAddCurrentTaskToDelayedList+0xe8>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	6892      	ldr	r2, [r2, #8]
 80017ee:	60da      	str	r2, [r3, #12]
 80017f0:	4b21      	ldr	r3, [pc, #132]	; (8001878 <prvAddCurrentTaskToDelayedList+0xe8>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	3204      	adds	r2, #4
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	4b1e      	ldr	r3, [pc, #120]	; (8001878 <prvAddCurrentTaskToDelayedList+0xe8>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	1d1a      	adds	r2, r3, #4
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	4b1c      	ldr	r3, [pc, #112]	; (8001878 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a1d      	ldr	r2, [pc, #116]	; (8001880 <prvAddCurrentTaskToDelayedList+0xf0>)
 800180c:	615a      	str	r2, [r3, #20]
 800180e:	4b1c      	ldr	r3, [pc, #112]	; (8001880 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	3301      	adds	r3, #1
 8001814:	4a1a      	ldr	r2, [pc, #104]	; (8001880 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800181a:	e026      	b.n	800186a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001824:	4b14      	ldr	r3, [pc, #80]	; (8001878 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	429a      	cmp	r2, r3
 8001832:	d209      	bcs.n	8001848 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001834:	4b13      	ldr	r3, [pc, #76]	; (8001884 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <prvAddCurrentTaskToDelayedList+0xe8>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	3304      	adds	r3, #4
 800183e:	4619      	mov	r1, r3
 8001840:	4610      	mov	r0, r2
 8001842:	f7ff f8c4 	bl	80009ce <vListInsert>
}
 8001846:	e010      	b.n	800186a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001848:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <prvAddCurrentTaskToDelayedList+0xf8>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <prvAddCurrentTaskToDelayedList+0xe8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	3304      	adds	r3, #4
 8001852:	4619      	mov	r1, r3
 8001854:	4610      	mov	r0, r2
 8001856:	f7ff f8ba 	bl	80009ce <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800185a:	4b0c      	ldr	r3, [pc, #48]	; (800188c <prvAddCurrentTaskToDelayedList+0xfc>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	429a      	cmp	r2, r3
 8001862:	d202      	bcs.n	800186a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8001864:	4a09      	ldr	r2, [pc, #36]	; (800188c <prvAddCurrentTaskToDelayedList+0xfc>)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6013      	str	r3, [r2, #0]
}
 800186a:	bf00      	nop
 800186c:	3718      	adds	r7, #24
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	200001c8 	.word	0x200001c8
 8001878:	200000c4 	.word	0x200000c4
 800187c:	200001cc 	.word	0x200001cc
 8001880:	200001b0 	.word	0x200001b0
 8001884:	20000180 	.word	0x20000180
 8001888:	2000017c 	.word	0x2000017c
 800188c:	200001e4 	.word	0x200001e4

08001890 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	3b04      	subs	r3, #4
 80018a0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018a8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	3b04      	subs	r3, #4
 80018ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	f023 0201 	bic.w	r2, r3, #1
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	3b04      	subs	r3, #4
 80018be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80018c0:	4a0c      	ldr	r2, [pc, #48]	; (80018f4 <pxPortInitialiseStack+0x64>)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	3b14      	subs	r3, #20
 80018ca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	3b04      	subs	r3, #4
 80018d6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f06f 0202 	mvn.w	r2, #2
 80018de:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	3b20      	subs	r3, #32
 80018e4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80018e6:	68fb      	ldr	r3, [r7, #12]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	080018f9 	.word	0x080018f9

080018f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8001902:	4b12      	ldr	r3, [pc, #72]	; (800194c <prvTaskExitError+0x54>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800190a:	d00a      	beq.n	8001922 <prvTaskExitError+0x2a>
        __asm volatile
 800190c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001910:	f383 8811 	msr	BASEPRI, r3
 8001914:	f3bf 8f6f 	isb	sy
 8001918:	f3bf 8f4f 	dsb	sy
 800191c:	60fb      	str	r3, [r7, #12]
    }
 800191e:	bf00      	nop
 8001920:	e7fe      	b.n	8001920 <prvTaskExitError+0x28>
        __asm volatile
 8001922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001926:	f383 8811 	msr	BASEPRI, r3
 800192a:	f3bf 8f6f 	isb	sy
 800192e:	f3bf 8f4f 	dsb	sy
 8001932:	60bb      	str	r3, [r7, #8]
    }
 8001934:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001936:	bf00      	nop
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0fc      	beq.n	8001938 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800193e:	bf00      	nop
 8001940:	bf00      	nop
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	20000004 	.word	0x20000004

08001950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001950:	4b07      	ldr	r3, [pc, #28]	; (8001970 <pxCurrentTCBConst2>)
 8001952:	6819      	ldr	r1, [r3, #0]
 8001954:	6808      	ldr	r0, [r1, #0]
 8001956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800195a:	f380 8809 	msr	PSP, r0
 800195e:	f3bf 8f6f 	isb	sy
 8001962:	f04f 0000 	mov.w	r0, #0
 8001966:	f380 8811 	msr	BASEPRI, r0
 800196a:	4770      	bx	lr
 800196c:	f3af 8000 	nop.w

08001970 <pxCurrentTCBConst2>:
 8001970:	200000c4 	.word	0x200000c4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001974:	bf00      	nop
 8001976:	bf00      	nop

08001978 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8001978:	4808      	ldr	r0, [pc, #32]	; (800199c <prvPortStartFirstTask+0x24>)
 800197a:	6800      	ldr	r0, [r0, #0]
 800197c:	6800      	ldr	r0, [r0, #0]
 800197e:	f380 8808 	msr	MSP, r0
 8001982:	f04f 0000 	mov.w	r0, #0
 8001986:	f380 8814 	msr	CONTROL, r0
 800198a:	b662      	cpsie	i
 800198c:	b661      	cpsie	f
 800198e:	f3bf 8f4f 	dsb	sy
 8001992:	f3bf 8f6f 	isb	sy
 8001996:	df00      	svc	0
 8001998:	bf00      	nop
 800199a:	0000      	.short	0x0000
 800199c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80019a0:	bf00      	nop
 80019a2:	bf00      	nop

080019a4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80019aa:	4b46      	ldr	r3, [pc, #280]	; (8001ac4 <xPortStartScheduler+0x120>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a46      	ldr	r2, [pc, #280]	; (8001ac8 <xPortStartScheduler+0x124>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d10a      	bne.n	80019ca <xPortStartScheduler+0x26>
        __asm volatile
 80019b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019b8:	f383 8811 	msr	BASEPRI, r3
 80019bc:	f3bf 8f6f 	isb	sy
 80019c0:	f3bf 8f4f 	dsb	sy
 80019c4:	613b      	str	r3, [r7, #16]
    }
 80019c6:	bf00      	nop
 80019c8:	e7fe      	b.n	80019c8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80019ca:	4b3e      	ldr	r3, [pc, #248]	; (8001ac4 <xPortStartScheduler+0x120>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a3f      	ldr	r2, [pc, #252]	; (8001acc <xPortStartScheduler+0x128>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d10a      	bne.n	80019ea <xPortStartScheduler+0x46>
        __asm volatile
 80019d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019d8:	f383 8811 	msr	BASEPRI, r3
 80019dc:	f3bf 8f6f 	isb	sy
 80019e0:	f3bf 8f4f 	dsb	sy
 80019e4:	60fb      	str	r3, [r7, #12]
    }
 80019e6:	bf00      	nop
 80019e8:	e7fe      	b.n	80019e8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80019ea:	4b39      	ldr	r3, [pc, #228]	; (8001ad0 <xPortStartScheduler+0x12c>)
 80019ec:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	22ff      	movs	r2, #255	; 0xff
 80019fa:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001a04:	78fb      	ldrb	r3, [r7, #3]
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	4b31      	ldr	r3, [pc, #196]	; (8001ad4 <xPortStartScheduler+0x130>)
 8001a10:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001a12:	4b31      	ldr	r3, [pc, #196]	; (8001ad8 <xPortStartScheduler+0x134>)
 8001a14:	2207      	movs	r2, #7
 8001a16:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001a18:	e009      	b.n	8001a2e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8001a1a:	4b2f      	ldr	r3, [pc, #188]	; (8001ad8 <xPortStartScheduler+0x134>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	4a2d      	ldr	r2, [pc, #180]	; (8001ad8 <xPortStartScheduler+0x134>)
 8001a22:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001a24:	78fb      	ldrb	r3, [r7, #3]
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001a2e:	78fb      	ldrb	r3, [r7, #3]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a36:	2b80      	cmp	r3, #128	; 0x80
 8001a38:	d0ef      	beq.n	8001a1a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001a3a:	4b27      	ldr	r3, [pc, #156]	; (8001ad8 <xPortStartScheduler+0x134>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f1c3 0307 	rsb	r3, r3, #7
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	d00a      	beq.n	8001a5c <xPortStartScheduler+0xb8>
        __asm volatile
 8001a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a4a:	f383 8811 	msr	BASEPRI, r3
 8001a4e:	f3bf 8f6f 	isb	sy
 8001a52:	f3bf 8f4f 	dsb	sy
 8001a56:	60bb      	str	r3, [r7, #8]
    }
 8001a58:	bf00      	nop
 8001a5a:	e7fe      	b.n	8001a5a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001a5c:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <xPortStartScheduler+0x134>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	021b      	lsls	r3, r3, #8
 8001a62:	4a1d      	ldr	r2, [pc, #116]	; (8001ad8 <xPortStartScheduler+0x134>)
 8001a64:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001a66:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <xPortStartScheduler+0x134>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001a6e:	4a1a      	ldr	r2, [pc, #104]	; (8001ad8 <xPortStartScheduler+0x134>)
 8001a70:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001a7a:	4b18      	ldr	r3, [pc, #96]	; (8001adc <xPortStartScheduler+0x138>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a17      	ldr	r2, [pc, #92]	; (8001adc <xPortStartScheduler+0x138>)
 8001a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a84:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001a86:	4b15      	ldr	r3, [pc, #84]	; (8001adc <xPortStartScheduler+0x138>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a14      	ldr	r2, [pc, #80]	; (8001adc <xPortStartScheduler+0x138>)
 8001a8c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001a90:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001a92:	f000 f8db 	bl	8001c4c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001a96:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <xPortStartScheduler+0x13c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8001a9c:	f000 f8fa 	bl	8001c94 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001aa0:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <xPortStartScheduler+0x140>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a0f      	ldr	r2, [pc, #60]	; (8001ae4 <xPortStartScheduler+0x140>)
 8001aa6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001aaa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001aac:	f7ff ff64 	bl	8001978 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001ab0:	f7ff fbfe 	bl	80012b0 <vTaskSwitchContext>
    prvTaskExitError();
 8001ab4:	f7ff ff20 	bl	80018f8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	e000ed00 	.word	0xe000ed00
 8001ac8:	410fc271 	.word	0x410fc271
 8001acc:	410fc270 	.word	0x410fc270
 8001ad0:	e000e400 	.word	0xe000e400
 8001ad4:	200001f0 	.word	0x200001f0
 8001ad8:	200001f4 	.word	0x200001f4
 8001adc:	e000ed20 	.word	0xe000ed20
 8001ae0:	20000004 	.word	0x20000004
 8001ae4:	e000ef34 	.word	0xe000ef34

08001ae8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
        __asm volatile
 8001aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001af2:	f383 8811 	msr	BASEPRI, r3
 8001af6:	f3bf 8f6f 	isb	sy
 8001afa:	f3bf 8f4f 	dsb	sy
 8001afe:	607b      	str	r3, [r7, #4]
    }
 8001b00:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8001b02:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <vPortEnterCritical+0x58>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	3301      	adds	r3, #1
 8001b08:	4a0d      	ldr	r2, [pc, #52]	; (8001b40 <vPortEnterCritical+0x58>)
 8001b0a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <vPortEnterCritical+0x58>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d10f      	bne.n	8001b34 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001b14:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <vPortEnterCritical+0x5c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00a      	beq.n	8001b34 <vPortEnterCritical+0x4c>
        __asm volatile
 8001b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b22:	f383 8811 	msr	BASEPRI, r3
 8001b26:	f3bf 8f6f 	isb	sy
 8001b2a:	f3bf 8f4f 	dsb	sy
 8001b2e:	603b      	str	r3, [r7, #0]
    }
 8001b30:	bf00      	nop
 8001b32:	e7fe      	b.n	8001b32 <vPortEnterCritical+0x4a>
    }
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	20000004 	.word	0x20000004
 8001b44:	e000ed04 	.word	0xe000ed04

08001b48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8001b4e:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <vPortExitCritical+0x50>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10a      	bne.n	8001b6c <vPortExitCritical+0x24>
        __asm volatile
 8001b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b5a:	f383 8811 	msr	BASEPRI, r3
 8001b5e:	f3bf 8f6f 	isb	sy
 8001b62:	f3bf 8f4f 	dsb	sy
 8001b66:	607b      	str	r3, [r7, #4]
    }
 8001b68:	bf00      	nop
 8001b6a:	e7fe      	b.n	8001b6a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8001b6c:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <vPortExitCritical+0x50>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	3b01      	subs	r3, #1
 8001b72:	4a09      	ldr	r2, [pc, #36]	; (8001b98 <vPortExitCritical+0x50>)
 8001b74:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001b76:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <vPortExitCritical+0x50>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d105      	bne.n	8001b8a <vPortExitCritical+0x42>
 8001b7e:	2300      	movs	r3, #0
 8001b80:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	f383 8811 	msr	BASEPRI, r3
    }
 8001b88:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	20000004 	.word	0x20000004
 8001b9c:	00000000 	.word	0x00000000

08001ba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001ba0:	f3ef 8009 	mrs	r0, PSP
 8001ba4:	f3bf 8f6f 	isb	sy
 8001ba8:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <pxCurrentTCBConst>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	f01e 0f10 	tst.w	lr, #16
 8001bb0:	bf08      	it	eq
 8001bb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001bb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bba:	6010      	str	r0, [r2, #0]
 8001bbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001bc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001bc4:	f380 8811 	msr	BASEPRI, r0
 8001bc8:	f3bf 8f4f 	dsb	sy
 8001bcc:	f3bf 8f6f 	isb	sy
 8001bd0:	f7ff fb6e 	bl	80012b0 <vTaskSwitchContext>
 8001bd4:	f04f 0000 	mov.w	r0, #0
 8001bd8:	f380 8811 	msr	BASEPRI, r0
 8001bdc:	bc09      	pop	{r0, r3}
 8001bde:	6819      	ldr	r1, [r3, #0]
 8001be0:	6808      	ldr	r0, [r1, #0]
 8001be2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001be6:	f01e 0f10 	tst.w	lr, #16
 8001bea:	bf08      	it	eq
 8001bec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001bf0:	f380 8809 	msr	PSP, r0
 8001bf4:	f3bf 8f6f 	isb	sy
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	f3af 8000 	nop.w

08001c00 <pxCurrentTCBConst>:
 8001c00:	200000c4 	.word	0x200000c4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001c04:	bf00      	nop
 8001c06:	bf00      	nop

08001c08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
        __asm volatile
 8001c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c12:	f383 8811 	msr	BASEPRI, r3
 8001c16:	f3bf 8f6f 	isb	sy
 8001c1a:	f3bf 8f4f 	dsb	sy
 8001c1e:	607b      	str	r3, [r7, #4]
    }
 8001c20:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001c22:	f7ff fa2f 	bl	8001084 <xTaskIncrementTick>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <SysTick_Handler+0x40>)
 8001c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	2300      	movs	r3, #0
 8001c36:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	f383 8811 	msr	BASEPRI, r3
    }
 8001c3e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	e000ed04 	.word	0xe000ed04

08001c4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001c50:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <vPortSetupTimerInterrupt+0x34>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001c56:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <vPortSetupTimerInterrupt+0x38>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001c5c:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <vPortSetupTimerInterrupt+0x3c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <vPortSetupTimerInterrupt+0x40>)
 8001c62:	fba2 2303 	umull	r2, r3, r2, r3
 8001c66:	099b      	lsrs	r3, r3, #6
 8001c68:	4a09      	ldr	r2, [pc, #36]	; (8001c90 <vPortSetupTimerInterrupt+0x44>)
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001c6e:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <vPortSetupTimerInterrupt+0x34>)
 8001c70:	2207      	movs	r2, #7
 8001c72:	601a      	str	r2, [r3, #0]
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	e000e010 	.word	0xe000e010
 8001c84:	e000e018 	.word	0xe000e018
 8001c88:	2000003c 	.word	0x2000003c
 8001c8c:	10624dd3 	.word	0x10624dd3
 8001c90:	e000e014 	.word	0xe000e014

08001c94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8001c94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001ca4 <vPortEnableVFP+0x10>
 8001c98:	6801      	ldr	r1, [r0, #0]
 8001c9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001c9e:	6001      	str	r1, [r0, #0]
 8001ca0:	4770      	bx	lr
 8001ca2:	0000      	.short	0x0000
 8001ca4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8001ca8:	bf00      	nop
 8001caa:	bf00      	nop

08001cac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8001cb2:	f3ef 8305 	mrs	r3, IPSR
 8001cb6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2b0f      	cmp	r3, #15
 8001cbc:	d914      	bls.n	8001ce8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001cbe:	4a17      	ldr	r2, [pc, #92]	; (8001d1c <vPortValidateInterruptPriority+0x70>)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001cc8:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <vPortValidateInterruptPriority+0x74>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	7afa      	ldrb	r2, [r7, #11]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d20a      	bcs.n	8001ce8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8001cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cd6:	f383 8811 	msr	BASEPRI, r3
 8001cda:	f3bf 8f6f 	isb	sy
 8001cde:	f3bf 8f4f 	dsb	sy
 8001ce2:	607b      	str	r3, [r7, #4]
    }
 8001ce4:	bf00      	nop
 8001ce6:	e7fe      	b.n	8001ce6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001ce8:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <vPortValidateInterruptPriority+0x78>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001cf0:	4b0d      	ldr	r3, [pc, #52]	; (8001d28 <vPortValidateInterruptPriority+0x7c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d90a      	bls.n	8001d0e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8001cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cfc:	f383 8811 	msr	BASEPRI, r3
 8001d00:	f3bf 8f6f 	isb	sy
 8001d04:	f3bf 8f4f 	dsb	sy
 8001d08:	603b      	str	r3, [r7, #0]
    }
 8001d0a:	bf00      	nop
 8001d0c:	e7fe      	b.n	8001d0c <vPortValidateInterruptPriority+0x60>
    }
 8001d0e:	bf00      	nop
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	e000e3f0 	.word	0xe000e3f0
 8001d20:	200001f0 	.word	0x200001f0
 8001d24:	e000ed0c 	.word	0xe000ed0c
 8001d28:	200001f4 	.word	0x200001f4

08001d2c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08a      	sub	sp, #40	; 0x28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8001d38:	f7ff f88a 	bl	8000e50 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8001d3c:	4b53      	ldr	r3, [pc, #332]	; (8001e8c <pvPortMalloc+0x160>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8001d44:	f000 f908 	bl	8001f58 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d012      	beq.n	8001d74 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8001d4e:	2208      	movs	r2, #8
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	3308      	adds	r3, #8
 8001d5a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d804      	bhi.n	8001d70 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	607b      	str	r3, [r7, #4]
 8001d6e:	e001      	b.n	8001d74 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	db70      	blt.n	8001e5c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d06d      	beq.n	8001e5c <pvPortMalloc+0x130>
 8001d80:	4b43      	ldr	r3, [pc, #268]	; (8001e90 <pvPortMalloc+0x164>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d868      	bhi.n	8001e5c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8001d8a:	4b42      	ldr	r3, [pc, #264]	; (8001e94 <pvPortMalloc+0x168>)
 8001d8c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8001d8e:	4b41      	ldr	r3, [pc, #260]	; (8001e94 <pvPortMalloc+0x168>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001d94:	e004      	b.n	8001da0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d903      	bls.n	8001db2 <pvPortMalloc+0x86>
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1f1      	bne.n	8001d96 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001db2:	4b36      	ldr	r3, [pc, #216]	; (8001e8c <pvPortMalloc+0x160>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d04f      	beq.n	8001e5c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001dbc:	6a3b      	ldr	r3, [r7, #32]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2208      	movs	r2, #8
 8001dc2:	4413      	add	r3, r2
 8001dc4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	6a3b      	ldr	r3, [r7, #32]
 8001dcc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	1ad2      	subs	r2, r2, r3
 8001dd6:	2308      	movs	r3, #8
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d91f      	bls.n	8001e1e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4413      	add	r3, r2
 8001de4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00a      	beq.n	8001e06 <pvPortMalloc+0xda>
        __asm volatile
 8001df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001df4:	f383 8811 	msr	BASEPRI, r3
 8001df8:	f3bf 8f6f 	isb	sy
 8001dfc:	f3bf 8f4f 	dsb	sy
 8001e00:	613b      	str	r3, [r7, #16]
    }
 8001e02:	bf00      	nop
 8001e04:	e7fe      	b.n	8001e04 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	1ad2      	subs	r2, r2, r3
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001e18:	6978      	ldr	r0, [r7, #20]
 8001e1a:	f000 f8f9 	bl	8002010 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001e1e:	4b1c      	ldr	r3, [pc, #112]	; (8001e90 <pvPortMalloc+0x164>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	4a19      	ldr	r2, [pc, #100]	; (8001e90 <pvPortMalloc+0x164>)
 8001e2a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001e2c:	4b18      	ldr	r3, [pc, #96]	; (8001e90 <pvPortMalloc+0x164>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4b19      	ldr	r3, [pc, #100]	; (8001e98 <pvPortMalloc+0x16c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d203      	bcs.n	8001e40 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001e38:	4b15      	ldr	r3, [pc, #84]	; (8001e90 <pvPortMalloc+0x164>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a16      	ldr	r2, [pc, #88]	; (8001e98 <pvPortMalloc+0x16c>)
 8001e3e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8001e52:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <pvPortMalloc+0x170>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	3301      	adds	r3, #1
 8001e58:	4a10      	ldr	r2, [pc, #64]	; (8001e9c <pvPortMalloc+0x170>)
 8001e5a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8001e5c:	f7ff f806 	bl	8000e6c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00a      	beq.n	8001e80 <pvPortMalloc+0x154>
        __asm volatile
 8001e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e6e:	f383 8811 	msr	BASEPRI, r3
 8001e72:	f3bf 8f6f 	isb	sy
 8001e76:	f3bf 8f4f 	dsb	sy
 8001e7a:	60fb      	str	r3, [r7, #12]
    }
 8001e7c:	bf00      	nop
 8001e7e:	e7fe      	b.n	8001e7e <pvPortMalloc+0x152>
    return pvReturn;
 8001e80:	69fb      	ldr	r3, [r7, #28]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3728      	adds	r7, #40	; 0x28
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000db8 	.word	0x20000db8
 8001e90:	20000dbc 	.word	0x20000dbc
 8001e94:	20000db0 	.word	0x20000db0
 8001e98:	20000dc0 	.word	0x20000dc0
 8001e9c:	20000dc4 	.word	0x20000dc4

08001ea0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d049      	beq.n	8001f46 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8001eb2:	2308      	movs	r3, #8
 8001eb4:	425b      	negs	r3, r3
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	4413      	add	r3, r2
 8001eba:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	db0a      	blt.n	8001ede <vPortFree+0x3e>
        __asm volatile
 8001ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ecc:	f383 8811 	msr	BASEPRI, r3
 8001ed0:	f3bf 8f6f 	isb	sy
 8001ed4:	f3bf 8f4f 	dsb	sy
 8001ed8:	60fb      	str	r3, [r7, #12]
    }
 8001eda:	bf00      	nop
 8001edc:	e7fe      	b.n	8001edc <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00a      	beq.n	8001efc <vPortFree+0x5c>
        __asm volatile
 8001ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eea:	f383 8811 	msr	BASEPRI, r3
 8001eee:	f3bf 8f6f 	isb	sy
 8001ef2:	f3bf 8f4f 	dsb	sy
 8001ef6:	60bb      	str	r3, [r7, #8]
    }
 8001ef8:	bf00      	nop
 8001efa:	e7fe      	b.n	8001efa <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	0fdb      	lsrs	r3, r3, #31
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d01c      	beq.n	8001f46 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d118      	bne.n	8001f46 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8001f20:	f7fe ff96 	bl	8000e50 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <vPortFree+0xb0>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	4a08      	ldr	r2, [pc, #32]	; (8001f50 <vPortFree+0xb0>)
 8001f30:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001f32:	6938      	ldr	r0, [r7, #16]
 8001f34:	f000 f86c 	bl	8002010 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8001f38:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <vPortFree+0xb4>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	4a05      	ldr	r2, [pc, #20]	; (8001f54 <vPortFree+0xb4>)
 8001f40:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8001f42:	f7fe ff93 	bl	8000e6c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8001f46:	bf00      	nop
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000dbc 	.word	0x20000dbc
 8001f54:	20000dc8 	.word	0x20000dc8

08001f58 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001f5e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001f62:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8001f64:	4b25      	ldr	r3, [pc, #148]	; (8001ffc <prvHeapInit+0xa4>)
 8001f66:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00c      	beq.n	8001f8c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	3307      	adds	r3, #7
 8001f76:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f023 0307 	bic.w	r3, r3, #7
 8001f7e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8001f80:	68ba      	ldr	r2, [r7, #8]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	4a1d      	ldr	r2, [pc, #116]	; (8001ffc <prvHeapInit+0xa4>)
 8001f88:	4413      	add	r3, r2
 8001f8a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001f90:	4a1b      	ldr	r2, [pc, #108]	; (8002000 <prvHeapInit+0xa8>)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8001f96:	4b1a      	ldr	r3, [pc, #104]	; (8002000 <prvHeapInit+0xa8>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8001fa4:	2208      	movs	r2, #8
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	1a9b      	subs	r3, r3, r2
 8001faa:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f023 0307 	bic.w	r3, r3, #7
 8001fb2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4a13      	ldr	r2, [pc, #76]	; (8002004 <prvHeapInit+0xac>)
 8001fb8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8001fba:	4b12      	ldr	r3, [pc, #72]	; (8002004 <prvHeapInit+0xac>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8001fc2:	4b10      	ldr	r3, [pc, #64]	; (8002004 <prvHeapInit+0xac>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	1ad2      	subs	r2, r2, r3
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001fd8:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <prvHeapInit+0xac>)
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	4a08      	ldr	r2, [pc, #32]	; (8002008 <prvHeapInit+0xb0>)
 8001fe6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	4a07      	ldr	r2, [pc, #28]	; (800200c <prvHeapInit+0xb4>)
 8001fee:	6013      	str	r3, [r2, #0]
}
 8001ff0:	bf00      	nop
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	200001f8 	.word	0x200001f8
 8002000:	20000db0 	.word	0x20000db0
 8002004:	20000db8 	.word	0x20000db8
 8002008:	20000dc0 	.word	0x20000dc0
 800200c:	20000dbc 	.word	0x20000dbc

08002010 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002018:	4b28      	ldr	r3, [pc, #160]	; (80020bc <prvInsertBlockIntoFreeList+0xac>)
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	e002      	b.n	8002024 <prvInsertBlockIntoFreeList+0x14>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	429a      	cmp	r2, r3
 800202c:	d8f7      	bhi.n	800201e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	4413      	add	r3, r2
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	429a      	cmp	r2, r3
 800203e:	d108      	bne.n	8002052 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	441a      	add	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	441a      	add	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	429a      	cmp	r2, r3
 8002064:	d118      	bne.n	8002098 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <prvInsertBlockIntoFreeList+0xb0>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d00d      	beq.n	800208e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	441a      	add	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	e008      	b.n	80020a0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800208e:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <prvInsertBlockIntoFreeList+0xb0>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	e003      	b.n	80020a0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d002      	beq.n	80020ae <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80020ae:	bf00      	nop
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	20000db0 	.word	0x20000db0
 80020c0:	20000db8 	.word	0x20000db8

080020c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020ca:	f001 fc32 	bl	8003932 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020ce:	f000 f86d 	bl	80021ac <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80020d2:	f000 f8c9 	bl	8002268 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020d6:	f000 fc1b 	bl	8002910 <MX_GPIO_Init>
  MX_ADC1_Init();
 80020da:	f000 f8f5 	bl	80022c8 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 80020de:	f000 f957 	bl	8002390 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 80020e2:	f000 f98d 	bl	8002400 <MX_I2C1_Init>
  MX_I2C2_Init();
 80020e6:	f000 f9c9 	bl	800247c <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 80020ea:	f000 fa05 	bl	80024f8 <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 80020ee:	f000 fa59 	bl	80025a4 <MX_SPI1_Init>
  MX_SPI3_Init();
 80020f2:	f000 fa95 	bl	8002620 <MX_SPI3_Init>
  MX_UART4_Init();
 80020f6:	f000 fad1 	bl	800269c <MX_UART4_Init>
  MX_USART1_UART_Init();
 80020fa:	f000 fb1b 	bl	8002734 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80020fe:	f000 fb65 	bl	80027cc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002102:	f000 fbb1 	bl	8002868 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8002106:	f000 fbfb 	bl	8002900 <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
 MyLED2_init();
 800210a:	f000 fd53 	bl	8002bb4 <MyLED2_init>
 MyButton_init();
 800210e:	f000 fd83 	bl	8002c18 <MyButton_init>
 MyUART1_init();
 8002112:	f000 fdc9 	bl	8002ca8 <MyUART1_init>
 BSP_TSENSOR_Init();
 8002116:	f007 ffeb 	bl	800a0f0 <BSP_TSENSOR_Init>

 HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), 1000);
 800211a:	481a      	ldr	r0, [pc, #104]	; (8002184 <main+0xc0>)
 800211c:	f7fe f870 	bl	8000200 <strlen>
 8002120:	4603      	mov	r3, r0
 8002122:	b29a      	uxth	r2, r3
 8002124:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002128:	4916      	ldr	r1, [pc, #88]	; (8002184 <main+0xc0>)
 800212a:	4817      	ldr	r0, [pc, #92]	; (8002188 <main+0xc4>)
 800212c:	f006 fc44 	bl	80089b8 <HAL_UART_Transmit>

 flag = xTaskCreate(SOS_Transmit, "SOS_Transmit", 200, (void *) 300, 3, &pSOS_Transmit);
 8002130:	4b16      	ldr	r3, [pc, #88]	; (800218c <main+0xc8>)
 8002132:	9301      	str	r3, [sp, #4]
 8002134:	2303      	movs	r3, #3
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800213c:	22c8      	movs	r2, #200	; 0xc8
 800213e:	4914      	ldr	r1, [pc, #80]	; (8002190 <main+0xcc>)
 8002140:	4814      	ldr	r0, [pc, #80]	; (8002194 <main+0xd0>)
 8002142:	f7fe fca7 	bl	8000a94 <xTaskCreate>
 8002146:	6078      	str	r0, [r7, #4]
 if(flag!=pdPASS)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d001      	beq.n	8002152 <main+0x8e>
 {
	 Error_Handler();
 800214e:	f000 feed 	bl	8002f2c <Error_Handler>
 }
 LastWakeTime=xTaskGetTickCount();
 8002152:	f7fe ff87 	bl	8001064 <xTaskGetTickCount>
 8002156:	4603      	mov	r3, r0
 8002158:	4a0f      	ldr	r2, [pc, #60]	; (8002198 <main+0xd4>)
 800215a:	6013      	str	r3, [r2, #0]

 HAL_UART_Receive_IT(&huart1, &receiveBuf, 1);
 pUARTQueue = xQueueCreate(10, sizeof(uint8_t));
*/

 flag_tempSensor = xTaskCreate(TempSensorRead, "TempSensorRead", 200, "\r\n Temperature Sensor Reading!!!", 3, &pTempSensorRead);
 800215c:	4b0f      	ldr	r3, [pc, #60]	; (800219c <main+0xd8>)
 800215e:	9301      	str	r3, [sp, #4]
 8002160:	2303      	movs	r3, #3
 8002162:	9300      	str	r3, [sp, #0]
 8002164:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <main+0xdc>)
 8002166:	22c8      	movs	r2, #200	; 0xc8
 8002168:	490e      	ldr	r1, [pc, #56]	; (80021a4 <main+0xe0>)
 800216a:	480f      	ldr	r0, [pc, #60]	; (80021a8 <main+0xe4>)
 800216c:	f7fe fc92 	bl	8000a94 <xTaskCreate>
 8002170:	6038      	str	r0, [r7, #0]
 if(flag_tempSensor!=pdPASS)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d001      	beq.n	800217c <main+0xb8>
  {
 	 Error_Handler();
 8002178:	f000 fed8 	bl	8002f2c <Error_Handler>
  }
 //start Scheduler
 vTaskStartScheduler();
 800217c:	f7fe fe1c 	bl	8000db8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002180:	e7fe      	b.n	8002180 <main+0xbc>
 8002182:	bf00      	nop
 8002184:	20000008 	.word	0x20000008
 8002188:	200010d4 	.word	0x200010d4
 800218c:	20000dcc 	.word	0x20000dcc
 8002190:	0800acb0 	.word	0x0800acb0
 8002194:	08002d69 	.word	0x08002d69
 8002198:	20000dd0 	.word	0x20000dd0
 800219c:	20000ddc 	.word	0x20000ddc
 80021a0:	0800acc0 	.word	0x0800acc0
 80021a4:	0800ace4 	.word	0x0800ace4
 80021a8:	08002e55 	.word	0x08002e55

080021ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b096      	sub	sp, #88	; 0x58
 80021b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021b2:	f107 0314 	add.w	r3, r7, #20
 80021b6:	2244      	movs	r2, #68	; 0x44
 80021b8:	2100      	movs	r1, #0
 80021ba:	4618      	mov	r0, r3
 80021bc:	f008 f8aa 	bl	800a314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021c0:	463b      	mov	r3, r7
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	605a      	str	r2, [r3, #4]
 80021c8:	609a      	str	r2, [r3, #8]
 80021ca:	60da      	str	r2, [r3, #12]
 80021cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80021ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80021d2:	f004 fb75 	bl	80068c0 <HAL_PWREx_ControlVoltageScaling>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80021dc:	f000 fea6 	bl	8002f2c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80021e0:	f004 fb3e 	bl	8006860 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80021e4:	4b1f      	ldr	r3, [pc, #124]	; (8002264 <SystemClock_Config+0xb8>)
 80021e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ea:	4a1e      	ldr	r2, [pc, #120]	; (8002264 <SystemClock_Config+0xb8>)
 80021ec:	f023 0318 	bic.w	r3, r3, #24
 80021f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 80021f4:	2316      	movs	r3, #22
 80021f6:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80021f8:	2301      	movs	r3, #1
 80021fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002200:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002202:	2340      	movs	r3, #64	; 0x40
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002206:	2301      	movs	r3, #1
 8002208:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800220a:	2300      	movs	r3, #0
 800220c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800220e:	2360      	movs	r3, #96	; 0x60
 8002210:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002212:	2300      	movs	r3, #0
 8002214:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002216:	f107 0314 	add.w	r3, r7, #20
 800221a:	4618      	mov	r0, r3
 800221c:	f004 fbf4 	bl	8006a08 <HAL_RCC_OscConfig>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8002226:	f000 fe81 	bl	8002f2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800222a:	230f      	movs	r3, #15
 800222c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800222e:	2301      	movs	r3, #1
 8002230:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002232:	2300      	movs	r3, #0
 8002234:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002236:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800223a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 800223c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002240:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002242:	463b      	mov	r3, r7
 8002244:	2100      	movs	r1, #0
 8002246:	4618      	mov	r0, r3
 8002248:	f004 fff8 	bl	800723c <HAL_RCC_ClockConfig>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002252:	f000 fe6b 	bl	8002f2c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002256:	f005 fe11 	bl	8007e7c <HAL_RCCEx_EnableMSIPLLMode>
}
 800225a:	bf00      	nop
 800225c:	3758      	adds	r7, #88	; 0x58
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40021000 	.word	0x40021000

08002268 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b0a6      	sub	sp, #152	; 0x98
 800226c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800226e:	1d3b      	adds	r3, r7, #4
 8002270:	2294      	movs	r2, #148	; 0x94
 8002272:	2100      	movs	r1, #0
 8002274:	4618      	mov	r0, r3
 8002276:	f008 f84d 	bl	800a314 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 800227a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800227e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002280:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002284:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002288:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800228c:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800228e:	2301      	movs	r3, #1
 8002290:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002292:	2301      	movs	r3, #1
 8002294:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002296:	2318      	movs	r3, #24
 8002298:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800229a:	2302      	movs	r3, #2
 800229c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800229e:	2302      	movs	r3, #2
 80022a0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80022a2:	2302      	movs	r3, #2
 80022a4:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80022a6:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80022aa:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022ac:	1d3b      	adds	r3, r7, #4
 80022ae:	4618      	mov	r0, r3
 80022b0:	f005 fab4 	bl	800781c <HAL_RCCEx_PeriphCLKConfig>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80022ba:	f000 fe37 	bl	8002f2c <Error_Handler>
  }
}
 80022be:	bf00      	nop
 80022c0:	3798      	adds	r7, #152	; 0x98
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80022ce:	463b      	mov	r3, r7
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	605a      	str	r2, [r3, #4]
 80022d6:	609a      	str	r2, [r3, #8]
 80022d8:	60da      	str	r2, [r3, #12]
 80022da:	611a      	str	r2, [r3, #16]
 80022dc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80022de:	4b29      	ldr	r3, [pc, #164]	; (8002384 <MX_ADC1_Init+0xbc>)
 80022e0:	4a29      	ldr	r2, [pc, #164]	; (8002388 <MX_ADC1_Init+0xc0>)
 80022e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80022e4:	4b27      	ldr	r3, [pc, #156]	; (8002384 <MX_ADC1_Init+0xbc>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80022ea:	4b26      	ldr	r3, [pc, #152]	; (8002384 <MX_ADC1_Init+0xbc>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022f0:	4b24      	ldr	r3, [pc, #144]	; (8002384 <MX_ADC1_Init+0xbc>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80022f6:	4b23      	ldr	r3, [pc, #140]	; (8002384 <MX_ADC1_Init+0xbc>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022fc:	4b21      	ldr	r3, [pc, #132]	; (8002384 <MX_ADC1_Init+0xbc>)
 80022fe:	2204      	movs	r2, #4
 8002300:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002302:	4b20      	ldr	r3, [pc, #128]	; (8002384 <MX_ADC1_Init+0xbc>)
 8002304:	2200      	movs	r2, #0
 8002306:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002308:	4b1e      	ldr	r3, [pc, #120]	; (8002384 <MX_ADC1_Init+0xbc>)
 800230a:	2200      	movs	r2, #0
 800230c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800230e:	4b1d      	ldr	r3, [pc, #116]	; (8002384 <MX_ADC1_Init+0xbc>)
 8002310:	2201      	movs	r2, #1
 8002312:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002314:	4b1b      	ldr	r3, [pc, #108]	; (8002384 <MX_ADC1_Init+0xbc>)
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800231c:	4b19      	ldr	r3, [pc, #100]	; (8002384 <MX_ADC1_Init+0xbc>)
 800231e:	2200      	movs	r2, #0
 8002320:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002322:	4b18      	ldr	r3, [pc, #96]	; (8002384 <MX_ADC1_Init+0xbc>)
 8002324:	2200      	movs	r2, #0
 8002326:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002328:	4b16      	ldr	r3, [pc, #88]	; (8002384 <MX_ADC1_Init+0xbc>)
 800232a:	2200      	movs	r2, #0
 800232c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002330:	4b14      	ldr	r3, [pc, #80]	; (8002384 <MX_ADC1_Init+0xbc>)
 8002332:	2200      	movs	r2, #0
 8002334:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002336:	4b13      	ldr	r3, [pc, #76]	; (8002384 <MX_ADC1_Init+0xbc>)
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800233e:	4811      	ldr	r0, [pc, #68]	; (8002384 <MX_ADC1_Init+0xbc>)
 8002340:	f001 fcd0 	bl	8003ce4 <HAL_ADC_Init>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800234a:	f000 fdef 	bl	8002f2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <MX_ADC1_Init+0xc4>)
 8002350:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002352:	2306      	movs	r3, #6
 8002354:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002356:	2300      	movs	r3, #0
 8002358:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800235a:	237f      	movs	r3, #127	; 0x7f
 800235c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800235e:	2304      	movs	r3, #4
 8002360:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002366:	463b      	mov	r3, r7
 8002368:	4619      	mov	r1, r3
 800236a:	4806      	ldr	r0, [pc, #24]	; (8002384 <MX_ADC1_Init+0xbc>)
 800236c:	f001 fe00 	bl	8003f70 <HAL_ADC_ConfigChannel>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002376:	f000 fdd9 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800237a:	bf00      	nop
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000de0 	.word	0x20000de0
 8002388:	50040000 	.word	0x50040000
 800238c:	04300002 	.word	0x04300002

08002390 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8002394:	4b18      	ldr	r3, [pc, #96]	; (80023f8 <MX_DFSDM1_Init+0x68>)
 8002396:	4a19      	ldr	r2, [pc, #100]	; (80023fc <MX_DFSDM1_Init+0x6c>)
 8002398:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 800239a:	4b17      	ldr	r3, [pc, #92]	; (80023f8 <MX_DFSDM1_Init+0x68>)
 800239c:	2201      	movs	r2, #1
 800239e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80023a0:	4b15      	ldr	r3, [pc, #84]	; (80023f8 <MX_DFSDM1_Init+0x68>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 80023a6:	4b14      	ldr	r3, [pc, #80]	; (80023f8 <MX_DFSDM1_Init+0x68>)
 80023a8:	2202      	movs	r2, #2
 80023aa:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80023ac:	4b12      	ldr	r3, [pc, #72]	; (80023f8 <MX_DFSDM1_Init+0x68>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80023b2:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <MX_DFSDM1_Init+0x68>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80023b8:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <MX_DFSDM1_Init+0x68>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80023be:	4b0e      	ldr	r3, [pc, #56]	; (80023f8 <MX_DFSDM1_Init+0x68>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80023c4:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <MX_DFSDM1_Init+0x68>)
 80023c6:	2204      	movs	r2, #4
 80023c8:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80023ca:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <MX_DFSDM1_Init+0x68>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80023d0:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <MX_DFSDM1_Init+0x68>)
 80023d2:	2201      	movs	r2, #1
 80023d4:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80023d6:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <MX_DFSDM1_Init+0x68>)
 80023d8:	2200      	movs	r2, #0
 80023da:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80023dc:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <MX_DFSDM1_Init+0x68>)
 80023de:	2200      	movs	r2, #0
 80023e0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80023e2:	4805      	ldr	r0, [pc, #20]	; (80023f8 <MX_DFSDM1_Init+0x68>)
 80023e4:	f002 faa2 	bl	800492c <HAL_DFSDM_ChannelInit>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 80023ee:	f000 fd9d 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000e48 	.word	0x20000e48
 80023fc:	40016040 	.word	0x40016040

08002400 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002404:	4b1b      	ldr	r3, [pc, #108]	; (8002474 <MX_I2C1_Init+0x74>)
 8002406:	4a1c      	ldr	r2, [pc, #112]	; (8002478 <MX_I2C1_Init+0x78>)
 8002408:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800240a:	4b1a      	ldr	r3, [pc, #104]	; (8002474 <MX_I2C1_Init+0x74>)
 800240c:	f640 6214 	movw	r2, #3604	; 0xe14
 8002410:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002412:	4b18      	ldr	r3, [pc, #96]	; (8002474 <MX_I2C1_Init+0x74>)
 8002414:	2200      	movs	r2, #0
 8002416:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002418:	4b16      	ldr	r3, [pc, #88]	; (8002474 <MX_I2C1_Init+0x74>)
 800241a:	2201      	movs	r2, #1
 800241c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800241e:	4b15      	ldr	r3, [pc, #84]	; (8002474 <MX_I2C1_Init+0x74>)
 8002420:	2200      	movs	r2, #0
 8002422:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002424:	4b13      	ldr	r3, [pc, #76]	; (8002474 <MX_I2C1_Init+0x74>)
 8002426:	2200      	movs	r2, #0
 8002428:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800242a:	4b12      	ldr	r3, [pc, #72]	; (8002474 <MX_I2C1_Init+0x74>)
 800242c:	2200      	movs	r2, #0
 800242e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002430:	4b10      	ldr	r3, [pc, #64]	; (8002474 <MX_I2C1_Init+0x74>)
 8002432:	2200      	movs	r2, #0
 8002434:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002436:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <MX_I2C1_Init+0x74>)
 8002438:	2200      	movs	r2, #0
 800243a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800243c:	480d      	ldr	r0, [pc, #52]	; (8002474 <MX_I2C1_Init+0x74>)
 800243e:	f002 fef1 	bl	8005224 <HAL_I2C_Init>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002448:	f000 fd70 	bl	8002f2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800244c:	2100      	movs	r1, #0
 800244e:	4809      	ldr	r0, [pc, #36]	; (8002474 <MX_I2C1_Init+0x74>)
 8002450:	f003 fc98 	bl	8005d84 <HAL_I2CEx_ConfigAnalogFilter>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800245a:	f000 fd67 	bl	8002f2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800245e:	2100      	movs	r1, #0
 8002460:	4804      	ldr	r0, [pc, #16]	; (8002474 <MX_I2C1_Init+0x74>)
 8002462:	f003 fcda 	bl	8005e1a <HAL_I2CEx_ConfigDigitalFilter>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800246c:	f000 fd5e 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002470:	bf00      	nop
 8002472:	bd80      	pop	{r7, pc}
 8002474:	20000e80 	.word	0x20000e80
 8002478:	40005400 	.word	0x40005400

0800247c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002480:	4b1b      	ldr	r3, [pc, #108]	; (80024f0 <MX_I2C2_Init+0x74>)
 8002482:	4a1c      	ldr	r2, [pc, #112]	; (80024f4 <MX_I2C2_Init+0x78>)
 8002484:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8002486:	4b1a      	ldr	r3, [pc, #104]	; (80024f0 <MX_I2C2_Init+0x74>)
 8002488:	f640 6214 	movw	r2, #3604	; 0xe14
 800248c:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800248e:	4b18      	ldr	r3, [pc, #96]	; (80024f0 <MX_I2C2_Init+0x74>)
 8002490:	2200      	movs	r2, #0
 8002492:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002494:	4b16      	ldr	r3, [pc, #88]	; (80024f0 <MX_I2C2_Init+0x74>)
 8002496:	2201      	movs	r2, #1
 8002498:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800249a:	4b15      	ldr	r3, [pc, #84]	; (80024f0 <MX_I2C2_Init+0x74>)
 800249c:	2200      	movs	r2, #0
 800249e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80024a0:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <MX_I2C2_Init+0x74>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80024a6:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <MX_I2C2_Init+0x74>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024ac:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <MX_I2C2_Init+0x74>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024b2:	4b0f      	ldr	r3, [pc, #60]	; (80024f0 <MX_I2C2_Init+0x74>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80024b8:	480d      	ldr	r0, [pc, #52]	; (80024f0 <MX_I2C2_Init+0x74>)
 80024ba:	f002 feb3 	bl	8005224 <HAL_I2C_Init>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80024c4:	f000 fd32 	bl	8002f2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80024c8:	2100      	movs	r1, #0
 80024ca:	4809      	ldr	r0, [pc, #36]	; (80024f0 <MX_I2C2_Init+0x74>)
 80024cc:	f003 fc5a 	bl	8005d84 <HAL_I2CEx_ConfigAnalogFilter>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80024d6:	f000 fd29 	bl	8002f2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80024da:	2100      	movs	r1, #0
 80024dc:	4804      	ldr	r0, [pc, #16]	; (80024f0 <MX_I2C2_Init+0x74>)
 80024de:	f003 fc9c 	bl	8005e1a <HAL_I2CEx_ConfigDigitalFilter>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80024e8:	f000 fd20 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80024ec:	bf00      	nop
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	20000ed4 	.word	0x20000ed4
 80024f4:	40005800 	.word	0x40005800

080024f8 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 80024fe:	1d3b      	adds	r3, r7, #4
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	605a      	str	r2, [r3, #4]
 8002506:	609a      	str	r2, [r3, #8]
 8002508:	60da      	str	r2, [r3, #12]
 800250a:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 800250c:	4b23      	ldr	r3, [pc, #140]	; (800259c <MX_OCTOSPI1_Init+0xa4>)
 800250e:	4a24      	ldr	r2, [pc, #144]	; (80025a0 <MX_OCTOSPI1_Init+0xa8>)
 8002510:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8002512:	4b22      	ldr	r3, [pc, #136]	; (800259c <MX_OCTOSPI1_Init+0xa4>)
 8002514:	2201      	movs	r2, #1
 8002516:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8002518:	4b20      	ldr	r3, [pc, #128]	; (800259c <MX_OCTOSPI1_Init+0xa4>)
 800251a:	2200      	movs	r2, #0
 800251c:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 800251e:	4b1f      	ldr	r3, [pc, #124]	; (800259c <MX_OCTOSPI1_Init+0xa4>)
 8002520:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002524:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8002526:	4b1d      	ldr	r3, [pc, #116]	; (800259c <MX_OCTOSPI1_Init+0xa4>)
 8002528:	2220      	movs	r2, #32
 800252a:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 800252c:	4b1b      	ldr	r3, [pc, #108]	; (800259c <MX_OCTOSPI1_Init+0xa4>)
 800252e:	2201      	movs	r2, #1
 8002530:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8002532:	4b1a      	ldr	r3, [pc, #104]	; (800259c <MX_OCTOSPI1_Init+0xa4>)
 8002534:	2200      	movs	r2, #0
 8002536:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8002538:	4b18      	ldr	r3, [pc, #96]	; (800259c <MX_OCTOSPI1_Init+0xa4>)
 800253a:	2200      	movs	r2, #0
 800253c:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 800253e:	4b17      	ldr	r3, [pc, #92]	; (800259c <MX_OCTOSPI1_Init+0xa4>)
 8002540:	2201      	movs	r2, #1
 8002542:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8002544:	4b15      	ldr	r3, [pc, #84]	; (800259c <MX_OCTOSPI1_Init+0xa4>)
 8002546:	2200      	movs	r2, #0
 8002548:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800254a:	4b14      	ldr	r3, [pc, #80]	; (800259c <MX_OCTOSPI1_Init+0xa4>)
 800254c:	2200      	movs	r2, #0
 800254e:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8002550:	4b12      	ldr	r3, [pc, #72]	; (800259c <MX_OCTOSPI1_Init+0xa4>)
 8002552:	2200      	movs	r2, #0
 8002554:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8002556:	4b11      	ldr	r3, [pc, #68]	; (800259c <MX_OCTOSPI1_Init+0xa4>)
 8002558:	2208      	movs	r2, #8
 800255a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 800255c:	480f      	ldr	r0, [pc, #60]	; (800259c <MX_OCTOSPI1_Init+0xa4>)
 800255e:	f003 fca9 	bl	8005eb4 <HAL_OSPI_Init>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8002568:	f000 fce0 	bl	8002f2c <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 800256c:	2301      	movs	r3, #1
 800256e:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8002570:	2301      	movs	r3, #1
 8002572:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8002574:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002578:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800257a:	1d3b      	adds	r3, r7, #4
 800257c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002580:	4619      	mov	r1, r3
 8002582:	4806      	ldr	r0, [pc, #24]	; (800259c <MX_OCTOSPI1_Init+0xa4>)
 8002584:	f003 fd50 	bl	8006028 <HAL_OSPIM_Config>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 800258e:	f000 fccd 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8002592:	bf00      	nop
 8002594:	3718      	adds	r7, #24
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	20000f28 	.word	0x20000f28
 80025a0:	a0001000 	.word	0xa0001000

080025a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80025a8:	4b1b      	ldr	r3, [pc, #108]	; (8002618 <MX_SPI1_Init+0x74>)
 80025aa:	4a1c      	ldr	r2, [pc, #112]	; (800261c <MX_SPI1_Init+0x78>)
 80025ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025ae:	4b1a      	ldr	r3, [pc, #104]	; (8002618 <MX_SPI1_Init+0x74>)
 80025b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025b6:	4b18      	ldr	r3, [pc, #96]	; (8002618 <MX_SPI1_Init+0x74>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80025bc:	4b16      	ldr	r3, [pc, #88]	; (8002618 <MX_SPI1_Init+0x74>)
 80025be:	f44f 7240 	mov.w	r2, #768	; 0x300
 80025c2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025c4:	4b14      	ldr	r3, [pc, #80]	; (8002618 <MX_SPI1_Init+0x74>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025ca:	4b13      	ldr	r3, [pc, #76]	; (8002618 <MX_SPI1_Init+0x74>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80025d0:	4b11      	ldr	r3, [pc, #68]	; (8002618 <MX_SPI1_Init+0x74>)
 80025d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80025d8:	4b0f      	ldr	r3, [pc, #60]	; (8002618 <MX_SPI1_Init+0x74>)
 80025da:	2208      	movs	r2, #8
 80025dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025de:	4b0e      	ldr	r3, [pc, #56]	; (8002618 <MX_SPI1_Init+0x74>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80025e4:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <MX_SPI1_Init+0x74>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025ea:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <MX_SPI1_Init+0x74>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80025f0:	4b09      	ldr	r3, [pc, #36]	; (8002618 <MX_SPI1_Init+0x74>)
 80025f2:	2207      	movs	r2, #7
 80025f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80025f6:	4b08      	ldr	r3, [pc, #32]	; (8002618 <MX_SPI1_Init+0x74>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80025fc:	4b06      	ldr	r3, [pc, #24]	; (8002618 <MX_SPI1_Init+0x74>)
 80025fe:	2208      	movs	r2, #8
 8002600:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002602:	4805      	ldr	r0, [pc, #20]	; (8002618 <MX_SPI1_Init+0x74>)
 8002604:	f005 fe32 	bl	800826c <HAL_SPI_Init>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800260e:	f000 fc8d 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20000f78 	.word	0x20000f78
 800261c:	40013000 	.word	0x40013000

08002620 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002624:	4b1b      	ldr	r3, [pc, #108]	; (8002694 <MX_SPI3_Init+0x74>)
 8002626:	4a1c      	ldr	r2, [pc, #112]	; (8002698 <MX_SPI3_Init+0x78>)
 8002628:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800262a:	4b1a      	ldr	r3, [pc, #104]	; (8002694 <MX_SPI3_Init+0x74>)
 800262c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002630:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002632:	4b18      	ldr	r3, [pc, #96]	; (8002694 <MX_SPI3_Init+0x74>)
 8002634:	2200      	movs	r2, #0
 8002636:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8002638:	4b16      	ldr	r3, [pc, #88]	; (8002694 <MX_SPI3_Init+0x74>)
 800263a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800263e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002640:	4b14      	ldr	r3, [pc, #80]	; (8002694 <MX_SPI3_Init+0x74>)
 8002642:	2200      	movs	r2, #0
 8002644:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002646:	4b13      	ldr	r3, [pc, #76]	; (8002694 <MX_SPI3_Init+0x74>)
 8002648:	2200      	movs	r2, #0
 800264a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800264c:	4b11      	ldr	r3, [pc, #68]	; (8002694 <MX_SPI3_Init+0x74>)
 800264e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002652:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002654:	4b0f      	ldr	r3, [pc, #60]	; (8002694 <MX_SPI3_Init+0x74>)
 8002656:	2208      	movs	r2, #8
 8002658:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800265a:	4b0e      	ldr	r3, [pc, #56]	; (8002694 <MX_SPI3_Init+0x74>)
 800265c:	2200      	movs	r2, #0
 800265e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002660:	4b0c      	ldr	r3, [pc, #48]	; (8002694 <MX_SPI3_Init+0x74>)
 8002662:	2200      	movs	r2, #0
 8002664:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002666:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <MX_SPI3_Init+0x74>)
 8002668:	2200      	movs	r2, #0
 800266a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800266c:	4b09      	ldr	r3, [pc, #36]	; (8002694 <MX_SPI3_Init+0x74>)
 800266e:	2207      	movs	r2, #7
 8002670:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002672:	4b08      	ldr	r3, [pc, #32]	; (8002694 <MX_SPI3_Init+0x74>)
 8002674:	2200      	movs	r2, #0
 8002676:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002678:	4b06      	ldr	r3, [pc, #24]	; (8002694 <MX_SPI3_Init+0x74>)
 800267a:	2208      	movs	r2, #8
 800267c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800267e:	4805      	ldr	r0, [pc, #20]	; (8002694 <MX_SPI3_Init+0x74>)
 8002680:	f005 fdf4 	bl	800826c <HAL_SPI_Init>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800268a:	f000 fc4f 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	20000fdc 	.word	0x20000fdc
 8002698:	40003c00 	.word	0x40003c00

0800269c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80026a0:	4b22      	ldr	r3, [pc, #136]	; (800272c <MX_UART4_Init+0x90>)
 80026a2:	4a23      	ldr	r2, [pc, #140]	; (8002730 <MX_UART4_Init+0x94>)
 80026a4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80026a6:	4b21      	ldr	r3, [pc, #132]	; (800272c <MX_UART4_Init+0x90>)
 80026a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026ac:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80026ae:	4b1f      	ldr	r3, [pc, #124]	; (800272c <MX_UART4_Init+0x90>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80026b4:	4b1d      	ldr	r3, [pc, #116]	; (800272c <MX_UART4_Init+0x90>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80026ba:	4b1c      	ldr	r3, [pc, #112]	; (800272c <MX_UART4_Init+0x90>)
 80026bc:	2200      	movs	r2, #0
 80026be:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80026c0:	4b1a      	ldr	r3, [pc, #104]	; (800272c <MX_UART4_Init+0x90>)
 80026c2:	220c      	movs	r2, #12
 80026c4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026c6:	4b19      	ldr	r3, [pc, #100]	; (800272c <MX_UART4_Init+0x90>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80026cc:	4b17      	ldr	r3, [pc, #92]	; (800272c <MX_UART4_Init+0x90>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026d2:	4b16      	ldr	r3, [pc, #88]	; (800272c <MX_UART4_Init+0x90>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026d8:	4b14      	ldr	r3, [pc, #80]	; (800272c <MX_UART4_Init+0x90>)
 80026da:	2200      	movs	r2, #0
 80026dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026de:	4b13      	ldr	r3, [pc, #76]	; (800272c <MX_UART4_Init+0x90>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80026e4:	4811      	ldr	r0, [pc, #68]	; (800272c <MX_UART4_Init+0x90>)
 80026e6:	f006 f917 	bl	8008918 <HAL_UART_Init>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80026f0:	f000 fc1c 	bl	8002f2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026f4:	2100      	movs	r1, #0
 80026f6:	480d      	ldr	r0, [pc, #52]	; (800272c <MX_UART4_Init+0x90>)
 80026f8:	f007 fadf 	bl	8009cba <HAL_UARTEx_SetTxFifoThreshold>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002702:	f000 fc13 	bl	8002f2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002706:	2100      	movs	r1, #0
 8002708:	4808      	ldr	r0, [pc, #32]	; (800272c <MX_UART4_Init+0x90>)
 800270a:	f007 fb14 	bl	8009d36 <HAL_UARTEx_SetRxFifoThreshold>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002714:	f000 fc0a 	bl	8002f2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002718:	4804      	ldr	r0, [pc, #16]	; (800272c <MX_UART4_Init+0x90>)
 800271a:	f007 fa95 	bl	8009c48 <HAL_UARTEx_DisableFifoMode>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002724:	f000 fc02 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002728:	bf00      	nop
 800272a:	bd80      	pop	{r7, pc}
 800272c:	20001040 	.word	0x20001040
 8002730:	40004c00 	.word	0x40004c00

08002734 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002738:	4b22      	ldr	r3, [pc, #136]	; (80027c4 <MX_USART1_UART_Init+0x90>)
 800273a:	4a23      	ldr	r2, [pc, #140]	; (80027c8 <MX_USART1_UART_Init+0x94>)
 800273c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800273e:	4b21      	ldr	r3, [pc, #132]	; (80027c4 <MX_USART1_UART_Init+0x90>)
 8002740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002744:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002746:	4b1f      	ldr	r3, [pc, #124]	; (80027c4 <MX_USART1_UART_Init+0x90>)
 8002748:	2200      	movs	r2, #0
 800274a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800274c:	4b1d      	ldr	r3, [pc, #116]	; (80027c4 <MX_USART1_UART_Init+0x90>)
 800274e:	2200      	movs	r2, #0
 8002750:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002752:	4b1c      	ldr	r3, [pc, #112]	; (80027c4 <MX_USART1_UART_Init+0x90>)
 8002754:	2200      	movs	r2, #0
 8002756:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002758:	4b1a      	ldr	r3, [pc, #104]	; (80027c4 <MX_USART1_UART_Init+0x90>)
 800275a:	220c      	movs	r2, #12
 800275c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800275e:	4b19      	ldr	r3, [pc, #100]	; (80027c4 <MX_USART1_UART_Init+0x90>)
 8002760:	2200      	movs	r2, #0
 8002762:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002764:	4b17      	ldr	r3, [pc, #92]	; (80027c4 <MX_USART1_UART_Init+0x90>)
 8002766:	2200      	movs	r2, #0
 8002768:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800276a:	4b16      	ldr	r3, [pc, #88]	; (80027c4 <MX_USART1_UART_Init+0x90>)
 800276c:	2200      	movs	r2, #0
 800276e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002770:	4b14      	ldr	r3, [pc, #80]	; (80027c4 <MX_USART1_UART_Init+0x90>)
 8002772:	2200      	movs	r2, #0
 8002774:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002776:	4b13      	ldr	r3, [pc, #76]	; (80027c4 <MX_USART1_UART_Init+0x90>)
 8002778:	2200      	movs	r2, #0
 800277a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800277c:	4811      	ldr	r0, [pc, #68]	; (80027c4 <MX_USART1_UART_Init+0x90>)
 800277e:	f006 f8cb 	bl	8008918 <HAL_UART_Init>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002788:	f000 fbd0 	bl	8002f2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800278c:	2100      	movs	r1, #0
 800278e:	480d      	ldr	r0, [pc, #52]	; (80027c4 <MX_USART1_UART_Init+0x90>)
 8002790:	f007 fa93 	bl	8009cba <HAL_UARTEx_SetTxFifoThreshold>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800279a:	f000 fbc7 	bl	8002f2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800279e:	2100      	movs	r1, #0
 80027a0:	4808      	ldr	r0, [pc, #32]	; (80027c4 <MX_USART1_UART_Init+0x90>)
 80027a2:	f007 fac8 	bl	8009d36 <HAL_UARTEx_SetRxFifoThreshold>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80027ac:	f000 fbbe 	bl	8002f2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80027b0:	4804      	ldr	r0, [pc, #16]	; (80027c4 <MX_USART1_UART_Init+0x90>)
 80027b2:	f007 fa49 	bl	8009c48 <HAL_UARTEx_DisableFifoMode>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80027bc:	f000 fbb6 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027c0:	bf00      	nop
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	200010d4 	.word	0x200010d4
 80027c8:	40013800 	.word	0x40013800

080027cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027d0:	4b23      	ldr	r3, [pc, #140]	; (8002860 <MX_USART2_UART_Init+0x94>)
 80027d2:	4a24      	ldr	r2, [pc, #144]	; (8002864 <MX_USART2_UART_Init+0x98>)
 80027d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80027d6:	4b22      	ldr	r3, [pc, #136]	; (8002860 <MX_USART2_UART_Init+0x94>)
 80027d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027de:	4b20      	ldr	r3, [pc, #128]	; (8002860 <MX_USART2_UART_Init+0x94>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027e4:	4b1e      	ldr	r3, [pc, #120]	; (8002860 <MX_USART2_UART_Init+0x94>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027ea:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <MX_USART2_UART_Init+0x94>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027f0:	4b1b      	ldr	r3, [pc, #108]	; (8002860 <MX_USART2_UART_Init+0x94>)
 80027f2:	220c      	movs	r2, #12
 80027f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80027f6:	4b1a      	ldr	r3, [pc, #104]	; (8002860 <MX_USART2_UART_Init+0x94>)
 80027f8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80027fc:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027fe:	4b18      	ldr	r3, [pc, #96]	; (8002860 <MX_USART2_UART_Init+0x94>)
 8002800:	2200      	movs	r2, #0
 8002802:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002804:	4b16      	ldr	r3, [pc, #88]	; (8002860 <MX_USART2_UART_Init+0x94>)
 8002806:	2200      	movs	r2, #0
 8002808:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800280a:	4b15      	ldr	r3, [pc, #84]	; (8002860 <MX_USART2_UART_Init+0x94>)
 800280c:	2200      	movs	r2, #0
 800280e:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002810:	4b13      	ldr	r3, [pc, #76]	; (8002860 <MX_USART2_UART_Init+0x94>)
 8002812:	2200      	movs	r2, #0
 8002814:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002816:	4812      	ldr	r0, [pc, #72]	; (8002860 <MX_USART2_UART_Init+0x94>)
 8002818:	f006 f87e 	bl	8008918 <HAL_UART_Init>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8002822:	f000 fb83 	bl	8002f2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002826:	2100      	movs	r1, #0
 8002828:	480d      	ldr	r0, [pc, #52]	; (8002860 <MX_USART2_UART_Init+0x94>)
 800282a:	f007 fa46 	bl	8009cba <HAL_UARTEx_SetTxFifoThreshold>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8002834:	f000 fb7a 	bl	8002f2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002838:	2100      	movs	r1, #0
 800283a:	4809      	ldr	r0, [pc, #36]	; (8002860 <MX_USART2_UART_Init+0x94>)
 800283c:	f007 fa7b 	bl	8009d36 <HAL_UARTEx_SetRxFifoThreshold>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8002846:	f000 fb71 	bl	8002f2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800284a:	4805      	ldr	r0, [pc, #20]	; (8002860 <MX_USART2_UART_Init+0x94>)
 800284c:	f007 f9fc 	bl	8009c48 <HAL_UARTEx_DisableFifoMode>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8002856:	f000 fb69 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800285a:	bf00      	nop
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	20001168 	.word	0x20001168
 8002864:	40004400 	.word	0x40004400

08002868 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800286c:	4b22      	ldr	r3, [pc, #136]	; (80028f8 <MX_USART3_UART_Init+0x90>)
 800286e:	4a23      	ldr	r2, [pc, #140]	; (80028fc <MX_USART3_UART_Init+0x94>)
 8002870:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002872:	4b21      	ldr	r3, [pc, #132]	; (80028f8 <MX_USART3_UART_Init+0x90>)
 8002874:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002878:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800287a:	4b1f      	ldr	r3, [pc, #124]	; (80028f8 <MX_USART3_UART_Init+0x90>)
 800287c:	2200      	movs	r2, #0
 800287e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002880:	4b1d      	ldr	r3, [pc, #116]	; (80028f8 <MX_USART3_UART_Init+0x90>)
 8002882:	2200      	movs	r2, #0
 8002884:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002886:	4b1c      	ldr	r3, [pc, #112]	; (80028f8 <MX_USART3_UART_Init+0x90>)
 8002888:	2200      	movs	r2, #0
 800288a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800288c:	4b1a      	ldr	r3, [pc, #104]	; (80028f8 <MX_USART3_UART_Init+0x90>)
 800288e:	220c      	movs	r2, #12
 8002890:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002892:	4b19      	ldr	r3, [pc, #100]	; (80028f8 <MX_USART3_UART_Init+0x90>)
 8002894:	2200      	movs	r2, #0
 8002896:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002898:	4b17      	ldr	r3, [pc, #92]	; (80028f8 <MX_USART3_UART_Init+0x90>)
 800289a:	2200      	movs	r2, #0
 800289c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800289e:	4b16      	ldr	r3, [pc, #88]	; (80028f8 <MX_USART3_UART_Init+0x90>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028a4:	4b14      	ldr	r3, [pc, #80]	; (80028f8 <MX_USART3_UART_Init+0x90>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028aa:	4b13      	ldr	r3, [pc, #76]	; (80028f8 <MX_USART3_UART_Init+0x90>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80028b0:	4811      	ldr	r0, [pc, #68]	; (80028f8 <MX_USART3_UART_Init+0x90>)
 80028b2:	f006 f831 	bl	8008918 <HAL_UART_Init>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80028bc:	f000 fb36 	bl	8002f2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028c0:	2100      	movs	r1, #0
 80028c2:	480d      	ldr	r0, [pc, #52]	; (80028f8 <MX_USART3_UART_Init+0x90>)
 80028c4:	f007 f9f9 	bl	8009cba <HAL_UARTEx_SetTxFifoThreshold>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80028ce:	f000 fb2d 	bl	8002f2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028d2:	2100      	movs	r1, #0
 80028d4:	4808      	ldr	r0, [pc, #32]	; (80028f8 <MX_USART3_UART_Init+0x90>)
 80028d6:	f007 fa2e 	bl	8009d36 <HAL_UARTEx_SetRxFifoThreshold>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80028e0:	f000 fb24 	bl	8002f2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80028e4:	4804      	ldr	r0, [pc, #16]	; (80028f8 <MX_USART3_UART_Init+0x90>)
 80028e6:	f007 f9af 	bl	8009c48 <HAL_UARTEx_DisableFifoMode>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80028f0:	f000 fb1c 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80028f4:	bf00      	nop
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	200011fc 	.word	0x200011fc
 80028fc:	40004800 	.word	0x40004800

08002900 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002904:	bf00      	nop
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
	...

08002910 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b08c      	sub	sp, #48	; 0x30
 8002914:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002916:	f107 031c 	add.w	r3, r7, #28
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	605a      	str	r2, [r3, #4]
 8002920:	609a      	str	r2, [r3, #8]
 8002922:	60da      	str	r2, [r3, #12]
 8002924:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002926:	4b9e      	ldr	r3, [pc, #632]	; (8002ba0 <MX_GPIO_Init+0x290>)
 8002928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800292a:	4a9d      	ldr	r2, [pc, #628]	; (8002ba0 <MX_GPIO_Init+0x290>)
 800292c:	f043 0310 	orr.w	r3, r3, #16
 8002930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002932:	4b9b      	ldr	r3, [pc, #620]	; (8002ba0 <MX_GPIO_Init+0x290>)
 8002934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002936:	f003 0310 	and.w	r3, r3, #16
 800293a:	61bb      	str	r3, [r7, #24]
 800293c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800293e:	4b98      	ldr	r3, [pc, #608]	; (8002ba0 <MX_GPIO_Init+0x290>)
 8002940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002942:	4a97      	ldr	r2, [pc, #604]	; (8002ba0 <MX_GPIO_Init+0x290>)
 8002944:	f043 0304 	orr.w	r3, r3, #4
 8002948:	64d3      	str	r3, [r2, #76]	; 0x4c
 800294a:	4b95      	ldr	r3, [pc, #596]	; (8002ba0 <MX_GPIO_Init+0x290>)
 800294c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	617b      	str	r3, [r7, #20]
 8002954:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002956:	4b92      	ldr	r3, [pc, #584]	; (8002ba0 <MX_GPIO_Init+0x290>)
 8002958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800295a:	4a91      	ldr	r2, [pc, #580]	; (8002ba0 <MX_GPIO_Init+0x290>)
 800295c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002962:	4b8f      	ldr	r3, [pc, #572]	; (8002ba0 <MX_GPIO_Init+0x290>)
 8002964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800296a:	613b      	str	r3, [r7, #16]
 800296c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800296e:	4b8c      	ldr	r3, [pc, #560]	; (8002ba0 <MX_GPIO_Init+0x290>)
 8002970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002972:	4a8b      	ldr	r2, [pc, #556]	; (8002ba0 <MX_GPIO_Init+0x290>)
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800297a:	4b89      	ldr	r3, [pc, #548]	; (8002ba0 <MX_GPIO_Init+0x290>)
 800297c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002986:	4b86      	ldr	r3, [pc, #536]	; (8002ba0 <MX_GPIO_Init+0x290>)
 8002988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800298a:	4a85      	ldr	r2, [pc, #532]	; (8002ba0 <MX_GPIO_Init+0x290>)
 800298c:	f043 0302 	orr.w	r3, r3, #2
 8002990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002992:	4b83      	ldr	r3, [pc, #524]	; (8002ba0 <MX_GPIO_Init+0x290>)
 8002994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	60bb      	str	r3, [r7, #8]
 800299c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800299e:	4b80      	ldr	r3, [pc, #512]	; (8002ba0 <MX_GPIO_Init+0x290>)
 80029a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a2:	4a7f      	ldr	r2, [pc, #508]	; (8002ba0 <MX_GPIO_Init+0x290>)
 80029a4:	f043 0308 	orr.w	r3, r3, #8
 80029a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029aa:	4b7d      	ldr	r3, [pc, #500]	; (8002ba0 <MX_GPIO_Init+0x290>)
 80029ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ae:	f003 0308 	and.w	r3, r3, #8
 80029b2:	607b      	str	r3, [r7, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 80029b6:	2200      	movs	r2, #0
 80029b8:	f240 1105 	movw	r1, #261	; 0x105
 80029bc:	4879      	ldr	r0, [pc, #484]	; (8002ba4 <MX_GPIO_Init+0x294>)
 80029be:	f002 fc01 	bl	80051c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 80029c2:	2200      	movs	r2, #0
 80029c4:	f248 111c 	movw	r1, #33052	; 0x811c
 80029c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029cc:	f002 fbfa 	bl	80051c4 <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80029d0:	2200      	movs	r2, #0
 80029d2:	f24f 0134 	movw	r1, #61492	; 0xf034
 80029d6:	4874      	ldr	r0, [pc, #464]	; (8002ba8 <MX_GPIO_Init+0x298>)
 80029d8:	f002 fbf4 	bl	80051c4 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 80029dc:	2200      	movs	r2, #0
 80029de:	f242 0183 	movw	r1, #8323	; 0x2083
 80029e2:	4872      	ldr	r0, [pc, #456]	; (8002bac <MX_GPIO_Init+0x29c>)
 80029e4:	f002 fbee 	bl	80051c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80029e8:	2200      	movs	r2, #0
 80029ea:	f44f 7110 	mov.w	r1, #576	; 0x240
 80029ee:	4870      	ldr	r0, [pc, #448]	; (8002bb0 <MX_GPIO_Init+0x2a0>)
 80029f0:	f002 fbe8 	bl	80051c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80029f4:	f240 1305 	movw	r3, #261	; 0x105
 80029f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029fa:	2301      	movs	r3, #1
 80029fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fe:	2300      	movs	r3, #0
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a02:	2300      	movs	r3, #0
 8002a04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a06:	f107 031c 	add.w	r3, r7, #28
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4865      	ldr	r0, [pc, #404]	; (8002ba4 <MX_GPIO_Init+0x294>)
 8002a0e:	f002 f955 	bl	8004cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8002a12:	237a      	movs	r3, #122	; 0x7a
 8002a14:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a16:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002a1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a20:	f107 031c 	add.w	r3, r7, #28
 8002a24:	4619      	mov	r1, r3
 8002a26:	485f      	ldr	r0, [pc, #380]	; (8002ba4 <MX_GPIO_Init+0x294>)
 8002a28:	f002 f948 	bl	8004cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8002a2c:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8002a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a32:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002a36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a3c:	f107 031c 	add.w	r3, r7, #28
 8002a40:	4619      	mov	r1, r3
 8002a42:	485b      	ldr	r0, [pc, #364]	; (8002bb0 <MX_GPIO_Init+0x2a0>)
 8002a44:	f002 f93a 	bl	8004cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8002a48:	f248 131c 	movw	r3, #33052	; 0x811c
 8002a4c:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a52:	2300      	movs	r3, #0
 8002a54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a56:	2300      	movs	r3, #0
 8002a58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a5a:	f107 031c 	add.w	r3, r7, #28
 8002a5e:	4619      	mov	r1, r3
 8002a60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a64:	f002 f92a 	bl	8004cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a6c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a72:	2300      	movs	r3, #0
 8002a74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8002a76:	f107 031c 	add.w	r3, r7, #28
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	484a      	ldr	r0, [pc, #296]	; (8002ba8 <MX_GPIO_Init+0x298>)
 8002a7e:	f002 f91d 	bl	8004cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8002a82:	2302      	movs	r3, #2
 8002a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a86:	2302      	movs	r3, #2
 8002a88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a92:	2302      	movs	r3, #2
 8002a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8002a96:	f107 031c 	add.w	r3, r7, #28
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4842      	ldr	r0, [pc, #264]	; (8002ba8 <MX_GPIO_Init+0x298>)
 8002a9e:	f002 f90d 	bl	8004cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 8002aa2:	f24b 0334 	movw	r3, #45108	; 0xb034
 8002aa6:	61fb      	str	r3, [r7, #28]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ab4:	f107 031c 	add.w	r3, r7, #28
 8002ab8:	4619      	mov	r1, r3
 8002aba:	483b      	ldr	r0, [pc, #236]	; (8002ba8 <MX_GPIO_Init+0x298>)
 8002abc:	f002 f8fe 	bl	8004cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8002ac0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aca:	2300      	movs	r3, #0
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8002ad2:	f107 031c 	add.w	r3, r7, #28
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4833      	ldr	r0, [pc, #204]	; (8002ba8 <MX_GPIO_Init+0x298>)
 8002ada:	f002 f8ef 	bl	8004cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8002ade:	f64d 4304 	movw	r3, #56324	; 0xdc04
 8002ae2:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ae4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002ae8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aea:	2300      	movs	r3, #0
 8002aec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002aee:	f107 031c 	add.w	r3, r7, #28
 8002af2:	4619      	mov	r1, r3
 8002af4:	482d      	ldr	r0, [pc, #180]	; (8002bac <MX_GPIO_Init+0x29c>)
 8002af6:	f002 f8e1 	bl	8004cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8002afa:	f242 0383 	movw	r3, #8323	; 0x2083
 8002afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b00:	2301      	movs	r3, #1
 8002b02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b0c:	f107 031c 	add.w	r3, r7, #28
 8002b10:	4619      	mov	r1, r3
 8002b12:	4826      	ldr	r0, [pc, #152]	; (8002bac <MX_GPIO_Init+0x29c>)
 8002b14:	f002 f8d2 	bl	8004cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8002b18:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b26:	2300      	movs	r3, #0
 8002b28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b2a:	f107 031c 	add.w	r3, r7, #28
 8002b2e:	4619      	mov	r1, r3
 8002b30:	481f      	ldr	r0, [pc, #124]	; (8002bb0 <MX_GPIO_Init+0x2a0>)
 8002b32:	f002 f8c3 	bl	8004cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8002b36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002b44:	f107 031c 	add.w	r3, r7, #28
 8002b48:	4619      	mov	r1, r3
 8002b4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b4e:	f002 f8b5 	bl	8004cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8002b52:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b58:	2302      	movs	r3, #2
 8002b5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b60:	2303      	movs	r3, #3
 8002b62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002b64:	230a      	movs	r3, #10
 8002b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b68:	f107 031c 	add.w	r3, r7, #28
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b72:	f002 f8a3 	bl	8004cbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002b76:	2200      	movs	r2, #0
 8002b78:	2100      	movs	r1, #0
 8002b7a:	2017      	movs	r0, #23
 8002b7c:	f001 feac 	bl	80048d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002b80:	2017      	movs	r0, #23
 8002b82:	f001 fec5 	bl	8004910 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8002b86:	2200      	movs	r2, #0
 8002b88:	2106      	movs	r1, #6
 8002b8a:	2028      	movs	r0, #40	; 0x28
 8002b8c:	f001 fea4 	bl	80048d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002b90:	2028      	movs	r0, #40	; 0x28
 8002b92:	f001 febd 	bl	8004910 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b96:	bf00      	nop
 8002b98:	3730      	adds	r7, #48	; 0x30
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	48001000 	.word	0x48001000
 8002ba8:	48000400 	.word	0x48000400
 8002bac:	48000c00 	.word	0x48000c00
 8002bb0:	48000800 	.word	0x48000800

08002bb4 <MyLED2_init>:

/* USER CODE BEGIN 4 */
static void MyLED2_init(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  //Configure the MODE register
  //01:general purpose output
  //MODER Bit 29 and Bit 28
  //Reset both bits 28 and 29 to 0
	GPIOB->MODER &=~(0x3 <<28);
 8002bb8:	4b16      	ldr	r3, [pc, #88]	; (8002c14 <MyLED2_init+0x60>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a15      	ldr	r2, [pc, #84]	; (8002c14 <MyLED2_init+0x60>)
 8002bbe:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002bc2:	6013      	str	r3, [r2, #0]
  //Set the values to 1
	GPIOB->MODER |=(0x1 <<28);
 8002bc4:	4b13      	ldr	r3, [pc, #76]	; (8002c14 <MyLED2_init+0x60>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a12      	ldr	r2, [pc, #72]	; (8002c14 <MyLED2_init+0x60>)
 8002bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bce:	6013      	str	r3, [r2, #0]

  //Configure the output type register
  //0:Push-Pull
  //OTYPER Bit 14 to 0
	GPIOB->OTYPER &=~(1<<14);
 8002bd0:	4b10      	ldr	r3, [pc, #64]	; (8002c14 <MyLED2_init+0x60>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	4a0f      	ldr	r2, [pc, #60]	; (8002c14 <MyLED2_init+0x60>)
 8002bd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bda:	6053      	str	r3, [r2, #4]

  //Configure the speed register
  //11:Very high speed
  //OSPEEDR Bit 29 and Bit 28
  //Reset both bits 28 and 29 to 0
	GPIOB->OSPEEDR &=~(0x3 <<28);
 8002bdc:	4b0d      	ldr	r3, [pc, #52]	; (8002c14 <MyLED2_init+0x60>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	4a0c      	ldr	r2, [pc, #48]	; (8002c14 <MyLED2_init+0x60>)
 8002be2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002be6:	6093      	str	r3, [r2, #8]
  //Set the values to 1
	GPIOB->OSPEEDR |=(0x1 <<28);
 8002be8:	4b0a      	ldr	r3, [pc, #40]	; (8002c14 <MyLED2_init+0x60>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	4a09      	ldr	r2, [pc, #36]	; (8002c14 <MyLED2_init+0x60>)
 8002bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf2:	6093      	str	r3, [r2, #8]

  //Configure pull-up/pull-down register
  //00: no pull-up/pull-down
  //PUPDR Bit 29 and Bit 28
  //Reset both bits 28 and 29 to 0
	GPIOB->PUPDR &=~(0x3 <<28);
 8002bf4:	4b07      	ldr	r3, [pc, #28]	; (8002c14 <MyLED2_init+0x60>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	4a06      	ldr	r2, [pc, #24]	; (8002c14 <MyLED2_init+0x60>)
 8002bfa:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002bfe:	60d3      	str	r3, [r2, #12]
  //Set the values to 0
	GPIOB->PUPDR |=(0x0 <<28);
 8002c00:	4b04      	ldr	r3, [pc, #16]	; (8002c14 <MyLED2_init+0x60>)
 8002c02:	4a04      	ldr	r2, [pc, #16]	; (8002c14 <MyLED2_init+0x60>)
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	60d3      	str	r3, [r2, #12]

}
 8002c08:	bf00      	nop
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	48000400 	.word	0x48000400

08002c18 <MyButton_init>:

static void MyButton_init(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
  //Button is Port C, Pin 13, EXTI13
  //Configure SYSCLK
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c1e:	4b1d      	ldr	r3, [pc, #116]	; (8002c94 <MyButton_init+0x7c>)
 8002c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c22:	4a1c      	ldr	r2, [pc, #112]	; (8002c94 <MyButton_init+0x7c>)
 8002c24:	f043 0301 	orr.w	r3, r3, #1
 8002c28:	6613      	str	r3, [r2, #96]	; 0x60
 8002c2a:	4b1a      	ldr	r3, [pc, #104]	; (8002c94 <MyButton_init+0x7c>)
 8002c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	607b      	str	r3, [r7, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]

  //Configure the MODE register
  //00:input mode
  //MODER Bit 27 and Bit 26
  //Reset both bits 27 and 26 to 0
	GPIOC->MODER &=~(0x3 <<26);
 8002c36:	4b18      	ldr	r3, [pc, #96]	; (8002c98 <MyButton_init+0x80>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a17      	ldr	r2, [pc, #92]	; (8002c98 <MyButton_init+0x80>)
 8002c3c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002c40:	6013      	str	r3, [r2, #0]

  //Configure pull-up/pull-down register
  //00: no pull-up/pull-down
  //PUPDR Bit 27 and Bit 26
  //Reset both bits 27 and 26 to 0
	GPIOC->PUPDR &=~(0x3 <<26);
 8002c42:	4b15      	ldr	r3, [pc, #84]	; (8002c98 <MyButton_init+0x80>)
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	4a14      	ldr	r2, [pc, #80]	; (8002c98 <MyButton_init+0x80>)
 8002c48:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002c4c:	60d3      	str	r3, [r2, #12]
  //Set the values to 0
	GPIOC->PUPDR |=(0x0 <<26);
 8002c4e:	4b12      	ldr	r3, [pc, #72]	; (8002c98 <MyButton_init+0x80>)
 8002c50:	4a11      	ldr	r2, [pc, #68]	; (8002c98 <MyButton_init+0x80>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	60d3      	str	r3, [r2, #12]

  //sysconfig Register
  //EXTI13, Choose port C
  //Configure the External Interrupt Configuration Register
  //SYSCFG_EXTICR4 :only 2nd bit in EXTICR[3] is set to 1
	SYSCFG->EXTICR[3]|=(0x1<<5);
 8002c56:	4b11      	ldr	r3, [pc, #68]	; (8002c9c <MyButton_init+0x84>)
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	4a10      	ldr	r2, [pc, #64]	; (8002c9c <MyButton_init+0x84>)
 8002c5c:	f043 0320 	orr.w	r3, r3, #32
 8002c60:	6153      	str	r3, [r2, #20]

  //Configure the falling trigger selection register
  //EXTI_FTSR
	EXTI->FTSR1 |=(0x1 <<13) ;
 8002c62:	4b0f      	ldr	r3, [pc, #60]	; (8002ca0 <MyButton_init+0x88>)
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	4a0e      	ldr	r2, [pc, #56]	; (8002ca0 <MyButton_init+0x88>)
 8002c68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c6c:	60d3      	str	r3, [r2, #12]

  //Configure the Interrupt Mask Register
  //EXTI_IMR
	EXTI->IMR1 |=(0x1 <<13);
 8002c6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <MyButton_init+0x88>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a0b      	ldr	r2, [pc, #44]	; (8002ca0 <MyButton_init+0x88>)
 8002c74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c78:	6013      	str	r3, [r2, #0]

  //Configure NVIC Set Enable Register
  //NVIC_ISER
  //NVIC->ISER[] Register no. & location based on position
  //NVIC->ISER[(((uint32_t)EXTI15_10_IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)EXTI15_10_IRQn) & 0x1FUL));
	NVIC->ISER[1] |= (0x1 << 8);
 8002c7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <MyButton_init+0x8c>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	4a09      	ldr	r2, [pc, #36]	; (8002ca4 <MyButton_init+0x8c>)
 8002c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c84:	6053      	str	r3, [r2, #4]
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	40021000 	.word	0x40021000
 8002c98:	48000800 	.word	0x48000800
 8002c9c:	40010000 	.word	0x40010000
 8002ca0:	40010400 	.word	0x40010400
 8002ca4:	e000e100 	.word	0xe000e100

08002ca8 <MyUART1_init>:

static void MyUART1_init(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
	//configure UART1 manually excluding Baud Rate Register
	//configuring M bits-Bits 12,28 to 0,0 for 1 start bit, 8 data bits, n stop bits in USART_CR1 register
	huart1.Instance->CR1 &=~(0x1 <<12);
 8002cac:	4b22      	ldr	r3, [pc, #136]	; (8002d38 <MyUART1_init+0x90>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	4b21      	ldr	r3, [pc, #132]	; (8002d38 <MyUART1_init+0x90>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cba:	601a      	str	r2, [r3, #0]
	huart1.Instance->CR1 &=~(0x1 <<28);
 8002cbc:	4b1e      	ldr	r3, [pc, #120]	; (8002d38 <MyUART1_init+0x90>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	4b1d      	ldr	r3, [pc, #116]	; (8002d38 <MyUART1_init+0x90>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002cca:	601a      	str	r2, [r3, #0]
	//configuring Bit 15 to 1 for oversampling by 8 in USART_CR1 register
	huart1.Instance->CR1 |=(0x1 <<15);
 8002ccc:	4b1a      	ldr	r3, [pc, #104]	; (8002d38 <MyUART1_init+0x90>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	4b19      	ldr	r3, [pc, #100]	; (8002d38 <MyUART1_init+0x90>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cda:	601a      	str	r2, [r3, #0]
	//configuring Bit 10 to 0 to disable parity control in USART_CR1 register
	huart1.Instance->CR1 &=~(0x1 <<10);
 8002cdc:	4b16      	ldr	r3, [pc, #88]	; (8002d38 <MyUART1_init+0x90>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	4b15      	ldr	r3, [pc, #84]	; (8002d38 <MyUART1_init+0x90>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cea:	601a      	str	r2, [r3, #0]
	//configuring Bit 0 to 1 to enable UART in USART_CR1 register
	huart1.Instance->CR1 |=(0x1 <<0);
 8002cec:	4b12      	ldr	r3, [pc, #72]	; (8002d38 <MyUART1_init+0x90>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	4b11      	ldr	r3, [pc, #68]	; (8002d38 <MyUART1_init+0x90>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0201 	orr.w	r2, r2, #1
 8002cfa:	601a      	str	r2, [r3, #0]
	//configuring Bit 3 to 1 to enable Transmitter in USART_CR1 register
	huart1.Instance->CR1 |=(0x1 <<3);
 8002cfc:	4b0e      	ldr	r3, [pc, #56]	; (8002d38 <MyUART1_init+0x90>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	4b0d      	ldr	r3, [pc, #52]	; (8002d38 <MyUART1_init+0x90>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f042 0208 	orr.w	r2, r2, #8
 8002d0a:	601a      	str	r2, [r3, #0]
	//configuring Bit 2 to 1 to enable Receiver in USART_CR1 register
	huart1.Instance->CR1 |=(0x1 <<2);
 8002d0c:	4b0a      	ldr	r3, [pc, #40]	; (8002d38 <MyUART1_init+0x90>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	4b09      	ldr	r3, [pc, #36]	; (8002d38 <MyUART1_init+0x90>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f042 0204 	orr.w	r2, r2, #4
 8002d1a:	601a      	str	r2, [r3, #0]
	//configuring Bits 12,13 to 0,0 for 1 stop bit in USART_CR2 register
	huart1.Instance->CR2 &=(0x3 <<12);
 8002d1c:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <MyUART1_init+0x90>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	4b05      	ldr	r3, [pc, #20]	; (8002d38 <MyUART1_init+0x90>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8002d2a:	605a      	str	r2, [r3, #4]

}
 8002d2c:	bf00      	nop
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	200010d4 	.word	0x200010d4

08002d3c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af02      	add	r7, sp, #8
 8002d42:	4603      	mov	r3, r0
 8002d44:	80fb      	strh	r3, [r7, #6]
	//activate the message transmission once a button is pushed
	xTaskNotifyFromISR(pUART_SendMsg, 0, eNoAction, NULL);
 8002d46:	4b07      	ldr	r3, [pc, #28]	; (8002d64 <HAL_GPIO_EXTI_Callback+0x28>)
 8002d48:	6818      	ldr	r0, [r3, #0]
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	9301      	str	r3, [sp, #4]
 8002d4e:	2300      	movs	r3, #0
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	2300      	movs	r3, #0
 8002d54:	2200      	movs	r2, #0
 8002d56:	2100      	movs	r1, #0
 8002d58:	f7fe fbb8 	bl	80014cc <xTaskGenericNotifyFromISR>
}
 8002d5c:	bf00      	nop
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	20000dd4 	.word	0x20000dd4

08002d68 <SOS_Transmit>:
static void SOS_Transmit(void *parameter)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  repeat = 2;
 8002d70:	4b36      	ldr	r3, [pc, #216]	; (8002e4c <SOS_Transmit+0xe4>)
 8002d72:	2202      	movs	r2, #2
 8002d74:	701a      	strb	r2, [r3, #0]
	      //while(repeat>0)
	      while(1)
		  {

	        //sending 's'
	        for(int i=0; i<3; i++)
 8002d76:	2300      	movs	r3, #0
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	e016      	b.n	8002daa <SOS_Transmit+0x42>
	           {
		        //turning up the led for a dot
		        //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET); or
		        //write a 1 to Bit 14 of GPIOB ODR(output data register)
		          GPIOB->ODR |=(1<<14);
 8002d7c:	4b34      	ldr	r3, [pc, #208]	; (8002e50 <SOS_Transmit+0xe8>)
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	4a33      	ldr	r2, [pc, #204]	; (8002e50 <SOS_Transmit+0xe8>)
 8002d82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d86:	6153      	str	r3, [r2, #20]
		          //HAL_Delay(300);
		          vTaskDelay(300);
 8002d88:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002d8c:	f7fd ffe0 	bl	8000d50 <vTaskDelay>

	            //turning the led off for spacing
		        //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET); or
		        //write a 0 to Bit 14 of GPIOB ODR(output data register)
		          GPIOB->ODR &=~(1<<14);
 8002d90:	4b2f      	ldr	r3, [pc, #188]	; (8002e50 <SOS_Transmit+0xe8>)
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	4a2e      	ldr	r2, [pc, #184]	; (8002e50 <SOS_Transmit+0xe8>)
 8002d96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d9a:	6153      	str	r3, [r2, #20]
		          vTaskDelay(300);
 8002d9c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002da0:	f7fd ffd6 	bl	8000d50 <vTaskDelay>
	        for(int i=0; i<3; i++)
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	3301      	adds	r3, #1
 8002da8:	613b      	str	r3, [r7, #16]
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	dde5      	ble.n	8002d7c <SOS_Transmit+0x14>
	            }
	         //3 time units between characters
	         // HAL_Delay(300*2);
	         vTaskDelay(300*2);
 8002db0:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002db4:	f7fd ffcc 	bl	8000d50 <vTaskDelay>

	         //sending 'o'
	         for(int i=0; i<3; i++)
 8002db8:	2300      	movs	r3, #0
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	e016      	b.n	8002dec <SOS_Transmit+0x84>
	 	       {
	 		    //turning up the led for a dash
	 		    //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
		        //write a 1 to Bit 14 of GPIOB ODR(output data register)
		  	    GPIOB->ODR |=(1<<14);
 8002dbe:	4b24      	ldr	r3, [pc, #144]	; (8002e50 <SOS_Transmit+0xe8>)
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	4a23      	ldr	r2, [pc, #140]	; (8002e50 <SOS_Transmit+0xe8>)
 8002dc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dc8:	6153      	str	r3, [r2, #20]
	 		    //HAL_Delay(300*3);
		  	    vTaskDelay(300*3);
 8002dca:	f44f 7061 	mov.w	r0, #900	; 0x384
 8002dce:	f7fd ffbf 	bl	8000d50 <vTaskDelay>
	 	        //turning the led off for spacing
	 		    //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
	 		    //write a 0 to Bit 14 of GPIOB ODR(output data register)
	 		    GPIOB->ODR &=~(1<<14);
 8002dd2:	4b1f      	ldr	r3, [pc, #124]	; (8002e50 <SOS_Transmit+0xe8>)
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	4a1e      	ldr	r2, [pc, #120]	; (8002e50 <SOS_Transmit+0xe8>)
 8002dd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ddc:	6153      	str	r3, [r2, #20]
	 		    //HAL_Delay(300);
	 		    vTaskDelay(300);
 8002dde:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002de2:	f7fd ffb5 	bl	8000d50 <vTaskDelay>
	         for(int i=0; i<3; i++)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	3301      	adds	r3, #1
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	dde5      	ble.n	8002dbe <SOS_Transmit+0x56>
	 	       }
	 	     //3 time units between characters
	         //HAL_Delay(300*2);
	         vTaskDelay(300*2);
 8002df2:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002df6:	f7fd ffab 	bl	8000d50 <vTaskDelay>
	         //sending 's'
	         for(int i=0; i<3; i++)
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	617b      	str	r3, [r7, #20]
 8002dfe:	e016      	b.n	8002e2e <SOS_Transmit+0xc6>
	 		  {
	 			  //turning up the led for a dot
	 			  //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
		         //write a 1 to Bit 14 of GPIOB ODR(output data register)
		  		  GPIOB->ODR |=(1<<14);
 8002e00:	4b13      	ldr	r3, [pc, #76]	; (8002e50 <SOS_Transmit+0xe8>)
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	4a12      	ldr	r2, [pc, #72]	; (8002e50 <SOS_Transmit+0xe8>)
 8002e06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e0a:	6153      	str	r3, [r2, #20]
		       // HAL_Delay(300);
		  		vTaskDelay(300);
 8002e0c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002e10:	f7fd ff9e 	bl	8000d50 <vTaskDelay>
	 		      //turning the led off for spacing
	 			  //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
		          //write a 0 to Bit 14 of GPIOB ODR(output data register)
		          GPIOB->ODR &=~(1<<14);
 8002e14:	4b0e      	ldr	r3, [pc, #56]	; (8002e50 <SOS_Transmit+0xe8>)
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	4a0d      	ldr	r2, [pc, #52]	; (8002e50 <SOS_Transmit+0xe8>)
 8002e1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e1e:	6153      	str	r3, [r2, #20]
		        //HAL_Delay(300);
		          vTaskDelay(300);
 8002e20:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002e24:	f7fd ff94 	bl	8000d50 <vTaskDelay>
	         for(int i=0; i<3; i++)
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	617b      	str	r3, [r7, #20]
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	dde5      	ble.n	8002e00 <SOS_Transmit+0x98>
	 		  }
	         //7 time units between words
	 	     // HAL_Delay(300*6);
	         vTaskDelay(300*6);
 8002e34:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8002e38:	f7fd ff8a 	bl	8000d50 <vTaskDelay>
             repeat--;
 8002e3c:	4b03      	ldr	r3, [pc, #12]	; (8002e4c <SOS_Transmit+0xe4>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	4b01      	ldr	r3, [pc, #4]	; (8002e4c <SOS_Transmit+0xe4>)
 8002e46:	701a      	strb	r2, [r3, #0]
	        for(int i=0; i<3; i++)
 8002e48:	e795      	b.n	8002d76 <SOS_Transmit+0xe>
 8002e4a:	bf00      	nop
 8002e4c:	20000dd8 	.word	0x20000dd8
 8002e50:	48000400 	.word	0x48000400

08002e54 <TempSensorRead>:
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
	}
}

static void TempSensorRead(void *parameter)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b0a2      	sub	sp, #136	; 0x88
 8002e58:	af02      	add	r7, sp, #8
 8002e5a:	6078      	str	r0, [r7, #4]
  char tempReading[100];
  float tempValue =0;
 8002e5c:	f04f 0300 	mov.w	r3, #0
 8002e60:	67fb      	str	r3, [r7, #124]	; 0x7c
  while(1)
  {
	  tempValue = BSP_TSENSOR_ReadTemp();
 8002e62:	f007 f961 	bl	800a128 <BSP_TSENSOR_ReadTemp>
 8002e66:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
	  int tempValueInt=tempValue;
 8002e6a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002e6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e72:	ee17 3a90 	vmov	r3, s15
 8002e76:	67bb      	str	r3, [r7, #120]	; 0x78
	  float tempValueFrac=0;
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	677b      	str	r3, [r7, #116]	; 0x74

	  tempValueFrac = tempValue - tempValueInt;
 8002e7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e80:	ee07 3a90 	vmov	s15, r3
 8002e84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e88:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8002e8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e90:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	  int tempValueFrac2digits = trunc(tempValueFrac * 100);
 8002e94:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002e98:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002efc <TempSensorRead+0xa8>
 8002e9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ea0:	ee17 0a90 	vmov	r0, s15
 8002ea4:	f7fd fb68 	bl	8000578 <__aeabi_f2d>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	ec43 2b10 	vmov	d0, r2, r3
 8002eb0:	f007 feb4 	bl	800ac1c <trunc>
 8002eb4:	ec53 2b10 	vmov	r2, r3, d0
 8002eb8:	4610      	mov	r0, r2
 8002eba:	4619      	mov	r1, r3
 8002ebc:	f7fd fbb4 	bl	8000628 <__aeabi_d2iz>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	673b      	str	r3, [r7, #112]	; 0x70

	  snprintf(tempReading, 100, "\r\n TEMPERATURE = %1d.%0.2d \n\r", tempValueInt, tempValueFrac2digits);
 8002ec4:	f107 000c 	add.w	r0, r7, #12
 8002ec8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ece:	4a0c      	ldr	r2, [pc, #48]	; (8002f00 <TempSensorRead+0xac>)
 8002ed0:	2164      	movs	r1, #100	; 0x64
 8002ed2:	f007 f9eb 	bl	800a2ac <sniprintf>
      HAL_UART_Transmit(&huart1, (uint8_t *)tempReading, strlen(tempReading), 1000);
 8002ed6:	f107 030c 	add.w	r3, r7, #12
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fd f990 	bl	8000200 <strlen>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	f107 010c 	add.w	r1, r7, #12
 8002ee8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eec:	4805      	ldr	r0, [pc, #20]	; (8002f04 <TempSensorRead+0xb0>)
 8002eee:	f005 fd63 	bl	80089b8 <HAL_UART_Transmit>

      vTaskDelay(5000);
 8002ef2:	f241 3088 	movw	r0, #5000	; 0x1388
 8002ef6:	f7fd ff2b 	bl	8000d50 <vTaskDelay>
  {
 8002efa:	e7b2      	b.n	8002e62 <TempSensorRead+0xe>
 8002efc:	42c80000 	.word	0x42c80000
 8002f00:	0800acf4 	.word	0x0800acf4
 8002f04:	200010d4 	.word	0x200010d4

08002f08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a04      	ldr	r2, [pc, #16]	; (8002f28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d101      	bne.n	8002f1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002f1a:	f000 fd23 	bl	8003964 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002f1e:	bf00      	nop
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40001000 	.word	0x40001000

08002f2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f30:	b672      	cpsid	i
}
 8002f32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f34:	e7fe      	b.n	8002f34 <Error_Handler+0x8>
	...

08002f38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f3e:	4b0f      	ldr	r3, [pc, #60]	; (8002f7c <HAL_MspInit+0x44>)
 8002f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f42:	4a0e      	ldr	r2, [pc, #56]	; (8002f7c <HAL_MspInit+0x44>)
 8002f44:	f043 0301 	orr.w	r3, r3, #1
 8002f48:	6613      	str	r3, [r2, #96]	; 0x60
 8002f4a:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <HAL_MspInit+0x44>)
 8002f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	607b      	str	r3, [r7, #4]
 8002f54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f56:	4b09      	ldr	r3, [pc, #36]	; (8002f7c <HAL_MspInit+0x44>)
 8002f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5a:	4a08      	ldr	r2, [pc, #32]	; (8002f7c <HAL_MspInit+0x44>)
 8002f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f60:	6593      	str	r3, [r2, #88]	; 0x58
 8002f62:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <HAL_MspInit+0x44>)
 8002f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6a:	603b      	str	r3, [r7, #0]
 8002f6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	40021000 	.word	0x40021000

08002f80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b08a      	sub	sp, #40	; 0x28
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f88:	f107 0314 	add.w	r3, r7, #20
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	605a      	str	r2, [r3, #4]
 8002f92:	609a      	str	r2, [r3, #8]
 8002f94:	60da      	str	r2, [r3, #12]
 8002f96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a15      	ldr	r2, [pc, #84]	; (8002ff4 <HAL_ADC_MspInit+0x74>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d123      	bne.n	8002fea <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002fa2:	4b15      	ldr	r3, [pc, #84]	; (8002ff8 <HAL_ADC_MspInit+0x78>)
 8002fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fa6:	4a14      	ldr	r2, [pc, #80]	; (8002ff8 <HAL_ADC_MspInit+0x78>)
 8002fa8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002fac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fae:	4b12      	ldr	r3, [pc, #72]	; (8002ff8 <HAL_ADC_MspInit+0x78>)
 8002fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fb6:	613b      	str	r3, [r7, #16]
 8002fb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fba:	4b0f      	ldr	r3, [pc, #60]	; (8002ff8 <HAL_ADC_MspInit+0x78>)
 8002fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fbe:	4a0e      	ldr	r2, [pc, #56]	; (8002ff8 <HAL_ADC_MspInit+0x78>)
 8002fc0:	f043 0304 	orr.w	r3, r3, #4
 8002fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fc6:	4b0c      	ldr	r3, [pc, #48]	; (8002ff8 <HAL_ADC_MspInit+0x78>)
 8002fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fca:	f003 0304 	and.w	r3, r3, #4
 8002fce:	60fb      	str	r3, [r7, #12]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8002fd2:	233f      	movs	r3, #63	; 0x3f
 8002fd4:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002fd6:	230b      	movs	r3, #11
 8002fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fde:	f107 0314 	add.w	r3, r7, #20
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	4805      	ldr	r0, [pc, #20]	; (8002ffc <HAL_ADC_MspInit+0x7c>)
 8002fe6:	f001 fe69 	bl	8004cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002fea:	bf00      	nop
 8002fec:	3728      	adds	r7, #40	; 0x28
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	50040000 	.word	0x50040000
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	48000800 	.word	0x48000800

08003000 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b0ae      	sub	sp, #184	; 0xb8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003008:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	605a      	str	r2, [r3, #4]
 8003012:	609a      	str	r2, [r3, #8]
 8003014:	60da      	str	r2, [r3, #12]
 8003016:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003018:	f107 0310 	add.w	r3, r7, #16
 800301c:	2294      	movs	r2, #148	; 0x94
 800301e:	2100      	movs	r1, #0
 8003020:	4618      	mov	r0, r3
 8003022:	f007 f977 	bl	800a314 <memset>
  if(DFSDM1_Init == 0)
 8003026:	4b25      	ldr	r3, [pc, #148]	; (80030bc <HAL_DFSDM_ChannelMspInit+0xbc>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d142      	bne.n	80030b4 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800302e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003032:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8003034:	2300      	movs	r3, #0
 8003036:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800303a:	f107 0310 	add.w	r3, r7, #16
 800303e:	4618      	mov	r0, r3
 8003040:	f004 fbec 	bl	800781c <HAL_RCCEx_PeriphCLKConfig>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800304a:	f7ff ff6f 	bl	8002f2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800304e:	4b1c      	ldr	r3, [pc, #112]	; (80030c0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003052:	4a1b      	ldr	r2, [pc, #108]	; (80030c0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003054:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003058:	6613      	str	r3, [r2, #96]	; 0x60
 800305a:	4b19      	ldr	r3, [pc, #100]	; (80030c0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800305c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800305e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003066:	4b16      	ldr	r3, [pc, #88]	; (80030c0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800306a:	4a15      	ldr	r2, [pc, #84]	; (80030c0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800306c:	f043 0310 	orr.w	r3, r3, #16
 8003070:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003072:	4b13      	ldr	r3, [pc, #76]	; (80030c0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003076:	f003 0310 	and.w	r3, r3, #16
 800307a:	60bb      	str	r3, [r7, #8]
 800307c:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800307e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8003082:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003086:	2302      	movs	r3, #2
 8003088:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308c:	2300      	movs	r3, #0
 800308e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003092:	2300      	movs	r3, #0
 8003094:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8003098:	2306      	movs	r3, #6
 800309a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800309e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80030a2:	4619      	mov	r1, r3
 80030a4:	4807      	ldr	r0, [pc, #28]	; (80030c4 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80030a6:	f001 fe09 	bl	8004cbc <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80030aa:	4b04      	ldr	r3, [pc, #16]	; (80030bc <HAL_DFSDM_ChannelMspInit+0xbc>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	3301      	adds	r3, #1
 80030b0:	4a02      	ldr	r2, [pc, #8]	; (80030bc <HAL_DFSDM_ChannelMspInit+0xbc>)
 80030b2:	6013      	str	r3, [r2, #0]
  }

}
 80030b4:	bf00      	nop
 80030b6:	37b8      	adds	r7, #184	; 0xb8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	20001290 	.word	0x20001290
 80030c0:	40021000 	.word	0x40021000
 80030c4:	48001000 	.word	0x48001000

080030c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b0b0      	sub	sp, #192	; 0xc0
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	605a      	str	r2, [r3, #4]
 80030da:	609a      	str	r2, [r3, #8]
 80030dc:	60da      	str	r2, [r3, #12]
 80030de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030e0:	f107 0318 	add.w	r3, r7, #24
 80030e4:	2294      	movs	r2, #148	; 0x94
 80030e6:	2100      	movs	r1, #0
 80030e8:	4618      	mov	r0, r3
 80030ea:	f007 f913 	bl	800a314 <memset>
  if(hi2c->Instance==I2C1)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a42      	ldr	r2, [pc, #264]	; (80031fc <HAL_I2C_MspInit+0x134>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d13c      	bne.n	8003172 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80030f8:	2340      	movs	r3, #64	; 0x40
 80030fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80030fc:	2300      	movs	r3, #0
 80030fe:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003100:	f107 0318 	add.w	r3, r7, #24
 8003104:	4618      	mov	r0, r3
 8003106:	f004 fb89 	bl	800781c <HAL_RCCEx_PeriphCLKConfig>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003110:	f7ff ff0c 	bl	8002f2c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003114:	4b3a      	ldr	r3, [pc, #232]	; (8003200 <HAL_I2C_MspInit+0x138>)
 8003116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003118:	4a39      	ldr	r2, [pc, #228]	; (8003200 <HAL_I2C_MspInit+0x138>)
 800311a:	f043 0302 	orr.w	r3, r3, #2
 800311e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003120:	4b37      	ldr	r3, [pc, #220]	; (8003200 <HAL_I2C_MspInit+0x138>)
 8003122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	617b      	str	r3, [r7, #20]
 800312a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800312c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003130:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003134:	2312      	movs	r3, #18
 8003136:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800313a:	2301      	movs	r3, #1
 800313c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003140:	2303      	movs	r3, #3
 8003142:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003146:	2304      	movs	r3, #4
 8003148:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800314c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003150:	4619      	mov	r1, r3
 8003152:	482c      	ldr	r0, [pc, #176]	; (8003204 <HAL_I2C_MspInit+0x13c>)
 8003154:	f001 fdb2 	bl	8004cbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003158:	4b29      	ldr	r3, [pc, #164]	; (8003200 <HAL_I2C_MspInit+0x138>)
 800315a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315c:	4a28      	ldr	r2, [pc, #160]	; (8003200 <HAL_I2C_MspInit+0x138>)
 800315e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003162:	6593      	str	r3, [r2, #88]	; 0x58
 8003164:	4b26      	ldr	r3, [pc, #152]	; (8003200 <HAL_I2C_MspInit+0x138>)
 8003166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800316c:	613b      	str	r3, [r7, #16]
 800316e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003170:	e040      	b.n	80031f4 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a24      	ldr	r2, [pc, #144]	; (8003208 <HAL_I2C_MspInit+0x140>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d13b      	bne.n	80031f4 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800317c:	2380      	movs	r3, #128	; 0x80
 800317e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003180:	2300      	movs	r3, #0
 8003182:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003184:	f107 0318 	add.w	r3, r7, #24
 8003188:	4618      	mov	r0, r3
 800318a:	f004 fb47 	bl	800781c <HAL_RCCEx_PeriphCLKConfig>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8003194:	f7ff feca 	bl	8002f2c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003198:	4b19      	ldr	r3, [pc, #100]	; (8003200 <HAL_I2C_MspInit+0x138>)
 800319a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800319c:	4a18      	ldr	r2, [pc, #96]	; (8003200 <HAL_I2C_MspInit+0x138>)
 800319e:	f043 0302 	orr.w	r3, r3, #2
 80031a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031a4:	4b16      	ldr	r3, [pc, #88]	; (8003200 <HAL_I2C_MspInit+0x138>)
 80031a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80031b0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80031b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031b8:	2312      	movs	r3, #18
 80031ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031be:	2301      	movs	r3, #1
 80031c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031c4:	2303      	movs	r3, #3
 80031c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80031ca:	2304      	movs	r3, #4
 80031cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031d0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80031d4:	4619      	mov	r1, r3
 80031d6:	480b      	ldr	r0, [pc, #44]	; (8003204 <HAL_I2C_MspInit+0x13c>)
 80031d8:	f001 fd70 	bl	8004cbc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80031dc:	4b08      	ldr	r3, [pc, #32]	; (8003200 <HAL_I2C_MspInit+0x138>)
 80031de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e0:	4a07      	ldr	r2, [pc, #28]	; (8003200 <HAL_I2C_MspInit+0x138>)
 80031e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031e6:	6593      	str	r3, [r2, #88]	; 0x58
 80031e8:	4b05      	ldr	r3, [pc, #20]	; (8003200 <HAL_I2C_MspInit+0x138>)
 80031ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031f0:	60bb      	str	r3, [r7, #8]
 80031f2:	68bb      	ldr	r3, [r7, #8]
}
 80031f4:	bf00      	nop
 80031f6:	37c0      	adds	r7, #192	; 0xc0
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40005400 	.word	0x40005400
 8003200:	40021000 	.word	0x40021000
 8003204:	48000400 	.word	0x48000400
 8003208:	40005800 	.word	0x40005800

0800320c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a16      	ldr	r2, [pc, #88]	; (8003274 <HAL_I2C_MspDeInit+0x68>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d110      	bne.n	8003240 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800321e:	4b16      	ldr	r3, [pc, #88]	; (8003278 <HAL_I2C_MspDeInit+0x6c>)
 8003220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003222:	4a15      	ldr	r2, [pc, #84]	; (8003278 <HAL_I2C_MspDeInit+0x6c>)
 8003224:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003228:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARD_D15_GPIO_Port, ARD_D15_Pin);
 800322a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800322e:	4813      	ldr	r0, [pc, #76]	; (800327c <HAL_I2C_MspDeInit+0x70>)
 8003230:	f001 fed6 	bl	8004fe0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARD_D14_GPIO_Port, ARD_D14_Pin);
 8003234:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003238:	4810      	ldr	r0, [pc, #64]	; (800327c <HAL_I2C_MspDeInit+0x70>)
 800323a:	f001 fed1 	bl	8004fe0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800323e:	e014      	b.n	800326a <HAL_I2C_MspDeInit+0x5e>
  else if(hi2c->Instance==I2C2)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a0e      	ldr	r2, [pc, #56]	; (8003280 <HAL_I2C_MspDeInit+0x74>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d10f      	bne.n	800326a <HAL_I2C_MspDeInit+0x5e>
    __HAL_RCC_I2C2_CLK_DISABLE();
 800324a:	4b0b      	ldr	r3, [pc, #44]	; (8003278 <HAL_I2C_MspDeInit+0x6c>)
 800324c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324e:	4a0a      	ldr	r2, [pc, #40]	; (8003278 <HAL_I2C_MspDeInit+0x6c>)
 8003250:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003254:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8003256:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800325a:	4808      	ldr	r0, [pc, #32]	; (800327c <HAL_I2C_MspDeInit+0x70>)
 800325c:	f001 fec0 	bl	8004fe0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8003260:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003264:	4805      	ldr	r0, [pc, #20]	; (800327c <HAL_I2C_MspDeInit+0x70>)
 8003266:	f001 febb 	bl	8004fe0 <HAL_GPIO_DeInit>
}
 800326a:	bf00      	nop
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	40005400 	.word	0x40005400
 8003278:	40021000 	.word	0x40021000
 800327c:	48000400 	.word	0x48000400
 8003280:	40005800 	.word	0x40005800

08003284 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b0b0      	sub	sp, #192	; 0xc0
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800328c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	605a      	str	r2, [r3, #4]
 8003296:	609a      	str	r2, [r3, #8]
 8003298:	60da      	str	r2, [r3, #12]
 800329a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800329c:	f107 0318 	add.w	r3, r7, #24
 80032a0:	2294      	movs	r2, #148	; 0x94
 80032a2:	2100      	movs	r1, #0
 80032a4:	4618      	mov	r0, r3
 80032a6:	f007 f835 	bl	800a314 <memset>
  if(hospi->Instance==OCTOSPI1)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a28      	ldr	r2, [pc, #160]	; (8003350 <HAL_OSPI_MspInit+0xcc>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d149      	bne.n	8003348 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80032b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 80032ba:	2300      	movs	r3, #0
 80032bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032c0:	f107 0318 	add.w	r3, r7, #24
 80032c4:	4618      	mov	r0, r3
 80032c6:	f004 faa9 	bl	800781c <HAL_RCCEx_PeriphCLKConfig>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 80032d0:	f7ff fe2c 	bl	8002f2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 80032d4:	4b1f      	ldr	r3, [pc, #124]	; (8003354 <HAL_OSPI_MspInit+0xd0>)
 80032d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032d8:	4a1e      	ldr	r2, [pc, #120]	; (8003354 <HAL_OSPI_MspInit+0xd0>)
 80032da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032e0:	4b1c      	ldr	r3, [pc, #112]	; (8003354 <HAL_OSPI_MspInit+0xd0>)
 80032e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032e8:	617b      	str	r3, [r7, #20]
 80032ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80032ec:	4b19      	ldr	r3, [pc, #100]	; (8003354 <HAL_OSPI_MspInit+0xd0>)
 80032ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032f0:	4a18      	ldr	r2, [pc, #96]	; (8003354 <HAL_OSPI_MspInit+0xd0>)
 80032f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f6:	6513      	str	r3, [r2, #80]	; 0x50
 80032f8:	4b16      	ldr	r3, [pc, #88]	; (8003354 <HAL_OSPI_MspInit+0xd0>)
 80032fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003300:	613b      	str	r3, [r7, #16]
 8003302:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003304:	4b13      	ldr	r3, [pc, #76]	; (8003354 <HAL_OSPI_MspInit+0xd0>)
 8003306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003308:	4a12      	ldr	r2, [pc, #72]	; (8003354 <HAL_OSPI_MspInit+0xd0>)
 800330a:	f043 0310 	orr.w	r3, r3, #16
 800330e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003310:	4b10      	ldr	r3, [pc, #64]	; (8003354 <HAL_OSPI_MspInit+0xd0>)
 8003312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003314:	f003 0310 	and.w	r3, r3, #16
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800331c:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8003320:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003324:	2302      	movs	r3, #2
 8003326:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332a:	2300      	movs	r3, #0
 800332c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003330:	2303      	movs	r3, #3
 8003332:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8003336:	230a      	movs	r3, #10
 8003338:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800333c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003340:	4619      	mov	r1, r3
 8003342:	4805      	ldr	r0, [pc, #20]	; (8003358 <HAL_OSPI_MspInit+0xd4>)
 8003344:	f001 fcba 	bl	8004cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8003348:	bf00      	nop
 800334a:	37c0      	adds	r7, #192	; 0xc0
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	a0001000 	.word	0xa0001000
 8003354:	40021000 	.word	0x40021000
 8003358:	48001000 	.word	0x48001000

0800335c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b08c      	sub	sp, #48	; 0x30
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003364:	f107 031c 	add.w	r3, r7, #28
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	605a      	str	r2, [r3, #4]
 800336e:	609a      	str	r2, [r3, #8]
 8003370:	60da      	str	r2, [r3, #12]
 8003372:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a2f      	ldr	r2, [pc, #188]	; (8003438 <HAL_SPI_MspInit+0xdc>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d129      	bne.n	80033d2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800337e:	4b2f      	ldr	r3, [pc, #188]	; (800343c <HAL_SPI_MspInit+0xe0>)
 8003380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003382:	4a2e      	ldr	r2, [pc, #184]	; (800343c <HAL_SPI_MspInit+0xe0>)
 8003384:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003388:	6613      	str	r3, [r2, #96]	; 0x60
 800338a:	4b2c      	ldr	r3, [pc, #176]	; (800343c <HAL_SPI_MspInit+0xe0>)
 800338c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800338e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003392:	61bb      	str	r3, [r7, #24]
 8003394:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003396:	4b29      	ldr	r3, [pc, #164]	; (800343c <HAL_SPI_MspInit+0xe0>)
 8003398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800339a:	4a28      	ldr	r2, [pc, #160]	; (800343c <HAL_SPI_MspInit+0xe0>)
 800339c:	f043 0301 	orr.w	r3, r3, #1
 80033a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033a2:	4b26      	ldr	r3, [pc, #152]	; (800343c <HAL_SPI_MspInit+0xe0>)
 80033a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80033ae:	23e0      	movs	r3, #224	; 0xe0
 80033b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b2:	2302      	movs	r3, #2
 80033b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b6:	2300      	movs	r3, #0
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033ba:	2303      	movs	r3, #3
 80033bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80033be:	2305      	movs	r3, #5
 80033c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033c2:	f107 031c 	add.w	r3, r7, #28
 80033c6:	4619      	mov	r1, r3
 80033c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033cc:	f001 fc76 	bl	8004cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80033d0:	e02d      	b.n	800342e <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a1a      	ldr	r2, [pc, #104]	; (8003440 <HAL_SPI_MspInit+0xe4>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d128      	bne.n	800342e <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80033dc:	4b17      	ldr	r3, [pc, #92]	; (800343c <HAL_SPI_MspInit+0xe0>)
 80033de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e0:	4a16      	ldr	r2, [pc, #88]	; (800343c <HAL_SPI_MspInit+0xe0>)
 80033e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033e6:	6593      	str	r3, [r2, #88]	; 0x58
 80033e8:	4b14      	ldr	r3, [pc, #80]	; (800343c <HAL_SPI_MspInit+0xe0>)
 80033ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033f0:	613b      	str	r3, [r7, #16]
 80033f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033f4:	4b11      	ldr	r3, [pc, #68]	; (800343c <HAL_SPI_MspInit+0xe0>)
 80033f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033f8:	4a10      	ldr	r2, [pc, #64]	; (800343c <HAL_SPI_MspInit+0xe0>)
 80033fa:	f043 0304 	orr.w	r3, r3, #4
 80033fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003400:	4b0e      	ldr	r3, [pc, #56]	; (800343c <HAL_SPI_MspInit+0xe0>)
 8003402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	60fb      	str	r3, [r7, #12]
 800340a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800340c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003412:	2302      	movs	r3, #2
 8003414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003416:	2300      	movs	r3, #0
 8003418:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800341a:	2303      	movs	r3, #3
 800341c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800341e:	2306      	movs	r3, #6
 8003420:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003422:	f107 031c 	add.w	r3, r7, #28
 8003426:	4619      	mov	r1, r3
 8003428:	4806      	ldr	r0, [pc, #24]	; (8003444 <HAL_SPI_MspInit+0xe8>)
 800342a:	f001 fc47 	bl	8004cbc <HAL_GPIO_Init>
}
 800342e:	bf00      	nop
 8003430:	3730      	adds	r7, #48	; 0x30
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	40013000 	.word	0x40013000
 800343c:	40021000 	.word	0x40021000
 8003440:	40003c00 	.word	0x40003c00
 8003444:	48000800 	.word	0x48000800

08003448 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b0b4      	sub	sp, #208	; 0xd0
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003450:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	605a      	str	r2, [r3, #4]
 800345a:	609a      	str	r2, [r3, #8]
 800345c:	60da      	str	r2, [r3, #12]
 800345e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003460:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003464:	2294      	movs	r2, #148	; 0x94
 8003466:	2100      	movs	r1, #0
 8003468:	4618      	mov	r0, r3
 800346a:	f006 ff53 	bl	800a314 <memset>
  if(huart->Instance==UART4)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a87      	ldr	r2, [pc, #540]	; (8003690 <HAL_UART_MspInit+0x248>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d13c      	bne.n	80034f2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003478:	2308      	movs	r3, #8
 800347a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800347c:	2300      	movs	r3, #0
 800347e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003480:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003484:	4618      	mov	r0, r3
 8003486:	f004 f9c9 	bl	800781c <HAL_RCCEx_PeriphCLKConfig>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003490:	f7ff fd4c 	bl	8002f2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003494:	4b7f      	ldr	r3, [pc, #508]	; (8003694 <HAL_UART_MspInit+0x24c>)
 8003496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003498:	4a7e      	ldr	r2, [pc, #504]	; (8003694 <HAL_UART_MspInit+0x24c>)
 800349a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800349e:	6593      	str	r3, [r2, #88]	; 0x58
 80034a0:	4b7c      	ldr	r3, [pc, #496]	; (8003694 <HAL_UART_MspInit+0x24c>)
 80034a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034a8:	627b      	str	r3, [r7, #36]	; 0x24
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ac:	4b79      	ldr	r3, [pc, #484]	; (8003694 <HAL_UART_MspInit+0x24c>)
 80034ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034b0:	4a78      	ldr	r2, [pc, #480]	; (8003694 <HAL_UART_MspInit+0x24c>)
 80034b2:	f043 0301 	orr.w	r3, r3, #1
 80034b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034b8:	4b76      	ldr	r3, [pc, #472]	; (8003694 <HAL_UART_MspInit+0x24c>)
 80034ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	623b      	str	r3, [r7, #32]
 80034c2:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80034c4:	2303      	movs	r3, #3
 80034c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ca:	2302      	movs	r3, #2
 80034cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d0:	2300      	movs	r3, #0
 80034d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034d6:	2303      	movs	r3, #3
 80034d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80034dc:	2308      	movs	r3, #8
 80034de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034e2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80034e6:	4619      	mov	r1, r3
 80034e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034ec:	f001 fbe6 	bl	8004cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80034f0:	e0ca      	b.n	8003688 <HAL_UART_MspInit+0x240>
  else if(huart->Instance==USART1)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a68      	ldr	r2, [pc, #416]	; (8003698 <HAL_UART_MspInit+0x250>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d143      	bne.n	8003584 <HAL_UART_MspInit+0x13c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80034fc:	2301      	movs	r3, #1
 80034fe:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003500:	2300      	movs	r3, #0
 8003502:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003504:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003508:	4618      	mov	r0, r3
 800350a:	f004 f987 	bl	800781c <HAL_RCCEx_PeriphCLKConfig>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8003514:	f7ff fd0a 	bl	8002f2c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003518:	4b5e      	ldr	r3, [pc, #376]	; (8003694 <HAL_UART_MspInit+0x24c>)
 800351a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800351c:	4a5d      	ldr	r2, [pc, #372]	; (8003694 <HAL_UART_MspInit+0x24c>)
 800351e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003522:	6613      	str	r3, [r2, #96]	; 0x60
 8003524:	4b5b      	ldr	r3, [pc, #364]	; (8003694 <HAL_UART_MspInit+0x24c>)
 8003526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003528:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800352c:	61fb      	str	r3, [r7, #28]
 800352e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003530:	4b58      	ldr	r3, [pc, #352]	; (8003694 <HAL_UART_MspInit+0x24c>)
 8003532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003534:	4a57      	ldr	r2, [pc, #348]	; (8003694 <HAL_UART_MspInit+0x24c>)
 8003536:	f043 0302 	orr.w	r3, r3, #2
 800353a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800353c:	4b55      	ldr	r3, [pc, #340]	; (8003694 <HAL_UART_MspInit+0x24c>)
 800353e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	61bb      	str	r3, [r7, #24]
 8003546:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8003548:	23c0      	movs	r3, #192	; 0xc0
 800354a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800354e:	2302      	movs	r3, #2
 8003550:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003554:	2300      	movs	r3, #0
 8003556:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800355a:	2303      	movs	r3, #3
 800355c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003560:	2307      	movs	r3, #7
 8003562:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003566:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800356a:	4619      	mov	r1, r3
 800356c:	484b      	ldr	r0, [pc, #300]	; (800369c <HAL_UART_MspInit+0x254>)
 800356e:	f001 fba5 	bl	8004cbc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 8003572:	2200      	movs	r2, #0
 8003574:	2106      	movs	r1, #6
 8003576:	2025      	movs	r0, #37	; 0x25
 8003578:	f001 f9ae 	bl	80048d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800357c:	2025      	movs	r0, #37	; 0x25
 800357e:	f001 f9c7 	bl	8004910 <HAL_NVIC_EnableIRQ>
}
 8003582:	e081      	b.n	8003688 <HAL_UART_MspInit+0x240>
  else if(huart->Instance==USART2)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a45      	ldr	r2, [pc, #276]	; (80036a0 <HAL_UART_MspInit+0x258>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d13b      	bne.n	8003606 <HAL_UART_MspInit+0x1be>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800358e:	2302      	movs	r3, #2
 8003590:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003592:	2300      	movs	r3, #0
 8003594:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003596:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800359a:	4618      	mov	r0, r3
 800359c:	f004 f93e 	bl	800781c <HAL_RCCEx_PeriphCLKConfig>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <HAL_UART_MspInit+0x162>
      Error_Handler();
 80035a6:	f7ff fcc1 	bl	8002f2c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80035aa:	4b3a      	ldr	r3, [pc, #232]	; (8003694 <HAL_UART_MspInit+0x24c>)
 80035ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ae:	4a39      	ldr	r2, [pc, #228]	; (8003694 <HAL_UART_MspInit+0x24c>)
 80035b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035b4:	6593      	str	r3, [r2, #88]	; 0x58
 80035b6:	4b37      	ldr	r3, [pc, #220]	; (8003694 <HAL_UART_MspInit+0x24c>)
 80035b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035be:	617b      	str	r3, [r7, #20]
 80035c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80035c2:	4b34      	ldr	r3, [pc, #208]	; (8003694 <HAL_UART_MspInit+0x24c>)
 80035c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c6:	4a33      	ldr	r2, [pc, #204]	; (8003694 <HAL_UART_MspInit+0x24c>)
 80035c8:	f043 0308 	orr.w	r3, r3, #8
 80035cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035ce:	4b31      	ldr	r3, [pc, #196]	; (8003694 <HAL_UART_MspInit+0x24c>)
 80035d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d2:	f003 0308 	and.w	r3, r3, #8
 80035d6:	613b      	str	r3, [r7, #16]
 80035d8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80035da:	2378      	movs	r3, #120	; 0x78
 80035dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e0:	2302      	movs	r3, #2
 80035e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e6:	2300      	movs	r3, #0
 80035e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ec:	2303      	movs	r3, #3
 80035ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80035f2:	2307      	movs	r3, #7
 80035f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035f8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80035fc:	4619      	mov	r1, r3
 80035fe:	4829      	ldr	r0, [pc, #164]	; (80036a4 <HAL_UART_MspInit+0x25c>)
 8003600:	f001 fb5c 	bl	8004cbc <HAL_GPIO_Init>
}
 8003604:	e040      	b.n	8003688 <HAL_UART_MspInit+0x240>
  else if(huart->Instance==USART3)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a27      	ldr	r2, [pc, #156]	; (80036a8 <HAL_UART_MspInit+0x260>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d13b      	bne.n	8003688 <HAL_UART_MspInit+0x240>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003610:	2304      	movs	r3, #4
 8003612:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003614:	2300      	movs	r3, #0
 8003616:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003618:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800361c:	4618      	mov	r0, r3
 800361e:	f004 f8fd 	bl	800781c <HAL_RCCEx_PeriphCLKConfig>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <HAL_UART_MspInit+0x1e4>
      Error_Handler();
 8003628:	f7ff fc80 	bl	8002f2c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800362c:	4b19      	ldr	r3, [pc, #100]	; (8003694 <HAL_UART_MspInit+0x24c>)
 800362e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003630:	4a18      	ldr	r2, [pc, #96]	; (8003694 <HAL_UART_MspInit+0x24c>)
 8003632:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003636:	6593      	str	r3, [r2, #88]	; 0x58
 8003638:	4b16      	ldr	r3, [pc, #88]	; (8003694 <HAL_UART_MspInit+0x24c>)
 800363a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003640:	60fb      	str	r3, [r7, #12]
 8003642:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003644:	4b13      	ldr	r3, [pc, #76]	; (8003694 <HAL_UART_MspInit+0x24c>)
 8003646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003648:	4a12      	ldr	r2, [pc, #72]	; (8003694 <HAL_UART_MspInit+0x24c>)
 800364a:	f043 0308 	orr.w	r3, r3, #8
 800364e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003650:	4b10      	ldr	r3, [pc, #64]	; (8003694 <HAL_UART_MspInit+0x24c>)
 8003652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003654:	f003 0308 	and.w	r3, r3, #8
 8003658:	60bb      	str	r3, [r7, #8]
 800365a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800365c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003660:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003664:	2302      	movs	r3, #2
 8003666:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366a:	2300      	movs	r3, #0
 800366c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003670:	2303      	movs	r3, #3
 8003672:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003676:	2307      	movs	r3, #7
 8003678:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800367c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003680:	4619      	mov	r1, r3
 8003682:	4808      	ldr	r0, [pc, #32]	; (80036a4 <HAL_UART_MspInit+0x25c>)
 8003684:	f001 fb1a 	bl	8004cbc <HAL_GPIO_Init>
}
 8003688:	bf00      	nop
 800368a:	37d0      	adds	r7, #208	; 0xd0
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40004c00 	.word	0x40004c00
 8003694:	40021000 	.word	0x40021000
 8003698:	40013800 	.word	0x40013800
 800369c:	48000400 	.word	0x48000400
 80036a0:	40004400 	.word	0x40004400
 80036a4:	48000c00 	.word	0x48000c00
 80036a8:	40004800 	.word	0x40004800

080036ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b08e      	sub	sp, #56	; 0x38
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80036b4:	2300      	movs	r3, #0
 80036b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80036ba:	4b34      	ldr	r3, [pc, #208]	; (800378c <HAL_InitTick+0xe0>)
 80036bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036be:	4a33      	ldr	r2, [pc, #204]	; (800378c <HAL_InitTick+0xe0>)
 80036c0:	f043 0310 	orr.w	r3, r3, #16
 80036c4:	6593      	str	r3, [r2, #88]	; 0x58
 80036c6:	4b31      	ldr	r3, [pc, #196]	; (800378c <HAL_InitTick+0xe0>)
 80036c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ca:	f003 0310 	and.w	r3, r3, #16
 80036ce:	60fb      	str	r3, [r7, #12]
 80036d0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80036d2:	f107 0210 	add.w	r2, r7, #16
 80036d6:	f107 0314 	add.w	r3, r7, #20
 80036da:	4611      	mov	r1, r2
 80036dc:	4618      	mov	r0, r3
 80036de:	f003 ffab 	bl	8007638 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80036e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d103      	bne.n	80036f4 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80036ec:	f003 ff78 	bl	80075e0 <HAL_RCC_GetPCLK1Freq>
 80036f0:	6378      	str	r0, [r7, #52]	; 0x34
 80036f2:	e004      	b.n	80036fe <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80036f4:	f003 ff74 	bl	80075e0 <HAL_RCC_GetPCLK1Freq>
 80036f8:	4603      	mov	r3, r0
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80036fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003700:	4a23      	ldr	r2, [pc, #140]	; (8003790 <HAL_InitTick+0xe4>)
 8003702:	fba2 2303 	umull	r2, r3, r2, r3
 8003706:	0c9b      	lsrs	r3, r3, #18
 8003708:	3b01      	subs	r3, #1
 800370a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800370c:	4b21      	ldr	r3, [pc, #132]	; (8003794 <HAL_InitTick+0xe8>)
 800370e:	4a22      	ldr	r2, [pc, #136]	; (8003798 <HAL_InitTick+0xec>)
 8003710:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003712:	4b20      	ldr	r3, [pc, #128]	; (8003794 <HAL_InitTick+0xe8>)
 8003714:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003718:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800371a:	4a1e      	ldr	r2, [pc, #120]	; (8003794 <HAL_InitTick+0xe8>)
 800371c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003720:	4b1c      	ldr	r3, [pc, #112]	; (8003794 <HAL_InitTick+0xe8>)
 8003722:	2200      	movs	r2, #0
 8003724:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003726:	4b1b      	ldr	r3, [pc, #108]	; (8003794 <HAL_InitTick+0xe8>)
 8003728:	2200      	movs	r2, #0
 800372a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800372c:	4b19      	ldr	r3, [pc, #100]	; (8003794 <HAL_InitTick+0xe8>)
 800372e:	2200      	movs	r2, #0
 8003730:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003732:	4818      	ldr	r0, [pc, #96]	; (8003794 <HAL_InitTick+0xe8>)
 8003734:	f004 fe3d 	bl	80083b2 <HAL_TIM_Base_Init>
 8003738:	4603      	mov	r3, r0
 800373a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800373e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003742:	2b00      	cmp	r3, #0
 8003744:	d11b      	bne.n	800377e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003746:	4813      	ldr	r0, [pc, #76]	; (8003794 <HAL_InitTick+0xe8>)
 8003748:	f004 fe94 	bl	8008474 <HAL_TIM_Base_Start_IT>
 800374c:	4603      	mov	r3, r0
 800374e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003752:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003756:	2b00      	cmp	r3, #0
 8003758:	d111      	bne.n	800377e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800375a:	2036      	movs	r0, #54	; 0x36
 800375c:	f001 f8d8 	bl	8004910 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b0f      	cmp	r3, #15
 8003764:	d808      	bhi.n	8003778 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003766:	2200      	movs	r2, #0
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	2036      	movs	r0, #54	; 0x36
 800376c:	f001 f8b4 	bl	80048d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003770:	4a0a      	ldr	r2, [pc, #40]	; (800379c <HAL_InitTick+0xf0>)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	e002      	b.n	800377e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800377e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003782:	4618      	mov	r0, r3
 8003784:	3738      	adds	r7, #56	; 0x38
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	40021000 	.word	0x40021000
 8003790:	431bde83 	.word	0x431bde83
 8003794:	20001294 	.word	0x20001294
 8003798:	40001000 	.word	0x40001000
 800379c:	20000040 	.word	0x20000040

080037a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80037a4:	e7fe      	b.n	80037a4 <NMI_Handler+0x4>

080037a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037a6:	b480      	push	{r7}
 80037a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037aa:	e7fe      	b.n	80037aa <HardFault_Handler+0x4>

080037ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037b0:	e7fe      	b.n	80037b0 <MemManage_Handler+0x4>

080037b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037b2:	b480      	push	{r7}
 80037b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037b6:	e7fe      	b.n	80037b6 <BusFault_Handler+0x4>

080037b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037bc:	e7fe      	b.n	80037bc <UsageFault_Handler+0x4>

080037be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037be:	b480      	push	{r7}
 80037c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037c2:	bf00      	nop
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80037d0:	2020      	movs	r0, #32
 80037d2:	f001 fd0f 	bl	80051f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80037d6:	2040      	movs	r0, #64	; 0x40
 80037d8:	f001 fd0c 	bl	80051f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80037dc:	2080      	movs	r0, #128	; 0x80
 80037de:	f001 fd09 	bl	80051f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80037e2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80037e6:	f001 fd05 	bl	80051f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80037ea:	bf00      	nop
 80037ec:	bd80      	pop	{r7, pc}
	...

080037f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80037f4:	4802      	ldr	r0, [pc, #8]	; (8003800 <USART1_IRQHandler+0x10>)
 80037f6:	f005 f96f 	bl	8008ad8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80037fa:	bf00      	nop
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	200010d4 	.word	0x200010d4

08003804 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 8003808:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800380c:	f001 fcf2 	bl	80051f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8003810:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003814:	f001 fcee 	bl	80051f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 8003818:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800381c:	f001 fcea 	bl	80051f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8003820:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003824:	f001 fce6 	bl	80051f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8003828:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800382c:	f001 fce2 	bl	80051f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8003830:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003834:	f001 fcde 	bl	80051f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003838:	bf00      	nop
 800383a:	bd80      	pop	{r7, pc}

0800383c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003840:	4802      	ldr	r0, [pc, #8]	; (800384c <TIM6_DAC_IRQHandler+0x10>)
 8003842:	f004 fe87 	bl	8008554 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003846:	bf00      	nop
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	20001294 	.word	0x20001294

08003850 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003858:	4a14      	ldr	r2, [pc, #80]	; (80038ac <_sbrk+0x5c>)
 800385a:	4b15      	ldr	r3, [pc, #84]	; (80038b0 <_sbrk+0x60>)
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003864:	4b13      	ldr	r3, [pc, #76]	; (80038b4 <_sbrk+0x64>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d102      	bne.n	8003872 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800386c:	4b11      	ldr	r3, [pc, #68]	; (80038b4 <_sbrk+0x64>)
 800386e:	4a12      	ldr	r2, [pc, #72]	; (80038b8 <_sbrk+0x68>)
 8003870:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003872:	4b10      	ldr	r3, [pc, #64]	; (80038b4 <_sbrk+0x64>)
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4413      	add	r3, r2
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	429a      	cmp	r2, r3
 800387e:	d207      	bcs.n	8003890 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003880:	f006 fd50 	bl	800a324 <__errno>
 8003884:	4603      	mov	r3, r0
 8003886:	220c      	movs	r2, #12
 8003888:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800388a:	f04f 33ff 	mov.w	r3, #4294967295
 800388e:	e009      	b.n	80038a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003890:	4b08      	ldr	r3, [pc, #32]	; (80038b4 <_sbrk+0x64>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003896:	4b07      	ldr	r3, [pc, #28]	; (80038b4 <_sbrk+0x64>)
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4413      	add	r3, r2
 800389e:	4a05      	ldr	r2, [pc, #20]	; (80038b4 <_sbrk+0x64>)
 80038a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038a2:	68fb      	ldr	r3, [r7, #12]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3718      	adds	r7, #24
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	200a0000 	.word	0x200a0000
 80038b0:	00000400 	.word	0x00000400
 80038b4:	200012e0 	.word	0x200012e0
 80038b8:	200014b0 	.word	0x200014b0

080038bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80038c0:	4b06      	ldr	r3, [pc, #24]	; (80038dc <SystemInit+0x20>)
 80038c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c6:	4a05      	ldr	r2, [pc, #20]	; (80038dc <SystemInit+0x20>)
 80038c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80038d0:	bf00      	nop
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	e000ed00 	.word	0xe000ed00

080038e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80038e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003918 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80038e4:	f7ff ffea 	bl	80038bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80038e8:	480c      	ldr	r0, [pc, #48]	; (800391c <LoopForever+0x6>)
  ldr r1, =_edata
 80038ea:	490d      	ldr	r1, [pc, #52]	; (8003920 <LoopForever+0xa>)
  ldr r2, =_sidata
 80038ec:	4a0d      	ldr	r2, [pc, #52]	; (8003924 <LoopForever+0xe>)
  movs r3, #0
 80038ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038f0:	e002      	b.n	80038f8 <LoopCopyDataInit>

080038f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038f6:	3304      	adds	r3, #4

080038f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038fc:	d3f9      	bcc.n	80038f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038fe:	4a0a      	ldr	r2, [pc, #40]	; (8003928 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003900:	4c0a      	ldr	r4, [pc, #40]	; (800392c <LoopForever+0x16>)
  movs r3, #0
 8003902:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003904:	e001      	b.n	800390a <LoopFillZerobss>

08003906 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003906:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003908:	3204      	adds	r2, #4

0800390a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800390a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800390c:	d3fb      	bcc.n	8003906 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800390e:	f006 fd0f 	bl	800a330 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003912:	f7fe fbd7 	bl	80020c4 <main>

08003916 <LoopForever>:

LoopForever:
    b LoopForever
 8003916:	e7fe      	b.n	8003916 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003918:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800391c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003920:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8003924:	0800adc8 	.word	0x0800adc8
  ldr r2, =_sbss
 8003928:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 800392c:	200014ac 	.word	0x200014ac

08003930 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003930:	e7fe      	b.n	8003930 <ADC1_IRQHandler>

08003932 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b082      	sub	sp, #8
 8003936:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003938:	2300      	movs	r3, #0
 800393a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800393c:	2003      	movs	r0, #3
 800393e:	f000 ffc0 	bl	80048c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003942:	200f      	movs	r0, #15
 8003944:	f7ff feb2 	bl	80036ac <HAL_InitTick>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d002      	beq.n	8003954 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	71fb      	strb	r3, [r7, #7]
 8003952:	e001      	b.n	8003958 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003954:	f7ff faf0 	bl	8002f38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003958:	79fb      	ldrb	r3, [r7, #7]
}
 800395a:	4618      	mov	r0, r3
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
	...

08003964 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003968:	4b06      	ldr	r3, [pc, #24]	; (8003984 <HAL_IncTick+0x20>)
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	461a      	mov	r2, r3
 800396e:	4b06      	ldr	r3, [pc, #24]	; (8003988 <HAL_IncTick+0x24>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4413      	add	r3, r2
 8003974:	4a04      	ldr	r2, [pc, #16]	; (8003988 <HAL_IncTick+0x24>)
 8003976:	6013      	str	r3, [r2, #0]
}
 8003978:	bf00      	nop
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	20000044 	.word	0x20000044
 8003988:	200012e4 	.word	0x200012e4

0800398c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
  return uwTick;
 8003990:	4b03      	ldr	r3, [pc, #12]	; (80039a0 <HAL_GetTick+0x14>)
 8003992:	681b      	ldr	r3, [r3, #0]
}
 8003994:	4618      	mov	r0, r3
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	200012e4 	.word	0x200012e4

080039a4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	431a      	orrs	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	609a      	str	r2, [r3, #8]
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
 80039d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	609a      	str	r2, [r3, #8]
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b087      	sub	sp, #28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
 8003a18:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	3360      	adds	r3, #96	; 0x60
 8003a1e:	461a      	mov	r2, r3
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4413      	add	r3, r2
 8003a26:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	4b08      	ldr	r3, [pc, #32]	; (8003a50 <LL_ADC_SetOffset+0x44>)
 8003a2e:	4013      	ands	r3, r2
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003a36:	683a      	ldr	r2, [r7, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003a44:	bf00      	nop
 8003a46:	371c      	adds	r7, #28
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	03fff000 	.word	0x03fff000

08003a54 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	3360      	adds	r3, #96	; 0x60
 8003a62:	461a      	mov	r2, r3
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b087      	sub	sp, #28
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	3360      	adds	r3, #96	; 0x60
 8003a90:	461a      	mov	r2, r3
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4413      	add	r3, r2
 8003a98:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003aaa:	bf00      	nop
 8003aac:	371c      	adds	r7, #28
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b083      	sub	sp, #12
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
 8003abe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	431a      	orrs	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	615a      	str	r2, [r3, #20]
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	3330      	adds	r3, #48	; 0x30
 8003aec:	461a      	mov	r2, r3
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	0a1b      	lsrs	r3, r3, #8
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	f003 030c 	and.w	r3, r3, #12
 8003af8:	4413      	add	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	f003 031f 	and.w	r3, r3, #31
 8003b06:	211f      	movs	r1, #31
 8003b08:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	401a      	ands	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	0e9b      	lsrs	r3, r3, #26
 8003b14:	f003 011f 	and.w	r1, r3, #31
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	f003 031f 	and.w	r3, r3, #31
 8003b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b22:	431a      	orrs	r2, r3
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003b28:	bf00      	nop
 8003b2a:	371c      	adds	r7, #28
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b087      	sub	sp, #28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	3314      	adds	r3, #20
 8003b44:	461a      	mov	r2, r3
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	0e5b      	lsrs	r3, r3, #25
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	4413      	add	r3, r2
 8003b52:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	0d1b      	lsrs	r3, r3, #20
 8003b5c:	f003 031f 	and.w	r3, r3, #31
 8003b60:	2107      	movs	r1, #7
 8003b62:	fa01 f303 	lsl.w	r3, r1, r3
 8003b66:	43db      	mvns	r3, r3
 8003b68:	401a      	ands	r2, r3
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	0d1b      	lsrs	r3, r3, #20
 8003b6e:	f003 031f 	and.w	r3, r3, #31
 8003b72:	6879      	ldr	r1, [r7, #4]
 8003b74:	fa01 f303 	lsl.w	r3, r1, r3
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003b7e:	bf00      	nop
 8003b80:	371c      	adds	r7, #28
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
	...

08003b8c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	401a      	ands	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f003 0318 	and.w	r3, r3, #24
 8003bae:	4908      	ldr	r1, [pc, #32]	; (8003bd0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003bb0:	40d9      	lsrs	r1, r3
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	400b      	ands	r3, r1
 8003bb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003bc2:	bf00      	nop
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	0007ffff 	.word	0x0007ffff

08003bd4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003be4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	6093      	str	r3, [r2, #8]
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c0c:	d101      	bne.n	8003c12 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e000      	b.n	8003c14 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003c30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c34:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c5c:	d101      	bne.n	8003c62 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e000      	b.n	8003c64 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <LL_ADC_IsEnabled+0x18>
 8003c84:	2301      	movs	r3, #1
 8003c86:	e000      	b.n	8003c8a <LL_ADC_IsEnabled+0x1a>
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b083      	sub	sp, #12
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 0304 	and.w	r3, r3, #4
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	d101      	bne.n	8003cae <LL_ADC_REG_IsConversionOngoing+0x18>
 8003caa:	2301      	movs	r3, #1
 8003cac:	e000      	b.n	8003cb0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f003 0308 	and.w	r3, r3, #8
 8003ccc:	2b08      	cmp	r3, #8
 8003cce:	d101      	bne.n	8003cd4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e000      	b.n	8003cd6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
	...

08003ce4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b088      	sub	sp, #32
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cec:	2300      	movs	r3, #0
 8003cee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e129      	b.n	8003f52 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d109      	bne.n	8003d20 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f7ff f937 	bl	8002f80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7ff ff67 	bl	8003bf8 <LL_ADC_IsDeepPowerDownEnabled>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d004      	beq.n	8003d3a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7ff ff4d 	bl	8003bd4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7ff ff82 	bl	8003c48 <LL_ADC_IsInternalRegulatorEnabled>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d115      	bne.n	8003d76 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7ff ff66 	bl	8003c20 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d54:	4b81      	ldr	r3, [pc, #516]	; (8003f5c <HAL_ADC_Init+0x278>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	099b      	lsrs	r3, r3, #6
 8003d5a:	4a81      	ldr	r2, [pc, #516]	; (8003f60 <HAL_ADC_Init+0x27c>)
 8003d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d60:	099b      	lsrs	r3, r3, #6
 8003d62:	3301      	adds	r3, #1
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003d68:	e002      	b.n	8003d70 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f9      	bne.n	8003d6a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7ff ff64 	bl	8003c48 <LL_ADC_IsInternalRegulatorEnabled>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10d      	bne.n	8003da2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8a:	f043 0210 	orr.w	r2, r3, #16
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d96:	f043 0201 	orr.w	r2, r3, #1
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7ff ff75 	bl	8003c96 <LL_ADC_REG_IsConversionOngoing>
 8003dac:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db2:	f003 0310 	and.w	r3, r3, #16
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f040 80c2 	bne.w	8003f40 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f040 80be 	bne.w	8003f40 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003dcc:	f043 0202 	orr.w	r2, r3, #2
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7ff ff49 	bl	8003c70 <LL_ADC_IsEnabled>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10b      	bne.n	8003dfc <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003de4:	485f      	ldr	r0, [pc, #380]	; (8003f64 <HAL_ADC_Init+0x280>)
 8003de6:	f7ff ff43 	bl	8003c70 <LL_ADC_IsEnabled>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d105      	bne.n	8003dfc <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	4619      	mov	r1, r3
 8003df6:	485c      	ldr	r0, [pc, #368]	; (8003f68 <HAL_ADC_Init+0x284>)
 8003df8:	f7ff fdd4 	bl	80039a4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	7e5b      	ldrb	r3, [r3, #25]
 8003e00:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e06:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003e0c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003e12:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e1a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d106      	bne.n	8003e38 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	045b      	lsls	r3, r3, #17
 8003e32:	69ba      	ldr	r2, [r7, #24]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d009      	beq.n	8003e54 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e44:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	4b44      	ldr	r3, [pc, #272]	; (8003f6c <HAL_ADC_Init+0x288>)
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6812      	ldr	r2, [r2, #0]
 8003e62:	69b9      	ldr	r1, [r7, #24]
 8003e64:	430b      	orrs	r3, r1
 8003e66:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7ff ff25 	bl	8003cbc <LL_ADC_INJ_IsConversionOngoing>
 8003e72:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d140      	bne.n	8003efc <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d13d      	bne.n	8003efc <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	7e1b      	ldrb	r3, [r3, #24]
 8003e88:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003e8a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e92:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003e94:	4313      	orrs	r3, r2
 8003e96:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ea2:	f023 0306 	bic.w	r3, r3, #6
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6812      	ldr	r2, [r2, #0]
 8003eaa:	69b9      	ldr	r1, [r7, #24]
 8003eac:	430b      	orrs	r3, r1
 8003eae:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d118      	bne.n	8003eec <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003ec4:	f023 0304 	bic.w	r3, r3, #4
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003ed0:	4311      	orrs	r1, r2
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003ed6:	4311      	orrs	r1, r2
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003edc:	430a      	orrs	r2, r1
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f042 0201 	orr.w	r2, r2, #1
 8003ee8:	611a      	str	r2, [r3, #16]
 8003eea:	e007      	b.n	8003efc <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	691a      	ldr	r2, [r3, #16]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 0201 	bic.w	r2, r2, #1
 8003efa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d10c      	bne.n	8003f1e <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0a:	f023 010f 	bic.w	r1, r3, #15
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	1e5a      	subs	r2, r3, #1
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	631a      	str	r2, [r3, #48]	; 0x30
 8003f1c:	e007      	b.n	8003f2e <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 020f 	bic.w	r2, r2, #15
 8003f2c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f32:	f023 0303 	bic.w	r3, r3, #3
 8003f36:	f043 0201 	orr.w	r2, r3, #1
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	659a      	str	r2, [r3, #88]	; 0x58
 8003f3e:	e007      	b.n	8003f50 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f44:	f043 0210 	orr.w	r2, r3, #16
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003f50:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3720      	adds	r7, #32
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	2000003c 	.word	0x2000003c
 8003f60:	053e2d63 	.word	0x053e2d63
 8003f64:	50040000 	.word	0x50040000
 8003f68:	50040300 	.word	0x50040300
 8003f6c:	fff0c007 	.word	0xfff0c007

08003f70 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b0b6      	sub	sp, #216	; 0xd8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003f80:	2300      	movs	r3, #0
 8003f82:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d101      	bne.n	8003f92 <HAL_ADC_ConfigChannel+0x22>
 8003f8e:	2302      	movs	r3, #2
 8003f90:	e3d5      	b.n	800473e <HAL_ADC_ConfigChannel+0x7ce>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7ff fe79 	bl	8003c96 <LL_ADC_REG_IsConversionOngoing>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f040 83ba 	bne.w	8004720 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	2b05      	cmp	r3, #5
 8003fba:	d824      	bhi.n	8004006 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	3b02      	subs	r3, #2
 8003fc2:	2b03      	cmp	r3, #3
 8003fc4:	d81b      	bhi.n	8003ffe <HAL_ADC_ConfigChannel+0x8e>
 8003fc6:	a201      	add	r2, pc, #4	; (adr r2, 8003fcc <HAL_ADC_ConfigChannel+0x5c>)
 8003fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fcc:	08003fdd 	.word	0x08003fdd
 8003fd0:	08003fe5 	.word	0x08003fe5
 8003fd4:	08003fed 	.word	0x08003fed
 8003fd8:	08003ff5 	.word	0x08003ff5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003fdc:	230c      	movs	r3, #12
 8003fde:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003fe2:	e010      	b.n	8004006 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003fe4:	2312      	movs	r3, #18
 8003fe6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003fea:	e00c      	b.n	8004006 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003fec:	2318      	movs	r3, #24
 8003fee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003ff2:	e008      	b.n	8004006 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003ff4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ff8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003ffc:	e003      	b.n	8004006 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003ffe:	2306      	movs	r3, #6
 8004000:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004004:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6818      	ldr	r0, [r3, #0]
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	461a      	mov	r2, r3
 8004010:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004014:	f7ff fd62 	bl	8003adc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4618      	mov	r0, r3
 800401e:	f7ff fe3a 	bl	8003c96 <LL_ADC_REG_IsConversionOngoing>
 8004022:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff fe46 	bl	8003cbc <LL_ADC_INJ_IsConversionOngoing>
 8004030:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004034:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004038:	2b00      	cmp	r3, #0
 800403a:	f040 81bf 	bne.w	80043bc <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800403e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004042:	2b00      	cmp	r3, #0
 8004044:	f040 81ba 	bne.w	80043bc <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004050:	d10f      	bne.n	8004072 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6818      	ldr	r0, [r3, #0]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2200      	movs	r2, #0
 800405c:	4619      	mov	r1, r3
 800405e:	f7ff fd69 	bl	8003b34 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800406a:	4618      	mov	r0, r3
 800406c:	f7ff fd23 	bl	8003ab6 <LL_ADC_SetSamplingTimeCommonConfig>
 8004070:	e00e      	b.n	8004090 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6818      	ldr	r0, [r3, #0]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	6819      	ldr	r1, [r3, #0]
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	461a      	mov	r2, r3
 8004080:	f7ff fd58 	bl	8003b34 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2100      	movs	r1, #0
 800408a:	4618      	mov	r0, r3
 800408c:	f7ff fd13 	bl	8003ab6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	695a      	ldr	r2, [r3, #20]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	08db      	lsrs	r3, r3, #3
 800409c:	f003 0303 	and.w	r3, r3, #3
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	fa02 f303 	lsl.w	r3, r2, r3
 80040a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	2b04      	cmp	r3, #4
 80040b0:	d00a      	beq.n	80040c8 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6818      	ldr	r0, [r3, #0]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	6919      	ldr	r1, [r3, #16]
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040c2:	f7ff fca3 	bl	8003a0c <LL_ADC_SetOffset>
 80040c6:	e179      	b.n	80043bc <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2100      	movs	r1, #0
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff fcc0 	bl	8003a54 <LL_ADC_GetOffsetChannel>
 80040d4:	4603      	mov	r3, r0
 80040d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10a      	bne.n	80040f4 <HAL_ADC_ConfigChannel+0x184>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2100      	movs	r1, #0
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7ff fcb5 	bl	8003a54 <LL_ADC_GetOffsetChannel>
 80040ea:	4603      	mov	r3, r0
 80040ec:	0e9b      	lsrs	r3, r3, #26
 80040ee:	f003 021f 	and.w	r2, r3, #31
 80040f2:	e01e      	b.n	8004132 <HAL_ADC_ConfigChannel+0x1c2>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2100      	movs	r1, #0
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7ff fcaa 	bl	8003a54 <LL_ADC_GetOffsetChannel>
 8004100:	4603      	mov	r3, r0
 8004102:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004106:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800410a:	fa93 f3a3 	rbit	r3, r3
 800410e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004112:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004116:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800411a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8004122:	2320      	movs	r3, #32
 8004124:	e004      	b.n	8004130 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8004126:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800412a:	fab3 f383 	clz	r3, r3
 800412e:	b2db      	uxtb	r3, r3
 8004130:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800413a:	2b00      	cmp	r3, #0
 800413c:	d105      	bne.n	800414a <HAL_ADC_ConfigChannel+0x1da>
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	0e9b      	lsrs	r3, r3, #26
 8004144:	f003 031f 	and.w	r3, r3, #31
 8004148:	e018      	b.n	800417c <HAL_ADC_ConfigChannel+0x20c>
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004152:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004156:	fa93 f3a3 	rbit	r3, r3
 800415a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 800415e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004162:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004166:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800416e:	2320      	movs	r3, #32
 8004170:	e004      	b.n	800417c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8004172:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004176:	fab3 f383 	clz	r3, r3
 800417a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800417c:	429a      	cmp	r2, r3
 800417e:	d106      	bne.n	800418e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2200      	movs	r2, #0
 8004186:	2100      	movs	r1, #0
 8004188:	4618      	mov	r0, r3
 800418a:	f7ff fc79 	bl	8003a80 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2101      	movs	r1, #1
 8004194:	4618      	mov	r0, r3
 8004196:	f7ff fc5d 	bl	8003a54 <LL_ADC_GetOffsetChannel>
 800419a:	4603      	mov	r3, r0
 800419c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10a      	bne.n	80041ba <HAL_ADC_ConfigChannel+0x24a>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2101      	movs	r1, #1
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff fc52 	bl	8003a54 <LL_ADC_GetOffsetChannel>
 80041b0:	4603      	mov	r3, r0
 80041b2:	0e9b      	lsrs	r3, r3, #26
 80041b4:	f003 021f 	and.w	r2, r3, #31
 80041b8:	e01e      	b.n	80041f8 <HAL_ADC_ConfigChannel+0x288>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2101      	movs	r1, #1
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7ff fc47 	bl	8003a54 <LL_ADC_GetOffsetChannel>
 80041c6:	4603      	mov	r3, r0
 80041c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80041d0:	fa93 f3a3 	rbit	r3, r3
 80041d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80041d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80041dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80041e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80041e8:	2320      	movs	r3, #32
 80041ea:	e004      	b.n	80041f6 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80041ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80041f0:	fab3 f383 	clz	r3, r3
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004200:	2b00      	cmp	r3, #0
 8004202:	d105      	bne.n	8004210 <HAL_ADC_ConfigChannel+0x2a0>
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	0e9b      	lsrs	r3, r3, #26
 800420a:	f003 031f 	and.w	r3, r3, #31
 800420e:	e018      	b.n	8004242 <HAL_ADC_ConfigChannel+0x2d2>
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004218:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800421c:	fa93 f3a3 	rbit	r3, r3
 8004220:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004224:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004228:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800422c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004230:	2b00      	cmp	r3, #0
 8004232:	d101      	bne.n	8004238 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8004234:	2320      	movs	r3, #32
 8004236:	e004      	b.n	8004242 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8004238:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800423c:	fab3 f383 	clz	r3, r3
 8004240:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004242:	429a      	cmp	r2, r3
 8004244:	d106      	bne.n	8004254 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2200      	movs	r2, #0
 800424c:	2101      	movs	r1, #1
 800424e:	4618      	mov	r0, r3
 8004250:	f7ff fc16 	bl	8003a80 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2102      	movs	r1, #2
 800425a:	4618      	mov	r0, r3
 800425c:	f7ff fbfa 	bl	8003a54 <LL_ADC_GetOffsetChannel>
 8004260:	4603      	mov	r3, r0
 8004262:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10a      	bne.n	8004280 <HAL_ADC_ConfigChannel+0x310>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2102      	movs	r1, #2
 8004270:	4618      	mov	r0, r3
 8004272:	f7ff fbef 	bl	8003a54 <LL_ADC_GetOffsetChannel>
 8004276:	4603      	mov	r3, r0
 8004278:	0e9b      	lsrs	r3, r3, #26
 800427a:	f003 021f 	and.w	r2, r3, #31
 800427e:	e01e      	b.n	80042be <HAL_ADC_ConfigChannel+0x34e>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2102      	movs	r1, #2
 8004286:	4618      	mov	r0, r3
 8004288:	f7ff fbe4 	bl	8003a54 <LL_ADC_GetOffsetChannel>
 800428c:	4603      	mov	r3, r0
 800428e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004292:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004296:	fa93 f3a3 	rbit	r3, r3
 800429a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800429e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80042a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80042ae:	2320      	movs	r3, #32
 80042b0:	e004      	b.n	80042bc <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80042b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042b6:	fab3 f383 	clz	r3, r3
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d105      	bne.n	80042d6 <HAL_ADC_ConfigChannel+0x366>
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	0e9b      	lsrs	r3, r3, #26
 80042d0:	f003 031f 	and.w	r3, r3, #31
 80042d4:	e014      	b.n	8004300 <HAL_ADC_ConfigChannel+0x390>
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80042de:	fa93 f3a3 	rbit	r3, r3
 80042e2:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80042e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80042ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80042f2:	2320      	movs	r3, #32
 80042f4:	e004      	b.n	8004300 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80042f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042fa:	fab3 f383 	clz	r3, r3
 80042fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004300:	429a      	cmp	r2, r3
 8004302:	d106      	bne.n	8004312 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2200      	movs	r2, #0
 800430a:	2102      	movs	r1, #2
 800430c:	4618      	mov	r0, r3
 800430e:	f7ff fbb7 	bl	8003a80 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2103      	movs	r1, #3
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff fb9b 	bl	8003a54 <LL_ADC_GetOffsetChannel>
 800431e:	4603      	mov	r3, r0
 8004320:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10a      	bne.n	800433e <HAL_ADC_ConfigChannel+0x3ce>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2103      	movs	r1, #3
 800432e:	4618      	mov	r0, r3
 8004330:	f7ff fb90 	bl	8003a54 <LL_ADC_GetOffsetChannel>
 8004334:	4603      	mov	r3, r0
 8004336:	0e9b      	lsrs	r3, r3, #26
 8004338:	f003 021f 	and.w	r2, r3, #31
 800433c:	e017      	b.n	800436e <HAL_ADC_ConfigChannel+0x3fe>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2103      	movs	r1, #3
 8004344:	4618      	mov	r0, r3
 8004346:	f7ff fb85 	bl	8003a54 <LL_ADC_GetOffsetChannel>
 800434a:	4603      	mov	r3, r0
 800434c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800434e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004350:	fa93 f3a3 	rbit	r3, r3
 8004354:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004358:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800435a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800435c:	2b00      	cmp	r3, #0
 800435e:	d101      	bne.n	8004364 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8004360:	2320      	movs	r3, #32
 8004362:	e003      	b.n	800436c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8004364:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004366:	fab3 f383 	clz	r3, r3
 800436a:	b2db      	uxtb	r3, r3
 800436c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004376:	2b00      	cmp	r3, #0
 8004378:	d105      	bne.n	8004386 <HAL_ADC_ConfigChannel+0x416>
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	0e9b      	lsrs	r3, r3, #26
 8004380:	f003 031f 	and.w	r3, r3, #31
 8004384:	e011      	b.n	80043aa <HAL_ADC_ConfigChannel+0x43a>
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800438e:	fa93 f3a3 	rbit	r3, r3
 8004392:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004394:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004396:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004398:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800439e:	2320      	movs	r3, #32
 80043a0:	e003      	b.n	80043aa <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80043a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043a4:	fab3 f383 	clz	r3, r3
 80043a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d106      	bne.n	80043bc <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2200      	movs	r2, #0
 80043b4:	2103      	movs	r1, #3
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7ff fb62 	bl	8003a80 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff fc55 	bl	8003c70 <LL_ADC_IsEnabled>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f040 813f 	bne.w	800464c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6818      	ldr	r0, [r3, #0]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	6819      	ldr	r1, [r3, #0]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	461a      	mov	r2, r3
 80043dc:	f7ff fbd6 	bl	8003b8c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	4a8e      	ldr	r2, [pc, #568]	; (8004620 <HAL_ADC_ConfigChannel+0x6b0>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	f040 8130 	bne.w	800464c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10b      	bne.n	8004414 <HAL_ADC_ConfigChannel+0x4a4>
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	0e9b      	lsrs	r3, r3, #26
 8004402:	3301      	adds	r3, #1
 8004404:	f003 031f 	and.w	r3, r3, #31
 8004408:	2b09      	cmp	r3, #9
 800440a:	bf94      	ite	ls
 800440c:	2301      	movls	r3, #1
 800440e:	2300      	movhi	r3, #0
 8004410:	b2db      	uxtb	r3, r3
 8004412:	e019      	b.n	8004448 <HAL_ADC_ConfigChannel+0x4d8>
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800441a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800441c:	fa93 f3a3 	rbit	r3, r3
 8004420:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004424:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004426:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004428:	2b00      	cmp	r3, #0
 800442a:	d101      	bne.n	8004430 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 800442c:	2320      	movs	r3, #32
 800442e:	e003      	b.n	8004438 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8004430:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004432:	fab3 f383 	clz	r3, r3
 8004436:	b2db      	uxtb	r3, r3
 8004438:	3301      	adds	r3, #1
 800443a:	f003 031f 	and.w	r3, r3, #31
 800443e:	2b09      	cmp	r3, #9
 8004440:	bf94      	ite	ls
 8004442:	2301      	movls	r3, #1
 8004444:	2300      	movhi	r3, #0
 8004446:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004448:	2b00      	cmp	r3, #0
 800444a:	d079      	beq.n	8004540 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004454:	2b00      	cmp	r3, #0
 8004456:	d107      	bne.n	8004468 <HAL_ADC_ConfigChannel+0x4f8>
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	0e9b      	lsrs	r3, r3, #26
 800445e:	3301      	adds	r3, #1
 8004460:	069b      	lsls	r3, r3, #26
 8004462:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004466:	e015      	b.n	8004494 <HAL_ADC_ConfigChannel+0x524>
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800446e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004470:	fa93 f3a3 	rbit	r3, r3
 8004474:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004476:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004478:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800447a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800447c:	2b00      	cmp	r3, #0
 800447e:	d101      	bne.n	8004484 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8004480:	2320      	movs	r3, #32
 8004482:	e003      	b.n	800448c <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8004484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004486:	fab3 f383 	clz	r3, r3
 800448a:	b2db      	uxtb	r3, r3
 800448c:	3301      	adds	r3, #1
 800448e:	069b      	lsls	r3, r3, #26
 8004490:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800449c:	2b00      	cmp	r3, #0
 800449e:	d109      	bne.n	80044b4 <HAL_ADC_ConfigChannel+0x544>
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	0e9b      	lsrs	r3, r3, #26
 80044a6:	3301      	adds	r3, #1
 80044a8:	f003 031f 	and.w	r3, r3, #31
 80044ac:	2101      	movs	r1, #1
 80044ae:	fa01 f303 	lsl.w	r3, r1, r3
 80044b2:	e017      	b.n	80044e4 <HAL_ADC_ConfigChannel+0x574>
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044bc:	fa93 f3a3 	rbit	r3, r3
 80044c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80044c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044c4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80044c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80044cc:	2320      	movs	r3, #32
 80044ce:	e003      	b.n	80044d8 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80044d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044d2:	fab3 f383 	clz	r3, r3
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	3301      	adds	r3, #1
 80044da:	f003 031f 	and.w	r3, r3, #31
 80044de:	2101      	movs	r1, #1
 80044e0:	fa01 f303 	lsl.w	r3, r1, r3
 80044e4:	ea42 0103 	orr.w	r1, r2, r3
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10a      	bne.n	800450a <HAL_ADC_ConfigChannel+0x59a>
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	0e9b      	lsrs	r3, r3, #26
 80044fa:	3301      	adds	r3, #1
 80044fc:	f003 021f 	and.w	r2, r3, #31
 8004500:	4613      	mov	r3, r2
 8004502:	005b      	lsls	r3, r3, #1
 8004504:	4413      	add	r3, r2
 8004506:	051b      	lsls	r3, r3, #20
 8004508:	e018      	b.n	800453c <HAL_ADC_ConfigChannel+0x5cc>
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004512:	fa93 f3a3 	rbit	r3, r3
 8004516:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800451c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8004522:	2320      	movs	r3, #32
 8004524:	e003      	b.n	800452e <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8004526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004528:	fab3 f383 	clz	r3, r3
 800452c:	b2db      	uxtb	r3, r3
 800452e:	3301      	adds	r3, #1
 8004530:	f003 021f 	and.w	r2, r3, #31
 8004534:	4613      	mov	r3, r2
 8004536:	005b      	lsls	r3, r3, #1
 8004538:	4413      	add	r3, r2
 800453a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800453c:	430b      	orrs	r3, r1
 800453e:	e080      	b.n	8004642 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004548:	2b00      	cmp	r3, #0
 800454a:	d107      	bne.n	800455c <HAL_ADC_ConfigChannel+0x5ec>
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	0e9b      	lsrs	r3, r3, #26
 8004552:	3301      	adds	r3, #1
 8004554:	069b      	lsls	r3, r3, #26
 8004556:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800455a:	e015      	b.n	8004588 <HAL_ADC_ConfigChannel+0x618>
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004564:	fa93 f3a3 	rbit	r3, r3
 8004568:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800456e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8004574:	2320      	movs	r3, #32
 8004576:	e003      	b.n	8004580 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8004578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800457a:	fab3 f383 	clz	r3, r3
 800457e:	b2db      	uxtb	r3, r3
 8004580:	3301      	adds	r3, #1
 8004582:	069b      	lsls	r3, r3, #26
 8004584:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004590:	2b00      	cmp	r3, #0
 8004592:	d109      	bne.n	80045a8 <HAL_ADC_ConfigChannel+0x638>
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	0e9b      	lsrs	r3, r3, #26
 800459a:	3301      	adds	r3, #1
 800459c:	f003 031f 	and.w	r3, r3, #31
 80045a0:	2101      	movs	r1, #1
 80045a2:	fa01 f303 	lsl.w	r3, r1, r3
 80045a6:	e017      	b.n	80045d8 <HAL_ADC_ConfigChannel+0x668>
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	fa93 f3a3 	rbit	r3, r3
 80045b4:	61bb      	str	r3, [r7, #24]
  return result;
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80045ba:	6a3b      	ldr	r3, [r7, #32]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80045c0:	2320      	movs	r3, #32
 80045c2:	e003      	b.n	80045cc <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80045c4:	6a3b      	ldr	r3, [r7, #32]
 80045c6:	fab3 f383 	clz	r3, r3
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	3301      	adds	r3, #1
 80045ce:	f003 031f 	and.w	r3, r3, #31
 80045d2:	2101      	movs	r1, #1
 80045d4:	fa01 f303 	lsl.w	r3, r1, r3
 80045d8:	ea42 0103 	orr.w	r1, r2, r3
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10d      	bne.n	8004604 <HAL_ADC_ConfigChannel+0x694>
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	0e9b      	lsrs	r3, r3, #26
 80045ee:	3301      	adds	r3, #1
 80045f0:	f003 021f 	and.w	r2, r3, #31
 80045f4:	4613      	mov	r3, r2
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	4413      	add	r3, r2
 80045fa:	3b1e      	subs	r3, #30
 80045fc:	051b      	lsls	r3, r3, #20
 80045fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004602:	e01d      	b.n	8004640 <HAL_ADC_ConfigChannel+0x6d0>
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	fa93 f3a3 	rbit	r3, r3
 8004610:	60fb      	str	r3, [r7, #12]
  return result;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d103      	bne.n	8004624 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800461c:	2320      	movs	r3, #32
 800461e:	e005      	b.n	800462c <HAL_ADC_ConfigChannel+0x6bc>
 8004620:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	fab3 f383 	clz	r3, r3
 800462a:	b2db      	uxtb	r3, r3
 800462c:	3301      	adds	r3, #1
 800462e:	f003 021f 	and.w	r2, r3, #31
 8004632:	4613      	mov	r3, r2
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	4413      	add	r3, r2
 8004638:	3b1e      	subs	r3, #30
 800463a:	051b      	lsls	r3, r3, #20
 800463c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004640:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004646:	4619      	mov	r1, r3
 8004648:	f7ff fa74 	bl	8003b34 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	4b3d      	ldr	r3, [pc, #244]	; (8004748 <HAL_ADC_ConfigChannel+0x7d8>)
 8004652:	4013      	ands	r3, r2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d06c      	beq.n	8004732 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004658:	483c      	ldr	r0, [pc, #240]	; (800474c <HAL_ADC_ConfigChannel+0x7dc>)
 800465a:	f7ff f9c9 	bl	80039f0 <LL_ADC_GetCommonPathInternalCh>
 800465e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a3a      	ldr	r2, [pc, #232]	; (8004750 <HAL_ADC_ConfigChannel+0x7e0>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d127      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800466c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004670:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d121      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a35      	ldr	r2, [pc, #212]	; (8004754 <HAL_ADC_ConfigChannel+0x7e4>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d157      	bne.n	8004732 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004682:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004686:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800468a:	4619      	mov	r1, r3
 800468c:	482f      	ldr	r0, [pc, #188]	; (800474c <HAL_ADC_ConfigChannel+0x7dc>)
 800468e:	f7ff f99c 	bl	80039ca <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004692:	4b31      	ldr	r3, [pc, #196]	; (8004758 <HAL_ADC_ConfigChannel+0x7e8>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	099b      	lsrs	r3, r3, #6
 8004698:	4a30      	ldr	r2, [pc, #192]	; (800475c <HAL_ADC_ConfigChannel+0x7ec>)
 800469a:	fba2 2303 	umull	r2, r3, r2, r3
 800469e:	099b      	lsrs	r3, r3, #6
 80046a0:	1c5a      	adds	r2, r3, #1
 80046a2:	4613      	mov	r3, r2
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	4413      	add	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80046ac:	e002      	b.n	80046b4 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	3b01      	subs	r3, #1
 80046b2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1f9      	bne.n	80046ae <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80046ba:	e03a      	b.n	8004732 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a27      	ldr	r2, [pc, #156]	; (8004760 <HAL_ADC_ConfigChannel+0x7f0>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d113      	bne.n	80046ee <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80046c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80046ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10d      	bne.n	80046ee <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a1f      	ldr	r2, [pc, #124]	; (8004754 <HAL_ADC_ConfigChannel+0x7e4>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d12a      	bne.n	8004732 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80046e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046e4:	4619      	mov	r1, r3
 80046e6:	4819      	ldr	r0, [pc, #100]	; (800474c <HAL_ADC_ConfigChannel+0x7dc>)
 80046e8:	f7ff f96f 	bl	80039ca <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80046ec:	e021      	b.n	8004732 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a1c      	ldr	r2, [pc, #112]	; (8004764 <HAL_ADC_ConfigChannel+0x7f4>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d11c      	bne.n	8004732 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80046f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80046fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d116      	bne.n	8004732 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a12      	ldr	r2, [pc, #72]	; (8004754 <HAL_ADC_ConfigChannel+0x7e4>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d111      	bne.n	8004732 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800470e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004712:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004716:	4619      	mov	r1, r3
 8004718:	480c      	ldr	r0, [pc, #48]	; (800474c <HAL_ADC_ConfigChannel+0x7dc>)
 800471a:	f7ff f956 	bl	80039ca <LL_ADC_SetCommonPathInternalCh>
 800471e:	e008      	b.n	8004732 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004724:	f043 0220 	orr.w	r2, r3, #32
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800473a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800473e:	4618      	mov	r0, r3
 8004740:	37d8      	adds	r7, #216	; 0xd8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	80080000 	.word	0x80080000
 800474c:	50040300 	.word	0x50040300
 8004750:	c7520000 	.word	0xc7520000
 8004754:	50040000 	.word	0x50040000
 8004758:	2000003c 	.word	0x2000003c
 800475c:	053e2d63 	.word	0x053e2d63
 8004760:	cb840000 	.word	0xcb840000
 8004764:	80000001 	.word	0x80000001

08004768 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f003 0307 	and.w	r3, r3, #7
 8004776:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004778:	4b0c      	ldr	r3, [pc, #48]	; (80047ac <__NVIC_SetPriorityGrouping+0x44>)
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800477e:	68ba      	ldr	r2, [r7, #8]
 8004780:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004784:	4013      	ands	r3, r2
 8004786:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004790:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800479a:	4a04      	ldr	r2, [pc, #16]	; (80047ac <__NVIC_SetPriorityGrouping+0x44>)
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	60d3      	str	r3, [r2, #12]
}
 80047a0:	bf00      	nop
 80047a2:	3714      	adds	r7, #20
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	e000ed00 	.word	0xe000ed00

080047b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047b0:	b480      	push	{r7}
 80047b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047b4:	4b04      	ldr	r3, [pc, #16]	; (80047c8 <__NVIC_GetPriorityGrouping+0x18>)
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	0a1b      	lsrs	r3, r3, #8
 80047ba:	f003 0307 	and.w	r3, r3, #7
}
 80047be:	4618      	mov	r0, r3
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr
 80047c8:	e000ed00 	.word	0xe000ed00

080047cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	4603      	mov	r3, r0
 80047d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	db0b      	blt.n	80047f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047de:	79fb      	ldrb	r3, [r7, #7]
 80047e0:	f003 021f 	and.w	r2, r3, #31
 80047e4:	4907      	ldr	r1, [pc, #28]	; (8004804 <__NVIC_EnableIRQ+0x38>)
 80047e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ea:	095b      	lsrs	r3, r3, #5
 80047ec:	2001      	movs	r0, #1
 80047ee:	fa00 f202 	lsl.w	r2, r0, r2
 80047f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80047f6:	bf00      	nop
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	e000e100 	.word	0xe000e100

08004808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	4603      	mov	r3, r0
 8004810:	6039      	str	r1, [r7, #0]
 8004812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004818:	2b00      	cmp	r3, #0
 800481a:	db0a      	blt.n	8004832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	b2da      	uxtb	r2, r3
 8004820:	490c      	ldr	r1, [pc, #48]	; (8004854 <__NVIC_SetPriority+0x4c>)
 8004822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004826:	0112      	lsls	r2, r2, #4
 8004828:	b2d2      	uxtb	r2, r2
 800482a:	440b      	add	r3, r1
 800482c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004830:	e00a      	b.n	8004848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	b2da      	uxtb	r2, r3
 8004836:	4908      	ldr	r1, [pc, #32]	; (8004858 <__NVIC_SetPriority+0x50>)
 8004838:	79fb      	ldrb	r3, [r7, #7]
 800483a:	f003 030f 	and.w	r3, r3, #15
 800483e:	3b04      	subs	r3, #4
 8004840:	0112      	lsls	r2, r2, #4
 8004842:	b2d2      	uxtb	r2, r2
 8004844:	440b      	add	r3, r1
 8004846:	761a      	strb	r2, [r3, #24]
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr
 8004854:	e000e100 	.word	0xe000e100
 8004858:	e000ed00 	.word	0xe000ed00

0800485c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800485c:	b480      	push	{r7}
 800485e:	b089      	sub	sp, #36	; 0x24
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f003 0307 	and.w	r3, r3, #7
 800486e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	f1c3 0307 	rsb	r3, r3, #7
 8004876:	2b04      	cmp	r3, #4
 8004878:	bf28      	it	cs
 800487a:	2304      	movcs	r3, #4
 800487c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	3304      	adds	r3, #4
 8004882:	2b06      	cmp	r3, #6
 8004884:	d902      	bls.n	800488c <NVIC_EncodePriority+0x30>
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	3b03      	subs	r3, #3
 800488a:	e000      	b.n	800488e <NVIC_EncodePriority+0x32>
 800488c:	2300      	movs	r3, #0
 800488e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004890:	f04f 32ff 	mov.w	r2, #4294967295
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	fa02 f303 	lsl.w	r3, r2, r3
 800489a:	43da      	mvns	r2, r3
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	401a      	ands	r2, r3
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048a4:	f04f 31ff 	mov.w	r1, #4294967295
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	fa01 f303 	lsl.w	r3, r1, r3
 80048ae:	43d9      	mvns	r1, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048b4:	4313      	orrs	r3, r2
         );
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3724      	adds	r7, #36	; 0x24
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b082      	sub	sp, #8
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7ff ff4c 	bl	8004768 <__NVIC_SetPriorityGrouping>
}
 80048d0:	bf00      	nop
 80048d2:	3708      	adds	r7, #8
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af00      	add	r7, sp, #0
 80048de:	4603      	mov	r3, r0
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
 80048e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80048e6:	2300      	movs	r3, #0
 80048e8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80048ea:	f7ff ff61 	bl	80047b0 <__NVIC_GetPriorityGrouping>
 80048ee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	68b9      	ldr	r1, [r7, #8]
 80048f4:	6978      	ldr	r0, [r7, #20]
 80048f6:	f7ff ffb1 	bl	800485c <NVIC_EncodePriority>
 80048fa:	4602      	mov	r2, r0
 80048fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004900:	4611      	mov	r1, r2
 8004902:	4618      	mov	r0, r3
 8004904:	f7ff ff80 	bl	8004808 <__NVIC_SetPriority>
}
 8004908:	bf00      	nop
 800490a:	3718      	adds	r7, #24
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	4603      	mov	r3, r0
 8004918:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800491a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800491e:	4618      	mov	r0, r3
 8004920:	f7ff ff54 	bl	80047cc <__NVIC_EnableIRQ>
}
 8004924:	bf00      	nop
 8004926:	3708      	adds	r7, #8
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e0ac      	b.n	8004a98 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4618      	mov	r0, r3
 8004944:	f000 f8b2 	bl	8004aac <DFSDM_GetChannelFromInstance>
 8004948:	4603      	mov	r3, r0
 800494a:	4a55      	ldr	r2, [pc, #340]	; (8004aa0 <HAL_DFSDM_ChannelInit+0x174>)
 800494c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d001      	beq.n	8004958 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e09f      	b.n	8004a98 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f7fe fb51 	bl	8003000 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800495e:	4b51      	ldr	r3, [pc, #324]	; (8004aa4 <HAL_DFSDM_ChannelInit+0x178>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	3301      	adds	r3, #1
 8004964:	4a4f      	ldr	r2, [pc, #316]	; (8004aa4 <HAL_DFSDM_ChannelInit+0x178>)
 8004966:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8004968:	4b4e      	ldr	r3, [pc, #312]	; (8004aa4 <HAL_DFSDM_ChannelInit+0x178>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d125      	bne.n	80049bc <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004970:	4b4d      	ldr	r3, [pc, #308]	; (8004aa8 <HAL_DFSDM_ChannelInit+0x17c>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a4c      	ldr	r2, [pc, #304]	; (8004aa8 <HAL_DFSDM_ChannelInit+0x17c>)
 8004976:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800497a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800497c:	4b4a      	ldr	r3, [pc, #296]	; (8004aa8 <HAL_DFSDM_ChannelInit+0x17c>)
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	4948      	ldr	r1, [pc, #288]	; (8004aa8 <HAL_DFSDM_ChannelInit+0x17c>)
 8004986:	4313      	orrs	r3, r2
 8004988:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800498a:	4b47      	ldr	r3, [pc, #284]	; (8004aa8 <HAL_DFSDM_ChannelInit+0x17c>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a46      	ldr	r2, [pc, #280]	; (8004aa8 <HAL_DFSDM_ChannelInit+0x17c>)
 8004990:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8004994:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	791b      	ldrb	r3, [r3, #4]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d108      	bne.n	80049b0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800499e:	4b42      	ldr	r3, [pc, #264]	; (8004aa8 <HAL_DFSDM_ChannelInit+0x17c>)
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	3b01      	subs	r3, #1
 80049a8:	041b      	lsls	r3, r3, #16
 80049aa:	493f      	ldr	r1, [pc, #252]	; (8004aa8 <HAL_DFSDM_ChannelInit+0x17c>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80049b0:	4b3d      	ldr	r3, [pc, #244]	; (8004aa8 <HAL_DFSDM_ChannelInit+0x17c>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a3c      	ldr	r2, [pc, #240]	; (8004aa8 <HAL_DFSDM_ChannelInit+0x17c>)
 80049b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80049ba:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80049ca:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6819      	ldr	r1, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80049da:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80049e0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	430a      	orrs	r2, r1
 80049e8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f022 020f 	bic.w	r2, r2, #15
 80049f8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	6819      	ldr	r1, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004a08:	431a      	orrs	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	689a      	ldr	r2, [r3, #8]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8004a20:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6899      	ldr	r1, [r3, #8]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a30:	3b01      	subs	r3, #1
 8004a32:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004a34:	431a      	orrs	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f002 0207 	and.w	r2, r2, #7
 8004a4c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	6859      	ldr	r1, [r3, #4]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a58:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004a60:	431a      	orrs	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a78:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 f810 	bl	8004aac <DFSDM_GetChannelFromInstance>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	4904      	ldr	r1, [pc, #16]	; (8004aa0 <HAL_DFSDM_ChannelInit+0x174>)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3708      	adds	r7, #8
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	200012ec 	.word	0x200012ec
 8004aa4:	200012e8 	.word	0x200012e8
 8004aa8:	40016000 	.word	0x40016000

08004aac <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a1c      	ldr	r2, [pc, #112]	; (8004b28 <DFSDM_GetChannelFromInstance+0x7c>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d102      	bne.n	8004ac2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8004abc:	2300      	movs	r3, #0
 8004abe:	60fb      	str	r3, [r7, #12]
 8004ac0:	e02b      	b.n	8004b1a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a19      	ldr	r2, [pc, #100]	; (8004b2c <DFSDM_GetChannelFromInstance+0x80>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d102      	bne.n	8004ad0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8004aca:	2301      	movs	r3, #1
 8004acc:	60fb      	str	r3, [r7, #12]
 8004ace:	e024      	b.n	8004b1a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a17      	ldr	r2, [pc, #92]	; (8004b30 <DFSDM_GetChannelFromInstance+0x84>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d102      	bne.n	8004ade <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8004ad8:	2302      	movs	r3, #2
 8004ada:	60fb      	str	r3, [r7, #12]
 8004adc:	e01d      	b.n	8004b1a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a14      	ldr	r2, [pc, #80]	; (8004b34 <DFSDM_GetChannelFromInstance+0x88>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d102      	bne.n	8004aec <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8004ae6:	2304      	movs	r3, #4
 8004ae8:	60fb      	str	r3, [r7, #12]
 8004aea:	e016      	b.n	8004b1a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a12      	ldr	r2, [pc, #72]	; (8004b38 <DFSDM_GetChannelFromInstance+0x8c>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d102      	bne.n	8004afa <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8004af4:	2305      	movs	r3, #5
 8004af6:	60fb      	str	r3, [r7, #12]
 8004af8:	e00f      	b.n	8004b1a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a0f      	ldr	r2, [pc, #60]	; (8004b3c <DFSDM_GetChannelFromInstance+0x90>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d102      	bne.n	8004b08 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8004b02:	2306      	movs	r3, #6
 8004b04:	60fb      	str	r3, [r7, #12]
 8004b06:	e008      	b.n	8004b1a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a0d      	ldr	r2, [pc, #52]	; (8004b40 <DFSDM_GetChannelFromInstance+0x94>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d102      	bne.n	8004b16 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8004b10:	2307      	movs	r3, #7
 8004b12:	60fb      	str	r3, [r7, #12]
 8004b14:	e001      	b.n	8004b1a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8004b16:	2303      	movs	r3, #3
 8004b18:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3714      	adds	r7, #20
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr
 8004b28:	40016000 	.word	0x40016000
 8004b2c:	40016020 	.word	0x40016020
 8004b30:	40016040 	.word	0x40016040
 8004b34:	40016080 	.word	0x40016080
 8004b38:	400160a0 	.word	0x400160a0
 8004b3c:	400160c0 	.word	0x400160c0
 8004b40:	400160e0 	.word	0x400160e0

08004b44 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d008      	beq.n	8004b6e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2204      	movs	r2, #4
 8004b60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e040      	b.n	8004bf0 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f022 020e 	bic.w	r2, r2, #14
 8004b7c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b8c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 0201 	bic.w	r2, r2, #1
 8004b9c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba2:	f003 021c 	and.w	r2, r3, #28
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004baa:	2101      	movs	r1, #1
 8004bac:	fa01 f202 	lsl.w	r2, r1, r2
 8004bb0:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004bba:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00c      	beq.n	8004bde <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bd2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004bdc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004bee:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3714      	adds	r7, #20
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c04:	2300      	movs	r3, #0
 8004c06:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d005      	beq.n	8004c20 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2204      	movs	r2, #4
 8004c18:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	73fb      	strb	r3, [r7, #15]
 8004c1e:	e047      	b.n	8004cb0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 020e 	bic.w	r2, r2, #14
 8004c2e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f022 0201 	bic.w	r2, r2, #1
 8004c3e:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c54:	f003 021c 	and.w	r2, r3, #28
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8004c62:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004c6c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00c      	beq.n	8004c90 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c84:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004c8e:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d003      	beq.n	8004cb0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	4798      	blx	r3
    }
  }
  return status;
 8004cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
	...

08004cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b087      	sub	sp, #28
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cca:	e166      	b.n	8004f9a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	2101      	movs	r1, #1
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd8:	4013      	ands	r3, r2
 8004cda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f000 8158 	beq.w	8004f94 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f003 0303 	and.w	r3, r3, #3
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d005      	beq.n	8004cfc <HAL_GPIO_Init+0x40>
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f003 0303 	and.w	r3, r3, #3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d130      	bne.n	8004d5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	005b      	lsls	r3, r3, #1
 8004d06:	2203      	movs	r2, #3
 8004d08:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0c:	43db      	mvns	r3, r3
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	4013      	ands	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	68da      	ldr	r2, [r3, #12]
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d32:	2201      	movs	r2, #1
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3a:	43db      	mvns	r3, r3
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	4013      	ands	r3, r2
 8004d40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	091b      	lsrs	r3, r3, #4
 8004d48:	f003 0201 	and.w	r2, r3, #1
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f003 0303 	and.w	r3, r3, #3
 8004d66:	2b03      	cmp	r3, #3
 8004d68:	d017      	beq.n	8004d9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	005b      	lsls	r3, r3, #1
 8004d74:	2203      	movs	r2, #3
 8004d76:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7a:	43db      	mvns	r3, r3
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	4013      	ands	r3, r2
 8004d80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	689a      	ldr	r2, [r3, #8]
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	005b      	lsls	r3, r3, #1
 8004d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f003 0303 	and.w	r3, r3, #3
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d123      	bne.n	8004dee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	08da      	lsrs	r2, r3, #3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	3208      	adds	r2, #8
 8004dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004db2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f003 0307 	and.w	r3, r3, #7
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	220f      	movs	r2, #15
 8004dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc2:	43db      	mvns	r3, r3
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	691a      	ldr	r2, [r3, #16]
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f003 0307 	and.w	r3, r3, #7
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	08da      	lsrs	r2, r3, #3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	3208      	adds	r2, #8
 8004de8:	6939      	ldr	r1, [r7, #16]
 8004dea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	005b      	lsls	r3, r3, #1
 8004df8:	2203      	movs	r2, #3
 8004dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfe:	43db      	mvns	r3, r3
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	4013      	ands	r3, r2
 8004e04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f003 0203 	and.w	r2, r3, #3
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	fa02 f303 	lsl.w	r3, r2, r3
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f000 80b2 	beq.w	8004f94 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e30:	4b61      	ldr	r3, [pc, #388]	; (8004fb8 <HAL_GPIO_Init+0x2fc>)
 8004e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e34:	4a60      	ldr	r2, [pc, #384]	; (8004fb8 <HAL_GPIO_Init+0x2fc>)
 8004e36:	f043 0301 	orr.w	r3, r3, #1
 8004e3a:	6613      	str	r3, [r2, #96]	; 0x60
 8004e3c:	4b5e      	ldr	r3, [pc, #376]	; (8004fb8 <HAL_GPIO_Init+0x2fc>)
 8004e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	60bb      	str	r3, [r7, #8]
 8004e46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004e48:	4a5c      	ldr	r2, [pc, #368]	; (8004fbc <HAL_GPIO_Init+0x300>)
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	089b      	lsrs	r3, r3, #2
 8004e4e:	3302      	adds	r3, #2
 8004e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f003 0303 	and.w	r3, r3, #3
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	220f      	movs	r2, #15
 8004e60:	fa02 f303 	lsl.w	r3, r2, r3
 8004e64:	43db      	mvns	r3, r3
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004e72:	d02b      	beq.n	8004ecc <HAL_GPIO_Init+0x210>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a52      	ldr	r2, [pc, #328]	; (8004fc0 <HAL_GPIO_Init+0x304>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d025      	beq.n	8004ec8 <HAL_GPIO_Init+0x20c>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a51      	ldr	r2, [pc, #324]	; (8004fc4 <HAL_GPIO_Init+0x308>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d01f      	beq.n	8004ec4 <HAL_GPIO_Init+0x208>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a50      	ldr	r2, [pc, #320]	; (8004fc8 <HAL_GPIO_Init+0x30c>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d019      	beq.n	8004ec0 <HAL_GPIO_Init+0x204>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a4f      	ldr	r2, [pc, #316]	; (8004fcc <HAL_GPIO_Init+0x310>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d013      	beq.n	8004ebc <HAL_GPIO_Init+0x200>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a4e      	ldr	r2, [pc, #312]	; (8004fd0 <HAL_GPIO_Init+0x314>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d00d      	beq.n	8004eb8 <HAL_GPIO_Init+0x1fc>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a4d      	ldr	r2, [pc, #308]	; (8004fd4 <HAL_GPIO_Init+0x318>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d007      	beq.n	8004eb4 <HAL_GPIO_Init+0x1f8>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a4c      	ldr	r2, [pc, #304]	; (8004fd8 <HAL_GPIO_Init+0x31c>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d101      	bne.n	8004eb0 <HAL_GPIO_Init+0x1f4>
 8004eac:	2307      	movs	r3, #7
 8004eae:	e00e      	b.n	8004ece <HAL_GPIO_Init+0x212>
 8004eb0:	2308      	movs	r3, #8
 8004eb2:	e00c      	b.n	8004ece <HAL_GPIO_Init+0x212>
 8004eb4:	2306      	movs	r3, #6
 8004eb6:	e00a      	b.n	8004ece <HAL_GPIO_Init+0x212>
 8004eb8:	2305      	movs	r3, #5
 8004eba:	e008      	b.n	8004ece <HAL_GPIO_Init+0x212>
 8004ebc:	2304      	movs	r3, #4
 8004ebe:	e006      	b.n	8004ece <HAL_GPIO_Init+0x212>
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e004      	b.n	8004ece <HAL_GPIO_Init+0x212>
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	e002      	b.n	8004ece <HAL_GPIO_Init+0x212>
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e000      	b.n	8004ece <HAL_GPIO_Init+0x212>
 8004ecc:	2300      	movs	r3, #0
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	f002 0203 	and.w	r2, r2, #3
 8004ed4:	0092      	lsls	r2, r2, #2
 8004ed6:	4093      	lsls	r3, r2
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004ede:	4937      	ldr	r1, [pc, #220]	; (8004fbc <HAL_GPIO_Init+0x300>)
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	089b      	lsrs	r3, r3, #2
 8004ee4:	3302      	adds	r3, #2
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004eec:	4b3b      	ldr	r3, [pc, #236]	; (8004fdc <HAL_GPIO_Init+0x320>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	43db      	mvns	r3, r3
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	4013      	ands	r3, r2
 8004efa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d003      	beq.n	8004f10 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004f10:	4a32      	ldr	r2, [pc, #200]	; (8004fdc <HAL_GPIO_Init+0x320>)
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004f16:	4b31      	ldr	r3, [pc, #196]	; (8004fdc <HAL_GPIO_Init+0x320>)
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	43db      	mvns	r3, r3
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	4013      	ands	r3, r2
 8004f24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004f3a:	4a28      	ldr	r2, [pc, #160]	; (8004fdc <HAL_GPIO_Init+0x320>)
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004f40:	4b26      	ldr	r3, [pc, #152]	; (8004fdc <HAL_GPIO_Init+0x320>)
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	43db      	mvns	r3, r3
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d003      	beq.n	8004f64 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004f64:	4a1d      	ldr	r2, [pc, #116]	; (8004fdc <HAL_GPIO_Init+0x320>)
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004f6a:	4b1c      	ldr	r3, [pc, #112]	; (8004fdc <HAL_GPIO_Init+0x320>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	43db      	mvns	r3, r3
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	4013      	ands	r3, r2
 8004f78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d003      	beq.n	8004f8e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004f8e:	4a13      	ldr	r2, [pc, #76]	; (8004fdc <HAL_GPIO_Init+0x320>)
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	3301      	adds	r3, #1
 8004f98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f47f ae91 	bne.w	8004ccc <HAL_GPIO_Init+0x10>
  }
}
 8004faa:	bf00      	nop
 8004fac:	bf00      	nop
 8004fae:	371c      	adds	r7, #28
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr
 8004fb8:	40021000 	.word	0x40021000
 8004fbc:	40010000 	.word	0x40010000
 8004fc0:	48000400 	.word	0x48000400
 8004fc4:	48000800 	.word	0x48000800
 8004fc8:	48000c00 	.word	0x48000c00
 8004fcc:	48001000 	.word	0x48001000
 8004fd0:	48001400 	.word	0x48001400
 8004fd4:	48001800 	.word	0x48001800
 8004fd8:	48001c00 	.word	0x48001c00
 8004fdc:	40010400 	.word	0x40010400

08004fe0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b087      	sub	sp, #28
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004fea:	2300      	movs	r3, #0
 8004fec:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004fee:	e0c9      	b.n	8005184 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 80bc 	beq.w	800517e <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005006:	4a66      	ldr	r2, [pc, #408]	; (80051a0 <HAL_GPIO_DeInit+0x1c0>)
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	089b      	lsrs	r3, r3, #2
 800500c:	3302      	adds	r3, #2
 800500e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005012:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	f003 0303 	and.w	r3, r3, #3
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	220f      	movs	r2, #15
 800501e:	fa02 f303 	lsl.w	r3, r2, r3
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	4013      	ands	r3, r2
 8005026:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800502e:	d02b      	beq.n	8005088 <HAL_GPIO_DeInit+0xa8>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a5c      	ldr	r2, [pc, #368]	; (80051a4 <HAL_GPIO_DeInit+0x1c4>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d025      	beq.n	8005084 <HAL_GPIO_DeInit+0xa4>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a5b      	ldr	r2, [pc, #364]	; (80051a8 <HAL_GPIO_DeInit+0x1c8>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d01f      	beq.n	8005080 <HAL_GPIO_DeInit+0xa0>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a5a      	ldr	r2, [pc, #360]	; (80051ac <HAL_GPIO_DeInit+0x1cc>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d019      	beq.n	800507c <HAL_GPIO_DeInit+0x9c>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a59      	ldr	r2, [pc, #356]	; (80051b0 <HAL_GPIO_DeInit+0x1d0>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d013      	beq.n	8005078 <HAL_GPIO_DeInit+0x98>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a58      	ldr	r2, [pc, #352]	; (80051b4 <HAL_GPIO_DeInit+0x1d4>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d00d      	beq.n	8005074 <HAL_GPIO_DeInit+0x94>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a57      	ldr	r2, [pc, #348]	; (80051b8 <HAL_GPIO_DeInit+0x1d8>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d007      	beq.n	8005070 <HAL_GPIO_DeInit+0x90>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a56      	ldr	r2, [pc, #344]	; (80051bc <HAL_GPIO_DeInit+0x1dc>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d101      	bne.n	800506c <HAL_GPIO_DeInit+0x8c>
 8005068:	2307      	movs	r3, #7
 800506a:	e00e      	b.n	800508a <HAL_GPIO_DeInit+0xaa>
 800506c:	2308      	movs	r3, #8
 800506e:	e00c      	b.n	800508a <HAL_GPIO_DeInit+0xaa>
 8005070:	2306      	movs	r3, #6
 8005072:	e00a      	b.n	800508a <HAL_GPIO_DeInit+0xaa>
 8005074:	2305      	movs	r3, #5
 8005076:	e008      	b.n	800508a <HAL_GPIO_DeInit+0xaa>
 8005078:	2304      	movs	r3, #4
 800507a:	e006      	b.n	800508a <HAL_GPIO_DeInit+0xaa>
 800507c:	2303      	movs	r3, #3
 800507e:	e004      	b.n	800508a <HAL_GPIO_DeInit+0xaa>
 8005080:	2302      	movs	r3, #2
 8005082:	e002      	b.n	800508a <HAL_GPIO_DeInit+0xaa>
 8005084:	2301      	movs	r3, #1
 8005086:	e000      	b.n	800508a <HAL_GPIO_DeInit+0xaa>
 8005088:	2300      	movs	r3, #0
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	f002 0203 	and.w	r2, r2, #3
 8005090:	0092      	lsls	r2, r2, #2
 8005092:	4093      	lsls	r3, r2
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	429a      	cmp	r2, r3
 8005098:	d132      	bne.n	8005100 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800509a:	4b49      	ldr	r3, [pc, #292]	; (80051c0 <HAL_GPIO_DeInit+0x1e0>)
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	43db      	mvns	r3, r3
 80050a2:	4947      	ldr	r1, [pc, #284]	; (80051c0 <HAL_GPIO_DeInit+0x1e0>)
 80050a4:	4013      	ands	r3, r2
 80050a6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80050a8:	4b45      	ldr	r3, [pc, #276]	; (80051c0 <HAL_GPIO_DeInit+0x1e0>)
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	43db      	mvns	r3, r3
 80050b0:	4943      	ldr	r1, [pc, #268]	; (80051c0 <HAL_GPIO_DeInit+0x1e0>)
 80050b2:	4013      	ands	r3, r2
 80050b4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80050b6:	4b42      	ldr	r3, [pc, #264]	; (80051c0 <HAL_GPIO_DeInit+0x1e0>)
 80050b8:	68da      	ldr	r2, [r3, #12]
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	43db      	mvns	r3, r3
 80050be:	4940      	ldr	r1, [pc, #256]	; (80051c0 <HAL_GPIO_DeInit+0x1e0>)
 80050c0:	4013      	ands	r3, r2
 80050c2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80050c4:	4b3e      	ldr	r3, [pc, #248]	; (80051c0 <HAL_GPIO_DeInit+0x1e0>)
 80050c6:	689a      	ldr	r2, [r3, #8]
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	43db      	mvns	r3, r3
 80050cc:	493c      	ldr	r1, [pc, #240]	; (80051c0 <HAL_GPIO_DeInit+0x1e0>)
 80050ce:	4013      	ands	r3, r2
 80050d0:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	f003 0303 	and.w	r3, r3, #3
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	220f      	movs	r2, #15
 80050dc:	fa02 f303 	lsl.w	r3, r2, r3
 80050e0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80050e2:	4a2f      	ldr	r2, [pc, #188]	; (80051a0 <HAL_GPIO_DeInit+0x1c0>)
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	089b      	lsrs	r3, r3, #2
 80050e8:	3302      	adds	r3, #2
 80050ea:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	43da      	mvns	r2, r3
 80050f2:	482b      	ldr	r0, [pc, #172]	; (80051a0 <HAL_GPIO_DeInit+0x1c0>)
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	089b      	lsrs	r3, r3, #2
 80050f8:	400a      	ands	r2, r1
 80050fa:	3302      	adds	r3, #2
 80050fc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	005b      	lsls	r3, r3, #1
 8005108:	2103      	movs	r1, #3
 800510a:	fa01 f303 	lsl.w	r3, r1, r3
 800510e:	431a      	orrs	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	08da      	lsrs	r2, r3, #3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3208      	adds	r2, #8
 800511c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f003 0307 	and.w	r3, r3, #7
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	220f      	movs	r2, #15
 800512a:	fa02 f303 	lsl.w	r3, r2, r3
 800512e:	43db      	mvns	r3, r3
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	08d2      	lsrs	r2, r2, #3
 8005134:	4019      	ands	r1, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	3208      	adds	r2, #8
 800513a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	689a      	ldr	r2, [r3, #8]
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	005b      	lsls	r3, r3, #1
 8005146:	2103      	movs	r1, #3
 8005148:	fa01 f303 	lsl.w	r3, r1, r3
 800514c:	43db      	mvns	r3, r3
 800514e:	401a      	ands	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	2101      	movs	r1, #1
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	fa01 f303 	lsl.w	r3, r1, r3
 8005160:	43db      	mvns	r3, r3
 8005162:	401a      	ands	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68da      	ldr	r2, [r3, #12]
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	005b      	lsls	r3, r3, #1
 8005170:	2103      	movs	r1, #3
 8005172:	fa01 f303 	lsl.w	r3, r1, r3
 8005176:	43db      	mvns	r3, r3
 8005178:	401a      	ands	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	3301      	adds	r3, #1
 8005182:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	fa22 f303 	lsr.w	r3, r2, r3
 800518c:	2b00      	cmp	r3, #0
 800518e:	f47f af2f 	bne.w	8004ff0 <HAL_GPIO_DeInit+0x10>
  }
}
 8005192:	bf00      	nop
 8005194:	bf00      	nop
 8005196:	371c      	adds	r7, #28
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	40010000 	.word	0x40010000
 80051a4:	48000400 	.word	0x48000400
 80051a8:	48000800 	.word	0x48000800
 80051ac:	48000c00 	.word	0x48000c00
 80051b0:	48001000 	.word	0x48001000
 80051b4:	48001400 	.word	0x48001400
 80051b8:	48001800 	.word	0x48001800
 80051bc:	48001c00 	.word	0x48001c00
 80051c0:	40010400 	.word	0x40010400

080051c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	460b      	mov	r3, r1
 80051ce:	807b      	strh	r3, [r7, #2]
 80051d0:	4613      	mov	r3, r2
 80051d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80051d4:	787b      	ldrb	r3, [r7, #1]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80051da:	887a      	ldrh	r2, [r7, #2]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80051e0:	e002      	b.n	80051e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80051e2:	887a      	ldrh	r2, [r7, #2]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	4603      	mov	r3, r0
 80051fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80051fe:	4b08      	ldr	r3, [pc, #32]	; (8005220 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005200:	695a      	ldr	r2, [r3, #20]
 8005202:	88fb      	ldrh	r3, [r7, #6]
 8005204:	4013      	ands	r3, r2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d006      	beq.n	8005218 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800520a:	4a05      	ldr	r2, [pc, #20]	; (8005220 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800520c:	88fb      	ldrh	r3, [r7, #6]
 800520e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005210:	88fb      	ldrh	r3, [r7, #6]
 8005212:	4618      	mov	r0, r3
 8005214:	f7fd fd92 	bl	8002d3c <HAL_GPIO_EXTI_Callback>
  }
}
 8005218:	bf00      	nop
 800521a:	3708      	adds	r7, #8
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	40010400 	.word	0x40010400

08005224 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e08d      	b.n	8005352 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d106      	bne.n	8005250 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7fd ff3c 	bl	80030c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2224      	movs	r2, #36	; 0x24
 8005254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 0201 	bic.w	r2, r2, #1
 8005266:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005274:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689a      	ldr	r2, [r3, #8]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005284:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d107      	bne.n	800529e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	689a      	ldr	r2, [r3, #8]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800529a:	609a      	str	r2, [r3, #8]
 800529c:	e006      	b.n	80052ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	689a      	ldr	r2, [r3, #8]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80052aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d108      	bne.n	80052c6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685a      	ldr	r2, [r3, #4]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052c2:	605a      	str	r2, [r3, #4]
 80052c4:	e007      	b.n	80052d6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	6812      	ldr	r2, [r2, #0]
 80052e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80052e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68da      	ldr	r2, [r3, #12]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	691a      	ldr	r2, [r3, #16]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	695b      	ldr	r3, [r3, #20]
 8005302:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	430a      	orrs	r2, r1
 8005312:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	69d9      	ldr	r1, [r3, #28]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a1a      	ldr	r2, [r3, #32]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	430a      	orrs	r2, r1
 8005322:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f042 0201 	orr.w	r2, r2, #1
 8005332:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2220      	movs	r2, #32
 800533e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3708      	adds	r7, #8
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b082      	sub	sp, #8
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e021      	b.n	80053b0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2224      	movs	r2, #36	; 0x24
 8005370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f022 0201 	bic.w	r2, r2, #1
 8005382:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f7fd ff41 	bl	800320c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3708      	adds	r7, #8
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b088      	sub	sp, #32
 80053bc:	af02      	add	r7, sp, #8
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	4608      	mov	r0, r1
 80053c2:	4611      	mov	r1, r2
 80053c4:	461a      	mov	r2, r3
 80053c6:	4603      	mov	r3, r0
 80053c8:	817b      	strh	r3, [r7, #10]
 80053ca:	460b      	mov	r3, r1
 80053cc:	813b      	strh	r3, [r7, #8]
 80053ce:	4613      	mov	r3, r2
 80053d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b20      	cmp	r3, #32
 80053dc:	f040 80f9 	bne.w	80055d2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80053e0:	6a3b      	ldr	r3, [r7, #32]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d002      	beq.n	80053ec <HAL_I2C_Mem_Write+0x34>
 80053e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d105      	bne.n	80053f8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053f2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e0ed      	b.n	80055d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d101      	bne.n	8005406 <HAL_I2C_Mem_Write+0x4e>
 8005402:	2302      	movs	r3, #2
 8005404:	e0e6      	b.n	80055d4 <HAL_I2C_Mem_Write+0x21c>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800540e:	f7fe fabd 	bl	800398c <HAL_GetTick>
 8005412:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	2319      	movs	r3, #25
 800541a:	2201      	movs	r2, #1
 800541c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f000 fac3 	bl	80059ac <I2C_WaitOnFlagUntilTimeout>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d001      	beq.n	8005430 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e0d1      	b.n	80055d4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2221      	movs	r2, #33	; 0x21
 8005434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2240      	movs	r2, #64	; 0x40
 800543c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6a3a      	ldr	r2, [r7, #32]
 800544a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005450:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005458:	88f8      	ldrh	r0, [r7, #6]
 800545a:	893a      	ldrh	r2, [r7, #8]
 800545c:	8979      	ldrh	r1, [r7, #10]
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	9301      	str	r3, [sp, #4]
 8005462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005464:	9300      	str	r3, [sp, #0]
 8005466:	4603      	mov	r3, r0
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f000 f9d3 	bl	8005814 <I2C_RequestMemoryWrite>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d005      	beq.n	8005480 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e0a9      	b.n	80055d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005484:	b29b      	uxth	r3, r3
 8005486:	2bff      	cmp	r3, #255	; 0xff
 8005488:	d90e      	bls.n	80054a8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	22ff      	movs	r2, #255	; 0xff
 800548e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005494:	b2da      	uxtb	r2, r3
 8005496:	8979      	ldrh	r1, [r7, #10]
 8005498:	2300      	movs	r3, #0
 800549a:	9300      	str	r3, [sp, #0]
 800549c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f000 fc3d 	bl	8005d20 <I2C_TransferConfig>
 80054a6:	e00f      	b.n	80054c8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	8979      	ldrh	r1, [r7, #10]
 80054ba:	2300      	movs	r3, #0
 80054bc:	9300      	str	r3, [sp, #0]
 80054be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f000 fc2c 	bl	8005d20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f000 fabc 	bl	8005a4a <I2C_WaitOnTXISFlagUntilTimeout>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d001      	beq.n	80054dc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e07b      	b.n	80055d4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e0:	781a      	ldrb	r2, [r3, #0]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ec:	1c5a      	adds	r2, r3, #1
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	3b01      	subs	r3, #1
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005504:	3b01      	subs	r3, #1
 8005506:	b29a      	uxth	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005510:	b29b      	uxth	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d034      	beq.n	8005580 <HAL_I2C_Mem_Write+0x1c8>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800551a:	2b00      	cmp	r3, #0
 800551c:	d130      	bne.n	8005580 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	9300      	str	r3, [sp, #0]
 8005522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005524:	2200      	movs	r2, #0
 8005526:	2180      	movs	r1, #128	; 0x80
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f000 fa3f 	bl	80059ac <I2C_WaitOnFlagUntilTimeout>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d001      	beq.n	8005538 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e04d      	b.n	80055d4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800553c:	b29b      	uxth	r3, r3
 800553e:	2bff      	cmp	r3, #255	; 0xff
 8005540:	d90e      	bls.n	8005560 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	22ff      	movs	r2, #255	; 0xff
 8005546:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800554c:	b2da      	uxtb	r2, r3
 800554e:	8979      	ldrh	r1, [r7, #10]
 8005550:	2300      	movs	r3, #0
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f000 fbe1 	bl	8005d20 <I2C_TransferConfig>
 800555e:	e00f      	b.n	8005580 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005564:	b29a      	uxth	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800556e:	b2da      	uxtb	r2, r3
 8005570:	8979      	ldrh	r1, [r7, #10]
 8005572:	2300      	movs	r3, #0
 8005574:	9300      	str	r3, [sp, #0]
 8005576:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f000 fbd0 	bl	8005d20 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005584:	b29b      	uxth	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d19e      	bne.n	80054c8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f000 faa2 	bl	8005ad8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e01a      	b.n	80055d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2220      	movs	r2, #32
 80055a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	6859      	ldr	r1, [r3, #4]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	4b0a      	ldr	r3, [pc, #40]	; (80055dc <HAL_I2C_Mem_Write+0x224>)
 80055b2:	400b      	ands	r3, r1
 80055b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2220      	movs	r2, #32
 80055ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80055ce:	2300      	movs	r3, #0
 80055d0:	e000      	b.n	80055d4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80055d2:	2302      	movs	r3, #2
  }
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3718      	adds	r7, #24
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	fe00e800 	.word	0xfe00e800

080055e0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b088      	sub	sp, #32
 80055e4:	af02      	add	r7, sp, #8
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	4608      	mov	r0, r1
 80055ea:	4611      	mov	r1, r2
 80055ec:	461a      	mov	r2, r3
 80055ee:	4603      	mov	r3, r0
 80055f0:	817b      	strh	r3, [r7, #10]
 80055f2:	460b      	mov	r3, r1
 80055f4:	813b      	strh	r3, [r7, #8]
 80055f6:	4613      	mov	r3, r2
 80055f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b20      	cmp	r3, #32
 8005604:	f040 80fd 	bne.w	8005802 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005608:	6a3b      	ldr	r3, [r7, #32]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d002      	beq.n	8005614 <HAL_I2C_Mem_Read+0x34>
 800560e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005610:	2b00      	cmp	r3, #0
 8005612:	d105      	bne.n	8005620 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f44f 7200 	mov.w	r2, #512	; 0x200
 800561a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e0f1      	b.n	8005804 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005626:	2b01      	cmp	r3, #1
 8005628:	d101      	bne.n	800562e <HAL_I2C_Mem_Read+0x4e>
 800562a:	2302      	movs	r3, #2
 800562c:	e0ea      	b.n	8005804 <HAL_I2C_Mem_Read+0x224>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005636:	f7fe f9a9 	bl	800398c <HAL_GetTick>
 800563a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	9300      	str	r3, [sp, #0]
 8005640:	2319      	movs	r3, #25
 8005642:	2201      	movs	r2, #1
 8005644:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f000 f9af 	bl	80059ac <I2C_WaitOnFlagUntilTimeout>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d001      	beq.n	8005658 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e0d5      	b.n	8005804 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2222      	movs	r2, #34	; 0x22
 800565c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2240      	movs	r2, #64	; 0x40
 8005664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6a3a      	ldr	r2, [r7, #32]
 8005672:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005678:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005680:	88f8      	ldrh	r0, [r7, #6]
 8005682:	893a      	ldrh	r2, [r7, #8]
 8005684:	8979      	ldrh	r1, [r7, #10]
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	9301      	str	r3, [sp, #4]
 800568a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568c:	9300      	str	r3, [sp, #0]
 800568e:	4603      	mov	r3, r0
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	f000 f913 	bl	80058bc <I2C_RequestMemoryRead>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d005      	beq.n	80056a8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e0ad      	b.n	8005804 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	2bff      	cmp	r3, #255	; 0xff
 80056b0:	d90e      	bls.n	80056d0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	22ff      	movs	r2, #255	; 0xff
 80056b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056bc:	b2da      	uxtb	r2, r3
 80056be:	8979      	ldrh	r1, [r7, #10]
 80056c0:	4b52      	ldr	r3, [pc, #328]	; (800580c <HAL_I2C_Mem_Read+0x22c>)
 80056c2:	9300      	str	r3, [sp, #0]
 80056c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f000 fb29 	bl	8005d20 <I2C_TransferConfig>
 80056ce:	e00f      	b.n	80056f0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056de:	b2da      	uxtb	r2, r3
 80056e0:	8979      	ldrh	r1, [r7, #10]
 80056e2:	4b4a      	ldr	r3, [pc, #296]	; (800580c <HAL_I2C_Mem_Read+0x22c>)
 80056e4:	9300      	str	r3, [sp, #0]
 80056e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f000 fb18 	bl	8005d20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f6:	2200      	movs	r2, #0
 80056f8:	2104      	movs	r1, #4
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f000 f956 	bl	80059ac <I2C_WaitOnFlagUntilTimeout>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d001      	beq.n	800570a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e07c      	b.n	8005804 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005714:	b2d2      	uxtb	r2, r2
 8005716:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571c:	1c5a      	adds	r2, r3, #1
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005726:	3b01      	subs	r3, #1
 8005728:	b29a      	uxth	r2, r3
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005732:	b29b      	uxth	r3, r3
 8005734:	3b01      	subs	r3, #1
 8005736:	b29a      	uxth	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005740:	b29b      	uxth	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d034      	beq.n	80057b0 <HAL_I2C_Mem_Read+0x1d0>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800574a:	2b00      	cmp	r3, #0
 800574c:	d130      	bne.n	80057b0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005754:	2200      	movs	r2, #0
 8005756:	2180      	movs	r1, #128	; 0x80
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f000 f927 	bl	80059ac <I2C_WaitOnFlagUntilTimeout>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d001      	beq.n	8005768 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e04d      	b.n	8005804 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800576c:	b29b      	uxth	r3, r3
 800576e:	2bff      	cmp	r3, #255	; 0xff
 8005770:	d90e      	bls.n	8005790 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	22ff      	movs	r2, #255	; 0xff
 8005776:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800577c:	b2da      	uxtb	r2, r3
 800577e:	8979      	ldrh	r1, [r7, #10]
 8005780:	2300      	movs	r3, #0
 8005782:	9300      	str	r3, [sp, #0]
 8005784:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f000 fac9 	bl	8005d20 <I2C_TransferConfig>
 800578e:	e00f      	b.n	80057b0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005794:	b29a      	uxth	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800579e:	b2da      	uxtb	r2, r3
 80057a0:	8979      	ldrh	r1, [r7, #10]
 80057a2:	2300      	movs	r3, #0
 80057a4:	9300      	str	r3, [sp, #0]
 80057a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f000 fab8 	bl	8005d20 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d19a      	bne.n	80056f0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f000 f98a 	bl	8005ad8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d001      	beq.n	80057ce <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e01a      	b.n	8005804 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2220      	movs	r2, #32
 80057d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	6859      	ldr	r1, [r3, #4]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	4b0b      	ldr	r3, [pc, #44]	; (8005810 <HAL_I2C_Mem_Read+0x230>)
 80057e2:	400b      	ands	r3, r1
 80057e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2220      	movs	r2, #32
 80057ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80057fe:	2300      	movs	r3, #0
 8005800:	e000      	b.n	8005804 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005802:	2302      	movs	r3, #2
  }
}
 8005804:	4618      	mov	r0, r3
 8005806:	3718      	adds	r7, #24
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	80002400 	.word	0x80002400
 8005810:	fe00e800 	.word	0xfe00e800

08005814 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b086      	sub	sp, #24
 8005818:	af02      	add	r7, sp, #8
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	4608      	mov	r0, r1
 800581e:	4611      	mov	r1, r2
 8005820:	461a      	mov	r2, r3
 8005822:	4603      	mov	r3, r0
 8005824:	817b      	strh	r3, [r7, #10]
 8005826:	460b      	mov	r3, r1
 8005828:	813b      	strh	r3, [r7, #8]
 800582a:	4613      	mov	r3, r2
 800582c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800582e:	88fb      	ldrh	r3, [r7, #6]
 8005830:	b2da      	uxtb	r2, r3
 8005832:	8979      	ldrh	r1, [r7, #10]
 8005834:	4b20      	ldr	r3, [pc, #128]	; (80058b8 <I2C_RequestMemoryWrite+0xa4>)
 8005836:	9300      	str	r3, [sp, #0]
 8005838:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f000 fa6f 	bl	8005d20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005842:	69fa      	ldr	r2, [r7, #28]
 8005844:	69b9      	ldr	r1, [r7, #24]
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f000 f8ff 	bl	8005a4a <I2C_WaitOnTXISFlagUntilTimeout>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d001      	beq.n	8005856 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e02c      	b.n	80058b0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005856:	88fb      	ldrh	r3, [r7, #6]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d105      	bne.n	8005868 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800585c:	893b      	ldrh	r3, [r7, #8]
 800585e:	b2da      	uxtb	r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	629a      	str	r2, [r3, #40]	; 0x28
 8005866:	e015      	b.n	8005894 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005868:	893b      	ldrh	r3, [r7, #8]
 800586a:	0a1b      	lsrs	r3, r3, #8
 800586c:	b29b      	uxth	r3, r3
 800586e:	b2da      	uxtb	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005876:	69fa      	ldr	r2, [r7, #28]
 8005878:	69b9      	ldr	r1, [r7, #24]
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f000 f8e5 	bl	8005a4a <I2C_WaitOnTXISFlagUntilTimeout>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d001      	beq.n	800588a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e012      	b.n	80058b0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800588a:	893b      	ldrh	r3, [r7, #8]
 800588c:	b2da      	uxtb	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	9300      	str	r3, [sp, #0]
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	2200      	movs	r2, #0
 800589c:	2180      	movs	r1, #128	; 0x80
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	f000 f884 	bl	80059ac <I2C_WaitOnFlagUntilTimeout>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d001      	beq.n	80058ae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e000      	b.n	80058b0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3710      	adds	r7, #16
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	80002000 	.word	0x80002000

080058bc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af02      	add	r7, sp, #8
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	4608      	mov	r0, r1
 80058c6:	4611      	mov	r1, r2
 80058c8:	461a      	mov	r2, r3
 80058ca:	4603      	mov	r3, r0
 80058cc:	817b      	strh	r3, [r7, #10]
 80058ce:	460b      	mov	r3, r1
 80058d0:	813b      	strh	r3, [r7, #8]
 80058d2:	4613      	mov	r3, r2
 80058d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80058d6:	88fb      	ldrh	r3, [r7, #6]
 80058d8:	b2da      	uxtb	r2, r3
 80058da:	8979      	ldrh	r1, [r7, #10]
 80058dc:	4b20      	ldr	r3, [pc, #128]	; (8005960 <I2C_RequestMemoryRead+0xa4>)
 80058de:	9300      	str	r3, [sp, #0]
 80058e0:	2300      	movs	r3, #0
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f000 fa1c 	bl	8005d20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058e8:	69fa      	ldr	r2, [r7, #28]
 80058ea:	69b9      	ldr	r1, [r7, #24]
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 f8ac 	bl	8005a4a <I2C_WaitOnTXISFlagUntilTimeout>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d001      	beq.n	80058fc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e02c      	b.n	8005956 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058fc:	88fb      	ldrh	r3, [r7, #6]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d105      	bne.n	800590e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005902:	893b      	ldrh	r3, [r7, #8]
 8005904:	b2da      	uxtb	r2, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	629a      	str	r2, [r3, #40]	; 0x28
 800590c:	e015      	b.n	800593a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800590e:	893b      	ldrh	r3, [r7, #8]
 8005910:	0a1b      	lsrs	r3, r3, #8
 8005912:	b29b      	uxth	r3, r3
 8005914:	b2da      	uxtb	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800591c:	69fa      	ldr	r2, [r7, #28]
 800591e:	69b9      	ldr	r1, [r7, #24]
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	f000 f892 	bl	8005a4a <I2C_WaitOnTXISFlagUntilTimeout>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e012      	b.n	8005956 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005930:	893b      	ldrh	r3, [r7, #8]
 8005932:	b2da      	uxtb	r2, r3
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	2200      	movs	r2, #0
 8005942:	2140      	movs	r1, #64	; 0x40
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f000 f831 	bl	80059ac <I2C_WaitOnFlagUntilTimeout>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d001      	beq.n	8005954 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e000      	b.n	8005956 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	80002000 	.word	0x80002000

08005964 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	f003 0302 	and.w	r3, r3, #2
 8005976:	2b02      	cmp	r3, #2
 8005978:	d103      	bne.n	8005982 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2200      	movs	r2, #0
 8005980:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	f003 0301 	and.w	r3, r3, #1
 800598c:	2b01      	cmp	r3, #1
 800598e:	d007      	beq.n	80059a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	699a      	ldr	r2, [r3, #24]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f042 0201 	orr.w	r2, r2, #1
 800599e:	619a      	str	r2, [r3, #24]
  }
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	603b      	str	r3, [r7, #0]
 80059b8:	4613      	mov	r3, r2
 80059ba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059bc:	e031      	b.n	8005a22 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c4:	d02d      	beq.n	8005a22 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059c6:	f7fd ffe1 	bl	800398c <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	683a      	ldr	r2, [r7, #0]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d302      	bcc.n	80059dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d122      	bne.n	8005a22 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	699a      	ldr	r2, [r3, #24]
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	4013      	ands	r3, r2
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	bf0c      	ite	eq
 80059ec:	2301      	moveq	r3, #1
 80059ee:	2300      	movne	r3, #0
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	461a      	mov	r2, r3
 80059f4:	79fb      	ldrb	r3, [r7, #7]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d113      	bne.n	8005a22 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059fe:	f043 0220 	orr.w	r2, r3, #32
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2220      	movs	r2, #32
 8005a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e00f      	b.n	8005a42 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	699a      	ldr	r2, [r3, #24]
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	bf0c      	ite	eq
 8005a32:	2301      	moveq	r3, #1
 8005a34:	2300      	movne	r3, #0
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	461a      	mov	r2, r3
 8005a3a:	79fb      	ldrb	r3, [r7, #7]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d0be      	beq.n	80059be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b084      	sub	sp, #16
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	60f8      	str	r0, [r7, #12]
 8005a52:	60b9      	str	r1, [r7, #8]
 8005a54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005a56:	e033      	b.n	8005ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	68b9      	ldr	r1, [r7, #8]
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f000 f87f 	bl	8005b60 <I2C_IsErrorOccurred>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d001      	beq.n	8005a6c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e031      	b.n	8005ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a72:	d025      	beq.n	8005ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a74:	f7fd ff8a 	bl	800398c <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	68ba      	ldr	r2, [r7, #8]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d302      	bcc.n	8005a8a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d11a      	bne.n	8005ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	f003 0302 	and.w	r3, r3, #2
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d013      	beq.n	8005ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a9c:	f043 0220 	orr.w	r2, r3, #32
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e007      	b.n	8005ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	f003 0302 	and.w	r3, r3, #2
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d1c4      	bne.n	8005a58 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3710      	adds	r7, #16
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ae4:	e02f      	b.n	8005b46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	68b9      	ldr	r1, [r7, #8]
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f000 f838 	bl	8005b60 <I2C_IsErrorOccurred>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d001      	beq.n	8005afa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e02d      	b.n	8005b56 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005afa:	f7fd ff47 	bl	800398c <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d302      	bcc.n	8005b10 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d11a      	bne.n	8005b46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	f003 0320 	and.w	r3, r3, #32
 8005b1a:	2b20      	cmp	r3, #32
 8005b1c:	d013      	beq.n	8005b46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b22:	f043 0220 	orr.w	r2, r3, #32
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2220      	movs	r2, #32
 8005b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e007      	b.n	8005b56 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	699b      	ldr	r3, [r3, #24]
 8005b4c:	f003 0320 	and.w	r3, r3, #32
 8005b50:	2b20      	cmp	r3, #32
 8005b52:	d1c8      	bne.n	8005ae6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3710      	adds	r7, #16
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
	...

08005b60 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b08a      	sub	sp, #40	; 0x28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	f003 0310 	and.w	r3, r3, #16
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d068      	beq.n	8005c5e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2210      	movs	r2, #16
 8005b92:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005b94:	e049      	b.n	8005c2a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b9c:	d045      	beq.n	8005c2a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005b9e:	f7fd fef5 	bl	800398c <HAL_GetTick>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	68ba      	ldr	r2, [r7, #8]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d302      	bcc.n	8005bb4 <I2C_IsErrorOccurred+0x54>
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d13a      	bne.n	8005c2a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bbe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005bc6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	699b      	ldr	r3, [r3, #24]
 8005bce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bd6:	d121      	bne.n	8005c1c <I2C_IsErrorOccurred+0xbc>
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bde:	d01d      	beq.n	8005c1c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005be0:	7cfb      	ldrb	r3, [r7, #19]
 8005be2:	2b20      	cmp	r3, #32
 8005be4:	d01a      	beq.n	8005c1c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bf4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005bf6:	f7fd fec9 	bl	800398c <HAL_GetTick>
 8005bfa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005bfc:	e00e      	b.n	8005c1c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005bfe:	f7fd fec5 	bl	800398c <HAL_GetTick>
 8005c02:	4602      	mov	r2, r0
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	2b19      	cmp	r3, #25
 8005c0a:	d907      	bls.n	8005c1c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005c0c:	6a3b      	ldr	r3, [r7, #32]
 8005c0e:	f043 0320 	orr.w	r3, r3, #32
 8005c12:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005c1a:	e006      	b.n	8005c2a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	f003 0320 	and.w	r3, r3, #32
 8005c26:	2b20      	cmp	r3, #32
 8005c28:	d1e9      	bne.n	8005bfe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	f003 0320 	and.w	r3, r3, #32
 8005c34:	2b20      	cmp	r3, #32
 8005c36:	d003      	beq.n	8005c40 <I2C_IsErrorOccurred+0xe0>
 8005c38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d0aa      	beq.n	8005b96 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005c40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d103      	bne.n	8005c50 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005c50:	6a3b      	ldr	r3, [r7, #32]
 8005c52:	f043 0304 	orr.w	r3, r3, #4
 8005c56:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00b      	beq.n	8005c88 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005c70:	6a3b      	ldr	r3, [r7, #32]
 8005c72:	f043 0301 	orr.w	r3, r3, #1
 8005c76:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00b      	beq.n	8005caa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005c92:	6a3b      	ldr	r3, [r7, #32]
 8005c94:	f043 0308 	orr.w	r3, r3, #8
 8005c98:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ca2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00b      	beq.n	8005ccc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005cb4:	6a3b      	ldr	r3, [r7, #32]
 8005cb6:	f043 0302 	orr.w	r3, r3, #2
 8005cba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cc4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005ccc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d01c      	beq.n	8005d0e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f7ff fe45 	bl	8005964 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	6859      	ldr	r1, [r3, #4]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	4b0d      	ldr	r3, [pc, #52]	; (8005d1c <I2C_IsErrorOccurred+0x1bc>)
 8005ce6:	400b      	ands	r3, r1
 8005ce8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cee:	6a3b      	ldr	r3, [r7, #32]
 8005cf0:	431a      	orrs	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005d0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3728      	adds	r7, #40	; 0x28
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	fe00e800 	.word	0xfe00e800

08005d20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b087      	sub	sp, #28
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	607b      	str	r3, [r7, #4]
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	817b      	strh	r3, [r7, #10]
 8005d2e:	4613      	mov	r3, r2
 8005d30:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d32:	897b      	ldrh	r3, [r7, #10]
 8005d34:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005d38:	7a7b      	ldrb	r3, [r7, #9]
 8005d3a:	041b      	lsls	r3, r3, #16
 8005d3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d40:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d46:	6a3b      	ldr	r3, [r7, #32]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d4e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685a      	ldr	r2, [r3, #4]
 8005d56:	6a3b      	ldr	r3, [r7, #32]
 8005d58:	0d5b      	lsrs	r3, r3, #21
 8005d5a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005d5e:	4b08      	ldr	r3, [pc, #32]	; (8005d80 <I2C_TransferConfig+0x60>)
 8005d60:	430b      	orrs	r3, r1
 8005d62:	43db      	mvns	r3, r3
 8005d64:	ea02 0103 	and.w	r1, r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	697a      	ldr	r2, [r7, #20]
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005d72:	bf00      	nop
 8005d74:	371c      	adds	r7, #28
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	03ff63ff 	.word	0x03ff63ff

08005d84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	2b20      	cmp	r3, #32
 8005d98:	d138      	bne.n	8005e0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d101      	bne.n	8005da8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005da4:	2302      	movs	r3, #2
 8005da6:	e032      	b.n	8005e0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2224      	movs	r2, #36	; 0x24
 8005db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f022 0201 	bic.w	r2, r2, #1
 8005dc6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005dd6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6819      	ldr	r1, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	683a      	ldr	r2, [r7, #0]
 8005de4:	430a      	orrs	r2, r1
 8005de6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f042 0201 	orr.w	r2, r2, #1
 8005df6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2220      	movs	r2, #32
 8005dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	e000      	b.n	8005e0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005e0c:	2302      	movs	r3, #2
  }
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr

08005e1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	b085      	sub	sp, #20
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
 8005e22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b20      	cmp	r3, #32
 8005e2e:	d139      	bne.n	8005ea4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d101      	bne.n	8005e3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005e3a:	2302      	movs	r3, #2
 8005e3c:	e033      	b.n	8005ea6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2224      	movs	r2, #36	; 0x24
 8005e4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f022 0201 	bic.w	r2, r2, #1
 8005e5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005e6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	021b      	lsls	r3, r3, #8
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f042 0201 	orr.w	r2, r2, #1
 8005e8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2220      	movs	r2, #32
 8005e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	e000      	b.n	8005ea6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005ea4:	2302      	movs	r3, #2
  }
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3714      	adds	r7, #20
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
	...

08005eb4 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b086      	sub	sp, #24
 8005eb8:	af02      	add	r7, sp, #8
 8005eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8005ec0:	f7fd fd64 	bl	800398c <HAL_GetTick>
 8005ec4:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d102      	bne.n	8005ed2 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	73fb      	strb	r3, [r7, #15]
 8005ed0:	e092      	b.n	8005ff8 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f040 808b 	bne.w	8005ff8 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f7fd f9ce 	bl	8003284 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8005ee8:	f241 3188 	movw	r1, #5000	; 0x1388
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 f88b 	bl	8006008 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	689a      	ldr	r2, [r3, #8]
 8005ef8:	4b42      	ldr	r3, [pc, #264]	; (8006004 <HAL_OSPI_Init+0x150>)
 8005efa:	4013      	ands	r3, r2
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	68d1      	ldr	r1, [r2, #12]
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	6912      	ldr	r2, [r2, #16]
 8005f04:	3a01      	subs	r2, #1
 8005f06:	0412      	lsls	r2, r2, #16
 8005f08:	4311      	orrs	r1, r2
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	6952      	ldr	r2, [r2, #20]
 8005f0e:	3a01      	subs	r2, #1
 8005f10:	0212      	lsls	r2, r2, #8
 8005f12:	4311      	orrs	r1, r2
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005f18:	4311      	orrs	r1, r2
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	69d2      	ldr	r2, [r2, #28]
 8005f1e:	4311      	orrs	r1, r2
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	6812      	ldr	r2, [r2, #0]
 8005f24:	430b      	orrs	r3, r1
 8005f26:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	0412      	lsls	r2, r2, #16
 8005f32:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	3b01      	subs	r3, #1
 8005f44:	021a      	lsls	r2, r3, #8
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f52:	9300      	str	r3, [sp, #0]
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	2200      	movs	r2, #0
 8005f58:	2120      	movs	r1, #32
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 fb98 	bl	8006690 <OSPI_WaitFlagStateUntilTimeout>
 8005f60:	4603      	mov	r3, r0
 8005f62:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005f64:	7bfb      	ldrb	r3, [r7, #15]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d146      	bne.n	8005ff8 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a1b      	ldr	r3, [r3, #32]
 8005f78:	1e5a      	subs	r2, r3, #1
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	689a      	ldr	r2, [r3, #8]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	430a      	orrs	r2, r1
 8005f96:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005fa0:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fac:	431a      	orrs	r2, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	430a      	orrs	r2, r1
 8005fb4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f042 0201 	orr.w	r2, r2, #1
 8005fc6:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d107      	bne.n	8005fe0 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	689a      	ldr	r2, [r3, #8]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f042 0202 	orr.w	r2, r2, #2
 8005fde:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005fe8:	d103      	bne.n	8005ff2 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	645a      	str	r2, [r3, #68]	; 0x44
 8005ff0:	e002      	b.n	8005ff8 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2202      	movs	r2, #2
 8005ff6:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8005ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3710      	adds	r7, #16
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	f8e0f8f4 	.word	0xf8e0f8f4

08006008 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	683a      	ldr	r2, [r7, #0]
 8006016:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	370c      	adds	r7, #12
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
	...

08006028 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b092      	sub	sp, #72	; 0x48
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006034:	2300      	movs	r3, #0
 8006036:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800603a:	2300      	movs	r3, #0
 800603c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a08      	ldr	r2, [pc, #32]	; (8006068 <HAL_OSPIM_Config+0x40>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d105      	bne.n	8006056 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800604a:	2300      	movs	r3, #0
 800604c:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 800604e:	2301      	movs	r3, #1
 8006050:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8006054:	e004      	b.n	8006060 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8006056:	2301      	movs	r3, #1
 8006058:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 800605a:	2300      	movs	r3, #0
 800605c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8006060:	2300      	movs	r3, #0
 8006062:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006066:	e01f      	b.n	80060a8 <HAL_OSPIM_Config+0x80>
 8006068:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 800606c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006070:	3301      	adds	r3, #1
 8006072:	b2d8      	uxtb	r0, r3
 8006074:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006078:	f107 0114 	add.w	r1, r7, #20
 800607c:	4613      	mov	r3, r2
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4413      	add	r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	440b      	add	r3, r1
 8006086:	4619      	mov	r1, r3
 8006088:	f000 fb3a 	bl	8006700 <OSPIM_GetConfig>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d005      	beq.n	800609e <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2208      	movs	r2, #8
 800609c:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800609e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80060a2:	3301      	adds	r3, #1
 80060a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80060a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d9dd      	bls.n	800606c <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 80060b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f040 82de 	bne.w	8006676 <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80060ba:	4bc6      	ldr	r3, [pc, #792]	; (80063d4 <HAL_OSPIM_Config+0x3ac>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0301 	and.w	r3, r3, #1
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00b      	beq.n	80060de <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80060c6:	4bc3      	ldr	r3, [pc, #780]	; (80063d4 <HAL_OSPIM_Config+0x3ac>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4ac2      	ldr	r2, [pc, #776]	; (80063d4 <HAL_OSPIM_Config+0x3ac>)
 80060cc:	f023 0301 	bic.w	r3, r3, #1
 80060d0:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80060d2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80060d6:	f043 0301 	orr.w	r3, r3, #1
 80060da:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80060de:	4bbe      	ldr	r3, [pc, #760]	; (80063d8 <HAL_OSPIM_Config+0x3b0>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00b      	beq.n	8006102 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80060ea:	4bbb      	ldr	r3, [pc, #748]	; (80063d8 <HAL_OSPIM_Config+0x3b0>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4aba      	ldr	r2, [pc, #744]	; (80063d8 <HAL_OSPIM_Config+0x3b0>)
 80060f0:	f023 0301 	bic.w	r3, r3, #1
 80060f4:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80060f6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80060fa:	f043 0302 	orr.w	r3, r3, #2
 80060fe:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8006102:	49b6      	ldr	r1, [pc, #728]	; (80063dc <HAL_OSPIM_Config+0x3b4>)
 8006104:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006106:	4613      	mov	r3, r2
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4413      	add	r3, r2
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	3348      	adds	r3, #72	; 0x48
 8006110:	443b      	add	r3, r7
 8006112:	3b2c      	subs	r3, #44	; 0x2c
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	3b01      	subs	r3, #1
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	440b      	add	r3, r1
 800611c:	6859      	ldr	r1, [r3, #4]
 800611e:	48af      	ldr	r0, [pc, #700]	; (80063dc <HAL_OSPIM_Config+0x3b4>)
 8006120:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006122:	4613      	mov	r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	4413      	add	r3, r2
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	3348      	adds	r3, #72	; 0x48
 800612c:	443b      	add	r3, r7
 800612e:	3b2c      	subs	r3, #44	; 0x2c
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	3b01      	subs	r3, #1
 8006134:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	4403      	add	r3, r0
 800613c:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 800613e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006140:	4613      	mov	r3, r2
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	4413      	add	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	3348      	adds	r3, #72	; 0x48
 800614a:	443b      	add	r3, r7
 800614c:	3b34      	subs	r3, #52	; 0x34
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	f000 80a1 	beq.w	8006298 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8006156:	49a1      	ldr	r1, [pc, #644]	; (80063dc <HAL_OSPIM_Config+0x3b4>)
 8006158:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800615a:	4613      	mov	r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	4413      	add	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	3348      	adds	r3, #72	; 0x48
 8006164:	443b      	add	r3, r7
 8006166:	3b34      	subs	r3, #52	; 0x34
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	3b01      	subs	r3, #1
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	440b      	add	r3, r1
 8006170:	6859      	ldr	r1, [r3, #4]
 8006172:	489a      	ldr	r0, [pc, #616]	; (80063dc <HAL_OSPIM_Config+0x3b4>)
 8006174:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006176:	4613      	mov	r3, r2
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4413      	add	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	3348      	adds	r3, #72	; 0x48
 8006180:	443b      	add	r3, r7
 8006182:	3b34      	subs	r3, #52	; 0x34
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	3b01      	subs	r3, #1
 8006188:	f021 0201 	bic.w	r2, r1, #1
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	4403      	add	r3, r0
 8006190:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8006192:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006194:	4613      	mov	r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4413      	add	r3, r2
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	3348      	adds	r3, #72	; 0x48
 800619e:	443b      	add	r3, r7
 80061a0:	3b30      	subs	r3, #48	; 0x30
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d01d      	beq.n	80061e4 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80061a8:	498c      	ldr	r1, [pc, #560]	; (80063dc <HAL_OSPIM_Config+0x3b4>)
 80061aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061ac:	4613      	mov	r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	4413      	add	r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	3348      	adds	r3, #72	; 0x48
 80061b6:	443b      	add	r3, r7
 80061b8:	3b30      	subs	r3, #48	; 0x30
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	3b01      	subs	r3, #1
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	440b      	add	r3, r1
 80061c2:	6859      	ldr	r1, [r3, #4]
 80061c4:	4885      	ldr	r0, [pc, #532]	; (80063dc <HAL_OSPIM_Config+0x3b4>)
 80061c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061c8:	4613      	mov	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4413      	add	r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	3348      	adds	r3, #72	; 0x48
 80061d2:	443b      	add	r3, r7
 80061d4:	3b30      	subs	r3, #48	; 0x30
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	3b01      	subs	r3, #1
 80061da:	f021 0210 	bic.w	r2, r1, #16
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	4403      	add	r3, r0
 80061e2:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80061e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061e6:	4613      	mov	r3, r2
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	4413      	add	r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	3348      	adds	r3, #72	; 0x48
 80061f0:	443b      	add	r3, r7
 80061f2:	3b28      	subs	r3, #40	; 0x28
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d021      	beq.n	800623e <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80061fa:	4978      	ldr	r1, [pc, #480]	; (80063dc <HAL_OSPIM_Config+0x3b4>)
 80061fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061fe:	4613      	mov	r3, r2
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	4413      	add	r3, r2
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	3348      	adds	r3, #72	; 0x48
 8006208:	443b      	add	r3, r7
 800620a:	3b28      	subs	r3, #40	; 0x28
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	3b01      	subs	r3, #1
 8006210:	f003 0301 	and.w	r3, r3, #1
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	440b      	add	r3, r1
 8006218:	6859      	ldr	r1, [r3, #4]
 800621a:	4870      	ldr	r0, [pc, #448]	; (80063dc <HAL_OSPIM_Config+0x3b4>)
 800621c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800621e:	4613      	mov	r3, r2
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	4413      	add	r3, r2
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	3348      	adds	r3, #72	; 0x48
 8006228:	443b      	add	r3, r7
 800622a:	3b28      	subs	r3, #40	; 0x28
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	3b01      	subs	r3, #1
 8006230:	f003 0301 	and.w	r3, r3, #1
 8006234:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	4403      	add	r3, r0
 800623c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800623e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006240:	4613      	mov	r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	3348      	adds	r3, #72	; 0x48
 800624a:	443b      	add	r3, r7
 800624c:	3b24      	subs	r3, #36	; 0x24
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d021      	beq.n	8006298 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8006254:	4961      	ldr	r1, [pc, #388]	; (80063dc <HAL_OSPIM_Config+0x3b4>)
 8006256:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006258:	4613      	mov	r3, r2
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	4413      	add	r3, r2
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	3348      	adds	r3, #72	; 0x48
 8006262:	443b      	add	r3, r7
 8006264:	3b24      	subs	r3, #36	; 0x24
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	3b01      	subs	r3, #1
 800626a:	f003 0301 	and.w	r3, r3, #1
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	440b      	add	r3, r1
 8006272:	6859      	ldr	r1, [r3, #4]
 8006274:	4859      	ldr	r0, [pc, #356]	; (80063dc <HAL_OSPIM_Config+0x3b4>)
 8006276:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006278:	4613      	mov	r3, r2
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	4413      	add	r3, r2
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	3348      	adds	r3, #72	; 0x48
 8006282:	443b      	add	r3, r7
 8006284:	3b24      	subs	r3, #36	; 0x24
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	3b01      	subs	r3, #1
 800628a:	f003 0301 	and.w	r3, r3, #1
 800628e:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4403      	add	r3, r0
 8006296:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	6819      	ldr	r1, [r3, #0]
 800629c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80062a0:	4613      	mov	r3, r2
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	4413      	add	r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	3348      	adds	r3, #72	; 0x48
 80062aa:	443b      	add	r3, r7
 80062ac:	3b34      	subs	r3, #52	; 0x34
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4299      	cmp	r1, r3
 80062b2:	d038      	beq.n	8006326 <HAL_OSPIM_Config+0x2fe>
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	6859      	ldr	r1, [r3, #4]
 80062b8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80062bc:	4613      	mov	r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	3348      	adds	r3, #72	; 0x48
 80062c6:	443b      	add	r3, r7
 80062c8:	3b30      	subs	r3, #48	; 0x30
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4299      	cmp	r1, r3
 80062ce:	d02a      	beq.n	8006326 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	6899      	ldr	r1, [r3, #8]
 80062d4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80062d8:	4613      	mov	r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	4413      	add	r3, r2
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	3348      	adds	r3, #72	; 0x48
 80062e2:	443b      	add	r3, r7
 80062e4:	3b2c      	subs	r3, #44	; 0x2c
 80062e6:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80062e8:	4299      	cmp	r1, r3
 80062ea:	d01c      	beq.n	8006326 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	68d9      	ldr	r1, [r3, #12]
 80062f0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80062f4:	4613      	mov	r3, r2
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	4413      	add	r3, r2
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	3348      	adds	r3, #72	; 0x48
 80062fe:	443b      	add	r3, r7
 8006300:	3b28      	subs	r3, #40	; 0x28
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4299      	cmp	r1, r3
 8006306:	d00e      	beq.n	8006326 <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	6919      	ldr	r1, [r3, #16]
 800630c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006310:	4613      	mov	r3, r2
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	4413      	add	r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	3348      	adds	r3, #72	; 0x48
 800631a:	443b      	add	r3, r7
 800631c:	3b24      	subs	r3, #36	; 0x24
 800631e:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006320:	4299      	cmp	r1, r3
 8006322:	f040 80d3 	bne.w	80064cc <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8006326:	492d      	ldr	r1, [pc, #180]	; (80063dc <HAL_OSPIM_Config+0x3b4>)
 8006328:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800632c:	4613      	mov	r3, r2
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	4413      	add	r3, r2
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	3348      	adds	r3, #72	; 0x48
 8006336:	443b      	add	r3, r7
 8006338:	3b34      	subs	r3, #52	; 0x34
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	3b01      	subs	r3, #1
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	440b      	add	r3, r1
 8006342:	6859      	ldr	r1, [r3, #4]
 8006344:	4825      	ldr	r0, [pc, #148]	; (80063dc <HAL_OSPIM_Config+0x3b4>)
 8006346:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800634a:	4613      	mov	r3, r2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	4413      	add	r3, r2
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	3348      	adds	r3, #72	; 0x48
 8006354:	443b      	add	r3, r7
 8006356:	3b34      	subs	r3, #52	; 0x34
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	3b01      	subs	r3, #1
 800635c:	f021 0201 	bic.w	r2, r1, #1
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	4403      	add	r3, r0
 8006364:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8006366:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800636a:	4613      	mov	r3, r2
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4413      	add	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	3348      	adds	r3, #72	; 0x48
 8006374:	443b      	add	r3, r7
 8006376:	3b30      	subs	r3, #48	; 0x30
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d01f      	beq.n	80063be <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800637e:	4917      	ldr	r1, [pc, #92]	; (80063dc <HAL_OSPIM_Config+0x3b4>)
 8006380:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006384:	4613      	mov	r3, r2
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	4413      	add	r3, r2
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	3348      	adds	r3, #72	; 0x48
 800638e:	443b      	add	r3, r7
 8006390:	3b30      	subs	r3, #48	; 0x30
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	3b01      	subs	r3, #1
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	440b      	add	r3, r1
 800639a:	6859      	ldr	r1, [r3, #4]
 800639c:	480f      	ldr	r0, [pc, #60]	; (80063dc <HAL_OSPIM_Config+0x3b4>)
 800639e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80063a2:	4613      	mov	r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	3348      	adds	r3, #72	; 0x48
 80063ac:	443b      	add	r3, r7
 80063ae:	3b30      	subs	r3, #48	; 0x30
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	3b01      	subs	r3, #1
 80063b4:	f021 0210 	bic.w	r2, r1, #16
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	4403      	add	r3, r0
 80063bc:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80063be:	4907      	ldr	r1, [pc, #28]	; (80063dc <HAL_OSPIM_Config+0x3b4>)
 80063c0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80063c4:	4613      	mov	r3, r2
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	4413      	add	r3, r2
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	3348      	adds	r3, #72	; 0x48
 80063ce:	443b      	add	r3, r7
 80063d0:	3b2c      	subs	r3, #44	; 0x2c
 80063d2:	e005      	b.n	80063e0 <HAL_OSPIM_Config+0x3b8>
 80063d4:	a0001000 	.word	0xa0001000
 80063d8:	a0001400 	.word	0xa0001400
 80063dc:	50061c00 	.word	0x50061c00
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	3b01      	subs	r3, #1
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	440b      	add	r3, r1
 80063e8:	6859      	ldr	r1, [r3, #4]
 80063ea:	48a6      	ldr	r0, [pc, #664]	; (8006684 <HAL_OSPIM_Config+0x65c>)
 80063ec:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80063f0:	4613      	mov	r3, r2
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	4413      	add	r3, r2
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	3348      	adds	r3, #72	; 0x48
 80063fa:	443b      	add	r3, r7
 80063fc:	3b2c      	subs	r3, #44	; 0x2c
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	3b01      	subs	r3, #1
 8006402:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	4403      	add	r3, r0
 800640a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800640c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006410:	4613      	mov	r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	4413      	add	r3, r2
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	3348      	adds	r3, #72	; 0x48
 800641a:	443b      	add	r3, r7
 800641c:	3b28      	subs	r3, #40	; 0x28
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d023      	beq.n	800646c <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006424:	4997      	ldr	r1, [pc, #604]	; (8006684 <HAL_OSPIM_Config+0x65c>)
 8006426:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800642a:	4613      	mov	r3, r2
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4413      	add	r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	3348      	adds	r3, #72	; 0x48
 8006434:	443b      	add	r3, r7
 8006436:	3b28      	subs	r3, #40	; 0x28
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	3b01      	subs	r3, #1
 800643c:	f003 0301 	and.w	r3, r3, #1
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	440b      	add	r3, r1
 8006444:	6859      	ldr	r1, [r3, #4]
 8006446:	488f      	ldr	r0, [pc, #572]	; (8006684 <HAL_OSPIM_Config+0x65c>)
 8006448:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800644c:	4613      	mov	r3, r2
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	4413      	add	r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	3348      	adds	r3, #72	; 0x48
 8006456:	443b      	add	r3, r7
 8006458:	3b28      	subs	r3, #40	; 0x28
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	3b01      	subs	r3, #1
 800645e:	f003 0301 	and.w	r3, r3, #1
 8006462:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	4403      	add	r3, r0
 800646a:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800646c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006470:	4613      	mov	r3, r2
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	4413      	add	r3, r2
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	3348      	adds	r3, #72	; 0x48
 800647a:	443b      	add	r3, r7
 800647c:	3b24      	subs	r3, #36	; 0x24
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d023      	beq.n	80064cc <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006484:	497f      	ldr	r1, [pc, #508]	; (8006684 <HAL_OSPIM_Config+0x65c>)
 8006486:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800648a:	4613      	mov	r3, r2
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	4413      	add	r3, r2
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	3348      	adds	r3, #72	; 0x48
 8006494:	443b      	add	r3, r7
 8006496:	3b24      	subs	r3, #36	; 0x24
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	3b01      	subs	r3, #1
 800649c:	f003 0301 	and.w	r3, r3, #1
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	440b      	add	r3, r1
 80064a4:	6859      	ldr	r1, [r3, #4]
 80064a6:	4877      	ldr	r0, [pc, #476]	; (8006684 <HAL_OSPIM_Config+0x65c>)
 80064a8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80064ac:	4613      	mov	r3, r2
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4413      	add	r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	3348      	adds	r3, #72	; 0x48
 80064b6:	443b      	add	r3, r7
 80064b8:	3b24      	subs	r3, #36	; 0x24
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	3b01      	subs	r3, #1
 80064be:	f003 0301 	and.w	r3, r3, #1
 80064c2:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4403      	add	r3, r0
 80064ca:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80064cc:	4a6d      	ldr	r2, [pc, #436]	; (8006684 <HAL_OSPIM_Config+0x65c>)
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	3b01      	subs	r3, #1
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	4413      	add	r3, r2
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064e0:	025b      	lsls	r3, r3, #9
 80064e2:	431a      	orrs	r2, r3
 80064e4:	4967      	ldr	r1, [pc, #412]	; (8006684 <HAL_OSPIM_Config+0x65c>)
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	3b01      	subs	r3, #1
 80064ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	440b      	add	r3, r1
 80064f4:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80064f6:	4a63      	ldr	r2, [pc, #396]	; (8006684 <HAL_OSPIM_Config+0x65c>)
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	3b01      	subs	r3, #1
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	f023 0203 	bic.w	r2, r3, #3
 8006508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800650a:	005b      	lsls	r3, r3, #1
 800650c:	431a      	orrs	r2, r3
 800650e:	495d      	ldr	r1, [pc, #372]	; (8006684 <HAL_OSPIM_Config+0x65c>)
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	3b01      	subs	r3, #1
 8006516:	f042 0201 	orr.w	r2, r2, #1
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	440b      	add	r3, r1
 800651e:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d014      	beq.n	8006552 <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8006528:	4a56      	ldr	r2, [pc, #344]	; (8006684 <HAL_OSPIM_Config+0x65c>)
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	3b01      	subs	r3, #1
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	4413      	add	r3, r2
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800653a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800653c:	015b      	lsls	r3, r3, #5
 800653e:	431a      	orrs	r2, r3
 8006540:	4950      	ldr	r1, [pc, #320]	; (8006684 <HAL_OSPIM_Config+0x65c>)
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	3b01      	subs	r3, #1
 8006548:	f042 0210 	orr.w	r2, r2, #16
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	440b      	add	r3, r1
 8006550:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d019      	beq.n	8006592 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800655e:	4a49      	ldr	r2, [pc, #292]	; (8006684 <HAL_OSPIM_Config+0x65c>)
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	3b01      	subs	r3, #1
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	4413      	add	r3, r2
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006576:	049b      	lsls	r3, r3, #18
 8006578:	431a      	orrs	r2, r3
 800657a:	4942      	ldr	r1, [pc, #264]	; (8006684 <HAL_OSPIM_Config+0x65c>)
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	3b01      	subs	r3, #1
 8006582:	f003 0301 	and.w	r3, r3, #1
 8006586:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	440b      	add	r3, r1
 800658e:	605a      	str	r2, [r3, #4]
 8006590:	e01c      	b.n	80065cc <HAL_OSPIM_Config+0x5a4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d018      	beq.n	80065cc <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800659a:	4a3a      	ldr	r2, [pc, #232]	; (8006684 <HAL_OSPIM_Config+0x65c>)
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	3b01      	subs	r3, #1
 80065a2:	f003 0301 	and.w	r3, r3, #1
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	4413      	add	r3, r2
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80065b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065b2:	069b      	lsls	r3, r3, #26
 80065b4:	431a      	orrs	r2, r3
 80065b6:	4933      	ldr	r1, [pc, #204]	; (8006684 <HAL_OSPIM_Config+0x65c>)
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	3b01      	subs	r3, #1
 80065be:	f003 0301 	and.w	r3, r3, #1
 80065c2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	440b      	add	r3, r1
 80065ca:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d019      	beq.n	800660c <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80065d8:	4a2a      	ldr	r2, [pc, #168]	; (8006684 <HAL_OSPIM_Config+0x65c>)
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	3b01      	subs	r3, #1
 80065e0:	f003 0301 	and.w	r3, r3, #1
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	4413      	add	r3, r2
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80065ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065f0:	049b      	lsls	r3, r3, #18
 80065f2:	431a      	orrs	r2, r3
 80065f4:	4923      	ldr	r1, [pc, #140]	; (8006684 <HAL_OSPIM_Config+0x65c>)
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	3b01      	subs	r3, #1
 80065fc:	f003 0301 	and.w	r3, r3, #1
 8006600:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	440b      	add	r3, r1
 8006608:	605a      	str	r2, [r3, #4]
 800660a:	e01c      	b.n	8006646 <HAL_OSPIM_Config+0x61e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d018      	beq.n	8006646 <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006614:	4a1b      	ldr	r2, [pc, #108]	; (8006684 <HAL_OSPIM_Config+0x65c>)
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	3b01      	subs	r3, #1
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	4413      	add	r3, r2
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800662a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800662c:	069b      	lsls	r3, r3, #26
 800662e:	431a      	orrs	r2, r3
 8006630:	4914      	ldr	r1, [pc, #80]	; (8006684 <HAL_OSPIM_Config+0x65c>)
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	3b01      	subs	r3, #1
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	440b      	add	r3, r1
 8006644:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8006646:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800664a:	f003 0301 	and.w	r3, r3, #1
 800664e:	2b00      	cmp	r3, #0
 8006650:	d005      	beq.n	800665e <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8006652:	4b0d      	ldr	r3, [pc, #52]	; (8006688 <HAL_OSPIM_Config+0x660>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a0c      	ldr	r2, [pc, #48]	; (8006688 <HAL_OSPIM_Config+0x660>)
 8006658:	f043 0301 	orr.w	r3, r3, #1
 800665c:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 800665e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006662:	f003 0302 	and.w	r3, r3, #2
 8006666:	2b00      	cmp	r3, #0
 8006668:	d005      	beq.n	8006676 <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800666a:	4b08      	ldr	r3, [pc, #32]	; (800668c <HAL_OSPIM_Config+0x664>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a07      	ldr	r2, [pc, #28]	; (800668c <HAL_OSPIM_Config+0x664>)
 8006670:	f043 0301 	orr.w	r3, r3, #1
 8006674:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8006676:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800667a:	4618      	mov	r0, r3
 800667c:	3748      	adds	r7, #72	; 0x48
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	50061c00 	.word	0x50061c00
 8006688:	a0001000 	.word	0xa0001000
 800668c:	a0001400 	.word	0xa0001400

08006690 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	603b      	str	r3, [r7, #0]
 800669c:	4613      	mov	r3, r2
 800669e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80066a0:	e01a      	b.n	80066d8 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a8:	d016      	beq.n	80066d8 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066aa:	f7fd f96f 	bl	800398c <HAL_GetTick>
 80066ae:	4602      	mov	r2, r0
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	69ba      	ldr	r2, [r7, #24]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d302      	bcc.n	80066c0 <OSPI_WaitFlagStateUntilTimeout+0x30>
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d10b      	bne.n	80066d8 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066c6:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066cc:	f043 0201 	orr.w	r2, r3, #1
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e00e      	b.n	80066f6 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	6a1a      	ldr	r2, [r3, #32]
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	4013      	ands	r3, r2
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	bf14      	ite	ne
 80066e6:	2301      	movne	r3, #1
 80066e8:	2300      	moveq	r3, #0
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	461a      	mov	r2, r3
 80066ee:	79fb      	ldrb	r3, [r7, #7]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d1d6      	bne.n	80066a2 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
	...

08006700 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8006700:	b480      	push	{r7}
 8006702:	b087      	sub	sp, #28
 8006704:	af00      	add	r7, sp, #0
 8006706:	4603      	mov	r3, r0
 8006708:	6039      	str	r1, [r7, #0]
 800670a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800670c:	2300      	movs	r3, #0
 800670e:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8006710:	2300      	movs	r3, #0
 8006712:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8006714:	79fb      	ldrb	r3, [r7, #7]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d005      	beq.n	8006726 <OSPIM_GetConfig+0x26>
 800671a:	79fb      	ldrb	r3, [r7, #7]
 800671c:	2b02      	cmp	r3, #2
 800671e:	d802      	bhi.n	8006726 <OSPIM_GetConfig+0x26>
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d102      	bne.n	800672c <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	75fb      	strb	r3, [r7, #23]
 800672a:	e08e      	b.n	800684a <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	2200      	movs	r2, #0
 8006730:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	2200      	movs	r2, #0
 8006736:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	2200      	movs	r2, #0
 800673c:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	2200      	movs	r2, #0
 8006742:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	2200      	movs	r2, #0
 8006748:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800674a:	79fb      	ldrb	r3, [r7, #7]
 800674c:	2b02      	cmp	r3, #2
 800674e:	d101      	bne.n	8006754 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8006750:	4b41      	ldr	r3, [pc, #260]	; (8006858 <OSPIM_GetConfig+0x158>)
 8006752:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8006754:	2300      	movs	r3, #0
 8006756:	60fb      	str	r3, [r7, #12]
 8006758:	e074      	b.n	8006844 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 800675a:	4a40      	ldr	r2, [pc, #256]	; (800685c <OSPIM_GetConfig+0x15c>)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	4413      	add	r3, r2
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	f003 0301 	and.w	r3, r3, #1
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00a      	beq.n	8006786 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8006770:	68ba      	ldr	r2, [r7, #8]
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	4053      	eors	r3, r2
 8006776:	f003 0302 	and.w	r3, r3, #2
 800677a:	2b00      	cmp	r3, #0
 800677c:	d103      	bne.n	8006786 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	1c5a      	adds	r2, r3, #1
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	f003 0310 	and.w	r3, r3, #16
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00a      	beq.n	80067a6 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8006790:	68ba      	ldr	r2, [r7, #8]
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	4053      	eors	r3, r2
 8006796:	f003 0320 	and.w	r3, r3, #32
 800679a:	2b00      	cmp	r3, #0
 800679c:	d103      	bne.n	80067a6 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	1c5a      	adds	r2, r3, #1
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00a      	beq.n	80067c6 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80067b0:	68ba      	ldr	r2, [r7, #8]
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	4053      	eors	r3, r2
 80067b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d103      	bne.n	80067c6 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	1c5a      	adds	r2, r3, #1
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d018      	beq.n	8006802 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80067d0:	68ba      	ldr	r2, [r7, #8]
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	4053      	eors	r3, r2
 80067d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d111      	bne.n	8006802 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d106      	bne.n	80067f6 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	3301      	adds	r3, #1
 80067ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	60da      	str	r2, [r3, #12]
 80067f4:	e005      	b.n	8006802 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	3301      	adds	r3, #1
 80067fa:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006808:	2b00      	cmp	r3, #0
 800680a:	d018      	beq.n	800683e <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 800680c:	68ba      	ldr	r2, [r7, #8]
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	4053      	eors	r3, r2
 8006812:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d111      	bne.n	800683e <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006820:	2b00      	cmp	r3, #0
 8006822:	d106      	bne.n	8006832 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	3301      	adds	r3, #1
 8006828:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	611a      	str	r2, [r3, #16]
 8006830:	e005      	b.n	800683e <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	3301      	adds	r3, #1
 8006836:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	3301      	adds	r3, #1
 8006842:	60fb      	str	r3, [r7, #12]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2b01      	cmp	r3, #1
 8006848:	d987      	bls.n	800675a <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 800684a:	7dfb      	ldrb	r3, [r7, #23]
}
 800684c:	4618      	mov	r0, r3
 800684e:	371c      	adds	r7, #28
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr
 8006858:	04040222 	.word	0x04040222
 800685c:	50061c00 	.word	0x50061c00

08006860 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006860:	b480      	push	{r7}
 8006862:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006864:	4b05      	ldr	r3, [pc, #20]	; (800687c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a04      	ldr	r2, [pc, #16]	; (800687c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800686a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800686e:	6013      	str	r3, [r2, #0]
}
 8006870:	bf00      	nop
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop
 800687c:	40007000 	.word	0x40007000

08006880 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006880:	b480      	push	{r7}
 8006882:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006884:	4b0d      	ldr	r3, [pc, #52]	; (80068bc <HAL_PWREx_GetVoltageRange+0x3c>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800688c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006890:	d102      	bne.n	8006898 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8006892:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006896:	e00b      	b.n	80068b0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8006898:	4b08      	ldr	r3, [pc, #32]	; (80068bc <HAL_PWREx_GetVoltageRange+0x3c>)
 800689a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800689e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068a6:	d102      	bne.n	80068ae <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80068a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068ac:	e000      	b.n	80068b0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80068ae:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	40007000 	.word	0x40007000

080068c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d141      	bne.n	8006952 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80068ce:	4b4b      	ldr	r3, [pc, #300]	; (80069fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80068d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068da:	d131      	bne.n	8006940 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80068dc:	4b47      	ldr	r3, [pc, #284]	; (80069fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068e2:	4a46      	ldr	r2, [pc, #280]	; (80069fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80068ec:	4b43      	ldr	r3, [pc, #268]	; (80069fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80068f4:	4a41      	ldr	r2, [pc, #260]	; (80069fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80068fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80068fc:	4b40      	ldr	r3, [pc, #256]	; (8006a00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2232      	movs	r2, #50	; 0x32
 8006902:	fb02 f303 	mul.w	r3, r2, r3
 8006906:	4a3f      	ldr	r2, [pc, #252]	; (8006a04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006908:	fba2 2303 	umull	r2, r3, r2, r3
 800690c:	0c9b      	lsrs	r3, r3, #18
 800690e:	3301      	adds	r3, #1
 8006910:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006912:	e002      	b.n	800691a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	3b01      	subs	r3, #1
 8006918:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800691a:	4b38      	ldr	r3, [pc, #224]	; (80069fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800691c:	695b      	ldr	r3, [r3, #20]
 800691e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006926:	d102      	bne.n	800692e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1f2      	bne.n	8006914 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800692e:	4b33      	ldr	r3, [pc, #204]	; (80069fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800693a:	d158      	bne.n	80069ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800693c:	2303      	movs	r3, #3
 800693e:	e057      	b.n	80069f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006940:	4b2e      	ldr	r3, [pc, #184]	; (80069fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006942:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006946:	4a2d      	ldr	r2, [pc, #180]	; (80069fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006948:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800694c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006950:	e04d      	b.n	80069ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006958:	d141      	bne.n	80069de <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800695a:	4b28      	ldr	r3, [pc, #160]	; (80069fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006962:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006966:	d131      	bne.n	80069cc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006968:	4b24      	ldr	r3, [pc, #144]	; (80069fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800696a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800696e:	4a23      	ldr	r2, [pc, #140]	; (80069fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006974:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006978:	4b20      	ldr	r3, [pc, #128]	; (80069fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006980:	4a1e      	ldr	r2, [pc, #120]	; (80069fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006982:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006986:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8006988:	4b1d      	ldr	r3, [pc, #116]	; (8006a00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2232      	movs	r2, #50	; 0x32
 800698e:	fb02 f303 	mul.w	r3, r2, r3
 8006992:	4a1c      	ldr	r2, [pc, #112]	; (8006a04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006994:	fba2 2303 	umull	r2, r3, r2, r3
 8006998:	0c9b      	lsrs	r3, r3, #18
 800699a:	3301      	adds	r3, #1
 800699c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800699e:	e002      	b.n	80069a6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	3b01      	subs	r3, #1
 80069a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80069a6:	4b15      	ldr	r3, [pc, #84]	; (80069fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069a8:	695b      	ldr	r3, [r3, #20]
 80069aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069b2:	d102      	bne.n	80069ba <HAL_PWREx_ControlVoltageScaling+0xfa>
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1f2      	bne.n	80069a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80069ba:	4b10      	ldr	r3, [pc, #64]	; (80069fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069c6:	d112      	bne.n	80069ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80069c8:	2303      	movs	r3, #3
 80069ca:	e011      	b.n	80069f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80069cc:	4b0b      	ldr	r3, [pc, #44]	; (80069fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069d2:	4a0a      	ldr	r2, [pc, #40]	; (80069fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80069dc:	e007      	b.n	80069ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80069de:	4b07      	ldr	r3, [pc, #28]	; (80069fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80069e6:	4a05      	ldr	r2, [pc, #20]	; (80069fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80069ec:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3714      	adds	r7, #20
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr
 80069fc:	40007000 	.word	0x40007000
 8006a00:	2000003c 	.word	0x2000003c
 8006a04:	431bde83 	.word	0x431bde83

08006a08 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b088      	sub	sp, #32
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d102      	bne.n	8006a1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	f000 bc08 	b.w	800722c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a1c:	4b96      	ldr	r3, [pc, #600]	; (8006c78 <HAL_RCC_OscConfig+0x270>)
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	f003 030c 	and.w	r3, r3, #12
 8006a24:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a26:	4b94      	ldr	r3, [pc, #592]	; (8006c78 <HAL_RCC_OscConfig+0x270>)
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	f003 0303 	and.w	r3, r3, #3
 8006a2e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 0310 	and.w	r3, r3, #16
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f000 80e4 	beq.w	8006c06 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d007      	beq.n	8006a54 <HAL_RCC_OscConfig+0x4c>
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	2b0c      	cmp	r3, #12
 8006a48:	f040 808b 	bne.w	8006b62 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	f040 8087 	bne.w	8006b62 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006a54:	4b88      	ldr	r3, [pc, #544]	; (8006c78 <HAL_RCC_OscConfig+0x270>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0302 	and.w	r3, r3, #2
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d005      	beq.n	8006a6c <HAL_RCC_OscConfig+0x64>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d101      	bne.n	8006a6c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e3df      	b.n	800722c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6a1a      	ldr	r2, [r3, #32]
 8006a70:	4b81      	ldr	r3, [pc, #516]	; (8006c78 <HAL_RCC_OscConfig+0x270>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0308 	and.w	r3, r3, #8
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d004      	beq.n	8006a86 <HAL_RCC_OscConfig+0x7e>
 8006a7c:	4b7e      	ldr	r3, [pc, #504]	; (8006c78 <HAL_RCC_OscConfig+0x270>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a84:	e005      	b.n	8006a92 <HAL_RCC_OscConfig+0x8a>
 8006a86:	4b7c      	ldr	r3, [pc, #496]	; (8006c78 <HAL_RCC_OscConfig+0x270>)
 8006a88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a8c:	091b      	lsrs	r3, r3, #4
 8006a8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d223      	bcs.n	8006ade <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a1b      	ldr	r3, [r3, #32]
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f000 fdfe 	bl	800769c <RCC_SetFlashLatencyFromMSIRange>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d001      	beq.n	8006aaa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e3c0      	b.n	800722c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006aaa:	4b73      	ldr	r3, [pc, #460]	; (8006c78 <HAL_RCC_OscConfig+0x270>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a72      	ldr	r2, [pc, #456]	; (8006c78 <HAL_RCC_OscConfig+0x270>)
 8006ab0:	f043 0308 	orr.w	r3, r3, #8
 8006ab4:	6013      	str	r3, [r2, #0]
 8006ab6:	4b70      	ldr	r3, [pc, #448]	; (8006c78 <HAL_RCC_OscConfig+0x270>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
 8006ac2:	496d      	ldr	r1, [pc, #436]	; (8006c78 <HAL_RCC_OscConfig+0x270>)
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006ac8:	4b6b      	ldr	r3, [pc, #428]	; (8006c78 <HAL_RCC_OscConfig+0x270>)
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	69db      	ldr	r3, [r3, #28]
 8006ad4:	021b      	lsls	r3, r3, #8
 8006ad6:	4968      	ldr	r1, [pc, #416]	; (8006c78 <HAL_RCC_OscConfig+0x270>)
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	604b      	str	r3, [r1, #4]
 8006adc:	e025      	b.n	8006b2a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006ade:	4b66      	ldr	r3, [pc, #408]	; (8006c78 <HAL_RCC_OscConfig+0x270>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a65      	ldr	r2, [pc, #404]	; (8006c78 <HAL_RCC_OscConfig+0x270>)
 8006ae4:	f043 0308 	orr.w	r3, r3, #8
 8006ae8:	6013      	str	r3, [r2, #0]
 8006aea:	4b63      	ldr	r3, [pc, #396]	; (8006c78 <HAL_RCC_OscConfig+0x270>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a1b      	ldr	r3, [r3, #32]
 8006af6:	4960      	ldr	r1, [pc, #384]	; (8006c78 <HAL_RCC_OscConfig+0x270>)
 8006af8:	4313      	orrs	r3, r2
 8006afa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006afc:	4b5e      	ldr	r3, [pc, #376]	; (8006c78 <HAL_RCC_OscConfig+0x270>)
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	69db      	ldr	r3, [r3, #28]
 8006b08:	021b      	lsls	r3, r3, #8
 8006b0a:	495b      	ldr	r1, [pc, #364]	; (8006c78 <HAL_RCC_OscConfig+0x270>)
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d109      	bne.n	8006b2a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a1b      	ldr	r3, [r3, #32]
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 fdbe 	bl	800769c <RCC_SetFlashLatencyFromMSIRange>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d001      	beq.n	8006b2a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e380      	b.n	800722c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006b2a:	f000 fcc1 	bl	80074b0 <HAL_RCC_GetSysClockFreq>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	4b51      	ldr	r3, [pc, #324]	; (8006c78 <HAL_RCC_OscConfig+0x270>)
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	091b      	lsrs	r3, r3, #4
 8006b36:	f003 030f 	and.w	r3, r3, #15
 8006b3a:	4950      	ldr	r1, [pc, #320]	; (8006c7c <HAL_RCC_OscConfig+0x274>)
 8006b3c:	5ccb      	ldrb	r3, [r1, r3]
 8006b3e:	f003 031f 	and.w	r3, r3, #31
 8006b42:	fa22 f303 	lsr.w	r3, r2, r3
 8006b46:	4a4e      	ldr	r2, [pc, #312]	; (8006c80 <HAL_RCC_OscConfig+0x278>)
 8006b48:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006b4a:	4b4e      	ldr	r3, [pc, #312]	; (8006c84 <HAL_RCC_OscConfig+0x27c>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7fc fdac 	bl	80036ac <HAL_InitTick>
 8006b54:	4603      	mov	r3, r0
 8006b56:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006b58:	7bfb      	ldrb	r3, [r7, #15]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d052      	beq.n	8006c04 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006b5e:	7bfb      	ldrb	r3, [r7, #15]
 8006b60:	e364      	b.n	800722c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	699b      	ldr	r3, [r3, #24]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d032      	beq.n	8006bd0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006b6a:	4b43      	ldr	r3, [pc, #268]	; (8006c78 <HAL_RCC_OscConfig+0x270>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a42      	ldr	r2, [pc, #264]	; (8006c78 <HAL_RCC_OscConfig+0x270>)
 8006b70:	f043 0301 	orr.w	r3, r3, #1
 8006b74:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006b76:	f7fc ff09 	bl	800398c <HAL_GetTick>
 8006b7a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006b7c:	e008      	b.n	8006b90 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006b7e:	f7fc ff05 	bl	800398c <HAL_GetTick>
 8006b82:	4602      	mov	r2, r0
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	1ad3      	subs	r3, r2, r3
 8006b88:	2b02      	cmp	r3, #2
 8006b8a:	d901      	bls.n	8006b90 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	e34d      	b.n	800722c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006b90:	4b39      	ldr	r3, [pc, #228]	; (8006c78 <HAL_RCC_OscConfig+0x270>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0302 	and.w	r3, r3, #2
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d0f0      	beq.n	8006b7e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006b9c:	4b36      	ldr	r3, [pc, #216]	; (8006c78 <HAL_RCC_OscConfig+0x270>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a35      	ldr	r2, [pc, #212]	; (8006c78 <HAL_RCC_OscConfig+0x270>)
 8006ba2:	f043 0308 	orr.w	r3, r3, #8
 8006ba6:	6013      	str	r3, [r2, #0]
 8006ba8:	4b33      	ldr	r3, [pc, #204]	; (8006c78 <HAL_RCC_OscConfig+0x270>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6a1b      	ldr	r3, [r3, #32]
 8006bb4:	4930      	ldr	r1, [pc, #192]	; (8006c78 <HAL_RCC_OscConfig+0x270>)
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006bba:	4b2f      	ldr	r3, [pc, #188]	; (8006c78 <HAL_RCC_OscConfig+0x270>)
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	69db      	ldr	r3, [r3, #28]
 8006bc6:	021b      	lsls	r3, r3, #8
 8006bc8:	492b      	ldr	r1, [pc, #172]	; (8006c78 <HAL_RCC_OscConfig+0x270>)
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	604b      	str	r3, [r1, #4]
 8006bce:	e01a      	b.n	8006c06 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006bd0:	4b29      	ldr	r3, [pc, #164]	; (8006c78 <HAL_RCC_OscConfig+0x270>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a28      	ldr	r2, [pc, #160]	; (8006c78 <HAL_RCC_OscConfig+0x270>)
 8006bd6:	f023 0301 	bic.w	r3, r3, #1
 8006bda:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006bdc:	f7fc fed6 	bl	800398c <HAL_GetTick>
 8006be0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006be2:	e008      	b.n	8006bf6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006be4:	f7fc fed2 	bl	800398c <HAL_GetTick>
 8006be8:	4602      	mov	r2, r0
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	d901      	bls.n	8006bf6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	e31a      	b.n	800722c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006bf6:	4b20      	ldr	r3, [pc, #128]	; (8006c78 <HAL_RCC_OscConfig+0x270>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 0302 	and.w	r3, r3, #2
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1f0      	bne.n	8006be4 <HAL_RCC_OscConfig+0x1dc>
 8006c02:	e000      	b.n	8006c06 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006c04:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d073      	beq.n	8006cfa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	2b08      	cmp	r3, #8
 8006c16:	d005      	beq.n	8006c24 <HAL_RCC_OscConfig+0x21c>
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	2b0c      	cmp	r3, #12
 8006c1c:	d10e      	bne.n	8006c3c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	2b03      	cmp	r3, #3
 8006c22:	d10b      	bne.n	8006c3c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c24:	4b14      	ldr	r3, [pc, #80]	; (8006c78 <HAL_RCC_OscConfig+0x270>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d063      	beq.n	8006cf8 <HAL_RCC_OscConfig+0x2f0>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d15f      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e2f7      	b.n	800722c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c44:	d106      	bne.n	8006c54 <HAL_RCC_OscConfig+0x24c>
 8006c46:	4b0c      	ldr	r3, [pc, #48]	; (8006c78 <HAL_RCC_OscConfig+0x270>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a0b      	ldr	r2, [pc, #44]	; (8006c78 <HAL_RCC_OscConfig+0x270>)
 8006c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c50:	6013      	str	r3, [r2, #0]
 8006c52:	e025      	b.n	8006ca0 <HAL_RCC_OscConfig+0x298>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c5c:	d114      	bne.n	8006c88 <HAL_RCC_OscConfig+0x280>
 8006c5e:	4b06      	ldr	r3, [pc, #24]	; (8006c78 <HAL_RCC_OscConfig+0x270>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a05      	ldr	r2, [pc, #20]	; (8006c78 <HAL_RCC_OscConfig+0x270>)
 8006c64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c68:	6013      	str	r3, [r2, #0]
 8006c6a:	4b03      	ldr	r3, [pc, #12]	; (8006c78 <HAL_RCC_OscConfig+0x270>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a02      	ldr	r2, [pc, #8]	; (8006c78 <HAL_RCC_OscConfig+0x270>)
 8006c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c74:	6013      	str	r3, [r2, #0]
 8006c76:	e013      	b.n	8006ca0 <HAL_RCC_OscConfig+0x298>
 8006c78:	40021000 	.word	0x40021000
 8006c7c:	0800ad14 	.word	0x0800ad14
 8006c80:	2000003c 	.word	0x2000003c
 8006c84:	20000040 	.word	0x20000040
 8006c88:	4ba0      	ldr	r3, [pc, #640]	; (8006f0c <HAL_RCC_OscConfig+0x504>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a9f      	ldr	r2, [pc, #636]	; (8006f0c <HAL_RCC_OscConfig+0x504>)
 8006c8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c92:	6013      	str	r3, [r2, #0]
 8006c94:	4b9d      	ldr	r3, [pc, #628]	; (8006f0c <HAL_RCC_OscConfig+0x504>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a9c      	ldr	r2, [pc, #624]	; (8006f0c <HAL_RCC_OscConfig+0x504>)
 8006c9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d013      	beq.n	8006cd0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ca8:	f7fc fe70 	bl	800398c <HAL_GetTick>
 8006cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006cae:	e008      	b.n	8006cc2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cb0:	f7fc fe6c 	bl	800398c <HAL_GetTick>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	2b64      	cmp	r3, #100	; 0x64
 8006cbc:	d901      	bls.n	8006cc2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e2b4      	b.n	800722c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006cc2:	4b92      	ldr	r3, [pc, #584]	; (8006f0c <HAL_RCC_OscConfig+0x504>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d0f0      	beq.n	8006cb0 <HAL_RCC_OscConfig+0x2a8>
 8006cce:	e014      	b.n	8006cfa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cd0:	f7fc fe5c 	bl	800398c <HAL_GetTick>
 8006cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006cd6:	e008      	b.n	8006cea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cd8:	f7fc fe58 	bl	800398c <HAL_GetTick>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	2b64      	cmp	r3, #100	; 0x64
 8006ce4:	d901      	bls.n	8006cea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e2a0      	b.n	800722c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006cea:	4b88      	ldr	r3, [pc, #544]	; (8006f0c <HAL_RCC_OscConfig+0x504>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1f0      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x2d0>
 8006cf6:	e000      	b.n	8006cfa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0302 	and.w	r3, r3, #2
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d060      	beq.n	8006dc8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	2b04      	cmp	r3, #4
 8006d0a:	d005      	beq.n	8006d18 <HAL_RCC_OscConfig+0x310>
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	2b0c      	cmp	r3, #12
 8006d10:	d119      	bne.n	8006d46 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	d116      	bne.n	8006d46 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d18:	4b7c      	ldr	r3, [pc, #496]	; (8006f0c <HAL_RCC_OscConfig+0x504>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d005      	beq.n	8006d30 <HAL_RCC_OscConfig+0x328>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d101      	bne.n	8006d30 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e27d      	b.n	800722c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d30:	4b76      	ldr	r3, [pc, #472]	; (8006f0c <HAL_RCC_OscConfig+0x504>)
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	061b      	lsls	r3, r3, #24
 8006d3e:	4973      	ldr	r1, [pc, #460]	; (8006f0c <HAL_RCC_OscConfig+0x504>)
 8006d40:	4313      	orrs	r3, r2
 8006d42:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d44:	e040      	b.n	8006dc8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d023      	beq.n	8006d96 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d4e:	4b6f      	ldr	r3, [pc, #444]	; (8006f0c <HAL_RCC_OscConfig+0x504>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a6e      	ldr	r2, [pc, #440]	; (8006f0c <HAL_RCC_OscConfig+0x504>)
 8006d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d5a:	f7fc fe17 	bl	800398c <HAL_GetTick>
 8006d5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d60:	e008      	b.n	8006d74 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d62:	f7fc fe13 	bl	800398c <HAL_GetTick>
 8006d66:	4602      	mov	r2, r0
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	d901      	bls.n	8006d74 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006d70:	2303      	movs	r3, #3
 8006d72:	e25b      	b.n	800722c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d74:	4b65      	ldr	r3, [pc, #404]	; (8006f0c <HAL_RCC_OscConfig+0x504>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d0f0      	beq.n	8006d62 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d80:	4b62      	ldr	r3, [pc, #392]	; (8006f0c <HAL_RCC_OscConfig+0x504>)
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	061b      	lsls	r3, r3, #24
 8006d8e:	495f      	ldr	r1, [pc, #380]	; (8006f0c <HAL_RCC_OscConfig+0x504>)
 8006d90:	4313      	orrs	r3, r2
 8006d92:	604b      	str	r3, [r1, #4]
 8006d94:	e018      	b.n	8006dc8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d96:	4b5d      	ldr	r3, [pc, #372]	; (8006f0c <HAL_RCC_OscConfig+0x504>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a5c      	ldr	r2, [pc, #368]	; (8006f0c <HAL_RCC_OscConfig+0x504>)
 8006d9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006da0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006da2:	f7fc fdf3 	bl	800398c <HAL_GetTick>
 8006da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006da8:	e008      	b.n	8006dbc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006daa:	f7fc fdef 	bl	800398c <HAL_GetTick>
 8006dae:	4602      	mov	r2, r0
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	d901      	bls.n	8006dbc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006db8:	2303      	movs	r3, #3
 8006dba:	e237      	b.n	800722c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006dbc:	4b53      	ldr	r3, [pc, #332]	; (8006f0c <HAL_RCC_OscConfig+0x504>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1f0      	bne.n	8006daa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0308 	and.w	r3, r3, #8
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d03c      	beq.n	8006e4e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	695b      	ldr	r3, [r3, #20]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d01c      	beq.n	8006e16 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ddc:	4b4b      	ldr	r3, [pc, #300]	; (8006f0c <HAL_RCC_OscConfig+0x504>)
 8006dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006de2:	4a4a      	ldr	r2, [pc, #296]	; (8006f0c <HAL_RCC_OscConfig+0x504>)
 8006de4:	f043 0301 	orr.w	r3, r3, #1
 8006de8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dec:	f7fc fdce 	bl	800398c <HAL_GetTick>
 8006df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006df2:	e008      	b.n	8006e06 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006df4:	f7fc fdca 	bl	800398c <HAL_GetTick>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	1ad3      	subs	r3, r2, r3
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d901      	bls.n	8006e06 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006e02:	2303      	movs	r3, #3
 8006e04:	e212      	b.n	800722c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006e06:	4b41      	ldr	r3, [pc, #260]	; (8006f0c <HAL_RCC_OscConfig+0x504>)
 8006e08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e0c:	f003 0302 	and.w	r3, r3, #2
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d0ef      	beq.n	8006df4 <HAL_RCC_OscConfig+0x3ec>
 8006e14:	e01b      	b.n	8006e4e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e16:	4b3d      	ldr	r3, [pc, #244]	; (8006f0c <HAL_RCC_OscConfig+0x504>)
 8006e18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e1c:	4a3b      	ldr	r2, [pc, #236]	; (8006f0c <HAL_RCC_OscConfig+0x504>)
 8006e1e:	f023 0301 	bic.w	r3, r3, #1
 8006e22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e26:	f7fc fdb1 	bl	800398c <HAL_GetTick>
 8006e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006e2c:	e008      	b.n	8006e40 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e2e:	f7fc fdad 	bl	800398c <HAL_GetTick>
 8006e32:	4602      	mov	r2, r0
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	1ad3      	subs	r3, r2, r3
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d901      	bls.n	8006e40 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e1f5      	b.n	800722c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006e40:	4b32      	ldr	r3, [pc, #200]	; (8006f0c <HAL_RCC_OscConfig+0x504>)
 8006e42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e46:	f003 0302 	and.w	r3, r3, #2
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1ef      	bne.n	8006e2e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0304 	and.w	r3, r3, #4
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f000 80a6 	beq.w	8006fa8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006e60:	4b2a      	ldr	r3, [pc, #168]	; (8006f0c <HAL_RCC_OscConfig+0x504>)
 8006e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d10d      	bne.n	8006e88 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e6c:	4b27      	ldr	r3, [pc, #156]	; (8006f0c <HAL_RCC_OscConfig+0x504>)
 8006e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e70:	4a26      	ldr	r2, [pc, #152]	; (8006f0c <HAL_RCC_OscConfig+0x504>)
 8006e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e76:	6593      	str	r3, [r2, #88]	; 0x58
 8006e78:	4b24      	ldr	r3, [pc, #144]	; (8006f0c <HAL_RCC_OscConfig+0x504>)
 8006e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e80:	60bb      	str	r3, [r7, #8]
 8006e82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e84:	2301      	movs	r3, #1
 8006e86:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e88:	4b21      	ldr	r3, [pc, #132]	; (8006f10 <HAL_RCC_OscConfig+0x508>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d118      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e94:	4b1e      	ldr	r3, [pc, #120]	; (8006f10 <HAL_RCC_OscConfig+0x508>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a1d      	ldr	r2, [pc, #116]	; (8006f10 <HAL_RCC_OscConfig+0x508>)
 8006e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ea0:	f7fc fd74 	bl	800398c <HAL_GetTick>
 8006ea4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ea6:	e008      	b.n	8006eba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ea8:	f7fc fd70 	bl	800398c <HAL_GetTick>
 8006eac:	4602      	mov	r2, r0
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	d901      	bls.n	8006eba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	e1b8      	b.n	800722c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006eba:	4b15      	ldr	r3, [pc, #84]	; (8006f10 <HAL_RCC_OscConfig+0x508>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d0f0      	beq.n	8006ea8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d108      	bne.n	8006ee0 <HAL_RCC_OscConfig+0x4d8>
 8006ece:	4b0f      	ldr	r3, [pc, #60]	; (8006f0c <HAL_RCC_OscConfig+0x504>)
 8006ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ed4:	4a0d      	ldr	r2, [pc, #52]	; (8006f0c <HAL_RCC_OscConfig+0x504>)
 8006ed6:	f043 0301 	orr.w	r3, r3, #1
 8006eda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006ede:	e029      	b.n	8006f34 <HAL_RCC_OscConfig+0x52c>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	2b05      	cmp	r3, #5
 8006ee6:	d115      	bne.n	8006f14 <HAL_RCC_OscConfig+0x50c>
 8006ee8:	4b08      	ldr	r3, [pc, #32]	; (8006f0c <HAL_RCC_OscConfig+0x504>)
 8006eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eee:	4a07      	ldr	r2, [pc, #28]	; (8006f0c <HAL_RCC_OscConfig+0x504>)
 8006ef0:	f043 0304 	orr.w	r3, r3, #4
 8006ef4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006ef8:	4b04      	ldr	r3, [pc, #16]	; (8006f0c <HAL_RCC_OscConfig+0x504>)
 8006efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006efe:	4a03      	ldr	r2, [pc, #12]	; (8006f0c <HAL_RCC_OscConfig+0x504>)
 8006f00:	f043 0301 	orr.w	r3, r3, #1
 8006f04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006f08:	e014      	b.n	8006f34 <HAL_RCC_OscConfig+0x52c>
 8006f0a:	bf00      	nop
 8006f0c:	40021000 	.word	0x40021000
 8006f10:	40007000 	.word	0x40007000
 8006f14:	4b9d      	ldr	r3, [pc, #628]	; (800718c <HAL_RCC_OscConfig+0x784>)
 8006f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f1a:	4a9c      	ldr	r2, [pc, #624]	; (800718c <HAL_RCC_OscConfig+0x784>)
 8006f1c:	f023 0301 	bic.w	r3, r3, #1
 8006f20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006f24:	4b99      	ldr	r3, [pc, #612]	; (800718c <HAL_RCC_OscConfig+0x784>)
 8006f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f2a:	4a98      	ldr	r2, [pc, #608]	; (800718c <HAL_RCC_OscConfig+0x784>)
 8006f2c:	f023 0304 	bic.w	r3, r3, #4
 8006f30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d016      	beq.n	8006f6a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f3c:	f7fc fd26 	bl	800398c <HAL_GetTick>
 8006f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f42:	e00a      	b.n	8006f5a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f44:	f7fc fd22 	bl	800398c <HAL_GetTick>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	1ad3      	subs	r3, r2, r3
 8006f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d901      	bls.n	8006f5a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e168      	b.n	800722c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f5a:	4b8c      	ldr	r3, [pc, #560]	; (800718c <HAL_RCC_OscConfig+0x784>)
 8006f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f60:	f003 0302 	and.w	r3, r3, #2
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d0ed      	beq.n	8006f44 <HAL_RCC_OscConfig+0x53c>
 8006f68:	e015      	b.n	8006f96 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f6a:	f7fc fd0f 	bl	800398c <HAL_GetTick>
 8006f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006f70:	e00a      	b.n	8006f88 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f72:	f7fc fd0b 	bl	800398c <HAL_GetTick>
 8006f76:	4602      	mov	r2, r0
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d901      	bls.n	8006f88 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006f84:	2303      	movs	r3, #3
 8006f86:	e151      	b.n	800722c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006f88:	4b80      	ldr	r3, [pc, #512]	; (800718c <HAL_RCC_OscConfig+0x784>)
 8006f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f8e:	f003 0302 	and.w	r3, r3, #2
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d1ed      	bne.n	8006f72 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f96:	7ffb      	ldrb	r3, [r7, #31]
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d105      	bne.n	8006fa8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f9c:	4b7b      	ldr	r3, [pc, #492]	; (800718c <HAL_RCC_OscConfig+0x784>)
 8006f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fa0:	4a7a      	ldr	r2, [pc, #488]	; (800718c <HAL_RCC_OscConfig+0x784>)
 8006fa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fa6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 0320 	and.w	r3, r3, #32
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d03c      	beq.n	800702e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d01c      	beq.n	8006ff6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006fbc:	4b73      	ldr	r3, [pc, #460]	; (800718c <HAL_RCC_OscConfig+0x784>)
 8006fbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006fc2:	4a72      	ldr	r2, [pc, #456]	; (800718c <HAL_RCC_OscConfig+0x784>)
 8006fc4:	f043 0301 	orr.w	r3, r3, #1
 8006fc8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fcc:	f7fc fcde 	bl	800398c <HAL_GetTick>
 8006fd0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006fd2:	e008      	b.n	8006fe6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006fd4:	f7fc fcda 	bl	800398c <HAL_GetTick>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d901      	bls.n	8006fe6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	e122      	b.n	800722c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006fe6:	4b69      	ldr	r3, [pc, #420]	; (800718c <HAL_RCC_OscConfig+0x784>)
 8006fe8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006fec:	f003 0302 	and.w	r3, r3, #2
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d0ef      	beq.n	8006fd4 <HAL_RCC_OscConfig+0x5cc>
 8006ff4:	e01b      	b.n	800702e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006ff6:	4b65      	ldr	r3, [pc, #404]	; (800718c <HAL_RCC_OscConfig+0x784>)
 8006ff8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ffc:	4a63      	ldr	r2, [pc, #396]	; (800718c <HAL_RCC_OscConfig+0x784>)
 8006ffe:	f023 0301 	bic.w	r3, r3, #1
 8007002:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007006:	f7fc fcc1 	bl	800398c <HAL_GetTick>
 800700a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800700c:	e008      	b.n	8007020 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800700e:	f7fc fcbd 	bl	800398c <HAL_GetTick>
 8007012:	4602      	mov	r2, r0
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	2b02      	cmp	r3, #2
 800701a:	d901      	bls.n	8007020 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800701c:	2303      	movs	r3, #3
 800701e:	e105      	b.n	800722c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007020:	4b5a      	ldr	r3, [pc, #360]	; (800718c <HAL_RCC_OscConfig+0x784>)
 8007022:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007026:	f003 0302 	and.w	r3, r3, #2
 800702a:	2b00      	cmp	r3, #0
 800702c:	d1ef      	bne.n	800700e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007032:	2b00      	cmp	r3, #0
 8007034:	f000 80f9 	beq.w	800722a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800703c:	2b02      	cmp	r3, #2
 800703e:	f040 80cf 	bne.w	80071e0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007042:	4b52      	ldr	r3, [pc, #328]	; (800718c <HAL_RCC_OscConfig+0x784>)
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	f003 0203 	and.w	r2, r3, #3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007052:	429a      	cmp	r2, r3
 8007054:	d12c      	bne.n	80070b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007060:	3b01      	subs	r3, #1
 8007062:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007064:	429a      	cmp	r2, r3
 8007066:	d123      	bne.n	80070b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007072:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007074:	429a      	cmp	r2, r3
 8007076:	d11b      	bne.n	80070b0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007082:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007084:	429a      	cmp	r2, r3
 8007086:	d113      	bne.n	80070b0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007092:	085b      	lsrs	r3, r3, #1
 8007094:	3b01      	subs	r3, #1
 8007096:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007098:	429a      	cmp	r2, r3
 800709a:	d109      	bne.n	80070b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a6:	085b      	lsrs	r3, r3, #1
 80070a8:	3b01      	subs	r3, #1
 80070aa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d071      	beq.n	8007194 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	2b0c      	cmp	r3, #12
 80070b4:	d068      	beq.n	8007188 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80070b6:	4b35      	ldr	r3, [pc, #212]	; (800718c <HAL_RCC_OscConfig+0x784>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d105      	bne.n	80070ce <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80070c2:	4b32      	ldr	r3, [pc, #200]	; (800718c <HAL_RCC_OscConfig+0x784>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d001      	beq.n	80070d2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e0ac      	b.n	800722c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80070d2:	4b2e      	ldr	r3, [pc, #184]	; (800718c <HAL_RCC_OscConfig+0x784>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a2d      	ldr	r2, [pc, #180]	; (800718c <HAL_RCC_OscConfig+0x784>)
 80070d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070dc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80070de:	f7fc fc55 	bl	800398c <HAL_GetTick>
 80070e2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80070e4:	e008      	b.n	80070f8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070e6:	f7fc fc51 	bl	800398c <HAL_GetTick>
 80070ea:	4602      	mov	r2, r0
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d901      	bls.n	80070f8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80070f4:	2303      	movs	r3, #3
 80070f6:	e099      	b.n	800722c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80070f8:	4b24      	ldr	r3, [pc, #144]	; (800718c <HAL_RCC_OscConfig+0x784>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1f0      	bne.n	80070e6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007104:	4b21      	ldr	r3, [pc, #132]	; (800718c <HAL_RCC_OscConfig+0x784>)
 8007106:	68da      	ldr	r2, [r3, #12]
 8007108:	4b21      	ldr	r3, [pc, #132]	; (8007190 <HAL_RCC_OscConfig+0x788>)
 800710a:	4013      	ands	r3, r2
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007114:	3a01      	subs	r2, #1
 8007116:	0112      	lsls	r2, r2, #4
 8007118:	4311      	orrs	r1, r2
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800711e:	0212      	lsls	r2, r2, #8
 8007120:	4311      	orrs	r1, r2
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007126:	0852      	lsrs	r2, r2, #1
 8007128:	3a01      	subs	r2, #1
 800712a:	0552      	lsls	r2, r2, #21
 800712c:	4311      	orrs	r1, r2
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007132:	0852      	lsrs	r2, r2, #1
 8007134:	3a01      	subs	r2, #1
 8007136:	0652      	lsls	r2, r2, #25
 8007138:	4311      	orrs	r1, r2
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800713e:	06d2      	lsls	r2, r2, #27
 8007140:	430a      	orrs	r2, r1
 8007142:	4912      	ldr	r1, [pc, #72]	; (800718c <HAL_RCC_OscConfig+0x784>)
 8007144:	4313      	orrs	r3, r2
 8007146:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007148:	4b10      	ldr	r3, [pc, #64]	; (800718c <HAL_RCC_OscConfig+0x784>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a0f      	ldr	r2, [pc, #60]	; (800718c <HAL_RCC_OscConfig+0x784>)
 800714e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007152:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007154:	4b0d      	ldr	r3, [pc, #52]	; (800718c <HAL_RCC_OscConfig+0x784>)
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	4a0c      	ldr	r2, [pc, #48]	; (800718c <HAL_RCC_OscConfig+0x784>)
 800715a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800715e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007160:	f7fc fc14 	bl	800398c <HAL_GetTick>
 8007164:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007166:	e008      	b.n	800717a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007168:	f7fc fc10 	bl	800398c <HAL_GetTick>
 800716c:	4602      	mov	r2, r0
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	2b02      	cmp	r3, #2
 8007174:	d901      	bls.n	800717a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8007176:	2303      	movs	r3, #3
 8007178:	e058      	b.n	800722c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800717a:	4b04      	ldr	r3, [pc, #16]	; (800718c <HAL_RCC_OscConfig+0x784>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007182:	2b00      	cmp	r3, #0
 8007184:	d0f0      	beq.n	8007168 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007186:	e050      	b.n	800722a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e04f      	b.n	800722c <HAL_RCC_OscConfig+0x824>
 800718c:	40021000 	.word	0x40021000
 8007190:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007194:	4b27      	ldr	r3, [pc, #156]	; (8007234 <HAL_RCC_OscConfig+0x82c>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800719c:	2b00      	cmp	r3, #0
 800719e:	d144      	bne.n	800722a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80071a0:	4b24      	ldr	r3, [pc, #144]	; (8007234 <HAL_RCC_OscConfig+0x82c>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a23      	ldr	r2, [pc, #140]	; (8007234 <HAL_RCC_OscConfig+0x82c>)
 80071a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80071ac:	4b21      	ldr	r3, [pc, #132]	; (8007234 <HAL_RCC_OscConfig+0x82c>)
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	4a20      	ldr	r2, [pc, #128]	; (8007234 <HAL_RCC_OscConfig+0x82c>)
 80071b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80071b8:	f7fc fbe8 	bl	800398c <HAL_GetTick>
 80071bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071be:	e008      	b.n	80071d2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071c0:	f7fc fbe4 	bl	800398c <HAL_GetTick>
 80071c4:	4602      	mov	r2, r0
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	d901      	bls.n	80071d2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e02c      	b.n	800722c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071d2:	4b18      	ldr	r3, [pc, #96]	; (8007234 <HAL_RCC_OscConfig+0x82c>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d0f0      	beq.n	80071c0 <HAL_RCC_OscConfig+0x7b8>
 80071de:	e024      	b.n	800722a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	2b0c      	cmp	r3, #12
 80071e4:	d01f      	beq.n	8007226 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071e6:	4b13      	ldr	r3, [pc, #76]	; (8007234 <HAL_RCC_OscConfig+0x82c>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a12      	ldr	r2, [pc, #72]	; (8007234 <HAL_RCC_OscConfig+0x82c>)
 80071ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071f2:	f7fc fbcb 	bl	800398c <HAL_GetTick>
 80071f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071f8:	e008      	b.n	800720c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071fa:	f7fc fbc7 	bl	800398c <HAL_GetTick>
 80071fe:	4602      	mov	r2, r0
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	2b02      	cmp	r3, #2
 8007206:	d901      	bls.n	800720c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8007208:	2303      	movs	r3, #3
 800720a:	e00f      	b.n	800722c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800720c:	4b09      	ldr	r3, [pc, #36]	; (8007234 <HAL_RCC_OscConfig+0x82c>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007214:	2b00      	cmp	r3, #0
 8007216:	d1f0      	bne.n	80071fa <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007218:	4b06      	ldr	r3, [pc, #24]	; (8007234 <HAL_RCC_OscConfig+0x82c>)
 800721a:	68da      	ldr	r2, [r3, #12]
 800721c:	4905      	ldr	r1, [pc, #20]	; (8007234 <HAL_RCC_OscConfig+0x82c>)
 800721e:	4b06      	ldr	r3, [pc, #24]	; (8007238 <HAL_RCC_OscConfig+0x830>)
 8007220:	4013      	ands	r3, r2
 8007222:	60cb      	str	r3, [r1, #12]
 8007224:	e001      	b.n	800722a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e000      	b.n	800722c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	3720      	adds	r7, #32
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	40021000 	.word	0x40021000
 8007238:	feeefffc 	.word	0xfeeefffc

0800723c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b086      	sub	sp, #24
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007246:	2300      	movs	r3, #0
 8007248:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d101      	bne.n	8007254 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	e11d      	b.n	8007490 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007254:	4b90      	ldr	r3, [pc, #576]	; (8007498 <HAL_RCC_ClockConfig+0x25c>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f003 030f 	and.w	r3, r3, #15
 800725c:	683a      	ldr	r2, [r7, #0]
 800725e:	429a      	cmp	r2, r3
 8007260:	d910      	bls.n	8007284 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007262:	4b8d      	ldr	r3, [pc, #564]	; (8007498 <HAL_RCC_ClockConfig+0x25c>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f023 020f 	bic.w	r2, r3, #15
 800726a:	498b      	ldr	r1, [pc, #556]	; (8007498 <HAL_RCC_ClockConfig+0x25c>)
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	4313      	orrs	r3, r2
 8007270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007272:	4b89      	ldr	r3, [pc, #548]	; (8007498 <HAL_RCC_ClockConfig+0x25c>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f003 030f 	and.w	r3, r3, #15
 800727a:	683a      	ldr	r2, [r7, #0]
 800727c:	429a      	cmp	r2, r3
 800727e:	d001      	beq.n	8007284 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	e105      	b.n	8007490 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f003 0302 	and.w	r3, r3, #2
 800728c:	2b00      	cmp	r3, #0
 800728e:	d010      	beq.n	80072b2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	689a      	ldr	r2, [r3, #8]
 8007294:	4b81      	ldr	r3, [pc, #516]	; (800749c <HAL_RCC_ClockConfig+0x260>)
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800729c:	429a      	cmp	r2, r3
 800729e:	d908      	bls.n	80072b2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072a0:	4b7e      	ldr	r3, [pc, #504]	; (800749c <HAL_RCC_ClockConfig+0x260>)
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	497b      	ldr	r1, [pc, #492]	; (800749c <HAL_RCC_ClockConfig+0x260>)
 80072ae:	4313      	orrs	r3, r2
 80072b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 0301 	and.w	r3, r3, #1
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d079      	beq.n	80073b2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	2b03      	cmp	r3, #3
 80072c4:	d11e      	bne.n	8007304 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80072c6:	4b75      	ldr	r3, [pc, #468]	; (800749c <HAL_RCC_ClockConfig+0x260>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d101      	bne.n	80072d6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e0dc      	b.n	8007490 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80072d6:	f000 fa3b 	bl	8007750 <RCC_GetSysClockFreqFromPLLSource>
 80072da:	4603      	mov	r3, r0
 80072dc:	4a70      	ldr	r2, [pc, #448]	; (80074a0 <HAL_RCC_ClockConfig+0x264>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d946      	bls.n	8007370 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80072e2:	4b6e      	ldr	r3, [pc, #440]	; (800749c <HAL_RCC_ClockConfig+0x260>)
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d140      	bne.n	8007370 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80072ee:	4b6b      	ldr	r3, [pc, #428]	; (800749c <HAL_RCC_ClockConfig+0x260>)
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072f6:	4a69      	ldr	r2, [pc, #420]	; (800749c <HAL_RCC_ClockConfig+0x260>)
 80072f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072fc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80072fe:	2380      	movs	r3, #128	; 0x80
 8007300:	617b      	str	r3, [r7, #20]
 8007302:	e035      	b.n	8007370 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	2b02      	cmp	r3, #2
 800730a:	d107      	bne.n	800731c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800730c:	4b63      	ldr	r3, [pc, #396]	; (800749c <HAL_RCC_ClockConfig+0x260>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007314:	2b00      	cmp	r3, #0
 8007316:	d115      	bne.n	8007344 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	e0b9      	b.n	8007490 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d107      	bne.n	8007334 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007324:	4b5d      	ldr	r3, [pc, #372]	; (800749c <HAL_RCC_ClockConfig+0x260>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 0302 	and.w	r3, r3, #2
 800732c:	2b00      	cmp	r3, #0
 800732e:	d109      	bne.n	8007344 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	e0ad      	b.n	8007490 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007334:	4b59      	ldr	r3, [pc, #356]	; (800749c <HAL_RCC_ClockConfig+0x260>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800733c:	2b00      	cmp	r3, #0
 800733e:	d101      	bne.n	8007344 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	e0a5      	b.n	8007490 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8007344:	f000 f8b4 	bl	80074b0 <HAL_RCC_GetSysClockFreq>
 8007348:	4603      	mov	r3, r0
 800734a:	4a55      	ldr	r2, [pc, #340]	; (80074a0 <HAL_RCC_ClockConfig+0x264>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d90f      	bls.n	8007370 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8007350:	4b52      	ldr	r3, [pc, #328]	; (800749c <HAL_RCC_ClockConfig+0x260>)
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d109      	bne.n	8007370 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800735c:	4b4f      	ldr	r3, [pc, #316]	; (800749c <HAL_RCC_ClockConfig+0x260>)
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007364:	4a4d      	ldr	r2, [pc, #308]	; (800749c <HAL_RCC_ClockConfig+0x260>)
 8007366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800736a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800736c:	2380      	movs	r3, #128	; 0x80
 800736e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007370:	4b4a      	ldr	r3, [pc, #296]	; (800749c <HAL_RCC_ClockConfig+0x260>)
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	f023 0203 	bic.w	r2, r3, #3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	4947      	ldr	r1, [pc, #284]	; (800749c <HAL_RCC_ClockConfig+0x260>)
 800737e:	4313      	orrs	r3, r2
 8007380:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007382:	f7fc fb03 	bl	800398c <HAL_GetTick>
 8007386:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007388:	e00a      	b.n	80073a0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800738a:	f7fc faff 	bl	800398c <HAL_GetTick>
 800738e:	4602      	mov	r2, r0
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	f241 3288 	movw	r2, #5000	; 0x1388
 8007398:	4293      	cmp	r3, r2
 800739a:	d901      	bls.n	80073a0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800739c:	2303      	movs	r3, #3
 800739e:	e077      	b.n	8007490 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073a0:	4b3e      	ldr	r3, [pc, #248]	; (800749c <HAL_RCC_ClockConfig+0x260>)
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	f003 020c 	and.w	r2, r3, #12
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d1eb      	bne.n	800738a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	2b80      	cmp	r3, #128	; 0x80
 80073b6:	d105      	bne.n	80073c4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80073b8:	4b38      	ldr	r3, [pc, #224]	; (800749c <HAL_RCC_ClockConfig+0x260>)
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	4a37      	ldr	r2, [pc, #220]	; (800749c <HAL_RCC_ClockConfig+0x260>)
 80073be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073c2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 0302 	and.w	r3, r3, #2
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d010      	beq.n	80073f2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	689a      	ldr	r2, [r3, #8]
 80073d4:	4b31      	ldr	r3, [pc, #196]	; (800749c <HAL_RCC_ClockConfig+0x260>)
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073dc:	429a      	cmp	r2, r3
 80073de:	d208      	bcs.n	80073f2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073e0:	4b2e      	ldr	r3, [pc, #184]	; (800749c <HAL_RCC_ClockConfig+0x260>)
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	492b      	ldr	r1, [pc, #172]	; (800749c <HAL_RCC_ClockConfig+0x260>)
 80073ee:	4313      	orrs	r3, r2
 80073f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80073f2:	4b29      	ldr	r3, [pc, #164]	; (8007498 <HAL_RCC_ClockConfig+0x25c>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 030f 	and.w	r3, r3, #15
 80073fa:	683a      	ldr	r2, [r7, #0]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d210      	bcs.n	8007422 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007400:	4b25      	ldr	r3, [pc, #148]	; (8007498 <HAL_RCC_ClockConfig+0x25c>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f023 020f 	bic.w	r2, r3, #15
 8007408:	4923      	ldr	r1, [pc, #140]	; (8007498 <HAL_RCC_ClockConfig+0x25c>)
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	4313      	orrs	r3, r2
 800740e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007410:	4b21      	ldr	r3, [pc, #132]	; (8007498 <HAL_RCC_ClockConfig+0x25c>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 030f 	and.w	r3, r3, #15
 8007418:	683a      	ldr	r2, [r7, #0]
 800741a:	429a      	cmp	r2, r3
 800741c:	d001      	beq.n	8007422 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e036      	b.n	8007490 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 0304 	and.w	r3, r3, #4
 800742a:	2b00      	cmp	r3, #0
 800742c:	d008      	beq.n	8007440 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800742e:	4b1b      	ldr	r3, [pc, #108]	; (800749c <HAL_RCC_ClockConfig+0x260>)
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	4918      	ldr	r1, [pc, #96]	; (800749c <HAL_RCC_ClockConfig+0x260>)
 800743c:	4313      	orrs	r3, r2
 800743e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 0308 	and.w	r3, r3, #8
 8007448:	2b00      	cmp	r3, #0
 800744a:	d009      	beq.n	8007460 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800744c:	4b13      	ldr	r3, [pc, #76]	; (800749c <HAL_RCC_ClockConfig+0x260>)
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	00db      	lsls	r3, r3, #3
 800745a:	4910      	ldr	r1, [pc, #64]	; (800749c <HAL_RCC_ClockConfig+0x260>)
 800745c:	4313      	orrs	r3, r2
 800745e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007460:	f000 f826 	bl	80074b0 <HAL_RCC_GetSysClockFreq>
 8007464:	4602      	mov	r2, r0
 8007466:	4b0d      	ldr	r3, [pc, #52]	; (800749c <HAL_RCC_ClockConfig+0x260>)
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	091b      	lsrs	r3, r3, #4
 800746c:	f003 030f 	and.w	r3, r3, #15
 8007470:	490c      	ldr	r1, [pc, #48]	; (80074a4 <HAL_RCC_ClockConfig+0x268>)
 8007472:	5ccb      	ldrb	r3, [r1, r3]
 8007474:	f003 031f 	and.w	r3, r3, #31
 8007478:	fa22 f303 	lsr.w	r3, r2, r3
 800747c:	4a0a      	ldr	r2, [pc, #40]	; (80074a8 <HAL_RCC_ClockConfig+0x26c>)
 800747e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007480:	4b0a      	ldr	r3, [pc, #40]	; (80074ac <HAL_RCC_ClockConfig+0x270>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4618      	mov	r0, r3
 8007486:	f7fc f911 	bl	80036ac <HAL_InitTick>
 800748a:	4603      	mov	r3, r0
 800748c:	73fb      	strb	r3, [r7, #15]

  return status;
 800748e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007490:	4618      	mov	r0, r3
 8007492:	3718      	adds	r7, #24
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	40022000 	.word	0x40022000
 800749c:	40021000 	.word	0x40021000
 80074a0:	04c4b400 	.word	0x04c4b400
 80074a4:	0800ad14 	.word	0x0800ad14
 80074a8:	2000003c 	.word	0x2000003c
 80074ac:	20000040 	.word	0x20000040

080074b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b089      	sub	sp, #36	; 0x24
 80074b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80074b6:	2300      	movs	r3, #0
 80074b8:	61fb      	str	r3, [r7, #28]
 80074ba:	2300      	movs	r3, #0
 80074bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074be:	4b3e      	ldr	r3, [pc, #248]	; (80075b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	f003 030c 	and.w	r3, r3, #12
 80074c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80074c8:	4b3b      	ldr	r3, [pc, #236]	; (80075b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	f003 0303 	and.w	r3, r3, #3
 80074d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d005      	beq.n	80074e4 <HAL_RCC_GetSysClockFreq+0x34>
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	2b0c      	cmp	r3, #12
 80074dc:	d121      	bne.n	8007522 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d11e      	bne.n	8007522 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80074e4:	4b34      	ldr	r3, [pc, #208]	; (80075b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 0308 	and.w	r3, r3, #8
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d107      	bne.n	8007500 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80074f0:	4b31      	ldr	r3, [pc, #196]	; (80075b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80074f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074f6:	0a1b      	lsrs	r3, r3, #8
 80074f8:	f003 030f 	and.w	r3, r3, #15
 80074fc:	61fb      	str	r3, [r7, #28]
 80074fe:	e005      	b.n	800750c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007500:	4b2d      	ldr	r3, [pc, #180]	; (80075b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	091b      	lsrs	r3, r3, #4
 8007506:	f003 030f 	and.w	r3, r3, #15
 800750a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800750c:	4a2b      	ldr	r2, [pc, #172]	; (80075bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007514:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d10d      	bne.n	8007538 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007520:	e00a      	b.n	8007538 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	2b04      	cmp	r3, #4
 8007526:	d102      	bne.n	800752e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007528:	4b25      	ldr	r3, [pc, #148]	; (80075c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800752a:	61bb      	str	r3, [r7, #24]
 800752c:	e004      	b.n	8007538 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	2b08      	cmp	r3, #8
 8007532:	d101      	bne.n	8007538 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007534:	4b23      	ldr	r3, [pc, #140]	; (80075c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8007536:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	2b0c      	cmp	r3, #12
 800753c:	d134      	bne.n	80075a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800753e:	4b1e      	ldr	r3, [pc, #120]	; (80075b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	f003 0303 	and.w	r3, r3, #3
 8007546:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	2b02      	cmp	r3, #2
 800754c:	d003      	beq.n	8007556 <HAL_RCC_GetSysClockFreq+0xa6>
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	2b03      	cmp	r3, #3
 8007552:	d003      	beq.n	800755c <HAL_RCC_GetSysClockFreq+0xac>
 8007554:	e005      	b.n	8007562 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007556:	4b1a      	ldr	r3, [pc, #104]	; (80075c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8007558:	617b      	str	r3, [r7, #20]
      break;
 800755a:	e005      	b.n	8007568 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800755c:	4b19      	ldr	r3, [pc, #100]	; (80075c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800755e:	617b      	str	r3, [r7, #20]
      break;
 8007560:	e002      	b.n	8007568 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	617b      	str	r3, [r7, #20]
      break;
 8007566:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007568:	4b13      	ldr	r3, [pc, #76]	; (80075b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	091b      	lsrs	r3, r3, #4
 800756e:	f003 030f 	and.w	r3, r3, #15
 8007572:	3301      	adds	r3, #1
 8007574:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007576:	4b10      	ldr	r3, [pc, #64]	; (80075b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	0a1b      	lsrs	r3, r3, #8
 800757c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007580:	697a      	ldr	r2, [r7, #20]
 8007582:	fb03 f202 	mul.w	r2, r3, r2
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	fbb2 f3f3 	udiv	r3, r2, r3
 800758c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800758e:	4b0a      	ldr	r3, [pc, #40]	; (80075b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	0e5b      	lsrs	r3, r3, #25
 8007594:	f003 0303 	and.w	r3, r3, #3
 8007598:	3301      	adds	r3, #1
 800759a:	005b      	lsls	r3, r3, #1
 800759c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800759e:	697a      	ldr	r2, [r7, #20]
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80075a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80075a8:	69bb      	ldr	r3, [r7, #24]
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3724      	adds	r7, #36	; 0x24
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop
 80075b8:	40021000 	.word	0x40021000
 80075bc:	0800ad2c 	.word	0x0800ad2c
 80075c0:	00f42400 	.word	0x00f42400
 80075c4:	007a1200 	.word	0x007a1200

080075c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075c8:	b480      	push	{r7}
 80075ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075cc:	4b03      	ldr	r3, [pc, #12]	; (80075dc <HAL_RCC_GetHCLKFreq+0x14>)
 80075ce:	681b      	ldr	r3, [r3, #0]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	2000003c 	.word	0x2000003c

080075e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80075e4:	f7ff fff0 	bl	80075c8 <HAL_RCC_GetHCLKFreq>
 80075e8:	4602      	mov	r2, r0
 80075ea:	4b06      	ldr	r3, [pc, #24]	; (8007604 <HAL_RCC_GetPCLK1Freq+0x24>)
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	0a1b      	lsrs	r3, r3, #8
 80075f0:	f003 0307 	and.w	r3, r3, #7
 80075f4:	4904      	ldr	r1, [pc, #16]	; (8007608 <HAL_RCC_GetPCLK1Freq+0x28>)
 80075f6:	5ccb      	ldrb	r3, [r1, r3]
 80075f8:	f003 031f 	and.w	r3, r3, #31
 80075fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007600:	4618      	mov	r0, r3
 8007602:	bd80      	pop	{r7, pc}
 8007604:	40021000 	.word	0x40021000
 8007608:	0800ad24 	.word	0x0800ad24

0800760c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007610:	f7ff ffda 	bl	80075c8 <HAL_RCC_GetHCLKFreq>
 8007614:	4602      	mov	r2, r0
 8007616:	4b06      	ldr	r3, [pc, #24]	; (8007630 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	0adb      	lsrs	r3, r3, #11
 800761c:	f003 0307 	and.w	r3, r3, #7
 8007620:	4904      	ldr	r1, [pc, #16]	; (8007634 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007622:	5ccb      	ldrb	r3, [r1, r3]
 8007624:	f003 031f 	and.w	r3, r3, #31
 8007628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800762c:	4618      	mov	r0, r3
 800762e:	bd80      	pop	{r7, pc}
 8007630:	40021000 	.word	0x40021000
 8007634:	0800ad24 	.word	0x0800ad24

08007638 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	220f      	movs	r2, #15
 8007646:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8007648:	4b12      	ldr	r3, [pc, #72]	; (8007694 <HAL_RCC_GetClockConfig+0x5c>)
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	f003 0203 	and.w	r2, r3, #3
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8007654:	4b0f      	ldr	r3, [pc, #60]	; (8007694 <HAL_RCC_GetClockConfig+0x5c>)
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007660:	4b0c      	ldr	r3, [pc, #48]	; (8007694 <HAL_RCC_GetClockConfig+0x5c>)
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800766c:	4b09      	ldr	r3, [pc, #36]	; (8007694 <HAL_RCC_GetClockConfig+0x5c>)
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	08db      	lsrs	r3, r3, #3
 8007672:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800767a:	4b07      	ldr	r3, [pc, #28]	; (8007698 <HAL_RCC_GetClockConfig+0x60>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f003 020f 	and.w	r2, r3, #15
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	601a      	str	r2, [r3, #0]
}
 8007686:	bf00      	nop
 8007688:	370c      	adds	r7, #12
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop
 8007694:	40021000 	.word	0x40021000
 8007698:	40022000 	.word	0x40022000

0800769c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b086      	sub	sp, #24
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80076a4:	2300      	movs	r3, #0
 80076a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80076a8:	4b27      	ldr	r3, [pc, #156]	; (8007748 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80076aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d003      	beq.n	80076bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80076b4:	f7ff f8e4 	bl	8006880 <HAL_PWREx_GetVoltageRange>
 80076b8:	6178      	str	r0, [r7, #20]
 80076ba:	e014      	b.n	80076e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80076bc:	4b22      	ldr	r3, [pc, #136]	; (8007748 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80076be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076c0:	4a21      	ldr	r2, [pc, #132]	; (8007748 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80076c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076c6:	6593      	str	r3, [r2, #88]	; 0x58
 80076c8:	4b1f      	ldr	r3, [pc, #124]	; (8007748 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80076ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076d0:	60fb      	str	r3, [r7, #12]
 80076d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80076d4:	f7ff f8d4 	bl	8006880 <HAL_PWREx_GetVoltageRange>
 80076d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80076da:	4b1b      	ldr	r3, [pc, #108]	; (8007748 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80076dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076de:	4a1a      	ldr	r2, [pc, #104]	; (8007748 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80076e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076e4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076ec:	d10b      	bne.n	8007706 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2b80      	cmp	r3, #128	; 0x80
 80076f2:	d913      	bls.n	800771c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2ba0      	cmp	r3, #160	; 0xa0
 80076f8:	d902      	bls.n	8007700 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80076fa:	2302      	movs	r3, #2
 80076fc:	613b      	str	r3, [r7, #16]
 80076fe:	e00d      	b.n	800771c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007700:	2301      	movs	r3, #1
 8007702:	613b      	str	r3, [r7, #16]
 8007704:	e00a      	b.n	800771c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2b7f      	cmp	r3, #127	; 0x7f
 800770a:	d902      	bls.n	8007712 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800770c:	2302      	movs	r3, #2
 800770e:	613b      	str	r3, [r7, #16]
 8007710:	e004      	b.n	800771c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2b70      	cmp	r3, #112	; 0x70
 8007716:	d101      	bne.n	800771c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007718:	2301      	movs	r3, #1
 800771a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800771c:	4b0b      	ldr	r3, [pc, #44]	; (800774c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f023 020f 	bic.w	r2, r3, #15
 8007724:	4909      	ldr	r1, [pc, #36]	; (800774c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	4313      	orrs	r3, r2
 800772a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800772c:	4b07      	ldr	r3, [pc, #28]	; (800774c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 030f 	and.w	r3, r3, #15
 8007734:	693a      	ldr	r2, [r7, #16]
 8007736:	429a      	cmp	r2, r3
 8007738:	d001      	beq.n	800773e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e000      	b.n	8007740 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3718      	adds	r7, #24
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	40021000 	.word	0x40021000
 800774c:	40022000 	.word	0x40022000

08007750 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007750:	b480      	push	{r7}
 8007752:	b087      	sub	sp, #28
 8007754:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007756:	4b2d      	ldr	r3, [pc, #180]	; (800780c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	f003 0303 	and.w	r3, r3, #3
 800775e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2b03      	cmp	r3, #3
 8007764:	d00b      	beq.n	800777e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2b03      	cmp	r3, #3
 800776a:	d825      	bhi.n	80077b8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2b01      	cmp	r3, #1
 8007770:	d008      	beq.n	8007784 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2b02      	cmp	r3, #2
 8007776:	d11f      	bne.n	80077b8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8007778:	4b25      	ldr	r3, [pc, #148]	; (8007810 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800777a:	613b      	str	r3, [r7, #16]
    break;
 800777c:	e01f      	b.n	80077be <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800777e:	4b25      	ldr	r3, [pc, #148]	; (8007814 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8007780:	613b      	str	r3, [r7, #16]
    break;
 8007782:	e01c      	b.n	80077be <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007784:	4b21      	ldr	r3, [pc, #132]	; (800780c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 0308 	and.w	r3, r3, #8
 800778c:	2b00      	cmp	r3, #0
 800778e:	d107      	bne.n	80077a0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007790:	4b1e      	ldr	r3, [pc, #120]	; (800780c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007796:	0a1b      	lsrs	r3, r3, #8
 8007798:	f003 030f 	and.w	r3, r3, #15
 800779c:	617b      	str	r3, [r7, #20]
 800779e:	e005      	b.n	80077ac <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80077a0:	4b1a      	ldr	r3, [pc, #104]	; (800780c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	091b      	lsrs	r3, r3, #4
 80077a6:	f003 030f 	and.w	r3, r3, #15
 80077aa:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80077ac:	4a1a      	ldr	r2, [pc, #104]	; (8007818 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077b4:	613b      	str	r3, [r7, #16]
    break;
 80077b6:	e002      	b.n	80077be <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80077b8:	2300      	movs	r3, #0
 80077ba:	613b      	str	r3, [r7, #16]
    break;
 80077bc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80077be:	4b13      	ldr	r3, [pc, #76]	; (800780c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	091b      	lsrs	r3, r3, #4
 80077c4:	f003 030f 	and.w	r3, r3, #15
 80077c8:	3301      	adds	r3, #1
 80077ca:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80077cc:	4b0f      	ldr	r3, [pc, #60]	; (800780c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	0a1b      	lsrs	r3, r3, #8
 80077d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077d6:	693a      	ldr	r2, [r7, #16]
 80077d8:	fb03 f202 	mul.w	r2, r3, r2
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	fbb2 f3f3 	udiv	r3, r2, r3
 80077e2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80077e4:	4b09      	ldr	r3, [pc, #36]	; (800780c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	0e5b      	lsrs	r3, r3, #25
 80077ea:	f003 0303 	and.w	r3, r3, #3
 80077ee:	3301      	adds	r3, #1
 80077f0:	005b      	lsls	r3, r3, #1
 80077f2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80077f4:	693a      	ldr	r2, [r7, #16]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077fc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80077fe:	683b      	ldr	r3, [r7, #0]
}
 8007800:	4618      	mov	r0, r3
 8007802:	371c      	adds	r7, #28
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr
 800780c:	40021000 	.word	0x40021000
 8007810:	00f42400 	.word	0x00f42400
 8007814:	007a1200 	.word	0x007a1200
 8007818:	0800ad2c 	.word	0x0800ad2c

0800781c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b086      	sub	sp, #24
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007824:	2300      	movs	r3, #0
 8007826:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007828:	2300      	movs	r3, #0
 800782a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007834:	2b00      	cmp	r3, #0
 8007836:	d040      	beq.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800783c:	2b80      	cmp	r3, #128	; 0x80
 800783e:	d02a      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007840:	2b80      	cmp	r3, #128	; 0x80
 8007842:	d825      	bhi.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007844:	2b60      	cmp	r3, #96	; 0x60
 8007846:	d026      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007848:	2b60      	cmp	r3, #96	; 0x60
 800784a:	d821      	bhi.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800784c:	2b40      	cmp	r3, #64	; 0x40
 800784e:	d006      	beq.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8007850:	2b40      	cmp	r3, #64	; 0x40
 8007852:	d81d      	bhi.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007854:	2b00      	cmp	r3, #0
 8007856:	d009      	beq.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8007858:	2b20      	cmp	r3, #32
 800785a:	d010      	beq.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800785c:	e018      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800785e:	4b89      	ldr	r3, [pc, #548]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	4a88      	ldr	r2, [pc, #544]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007868:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800786a:	e015      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	3304      	adds	r3, #4
 8007870:	2100      	movs	r1, #0
 8007872:	4618      	mov	r0, r3
 8007874:	f000 fb12 	bl	8007e9c <RCCEx_PLLSAI1_Config>
 8007878:	4603      	mov	r3, r0
 800787a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800787c:	e00c      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	3320      	adds	r3, #32
 8007882:	2100      	movs	r1, #0
 8007884:	4618      	mov	r0, r3
 8007886:	f000 fbfd 	bl	8008084 <RCCEx_PLLSAI2_Config>
 800788a:	4603      	mov	r3, r0
 800788c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800788e:	e003      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	74fb      	strb	r3, [r7, #19]
      break;
 8007894:	e000      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8007896:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007898:	7cfb      	ldrb	r3, [r7, #19]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d10b      	bne.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800789e:	4b79      	ldr	r3, [pc, #484]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80078a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80078a4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078ac:	4975      	ldr	r1, [pc, #468]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80078ae:	4313      	orrs	r3, r2
 80078b0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80078b4:	e001      	b.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078b6:	7cfb      	ldrb	r3, [r7, #19]
 80078b8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d047      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078ce:	d030      	beq.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80078d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078d4:	d82a      	bhi.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80078d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078da:	d02a      	beq.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80078dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078e0:	d824      	bhi.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80078e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078e6:	d008      	beq.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0xde>
 80078e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078ec:	d81e      	bhi.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00a      	beq.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80078f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078f6:	d010      	beq.n	800791a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80078f8:	e018      	b.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80078fa:	4b62      	ldr	r3, [pc, #392]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	4a61      	ldr	r2, [pc, #388]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007904:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007906:	e015      	b.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	3304      	adds	r3, #4
 800790c:	2100      	movs	r1, #0
 800790e:	4618      	mov	r0, r3
 8007910:	f000 fac4 	bl	8007e9c <RCCEx_PLLSAI1_Config>
 8007914:	4603      	mov	r3, r0
 8007916:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007918:	e00c      	b.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	3320      	adds	r3, #32
 800791e:	2100      	movs	r1, #0
 8007920:	4618      	mov	r0, r3
 8007922:	f000 fbaf 	bl	8008084 <RCCEx_PLLSAI2_Config>
 8007926:	4603      	mov	r3, r0
 8007928:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800792a:	e003      	b.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	74fb      	strb	r3, [r7, #19]
      break;
 8007930:	e000      	b.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8007932:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007934:	7cfb      	ldrb	r3, [r7, #19]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d10b      	bne.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800793a:	4b52      	ldr	r3, [pc, #328]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800793c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007940:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007948:	494e      	ldr	r1, [pc, #312]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800794a:	4313      	orrs	r3, r2
 800794c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8007950:	e001      	b.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007952:	7cfb      	ldrb	r3, [r7, #19]
 8007954:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800795e:	2b00      	cmp	r3, #0
 8007960:	f000 809f 	beq.w	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007964:	2300      	movs	r3, #0
 8007966:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007968:	4b46      	ldr	r3, [pc, #280]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800796a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800796c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007970:	2b00      	cmp	r3, #0
 8007972:	d101      	bne.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007974:	2301      	movs	r3, #1
 8007976:	e000      	b.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8007978:	2300      	movs	r3, #0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d00d      	beq.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800797e:	4b41      	ldr	r3, [pc, #260]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007982:	4a40      	ldr	r2, [pc, #256]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007988:	6593      	str	r3, [r2, #88]	; 0x58
 800798a:	4b3e      	ldr	r3, [pc, #248]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800798c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800798e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007992:	60bb      	str	r3, [r7, #8]
 8007994:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007996:	2301      	movs	r3, #1
 8007998:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800799a:	4b3b      	ldr	r3, [pc, #236]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a3a      	ldr	r2, [pc, #232]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80079a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80079a6:	f7fb fff1 	bl	800398c <HAL_GetTick>
 80079aa:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80079ac:	e009      	b.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079ae:	f7fb ffed 	bl	800398c <HAL_GetTick>
 80079b2:	4602      	mov	r2, r0
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	1ad3      	subs	r3, r2, r3
 80079b8:	2b02      	cmp	r3, #2
 80079ba:	d902      	bls.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80079bc:	2303      	movs	r3, #3
 80079be:	74fb      	strb	r3, [r7, #19]
        break;
 80079c0:	e005      	b.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80079c2:	4b31      	ldr	r3, [pc, #196]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d0ef      	beq.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80079ce:	7cfb      	ldrb	r3, [r7, #19]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d15b      	bne.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80079d4:	4b2b      	ldr	r3, [pc, #172]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80079d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079de:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d01f      	beq.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079ec:	697a      	ldr	r2, [r7, #20]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d019      	beq.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80079f2:	4b24      	ldr	r3, [pc, #144]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80079f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079fc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80079fe:	4b21      	ldr	r3, [pc, #132]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a04:	4a1f      	ldr	r2, [pc, #124]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a0e:	4b1d      	ldr	r3, [pc, #116]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a14:	4a1b      	ldr	r2, [pc, #108]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007a1e:	4a19      	ldr	r2, [pc, #100]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	f003 0301 	and.w	r3, r3, #1
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d016      	beq.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a30:	f7fb ffac 	bl	800398c <HAL_GetTick>
 8007a34:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a36:	e00b      	b.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a38:	f7fb ffa8 	bl	800398c <HAL_GetTick>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d902      	bls.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	74fb      	strb	r3, [r7, #19]
            break;
 8007a4e:	e006      	b.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a50:	4b0c      	ldr	r3, [pc, #48]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a56:	f003 0302 	and.w	r3, r3, #2
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d0ec      	beq.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8007a5e:	7cfb      	ldrb	r3, [r7, #19]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d10c      	bne.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a64:	4b07      	ldr	r3, [pc, #28]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a74:	4903      	ldr	r1, [pc, #12]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a76:	4313      	orrs	r3, r2
 8007a78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007a7c:	e008      	b.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007a7e:	7cfb      	ldrb	r3, [r7, #19]
 8007a80:	74bb      	strb	r3, [r7, #18]
 8007a82:	e005      	b.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8007a84:	40021000 	.word	0x40021000
 8007a88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a8c:	7cfb      	ldrb	r3, [r7, #19]
 8007a8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a90:	7c7b      	ldrb	r3, [r7, #17]
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d105      	bne.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a96:	4ba0      	ldr	r3, [pc, #640]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a9a:	4a9f      	ldr	r2, [pc, #636]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007aa0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f003 0301 	and.w	r3, r3, #1
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00a      	beq.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007aae:	4b9a      	ldr	r3, [pc, #616]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ab4:	f023 0203 	bic.w	r2, r3, #3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007abc:	4996      	ldr	r1, [pc, #600]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f003 0302 	and.w	r3, r3, #2
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00a      	beq.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007ad0:	4b91      	ldr	r3, [pc, #580]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ad6:	f023 020c 	bic.w	r2, r3, #12
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ade:	498e      	ldr	r1, [pc, #568]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f003 0304 	and.w	r3, r3, #4
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00a      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007af2:	4b89      	ldr	r3, [pc, #548]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007af8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b00:	4985      	ldr	r1, [pc, #532]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b02:	4313      	orrs	r3, r2
 8007b04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f003 0308 	and.w	r3, r3, #8
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d00a      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007b14:	4b80      	ldr	r3, [pc, #512]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b1a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b22:	497d      	ldr	r1, [pc, #500]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b24:	4313      	orrs	r3, r2
 8007b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f003 0310 	and.w	r3, r3, #16
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00a      	beq.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007b36:	4b78      	ldr	r3, [pc, #480]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b44:	4974      	ldr	r1, [pc, #464]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b46:	4313      	orrs	r3, r2
 8007b48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 0320 	and.w	r3, r3, #32
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00a      	beq.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007b58:	4b6f      	ldr	r3, [pc, #444]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b5e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b66:	496c      	ldr	r1, [pc, #432]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d00a      	beq.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b7a:	4b67      	ldr	r3, [pc, #412]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b80:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b88:	4963      	ldr	r1, [pc, #396]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d00a      	beq.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007b9c:	4b5e      	ldr	r3, [pc, #376]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ba2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007baa:	495b      	ldr	r1, [pc, #364]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007bac:	4313      	orrs	r3, r2
 8007bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00a      	beq.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007bbe:	4b56      	ldr	r3, [pc, #344]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bc4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bcc:	4952      	ldr	r1, [pc, #328]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d00a      	beq.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007be0:	4b4d      	ldr	r3, [pc, #308]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007be6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bee:	494a      	ldr	r1, [pc, #296]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d00a      	beq.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007c02:	4b45      	ldr	r3, [pc, #276]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c10:	4941      	ldr	r1, [pc, #260]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c12:	4313      	orrs	r3, r2
 8007c14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d00a      	beq.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c24:	4b3c      	ldr	r3, [pc, #240]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c2a:	f023 0203 	bic.w	r2, r3, #3
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c32:	4939      	ldr	r1, [pc, #228]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c34:	4313      	orrs	r3, r2
 8007c36:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d028      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c46:	4b34      	ldr	r3, [pc, #208]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c4c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c54:	4930      	ldr	r1, [pc, #192]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c56:	4313      	orrs	r3, r2
 8007c58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c64:	d106      	bne.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c66:	4b2c      	ldr	r3, [pc, #176]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	4a2b      	ldr	r2, [pc, #172]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c70:	60d3      	str	r3, [r2, #12]
 8007c72:	e011      	b.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c7c:	d10c      	bne.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	3304      	adds	r3, #4
 8007c82:	2101      	movs	r1, #1
 8007c84:	4618      	mov	r0, r3
 8007c86:	f000 f909 	bl	8007e9c <RCCEx_PLLSAI1_Config>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007c8e:	7cfb      	ldrb	r3, [r7, #19]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d001      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8007c94:	7cfb      	ldrb	r3, [r7, #19]
 8007c96:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d04d      	beq.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ca8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cac:	d108      	bne.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8007cae:	4b1a      	ldr	r3, [pc, #104]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007cb4:	4a18      	ldr	r2, [pc, #96]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007cba:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8007cbe:	e012      	b.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8007cc0:	4b15      	ldr	r3, [pc, #84]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007cc6:	4a14      	ldr	r2, [pc, #80]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ccc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8007cd0:	4b11      	ldr	r3, [pc, #68]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cd6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cde:	490e      	ldr	r1, [pc, #56]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cee:	d106      	bne.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cf0:	4b09      	ldr	r3, [pc, #36]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	4a08      	ldr	r2, [pc, #32]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cfa:	60d3      	str	r3, [r2, #12]
 8007cfc:	e020      	b.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d06:	d109      	bne.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007d08:	4b03      	ldr	r3, [pc, #12]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	4a02      	ldr	r2, [pc, #8]	; (8007d18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d12:	60d3      	str	r3, [r2, #12]
 8007d14:	e014      	b.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007d16:	bf00      	nop
 8007d18:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d24:	d10c      	bne.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	3304      	adds	r3, #4
 8007d2a:	2101      	movs	r1, #1
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f000 f8b5 	bl	8007e9c <RCCEx_PLLSAI1_Config>
 8007d32:	4603      	mov	r3, r0
 8007d34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007d36:	7cfb      	ldrb	r3, [r7, #19]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d001      	beq.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8007d3c:	7cfb      	ldrb	r3, [r7, #19]
 8007d3e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d028      	beq.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007d4c:	4b4a      	ldr	r3, [pc, #296]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d5a:	4947      	ldr	r1, [pc, #284]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d6a:	d106      	bne.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d6c:	4b42      	ldr	r3, [pc, #264]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	4a41      	ldr	r2, [pc, #260]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d76:	60d3      	str	r3, [r2, #12]
 8007d78:	e011      	b.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d82:	d10c      	bne.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	3304      	adds	r3, #4
 8007d88:	2101      	movs	r1, #1
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f000 f886 	bl	8007e9c <RCCEx_PLLSAI1_Config>
 8007d90:	4603      	mov	r3, r0
 8007d92:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007d94:	7cfb      	ldrb	r3, [r7, #19]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d001      	beq.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8007d9a:	7cfb      	ldrb	r3, [r7, #19]
 8007d9c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d01e      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007daa:	4b33      	ldr	r3, [pc, #204]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007db0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dba:	492f      	ldr	r1, [pc, #188]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007dcc:	d10c      	bne.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	3304      	adds	r3, #4
 8007dd2:	2102      	movs	r1, #2
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f000 f861 	bl	8007e9c <RCCEx_PLLSAI1_Config>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007dde:	7cfb      	ldrb	r3, [r7, #19]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d001      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8007de4:	7cfb      	ldrb	r3, [r7, #19]
 8007de6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00b      	beq.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007df4:	4b20      	ldr	r3, [pc, #128]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007df6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007dfa:	f023 0204 	bic.w	r2, r3, #4
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e04:	491c      	ldr	r1, [pc, #112]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e06:	4313      	orrs	r3, r2
 8007e08:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d00b      	beq.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007e18:	4b17      	ldr	r3, [pc, #92]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e1e:	f023 0218 	bic.w	r2, r3, #24
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e28:	4913      	ldr	r1, [pc, #76]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d017      	beq.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007e3c:	4b0e      	ldr	r3, [pc, #56]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e4c:	490a      	ldr	r1, [pc, #40]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e5e:	d105      	bne.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e60:	4b05      	ldr	r3, [pc, #20]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	4a04      	ldr	r2, [pc, #16]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e6a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007e6c:	7cbb      	ldrb	r3, [r7, #18]
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3718      	adds	r7, #24
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	40021000 	.word	0x40021000

08007e7c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007e80:	4b05      	ldr	r3, [pc, #20]	; (8007e98 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a04      	ldr	r2, [pc, #16]	; (8007e98 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007e86:	f043 0304 	orr.w	r3, r3, #4
 8007e8a:	6013      	str	r3, [r2, #0]
}
 8007e8c:	bf00      	nop
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	40021000 	.word	0x40021000

08007e9c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007eaa:	4b72      	ldr	r3, [pc, #456]	; (8008074 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	f003 0303 	and.w	r3, r3, #3
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d00e      	beq.n	8007ed4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007eb6:	4b6f      	ldr	r3, [pc, #444]	; (8008074 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	f003 0203 	and.w	r2, r3, #3
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d103      	bne.n	8007ece <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
       ||
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d142      	bne.n	8007f54 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	73fb      	strb	r3, [r7, #15]
 8007ed2:	e03f      	b.n	8007f54 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2b03      	cmp	r3, #3
 8007eda:	d018      	beq.n	8007f0e <RCCEx_PLLSAI1_Config+0x72>
 8007edc:	2b03      	cmp	r3, #3
 8007ede:	d825      	bhi.n	8007f2c <RCCEx_PLLSAI1_Config+0x90>
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d002      	beq.n	8007eea <RCCEx_PLLSAI1_Config+0x4e>
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d009      	beq.n	8007efc <RCCEx_PLLSAI1_Config+0x60>
 8007ee8:	e020      	b.n	8007f2c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007eea:	4b62      	ldr	r3, [pc, #392]	; (8008074 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f003 0302 	and.w	r3, r3, #2
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d11d      	bne.n	8007f32 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007efa:	e01a      	b.n	8007f32 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007efc:	4b5d      	ldr	r3, [pc, #372]	; (8008074 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d116      	bne.n	8007f36 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007f0c:	e013      	b.n	8007f36 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007f0e:	4b59      	ldr	r3, [pc, #356]	; (8008074 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d10f      	bne.n	8007f3a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007f1a:	4b56      	ldr	r3, [pc, #344]	; (8008074 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d109      	bne.n	8007f3a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007f2a:	e006      	b.n	8007f3a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8007f30:	e004      	b.n	8007f3c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007f32:	bf00      	nop
 8007f34:	e002      	b.n	8007f3c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007f36:	bf00      	nop
 8007f38:	e000      	b.n	8007f3c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007f3a:	bf00      	nop
    }

    if(status == HAL_OK)
 8007f3c:	7bfb      	ldrb	r3, [r7, #15]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d108      	bne.n	8007f54 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8007f42:	4b4c      	ldr	r3, [pc, #304]	; (8008074 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	f023 0203 	bic.w	r2, r3, #3
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4949      	ldr	r1, [pc, #292]	; (8008074 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007f50:	4313      	orrs	r3, r2
 8007f52:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007f54:	7bfb      	ldrb	r3, [r7, #15]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	f040 8086 	bne.w	8008068 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007f5c:	4b45      	ldr	r3, [pc, #276]	; (8008074 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a44      	ldr	r2, [pc, #272]	; (8008074 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007f62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007f66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f68:	f7fb fd10 	bl	800398c <HAL_GetTick>
 8007f6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007f6e:	e009      	b.n	8007f84 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007f70:	f7fb fd0c 	bl	800398c <HAL_GetTick>
 8007f74:	4602      	mov	r2, r0
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	2b02      	cmp	r3, #2
 8007f7c:	d902      	bls.n	8007f84 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007f7e:	2303      	movs	r3, #3
 8007f80:	73fb      	strb	r3, [r7, #15]
        break;
 8007f82:	e005      	b.n	8007f90 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007f84:	4b3b      	ldr	r3, [pc, #236]	; (8008074 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d1ef      	bne.n	8007f70 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007f90:	7bfb      	ldrb	r3, [r7, #15]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d168      	bne.n	8008068 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d113      	bne.n	8007fc4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007f9c:	4b35      	ldr	r3, [pc, #212]	; (8008074 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007f9e:	691a      	ldr	r2, [r3, #16]
 8007fa0:	4b35      	ldr	r3, [pc, #212]	; (8008078 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007fa2:	4013      	ands	r3, r2
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	6892      	ldr	r2, [r2, #8]
 8007fa8:	0211      	lsls	r1, r2, #8
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	68d2      	ldr	r2, [r2, #12]
 8007fae:	06d2      	lsls	r2, r2, #27
 8007fb0:	4311      	orrs	r1, r2
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	6852      	ldr	r2, [r2, #4]
 8007fb6:	3a01      	subs	r2, #1
 8007fb8:	0112      	lsls	r2, r2, #4
 8007fba:	430a      	orrs	r2, r1
 8007fbc:	492d      	ldr	r1, [pc, #180]	; (8008074 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	610b      	str	r3, [r1, #16]
 8007fc2:	e02d      	b.n	8008020 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d115      	bne.n	8007ff6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007fca:	4b2a      	ldr	r3, [pc, #168]	; (8008074 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007fcc:	691a      	ldr	r2, [r3, #16]
 8007fce:	4b2b      	ldr	r3, [pc, #172]	; (800807c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007fd0:	4013      	ands	r3, r2
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	6892      	ldr	r2, [r2, #8]
 8007fd6:	0211      	lsls	r1, r2, #8
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	6912      	ldr	r2, [r2, #16]
 8007fdc:	0852      	lsrs	r2, r2, #1
 8007fde:	3a01      	subs	r2, #1
 8007fe0:	0552      	lsls	r2, r2, #21
 8007fe2:	4311      	orrs	r1, r2
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	6852      	ldr	r2, [r2, #4]
 8007fe8:	3a01      	subs	r2, #1
 8007fea:	0112      	lsls	r2, r2, #4
 8007fec:	430a      	orrs	r2, r1
 8007fee:	4921      	ldr	r1, [pc, #132]	; (8008074 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	610b      	str	r3, [r1, #16]
 8007ff4:	e014      	b.n	8008020 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007ff6:	4b1f      	ldr	r3, [pc, #124]	; (8008074 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007ff8:	691a      	ldr	r2, [r3, #16]
 8007ffa:	4b21      	ldr	r3, [pc, #132]	; (8008080 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ffc:	4013      	ands	r3, r2
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	6892      	ldr	r2, [r2, #8]
 8008002:	0211      	lsls	r1, r2, #8
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	6952      	ldr	r2, [r2, #20]
 8008008:	0852      	lsrs	r2, r2, #1
 800800a:	3a01      	subs	r2, #1
 800800c:	0652      	lsls	r2, r2, #25
 800800e:	4311      	orrs	r1, r2
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	6852      	ldr	r2, [r2, #4]
 8008014:	3a01      	subs	r2, #1
 8008016:	0112      	lsls	r2, r2, #4
 8008018:	430a      	orrs	r2, r1
 800801a:	4916      	ldr	r1, [pc, #88]	; (8008074 <RCCEx_PLLSAI1_Config+0x1d8>)
 800801c:	4313      	orrs	r3, r2
 800801e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008020:	4b14      	ldr	r3, [pc, #80]	; (8008074 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a13      	ldr	r2, [pc, #76]	; (8008074 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008026:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800802a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800802c:	f7fb fcae 	bl	800398c <HAL_GetTick>
 8008030:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008032:	e009      	b.n	8008048 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008034:	f7fb fcaa 	bl	800398c <HAL_GetTick>
 8008038:	4602      	mov	r2, r0
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	2b02      	cmp	r3, #2
 8008040:	d902      	bls.n	8008048 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8008042:	2303      	movs	r3, #3
 8008044:	73fb      	strb	r3, [r7, #15]
          break;
 8008046:	e005      	b.n	8008054 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008048:	4b0a      	ldr	r3, [pc, #40]	; (8008074 <RCCEx_PLLSAI1_Config+0x1d8>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008050:	2b00      	cmp	r3, #0
 8008052:	d0ef      	beq.n	8008034 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8008054:	7bfb      	ldrb	r3, [r7, #15]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d106      	bne.n	8008068 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800805a:	4b06      	ldr	r3, [pc, #24]	; (8008074 <RCCEx_PLLSAI1_Config+0x1d8>)
 800805c:	691a      	ldr	r2, [r3, #16]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	699b      	ldr	r3, [r3, #24]
 8008062:	4904      	ldr	r1, [pc, #16]	; (8008074 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008064:	4313      	orrs	r3, r2
 8008066:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008068:	7bfb      	ldrb	r3, [r7, #15]
}
 800806a:	4618      	mov	r0, r3
 800806c:	3710      	adds	r7, #16
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
 8008072:	bf00      	nop
 8008074:	40021000 	.word	0x40021000
 8008078:	07ff800f 	.word	0x07ff800f
 800807c:	ff9f800f 	.word	0xff9f800f
 8008080:	f9ff800f 	.word	0xf9ff800f

08008084 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800808e:	2300      	movs	r3, #0
 8008090:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008092:	4b72      	ldr	r3, [pc, #456]	; (800825c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	f003 0303 	and.w	r3, r3, #3
 800809a:	2b00      	cmp	r3, #0
 800809c:	d00e      	beq.n	80080bc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800809e:	4b6f      	ldr	r3, [pc, #444]	; (800825c <RCCEx_PLLSAI2_Config+0x1d8>)
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	f003 0203 	and.w	r2, r3, #3
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d103      	bne.n	80080b6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
       ||
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d142      	bne.n	800813c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	73fb      	strb	r3, [r7, #15]
 80080ba:	e03f      	b.n	800813c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2b03      	cmp	r3, #3
 80080c2:	d018      	beq.n	80080f6 <RCCEx_PLLSAI2_Config+0x72>
 80080c4:	2b03      	cmp	r3, #3
 80080c6:	d825      	bhi.n	8008114 <RCCEx_PLLSAI2_Config+0x90>
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d002      	beq.n	80080d2 <RCCEx_PLLSAI2_Config+0x4e>
 80080cc:	2b02      	cmp	r3, #2
 80080ce:	d009      	beq.n	80080e4 <RCCEx_PLLSAI2_Config+0x60>
 80080d0:	e020      	b.n	8008114 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80080d2:	4b62      	ldr	r3, [pc, #392]	; (800825c <RCCEx_PLLSAI2_Config+0x1d8>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f003 0302 	and.w	r3, r3, #2
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d11d      	bne.n	800811a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80080e2:	e01a      	b.n	800811a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80080e4:	4b5d      	ldr	r3, [pc, #372]	; (800825c <RCCEx_PLLSAI2_Config+0x1d8>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d116      	bne.n	800811e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80080f4:	e013      	b.n	800811e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80080f6:	4b59      	ldr	r3, [pc, #356]	; (800825c <RCCEx_PLLSAI2_Config+0x1d8>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d10f      	bne.n	8008122 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008102:	4b56      	ldr	r3, [pc, #344]	; (800825c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800810a:	2b00      	cmp	r3, #0
 800810c:	d109      	bne.n	8008122 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008112:	e006      	b.n	8008122 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	73fb      	strb	r3, [r7, #15]
      break;
 8008118:	e004      	b.n	8008124 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800811a:	bf00      	nop
 800811c:	e002      	b.n	8008124 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800811e:	bf00      	nop
 8008120:	e000      	b.n	8008124 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008122:	bf00      	nop
    }

    if(status == HAL_OK)
 8008124:	7bfb      	ldrb	r3, [r7, #15]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d108      	bne.n	800813c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800812a:	4b4c      	ldr	r3, [pc, #304]	; (800825c <RCCEx_PLLSAI2_Config+0x1d8>)
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	f023 0203 	bic.w	r2, r3, #3
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4949      	ldr	r1, [pc, #292]	; (800825c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008138:	4313      	orrs	r3, r2
 800813a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800813c:	7bfb      	ldrb	r3, [r7, #15]
 800813e:	2b00      	cmp	r3, #0
 8008140:	f040 8086 	bne.w	8008250 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008144:	4b45      	ldr	r3, [pc, #276]	; (800825c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a44      	ldr	r2, [pc, #272]	; (800825c <RCCEx_PLLSAI2_Config+0x1d8>)
 800814a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800814e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008150:	f7fb fc1c 	bl	800398c <HAL_GetTick>
 8008154:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008156:	e009      	b.n	800816c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008158:	f7fb fc18 	bl	800398c <HAL_GetTick>
 800815c:	4602      	mov	r2, r0
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	1ad3      	subs	r3, r2, r3
 8008162:	2b02      	cmp	r3, #2
 8008164:	d902      	bls.n	800816c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8008166:	2303      	movs	r3, #3
 8008168:	73fb      	strb	r3, [r7, #15]
        break;
 800816a:	e005      	b.n	8008178 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800816c:	4b3b      	ldr	r3, [pc, #236]	; (800825c <RCCEx_PLLSAI2_Config+0x1d8>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008174:	2b00      	cmp	r3, #0
 8008176:	d1ef      	bne.n	8008158 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8008178:	7bfb      	ldrb	r3, [r7, #15]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d168      	bne.n	8008250 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d113      	bne.n	80081ac <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008184:	4b35      	ldr	r3, [pc, #212]	; (800825c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008186:	695a      	ldr	r2, [r3, #20]
 8008188:	4b35      	ldr	r3, [pc, #212]	; (8008260 <RCCEx_PLLSAI2_Config+0x1dc>)
 800818a:	4013      	ands	r3, r2
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	6892      	ldr	r2, [r2, #8]
 8008190:	0211      	lsls	r1, r2, #8
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	68d2      	ldr	r2, [r2, #12]
 8008196:	06d2      	lsls	r2, r2, #27
 8008198:	4311      	orrs	r1, r2
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	6852      	ldr	r2, [r2, #4]
 800819e:	3a01      	subs	r2, #1
 80081a0:	0112      	lsls	r2, r2, #4
 80081a2:	430a      	orrs	r2, r1
 80081a4:	492d      	ldr	r1, [pc, #180]	; (800825c <RCCEx_PLLSAI2_Config+0x1d8>)
 80081a6:	4313      	orrs	r3, r2
 80081a8:	614b      	str	r3, [r1, #20]
 80081aa:	e02d      	b.n	8008208 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d115      	bne.n	80081de <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80081b2:	4b2a      	ldr	r3, [pc, #168]	; (800825c <RCCEx_PLLSAI2_Config+0x1d8>)
 80081b4:	695a      	ldr	r2, [r3, #20]
 80081b6:	4b2b      	ldr	r3, [pc, #172]	; (8008264 <RCCEx_PLLSAI2_Config+0x1e0>)
 80081b8:	4013      	ands	r3, r2
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	6892      	ldr	r2, [r2, #8]
 80081be:	0211      	lsls	r1, r2, #8
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	6912      	ldr	r2, [r2, #16]
 80081c4:	0852      	lsrs	r2, r2, #1
 80081c6:	3a01      	subs	r2, #1
 80081c8:	0552      	lsls	r2, r2, #21
 80081ca:	4311      	orrs	r1, r2
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	6852      	ldr	r2, [r2, #4]
 80081d0:	3a01      	subs	r2, #1
 80081d2:	0112      	lsls	r2, r2, #4
 80081d4:	430a      	orrs	r2, r1
 80081d6:	4921      	ldr	r1, [pc, #132]	; (800825c <RCCEx_PLLSAI2_Config+0x1d8>)
 80081d8:	4313      	orrs	r3, r2
 80081da:	614b      	str	r3, [r1, #20]
 80081dc:	e014      	b.n	8008208 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80081de:	4b1f      	ldr	r3, [pc, #124]	; (800825c <RCCEx_PLLSAI2_Config+0x1d8>)
 80081e0:	695a      	ldr	r2, [r3, #20]
 80081e2:	4b21      	ldr	r3, [pc, #132]	; (8008268 <RCCEx_PLLSAI2_Config+0x1e4>)
 80081e4:	4013      	ands	r3, r2
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	6892      	ldr	r2, [r2, #8]
 80081ea:	0211      	lsls	r1, r2, #8
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	6952      	ldr	r2, [r2, #20]
 80081f0:	0852      	lsrs	r2, r2, #1
 80081f2:	3a01      	subs	r2, #1
 80081f4:	0652      	lsls	r2, r2, #25
 80081f6:	4311      	orrs	r1, r2
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	6852      	ldr	r2, [r2, #4]
 80081fc:	3a01      	subs	r2, #1
 80081fe:	0112      	lsls	r2, r2, #4
 8008200:	430a      	orrs	r2, r1
 8008202:	4916      	ldr	r1, [pc, #88]	; (800825c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008204:	4313      	orrs	r3, r2
 8008206:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008208:	4b14      	ldr	r3, [pc, #80]	; (800825c <RCCEx_PLLSAI2_Config+0x1d8>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a13      	ldr	r2, [pc, #76]	; (800825c <RCCEx_PLLSAI2_Config+0x1d8>)
 800820e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008212:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008214:	f7fb fbba 	bl	800398c <HAL_GetTick>
 8008218:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800821a:	e009      	b.n	8008230 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800821c:	f7fb fbb6 	bl	800398c <HAL_GetTick>
 8008220:	4602      	mov	r2, r0
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	1ad3      	subs	r3, r2, r3
 8008226:	2b02      	cmp	r3, #2
 8008228:	d902      	bls.n	8008230 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800822a:	2303      	movs	r3, #3
 800822c:	73fb      	strb	r3, [r7, #15]
          break;
 800822e:	e005      	b.n	800823c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008230:	4b0a      	ldr	r3, [pc, #40]	; (800825c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008238:	2b00      	cmp	r3, #0
 800823a:	d0ef      	beq.n	800821c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800823c:	7bfb      	ldrb	r3, [r7, #15]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d106      	bne.n	8008250 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008242:	4b06      	ldr	r3, [pc, #24]	; (800825c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008244:	695a      	ldr	r2, [r3, #20]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	699b      	ldr	r3, [r3, #24]
 800824a:	4904      	ldr	r1, [pc, #16]	; (800825c <RCCEx_PLLSAI2_Config+0x1d8>)
 800824c:	4313      	orrs	r3, r2
 800824e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008250:	7bfb      	ldrb	r3, [r7, #15]
}
 8008252:	4618      	mov	r0, r3
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	40021000 	.word	0x40021000
 8008260:	07ff800f 	.word	0x07ff800f
 8008264:	ff9f800f 	.word	0xff9f800f
 8008268:	f9ff800f 	.word	0xf9ff800f

0800826c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d101      	bne.n	800827e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	e095      	b.n	80083aa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008282:	2b00      	cmp	r3, #0
 8008284:	d108      	bne.n	8008298 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800828e:	d009      	beq.n	80082a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	61da      	str	r2, [r3, #28]
 8008296:	e005      	b.n	80082a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d106      	bne.n	80082c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f7fb f84c 	bl	800335c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2202      	movs	r2, #2
 80082c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80082e4:	d902      	bls.n	80082ec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80082e6:	2300      	movs	r3, #0
 80082e8:	60fb      	str	r3, [r7, #12]
 80082ea:	e002      	b.n	80082f2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80082ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082f0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80082fa:	d007      	beq.n	800830c <HAL_SPI_Init+0xa0>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008304:	d002      	beq.n	800830c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800831c:	431a      	orrs	r2, r3
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	691b      	ldr	r3, [r3, #16]
 8008322:	f003 0302 	and.w	r3, r3, #2
 8008326:	431a      	orrs	r2, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	695b      	ldr	r3, [r3, #20]
 800832c:	f003 0301 	and.w	r3, r3, #1
 8008330:	431a      	orrs	r2, r3
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	699b      	ldr	r3, [r3, #24]
 8008336:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800833a:	431a      	orrs	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	69db      	ldr	r3, [r3, #28]
 8008340:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008344:	431a      	orrs	r2, r3
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6a1b      	ldr	r3, [r3, #32]
 800834a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800834e:	ea42 0103 	orr.w	r1, r2, r3
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008356:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	430a      	orrs	r2, r1
 8008360:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	699b      	ldr	r3, [r3, #24]
 8008366:	0c1b      	lsrs	r3, r3, #16
 8008368:	f003 0204 	and.w	r2, r3, #4
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008370:	f003 0310 	and.w	r3, r3, #16
 8008374:	431a      	orrs	r2, r3
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800837a:	f003 0308 	and.w	r3, r3, #8
 800837e:	431a      	orrs	r2, r3
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008388:	ea42 0103 	orr.w	r1, r2, r3
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	430a      	orrs	r2, r1
 8008398:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80083a8:	2300      	movs	r3, #0
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3710      	adds	r7, #16
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}

080083b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80083b2:	b580      	push	{r7, lr}
 80083b4:	b082      	sub	sp, #8
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d101      	bne.n	80083c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	e049      	b.n	8008458 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d106      	bne.n	80083de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 f841 	bl	8008460 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2202      	movs	r2, #2
 80083e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	3304      	adds	r3, #4
 80083ee:	4619      	mov	r1, r3
 80083f0:	4610      	mov	r0, r2
 80083f2:	f000 f9d9 	bl	80087a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2201      	movs	r2, #1
 80083fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2201      	movs	r2, #1
 8008402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2201      	movs	r2, #1
 800840a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2201      	movs	r2, #1
 8008412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2201      	movs	r2, #1
 800841a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2201      	movs	r2, #1
 8008422:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2201      	movs	r2, #1
 800842a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2201      	movs	r2, #1
 8008432:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2201      	movs	r2, #1
 800843a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2201      	movs	r2, #1
 8008442:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2201      	movs	r2, #1
 800844a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2201      	movs	r2, #1
 8008452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008456:	2300      	movs	r3, #0
}
 8008458:	4618      	mov	r0, r3
 800845a:	3708      	adds	r7, #8
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008468:	bf00      	nop
 800846a:	370c      	adds	r7, #12
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008474:	b480      	push	{r7}
 8008476:	b085      	sub	sp, #20
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008482:	b2db      	uxtb	r3, r3
 8008484:	2b01      	cmp	r3, #1
 8008486:	d001      	beq.n	800848c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	e04f      	b.n	800852c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2202      	movs	r2, #2
 8008490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	68da      	ldr	r2, [r3, #12]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f042 0201 	orr.w	r2, r2, #1
 80084a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a23      	ldr	r2, [pc, #140]	; (8008538 <HAL_TIM_Base_Start_IT+0xc4>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d01d      	beq.n	80084ea <HAL_TIM_Base_Start_IT+0x76>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084b6:	d018      	beq.n	80084ea <HAL_TIM_Base_Start_IT+0x76>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a1f      	ldr	r2, [pc, #124]	; (800853c <HAL_TIM_Base_Start_IT+0xc8>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d013      	beq.n	80084ea <HAL_TIM_Base_Start_IT+0x76>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a1e      	ldr	r2, [pc, #120]	; (8008540 <HAL_TIM_Base_Start_IT+0xcc>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d00e      	beq.n	80084ea <HAL_TIM_Base_Start_IT+0x76>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a1c      	ldr	r2, [pc, #112]	; (8008544 <HAL_TIM_Base_Start_IT+0xd0>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d009      	beq.n	80084ea <HAL_TIM_Base_Start_IT+0x76>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a1b      	ldr	r2, [pc, #108]	; (8008548 <HAL_TIM_Base_Start_IT+0xd4>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d004      	beq.n	80084ea <HAL_TIM_Base_Start_IT+0x76>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a19      	ldr	r2, [pc, #100]	; (800854c <HAL_TIM_Base_Start_IT+0xd8>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d115      	bne.n	8008516 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	689a      	ldr	r2, [r3, #8]
 80084f0:	4b17      	ldr	r3, [pc, #92]	; (8008550 <HAL_TIM_Base_Start_IT+0xdc>)
 80084f2:	4013      	ands	r3, r2
 80084f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2b06      	cmp	r3, #6
 80084fa:	d015      	beq.n	8008528 <HAL_TIM_Base_Start_IT+0xb4>
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008502:	d011      	beq.n	8008528 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f042 0201 	orr.w	r2, r2, #1
 8008512:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008514:	e008      	b.n	8008528 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f042 0201 	orr.w	r2, r2, #1
 8008524:	601a      	str	r2, [r3, #0]
 8008526:	e000      	b.n	800852a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008528:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800852a:	2300      	movs	r3, #0
}
 800852c:	4618      	mov	r0, r3
 800852e:	3714      	adds	r7, #20
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr
 8008538:	40012c00 	.word	0x40012c00
 800853c:	40000400 	.word	0x40000400
 8008540:	40000800 	.word	0x40000800
 8008544:	40000c00 	.word	0x40000c00
 8008548:	40013400 	.word	0x40013400
 800854c:	40014000 	.word	0x40014000
 8008550:	00010007 	.word	0x00010007

08008554 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	691b      	ldr	r3, [r3, #16]
 800856a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	f003 0302 	and.w	r3, r3, #2
 8008572:	2b00      	cmp	r3, #0
 8008574:	d020      	beq.n	80085b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f003 0302 	and.w	r3, r3, #2
 800857c:	2b00      	cmp	r3, #0
 800857e:	d01b      	beq.n	80085b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f06f 0202 	mvn.w	r2, #2
 8008588:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2201      	movs	r2, #1
 800858e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	699b      	ldr	r3, [r3, #24]
 8008596:	f003 0303 	and.w	r3, r3, #3
 800859a:	2b00      	cmp	r3, #0
 800859c:	d003      	beq.n	80085a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 f8e4 	bl	800876c <HAL_TIM_IC_CaptureCallback>
 80085a4:	e005      	b.n	80085b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 f8d6 	bl	8008758 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 f8e7 	bl	8008780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	f003 0304 	and.w	r3, r3, #4
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d020      	beq.n	8008604 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f003 0304 	and.w	r3, r3, #4
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d01b      	beq.n	8008604 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f06f 0204 	mvn.w	r2, #4
 80085d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2202      	movs	r2, #2
 80085da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	699b      	ldr	r3, [r3, #24]
 80085e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d003      	beq.n	80085f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 f8be 	bl	800876c <HAL_TIM_IC_CaptureCallback>
 80085f0:	e005      	b.n	80085fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 f8b0 	bl	8008758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 f8c1 	bl	8008780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	f003 0308 	and.w	r3, r3, #8
 800860a:	2b00      	cmp	r3, #0
 800860c:	d020      	beq.n	8008650 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f003 0308 	and.w	r3, r3, #8
 8008614:	2b00      	cmp	r3, #0
 8008616:	d01b      	beq.n	8008650 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f06f 0208 	mvn.w	r2, #8
 8008620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2204      	movs	r2, #4
 8008626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	69db      	ldr	r3, [r3, #28]
 800862e:	f003 0303 	and.w	r3, r3, #3
 8008632:	2b00      	cmp	r3, #0
 8008634:	d003      	beq.n	800863e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f898 	bl	800876c <HAL_TIM_IC_CaptureCallback>
 800863c:	e005      	b.n	800864a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f88a 	bl	8008758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 f89b 	bl	8008780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2200      	movs	r2, #0
 800864e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	f003 0310 	and.w	r3, r3, #16
 8008656:	2b00      	cmp	r3, #0
 8008658:	d020      	beq.n	800869c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f003 0310 	and.w	r3, r3, #16
 8008660:	2b00      	cmp	r3, #0
 8008662:	d01b      	beq.n	800869c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f06f 0210 	mvn.w	r2, #16
 800866c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2208      	movs	r2, #8
 8008672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	69db      	ldr	r3, [r3, #28]
 800867a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800867e:	2b00      	cmp	r3, #0
 8008680:	d003      	beq.n	800868a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 f872 	bl	800876c <HAL_TIM_IC_CaptureCallback>
 8008688:	e005      	b.n	8008696 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f864 	bl	8008758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 f875 	bl	8008780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	f003 0301 	and.w	r3, r3, #1
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d00c      	beq.n	80086c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f003 0301 	and.w	r3, r3, #1
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d007      	beq.n	80086c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f06f 0201 	mvn.w	r2, #1
 80086b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f7fa fc24 	bl	8002f08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00c      	beq.n	80086e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d007      	beq.n	80086e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80086dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 f906 	bl	80088f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d00c      	beq.n	8008708 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d007      	beq.n	8008708 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 f8fe 	bl	8008904 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800870e:	2b00      	cmp	r3, #0
 8008710:	d00c      	beq.n	800872c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008718:	2b00      	cmp	r3, #0
 800871a:	d007      	beq.n	800872c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 f834 	bl	8008794 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	f003 0320 	and.w	r3, r3, #32
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00c      	beq.n	8008750 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f003 0320 	and.w	r3, r3, #32
 800873c:	2b00      	cmp	r3, #0
 800873e:	d007      	beq.n	8008750 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f06f 0220 	mvn.w	r2, #32
 8008748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 f8c6 	bl	80088dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008750:	bf00      	nop
 8008752:	3710      	adds	r7, #16
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008760:	bf00      	nop
 8008762:	370c      	adds	r7, #12
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr

0800876c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008774:	bf00      	nop
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008788:	bf00      	nop
 800878a:	370c      	adds	r7, #12
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008794:	b480      	push	{r7}
 8008796:	b083      	sub	sp, #12
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800879c:	bf00      	nop
 800879e:	370c      	adds	r7, #12
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b085      	sub	sp, #20
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	4a40      	ldr	r2, [pc, #256]	; (80088bc <TIM_Base_SetConfig+0x114>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d013      	beq.n	80087e8 <TIM_Base_SetConfig+0x40>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087c6:	d00f      	beq.n	80087e8 <TIM_Base_SetConfig+0x40>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a3d      	ldr	r2, [pc, #244]	; (80088c0 <TIM_Base_SetConfig+0x118>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d00b      	beq.n	80087e8 <TIM_Base_SetConfig+0x40>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4a3c      	ldr	r2, [pc, #240]	; (80088c4 <TIM_Base_SetConfig+0x11c>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d007      	beq.n	80087e8 <TIM_Base_SetConfig+0x40>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	4a3b      	ldr	r2, [pc, #236]	; (80088c8 <TIM_Base_SetConfig+0x120>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d003      	beq.n	80087e8 <TIM_Base_SetConfig+0x40>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	4a3a      	ldr	r2, [pc, #232]	; (80088cc <TIM_Base_SetConfig+0x124>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d108      	bne.n	80087fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	68fa      	ldr	r2, [r7, #12]
 80087f6:	4313      	orrs	r3, r2
 80087f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4a2f      	ldr	r2, [pc, #188]	; (80088bc <TIM_Base_SetConfig+0x114>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d01f      	beq.n	8008842 <TIM_Base_SetConfig+0x9a>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008808:	d01b      	beq.n	8008842 <TIM_Base_SetConfig+0x9a>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4a2c      	ldr	r2, [pc, #176]	; (80088c0 <TIM_Base_SetConfig+0x118>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d017      	beq.n	8008842 <TIM_Base_SetConfig+0x9a>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a2b      	ldr	r2, [pc, #172]	; (80088c4 <TIM_Base_SetConfig+0x11c>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d013      	beq.n	8008842 <TIM_Base_SetConfig+0x9a>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a2a      	ldr	r2, [pc, #168]	; (80088c8 <TIM_Base_SetConfig+0x120>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d00f      	beq.n	8008842 <TIM_Base_SetConfig+0x9a>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	4a29      	ldr	r2, [pc, #164]	; (80088cc <TIM_Base_SetConfig+0x124>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d00b      	beq.n	8008842 <TIM_Base_SetConfig+0x9a>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4a28      	ldr	r2, [pc, #160]	; (80088d0 <TIM_Base_SetConfig+0x128>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d007      	beq.n	8008842 <TIM_Base_SetConfig+0x9a>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4a27      	ldr	r2, [pc, #156]	; (80088d4 <TIM_Base_SetConfig+0x12c>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d003      	beq.n	8008842 <TIM_Base_SetConfig+0x9a>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4a26      	ldr	r2, [pc, #152]	; (80088d8 <TIM_Base_SetConfig+0x130>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d108      	bne.n	8008854 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008848:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	68db      	ldr	r3, [r3, #12]
 800884e:	68fa      	ldr	r2, [r7, #12]
 8008850:	4313      	orrs	r3, r2
 8008852:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	695b      	ldr	r3, [r3, #20]
 800885e:	4313      	orrs	r3, r2
 8008860:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	689a      	ldr	r2, [r3, #8]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	4a10      	ldr	r2, [pc, #64]	; (80088bc <TIM_Base_SetConfig+0x114>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d00f      	beq.n	80088a0 <TIM_Base_SetConfig+0xf8>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	4a12      	ldr	r2, [pc, #72]	; (80088cc <TIM_Base_SetConfig+0x124>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d00b      	beq.n	80088a0 <TIM_Base_SetConfig+0xf8>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	4a11      	ldr	r2, [pc, #68]	; (80088d0 <TIM_Base_SetConfig+0x128>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d007      	beq.n	80088a0 <TIM_Base_SetConfig+0xf8>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	4a10      	ldr	r2, [pc, #64]	; (80088d4 <TIM_Base_SetConfig+0x12c>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d003      	beq.n	80088a0 <TIM_Base_SetConfig+0xf8>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	4a0f      	ldr	r2, [pc, #60]	; (80088d8 <TIM_Base_SetConfig+0x130>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d103      	bne.n	80088a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	691a      	ldr	r2, [r3, #16]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2201      	movs	r2, #1
 80088ac:	615a      	str	r2, [r3, #20]
}
 80088ae:	bf00      	nop
 80088b0:	3714      	adds	r7, #20
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr
 80088ba:	bf00      	nop
 80088bc:	40012c00 	.word	0x40012c00
 80088c0:	40000400 	.word	0x40000400
 80088c4:	40000800 	.word	0x40000800
 80088c8:	40000c00 	.word	0x40000c00
 80088cc:	40013400 	.word	0x40013400
 80088d0:	40014000 	.word	0x40014000
 80088d4:	40014400 	.word	0x40014400
 80088d8:	40014800 	.word	0x40014800

080088dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80088dc:	b480      	push	{r7}
 80088de:	b083      	sub	sp, #12
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80088e4:	bf00      	nop
 80088e6:	370c      	adds	r7, #12
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b083      	sub	sp, #12
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80088f8:	bf00      	nop
 80088fa:	370c      	adds	r7, #12
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr

08008904 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008904:	b480      	push	{r7}
 8008906:	b083      	sub	sp, #12
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800890c:	bf00      	nop
 800890e:	370c      	adds	r7, #12
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d101      	bne.n	800892a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	e042      	b.n	80089b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008930:	2b00      	cmp	r3, #0
 8008932:	d106      	bne.n	8008942 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f7fa fd83 	bl	8003448 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2224      	movs	r2, #36	; 0x24
 8008946:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f022 0201 	bic.w	r2, r2, #1
 8008958:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800895e:	2b00      	cmp	r3, #0
 8008960:	d002      	beq.n	8008968 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 fef8 	bl	8009758 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 fbf9 	bl	8009160 <UART_SetConfig>
 800896e:	4603      	mov	r3, r0
 8008970:	2b01      	cmp	r3, #1
 8008972:	d101      	bne.n	8008978 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008974:	2301      	movs	r3, #1
 8008976:	e01b      	b.n	80089b0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	685a      	ldr	r2, [r3, #4]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008986:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	689a      	ldr	r2, [r3, #8]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008996:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	681a      	ldr	r2, [r3, #0]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f042 0201 	orr.w	r2, r2, #1
 80089a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 ff77 	bl	800989c <UART_CheckIdleState>
 80089ae:	4603      	mov	r3, r0
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3708      	adds	r7, #8
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b08a      	sub	sp, #40	; 0x28
 80089bc:	af02      	add	r7, sp, #8
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	603b      	str	r3, [r7, #0]
 80089c4:	4613      	mov	r3, r2
 80089c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089ce:	2b20      	cmp	r3, #32
 80089d0:	d17c      	bne.n	8008acc <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d002      	beq.n	80089de <HAL_UART_Transmit+0x26>
 80089d8:	88fb      	ldrh	r3, [r7, #6]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d101      	bne.n	80089e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	e075      	b.n	8008ace <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2200      	movs	r2, #0
 80089e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2221      	movs	r2, #33	; 0x21
 80089ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80089f2:	f7fa ffcb 	bl	800398c <HAL_GetTick>
 80089f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	88fa      	ldrh	r2, [r7, #6]
 80089fc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	88fa      	ldrh	r2, [r7, #6]
 8008a04:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a10:	d108      	bne.n	8008a24 <HAL_UART_Transmit+0x6c>
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	691b      	ldr	r3, [r3, #16]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d104      	bne.n	8008a24 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	61bb      	str	r3, [r7, #24]
 8008a22:	e003      	b.n	8008a2c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008a2c:	e031      	b.n	8008a92 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	9300      	str	r3, [sp, #0]
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	2200      	movs	r2, #0
 8008a36:	2180      	movs	r1, #128	; 0x80
 8008a38:	68f8      	ldr	r0, [r7, #12]
 8008a3a:	f000 ffd9 	bl	80099f0 <UART_WaitOnFlagUntilTimeout>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d005      	beq.n	8008a50 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2220      	movs	r2, #32
 8008a48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008a4c:	2303      	movs	r3, #3
 8008a4e:	e03e      	b.n	8008ace <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d10b      	bne.n	8008a6e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	881a      	ldrh	r2, [r3, #0]
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a62:	b292      	uxth	r2, r2
 8008a64:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008a66:	69bb      	ldr	r3, [r7, #24]
 8008a68:	3302      	adds	r3, #2
 8008a6a:	61bb      	str	r3, [r7, #24]
 8008a6c:	e008      	b.n	8008a80 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	781a      	ldrb	r2, [r3, #0]
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	b292      	uxth	r2, r2
 8008a78:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	3b01      	subs	r3, #1
 8008a8a:	b29a      	uxth	r2, r3
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d1c7      	bne.n	8008a2e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	9300      	str	r3, [sp, #0]
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	2140      	movs	r1, #64	; 0x40
 8008aa8:	68f8      	ldr	r0, [r7, #12]
 8008aaa:	f000 ffa1 	bl	80099f0 <UART_WaitOnFlagUntilTimeout>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d005      	beq.n	8008ac0 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2220      	movs	r2, #32
 8008ab8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008abc:	2303      	movs	r3, #3
 8008abe:	e006      	b.n	8008ace <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2220      	movs	r2, #32
 8008ac4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	e000      	b.n	8008ace <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8008acc:	2302      	movs	r3, #2
  }
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3720      	adds	r7, #32
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
	...

08008ad8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b0ba      	sub	sp, #232	; 0xe8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	69db      	ldr	r3, [r3, #28]
 8008ae6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008afe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008b02:	f640 030f 	movw	r3, #2063	; 0x80f
 8008b06:	4013      	ands	r3, r2
 8008b08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008b0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d11b      	bne.n	8008b4c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b18:	f003 0320 	and.w	r3, r3, #32
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d015      	beq.n	8008b4c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b24:	f003 0320 	and.w	r3, r3, #32
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d105      	bne.n	8008b38 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008b2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d009      	beq.n	8008b4c <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	f000 82e3 	beq.w	8009108 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	4798      	blx	r3
      }
      return;
 8008b4a:	e2dd      	b.n	8009108 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8008b4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	f000 8123 	beq.w	8008d9c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008b56:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008b5a:	4b8d      	ldr	r3, [pc, #564]	; (8008d90 <HAL_UART_IRQHandler+0x2b8>)
 8008b5c:	4013      	ands	r3, r2
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d106      	bne.n	8008b70 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008b62:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008b66:	4b8b      	ldr	r3, [pc, #556]	; (8008d94 <HAL_UART_IRQHandler+0x2bc>)
 8008b68:	4013      	ands	r3, r2
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	f000 8116 	beq.w	8008d9c <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b74:	f003 0301 	and.w	r3, r3, #1
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d011      	beq.n	8008ba0 <HAL_UART_IRQHandler+0xc8>
 8008b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d00b      	beq.n	8008ba0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b96:	f043 0201 	orr.w	r2, r3, #1
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ba4:	f003 0302 	and.w	r3, r3, #2
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d011      	beq.n	8008bd0 <HAL_UART_IRQHandler+0xf8>
 8008bac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008bb0:	f003 0301 	and.w	r3, r3, #1
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d00b      	beq.n	8008bd0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	2202      	movs	r2, #2
 8008bbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bc6:	f043 0204 	orr.w	r2, r3, #4
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bd4:	f003 0304 	and.w	r3, r3, #4
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d011      	beq.n	8008c00 <HAL_UART_IRQHandler+0x128>
 8008bdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008be0:	f003 0301 	and.w	r3, r3, #1
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d00b      	beq.n	8008c00 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2204      	movs	r2, #4
 8008bee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bf6:	f043 0202 	orr.w	r2, r3, #2
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c04:	f003 0308 	and.w	r3, r3, #8
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d017      	beq.n	8008c3c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c10:	f003 0320 	and.w	r3, r3, #32
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d105      	bne.n	8008c24 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008c18:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008c1c:	4b5c      	ldr	r3, [pc, #368]	; (8008d90 <HAL_UART_IRQHandler+0x2b8>)
 8008c1e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d00b      	beq.n	8008c3c <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	2208      	movs	r2, #8
 8008c2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c32:	f043 0208 	orr.w	r2, r3, #8
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d012      	beq.n	8008c6e <HAL_UART_IRQHandler+0x196>
 8008c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d00c      	beq.n	8008c6e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c64:	f043 0220 	orr.w	r2, r3, #32
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	f000 8249 	beq.w	800910c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c7e:	f003 0320 	and.w	r3, r3, #32
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d013      	beq.n	8008cae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008c86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c8a:	f003 0320 	and.w	r3, r3, #32
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d105      	bne.n	8008c9e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008c92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d007      	beq.n	8008cae <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d003      	beq.n	8008cae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cb4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cc2:	2b40      	cmp	r3, #64	; 0x40
 8008cc4:	d005      	beq.n	8008cd2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008cc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008cca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d054      	beq.n	8008d7c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 fef3 	bl	8009abe <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ce2:	2b40      	cmp	r3, #64	; 0x40
 8008ce4:	d146      	bne.n	8008d74 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	3308      	adds	r3, #8
 8008cec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008cf4:	e853 3f00 	ldrex	r3, [r3]
 8008cf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008cfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	3308      	adds	r3, #8
 8008d0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008d12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008d16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008d1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008d22:	e841 2300 	strex	r3, r2, [r1]
 8008d26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008d2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d1d9      	bne.n	8008ce6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d017      	beq.n	8008d6c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d42:	4a15      	ldr	r2, [pc, #84]	; (8008d98 <HAL_UART_IRQHandler+0x2c0>)
 8008d44:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f7fb ff55 	bl	8004bfc <HAL_DMA_Abort_IT>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d019      	beq.n	8008d8c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8008d66:	4610      	mov	r0, r2
 8008d68:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d6a:	e00f      	b.n	8008d8c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 f9e1 	bl	8009134 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d72:	e00b      	b.n	8008d8c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 f9dd 	bl	8009134 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d7a:	e007      	b.n	8008d8c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 f9d9 	bl	8009134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2200      	movs	r2, #0
 8008d86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8008d8a:	e1bf      	b.n	800910c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d8c:	bf00      	nop
    return;
 8008d8e:	e1bd      	b.n	800910c <HAL_UART_IRQHandler+0x634>
 8008d90:	10000001 	.word	0x10000001
 8008d94:	04000120 	.word	0x04000120
 8008d98:	08009b8b 	.word	0x08009b8b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	f040 8153 	bne.w	800904c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008daa:	f003 0310 	and.w	r3, r3, #16
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	f000 814c 	beq.w	800904c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008db8:	f003 0310 	and.w	r3, r3, #16
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	f000 8145 	beq.w	800904c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2210      	movs	r2, #16
 8008dc8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dd4:	2b40      	cmp	r3, #64	; 0x40
 8008dd6:	f040 80bb 	bne.w	8008f50 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008de8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f000 818f 	beq.w	8009110 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008df8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	f080 8187 	bcs.w	8009110 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008e08:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f003 0320 	and.w	r3, r3, #32
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	f040 8087 	bne.w	8008f2e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008e2c:	e853 3f00 	ldrex	r3, [r3]
 8008e30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008e34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	461a      	mov	r2, r3
 8008e46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008e4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008e4e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e52:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008e56:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008e5a:	e841 2300 	strex	r3, r2, [r1]
 8008e5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008e62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d1da      	bne.n	8008e20 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	3308      	adds	r3, #8
 8008e70:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e74:	e853 3f00 	ldrex	r3, [r3]
 8008e78:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008e7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e7c:	f023 0301 	bic.w	r3, r3, #1
 8008e80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	3308      	adds	r3, #8
 8008e8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008e8e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008e92:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e94:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008e96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008e9a:	e841 2300 	strex	r3, r2, [r1]
 8008e9e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008ea0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d1e1      	bne.n	8008e6a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	3308      	adds	r3, #8
 8008eac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008eb0:	e853 3f00 	ldrex	r3, [r3]
 8008eb4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008eb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008eb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ebc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	3308      	adds	r3, #8
 8008ec6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008eca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008ecc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ece:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008ed0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008ed2:	e841 2300 	strex	r3, r2, [r1]
 8008ed6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008ed8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d1e3      	bne.n	8008ea6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2220      	movs	r2, #32
 8008ee2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ef4:	e853 3f00 	ldrex	r3, [r3]
 8008ef8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008efa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008efc:	f023 0310 	bic.w	r3, r3, #16
 8008f00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	461a      	mov	r2, r3
 8008f0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f0e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008f10:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f12:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008f14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f16:	e841 2300 	strex	r3, r2, [r1]
 8008f1a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008f1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d1e4      	bne.n	8008eec <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f7fb fe0b 	bl	8004b44 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2202      	movs	r2, #2
 8008f32:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	1ad3      	subs	r3, r2, r3
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	4619      	mov	r1, r3
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 f8fd 	bl	8009148 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008f4e:	e0df      	b.n	8009110 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	1ad3      	subs	r3, r2, r3
 8008f60:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	f000 80d1 	beq.w	8009114 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8008f72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	f000 80cc 	beq.w	8009114 <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f84:	e853 3f00 	ldrex	r3, [r3]
 8008f88:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	461a      	mov	r2, r3
 8008f9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008f9e:	647b      	str	r3, [r7, #68]	; 0x44
 8008fa0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008fa4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008fa6:	e841 2300 	strex	r3, r2, [r1]
 8008faa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d1e4      	bne.n	8008f7c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	3308      	adds	r3, #8
 8008fb8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fbc:	e853 3f00 	ldrex	r3, [r3]
 8008fc0:	623b      	str	r3, [r7, #32]
   return(result);
 8008fc2:	6a3b      	ldr	r3, [r7, #32]
 8008fc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008fc8:	f023 0301 	bic.w	r3, r3, #1
 8008fcc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	3308      	adds	r3, #8
 8008fd6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008fda:	633a      	str	r2, [r7, #48]	; 0x30
 8008fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fe2:	e841 2300 	strex	r3, r2, [r1]
 8008fe6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d1e1      	bne.n	8008fb2 <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2220      	movs	r2, #32
 8008ff2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	e853 3f00 	ldrex	r3, [r3]
 800900e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f023 0310 	bic.w	r3, r3, #16
 8009016:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	461a      	mov	r2, r3
 8009020:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009024:	61fb      	str	r3, [r7, #28]
 8009026:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009028:	69b9      	ldr	r1, [r7, #24]
 800902a:	69fa      	ldr	r2, [r7, #28]
 800902c:	e841 2300 	strex	r3, r2, [r1]
 8009030:	617b      	str	r3, [r7, #20]
   return(result);
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d1e4      	bne.n	8009002 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2202      	movs	r2, #2
 800903c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800903e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009042:	4619      	mov	r1, r3
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 f87f 	bl	8009148 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800904a:	e063      	b.n	8009114 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800904c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009050:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009054:	2b00      	cmp	r3, #0
 8009056:	d00e      	beq.n	8009076 <HAL_UART_IRQHandler+0x59e>
 8009058:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800905c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009060:	2b00      	cmp	r3, #0
 8009062:	d008      	beq.n	8009076 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800906c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 fdcc 	bl	8009c0c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009074:	e051      	b.n	800911a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800907a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800907e:	2b00      	cmp	r3, #0
 8009080:	d014      	beq.n	80090ac <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009082:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800908a:	2b00      	cmp	r3, #0
 800908c:	d105      	bne.n	800909a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800908e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009092:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009096:	2b00      	cmp	r3, #0
 8009098:	d008      	beq.n	80090ac <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d03a      	beq.n	8009118 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	4798      	blx	r3
    }
    return;
 80090aa:	e035      	b.n	8009118 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80090ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d009      	beq.n	80090cc <HAL_UART_IRQHandler+0x5f4>
 80090b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d003      	beq.n	80090cc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 fd76 	bl	8009bb6 <UART_EndTransmit_IT>
    return;
 80090ca:	e026      	b.n	800911a <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80090cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d009      	beq.n	80090ec <HAL_UART_IRQHandler+0x614>
 80090d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d003      	beq.n	80090ec <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 fda5 	bl	8009c34 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80090ea:	e016      	b.n	800911a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80090ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d010      	beq.n	800911a <HAL_UART_IRQHandler+0x642>
 80090f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	da0c      	bge.n	800911a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 fd8d 	bl	8009c20 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009106:	e008      	b.n	800911a <HAL_UART_IRQHandler+0x642>
      return;
 8009108:	bf00      	nop
 800910a:	e006      	b.n	800911a <HAL_UART_IRQHandler+0x642>
    return;
 800910c:	bf00      	nop
 800910e:	e004      	b.n	800911a <HAL_UART_IRQHandler+0x642>
      return;
 8009110:	bf00      	nop
 8009112:	e002      	b.n	800911a <HAL_UART_IRQHandler+0x642>
      return;
 8009114:	bf00      	nop
 8009116:	e000      	b.n	800911a <HAL_UART_IRQHandler+0x642>
    return;
 8009118:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800911a:	37e8      	adds	r7, #232	; 0xe8
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009128:	bf00      	nop
 800912a:	370c      	adds	r7, #12
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009134:	b480      	push	{r7}
 8009136:	b083      	sub	sp, #12
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800913c:	bf00      	nop
 800913e:	370c      	adds	r7, #12
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr

08009148 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	460b      	mov	r3, r1
 8009152:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009154:	bf00      	nop
 8009156:	370c      	adds	r7, #12
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009164:	b08c      	sub	sp, #48	; 0x30
 8009166:	af00      	add	r7, sp, #0
 8009168:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800916a:	2300      	movs	r3, #0
 800916c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	689a      	ldr	r2, [r3, #8]
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	691b      	ldr	r3, [r3, #16]
 8009178:	431a      	orrs	r2, r3
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	695b      	ldr	r3, [r3, #20]
 800917e:	431a      	orrs	r2, r3
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	69db      	ldr	r3, [r3, #28]
 8009184:	4313      	orrs	r3, r2
 8009186:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	4baa      	ldr	r3, [pc, #680]	; (8009438 <UART_SetConfig+0x2d8>)
 8009190:	4013      	ands	r3, r2
 8009192:	697a      	ldr	r2, [r7, #20]
 8009194:	6812      	ldr	r2, [r2, #0]
 8009196:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009198:	430b      	orrs	r3, r1
 800919a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	68da      	ldr	r2, [r3, #12]
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	430a      	orrs	r2, r1
 80091b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	699b      	ldr	r3, [r3, #24]
 80091b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a9f      	ldr	r2, [pc, #636]	; (800943c <UART_SetConfig+0x2dc>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d004      	beq.n	80091cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	6a1b      	ldr	r3, [r3, #32]
 80091c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091c8:	4313      	orrs	r3, r2
 80091ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	689b      	ldr	r3, [r3, #8]
 80091d2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80091d6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80091da:	697a      	ldr	r2, [r7, #20]
 80091dc:	6812      	ldr	r2, [r2, #0]
 80091de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80091e0:	430b      	orrs	r3, r1
 80091e2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ea:	f023 010f 	bic.w	r1, r3, #15
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	430a      	orrs	r2, r1
 80091f8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a90      	ldr	r2, [pc, #576]	; (8009440 <UART_SetConfig+0x2e0>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d125      	bne.n	8009250 <UART_SetConfig+0xf0>
 8009204:	4b8f      	ldr	r3, [pc, #572]	; (8009444 <UART_SetConfig+0x2e4>)
 8009206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800920a:	f003 0303 	and.w	r3, r3, #3
 800920e:	2b03      	cmp	r3, #3
 8009210:	d81a      	bhi.n	8009248 <UART_SetConfig+0xe8>
 8009212:	a201      	add	r2, pc, #4	; (adr r2, 8009218 <UART_SetConfig+0xb8>)
 8009214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009218:	08009229 	.word	0x08009229
 800921c:	08009239 	.word	0x08009239
 8009220:	08009231 	.word	0x08009231
 8009224:	08009241 	.word	0x08009241
 8009228:	2301      	movs	r3, #1
 800922a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800922e:	e116      	b.n	800945e <UART_SetConfig+0x2fe>
 8009230:	2302      	movs	r3, #2
 8009232:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009236:	e112      	b.n	800945e <UART_SetConfig+0x2fe>
 8009238:	2304      	movs	r3, #4
 800923a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800923e:	e10e      	b.n	800945e <UART_SetConfig+0x2fe>
 8009240:	2308      	movs	r3, #8
 8009242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009246:	e10a      	b.n	800945e <UART_SetConfig+0x2fe>
 8009248:	2310      	movs	r3, #16
 800924a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800924e:	e106      	b.n	800945e <UART_SetConfig+0x2fe>
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a7c      	ldr	r2, [pc, #496]	; (8009448 <UART_SetConfig+0x2e8>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d138      	bne.n	80092cc <UART_SetConfig+0x16c>
 800925a:	4b7a      	ldr	r3, [pc, #488]	; (8009444 <UART_SetConfig+0x2e4>)
 800925c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009260:	f003 030c 	and.w	r3, r3, #12
 8009264:	2b0c      	cmp	r3, #12
 8009266:	d82d      	bhi.n	80092c4 <UART_SetConfig+0x164>
 8009268:	a201      	add	r2, pc, #4	; (adr r2, 8009270 <UART_SetConfig+0x110>)
 800926a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800926e:	bf00      	nop
 8009270:	080092a5 	.word	0x080092a5
 8009274:	080092c5 	.word	0x080092c5
 8009278:	080092c5 	.word	0x080092c5
 800927c:	080092c5 	.word	0x080092c5
 8009280:	080092b5 	.word	0x080092b5
 8009284:	080092c5 	.word	0x080092c5
 8009288:	080092c5 	.word	0x080092c5
 800928c:	080092c5 	.word	0x080092c5
 8009290:	080092ad 	.word	0x080092ad
 8009294:	080092c5 	.word	0x080092c5
 8009298:	080092c5 	.word	0x080092c5
 800929c:	080092c5 	.word	0x080092c5
 80092a0:	080092bd 	.word	0x080092bd
 80092a4:	2300      	movs	r3, #0
 80092a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80092aa:	e0d8      	b.n	800945e <UART_SetConfig+0x2fe>
 80092ac:	2302      	movs	r3, #2
 80092ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80092b2:	e0d4      	b.n	800945e <UART_SetConfig+0x2fe>
 80092b4:	2304      	movs	r3, #4
 80092b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80092ba:	e0d0      	b.n	800945e <UART_SetConfig+0x2fe>
 80092bc:	2308      	movs	r3, #8
 80092be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80092c2:	e0cc      	b.n	800945e <UART_SetConfig+0x2fe>
 80092c4:	2310      	movs	r3, #16
 80092c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80092ca:	e0c8      	b.n	800945e <UART_SetConfig+0x2fe>
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a5e      	ldr	r2, [pc, #376]	; (800944c <UART_SetConfig+0x2ec>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d125      	bne.n	8009322 <UART_SetConfig+0x1c2>
 80092d6:	4b5b      	ldr	r3, [pc, #364]	; (8009444 <UART_SetConfig+0x2e4>)
 80092d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80092e0:	2b30      	cmp	r3, #48	; 0x30
 80092e2:	d016      	beq.n	8009312 <UART_SetConfig+0x1b2>
 80092e4:	2b30      	cmp	r3, #48	; 0x30
 80092e6:	d818      	bhi.n	800931a <UART_SetConfig+0x1ba>
 80092e8:	2b20      	cmp	r3, #32
 80092ea:	d00a      	beq.n	8009302 <UART_SetConfig+0x1a2>
 80092ec:	2b20      	cmp	r3, #32
 80092ee:	d814      	bhi.n	800931a <UART_SetConfig+0x1ba>
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d002      	beq.n	80092fa <UART_SetConfig+0x19a>
 80092f4:	2b10      	cmp	r3, #16
 80092f6:	d008      	beq.n	800930a <UART_SetConfig+0x1aa>
 80092f8:	e00f      	b.n	800931a <UART_SetConfig+0x1ba>
 80092fa:	2300      	movs	r3, #0
 80092fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009300:	e0ad      	b.n	800945e <UART_SetConfig+0x2fe>
 8009302:	2302      	movs	r3, #2
 8009304:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009308:	e0a9      	b.n	800945e <UART_SetConfig+0x2fe>
 800930a:	2304      	movs	r3, #4
 800930c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009310:	e0a5      	b.n	800945e <UART_SetConfig+0x2fe>
 8009312:	2308      	movs	r3, #8
 8009314:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009318:	e0a1      	b.n	800945e <UART_SetConfig+0x2fe>
 800931a:	2310      	movs	r3, #16
 800931c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009320:	e09d      	b.n	800945e <UART_SetConfig+0x2fe>
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a4a      	ldr	r2, [pc, #296]	; (8009450 <UART_SetConfig+0x2f0>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d125      	bne.n	8009378 <UART_SetConfig+0x218>
 800932c:	4b45      	ldr	r3, [pc, #276]	; (8009444 <UART_SetConfig+0x2e4>)
 800932e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009332:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009336:	2bc0      	cmp	r3, #192	; 0xc0
 8009338:	d016      	beq.n	8009368 <UART_SetConfig+0x208>
 800933a:	2bc0      	cmp	r3, #192	; 0xc0
 800933c:	d818      	bhi.n	8009370 <UART_SetConfig+0x210>
 800933e:	2b80      	cmp	r3, #128	; 0x80
 8009340:	d00a      	beq.n	8009358 <UART_SetConfig+0x1f8>
 8009342:	2b80      	cmp	r3, #128	; 0x80
 8009344:	d814      	bhi.n	8009370 <UART_SetConfig+0x210>
 8009346:	2b00      	cmp	r3, #0
 8009348:	d002      	beq.n	8009350 <UART_SetConfig+0x1f0>
 800934a:	2b40      	cmp	r3, #64	; 0x40
 800934c:	d008      	beq.n	8009360 <UART_SetConfig+0x200>
 800934e:	e00f      	b.n	8009370 <UART_SetConfig+0x210>
 8009350:	2300      	movs	r3, #0
 8009352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009356:	e082      	b.n	800945e <UART_SetConfig+0x2fe>
 8009358:	2302      	movs	r3, #2
 800935a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800935e:	e07e      	b.n	800945e <UART_SetConfig+0x2fe>
 8009360:	2304      	movs	r3, #4
 8009362:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009366:	e07a      	b.n	800945e <UART_SetConfig+0x2fe>
 8009368:	2308      	movs	r3, #8
 800936a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800936e:	e076      	b.n	800945e <UART_SetConfig+0x2fe>
 8009370:	2310      	movs	r3, #16
 8009372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009376:	e072      	b.n	800945e <UART_SetConfig+0x2fe>
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a35      	ldr	r2, [pc, #212]	; (8009454 <UART_SetConfig+0x2f4>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d12a      	bne.n	80093d8 <UART_SetConfig+0x278>
 8009382:	4b30      	ldr	r3, [pc, #192]	; (8009444 <UART_SetConfig+0x2e4>)
 8009384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009388:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800938c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009390:	d01a      	beq.n	80093c8 <UART_SetConfig+0x268>
 8009392:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009396:	d81b      	bhi.n	80093d0 <UART_SetConfig+0x270>
 8009398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800939c:	d00c      	beq.n	80093b8 <UART_SetConfig+0x258>
 800939e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093a2:	d815      	bhi.n	80093d0 <UART_SetConfig+0x270>
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d003      	beq.n	80093b0 <UART_SetConfig+0x250>
 80093a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093ac:	d008      	beq.n	80093c0 <UART_SetConfig+0x260>
 80093ae:	e00f      	b.n	80093d0 <UART_SetConfig+0x270>
 80093b0:	2300      	movs	r3, #0
 80093b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80093b6:	e052      	b.n	800945e <UART_SetConfig+0x2fe>
 80093b8:	2302      	movs	r3, #2
 80093ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80093be:	e04e      	b.n	800945e <UART_SetConfig+0x2fe>
 80093c0:	2304      	movs	r3, #4
 80093c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80093c6:	e04a      	b.n	800945e <UART_SetConfig+0x2fe>
 80093c8:	2308      	movs	r3, #8
 80093ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80093ce:	e046      	b.n	800945e <UART_SetConfig+0x2fe>
 80093d0:	2310      	movs	r3, #16
 80093d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80093d6:	e042      	b.n	800945e <UART_SetConfig+0x2fe>
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a17      	ldr	r2, [pc, #92]	; (800943c <UART_SetConfig+0x2dc>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d13a      	bne.n	8009458 <UART_SetConfig+0x2f8>
 80093e2:	4b18      	ldr	r3, [pc, #96]	; (8009444 <UART_SetConfig+0x2e4>)
 80093e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80093ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80093f0:	d01a      	beq.n	8009428 <UART_SetConfig+0x2c8>
 80093f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80093f6:	d81b      	bhi.n	8009430 <UART_SetConfig+0x2d0>
 80093f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093fc:	d00c      	beq.n	8009418 <UART_SetConfig+0x2b8>
 80093fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009402:	d815      	bhi.n	8009430 <UART_SetConfig+0x2d0>
 8009404:	2b00      	cmp	r3, #0
 8009406:	d003      	beq.n	8009410 <UART_SetConfig+0x2b0>
 8009408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800940c:	d008      	beq.n	8009420 <UART_SetConfig+0x2c0>
 800940e:	e00f      	b.n	8009430 <UART_SetConfig+0x2d0>
 8009410:	2300      	movs	r3, #0
 8009412:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009416:	e022      	b.n	800945e <UART_SetConfig+0x2fe>
 8009418:	2302      	movs	r3, #2
 800941a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800941e:	e01e      	b.n	800945e <UART_SetConfig+0x2fe>
 8009420:	2304      	movs	r3, #4
 8009422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009426:	e01a      	b.n	800945e <UART_SetConfig+0x2fe>
 8009428:	2308      	movs	r3, #8
 800942a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800942e:	e016      	b.n	800945e <UART_SetConfig+0x2fe>
 8009430:	2310      	movs	r3, #16
 8009432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009436:	e012      	b.n	800945e <UART_SetConfig+0x2fe>
 8009438:	cfff69f3 	.word	0xcfff69f3
 800943c:	40008000 	.word	0x40008000
 8009440:	40013800 	.word	0x40013800
 8009444:	40021000 	.word	0x40021000
 8009448:	40004400 	.word	0x40004400
 800944c:	40004800 	.word	0x40004800
 8009450:	40004c00 	.word	0x40004c00
 8009454:	40005000 	.word	0x40005000
 8009458:	2310      	movs	r3, #16
 800945a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4aae      	ldr	r2, [pc, #696]	; (800971c <UART_SetConfig+0x5bc>)
 8009464:	4293      	cmp	r3, r2
 8009466:	f040 8097 	bne.w	8009598 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800946a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800946e:	2b08      	cmp	r3, #8
 8009470:	d823      	bhi.n	80094ba <UART_SetConfig+0x35a>
 8009472:	a201      	add	r2, pc, #4	; (adr r2, 8009478 <UART_SetConfig+0x318>)
 8009474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009478:	0800949d 	.word	0x0800949d
 800947c:	080094bb 	.word	0x080094bb
 8009480:	080094a5 	.word	0x080094a5
 8009484:	080094bb 	.word	0x080094bb
 8009488:	080094ab 	.word	0x080094ab
 800948c:	080094bb 	.word	0x080094bb
 8009490:	080094bb 	.word	0x080094bb
 8009494:	080094bb 	.word	0x080094bb
 8009498:	080094b3 	.word	0x080094b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800949c:	f7fe f8a0 	bl	80075e0 <HAL_RCC_GetPCLK1Freq>
 80094a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80094a2:	e010      	b.n	80094c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80094a4:	4b9e      	ldr	r3, [pc, #632]	; (8009720 <UART_SetConfig+0x5c0>)
 80094a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80094a8:	e00d      	b.n	80094c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80094aa:	f7fe f801 	bl	80074b0 <HAL_RCC_GetSysClockFreq>
 80094ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80094b0:	e009      	b.n	80094c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80094b8:	e005      	b.n	80094c6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80094ba:	2300      	movs	r3, #0
 80094bc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80094be:	2301      	movs	r3, #1
 80094c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80094c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80094c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	f000 8130 	beq.w	800972e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d2:	4a94      	ldr	r2, [pc, #592]	; (8009724 <UART_SetConfig+0x5c4>)
 80094d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094d8:	461a      	mov	r2, r3
 80094da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80094e0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	685a      	ldr	r2, [r3, #4]
 80094e6:	4613      	mov	r3, r2
 80094e8:	005b      	lsls	r3, r3, #1
 80094ea:	4413      	add	r3, r2
 80094ec:	69ba      	ldr	r2, [r7, #24]
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d305      	bcc.n	80094fe <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80094f8:	69ba      	ldr	r2, [r7, #24]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d903      	bls.n	8009506 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80094fe:	2301      	movs	r3, #1
 8009500:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009504:	e113      	b.n	800972e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009508:	2200      	movs	r2, #0
 800950a:	60bb      	str	r3, [r7, #8]
 800950c:	60fa      	str	r2, [r7, #12]
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009512:	4a84      	ldr	r2, [pc, #528]	; (8009724 <UART_SetConfig+0x5c4>)
 8009514:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009518:	b29b      	uxth	r3, r3
 800951a:	2200      	movs	r2, #0
 800951c:	603b      	str	r3, [r7, #0]
 800951e:	607a      	str	r2, [r7, #4]
 8009520:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009524:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009528:	f7f7 f8a6 	bl	8000678 <__aeabi_uldivmod>
 800952c:	4602      	mov	r2, r0
 800952e:	460b      	mov	r3, r1
 8009530:	4610      	mov	r0, r2
 8009532:	4619      	mov	r1, r3
 8009534:	f04f 0200 	mov.w	r2, #0
 8009538:	f04f 0300 	mov.w	r3, #0
 800953c:	020b      	lsls	r3, r1, #8
 800953e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009542:	0202      	lsls	r2, r0, #8
 8009544:	6979      	ldr	r1, [r7, #20]
 8009546:	6849      	ldr	r1, [r1, #4]
 8009548:	0849      	lsrs	r1, r1, #1
 800954a:	2000      	movs	r0, #0
 800954c:	460c      	mov	r4, r1
 800954e:	4605      	mov	r5, r0
 8009550:	eb12 0804 	adds.w	r8, r2, r4
 8009554:	eb43 0905 	adc.w	r9, r3, r5
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	469a      	mov	sl, r3
 8009560:	4693      	mov	fp, r2
 8009562:	4652      	mov	r2, sl
 8009564:	465b      	mov	r3, fp
 8009566:	4640      	mov	r0, r8
 8009568:	4649      	mov	r1, r9
 800956a:	f7f7 f885 	bl	8000678 <__aeabi_uldivmod>
 800956e:	4602      	mov	r2, r0
 8009570:	460b      	mov	r3, r1
 8009572:	4613      	mov	r3, r2
 8009574:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009576:	6a3b      	ldr	r3, [r7, #32]
 8009578:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800957c:	d308      	bcc.n	8009590 <UART_SetConfig+0x430>
 800957e:	6a3b      	ldr	r3, [r7, #32]
 8009580:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009584:	d204      	bcs.n	8009590 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	6a3a      	ldr	r2, [r7, #32]
 800958c:	60da      	str	r2, [r3, #12]
 800958e:	e0ce      	b.n	800972e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009590:	2301      	movs	r3, #1
 8009592:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009596:	e0ca      	b.n	800972e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	69db      	ldr	r3, [r3, #28]
 800959c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095a0:	d166      	bne.n	8009670 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80095a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80095a6:	2b08      	cmp	r3, #8
 80095a8:	d827      	bhi.n	80095fa <UART_SetConfig+0x49a>
 80095aa:	a201      	add	r2, pc, #4	; (adr r2, 80095b0 <UART_SetConfig+0x450>)
 80095ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095b0:	080095d5 	.word	0x080095d5
 80095b4:	080095dd 	.word	0x080095dd
 80095b8:	080095e5 	.word	0x080095e5
 80095bc:	080095fb 	.word	0x080095fb
 80095c0:	080095eb 	.word	0x080095eb
 80095c4:	080095fb 	.word	0x080095fb
 80095c8:	080095fb 	.word	0x080095fb
 80095cc:	080095fb 	.word	0x080095fb
 80095d0:	080095f3 	.word	0x080095f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095d4:	f7fe f804 	bl	80075e0 <HAL_RCC_GetPCLK1Freq>
 80095d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80095da:	e014      	b.n	8009606 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80095dc:	f7fe f816 	bl	800760c <HAL_RCC_GetPCLK2Freq>
 80095e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80095e2:	e010      	b.n	8009606 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80095e4:	4b4e      	ldr	r3, [pc, #312]	; (8009720 <UART_SetConfig+0x5c0>)
 80095e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80095e8:	e00d      	b.n	8009606 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80095ea:	f7fd ff61 	bl	80074b0 <HAL_RCC_GetSysClockFreq>
 80095ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80095f0:	e009      	b.n	8009606 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80095f8:	e005      	b.n	8009606 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80095fa:	2300      	movs	r3, #0
 80095fc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80095fe:	2301      	movs	r3, #1
 8009600:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009604:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009608:	2b00      	cmp	r3, #0
 800960a:	f000 8090 	beq.w	800972e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009612:	4a44      	ldr	r2, [pc, #272]	; (8009724 <UART_SetConfig+0x5c4>)
 8009614:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009618:	461a      	mov	r2, r3
 800961a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009620:	005a      	lsls	r2, r3, #1
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	085b      	lsrs	r3, r3, #1
 8009628:	441a      	add	r2, r3
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009632:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009634:	6a3b      	ldr	r3, [r7, #32]
 8009636:	2b0f      	cmp	r3, #15
 8009638:	d916      	bls.n	8009668 <UART_SetConfig+0x508>
 800963a:	6a3b      	ldr	r3, [r7, #32]
 800963c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009640:	d212      	bcs.n	8009668 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009642:	6a3b      	ldr	r3, [r7, #32]
 8009644:	b29b      	uxth	r3, r3
 8009646:	f023 030f 	bic.w	r3, r3, #15
 800964a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800964c:	6a3b      	ldr	r3, [r7, #32]
 800964e:	085b      	lsrs	r3, r3, #1
 8009650:	b29b      	uxth	r3, r3
 8009652:	f003 0307 	and.w	r3, r3, #7
 8009656:	b29a      	uxth	r2, r3
 8009658:	8bfb      	ldrh	r3, [r7, #30]
 800965a:	4313      	orrs	r3, r2
 800965c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	8bfa      	ldrh	r2, [r7, #30]
 8009664:	60da      	str	r2, [r3, #12]
 8009666:	e062      	b.n	800972e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009668:	2301      	movs	r3, #1
 800966a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800966e:	e05e      	b.n	800972e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009670:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009674:	2b08      	cmp	r3, #8
 8009676:	d828      	bhi.n	80096ca <UART_SetConfig+0x56a>
 8009678:	a201      	add	r2, pc, #4	; (adr r2, 8009680 <UART_SetConfig+0x520>)
 800967a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800967e:	bf00      	nop
 8009680:	080096a5 	.word	0x080096a5
 8009684:	080096ad 	.word	0x080096ad
 8009688:	080096b5 	.word	0x080096b5
 800968c:	080096cb 	.word	0x080096cb
 8009690:	080096bb 	.word	0x080096bb
 8009694:	080096cb 	.word	0x080096cb
 8009698:	080096cb 	.word	0x080096cb
 800969c:	080096cb 	.word	0x080096cb
 80096a0:	080096c3 	.word	0x080096c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096a4:	f7fd ff9c 	bl	80075e0 <HAL_RCC_GetPCLK1Freq>
 80096a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80096aa:	e014      	b.n	80096d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80096ac:	f7fd ffae 	bl	800760c <HAL_RCC_GetPCLK2Freq>
 80096b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80096b2:	e010      	b.n	80096d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80096b4:	4b1a      	ldr	r3, [pc, #104]	; (8009720 <UART_SetConfig+0x5c0>)
 80096b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80096b8:	e00d      	b.n	80096d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80096ba:	f7fd fef9 	bl	80074b0 <HAL_RCC_GetSysClockFreq>
 80096be:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80096c0:	e009      	b.n	80096d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80096c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80096c8:	e005      	b.n	80096d6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80096ca:	2300      	movs	r3, #0
 80096cc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80096ce:	2301      	movs	r3, #1
 80096d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80096d4:	bf00      	nop
    }

    if (pclk != 0U)
 80096d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d028      	beq.n	800972e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e0:	4a10      	ldr	r2, [pc, #64]	; (8009724 <UART_SetConfig+0x5c4>)
 80096e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096e6:	461a      	mov	r2, r3
 80096e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	085b      	lsrs	r3, r3, #1
 80096f4:	441a      	add	r2, r3
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80096fe:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009700:	6a3b      	ldr	r3, [r7, #32]
 8009702:	2b0f      	cmp	r3, #15
 8009704:	d910      	bls.n	8009728 <UART_SetConfig+0x5c8>
 8009706:	6a3b      	ldr	r3, [r7, #32]
 8009708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800970c:	d20c      	bcs.n	8009728 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800970e:	6a3b      	ldr	r3, [r7, #32]
 8009710:	b29a      	uxth	r2, r3
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	60da      	str	r2, [r3, #12]
 8009718:	e009      	b.n	800972e <UART_SetConfig+0x5ce>
 800971a:	bf00      	nop
 800971c:	40008000 	.word	0x40008000
 8009720:	00f42400 	.word	0x00f42400
 8009724:	0800ad5c 	.word	0x0800ad5c
      }
      else
      {
        ret = HAL_ERROR;
 8009728:	2301      	movs	r3, #1
 800972a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	2201      	movs	r2, #1
 8009732:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	2201      	movs	r2, #1
 800973a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	2200      	movs	r2, #0
 8009742:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	2200      	movs	r2, #0
 8009748:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800974a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800974e:	4618      	mov	r0, r3
 8009750:	3730      	adds	r7, #48	; 0x30
 8009752:	46bd      	mov	sp, r7
 8009754:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009758 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009764:	f003 0308 	and.w	r3, r3, #8
 8009768:	2b00      	cmp	r3, #0
 800976a:	d00a      	beq.n	8009782 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	430a      	orrs	r2, r1
 8009780:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009786:	f003 0301 	and.w	r3, r3, #1
 800978a:	2b00      	cmp	r3, #0
 800978c:	d00a      	beq.n	80097a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	430a      	orrs	r2, r1
 80097a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097a8:	f003 0302 	and.w	r3, r3, #2
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d00a      	beq.n	80097c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	430a      	orrs	r2, r1
 80097c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ca:	f003 0304 	and.w	r3, r3, #4
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d00a      	beq.n	80097e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	430a      	orrs	r2, r1
 80097e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ec:	f003 0310 	and.w	r3, r3, #16
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d00a      	beq.n	800980a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	689b      	ldr	r3, [r3, #8]
 80097fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	430a      	orrs	r2, r1
 8009808:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800980e:	f003 0320 	and.w	r3, r3, #32
 8009812:	2b00      	cmp	r3, #0
 8009814:	d00a      	beq.n	800982c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	430a      	orrs	r2, r1
 800982a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009834:	2b00      	cmp	r3, #0
 8009836:	d01a      	beq.n	800986e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	430a      	orrs	r2, r1
 800984c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009852:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009856:	d10a      	bne.n	800986e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	430a      	orrs	r2, r1
 800986c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00a      	beq.n	8009890 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	430a      	orrs	r2, r1
 800988e:	605a      	str	r2, [r3, #4]
  }
}
 8009890:	bf00      	nop
 8009892:	370c      	adds	r7, #12
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr

0800989c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b098      	sub	sp, #96	; 0x60
 80098a0:	af02      	add	r7, sp, #8
 80098a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2200      	movs	r2, #0
 80098a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80098ac:	f7fa f86e 	bl	800398c <HAL_GetTick>
 80098b0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f003 0308 	and.w	r3, r3, #8
 80098bc:	2b08      	cmp	r3, #8
 80098be:	d12f      	bne.n	8009920 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80098c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80098c4:	9300      	str	r3, [sp, #0]
 80098c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098c8:	2200      	movs	r2, #0
 80098ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 f88e 	bl	80099f0 <UART_WaitOnFlagUntilTimeout>
 80098d4:	4603      	mov	r3, r0
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d022      	beq.n	8009920 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e2:	e853 3f00 	ldrex	r3, [r3]
 80098e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80098e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80098ee:	653b      	str	r3, [r7, #80]	; 0x50
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	461a      	mov	r2, r3
 80098f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098f8:	647b      	str	r3, [r7, #68]	; 0x44
 80098fa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80098fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009900:	e841 2300 	strex	r3, r2, [r1]
 8009904:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009908:	2b00      	cmp	r3, #0
 800990a:	d1e6      	bne.n	80098da <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2220      	movs	r2, #32
 8009910:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800991c:	2303      	movs	r3, #3
 800991e:	e063      	b.n	80099e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f003 0304 	and.w	r3, r3, #4
 800992a:	2b04      	cmp	r3, #4
 800992c:	d149      	bne.n	80099c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800992e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009932:	9300      	str	r3, [sp, #0]
 8009934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009936:	2200      	movs	r2, #0
 8009938:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 f857 	bl	80099f0 <UART_WaitOnFlagUntilTimeout>
 8009942:	4603      	mov	r3, r0
 8009944:	2b00      	cmp	r3, #0
 8009946:	d03c      	beq.n	80099c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800994e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009950:	e853 3f00 	ldrex	r3, [r3]
 8009954:	623b      	str	r3, [r7, #32]
   return(result);
 8009956:	6a3b      	ldr	r3, [r7, #32]
 8009958:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800995c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	461a      	mov	r2, r3
 8009964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009966:	633b      	str	r3, [r7, #48]	; 0x30
 8009968:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800996a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800996c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800996e:	e841 2300 	strex	r3, r2, [r1]
 8009972:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009976:	2b00      	cmp	r3, #0
 8009978:	d1e6      	bne.n	8009948 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	3308      	adds	r3, #8
 8009980:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	e853 3f00 	ldrex	r3, [r3]
 8009988:	60fb      	str	r3, [r7, #12]
   return(result);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f023 0301 	bic.w	r3, r3, #1
 8009990:	64bb      	str	r3, [r7, #72]	; 0x48
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	3308      	adds	r3, #8
 8009998:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800999a:	61fa      	str	r2, [r7, #28]
 800999c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800999e:	69b9      	ldr	r1, [r7, #24]
 80099a0:	69fa      	ldr	r2, [r7, #28]
 80099a2:	e841 2300 	strex	r3, r2, [r1]
 80099a6:	617b      	str	r3, [r7, #20]
   return(result);
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d1e5      	bne.n	800997a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2220      	movs	r2, #32
 80099b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2200      	movs	r2, #0
 80099ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099be:	2303      	movs	r3, #3
 80099c0:	e012      	b.n	80099e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2220      	movs	r2, #32
 80099c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2220      	movs	r2, #32
 80099ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2200      	movs	r2, #0
 80099d6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2200      	movs	r2, #0
 80099dc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2200      	movs	r2, #0
 80099e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80099e6:	2300      	movs	r3, #0
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3758      	adds	r7, #88	; 0x58
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	60f8      	str	r0, [r7, #12]
 80099f8:	60b9      	str	r1, [r7, #8]
 80099fa:	603b      	str	r3, [r7, #0]
 80099fc:	4613      	mov	r3, r2
 80099fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a00:	e049      	b.n	8009a96 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a02:	69bb      	ldr	r3, [r7, #24]
 8009a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a08:	d045      	beq.n	8009a96 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a0a:	f7f9 ffbf 	bl	800398c <HAL_GetTick>
 8009a0e:	4602      	mov	r2, r0
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	1ad3      	subs	r3, r2, r3
 8009a14:	69ba      	ldr	r2, [r7, #24]
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d302      	bcc.n	8009a20 <UART_WaitOnFlagUntilTimeout+0x30>
 8009a1a:	69bb      	ldr	r3, [r7, #24]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d101      	bne.n	8009a24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009a20:	2303      	movs	r3, #3
 8009a22:	e048      	b.n	8009ab6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f003 0304 	and.w	r3, r3, #4
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d031      	beq.n	8009a96 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	69db      	ldr	r3, [r3, #28]
 8009a38:	f003 0308 	and.w	r3, r3, #8
 8009a3c:	2b08      	cmp	r3, #8
 8009a3e:	d110      	bne.n	8009a62 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	2208      	movs	r2, #8
 8009a46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009a48:	68f8      	ldr	r0, [r7, #12]
 8009a4a:	f000 f838 	bl	8009abe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2208      	movs	r2, #8
 8009a52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e029      	b.n	8009ab6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	69db      	ldr	r3, [r3, #28]
 8009a68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a70:	d111      	bne.n	8009a96 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009a7c:	68f8      	ldr	r0, [r7, #12]
 8009a7e:	f000 f81e 	bl	8009abe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2220      	movs	r2, #32
 8009a86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009a92:	2303      	movs	r3, #3
 8009a94:	e00f      	b.n	8009ab6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	69da      	ldr	r2, [r3, #28]
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	4013      	ands	r3, r2
 8009aa0:	68ba      	ldr	r2, [r7, #8]
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	bf0c      	ite	eq
 8009aa6:	2301      	moveq	r3, #1
 8009aa8:	2300      	movne	r3, #0
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	461a      	mov	r2, r3
 8009aae:	79fb      	ldrb	r3, [r7, #7]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d0a6      	beq.n	8009a02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ab4:	2300      	movs	r3, #0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3710      	adds	r7, #16
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}

08009abe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009abe:	b480      	push	{r7}
 8009ac0:	b095      	sub	sp, #84	; 0x54
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ace:	e853 3f00 	ldrex	r3, [r3]
 8009ad2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ada:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ae4:	643b      	str	r3, [r7, #64]	; 0x40
 8009ae6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009aea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009aec:	e841 2300 	strex	r3, r2, [r1]
 8009af0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d1e6      	bne.n	8009ac6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	3308      	adds	r3, #8
 8009afe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b00:	6a3b      	ldr	r3, [r7, #32]
 8009b02:	e853 3f00 	ldrex	r3, [r3]
 8009b06:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b08:	69fb      	ldr	r3, [r7, #28]
 8009b0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b0e:	f023 0301 	bic.w	r3, r3, #1
 8009b12:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	3308      	adds	r3, #8
 8009b1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009b1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b24:	e841 2300 	strex	r3, r2, [r1]
 8009b28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d1e3      	bne.n	8009af8 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b34:	2b01      	cmp	r3, #1
 8009b36:	d118      	bne.n	8009b6a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	e853 3f00 	ldrex	r3, [r3]
 8009b44:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	f023 0310 	bic.w	r3, r3, #16
 8009b4c:	647b      	str	r3, [r7, #68]	; 0x44
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	461a      	mov	r2, r3
 8009b54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b56:	61bb      	str	r3, [r7, #24]
 8009b58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b5a:	6979      	ldr	r1, [r7, #20]
 8009b5c:	69ba      	ldr	r2, [r7, #24]
 8009b5e:	e841 2300 	strex	r3, r2, [r1]
 8009b62:	613b      	str	r3, [r7, #16]
   return(result);
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d1e6      	bne.n	8009b38 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2220      	movs	r2, #32
 8009b6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2200      	movs	r2, #0
 8009b76:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009b7e:	bf00      	nop
 8009b80:	3754      	adds	r7, #84	; 0x54
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr

08009b8a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b8a:	b580      	push	{r7, lr}
 8009b8c:	b084      	sub	sp, #16
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ba8:	68f8      	ldr	r0, [r7, #12]
 8009baa:	f7ff fac3 	bl	8009134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009bae:	bf00      	nop
 8009bb0:	3710      	adds	r7, #16
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}

08009bb6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009bb6:	b580      	push	{r7, lr}
 8009bb8:	b088      	sub	sp, #32
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	e853 3f00 	ldrex	r3, [r3]
 8009bca:	60bb      	str	r3, [r7, #8]
   return(result);
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bd2:	61fb      	str	r3, [r7, #28]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	461a      	mov	r2, r3
 8009bda:	69fb      	ldr	r3, [r7, #28]
 8009bdc:	61bb      	str	r3, [r7, #24]
 8009bde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009be0:	6979      	ldr	r1, [r7, #20]
 8009be2:	69ba      	ldr	r2, [r7, #24]
 8009be4:	e841 2300 	strex	r3, r2, [r1]
 8009be8:	613b      	str	r3, [r7, #16]
   return(result);
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d1e6      	bne.n	8009bbe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2220      	movs	r2, #32
 8009bf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f7ff fa8e 	bl	8009120 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c04:	bf00      	nop
 8009c06:	3720      	adds	r7, #32
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}

08009c0c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009c14:	bf00      	nop
 8009c16:	370c      	adds	r7, #12
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b083      	sub	sp, #12
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009c28:	bf00      	nop
 8009c2a:	370c      	adds	r7, #12
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr

08009c34 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b083      	sub	sp, #12
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009c3c:	bf00      	nop
 8009c3e:	370c      	adds	r7, #12
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr

08009c48 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b085      	sub	sp, #20
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	d101      	bne.n	8009c5e <HAL_UARTEx_DisableFifoMode+0x16>
 8009c5a:	2302      	movs	r3, #2
 8009c5c:	e027      	b.n	8009cae <HAL_UARTEx_DisableFifoMode+0x66>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2201      	movs	r2, #1
 8009c62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2224      	movs	r2, #36	; 0x24
 8009c6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f022 0201 	bic.w	r2, r2, #1
 8009c84:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009c8c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2200      	movs	r2, #0
 8009c92:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	68fa      	ldr	r2, [r7, #12]
 8009c9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2220      	movs	r2, #32
 8009ca0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009cac:	2300      	movs	r3, #0
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3714      	adds	r7, #20
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb8:	4770      	bx	lr

08009cba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009cba:	b580      	push	{r7, lr}
 8009cbc:	b084      	sub	sp, #16
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
 8009cc2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d101      	bne.n	8009cd2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009cce:	2302      	movs	r3, #2
 8009cd0:	e02d      	b.n	8009d2e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2224      	movs	r2, #36	; 0x24
 8009cde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f022 0201 	bic.w	r2, r2, #1
 8009cf8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	689b      	ldr	r3, [r3, #8]
 8009d00:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	683a      	ldr	r2, [r7, #0]
 8009d0a:	430a      	orrs	r2, r1
 8009d0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 f850 	bl	8009db4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	68fa      	ldr	r2, [r7, #12]
 8009d1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2220      	movs	r2, #32
 8009d20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2200      	movs	r2, #0
 8009d28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009d2c:	2300      	movs	r3, #0
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}

08009d36 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d36:	b580      	push	{r7, lr}
 8009d38:	b084      	sub	sp, #16
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
 8009d3e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d101      	bne.n	8009d4e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009d4a:	2302      	movs	r3, #2
 8009d4c:	e02d      	b.n	8009daa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2201      	movs	r2, #1
 8009d52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2224      	movs	r2, #36	; 0x24
 8009d5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	681a      	ldr	r2, [r3, #0]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f022 0201 	bic.w	r2, r2, #1
 8009d74:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	689b      	ldr	r3, [r3, #8]
 8009d7c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	683a      	ldr	r2, [r7, #0]
 8009d86:	430a      	orrs	r2, r1
 8009d88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 f812 	bl	8009db4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	68fa      	ldr	r2, [r7, #12]
 8009d96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2220      	movs	r2, #32
 8009d9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2200      	movs	r2, #0
 8009da4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009da8:	2300      	movs	r3, #0
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3710      	adds	r7, #16
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
	...

08009db4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b085      	sub	sp, #20
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d108      	bne.n	8009dd6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2201      	movs	r2, #1
 8009dd0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009dd4:	e031      	b.n	8009e3a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009dd6:	2308      	movs	r3, #8
 8009dd8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009dda:	2308      	movs	r3, #8
 8009ddc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	689b      	ldr	r3, [r3, #8]
 8009de4:	0e5b      	lsrs	r3, r3, #25
 8009de6:	b2db      	uxtb	r3, r3
 8009de8:	f003 0307 	and.w	r3, r3, #7
 8009dec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	689b      	ldr	r3, [r3, #8]
 8009df4:	0f5b      	lsrs	r3, r3, #29
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	f003 0307 	and.w	r3, r3, #7
 8009dfc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009dfe:	7bbb      	ldrb	r3, [r7, #14]
 8009e00:	7b3a      	ldrb	r2, [r7, #12]
 8009e02:	4911      	ldr	r1, [pc, #68]	; (8009e48 <UARTEx_SetNbDataToProcess+0x94>)
 8009e04:	5c8a      	ldrb	r2, [r1, r2]
 8009e06:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009e0a:	7b3a      	ldrb	r2, [r7, #12]
 8009e0c:	490f      	ldr	r1, [pc, #60]	; (8009e4c <UARTEx_SetNbDataToProcess+0x98>)
 8009e0e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e10:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e14:	b29a      	uxth	r2, r3
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e1c:	7bfb      	ldrb	r3, [r7, #15]
 8009e1e:	7b7a      	ldrb	r2, [r7, #13]
 8009e20:	4909      	ldr	r1, [pc, #36]	; (8009e48 <UARTEx_SetNbDataToProcess+0x94>)
 8009e22:	5c8a      	ldrb	r2, [r1, r2]
 8009e24:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009e28:	7b7a      	ldrb	r2, [r7, #13]
 8009e2a:	4908      	ldr	r1, [pc, #32]	; (8009e4c <UARTEx_SetNbDataToProcess+0x98>)
 8009e2c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e32:	b29a      	uxth	r2, r3
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009e3a:	bf00      	nop
 8009e3c:	3714      	adds	r7, #20
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e44:	4770      	bx	lr
 8009e46:	bf00      	nop
 8009e48:	0800ad74 	.word	0x0800ad74
 8009e4c:	0800ad7c 	.word	0x0800ad7c

08009e50 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b08a      	sub	sp, #40	; 0x28
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8009e58:	4b27      	ldr	r3, [pc, #156]	; (8009ef8 <I2Cx_MspInit+0xa8>)
 8009e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e5c:	4a26      	ldr	r2, [pc, #152]	; (8009ef8 <I2Cx_MspInit+0xa8>)
 8009e5e:	f043 0302 	orr.w	r3, r3, #2
 8009e62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009e64:	4b24      	ldr	r3, [pc, #144]	; (8009ef8 <I2Cx_MspInit+0xa8>)
 8009e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e68:	f003 0302 	and.w	r3, r3, #2
 8009e6c:	613b      	str	r3, [r7, #16]
 8009e6e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8009e70:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009e74:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8009e76:	2312      	movs	r3, #18
 8009e78:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e7e:	2303      	movs	r3, #3
 8009e80:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8009e82:	2304      	movs	r3, #4
 8009e84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8009e86:	f107 0314 	add.w	r3, r7, #20
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	481b      	ldr	r0, [pc, #108]	; (8009efc <I2Cx_MspInit+0xac>)
 8009e8e:	f7fa ff15 	bl	8004cbc <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8009e92:	f107 0314 	add.w	r3, r7, #20
 8009e96:	4619      	mov	r1, r3
 8009e98:	4818      	ldr	r0, [pc, #96]	; (8009efc <I2Cx_MspInit+0xac>)
 8009e9a:	f7fa ff0f 	bl	8004cbc <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8009e9e:	4b16      	ldr	r3, [pc, #88]	; (8009ef8 <I2Cx_MspInit+0xa8>)
 8009ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ea2:	4a15      	ldr	r2, [pc, #84]	; (8009ef8 <I2Cx_MspInit+0xa8>)
 8009ea4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009ea8:	6593      	str	r3, [r2, #88]	; 0x58
 8009eaa:	4b13      	ldr	r3, [pc, #76]	; (8009ef8 <I2Cx_MspInit+0xa8>)
 8009eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009eb2:	60fb      	str	r3, [r7, #12]
 8009eb4:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8009eb6:	4b10      	ldr	r3, [pc, #64]	; (8009ef8 <I2Cx_MspInit+0xa8>)
 8009eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eba:	4a0f      	ldr	r2, [pc, #60]	; (8009ef8 <I2Cx_MspInit+0xa8>)
 8009ebc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009ec0:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8009ec2:	4b0d      	ldr	r3, [pc, #52]	; (8009ef8 <I2Cx_MspInit+0xa8>)
 8009ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ec6:	4a0c      	ldr	r2, [pc, #48]	; (8009ef8 <I2Cx_MspInit+0xa8>)
 8009ec8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8009ecc:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8009ece:	2200      	movs	r2, #0
 8009ed0:	210f      	movs	r1, #15
 8009ed2:	2021      	movs	r0, #33	; 0x21
 8009ed4:	f7fa fd00 	bl	80048d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8009ed8:	2021      	movs	r0, #33	; 0x21
 8009eda:	f7fa fd19 	bl	8004910 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8009ede:	2200      	movs	r2, #0
 8009ee0:	210f      	movs	r1, #15
 8009ee2:	2022      	movs	r0, #34	; 0x22
 8009ee4:	f7fa fcf8 	bl	80048d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8009ee8:	2022      	movs	r0, #34	; 0x22
 8009eea:	f7fa fd11 	bl	8004910 <HAL_NVIC_EnableIRQ>
}
 8009eee:	bf00      	nop
 8009ef0:	3728      	adds	r7, #40	; 0x28
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	40021000 	.word	0x40021000
 8009efc:	48000400 	.word	0x48000400

08009f00 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b082      	sub	sp, #8
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	4a12      	ldr	r2, [pc, #72]	; (8009f54 <I2Cx_Init+0x54>)
 8009f0c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	4a11      	ldr	r2, [pc, #68]	; (8009f58 <I2Cx_Init+0x58>)
 8009f12:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2200      	movs	r2, #0
 8009f18:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2200      	movs	r2, #0
 8009f36:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f7ff ff89 	bl	8009e50 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f7fb f970 	bl	8005224 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8009f44:	2100      	movs	r1, #0
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f7fb ff1c 	bl	8005d84 <HAL_I2CEx_ConfigAnalogFilter>
}
 8009f4c:	bf00      	nop
 8009f4e:	3708      	adds	r7, #8
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}
 8009f54:	40005800 	.word	0x40005800
 8009f58:	00702681 	.word	0x00702681

08009f5c <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b08a      	sub	sp, #40	; 0x28
 8009f60:	af04      	add	r7, sp, #16
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	4608      	mov	r0, r1
 8009f66:	4611      	mov	r1, r2
 8009f68:	461a      	mov	r2, r3
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	72fb      	strb	r3, [r7, #11]
 8009f6e:	460b      	mov	r3, r1
 8009f70:	813b      	strh	r3, [r7, #8]
 8009f72:	4613      	mov	r3, r2
 8009f74:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8009f76:	2300      	movs	r3, #0
 8009f78:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8009f7a:	7afb      	ldrb	r3, [r7, #11]
 8009f7c:	b299      	uxth	r1, r3
 8009f7e:	88f8      	ldrh	r0, [r7, #6]
 8009f80:	893a      	ldrh	r2, [r7, #8]
 8009f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009f86:	9302      	str	r3, [sp, #8]
 8009f88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f8a:	9301      	str	r3, [sp, #4]
 8009f8c:	6a3b      	ldr	r3, [r7, #32]
 8009f8e:	9300      	str	r3, [sp, #0]
 8009f90:	4603      	mov	r3, r0
 8009f92:	68f8      	ldr	r0, [r7, #12]
 8009f94:	f7fb fb24 	bl	80055e0 <HAL_I2C_Mem_Read>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8009f9c:	7dfb      	ldrb	r3, [r7, #23]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d004      	beq.n	8009fac <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8009fa2:	7afb      	ldrb	r3, [r7, #11]
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	68f8      	ldr	r0, [r7, #12]
 8009fa8:	f000 f832 	bl	800a010 <I2Cx_Error>
  }
  return status;
 8009fac:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3718      	adds	r7, #24
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}

08009fb6 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8009fb6:	b580      	push	{r7, lr}
 8009fb8:	b08a      	sub	sp, #40	; 0x28
 8009fba:	af04      	add	r7, sp, #16
 8009fbc:	60f8      	str	r0, [r7, #12]
 8009fbe:	4608      	mov	r0, r1
 8009fc0:	4611      	mov	r1, r2
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	72fb      	strb	r3, [r7, #11]
 8009fc8:	460b      	mov	r3, r1
 8009fca:	813b      	strh	r3, [r7, #8]
 8009fcc:	4613      	mov	r3, r2
 8009fce:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8009fd4:	7afb      	ldrb	r3, [r7, #11]
 8009fd6:	b299      	uxth	r1, r3
 8009fd8:	88f8      	ldrh	r0, [r7, #6]
 8009fda:	893a      	ldrh	r2, [r7, #8]
 8009fdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009fe0:	9302      	str	r3, [sp, #8]
 8009fe2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009fe4:	9301      	str	r3, [sp, #4]
 8009fe6:	6a3b      	ldr	r3, [r7, #32]
 8009fe8:	9300      	str	r3, [sp, #0]
 8009fea:	4603      	mov	r3, r0
 8009fec:	68f8      	ldr	r0, [r7, #12]
 8009fee:	f7fb f9e3 	bl	80053b8 <HAL_I2C_Mem_Write>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8009ff6:	7dfb      	ldrb	r3, [r7, #23]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d004      	beq.n	800a006 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8009ffc:	7afb      	ldrb	r3, [r7, #11]
 8009ffe:	4619      	mov	r1, r3
 800a000:	68f8      	ldr	r0, [r7, #12]
 800a002:	f000 f805 	bl	800a010 <I2Cx_Error>
  }
  return status;
 800a006:	7dfb      	ldrb	r3, [r7, #23]
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3718      	adds	r7, #24
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b082      	sub	sp, #8
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	460b      	mov	r3, r1
 800a01a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f7fb f99c 	bl	800535a <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f7ff ff6c 	bl	8009f00 <I2Cx_Init>
}
 800a028:	bf00      	nop
 800a02a:	3708      	adds	r7, #8
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}

0800a030 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 800a034:	4802      	ldr	r0, [pc, #8]	; (800a040 <SENSOR_IO_Init+0x10>)
 800a036:	f7ff ff63 	bl	8009f00 <I2Cx_Init>
}
 800a03a:	bf00      	nop
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	2000130c 	.word	0x2000130c

0800a044 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b084      	sub	sp, #16
 800a048:	af02      	add	r7, sp, #8
 800a04a:	4603      	mov	r3, r0
 800a04c:	71fb      	strb	r3, [r7, #7]
 800a04e:	460b      	mov	r3, r1
 800a050:	71bb      	strb	r3, [r7, #6]
 800a052:	4613      	mov	r3, r2
 800a054:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800a056:	79bb      	ldrb	r3, [r7, #6]
 800a058:	b29a      	uxth	r2, r3
 800a05a:	79f9      	ldrb	r1, [r7, #7]
 800a05c:	2301      	movs	r3, #1
 800a05e:	9301      	str	r3, [sp, #4]
 800a060:	1d7b      	adds	r3, r7, #5
 800a062:	9300      	str	r3, [sp, #0]
 800a064:	2301      	movs	r3, #1
 800a066:	4803      	ldr	r0, [pc, #12]	; (800a074 <SENSOR_IO_Write+0x30>)
 800a068:	f7ff ffa5 	bl	8009fb6 <I2Cx_WriteMultiple>
}
 800a06c:	bf00      	nop
 800a06e:	3708      	adds	r7, #8
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}
 800a074:	2000130c 	.word	0x2000130c

0800a078 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b086      	sub	sp, #24
 800a07c:	af02      	add	r7, sp, #8
 800a07e:	4603      	mov	r3, r0
 800a080:	460a      	mov	r2, r1
 800a082:	71fb      	strb	r3, [r7, #7]
 800a084:	4613      	mov	r3, r2
 800a086:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800a088:	2300      	movs	r3, #0
 800a08a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800a08c:	79bb      	ldrb	r3, [r7, #6]
 800a08e:	b29a      	uxth	r2, r3
 800a090:	79f9      	ldrb	r1, [r7, #7]
 800a092:	2301      	movs	r3, #1
 800a094:	9301      	str	r3, [sp, #4]
 800a096:	f107 030f 	add.w	r3, r7, #15
 800a09a:	9300      	str	r3, [sp, #0]
 800a09c:	2301      	movs	r3, #1
 800a09e:	4804      	ldr	r0, [pc, #16]	; (800a0b0 <SENSOR_IO_Read+0x38>)
 800a0a0:	f7ff ff5c 	bl	8009f5c <I2Cx_ReadMultiple>

  return read_value;
 800a0a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3710      	adds	r7, #16
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
 800a0ae:	bf00      	nop
 800a0b0:	2000130c 	.word	0x2000130c

0800a0b4 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af02      	add	r7, sp, #8
 800a0ba:	603a      	str	r2, [r7, #0]
 800a0bc:	461a      	mov	r2, r3
 800a0be:	4603      	mov	r3, r0
 800a0c0:	71fb      	strb	r3, [r7, #7]
 800a0c2:	460b      	mov	r3, r1
 800a0c4:	71bb      	strb	r3, [r7, #6]
 800a0c6:	4613      	mov	r3, r2
 800a0c8:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800a0ca:	79bb      	ldrb	r3, [r7, #6]
 800a0cc:	b29a      	uxth	r2, r3
 800a0ce:	79f9      	ldrb	r1, [r7, #7]
 800a0d0:	88bb      	ldrh	r3, [r7, #4]
 800a0d2:	9301      	str	r3, [sp, #4]
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	9300      	str	r3, [sp, #0]
 800a0d8:	2301      	movs	r3, #1
 800a0da:	4804      	ldr	r0, [pc, #16]	; (800a0ec <SENSOR_IO_ReadMultiple+0x38>)
 800a0dc:	f7ff ff3e 	bl	8009f5c <I2Cx_ReadMultiple>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	b29b      	uxth	r3, r3
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3708      	adds	r7, #8
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}
 800a0ec:	2000130c 	.word	0x2000130c

0800a0f0 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b082      	sub	sp, #8
 800a0f4:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800a0fa:	4b09      	ldr	r3, [pc, #36]	; (800a120 <BSP_TSENSOR_Init+0x30>)
 800a0fc:	4a09      	ldr	r2, [pc, #36]	; (800a124 <BSP_TSENSOR_Init+0x34>)
 800a0fe:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 800a100:	f7ff ff96 	bl	800a030 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 800a104:	4b06      	ldr	r3, [pc, #24]	; (800a120 <BSP_TSENSOR_Init+0x30>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	2100      	movs	r1, #0
 800a10c:	20be      	movs	r0, #190	; 0xbe
 800a10e:	4798      	blx	r3

  ret = TSENSOR_OK;
 800a110:	2300      	movs	r3, #0
 800a112:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 800a114:	79fb      	ldrb	r3, [r7, #7]
}
 800a116:	4618      	mov	r0, r3
 800a118:	3708      	adds	r7, #8
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	20001360 	.word	0x20001360
 800a124:	20000048 	.word	0x20000048

0800a128 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 800a128:	b580      	push	{r7, lr}
 800a12a:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 800a12c:	4b04      	ldr	r3, [pc, #16]	; (800a140 <BSP_TSENSOR_ReadTemp+0x18>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	68db      	ldr	r3, [r3, #12]
 800a132:	20be      	movs	r0, #190	; 0xbe
 800a134:	4798      	blx	r3
 800a136:	eef0 7a40 	vmov.f32	s15, s0
}
 800a13a:	eeb0 0a67 	vmov.f32	s0, s15
 800a13e:	bd80      	pop	{r7, pc}
 800a140:	20001360 	.word	0x20001360

0800a144 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 800a144:	b580      	push	{r7, lr}
 800a146:	b084      	sub	sp, #16
 800a148:	af00      	add	r7, sp, #0
 800a14a:	4603      	mov	r3, r0
 800a14c:	6039      	str	r1, [r7, #0]
 800a14e:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800a150:	88fb      	ldrh	r3, [r7, #6]
 800a152:	b2db      	uxtb	r3, r3
 800a154:	2120      	movs	r1, #32
 800a156:	4618      	mov	r0, r3
 800a158:	f7ff ff8e 	bl	800a078 <SENSOR_IO_Read>
 800a15c:	4603      	mov	r3, r0
 800a15e:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 800a160:	7bfb      	ldrb	r3, [r7, #15]
 800a162:	f023 0304 	bic.w	r3, r3, #4
 800a166:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800a168:	7bfb      	ldrb	r3, [r7, #15]
 800a16a:	f043 0304 	orr.w	r3, r3, #4
 800a16e:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800a170:	7bfb      	ldrb	r3, [r7, #15]
 800a172:	f023 0303 	bic.w	r3, r3, #3
 800a176:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800a178:	7bfb      	ldrb	r3, [r7, #15]
 800a17a:	f043 0301 	orr.w	r3, r3, #1
 800a17e:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800a180:	7bfb      	ldrb	r3, [r7, #15]
 800a182:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a186:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800a188:	88fb      	ldrh	r3, [r7, #6]
 800a18a:	b2db      	uxtb	r3, r3
 800a18c:	7bfa      	ldrb	r2, [r7, #15]
 800a18e:	2120      	movs	r1, #32
 800a190:	4618      	mov	r0, r3
 800a192:	f7ff ff57 	bl	800a044 <SENSOR_IO_Write>
}
 800a196:	bf00      	nop
 800a198:	3710      	adds	r7, #16
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}

0800a19e <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800a19e:	b580      	push	{r7, lr}
 800a1a0:	b088      	sub	sp, #32
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 800a1a8:	88fb      	ldrh	r3, [r7, #6]
 800a1aa:	b2d8      	uxtb	r0, r3
 800a1ac:	f107 0208 	add.w	r2, r7, #8
 800a1b0:	2302      	movs	r3, #2
 800a1b2:	21b2      	movs	r1, #178	; 0xb2
 800a1b4:	f7ff ff7e 	bl	800a0b4 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 800a1b8:	88fb      	ldrh	r3, [r7, #6]
 800a1ba:	b2db      	uxtb	r3, r3
 800a1bc:	2135      	movs	r1, #53	; 0x35
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f7ff ff5a 	bl	800a078 <SENSOR_IO_Read>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 800a1c8:	7ffb      	ldrb	r3, [r7, #31]
 800a1ca:	021b      	lsls	r3, r3, #8
 800a1cc:	b21b      	sxth	r3, r3
 800a1ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a1d2:	b21a      	sxth	r2, r3
 800a1d4:	7a3b      	ldrb	r3, [r7, #8]
 800a1d6:	b21b      	sxth	r3, r3
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 800a1dc:	7ffb      	ldrb	r3, [r7, #31]
 800a1de:	019b      	lsls	r3, r3, #6
 800a1e0:	b21b      	sxth	r3, r3
 800a1e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a1e6:	b21a      	sxth	r2, r3
 800a1e8:	7a7b      	ldrb	r3, [r7, #9]
 800a1ea:	b21b      	sxth	r3, r3
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 800a1f0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800a1f4:	10db      	asrs	r3, r3, #3
 800a1f6:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 800a1f8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800a1fc:	10db      	asrs	r3, r3, #3
 800a1fe:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 800a200:	88fb      	ldrh	r3, [r7, #6]
 800a202:	b2d8      	uxtb	r0, r3
 800a204:	f107 0208 	add.w	r2, r7, #8
 800a208:	2304      	movs	r3, #4
 800a20a:	21bc      	movs	r1, #188	; 0xbc
 800a20c:	f7ff ff52 	bl	800a0b4 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800a210:	7a7b      	ldrb	r3, [r7, #9]
 800a212:	021b      	lsls	r3, r3, #8
 800a214:	b21a      	sxth	r2, r3
 800a216:	7a3b      	ldrb	r3, [r7, #8]
 800a218:	b21b      	sxth	r3, r3
 800a21a:	4313      	orrs	r3, r2
 800a21c:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800a21e:	7afb      	ldrb	r3, [r7, #11]
 800a220:	021b      	lsls	r3, r3, #8
 800a222:	b21a      	sxth	r2, r3
 800a224:	7abb      	ldrb	r3, [r7, #10]
 800a226:	b21b      	sxth	r3, r3
 800a228:	4313      	orrs	r3, r2
 800a22a:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 800a22c:	88fb      	ldrh	r3, [r7, #6]
 800a22e:	b2d8      	uxtb	r0, r3
 800a230:	f107 0208 	add.w	r2, r7, #8
 800a234:	2302      	movs	r3, #2
 800a236:	21aa      	movs	r1, #170	; 0xaa
 800a238:	f7ff ff3c 	bl	800a0b4 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800a23c:	7a7b      	ldrb	r3, [r7, #9]
 800a23e:	021b      	lsls	r3, r3, #8
 800a240:	b21a      	sxth	r2, r3
 800a242:	7a3b      	ldrb	r3, [r7, #8]
 800a244:	b21b      	sxth	r3, r3
 800a246:	4313      	orrs	r3, r2
 800a248:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800a24a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800a24e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a252:	1ad3      	subs	r3, r2, r3
 800a254:	ee07 3a90 	vmov	s15, r3
 800a258:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a25c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a260:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800a264:	1ad3      	subs	r3, r2, r3
 800a266:	ee07 3a90 	vmov	s15, r3
 800a26a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a26e:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a272:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800a276:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a27a:	1ad3      	subs	r3, r2, r3
 800a27c:	ee07 3a90 	vmov	s15, r3
 800a280:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a284:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a288:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800a28c:	ee07 3a90 	vmov	s15, r3
 800a290:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a294:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a298:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	ee07 3a90 	vmov	s15, r3
}
 800a2a2:	eeb0 0a67 	vmov.f32	s0, s15
 800a2a6:	3720      	adds	r7, #32
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <sniprintf>:
 800a2ac:	b40c      	push	{r2, r3}
 800a2ae:	b530      	push	{r4, r5, lr}
 800a2b0:	4b17      	ldr	r3, [pc, #92]	; (800a310 <sniprintf+0x64>)
 800a2b2:	1e0c      	subs	r4, r1, #0
 800a2b4:	681d      	ldr	r5, [r3, #0]
 800a2b6:	b09d      	sub	sp, #116	; 0x74
 800a2b8:	da08      	bge.n	800a2cc <sniprintf+0x20>
 800a2ba:	238b      	movs	r3, #139	; 0x8b
 800a2bc:	602b      	str	r3, [r5, #0]
 800a2be:	f04f 30ff 	mov.w	r0, #4294967295
 800a2c2:	b01d      	add	sp, #116	; 0x74
 800a2c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a2c8:	b002      	add	sp, #8
 800a2ca:	4770      	bx	lr
 800a2cc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a2d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a2d4:	bf14      	ite	ne
 800a2d6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a2da:	4623      	moveq	r3, r4
 800a2dc:	9304      	str	r3, [sp, #16]
 800a2de:	9307      	str	r3, [sp, #28]
 800a2e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a2e4:	9002      	str	r0, [sp, #8]
 800a2e6:	9006      	str	r0, [sp, #24]
 800a2e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a2ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a2ee:	ab21      	add	r3, sp, #132	; 0x84
 800a2f0:	a902      	add	r1, sp, #8
 800a2f2:	4628      	mov	r0, r5
 800a2f4:	9301      	str	r3, [sp, #4]
 800a2f6:	f000 f9a1 	bl	800a63c <_svfiprintf_r>
 800a2fa:	1c43      	adds	r3, r0, #1
 800a2fc:	bfbc      	itt	lt
 800a2fe:	238b      	movlt	r3, #139	; 0x8b
 800a300:	602b      	strlt	r3, [r5, #0]
 800a302:	2c00      	cmp	r4, #0
 800a304:	d0dd      	beq.n	800a2c2 <sniprintf+0x16>
 800a306:	9b02      	ldr	r3, [sp, #8]
 800a308:	2200      	movs	r2, #0
 800a30a:	701a      	strb	r2, [r3, #0]
 800a30c:	e7d9      	b.n	800a2c2 <sniprintf+0x16>
 800a30e:	bf00      	nop
 800a310:	200000a4 	.word	0x200000a4

0800a314 <memset>:
 800a314:	4402      	add	r2, r0
 800a316:	4603      	mov	r3, r0
 800a318:	4293      	cmp	r3, r2
 800a31a:	d100      	bne.n	800a31e <memset+0xa>
 800a31c:	4770      	bx	lr
 800a31e:	f803 1b01 	strb.w	r1, [r3], #1
 800a322:	e7f9      	b.n	800a318 <memset+0x4>

0800a324 <__errno>:
 800a324:	4b01      	ldr	r3, [pc, #4]	; (800a32c <__errno+0x8>)
 800a326:	6818      	ldr	r0, [r3, #0]
 800a328:	4770      	bx	lr
 800a32a:	bf00      	nop
 800a32c:	200000a4 	.word	0x200000a4

0800a330 <__libc_init_array>:
 800a330:	b570      	push	{r4, r5, r6, lr}
 800a332:	4d0d      	ldr	r5, [pc, #52]	; (800a368 <__libc_init_array+0x38>)
 800a334:	4c0d      	ldr	r4, [pc, #52]	; (800a36c <__libc_init_array+0x3c>)
 800a336:	1b64      	subs	r4, r4, r5
 800a338:	10a4      	asrs	r4, r4, #2
 800a33a:	2600      	movs	r6, #0
 800a33c:	42a6      	cmp	r6, r4
 800a33e:	d109      	bne.n	800a354 <__libc_init_array+0x24>
 800a340:	4d0b      	ldr	r5, [pc, #44]	; (800a370 <__libc_init_array+0x40>)
 800a342:	4c0c      	ldr	r4, [pc, #48]	; (800a374 <__libc_init_array+0x44>)
 800a344:	f000 fca4 	bl	800ac90 <_init>
 800a348:	1b64      	subs	r4, r4, r5
 800a34a:	10a4      	asrs	r4, r4, #2
 800a34c:	2600      	movs	r6, #0
 800a34e:	42a6      	cmp	r6, r4
 800a350:	d105      	bne.n	800a35e <__libc_init_array+0x2e>
 800a352:	bd70      	pop	{r4, r5, r6, pc}
 800a354:	f855 3b04 	ldr.w	r3, [r5], #4
 800a358:	4798      	blx	r3
 800a35a:	3601      	adds	r6, #1
 800a35c:	e7ee      	b.n	800a33c <__libc_init_array+0xc>
 800a35e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a362:	4798      	blx	r3
 800a364:	3601      	adds	r6, #1
 800a366:	e7f2      	b.n	800a34e <__libc_init_array+0x1e>
 800a368:	0800adc0 	.word	0x0800adc0
 800a36c:	0800adc0 	.word	0x0800adc0
 800a370:	0800adc0 	.word	0x0800adc0
 800a374:	0800adc4 	.word	0x0800adc4

0800a378 <__retarget_lock_acquire_recursive>:
 800a378:	4770      	bx	lr

0800a37a <__retarget_lock_release_recursive>:
 800a37a:	4770      	bx	lr

0800a37c <memcpy>:
 800a37c:	440a      	add	r2, r1
 800a37e:	4291      	cmp	r1, r2
 800a380:	f100 33ff 	add.w	r3, r0, #4294967295
 800a384:	d100      	bne.n	800a388 <memcpy+0xc>
 800a386:	4770      	bx	lr
 800a388:	b510      	push	{r4, lr}
 800a38a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a38e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a392:	4291      	cmp	r1, r2
 800a394:	d1f9      	bne.n	800a38a <memcpy+0xe>
 800a396:	bd10      	pop	{r4, pc}

0800a398 <_free_r>:
 800a398:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a39a:	2900      	cmp	r1, #0
 800a39c:	d044      	beq.n	800a428 <_free_r+0x90>
 800a39e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3a2:	9001      	str	r0, [sp, #4]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	f1a1 0404 	sub.w	r4, r1, #4
 800a3aa:	bfb8      	it	lt
 800a3ac:	18e4      	addlt	r4, r4, r3
 800a3ae:	f000 f8df 	bl	800a570 <__malloc_lock>
 800a3b2:	4a1e      	ldr	r2, [pc, #120]	; (800a42c <_free_r+0x94>)
 800a3b4:	9801      	ldr	r0, [sp, #4]
 800a3b6:	6813      	ldr	r3, [r2, #0]
 800a3b8:	b933      	cbnz	r3, 800a3c8 <_free_r+0x30>
 800a3ba:	6063      	str	r3, [r4, #4]
 800a3bc:	6014      	str	r4, [r2, #0]
 800a3be:	b003      	add	sp, #12
 800a3c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a3c4:	f000 b8da 	b.w	800a57c <__malloc_unlock>
 800a3c8:	42a3      	cmp	r3, r4
 800a3ca:	d908      	bls.n	800a3de <_free_r+0x46>
 800a3cc:	6825      	ldr	r5, [r4, #0]
 800a3ce:	1961      	adds	r1, r4, r5
 800a3d0:	428b      	cmp	r3, r1
 800a3d2:	bf01      	itttt	eq
 800a3d4:	6819      	ldreq	r1, [r3, #0]
 800a3d6:	685b      	ldreq	r3, [r3, #4]
 800a3d8:	1949      	addeq	r1, r1, r5
 800a3da:	6021      	streq	r1, [r4, #0]
 800a3dc:	e7ed      	b.n	800a3ba <_free_r+0x22>
 800a3de:	461a      	mov	r2, r3
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	b10b      	cbz	r3, 800a3e8 <_free_r+0x50>
 800a3e4:	42a3      	cmp	r3, r4
 800a3e6:	d9fa      	bls.n	800a3de <_free_r+0x46>
 800a3e8:	6811      	ldr	r1, [r2, #0]
 800a3ea:	1855      	adds	r5, r2, r1
 800a3ec:	42a5      	cmp	r5, r4
 800a3ee:	d10b      	bne.n	800a408 <_free_r+0x70>
 800a3f0:	6824      	ldr	r4, [r4, #0]
 800a3f2:	4421      	add	r1, r4
 800a3f4:	1854      	adds	r4, r2, r1
 800a3f6:	42a3      	cmp	r3, r4
 800a3f8:	6011      	str	r1, [r2, #0]
 800a3fa:	d1e0      	bne.n	800a3be <_free_r+0x26>
 800a3fc:	681c      	ldr	r4, [r3, #0]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	6053      	str	r3, [r2, #4]
 800a402:	440c      	add	r4, r1
 800a404:	6014      	str	r4, [r2, #0]
 800a406:	e7da      	b.n	800a3be <_free_r+0x26>
 800a408:	d902      	bls.n	800a410 <_free_r+0x78>
 800a40a:	230c      	movs	r3, #12
 800a40c:	6003      	str	r3, [r0, #0]
 800a40e:	e7d6      	b.n	800a3be <_free_r+0x26>
 800a410:	6825      	ldr	r5, [r4, #0]
 800a412:	1961      	adds	r1, r4, r5
 800a414:	428b      	cmp	r3, r1
 800a416:	bf04      	itt	eq
 800a418:	6819      	ldreq	r1, [r3, #0]
 800a41a:	685b      	ldreq	r3, [r3, #4]
 800a41c:	6063      	str	r3, [r4, #4]
 800a41e:	bf04      	itt	eq
 800a420:	1949      	addeq	r1, r1, r5
 800a422:	6021      	streq	r1, [r4, #0]
 800a424:	6054      	str	r4, [r2, #4]
 800a426:	e7ca      	b.n	800a3be <_free_r+0x26>
 800a428:	b003      	add	sp, #12
 800a42a:	bd30      	pop	{r4, r5, pc}
 800a42c:	200014a4 	.word	0x200014a4

0800a430 <sbrk_aligned>:
 800a430:	b570      	push	{r4, r5, r6, lr}
 800a432:	4e0e      	ldr	r6, [pc, #56]	; (800a46c <sbrk_aligned+0x3c>)
 800a434:	460c      	mov	r4, r1
 800a436:	6831      	ldr	r1, [r6, #0]
 800a438:	4605      	mov	r5, r0
 800a43a:	b911      	cbnz	r1, 800a442 <sbrk_aligned+0x12>
 800a43c:	f000 fba6 	bl	800ab8c <_sbrk_r>
 800a440:	6030      	str	r0, [r6, #0]
 800a442:	4621      	mov	r1, r4
 800a444:	4628      	mov	r0, r5
 800a446:	f000 fba1 	bl	800ab8c <_sbrk_r>
 800a44a:	1c43      	adds	r3, r0, #1
 800a44c:	d00a      	beq.n	800a464 <sbrk_aligned+0x34>
 800a44e:	1cc4      	adds	r4, r0, #3
 800a450:	f024 0403 	bic.w	r4, r4, #3
 800a454:	42a0      	cmp	r0, r4
 800a456:	d007      	beq.n	800a468 <sbrk_aligned+0x38>
 800a458:	1a21      	subs	r1, r4, r0
 800a45a:	4628      	mov	r0, r5
 800a45c:	f000 fb96 	bl	800ab8c <_sbrk_r>
 800a460:	3001      	adds	r0, #1
 800a462:	d101      	bne.n	800a468 <sbrk_aligned+0x38>
 800a464:	f04f 34ff 	mov.w	r4, #4294967295
 800a468:	4620      	mov	r0, r4
 800a46a:	bd70      	pop	{r4, r5, r6, pc}
 800a46c:	200014a8 	.word	0x200014a8

0800a470 <_malloc_r>:
 800a470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a474:	1ccd      	adds	r5, r1, #3
 800a476:	f025 0503 	bic.w	r5, r5, #3
 800a47a:	3508      	adds	r5, #8
 800a47c:	2d0c      	cmp	r5, #12
 800a47e:	bf38      	it	cc
 800a480:	250c      	movcc	r5, #12
 800a482:	2d00      	cmp	r5, #0
 800a484:	4607      	mov	r7, r0
 800a486:	db01      	blt.n	800a48c <_malloc_r+0x1c>
 800a488:	42a9      	cmp	r1, r5
 800a48a:	d905      	bls.n	800a498 <_malloc_r+0x28>
 800a48c:	230c      	movs	r3, #12
 800a48e:	603b      	str	r3, [r7, #0]
 800a490:	2600      	movs	r6, #0
 800a492:	4630      	mov	r0, r6
 800a494:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a498:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a56c <_malloc_r+0xfc>
 800a49c:	f000 f868 	bl	800a570 <__malloc_lock>
 800a4a0:	f8d8 3000 	ldr.w	r3, [r8]
 800a4a4:	461c      	mov	r4, r3
 800a4a6:	bb5c      	cbnz	r4, 800a500 <_malloc_r+0x90>
 800a4a8:	4629      	mov	r1, r5
 800a4aa:	4638      	mov	r0, r7
 800a4ac:	f7ff ffc0 	bl	800a430 <sbrk_aligned>
 800a4b0:	1c43      	adds	r3, r0, #1
 800a4b2:	4604      	mov	r4, r0
 800a4b4:	d155      	bne.n	800a562 <_malloc_r+0xf2>
 800a4b6:	f8d8 4000 	ldr.w	r4, [r8]
 800a4ba:	4626      	mov	r6, r4
 800a4bc:	2e00      	cmp	r6, #0
 800a4be:	d145      	bne.n	800a54c <_malloc_r+0xdc>
 800a4c0:	2c00      	cmp	r4, #0
 800a4c2:	d048      	beq.n	800a556 <_malloc_r+0xe6>
 800a4c4:	6823      	ldr	r3, [r4, #0]
 800a4c6:	4631      	mov	r1, r6
 800a4c8:	4638      	mov	r0, r7
 800a4ca:	eb04 0903 	add.w	r9, r4, r3
 800a4ce:	f000 fb5d 	bl	800ab8c <_sbrk_r>
 800a4d2:	4581      	cmp	r9, r0
 800a4d4:	d13f      	bne.n	800a556 <_malloc_r+0xe6>
 800a4d6:	6821      	ldr	r1, [r4, #0]
 800a4d8:	1a6d      	subs	r5, r5, r1
 800a4da:	4629      	mov	r1, r5
 800a4dc:	4638      	mov	r0, r7
 800a4de:	f7ff ffa7 	bl	800a430 <sbrk_aligned>
 800a4e2:	3001      	adds	r0, #1
 800a4e4:	d037      	beq.n	800a556 <_malloc_r+0xe6>
 800a4e6:	6823      	ldr	r3, [r4, #0]
 800a4e8:	442b      	add	r3, r5
 800a4ea:	6023      	str	r3, [r4, #0]
 800a4ec:	f8d8 3000 	ldr.w	r3, [r8]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d038      	beq.n	800a566 <_malloc_r+0xf6>
 800a4f4:	685a      	ldr	r2, [r3, #4]
 800a4f6:	42a2      	cmp	r2, r4
 800a4f8:	d12b      	bne.n	800a552 <_malloc_r+0xe2>
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	605a      	str	r2, [r3, #4]
 800a4fe:	e00f      	b.n	800a520 <_malloc_r+0xb0>
 800a500:	6822      	ldr	r2, [r4, #0]
 800a502:	1b52      	subs	r2, r2, r5
 800a504:	d41f      	bmi.n	800a546 <_malloc_r+0xd6>
 800a506:	2a0b      	cmp	r2, #11
 800a508:	d917      	bls.n	800a53a <_malloc_r+0xca>
 800a50a:	1961      	adds	r1, r4, r5
 800a50c:	42a3      	cmp	r3, r4
 800a50e:	6025      	str	r5, [r4, #0]
 800a510:	bf18      	it	ne
 800a512:	6059      	strne	r1, [r3, #4]
 800a514:	6863      	ldr	r3, [r4, #4]
 800a516:	bf08      	it	eq
 800a518:	f8c8 1000 	streq.w	r1, [r8]
 800a51c:	5162      	str	r2, [r4, r5]
 800a51e:	604b      	str	r3, [r1, #4]
 800a520:	4638      	mov	r0, r7
 800a522:	f104 060b 	add.w	r6, r4, #11
 800a526:	f000 f829 	bl	800a57c <__malloc_unlock>
 800a52a:	f026 0607 	bic.w	r6, r6, #7
 800a52e:	1d23      	adds	r3, r4, #4
 800a530:	1af2      	subs	r2, r6, r3
 800a532:	d0ae      	beq.n	800a492 <_malloc_r+0x22>
 800a534:	1b9b      	subs	r3, r3, r6
 800a536:	50a3      	str	r3, [r4, r2]
 800a538:	e7ab      	b.n	800a492 <_malloc_r+0x22>
 800a53a:	42a3      	cmp	r3, r4
 800a53c:	6862      	ldr	r2, [r4, #4]
 800a53e:	d1dd      	bne.n	800a4fc <_malloc_r+0x8c>
 800a540:	f8c8 2000 	str.w	r2, [r8]
 800a544:	e7ec      	b.n	800a520 <_malloc_r+0xb0>
 800a546:	4623      	mov	r3, r4
 800a548:	6864      	ldr	r4, [r4, #4]
 800a54a:	e7ac      	b.n	800a4a6 <_malloc_r+0x36>
 800a54c:	4634      	mov	r4, r6
 800a54e:	6876      	ldr	r6, [r6, #4]
 800a550:	e7b4      	b.n	800a4bc <_malloc_r+0x4c>
 800a552:	4613      	mov	r3, r2
 800a554:	e7cc      	b.n	800a4f0 <_malloc_r+0x80>
 800a556:	230c      	movs	r3, #12
 800a558:	603b      	str	r3, [r7, #0]
 800a55a:	4638      	mov	r0, r7
 800a55c:	f000 f80e 	bl	800a57c <__malloc_unlock>
 800a560:	e797      	b.n	800a492 <_malloc_r+0x22>
 800a562:	6025      	str	r5, [r4, #0]
 800a564:	e7dc      	b.n	800a520 <_malloc_r+0xb0>
 800a566:	605b      	str	r3, [r3, #4]
 800a568:	deff      	udf	#255	; 0xff
 800a56a:	bf00      	nop
 800a56c:	200014a4 	.word	0x200014a4

0800a570 <__malloc_lock>:
 800a570:	4801      	ldr	r0, [pc, #4]	; (800a578 <__malloc_lock+0x8>)
 800a572:	f7ff bf01 	b.w	800a378 <__retarget_lock_acquire_recursive>
 800a576:	bf00      	nop
 800a578:	200014a0 	.word	0x200014a0

0800a57c <__malloc_unlock>:
 800a57c:	4801      	ldr	r0, [pc, #4]	; (800a584 <__malloc_unlock+0x8>)
 800a57e:	f7ff befc 	b.w	800a37a <__retarget_lock_release_recursive>
 800a582:	bf00      	nop
 800a584:	200014a0 	.word	0x200014a0

0800a588 <__ssputs_r>:
 800a588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a58c:	688e      	ldr	r6, [r1, #8]
 800a58e:	461f      	mov	r7, r3
 800a590:	42be      	cmp	r6, r7
 800a592:	680b      	ldr	r3, [r1, #0]
 800a594:	4682      	mov	sl, r0
 800a596:	460c      	mov	r4, r1
 800a598:	4690      	mov	r8, r2
 800a59a:	d82c      	bhi.n	800a5f6 <__ssputs_r+0x6e>
 800a59c:	898a      	ldrh	r2, [r1, #12]
 800a59e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a5a2:	d026      	beq.n	800a5f2 <__ssputs_r+0x6a>
 800a5a4:	6965      	ldr	r5, [r4, #20]
 800a5a6:	6909      	ldr	r1, [r1, #16]
 800a5a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a5ac:	eba3 0901 	sub.w	r9, r3, r1
 800a5b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a5b4:	1c7b      	adds	r3, r7, #1
 800a5b6:	444b      	add	r3, r9
 800a5b8:	106d      	asrs	r5, r5, #1
 800a5ba:	429d      	cmp	r5, r3
 800a5bc:	bf38      	it	cc
 800a5be:	461d      	movcc	r5, r3
 800a5c0:	0553      	lsls	r3, r2, #21
 800a5c2:	d527      	bpl.n	800a614 <__ssputs_r+0x8c>
 800a5c4:	4629      	mov	r1, r5
 800a5c6:	f7ff ff53 	bl	800a470 <_malloc_r>
 800a5ca:	4606      	mov	r6, r0
 800a5cc:	b360      	cbz	r0, 800a628 <__ssputs_r+0xa0>
 800a5ce:	6921      	ldr	r1, [r4, #16]
 800a5d0:	464a      	mov	r2, r9
 800a5d2:	f7ff fed3 	bl	800a37c <memcpy>
 800a5d6:	89a3      	ldrh	r3, [r4, #12]
 800a5d8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a5dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5e0:	81a3      	strh	r3, [r4, #12]
 800a5e2:	6126      	str	r6, [r4, #16]
 800a5e4:	6165      	str	r5, [r4, #20]
 800a5e6:	444e      	add	r6, r9
 800a5e8:	eba5 0509 	sub.w	r5, r5, r9
 800a5ec:	6026      	str	r6, [r4, #0]
 800a5ee:	60a5      	str	r5, [r4, #8]
 800a5f0:	463e      	mov	r6, r7
 800a5f2:	42be      	cmp	r6, r7
 800a5f4:	d900      	bls.n	800a5f8 <__ssputs_r+0x70>
 800a5f6:	463e      	mov	r6, r7
 800a5f8:	6820      	ldr	r0, [r4, #0]
 800a5fa:	4632      	mov	r2, r6
 800a5fc:	4641      	mov	r1, r8
 800a5fe:	f000 faab 	bl	800ab58 <memmove>
 800a602:	68a3      	ldr	r3, [r4, #8]
 800a604:	1b9b      	subs	r3, r3, r6
 800a606:	60a3      	str	r3, [r4, #8]
 800a608:	6823      	ldr	r3, [r4, #0]
 800a60a:	4433      	add	r3, r6
 800a60c:	6023      	str	r3, [r4, #0]
 800a60e:	2000      	movs	r0, #0
 800a610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a614:	462a      	mov	r2, r5
 800a616:	f000 fac9 	bl	800abac <_realloc_r>
 800a61a:	4606      	mov	r6, r0
 800a61c:	2800      	cmp	r0, #0
 800a61e:	d1e0      	bne.n	800a5e2 <__ssputs_r+0x5a>
 800a620:	6921      	ldr	r1, [r4, #16]
 800a622:	4650      	mov	r0, sl
 800a624:	f7ff feb8 	bl	800a398 <_free_r>
 800a628:	230c      	movs	r3, #12
 800a62a:	f8ca 3000 	str.w	r3, [sl]
 800a62e:	89a3      	ldrh	r3, [r4, #12]
 800a630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a634:	81a3      	strh	r3, [r4, #12]
 800a636:	f04f 30ff 	mov.w	r0, #4294967295
 800a63a:	e7e9      	b.n	800a610 <__ssputs_r+0x88>

0800a63c <_svfiprintf_r>:
 800a63c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a640:	4698      	mov	r8, r3
 800a642:	898b      	ldrh	r3, [r1, #12]
 800a644:	061b      	lsls	r3, r3, #24
 800a646:	b09d      	sub	sp, #116	; 0x74
 800a648:	4607      	mov	r7, r0
 800a64a:	460d      	mov	r5, r1
 800a64c:	4614      	mov	r4, r2
 800a64e:	d50e      	bpl.n	800a66e <_svfiprintf_r+0x32>
 800a650:	690b      	ldr	r3, [r1, #16]
 800a652:	b963      	cbnz	r3, 800a66e <_svfiprintf_r+0x32>
 800a654:	2140      	movs	r1, #64	; 0x40
 800a656:	f7ff ff0b 	bl	800a470 <_malloc_r>
 800a65a:	6028      	str	r0, [r5, #0]
 800a65c:	6128      	str	r0, [r5, #16]
 800a65e:	b920      	cbnz	r0, 800a66a <_svfiprintf_r+0x2e>
 800a660:	230c      	movs	r3, #12
 800a662:	603b      	str	r3, [r7, #0]
 800a664:	f04f 30ff 	mov.w	r0, #4294967295
 800a668:	e0d0      	b.n	800a80c <_svfiprintf_r+0x1d0>
 800a66a:	2340      	movs	r3, #64	; 0x40
 800a66c:	616b      	str	r3, [r5, #20]
 800a66e:	2300      	movs	r3, #0
 800a670:	9309      	str	r3, [sp, #36]	; 0x24
 800a672:	2320      	movs	r3, #32
 800a674:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a678:	f8cd 800c 	str.w	r8, [sp, #12]
 800a67c:	2330      	movs	r3, #48	; 0x30
 800a67e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a824 <_svfiprintf_r+0x1e8>
 800a682:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a686:	f04f 0901 	mov.w	r9, #1
 800a68a:	4623      	mov	r3, r4
 800a68c:	469a      	mov	sl, r3
 800a68e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a692:	b10a      	cbz	r2, 800a698 <_svfiprintf_r+0x5c>
 800a694:	2a25      	cmp	r2, #37	; 0x25
 800a696:	d1f9      	bne.n	800a68c <_svfiprintf_r+0x50>
 800a698:	ebba 0b04 	subs.w	fp, sl, r4
 800a69c:	d00b      	beq.n	800a6b6 <_svfiprintf_r+0x7a>
 800a69e:	465b      	mov	r3, fp
 800a6a0:	4622      	mov	r2, r4
 800a6a2:	4629      	mov	r1, r5
 800a6a4:	4638      	mov	r0, r7
 800a6a6:	f7ff ff6f 	bl	800a588 <__ssputs_r>
 800a6aa:	3001      	adds	r0, #1
 800a6ac:	f000 80a9 	beq.w	800a802 <_svfiprintf_r+0x1c6>
 800a6b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6b2:	445a      	add	r2, fp
 800a6b4:	9209      	str	r2, [sp, #36]	; 0x24
 800a6b6:	f89a 3000 	ldrb.w	r3, [sl]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	f000 80a1 	beq.w	800a802 <_svfiprintf_r+0x1c6>
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	f04f 32ff 	mov.w	r2, #4294967295
 800a6c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6ca:	f10a 0a01 	add.w	sl, sl, #1
 800a6ce:	9304      	str	r3, [sp, #16]
 800a6d0:	9307      	str	r3, [sp, #28]
 800a6d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a6d6:	931a      	str	r3, [sp, #104]	; 0x68
 800a6d8:	4654      	mov	r4, sl
 800a6da:	2205      	movs	r2, #5
 800a6dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6e0:	4850      	ldr	r0, [pc, #320]	; (800a824 <_svfiprintf_r+0x1e8>)
 800a6e2:	f7f5 fd95 	bl	8000210 <memchr>
 800a6e6:	9a04      	ldr	r2, [sp, #16]
 800a6e8:	b9d8      	cbnz	r0, 800a722 <_svfiprintf_r+0xe6>
 800a6ea:	06d0      	lsls	r0, r2, #27
 800a6ec:	bf44      	itt	mi
 800a6ee:	2320      	movmi	r3, #32
 800a6f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6f4:	0711      	lsls	r1, r2, #28
 800a6f6:	bf44      	itt	mi
 800a6f8:	232b      	movmi	r3, #43	; 0x2b
 800a6fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6fe:	f89a 3000 	ldrb.w	r3, [sl]
 800a702:	2b2a      	cmp	r3, #42	; 0x2a
 800a704:	d015      	beq.n	800a732 <_svfiprintf_r+0xf6>
 800a706:	9a07      	ldr	r2, [sp, #28]
 800a708:	4654      	mov	r4, sl
 800a70a:	2000      	movs	r0, #0
 800a70c:	f04f 0c0a 	mov.w	ip, #10
 800a710:	4621      	mov	r1, r4
 800a712:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a716:	3b30      	subs	r3, #48	; 0x30
 800a718:	2b09      	cmp	r3, #9
 800a71a:	d94d      	bls.n	800a7b8 <_svfiprintf_r+0x17c>
 800a71c:	b1b0      	cbz	r0, 800a74c <_svfiprintf_r+0x110>
 800a71e:	9207      	str	r2, [sp, #28]
 800a720:	e014      	b.n	800a74c <_svfiprintf_r+0x110>
 800a722:	eba0 0308 	sub.w	r3, r0, r8
 800a726:	fa09 f303 	lsl.w	r3, r9, r3
 800a72a:	4313      	orrs	r3, r2
 800a72c:	9304      	str	r3, [sp, #16]
 800a72e:	46a2      	mov	sl, r4
 800a730:	e7d2      	b.n	800a6d8 <_svfiprintf_r+0x9c>
 800a732:	9b03      	ldr	r3, [sp, #12]
 800a734:	1d19      	adds	r1, r3, #4
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	9103      	str	r1, [sp, #12]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	bfbb      	ittet	lt
 800a73e:	425b      	neglt	r3, r3
 800a740:	f042 0202 	orrlt.w	r2, r2, #2
 800a744:	9307      	strge	r3, [sp, #28]
 800a746:	9307      	strlt	r3, [sp, #28]
 800a748:	bfb8      	it	lt
 800a74a:	9204      	strlt	r2, [sp, #16]
 800a74c:	7823      	ldrb	r3, [r4, #0]
 800a74e:	2b2e      	cmp	r3, #46	; 0x2e
 800a750:	d10c      	bne.n	800a76c <_svfiprintf_r+0x130>
 800a752:	7863      	ldrb	r3, [r4, #1]
 800a754:	2b2a      	cmp	r3, #42	; 0x2a
 800a756:	d134      	bne.n	800a7c2 <_svfiprintf_r+0x186>
 800a758:	9b03      	ldr	r3, [sp, #12]
 800a75a:	1d1a      	adds	r2, r3, #4
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	9203      	str	r2, [sp, #12]
 800a760:	2b00      	cmp	r3, #0
 800a762:	bfb8      	it	lt
 800a764:	f04f 33ff 	movlt.w	r3, #4294967295
 800a768:	3402      	adds	r4, #2
 800a76a:	9305      	str	r3, [sp, #20]
 800a76c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a834 <_svfiprintf_r+0x1f8>
 800a770:	7821      	ldrb	r1, [r4, #0]
 800a772:	2203      	movs	r2, #3
 800a774:	4650      	mov	r0, sl
 800a776:	f7f5 fd4b 	bl	8000210 <memchr>
 800a77a:	b138      	cbz	r0, 800a78c <_svfiprintf_r+0x150>
 800a77c:	9b04      	ldr	r3, [sp, #16]
 800a77e:	eba0 000a 	sub.w	r0, r0, sl
 800a782:	2240      	movs	r2, #64	; 0x40
 800a784:	4082      	lsls	r2, r0
 800a786:	4313      	orrs	r3, r2
 800a788:	3401      	adds	r4, #1
 800a78a:	9304      	str	r3, [sp, #16]
 800a78c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a790:	4825      	ldr	r0, [pc, #148]	; (800a828 <_svfiprintf_r+0x1ec>)
 800a792:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a796:	2206      	movs	r2, #6
 800a798:	f7f5 fd3a 	bl	8000210 <memchr>
 800a79c:	2800      	cmp	r0, #0
 800a79e:	d038      	beq.n	800a812 <_svfiprintf_r+0x1d6>
 800a7a0:	4b22      	ldr	r3, [pc, #136]	; (800a82c <_svfiprintf_r+0x1f0>)
 800a7a2:	bb1b      	cbnz	r3, 800a7ec <_svfiprintf_r+0x1b0>
 800a7a4:	9b03      	ldr	r3, [sp, #12]
 800a7a6:	3307      	adds	r3, #7
 800a7a8:	f023 0307 	bic.w	r3, r3, #7
 800a7ac:	3308      	adds	r3, #8
 800a7ae:	9303      	str	r3, [sp, #12]
 800a7b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7b2:	4433      	add	r3, r6
 800a7b4:	9309      	str	r3, [sp, #36]	; 0x24
 800a7b6:	e768      	b.n	800a68a <_svfiprintf_r+0x4e>
 800a7b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7bc:	460c      	mov	r4, r1
 800a7be:	2001      	movs	r0, #1
 800a7c0:	e7a6      	b.n	800a710 <_svfiprintf_r+0xd4>
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	3401      	adds	r4, #1
 800a7c6:	9305      	str	r3, [sp, #20]
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	f04f 0c0a 	mov.w	ip, #10
 800a7ce:	4620      	mov	r0, r4
 800a7d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7d4:	3a30      	subs	r2, #48	; 0x30
 800a7d6:	2a09      	cmp	r2, #9
 800a7d8:	d903      	bls.n	800a7e2 <_svfiprintf_r+0x1a6>
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d0c6      	beq.n	800a76c <_svfiprintf_r+0x130>
 800a7de:	9105      	str	r1, [sp, #20]
 800a7e0:	e7c4      	b.n	800a76c <_svfiprintf_r+0x130>
 800a7e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7e6:	4604      	mov	r4, r0
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	e7f0      	b.n	800a7ce <_svfiprintf_r+0x192>
 800a7ec:	ab03      	add	r3, sp, #12
 800a7ee:	9300      	str	r3, [sp, #0]
 800a7f0:	462a      	mov	r2, r5
 800a7f2:	4b0f      	ldr	r3, [pc, #60]	; (800a830 <_svfiprintf_r+0x1f4>)
 800a7f4:	a904      	add	r1, sp, #16
 800a7f6:	4638      	mov	r0, r7
 800a7f8:	f3af 8000 	nop.w
 800a7fc:	1c42      	adds	r2, r0, #1
 800a7fe:	4606      	mov	r6, r0
 800a800:	d1d6      	bne.n	800a7b0 <_svfiprintf_r+0x174>
 800a802:	89ab      	ldrh	r3, [r5, #12]
 800a804:	065b      	lsls	r3, r3, #25
 800a806:	f53f af2d 	bmi.w	800a664 <_svfiprintf_r+0x28>
 800a80a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a80c:	b01d      	add	sp, #116	; 0x74
 800a80e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a812:	ab03      	add	r3, sp, #12
 800a814:	9300      	str	r3, [sp, #0]
 800a816:	462a      	mov	r2, r5
 800a818:	4b05      	ldr	r3, [pc, #20]	; (800a830 <_svfiprintf_r+0x1f4>)
 800a81a:	a904      	add	r1, sp, #16
 800a81c:	4638      	mov	r0, r7
 800a81e:	f000 f879 	bl	800a914 <_printf_i>
 800a822:	e7eb      	b.n	800a7fc <_svfiprintf_r+0x1c0>
 800a824:	0800ad84 	.word	0x0800ad84
 800a828:	0800ad8e 	.word	0x0800ad8e
 800a82c:	00000000 	.word	0x00000000
 800a830:	0800a589 	.word	0x0800a589
 800a834:	0800ad8a 	.word	0x0800ad8a

0800a838 <_printf_common>:
 800a838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a83c:	4616      	mov	r6, r2
 800a83e:	4699      	mov	r9, r3
 800a840:	688a      	ldr	r2, [r1, #8]
 800a842:	690b      	ldr	r3, [r1, #16]
 800a844:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a848:	4293      	cmp	r3, r2
 800a84a:	bfb8      	it	lt
 800a84c:	4613      	movlt	r3, r2
 800a84e:	6033      	str	r3, [r6, #0]
 800a850:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a854:	4607      	mov	r7, r0
 800a856:	460c      	mov	r4, r1
 800a858:	b10a      	cbz	r2, 800a85e <_printf_common+0x26>
 800a85a:	3301      	adds	r3, #1
 800a85c:	6033      	str	r3, [r6, #0]
 800a85e:	6823      	ldr	r3, [r4, #0]
 800a860:	0699      	lsls	r1, r3, #26
 800a862:	bf42      	ittt	mi
 800a864:	6833      	ldrmi	r3, [r6, #0]
 800a866:	3302      	addmi	r3, #2
 800a868:	6033      	strmi	r3, [r6, #0]
 800a86a:	6825      	ldr	r5, [r4, #0]
 800a86c:	f015 0506 	ands.w	r5, r5, #6
 800a870:	d106      	bne.n	800a880 <_printf_common+0x48>
 800a872:	f104 0a19 	add.w	sl, r4, #25
 800a876:	68e3      	ldr	r3, [r4, #12]
 800a878:	6832      	ldr	r2, [r6, #0]
 800a87a:	1a9b      	subs	r3, r3, r2
 800a87c:	42ab      	cmp	r3, r5
 800a87e:	dc26      	bgt.n	800a8ce <_printf_common+0x96>
 800a880:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a884:	1e13      	subs	r3, r2, #0
 800a886:	6822      	ldr	r2, [r4, #0]
 800a888:	bf18      	it	ne
 800a88a:	2301      	movne	r3, #1
 800a88c:	0692      	lsls	r2, r2, #26
 800a88e:	d42b      	bmi.n	800a8e8 <_printf_common+0xb0>
 800a890:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a894:	4649      	mov	r1, r9
 800a896:	4638      	mov	r0, r7
 800a898:	47c0      	blx	r8
 800a89a:	3001      	adds	r0, #1
 800a89c:	d01e      	beq.n	800a8dc <_printf_common+0xa4>
 800a89e:	6823      	ldr	r3, [r4, #0]
 800a8a0:	6922      	ldr	r2, [r4, #16]
 800a8a2:	f003 0306 	and.w	r3, r3, #6
 800a8a6:	2b04      	cmp	r3, #4
 800a8a8:	bf02      	ittt	eq
 800a8aa:	68e5      	ldreq	r5, [r4, #12]
 800a8ac:	6833      	ldreq	r3, [r6, #0]
 800a8ae:	1aed      	subeq	r5, r5, r3
 800a8b0:	68a3      	ldr	r3, [r4, #8]
 800a8b2:	bf0c      	ite	eq
 800a8b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a8b8:	2500      	movne	r5, #0
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	bfc4      	itt	gt
 800a8be:	1a9b      	subgt	r3, r3, r2
 800a8c0:	18ed      	addgt	r5, r5, r3
 800a8c2:	2600      	movs	r6, #0
 800a8c4:	341a      	adds	r4, #26
 800a8c6:	42b5      	cmp	r5, r6
 800a8c8:	d11a      	bne.n	800a900 <_printf_common+0xc8>
 800a8ca:	2000      	movs	r0, #0
 800a8cc:	e008      	b.n	800a8e0 <_printf_common+0xa8>
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	4652      	mov	r2, sl
 800a8d2:	4649      	mov	r1, r9
 800a8d4:	4638      	mov	r0, r7
 800a8d6:	47c0      	blx	r8
 800a8d8:	3001      	adds	r0, #1
 800a8da:	d103      	bne.n	800a8e4 <_printf_common+0xac>
 800a8dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a8e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8e4:	3501      	adds	r5, #1
 800a8e6:	e7c6      	b.n	800a876 <_printf_common+0x3e>
 800a8e8:	18e1      	adds	r1, r4, r3
 800a8ea:	1c5a      	adds	r2, r3, #1
 800a8ec:	2030      	movs	r0, #48	; 0x30
 800a8ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a8f2:	4422      	add	r2, r4
 800a8f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a8f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a8fc:	3302      	adds	r3, #2
 800a8fe:	e7c7      	b.n	800a890 <_printf_common+0x58>
 800a900:	2301      	movs	r3, #1
 800a902:	4622      	mov	r2, r4
 800a904:	4649      	mov	r1, r9
 800a906:	4638      	mov	r0, r7
 800a908:	47c0      	blx	r8
 800a90a:	3001      	adds	r0, #1
 800a90c:	d0e6      	beq.n	800a8dc <_printf_common+0xa4>
 800a90e:	3601      	adds	r6, #1
 800a910:	e7d9      	b.n	800a8c6 <_printf_common+0x8e>
	...

0800a914 <_printf_i>:
 800a914:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a918:	7e0f      	ldrb	r7, [r1, #24]
 800a91a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a91c:	2f78      	cmp	r7, #120	; 0x78
 800a91e:	4691      	mov	r9, r2
 800a920:	4680      	mov	r8, r0
 800a922:	460c      	mov	r4, r1
 800a924:	469a      	mov	sl, r3
 800a926:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a92a:	d807      	bhi.n	800a93c <_printf_i+0x28>
 800a92c:	2f62      	cmp	r7, #98	; 0x62
 800a92e:	d80a      	bhi.n	800a946 <_printf_i+0x32>
 800a930:	2f00      	cmp	r7, #0
 800a932:	f000 80d4 	beq.w	800aade <_printf_i+0x1ca>
 800a936:	2f58      	cmp	r7, #88	; 0x58
 800a938:	f000 80c0 	beq.w	800aabc <_printf_i+0x1a8>
 800a93c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a940:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a944:	e03a      	b.n	800a9bc <_printf_i+0xa8>
 800a946:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a94a:	2b15      	cmp	r3, #21
 800a94c:	d8f6      	bhi.n	800a93c <_printf_i+0x28>
 800a94e:	a101      	add	r1, pc, #4	; (adr r1, 800a954 <_printf_i+0x40>)
 800a950:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a954:	0800a9ad 	.word	0x0800a9ad
 800a958:	0800a9c1 	.word	0x0800a9c1
 800a95c:	0800a93d 	.word	0x0800a93d
 800a960:	0800a93d 	.word	0x0800a93d
 800a964:	0800a93d 	.word	0x0800a93d
 800a968:	0800a93d 	.word	0x0800a93d
 800a96c:	0800a9c1 	.word	0x0800a9c1
 800a970:	0800a93d 	.word	0x0800a93d
 800a974:	0800a93d 	.word	0x0800a93d
 800a978:	0800a93d 	.word	0x0800a93d
 800a97c:	0800a93d 	.word	0x0800a93d
 800a980:	0800aac5 	.word	0x0800aac5
 800a984:	0800a9ed 	.word	0x0800a9ed
 800a988:	0800aa7f 	.word	0x0800aa7f
 800a98c:	0800a93d 	.word	0x0800a93d
 800a990:	0800a93d 	.word	0x0800a93d
 800a994:	0800aae7 	.word	0x0800aae7
 800a998:	0800a93d 	.word	0x0800a93d
 800a99c:	0800a9ed 	.word	0x0800a9ed
 800a9a0:	0800a93d 	.word	0x0800a93d
 800a9a4:	0800a93d 	.word	0x0800a93d
 800a9a8:	0800aa87 	.word	0x0800aa87
 800a9ac:	682b      	ldr	r3, [r5, #0]
 800a9ae:	1d1a      	adds	r2, r3, #4
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	602a      	str	r2, [r5, #0]
 800a9b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a9b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a9bc:	2301      	movs	r3, #1
 800a9be:	e09f      	b.n	800ab00 <_printf_i+0x1ec>
 800a9c0:	6820      	ldr	r0, [r4, #0]
 800a9c2:	682b      	ldr	r3, [r5, #0]
 800a9c4:	0607      	lsls	r7, r0, #24
 800a9c6:	f103 0104 	add.w	r1, r3, #4
 800a9ca:	6029      	str	r1, [r5, #0]
 800a9cc:	d501      	bpl.n	800a9d2 <_printf_i+0xbe>
 800a9ce:	681e      	ldr	r6, [r3, #0]
 800a9d0:	e003      	b.n	800a9da <_printf_i+0xc6>
 800a9d2:	0646      	lsls	r6, r0, #25
 800a9d4:	d5fb      	bpl.n	800a9ce <_printf_i+0xba>
 800a9d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a9da:	2e00      	cmp	r6, #0
 800a9dc:	da03      	bge.n	800a9e6 <_printf_i+0xd2>
 800a9de:	232d      	movs	r3, #45	; 0x2d
 800a9e0:	4276      	negs	r6, r6
 800a9e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9e6:	485a      	ldr	r0, [pc, #360]	; (800ab50 <_printf_i+0x23c>)
 800a9e8:	230a      	movs	r3, #10
 800a9ea:	e012      	b.n	800aa12 <_printf_i+0xfe>
 800a9ec:	682b      	ldr	r3, [r5, #0]
 800a9ee:	6820      	ldr	r0, [r4, #0]
 800a9f0:	1d19      	adds	r1, r3, #4
 800a9f2:	6029      	str	r1, [r5, #0]
 800a9f4:	0605      	lsls	r5, r0, #24
 800a9f6:	d501      	bpl.n	800a9fc <_printf_i+0xe8>
 800a9f8:	681e      	ldr	r6, [r3, #0]
 800a9fa:	e002      	b.n	800aa02 <_printf_i+0xee>
 800a9fc:	0641      	lsls	r1, r0, #25
 800a9fe:	d5fb      	bpl.n	800a9f8 <_printf_i+0xe4>
 800aa00:	881e      	ldrh	r6, [r3, #0]
 800aa02:	4853      	ldr	r0, [pc, #332]	; (800ab50 <_printf_i+0x23c>)
 800aa04:	2f6f      	cmp	r7, #111	; 0x6f
 800aa06:	bf0c      	ite	eq
 800aa08:	2308      	moveq	r3, #8
 800aa0a:	230a      	movne	r3, #10
 800aa0c:	2100      	movs	r1, #0
 800aa0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aa12:	6865      	ldr	r5, [r4, #4]
 800aa14:	60a5      	str	r5, [r4, #8]
 800aa16:	2d00      	cmp	r5, #0
 800aa18:	bfa2      	ittt	ge
 800aa1a:	6821      	ldrge	r1, [r4, #0]
 800aa1c:	f021 0104 	bicge.w	r1, r1, #4
 800aa20:	6021      	strge	r1, [r4, #0]
 800aa22:	b90e      	cbnz	r6, 800aa28 <_printf_i+0x114>
 800aa24:	2d00      	cmp	r5, #0
 800aa26:	d04b      	beq.n	800aac0 <_printf_i+0x1ac>
 800aa28:	4615      	mov	r5, r2
 800aa2a:	fbb6 f1f3 	udiv	r1, r6, r3
 800aa2e:	fb03 6711 	mls	r7, r3, r1, r6
 800aa32:	5dc7      	ldrb	r7, [r0, r7]
 800aa34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aa38:	4637      	mov	r7, r6
 800aa3a:	42bb      	cmp	r3, r7
 800aa3c:	460e      	mov	r6, r1
 800aa3e:	d9f4      	bls.n	800aa2a <_printf_i+0x116>
 800aa40:	2b08      	cmp	r3, #8
 800aa42:	d10b      	bne.n	800aa5c <_printf_i+0x148>
 800aa44:	6823      	ldr	r3, [r4, #0]
 800aa46:	07de      	lsls	r6, r3, #31
 800aa48:	d508      	bpl.n	800aa5c <_printf_i+0x148>
 800aa4a:	6923      	ldr	r3, [r4, #16]
 800aa4c:	6861      	ldr	r1, [r4, #4]
 800aa4e:	4299      	cmp	r1, r3
 800aa50:	bfde      	ittt	le
 800aa52:	2330      	movle	r3, #48	; 0x30
 800aa54:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aa58:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aa5c:	1b52      	subs	r2, r2, r5
 800aa5e:	6122      	str	r2, [r4, #16]
 800aa60:	f8cd a000 	str.w	sl, [sp]
 800aa64:	464b      	mov	r3, r9
 800aa66:	aa03      	add	r2, sp, #12
 800aa68:	4621      	mov	r1, r4
 800aa6a:	4640      	mov	r0, r8
 800aa6c:	f7ff fee4 	bl	800a838 <_printf_common>
 800aa70:	3001      	adds	r0, #1
 800aa72:	d14a      	bne.n	800ab0a <_printf_i+0x1f6>
 800aa74:	f04f 30ff 	mov.w	r0, #4294967295
 800aa78:	b004      	add	sp, #16
 800aa7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa7e:	6823      	ldr	r3, [r4, #0]
 800aa80:	f043 0320 	orr.w	r3, r3, #32
 800aa84:	6023      	str	r3, [r4, #0]
 800aa86:	4833      	ldr	r0, [pc, #204]	; (800ab54 <_printf_i+0x240>)
 800aa88:	2778      	movs	r7, #120	; 0x78
 800aa8a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aa8e:	6823      	ldr	r3, [r4, #0]
 800aa90:	6829      	ldr	r1, [r5, #0]
 800aa92:	061f      	lsls	r7, r3, #24
 800aa94:	f851 6b04 	ldr.w	r6, [r1], #4
 800aa98:	d402      	bmi.n	800aaa0 <_printf_i+0x18c>
 800aa9a:	065f      	lsls	r7, r3, #25
 800aa9c:	bf48      	it	mi
 800aa9e:	b2b6      	uxthmi	r6, r6
 800aaa0:	07df      	lsls	r7, r3, #31
 800aaa2:	bf48      	it	mi
 800aaa4:	f043 0320 	orrmi.w	r3, r3, #32
 800aaa8:	6029      	str	r1, [r5, #0]
 800aaaa:	bf48      	it	mi
 800aaac:	6023      	strmi	r3, [r4, #0]
 800aaae:	b91e      	cbnz	r6, 800aab8 <_printf_i+0x1a4>
 800aab0:	6823      	ldr	r3, [r4, #0]
 800aab2:	f023 0320 	bic.w	r3, r3, #32
 800aab6:	6023      	str	r3, [r4, #0]
 800aab8:	2310      	movs	r3, #16
 800aaba:	e7a7      	b.n	800aa0c <_printf_i+0xf8>
 800aabc:	4824      	ldr	r0, [pc, #144]	; (800ab50 <_printf_i+0x23c>)
 800aabe:	e7e4      	b.n	800aa8a <_printf_i+0x176>
 800aac0:	4615      	mov	r5, r2
 800aac2:	e7bd      	b.n	800aa40 <_printf_i+0x12c>
 800aac4:	682b      	ldr	r3, [r5, #0]
 800aac6:	6826      	ldr	r6, [r4, #0]
 800aac8:	6961      	ldr	r1, [r4, #20]
 800aaca:	1d18      	adds	r0, r3, #4
 800aacc:	6028      	str	r0, [r5, #0]
 800aace:	0635      	lsls	r5, r6, #24
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	d501      	bpl.n	800aad8 <_printf_i+0x1c4>
 800aad4:	6019      	str	r1, [r3, #0]
 800aad6:	e002      	b.n	800aade <_printf_i+0x1ca>
 800aad8:	0670      	lsls	r0, r6, #25
 800aada:	d5fb      	bpl.n	800aad4 <_printf_i+0x1c0>
 800aadc:	8019      	strh	r1, [r3, #0]
 800aade:	2300      	movs	r3, #0
 800aae0:	6123      	str	r3, [r4, #16]
 800aae2:	4615      	mov	r5, r2
 800aae4:	e7bc      	b.n	800aa60 <_printf_i+0x14c>
 800aae6:	682b      	ldr	r3, [r5, #0]
 800aae8:	1d1a      	adds	r2, r3, #4
 800aaea:	602a      	str	r2, [r5, #0]
 800aaec:	681d      	ldr	r5, [r3, #0]
 800aaee:	6862      	ldr	r2, [r4, #4]
 800aaf0:	2100      	movs	r1, #0
 800aaf2:	4628      	mov	r0, r5
 800aaf4:	f7f5 fb8c 	bl	8000210 <memchr>
 800aaf8:	b108      	cbz	r0, 800aafe <_printf_i+0x1ea>
 800aafa:	1b40      	subs	r0, r0, r5
 800aafc:	6060      	str	r0, [r4, #4]
 800aafe:	6863      	ldr	r3, [r4, #4]
 800ab00:	6123      	str	r3, [r4, #16]
 800ab02:	2300      	movs	r3, #0
 800ab04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab08:	e7aa      	b.n	800aa60 <_printf_i+0x14c>
 800ab0a:	6923      	ldr	r3, [r4, #16]
 800ab0c:	462a      	mov	r2, r5
 800ab0e:	4649      	mov	r1, r9
 800ab10:	4640      	mov	r0, r8
 800ab12:	47d0      	blx	sl
 800ab14:	3001      	adds	r0, #1
 800ab16:	d0ad      	beq.n	800aa74 <_printf_i+0x160>
 800ab18:	6823      	ldr	r3, [r4, #0]
 800ab1a:	079b      	lsls	r3, r3, #30
 800ab1c:	d413      	bmi.n	800ab46 <_printf_i+0x232>
 800ab1e:	68e0      	ldr	r0, [r4, #12]
 800ab20:	9b03      	ldr	r3, [sp, #12]
 800ab22:	4298      	cmp	r0, r3
 800ab24:	bfb8      	it	lt
 800ab26:	4618      	movlt	r0, r3
 800ab28:	e7a6      	b.n	800aa78 <_printf_i+0x164>
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	4632      	mov	r2, r6
 800ab2e:	4649      	mov	r1, r9
 800ab30:	4640      	mov	r0, r8
 800ab32:	47d0      	blx	sl
 800ab34:	3001      	adds	r0, #1
 800ab36:	d09d      	beq.n	800aa74 <_printf_i+0x160>
 800ab38:	3501      	adds	r5, #1
 800ab3a:	68e3      	ldr	r3, [r4, #12]
 800ab3c:	9903      	ldr	r1, [sp, #12]
 800ab3e:	1a5b      	subs	r3, r3, r1
 800ab40:	42ab      	cmp	r3, r5
 800ab42:	dcf2      	bgt.n	800ab2a <_printf_i+0x216>
 800ab44:	e7eb      	b.n	800ab1e <_printf_i+0x20a>
 800ab46:	2500      	movs	r5, #0
 800ab48:	f104 0619 	add.w	r6, r4, #25
 800ab4c:	e7f5      	b.n	800ab3a <_printf_i+0x226>
 800ab4e:	bf00      	nop
 800ab50:	0800ad95 	.word	0x0800ad95
 800ab54:	0800ada6 	.word	0x0800ada6

0800ab58 <memmove>:
 800ab58:	4288      	cmp	r0, r1
 800ab5a:	b510      	push	{r4, lr}
 800ab5c:	eb01 0402 	add.w	r4, r1, r2
 800ab60:	d902      	bls.n	800ab68 <memmove+0x10>
 800ab62:	4284      	cmp	r4, r0
 800ab64:	4623      	mov	r3, r4
 800ab66:	d807      	bhi.n	800ab78 <memmove+0x20>
 800ab68:	1e43      	subs	r3, r0, #1
 800ab6a:	42a1      	cmp	r1, r4
 800ab6c:	d008      	beq.n	800ab80 <memmove+0x28>
 800ab6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab72:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ab76:	e7f8      	b.n	800ab6a <memmove+0x12>
 800ab78:	4402      	add	r2, r0
 800ab7a:	4601      	mov	r1, r0
 800ab7c:	428a      	cmp	r2, r1
 800ab7e:	d100      	bne.n	800ab82 <memmove+0x2a>
 800ab80:	bd10      	pop	{r4, pc}
 800ab82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ab8a:	e7f7      	b.n	800ab7c <memmove+0x24>

0800ab8c <_sbrk_r>:
 800ab8c:	b538      	push	{r3, r4, r5, lr}
 800ab8e:	4d06      	ldr	r5, [pc, #24]	; (800aba8 <_sbrk_r+0x1c>)
 800ab90:	2300      	movs	r3, #0
 800ab92:	4604      	mov	r4, r0
 800ab94:	4608      	mov	r0, r1
 800ab96:	602b      	str	r3, [r5, #0]
 800ab98:	f7f8 fe5a 	bl	8003850 <_sbrk>
 800ab9c:	1c43      	adds	r3, r0, #1
 800ab9e:	d102      	bne.n	800aba6 <_sbrk_r+0x1a>
 800aba0:	682b      	ldr	r3, [r5, #0]
 800aba2:	b103      	cbz	r3, 800aba6 <_sbrk_r+0x1a>
 800aba4:	6023      	str	r3, [r4, #0]
 800aba6:	bd38      	pop	{r3, r4, r5, pc}
 800aba8:	2000149c 	.word	0x2000149c

0800abac <_realloc_r>:
 800abac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abb0:	4680      	mov	r8, r0
 800abb2:	4614      	mov	r4, r2
 800abb4:	460e      	mov	r6, r1
 800abb6:	b921      	cbnz	r1, 800abc2 <_realloc_r+0x16>
 800abb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abbc:	4611      	mov	r1, r2
 800abbe:	f7ff bc57 	b.w	800a470 <_malloc_r>
 800abc2:	b92a      	cbnz	r2, 800abd0 <_realloc_r+0x24>
 800abc4:	f7ff fbe8 	bl	800a398 <_free_r>
 800abc8:	4625      	mov	r5, r4
 800abca:	4628      	mov	r0, r5
 800abcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abd0:	f000 f81b 	bl	800ac0a <_malloc_usable_size_r>
 800abd4:	4284      	cmp	r4, r0
 800abd6:	4607      	mov	r7, r0
 800abd8:	d802      	bhi.n	800abe0 <_realloc_r+0x34>
 800abda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800abde:	d812      	bhi.n	800ac06 <_realloc_r+0x5a>
 800abe0:	4621      	mov	r1, r4
 800abe2:	4640      	mov	r0, r8
 800abe4:	f7ff fc44 	bl	800a470 <_malloc_r>
 800abe8:	4605      	mov	r5, r0
 800abea:	2800      	cmp	r0, #0
 800abec:	d0ed      	beq.n	800abca <_realloc_r+0x1e>
 800abee:	42bc      	cmp	r4, r7
 800abf0:	4622      	mov	r2, r4
 800abf2:	4631      	mov	r1, r6
 800abf4:	bf28      	it	cs
 800abf6:	463a      	movcs	r2, r7
 800abf8:	f7ff fbc0 	bl	800a37c <memcpy>
 800abfc:	4631      	mov	r1, r6
 800abfe:	4640      	mov	r0, r8
 800ac00:	f7ff fbca 	bl	800a398 <_free_r>
 800ac04:	e7e1      	b.n	800abca <_realloc_r+0x1e>
 800ac06:	4635      	mov	r5, r6
 800ac08:	e7df      	b.n	800abca <_realloc_r+0x1e>

0800ac0a <_malloc_usable_size_r>:
 800ac0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac0e:	1f18      	subs	r0, r3, #4
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	bfbc      	itt	lt
 800ac14:	580b      	ldrlt	r3, [r1, r0]
 800ac16:	18c0      	addlt	r0, r0, r3
 800ac18:	4770      	bx	lr
	...

0800ac1c <trunc>:
 800ac1c:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 800ac20:	ec5c bb10 	vmov	fp, ip, d0
 800ac24:	f3cc 500a 	ubfx	r0, ip, #20, #11
 800ac28:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 800ac2c:	2913      	cmp	r1, #19
 800ac2e:	4664      	mov	r4, ip
 800ac30:	dc11      	bgt.n	800ac56 <trunc+0x3a>
 800ac32:	2900      	cmp	r1, #0
 800ac34:	bfa7      	ittee	ge
 800ac36:	4b15      	ldrge	r3, [pc, #84]	; (800ac8c <trunc+0x70>)
 800ac38:	fa43 f101 	asrge.w	r1, r3, r1
 800ac3c:	2200      	movlt	r2, #0
 800ac3e:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 800ac42:	bfa4      	itt	ge
 800ac44:	2200      	movge	r2, #0
 800ac46:	ea01 030c 	andge.w	r3, r1, ip
 800ac4a:	4693      	mov	fp, r2
 800ac4c:	469c      	mov	ip, r3
 800ac4e:	ec4c bb10 	vmov	d0, fp, ip
 800ac52:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 800ac56:	2933      	cmp	r1, #51	; 0x33
 800ac58:	dd0d      	ble.n	800ac76 <trunc+0x5a>
 800ac5a:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ac5e:	d1f6      	bne.n	800ac4e <trunc+0x32>
 800ac60:	4663      	mov	r3, ip
 800ac62:	ee10 2a10 	vmov	r2, s0
 800ac66:	ee10 0a10 	vmov	r0, s0
 800ac6a:	4621      	mov	r1, r4
 800ac6c:	f7f5 fb26 	bl	80002bc <__adddf3>
 800ac70:	4683      	mov	fp, r0
 800ac72:	468c      	mov	ip, r1
 800ac74:	e7eb      	b.n	800ac4e <trunc+0x32>
 800ac76:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 800ac7a:	f04f 33ff 	mov.w	r3, #4294967295
 800ac7e:	40c3      	lsrs	r3, r0
 800ac80:	ea2b 0603 	bic.w	r6, fp, r3
 800ac84:	46b3      	mov	fp, r6
 800ac86:	46a4      	mov	ip, r4
 800ac88:	e7e1      	b.n	800ac4e <trunc+0x32>
 800ac8a:	bf00      	nop
 800ac8c:	fff00000 	.word	0xfff00000

0800ac90 <_init>:
 800ac90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac92:	bf00      	nop
 800ac94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac96:	bc08      	pop	{r3}
 800ac98:	469e      	mov	lr, r3
 800ac9a:	4770      	bx	lr

0800ac9c <_fini>:
 800ac9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac9e:	bf00      	nop
 800aca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aca2:	bc08      	pop	{r3}
 800aca4:	469e      	mov	lr, r3
 800aca6:	4770      	bx	lr

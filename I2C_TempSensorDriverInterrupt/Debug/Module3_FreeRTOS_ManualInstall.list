
Module3_FreeRTOS_ManualInstall.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a00  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08006bc0  08006bc0  00016bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c30  08006c30  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006c30  08006c30  00016c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c38  08006c38  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c38  08006c38  00016c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c3c  08006c3c  00016c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006c40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e4  2000000c  08006c4c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f0  08006c4c  000205f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021861  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a04  00000000  00000000  000418e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d88  00000000  00000000  000452e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001735  00000000  00000000  00047070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d375  00000000  00000000  000487a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022945  00000000  00000000  00075b1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012df77  00000000  00000000  0009845f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000800c  00000000  00000000  001c63d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  001ce3e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000000c 	.word	0x2000000c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08006ba8 	.word	0x08006ba8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000010 	.word	0x20000010
 80001fc:	08006ba8 	.word	0x08006ba8

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b970 	b.w	80004f8 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9e08      	ldr	r6, [sp, #32]
 8000236:	460d      	mov	r5, r1
 8000238:	4604      	mov	r4, r0
 800023a:	460f      	mov	r7, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14a      	bne.n	80002d6 <__udivmoddi4+0xa6>
 8000240:	428a      	cmp	r2, r1
 8000242:	4694      	mov	ip, r2
 8000244:	d965      	bls.n	8000312 <__udivmoddi4+0xe2>
 8000246:	fab2 f382 	clz	r3, r2
 800024a:	b143      	cbz	r3, 800025e <__udivmoddi4+0x2e>
 800024c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000250:	f1c3 0220 	rsb	r2, r3, #32
 8000254:	409f      	lsls	r7, r3
 8000256:	fa20 f202 	lsr.w	r2, r0, r2
 800025a:	4317      	orrs	r7, r2
 800025c:	409c      	lsls	r4, r3
 800025e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000262:	fa1f f58c 	uxth.w	r5, ip
 8000266:	fbb7 f1fe 	udiv	r1, r7, lr
 800026a:	0c22      	lsrs	r2, r4, #16
 800026c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000270:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000274:	fb01 f005 	mul.w	r0, r1, r5
 8000278:	4290      	cmp	r0, r2
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x62>
 800027c:	eb1c 0202 	adds.w	r2, ip, r2
 8000280:	f101 37ff 	add.w	r7, r1, #4294967295
 8000284:	f080 811c 	bcs.w	80004c0 <__udivmoddi4+0x290>
 8000288:	4290      	cmp	r0, r2
 800028a:	f240 8119 	bls.w	80004c0 <__udivmoddi4+0x290>
 800028e:	3902      	subs	r1, #2
 8000290:	4462      	add	r2, ip
 8000292:	1a12      	subs	r2, r2, r0
 8000294:	b2a4      	uxth	r4, r4
 8000296:	fbb2 f0fe 	udiv	r0, r2, lr
 800029a:	fb0e 2210 	mls	r2, lr, r0, r2
 800029e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a2:	fb00 f505 	mul.w	r5, r0, r5
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x90>
 80002aa:	eb1c 0404 	adds.w	r4, ip, r4
 80002ae:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x294>
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x294>
 80002bc:	4464      	add	r4, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c4:	1b64      	subs	r4, r4, r5
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11e      	cbz	r6, 80002d2 <__udivmoddi4+0xa2>
 80002ca:	40dc      	lsrs	r4, r3
 80002cc:	2300      	movs	r3, #0
 80002ce:	e9c6 4300 	strd	r4, r3, [r6]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d908      	bls.n	80002ec <__udivmoddi4+0xbc>
 80002da:	2e00      	cmp	r6, #0
 80002dc:	f000 80ed 	beq.w	80004ba <__udivmoddi4+0x28a>
 80002e0:	2100      	movs	r1, #0
 80002e2:	e9c6 0500 	strd	r0, r5, [r6]
 80002e6:	4608      	mov	r0, r1
 80002e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ec:	fab3 f183 	clz	r1, r3
 80002f0:	2900      	cmp	r1, #0
 80002f2:	d149      	bne.n	8000388 <__udivmoddi4+0x158>
 80002f4:	42ab      	cmp	r3, r5
 80002f6:	d302      	bcc.n	80002fe <__udivmoddi4+0xce>
 80002f8:	4282      	cmp	r2, r0
 80002fa:	f200 80f8 	bhi.w	80004ee <__udivmoddi4+0x2be>
 80002fe:	1a84      	subs	r4, r0, r2
 8000300:	eb65 0203 	sbc.w	r2, r5, r3
 8000304:	2001      	movs	r0, #1
 8000306:	4617      	mov	r7, r2
 8000308:	2e00      	cmp	r6, #0
 800030a:	d0e2      	beq.n	80002d2 <__udivmoddi4+0xa2>
 800030c:	e9c6 4700 	strd	r4, r7, [r6]
 8000310:	e7df      	b.n	80002d2 <__udivmoddi4+0xa2>
 8000312:	b902      	cbnz	r2, 8000316 <__udivmoddi4+0xe6>
 8000314:	deff      	udf	#255	; 0xff
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8090 	bne.w	8000440 <__udivmoddi4+0x210>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000326:	fa1f fe8c 	uxth.w	lr, ip
 800032a:	2101      	movs	r1, #1
 800032c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000330:	fb07 2015 	mls	r0, r7, r5, r2
 8000334:	0c22      	lsrs	r2, r4, #16
 8000336:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033a:	fb0e f005 	mul.w	r0, lr, r5
 800033e:	4290      	cmp	r0, r2
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x124>
 8000342:	eb1c 0202 	adds.w	r2, ip, r2
 8000346:	f105 38ff 	add.w	r8, r5, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x122>
 800034c:	4290      	cmp	r0, r2
 800034e:	f200 80cb 	bhi.w	80004e8 <__udivmoddi4+0x2b8>
 8000352:	4645      	mov	r5, r8
 8000354:	1a12      	subs	r2, r2, r0
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb2 f0f7 	udiv	r0, r2, r7
 800035c:	fb07 2210 	mls	r2, r7, r0, r2
 8000360:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000364:	fb0e fe00 	mul.w	lr, lr, r0
 8000368:	45a6      	cmp	lr, r4
 800036a:	d908      	bls.n	800037e <__udivmoddi4+0x14e>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 32ff 	add.w	r2, r0, #4294967295
 8000374:	d202      	bcs.n	800037c <__udivmoddi4+0x14c>
 8000376:	45a6      	cmp	lr, r4
 8000378:	f200 80bb 	bhi.w	80004f2 <__udivmoddi4+0x2c2>
 800037c:	4610      	mov	r0, r2
 800037e:	eba4 040e 	sub.w	r4, r4, lr
 8000382:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000386:	e79f      	b.n	80002c8 <__udivmoddi4+0x98>
 8000388:	f1c1 0720 	rsb	r7, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000392:	ea4c 0c03 	orr.w	ip, ip, r3
 8000396:	fa05 f401 	lsl.w	r4, r5, r1
 800039a:	fa20 f307 	lsr.w	r3, r0, r7
 800039e:	40fd      	lsrs	r5, r7
 80003a0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a4:	4323      	orrs	r3, r4
 80003a6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003aa:	fa1f fe8c 	uxth.w	lr, ip
 80003ae:	fb09 5518 	mls	r5, r9, r8, r5
 80003b2:	0c1c      	lsrs	r4, r3, #16
 80003b4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b8:	fb08 f50e 	mul.w	r5, r8, lr
 80003bc:	42a5      	cmp	r5, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	fa00 f001 	lsl.w	r0, r0, r1
 80003c6:	d90b      	bls.n	80003e0 <__udivmoddi4+0x1b0>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d0:	f080 8088 	bcs.w	80004e4 <__udivmoddi4+0x2b4>
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	f240 8085 	bls.w	80004e4 <__udivmoddi4+0x2b4>
 80003da:	f1a8 0802 	sub.w	r8, r8, #2
 80003de:	4464      	add	r4, ip
 80003e0:	1b64      	subs	r4, r4, r5
 80003e2:	b29d      	uxth	r5, r3
 80003e4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e8:	fb09 4413 	mls	r4, r9, r3, r4
 80003ec:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x1da>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f103 35ff 	add.w	r5, r3, #4294967295
 8000400:	d26c      	bcs.n	80004dc <__udivmoddi4+0x2ac>
 8000402:	45a6      	cmp	lr, r4
 8000404:	d96a      	bls.n	80004dc <__udivmoddi4+0x2ac>
 8000406:	3b02      	subs	r3, #2
 8000408:	4464      	add	r4, ip
 800040a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040e:	fba3 9502 	umull	r9, r5, r3, r2
 8000412:	eba4 040e 	sub.w	r4, r4, lr
 8000416:	42ac      	cmp	r4, r5
 8000418:	46c8      	mov	r8, r9
 800041a:	46ae      	mov	lr, r5
 800041c:	d356      	bcc.n	80004cc <__udivmoddi4+0x29c>
 800041e:	d053      	beq.n	80004c8 <__udivmoddi4+0x298>
 8000420:	b156      	cbz	r6, 8000438 <__udivmoddi4+0x208>
 8000422:	ebb0 0208 	subs.w	r2, r0, r8
 8000426:	eb64 040e 	sbc.w	r4, r4, lr
 800042a:	fa04 f707 	lsl.w	r7, r4, r7
 800042e:	40ca      	lsrs	r2, r1
 8000430:	40cc      	lsrs	r4, r1
 8000432:	4317      	orrs	r7, r2
 8000434:	e9c6 7400 	strd	r7, r4, [r6]
 8000438:	4618      	mov	r0, r3
 800043a:	2100      	movs	r1, #0
 800043c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000440:	f1c3 0120 	rsb	r1, r3, #32
 8000444:	fa02 fc03 	lsl.w	ip, r2, r3
 8000448:	fa20 f201 	lsr.w	r2, r0, r1
 800044c:	fa25 f101 	lsr.w	r1, r5, r1
 8000450:	409d      	lsls	r5, r3
 8000452:	432a      	orrs	r2, r5
 8000454:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000460:	fb07 1510 	mls	r5, r7, r0, r1
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046a:	fb00 f50e 	mul.w	r5, r0, lr
 800046e:	428d      	cmp	r5, r1
 8000470:	fa04 f403 	lsl.w	r4, r4, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x258>
 8000476:	eb1c 0101 	adds.w	r1, ip, r1
 800047a:	f100 38ff 	add.w	r8, r0, #4294967295
 800047e:	d22f      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 8000480:	428d      	cmp	r5, r1
 8000482:	d92d      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 8000484:	3802      	subs	r0, #2
 8000486:	4461      	add	r1, ip
 8000488:	1b49      	subs	r1, r1, r5
 800048a:	b292      	uxth	r2, r2
 800048c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000490:	fb07 1115 	mls	r1, r7, r5, r1
 8000494:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000498:	fb05 f10e 	mul.w	r1, r5, lr
 800049c:	4291      	cmp	r1, r2
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x282>
 80004a0:	eb1c 0202 	adds.w	r2, ip, r2
 80004a4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a8:	d216      	bcs.n	80004d8 <__udivmoddi4+0x2a8>
 80004aa:	4291      	cmp	r1, r2
 80004ac:	d914      	bls.n	80004d8 <__udivmoddi4+0x2a8>
 80004ae:	3d02      	subs	r5, #2
 80004b0:	4462      	add	r2, ip
 80004b2:	1a52      	subs	r2, r2, r1
 80004b4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b8:	e738      	b.n	800032c <__udivmoddi4+0xfc>
 80004ba:	4631      	mov	r1, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xa2>
 80004c0:	4639      	mov	r1, r7
 80004c2:	e6e6      	b.n	8000292 <__udivmoddi4+0x62>
 80004c4:	4610      	mov	r0, r2
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x90>
 80004c8:	4548      	cmp	r0, r9
 80004ca:	d2a9      	bcs.n	8000420 <__udivmoddi4+0x1f0>
 80004cc:	ebb9 0802 	subs.w	r8, r9, r2
 80004d0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d4:	3b01      	subs	r3, #1
 80004d6:	e7a3      	b.n	8000420 <__udivmoddi4+0x1f0>
 80004d8:	4645      	mov	r5, r8
 80004da:	e7ea      	b.n	80004b2 <__udivmoddi4+0x282>
 80004dc:	462b      	mov	r3, r5
 80004de:	e794      	b.n	800040a <__udivmoddi4+0x1da>
 80004e0:	4640      	mov	r0, r8
 80004e2:	e7d1      	b.n	8000488 <__udivmoddi4+0x258>
 80004e4:	46d0      	mov	r8, sl
 80004e6:	e77b      	b.n	80003e0 <__udivmoddi4+0x1b0>
 80004e8:	3d02      	subs	r5, #2
 80004ea:	4462      	add	r2, ip
 80004ec:	e732      	b.n	8000354 <__udivmoddi4+0x124>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e70a      	b.n	8000308 <__udivmoddi4+0xd8>
 80004f2:	4464      	add	r4, ip
 80004f4:	3802      	subs	r0, #2
 80004f6:	e742      	b.n	800037e <__udivmoddi4+0x14e>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80004fc:	b480      	push	{r7}
 80004fe:	b087      	sub	sp, #28
 8000500:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000502:	4b27      	ldr	r3, [pc, #156]	; (80005a0 <vTaskSwitchContext+0xa4>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d003      	beq.n	8000512 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800050a:	4b26      	ldr	r3, [pc, #152]	; (80005a4 <vTaskSwitchContext+0xa8>)
 800050c:	2201      	movs	r2, #1
 800050e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8000510:	e03f      	b.n	8000592 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8000512:	4b24      	ldr	r3, [pc, #144]	; (80005a4 <vTaskSwitchContext+0xa8>)
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000518:	4b23      	ldr	r3, [pc, #140]	; (80005a8 <vTaskSwitchContext+0xac>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	60fb      	str	r3, [r7, #12]
/* Generic helper function. */
        __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
        {
            uint8_t ucReturn;

            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	fab3 f383 	clz	r3, r3
 8000524:	72fb      	strb	r3, [r7, #11]

            return ucReturn;
 8000526:	7afb      	ldrb	r3, [r7, #11]
 8000528:	f1c3 031f 	rsb	r3, r3, #31
 800052c:	617b      	str	r3, [r7, #20]
 800052e:	491f      	ldr	r1, [pc, #124]	; (80005ac <vTaskSwitchContext+0xb0>)
 8000530:	697a      	ldr	r2, [r7, #20]
 8000532:	4613      	mov	r3, r2
 8000534:	009b      	lsls	r3, r3, #2
 8000536:	4413      	add	r3, r2
 8000538:	009b      	lsls	r3, r3, #2
 800053a:	440b      	add	r3, r1
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d10a      	bne.n	8000558 <vTaskSwitchContext+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000546:	f383 8811 	msr	BASEPRI, r3
 800054a:	f3bf 8f6f 	isb	sy
 800054e:	f3bf 8f4f 	dsb	sy
 8000552:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000554:	bf00      	nop
 8000556:	e7fe      	b.n	8000556 <vTaskSwitchContext+0x5a>
 8000558:	697a      	ldr	r2, [r7, #20]
 800055a:	4613      	mov	r3, r2
 800055c:	009b      	lsls	r3, r3, #2
 800055e:	4413      	add	r3, r2
 8000560:	009b      	lsls	r3, r3, #2
 8000562:	4a12      	ldr	r2, [pc, #72]	; (80005ac <vTaskSwitchContext+0xb0>)
 8000564:	4413      	add	r3, r2
 8000566:	613b      	str	r3, [r7, #16]
 8000568:	693b      	ldr	r3, [r7, #16]
 800056a:	685b      	ldr	r3, [r3, #4]
 800056c:	685a      	ldr	r2, [r3, #4]
 800056e:	693b      	ldr	r3, [r7, #16]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	693b      	ldr	r3, [r7, #16]
 8000574:	685a      	ldr	r2, [r3, #4]
 8000576:	693b      	ldr	r3, [r7, #16]
 8000578:	3308      	adds	r3, #8
 800057a:	429a      	cmp	r2, r3
 800057c:	d104      	bne.n	8000588 <vTaskSwitchContext+0x8c>
 800057e:	693b      	ldr	r3, [r7, #16]
 8000580:	685b      	ldr	r3, [r3, #4]
 8000582:	685a      	ldr	r2, [r3, #4]
 8000584:	693b      	ldr	r3, [r7, #16]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	693b      	ldr	r3, [r7, #16]
 800058a:	685b      	ldr	r3, [r3, #4]
 800058c:	68db      	ldr	r3, [r3, #12]
 800058e:	4a08      	ldr	r2, [pc, #32]	; (80005b0 <vTaskSwitchContext+0xb4>)
 8000590:	6013      	str	r3, [r2, #0]
}
 8000592:	bf00      	nop
 8000594:	371c      	adds	r7, #28
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	200000c0 	.word	0x200000c0
 80005a4:	200000bc 	.word	0x200000bc
 80005a8:	200000b8 	.word	0x200000b8
 80005ac:	2000002c 	.word	0x2000002c
 80005b0:	20000028 	.word	0x20000028
	...

080005c0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80005c0:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <pxCurrentTCBConst2>)
 80005c2:	6819      	ldr	r1, [r3, #0]
 80005c4:	6808      	ldr	r0, [r1, #0]
 80005c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005ca:	f380 8809 	msr	PSP, r0
 80005ce:	f3bf 8f6f 	isb	sy
 80005d2:	f04f 0000 	mov.w	r0, #0
 80005d6:	f380 8811 	msr	BASEPRI, r0
 80005da:	4770      	bx	lr
 80005dc:	f3af 8000 	nop.w

080005e0 <pxCurrentTCBConst2>:
 80005e0:	20000028 	.word	0x20000028
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80005e4:	bf00      	nop
 80005e6:	bf00      	nop
	...

080005f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80005f0:	f3ef 8009 	mrs	r0, PSP
 80005f4:	f3bf 8f6f 	isb	sy
 80005f8:	4b15      	ldr	r3, [pc, #84]	; (8000650 <pxCurrentTCBConst>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	f01e 0f10 	tst.w	lr, #16
 8000600:	bf08      	it	eq
 8000602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800060a:	6010      	str	r0, [r2, #0]
 800060c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8000610:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000614:	f380 8811 	msr	BASEPRI, r0
 8000618:	f3bf 8f4f 	dsb	sy
 800061c:	f3bf 8f6f 	isb	sy
 8000620:	f7ff ff6c 	bl	80004fc <vTaskSwitchContext>
 8000624:	f04f 0000 	mov.w	r0, #0
 8000628:	f380 8811 	msr	BASEPRI, r0
 800062c:	bc09      	pop	{r0, r3}
 800062e:	6819      	ldr	r1, [r3, #0]
 8000630:	6808      	ldr	r0, [r1, #0]
 8000632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000636:	f01e 0f10 	tst.w	lr, #16
 800063a:	bf08      	it	eq
 800063c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000640:	f380 8809 	msr	PSP, r0
 8000644:	f3bf 8f6f 	isb	sy
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	f3af 8000 	nop.w

08000650 <pxCurrentTCBConst>:
 8000650:	20000028 	.word	0x20000028
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8000654:	bf00      	nop
 8000656:	bf00      	nop

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065e:	f001 fabc 	bl	8001bda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000662:	f000 f899 	bl	8000798 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000666:	f000 f8f5 	bl	8000854 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800066a:	f000 fc47 	bl	8000efc <MX_GPIO_Init>
  MX_ADC1_Init();
 800066e:	f000 f921 	bl	80008b4 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8000672:	f000 f983 	bl	800097c <MX_DFSDM1_Init>
  MX_I2C1_Init();
 8000676:	f000 f9b9 	bl	80009ec <MX_I2C1_Init>
  MX_I2C2_Init();
 800067a:	f000 f9f5 	bl	8000a68 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 800067e:	f000 fa31 	bl	8000ae4 <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 8000682:	f000 fa85 	bl	8000b90 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000686:	f000 fac1 	bl	8000c0c <MX_SPI3_Init>
  MX_UART4_Init();
 800068a:	f000 fafd 	bl	8000c88 <MX_UART4_Init>
  MX_USART1_UART_Init();
 800068e:	f000 fb47 	bl	8000d20 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000692:	f000 fb91 	bl	8000db8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000696:	f000 fbdd 	bl	8000e54 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 800069a:	f000 fc27 	bl	8000eec <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
 MyLED2_init();
 800069e:	f000 fd7f 	bl	80011a0 <MyLED2_init>
 MyButton_init();
 80006a2:	f000 fdaf 	bl	8001204 <MyButton_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  while(SOS_transmission==1)
 80006a6:	e06e      	b.n	8000786 <main+0x12e>
	  {
		  for(int j=0; j<3; j++)
 80006a8:	2300      	movs	r3, #0
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	e065      	b.n	800077a <main+0x122>
		  {

	//sending 's'
	  for(int i=0; i<3; i++)
 80006ae:	2300      	movs	r3, #0
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	e016      	b.n	80006e2 <main+0x8a>
	  {
		  //turning up the led for a dot
		  //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET); or
		  //write a 1 to Bit 14 of GPIOB ODR(output data register)
		  GPIOB->ODR |=(1<<14);
 80006b4:	4b36      	ldr	r3, [pc, #216]	; (8000790 <main+0x138>)
 80006b6:	695b      	ldr	r3, [r3, #20]
 80006b8:	4a35      	ldr	r2, [pc, #212]	; (8000790 <main+0x138>)
 80006ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006be:	6153      	str	r3, [r2, #20]
		  HAL_Delay(300);
 80006c0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006c4:	f001 fac2 	bl	8001c4c <HAL_Delay>
	      //turning the led off for spacing
		  //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET); or
		  //write a 0 to Bit 14 of GPIOB ODR(output data register)
		  GPIOB->ODR &=~(1<<14);
 80006c8:	4b31      	ldr	r3, [pc, #196]	; (8000790 <main+0x138>)
 80006ca:	695b      	ldr	r3, [r3, #20]
 80006cc:	4a30      	ldr	r2, [pc, #192]	; (8000790 <main+0x138>)
 80006ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80006d2:	6153      	str	r3, [r2, #20]
          HAL_Delay(300);
 80006d4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006d8:	f001 fab8 	bl	8001c4c <HAL_Delay>
	  for(int i=0; i<3; i++)
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	3301      	adds	r3, #1
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	2b02      	cmp	r3, #2
 80006e6:	dde5      	ble.n	80006b4 <main+0x5c>
	  }
	  //3 time units between characters
	  HAL_Delay(300*2);
 80006e8:	f44f 7016 	mov.w	r0, #600	; 0x258
 80006ec:	f001 faae 	bl	8001c4c <HAL_Delay>

	  //sending 'o'
	  for(int i=0; i<3; i++)
 80006f0:	2300      	movs	r3, #0
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	e016      	b.n	8000724 <main+0xcc>
	 	  {
	 		  //turning up the led for a dash
	 		  //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
		      //write a 1 to Bit 14 of GPIOB ODR(output data register)
		  	  GPIOB->ODR |=(1<<14);
 80006f6:	4b26      	ldr	r3, [pc, #152]	; (8000790 <main+0x138>)
 80006f8:	695b      	ldr	r3, [r3, #20]
 80006fa:	4a25      	ldr	r2, [pc, #148]	; (8000790 <main+0x138>)
 80006fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000700:	6153      	str	r3, [r2, #20]
	 		  HAL_Delay(300*3);
 8000702:	f44f 7061 	mov.w	r0, #900	; 0x384
 8000706:	f001 faa1 	bl	8001c4c <HAL_Delay>
	 	      //turning the led off for spacing
	 		  //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
	 		  //write a 0 to Bit 14 of GPIOB ODR(output data register)
	 		 GPIOB->ODR &=~(1<<14);
 800070a:	4b21      	ldr	r3, [pc, #132]	; (8000790 <main+0x138>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	4a20      	ldr	r2, [pc, #128]	; (8000790 <main+0x138>)
 8000710:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000714:	6153      	str	r3, [r2, #20]
	 		 HAL_Delay(300);
 8000716:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800071a:	f001 fa97 	bl	8001c4c <HAL_Delay>
	  for(int i=0; i<3; i++)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	3301      	adds	r3, #1
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2b02      	cmp	r3, #2
 8000728:	dde5      	ble.n	80006f6 <main+0x9e>
	 	  }
	 	  //3 time units between characters
	 	  HAL_Delay(300*2);
 800072a:	f44f 7016 	mov.w	r0, #600	; 0x258
 800072e:	f001 fa8d 	bl	8001c4c <HAL_Delay>
	  //sending 's'
	  for(int i=0; i<3; i++)
 8000732:	2300      	movs	r3, #0
 8000734:	603b      	str	r3, [r7, #0]
 8000736:	e016      	b.n	8000766 <main+0x10e>
	 		  {
	 			  //turning up the led for a dot
	 			  //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
		         //write a 1 to Bit 14 of GPIOB ODR(output data register)
		  		  GPIOB->ODR |=(1<<14);
 8000738:	4b15      	ldr	r3, [pc, #84]	; (8000790 <main+0x138>)
 800073a:	695b      	ldr	r3, [r3, #20]
 800073c:	4a14      	ldr	r2, [pc, #80]	; (8000790 <main+0x138>)
 800073e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000742:	6153      	str	r3, [r2, #20]
		          HAL_Delay(300);
 8000744:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000748:	f001 fa80 	bl	8001c4c <HAL_Delay>
	 		      //turning the led off for spacing
	 			  //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
		          //write a 0 to Bit 14 of GPIOB ODR(output data register)
		          GPIOB->ODR &=~(1<<14);
 800074c:	4b10      	ldr	r3, [pc, #64]	; (8000790 <main+0x138>)
 800074e:	695b      	ldr	r3, [r3, #20]
 8000750:	4a0f      	ldr	r2, [pc, #60]	; (8000790 <main+0x138>)
 8000752:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000756:	6153      	str	r3, [r2, #20]
		          HAL_Delay(300);
 8000758:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800075c:	f001 fa76 	bl	8001c4c <HAL_Delay>
	  for(int i=0; i<3; i++)
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	3301      	adds	r3, #1
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	2b02      	cmp	r3, #2
 800076a:	dde5      	ble.n	8000738 <main+0xe0>
	 		  }
	    //7 time units between words
	 	HAL_Delay(300*6);
 800076c:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8000770:	f001 fa6c 	bl	8001c4c <HAL_Delay>
		  for(int j=0; j<3; j++)
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	3301      	adds	r3, #1
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	2b02      	cmp	r3, #2
 800077e:	dd96      	ble.n	80006ae <main+0x56>
   }
		  SOS_transmission=0;
 8000780:	4b04      	ldr	r3, [pc, #16]	; (8000794 <main+0x13c>)
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
	  while(SOS_transmission==1)
 8000786:	4b03      	ldr	r3, [pc, #12]	; (8000794 <main+0x13c>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2b01      	cmp	r3, #1
 800078c:	d08c      	beq.n	80006a8 <main+0x50>
 800078e:	e7fa      	b.n	8000786 <main+0x12e>
 8000790:	48000400 	.word	0x48000400
 8000794:	200000c4 	.word	0x200000c4

08000798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b096      	sub	sp, #88	; 0x58
 800079c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	2244      	movs	r2, #68	; 0x44
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f006 f9d2 	bl	8006b50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ac:	463b      	mov	r3, r7
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007be:	f003 fb33 	bl	8003e28 <HAL_PWREx_ControlVoltageScaling>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007c8:	f000 fd88 	bl	80012dc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007cc:	f003 fafc 	bl	8003dc8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007d0:	4b1f      	ldr	r3, [pc, #124]	; (8000850 <SystemClock_Config+0xb8>)
 80007d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007d6:	4a1e      	ldr	r2, [pc, #120]	; (8000850 <SystemClock_Config+0xb8>)
 80007d8:	f023 0318 	bic.w	r3, r3, #24
 80007dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 80007e0:	2316      	movs	r3, #22
 80007e2:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007e4:	2301      	movs	r3, #1
 80007e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ee:	2340      	movs	r3, #64	; 0x40
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007f2:	2301      	movs	r3, #1
 80007f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007fa:	2360      	movs	r3, #96	; 0x60
 80007fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007fe:	2300      	movs	r3, #0
 8000800:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4618      	mov	r0, r3
 8000808:	f003 fbb2 	bl	8003f70 <HAL_RCC_OscConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000812:	f000 fd63 	bl	80012dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000816:	230f      	movs	r3, #15
 8000818:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800081a:	2301      	movs	r3, #1
 800081c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000822:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000826:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8000828:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800082c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800082e:	463b      	mov	r3, r7
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f003 ffb6 	bl	80047a4 <HAL_RCC_ClockConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800083e:	f000 fd4d 	bl	80012dc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000842:	f004 fdcf 	bl	80053e4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000846:	bf00      	nop
 8000848:	3758      	adds	r7, #88	; 0x58
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40021000 	.word	0x40021000

08000854 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b0a6      	sub	sp, #152	; 0x98
 8000858:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2294      	movs	r2, #148	; 0x94
 800085e:	2100      	movs	r1, #0
 8000860:	4618      	mov	r0, r3
 8000862:	f006 f975 	bl	8006b50 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8000866:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800086a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800086c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000870:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000874:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000878:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800087a:	2301      	movs	r3, #1
 800087c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800087e:	2301      	movs	r3, #1
 8000880:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000882:	2318      	movs	r3, #24
 8000884:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000886:	2302      	movs	r3, #2
 8000888:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800088a:	2302      	movs	r3, #2
 800088c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800088e:	2302      	movs	r3, #2
 8000890:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8000892:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8000896:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	4618      	mov	r0, r3
 800089c:	f004 fa72 	bl	8004d84 <HAL_RCCEx_PeriphCLKConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80008a6:	f000 fd19 	bl	80012dc <Error_Handler>
  }
}
 80008aa:	bf00      	nop
 80008ac:	3798      	adds	r7, #152	; 0x98
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ba:	463b      	mov	r3, r7
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
 80008c8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008ca:	4b29      	ldr	r3, [pc, #164]	; (8000970 <MX_ADC1_Init+0xbc>)
 80008cc:	4a29      	ldr	r2, [pc, #164]	; (8000974 <MX_ADC1_Init+0xc0>)
 80008ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008d0:	4b27      	ldr	r3, [pc, #156]	; (8000970 <MX_ADC1_Init+0xbc>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008d6:	4b26      	ldr	r3, [pc, #152]	; (8000970 <MX_ADC1_Init+0xbc>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008dc:	4b24      	ldr	r3, [pc, #144]	; (8000970 <MX_ADC1_Init+0xbc>)
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008e2:	4b23      	ldr	r3, [pc, #140]	; (8000970 <MX_ADC1_Init+0xbc>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008e8:	4b21      	ldr	r3, [pc, #132]	; (8000970 <MX_ADC1_Init+0xbc>)
 80008ea:	2204      	movs	r2, #4
 80008ec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008ee:	4b20      	ldr	r3, [pc, #128]	; (8000970 <MX_ADC1_Init+0xbc>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008f4:	4b1e      	ldr	r3, [pc, #120]	; (8000970 <MX_ADC1_Init+0xbc>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80008fa:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <MX_ADC1_Init+0xbc>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000900:	4b1b      	ldr	r3, [pc, #108]	; (8000970 <MX_ADC1_Init+0xbc>)
 8000902:	2200      	movs	r2, #0
 8000904:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000908:	4b19      	ldr	r3, [pc, #100]	; (8000970 <MX_ADC1_Init+0xbc>)
 800090a:	2200      	movs	r2, #0
 800090c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800090e:	4b18      	ldr	r3, [pc, #96]	; (8000970 <MX_ADC1_Init+0xbc>)
 8000910:	2200      	movs	r2, #0
 8000912:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000914:	4b16      	ldr	r3, [pc, #88]	; (8000970 <MX_ADC1_Init+0xbc>)
 8000916:	2200      	movs	r2, #0
 8000918:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <MX_ADC1_Init+0xbc>)
 800091e:	2200      	movs	r2, #0
 8000920:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000922:	4b13      	ldr	r3, [pc, #76]	; (8000970 <MX_ADC1_Init+0xbc>)
 8000924:	2200      	movs	r2, #0
 8000926:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800092a:	4811      	ldr	r0, [pc, #68]	; (8000970 <MX_ADC1_Init+0xbc>)
 800092c:	f001 fb52 	bl	8001fd4 <HAL_ADC_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000936:	f000 fcd1 	bl	80012dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800093a:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <MX_ADC1_Init+0xc4>)
 800093c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800093e:	2306      	movs	r3, #6
 8000940:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000946:	237f      	movs	r3, #127	; 0x7f
 8000948:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800094a:	2304      	movs	r3, #4
 800094c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000952:	463b      	mov	r3, r7
 8000954:	4619      	mov	r1, r3
 8000956:	4806      	ldr	r0, [pc, #24]	; (8000970 <MX_ADC1_Init+0xbc>)
 8000958:	f001 fc82 	bl	8002260 <HAL_ADC_ConfigChannel>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000962:	f000 fcbb 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	3718      	adds	r7, #24
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	200000c8 	.word	0x200000c8
 8000974:	50040000 	.word	0x50040000
 8000978:	04300002 	.word	0x04300002

0800097c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000980:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <MX_DFSDM1_Init+0x68>)
 8000982:	4a19      	ldr	r2, [pc, #100]	; (80009e8 <MX_DFSDM1_Init+0x6c>)
 8000984:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000986:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <MX_DFSDM1_Init+0x68>)
 8000988:	2201      	movs	r2, #1
 800098a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800098c:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <MX_DFSDM1_Init+0x68>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8000992:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <MX_DFSDM1_Init+0x68>)
 8000994:	2202      	movs	r2, #2
 8000996:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000998:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <MX_DFSDM1_Init+0x68>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_DFSDM1_Init+0x68>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_DFSDM1_Init+0x68>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_DFSDM1_Init+0x68>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_DFSDM1_Init+0x68>)
 80009b2:	2204      	movs	r2, #4
 80009b4:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <MX_DFSDM1_Init+0x68>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_DFSDM1_Init+0x68>)
 80009be:	2201      	movs	r2, #1
 80009c0:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <MX_DFSDM1_Init+0x68>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_DFSDM1_Init+0x68>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <MX_DFSDM1_Init+0x68>)
 80009d0:	f002 f924 	bl	8002c1c <HAL_DFSDM_ChannelInit>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 80009da:	f000 fc7f 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000130 	.word	0x20000130
 80009e8:	40016040 	.word	0x40016040

080009ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009f0:	4b1b      	ldr	r3, [pc, #108]	; (8000a60 <MX_I2C1_Init+0x74>)
 80009f2:	4a1c      	ldr	r2, [pc, #112]	; (8000a64 <MX_I2C1_Init+0x78>)
 80009f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80009f6:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <MX_I2C1_Init+0x74>)
 80009f8:	f640 6214 	movw	r2, #3604	; 0xe14
 80009fc:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009fe:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <MX_I2C1_Init+0x74>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a04:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <MX_I2C1_Init+0x74>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a0a:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <MX_I2C1_Init+0x74>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a10:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <MX_I2C1_Init+0x74>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a16:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <MX_I2C1_Init+0x74>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a1c:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <MX_I2C1_Init+0x74>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a22:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <MX_I2C1_Init+0x74>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a28:	480d      	ldr	r0, [pc, #52]	; (8000a60 <MX_I2C1_Init+0x74>)
 8000a2a:	f002 fbc5 	bl	80031b8 <HAL_I2C_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a34:	f000 fc52 	bl	80012dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4809      	ldr	r0, [pc, #36]	; (8000a60 <MX_I2C1_Init+0x74>)
 8000a3c:	f002 fc57 	bl	80032ee <HAL_I2CEx_ConfigAnalogFilter>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000a46:	f000 fc49 	bl	80012dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4804      	ldr	r0, [pc, #16]	; (8000a60 <MX_I2C1_Init+0x74>)
 8000a4e:	f002 fc99 	bl	8003384 <HAL_I2CEx_ConfigDigitalFilter>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000a58:	f000 fc40 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000168 	.word	0x20000168
 8000a64:	40005400 	.word	0x40005400

08000a68 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	; (8000adc <MX_I2C2_Init+0x74>)
 8000a6e:	4a1c      	ldr	r2, [pc, #112]	; (8000ae0 <MX_I2C2_Init+0x78>)
 8000a70:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000a72:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <MX_I2C2_Init+0x74>)
 8000a74:	f640 6214 	movw	r2, #3604	; 0xe14
 8000a78:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a7a:	4b18      	ldr	r3, [pc, #96]	; (8000adc <MX_I2C2_Init+0x74>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a80:	4b16      	ldr	r3, [pc, #88]	; (8000adc <MX_I2C2_Init+0x74>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <MX_I2C2_Init+0x74>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a8c:	4b13      	ldr	r3, [pc, #76]	; (8000adc <MX_I2C2_Init+0x74>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a92:	4b12      	ldr	r3, [pc, #72]	; (8000adc <MX_I2C2_Init+0x74>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a98:	4b10      	ldr	r3, [pc, #64]	; (8000adc <MX_I2C2_Init+0x74>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a9e:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <MX_I2C2_Init+0x74>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000aa4:	480d      	ldr	r0, [pc, #52]	; (8000adc <MX_I2C2_Init+0x74>)
 8000aa6:	f002 fb87 	bl	80031b8 <HAL_I2C_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ab0:	f000 fc14 	bl	80012dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4809      	ldr	r0, [pc, #36]	; (8000adc <MX_I2C2_Init+0x74>)
 8000ab8:	f002 fc19 	bl	80032ee <HAL_I2CEx_ConfigAnalogFilter>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000ac2:	f000 fc0b 	bl	80012dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4804      	ldr	r0, [pc, #16]	; (8000adc <MX_I2C2_Init+0x74>)
 8000aca:	f002 fc5b 	bl	8003384 <HAL_I2CEx_ConfigDigitalFilter>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000ad4:	f000 fc02 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	200001bc 	.word	0x200001bc
 8000ae0:	40005800 	.word	0x40005800

08000ae4 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000af8:	4b23      	ldr	r3, [pc, #140]	; (8000b88 <MX_OCTOSPI1_Init+0xa4>)
 8000afa:	4a24      	ldr	r2, [pc, #144]	; (8000b8c <MX_OCTOSPI1_Init+0xa8>)
 8000afc:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000afe:	4b22      	ldr	r3, [pc, #136]	; (8000b88 <MX_OCTOSPI1_Init+0xa4>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000b04:	4b20      	ldr	r3, [pc, #128]	; (8000b88 <MX_OCTOSPI1_Init+0xa4>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8000b0a:	4b1f      	ldr	r3, [pc, #124]	; (8000b88 <MX_OCTOSPI1_Init+0xa4>)
 8000b0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000b10:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8000b12:	4b1d      	ldr	r3, [pc, #116]	; (8000b88 <MX_OCTOSPI1_Init+0xa4>)
 8000b14:	2220      	movs	r2, #32
 8000b16:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000b18:	4b1b      	ldr	r3, [pc, #108]	; (8000b88 <MX_OCTOSPI1_Init+0xa4>)
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000b1e:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <MX_OCTOSPI1_Init+0xa4>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000b24:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <MX_OCTOSPI1_Init+0xa4>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8000b2a:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <MX_OCTOSPI1_Init+0xa4>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000b30:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <MX_OCTOSPI1_Init+0xa4>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000b36:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <MX_OCTOSPI1_Init+0xa4>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <MX_OCTOSPI1_Init+0xa4>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <MX_OCTOSPI1_Init+0xa4>)
 8000b44:	2208      	movs	r2, #8
 8000b46:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000b48:	480f      	ldr	r0, [pc, #60]	; (8000b88 <MX_OCTOSPI1_Init+0xa4>)
 8000b4a:	f002 fc67 	bl	800341c <HAL_OSPI_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8000b54:	f000 fbc2 	bl	80012dc <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000b60:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8000b64:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4806      	ldr	r0, [pc, #24]	; (8000b88 <MX_OCTOSPI1_Init+0xa4>)
 8000b70:	f002 fd0e 	bl	8003590 <HAL_OSPIM_Config>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8000b7a:	f000 fbaf 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	3718      	adds	r7, #24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000210 	.word	0x20000210
 8000b8c:	a0001000 	.word	0xa0001000

08000b90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b94:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <MX_SPI1_Init+0x74>)
 8000b96:	4a1c      	ldr	r2, [pc, #112]	; (8000c08 <MX_SPI1_Init+0x78>)
 8000b98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b9a:	4b1a      	ldr	r3, [pc, #104]	; (8000c04 <MX_SPI1_Init+0x74>)
 8000b9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ba0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ba2:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <MX_SPI1_Init+0x74>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ba8:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <MX_SPI1_Init+0x74>)
 8000baa:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000bae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bb0:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <MX_SPI1_Init+0x74>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bb6:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <MX_SPI1_Init+0x74>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bbc:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <MX_SPI1_Init+0x74>)
 8000bbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bc2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000bc4:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <MX_SPI1_Init+0x74>)
 8000bc6:	2208      	movs	r2, #8
 8000bc8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bca:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <MX_SPI1_Init+0x74>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <MX_SPI1_Init+0x74>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <MX_SPI1_Init+0x74>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000bdc:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <MX_SPI1_Init+0x74>)
 8000bde:	2207      	movs	r2, #7
 8000be0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000be2:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <MX_SPI1_Init+0x74>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <MX_SPI1_Init+0x74>)
 8000bea:	2208      	movs	r2, #8
 8000bec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bee:	4805      	ldr	r0, [pc, #20]	; (8000c04 <MX_SPI1_Init+0x74>)
 8000bf0:	f004 fdf0 	bl	80057d4 <HAL_SPI_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000bfa:	f000 fb6f 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000260 	.word	0x20000260
 8000c08:	40013000 	.word	0x40013000

08000c0c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000c10:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <MX_SPI3_Init+0x74>)
 8000c12:	4a1c      	ldr	r2, [pc, #112]	; (8000c84 <MX_SPI3_Init+0x78>)
 8000c14:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000c16:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <MX_SPI3_Init+0x74>)
 8000c18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c1c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000c1e:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <MX_SPI3_Init+0x74>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c24:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <MX_SPI3_Init+0x74>)
 8000c26:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c2a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <MX_SPI3_Init+0x74>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c32:	4b13      	ldr	r3, [pc, #76]	; (8000c80 <MX_SPI3_Init+0x74>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <MX_SPI3_Init+0x74>)
 8000c3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c3e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000c40:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <MX_SPI3_Init+0x74>)
 8000c42:	2208      	movs	r2, #8
 8000c44:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <MX_SPI3_Init+0x74>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <MX_SPI3_Init+0x74>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c52:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <MX_SPI3_Init+0x74>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000c58:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <MX_SPI3_Init+0x74>)
 8000c5a:	2207      	movs	r2, #7
 8000c5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c5e:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <MX_SPI3_Init+0x74>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <MX_SPI3_Init+0x74>)
 8000c66:	2208      	movs	r2, #8
 8000c68:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c6a:	4805      	ldr	r0, [pc, #20]	; (8000c80 <MX_SPI3_Init+0x74>)
 8000c6c:	f004 fdb2 	bl	80057d4 <HAL_SPI_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000c76:	f000 fb31 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	200002c4 	.word	0x200002c4
 8000c84:	40003c00 	.word	0x40003c00

08000c88 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000c8c:	4b22      	ldr	r3, [pc, #136]	; (8000d18 <MX_UART4_Init+0x90>)
 8000c8e:	4a23      	ldr	r2, [pc, #140]	; (8000d1c <MX_UART4_Init+0x94>)
 8000c90:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000c92:	4b21      	ldr	r3, [pc, #132]	; (8000d18 <MX_UART4_Init+0x90>)
 8000c94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c98:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c9a:	4b1f      	ldr	r3, [pc, #124]	; (8000d18 <MX_UART4_Init+0x90>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000ca0:	4b1d      	ldr	r3, [pc, #116]	; (8000d18 <MX_UART4_Init+0x90>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000ca6:	4b1c      	ldr	r3, [pc, #112]	; (8000d18 <MX_UART4_Init+0x90>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000cac:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <MX_UART4_Init+0x90>)
 8000cae:	220c      	movs	r2, #12
 8000cb0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cb2:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <MX_UART4_Init+0x90>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb8:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <MX_UART4_Init+0x90>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cbe:	4b16      	ldr	r3, [pc, #88]	; (8000d18 <MX_UART4_Init+0x90>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cc4:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <MX_UART4_Init+0x90>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cca:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <MX_UART4_Init+0x90>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000cd0:	4811      	ldr	r0, [pc, #68]	; (8000d18 <MX_UART4_Init+0x90>)
 8000cd2:	f005 f8d5 	bl	8005e80 <HAL_UART_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000cdc:	f000 fafe 	bl	80012dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	480d      	ldr	r0, [pc, #52]	; (8000d18 <MX_UART4_Init+0x90>)
 8000ce4:	f005 fe6a 	bl	80069bc <HAL_UARTEx_SetTxFifoThreshold>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000cee:	f000 faf5 	bl	80012dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4808      	ldr	r0, [pc, #32]	; (8000d18 <MX_UART4_Init+0x90>)
 8000cf6:	f005 fe9f 	bl	8006a38 <HAL_UARTEx_SetRxFifoThreshold>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000d00:	f000 faec 	bl	80012dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000d04:	4804      	ldr	r0, [pc, #16]	; (8000d18 <MX_UART4_Init+0x90>)
 8000d06:	f005 fe20 	bl	800694a <HAL_UARTEx_DisableFifoMode>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000d10:	f000 fae4 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000328 	.word	0x20000328
 8000d1c:	40004c00 	.word	0x40004c00

08000d20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d24:	4b22      	ldr	r3, [pc, #136]	; (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d26:	4a23      	ldr	r2, [pc, #140]	; (8000db4 <MX_USART1_UART_Init+0x94>)
 8000d28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d2a:	4b21      	ldr	r3, [pc, #132]	; (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d32:	4b1f      	ldr	r3, [pc, #124]	; (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d38:	4b1d      	ldr	r3, [pc, #116]	; (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d3e:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d44:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d46:	220c      	movs	r2, #12
 8000d48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4a:	4b19      	ldr	r3, [pc, #100]	; (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d50:	4b17      	ldr	r3, [pc, #92]	; (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d56:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d5c:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d62:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d68:	4811      	ldr	r0, [pc, #68]	; (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d6a:	f005 f889 	bl	8005e80 <HAL_UART_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d74:	f000 fab2 	bl	80012dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d78:	2100      	movs	r1, #0
 8000d7a:	480d      	ldr	r0, [pc, #52]	; (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d7c:	f005 fe1e 	bl	80069bc <HAL_UARTEx_SetTxFifoThreshold>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000d86:	f000 faa9 	bl	80012dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4808      	ldr	r0, [pc, #32]	; (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d8e:	f005 fe53 	bl	8006a38 <HAL_UARTEx_SetRxFifoThreshold>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000d98:	f000 faa0 	bl	80012dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d9c:	4804      	ldr	r0, [pc, #16]	; (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d9e:	f005 fdd4 	bl	800694a <HAL_UARTEx_DisableFifoMode>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000da8:	f000 fa98 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	200003bc 	.word	0x200003bc
 8000db4:	40013800 	.word	0x40013800

08000db8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dbc:	4b23      	ldr	r3, [pc, #140]	; (8000e4c <MX_USART2_UART_Init+0x94>)
 8000dbe:	4a24      	ldr	r2, [pc, #144]	; (8000e50 <MX_USART2_UART_Init+0x98>)
 8000dc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dc2:	4b22      	ldr	r3, [pc, #136]	; (8000e4c <MX_USART2_UART_Init+0x94>)
 8000dc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dca:	4b20      	ldr	r3, [pc, #128]	; (8000e4c <MX_USART2_UART_Init+0x94>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dd0:	4b1e      	ldr	r3, [pc, #120]	; (8000e4c <MX_USART2_UART_Init+0x94>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dd6:	4b1d      	ldr	r3, [pc, #116]	; (8000e4c <MX_USART2_UART_Init+0x94>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ddc:	4b1b      	ldr	r3, [pc, #108]	; (8000e4c <MX_USART2_UART_Init+0x94>)
 8000dde:	220c      	movs	r2, #12
 8000de0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000de2:	4b1a      	ldr	r3, [pc, #104]	; (8000e4c <MX_USART2_UART_Init+0x94>)
 8000de4:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000de8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dea:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <MX_USART2_UART_Init+0x94>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000df0:	4b16      	ldr	r3, [pc, #88]	; (8000e4c <MX_USART2_UART_Init+0x94>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <MX_USART2_UART_Init+0x94>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dfc:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <MX_USART2_UART_Init+0x94>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e02:	4812      	ldr	r0, [pc, #72]	; (8000e4c <MX_USART2_UART_Init+0x94>)
 8000e04:	f005 f83c 	bl	8005e80 <HAL_UART_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000e0e:	f000 fa65 	bl	80012dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e12:	2100      	movs	r1, #0
 8000e14:	480d      	ldr	r0, [pc, #52]	; (8000e4c <MX_USART2_UART_Init+0x94>)
 8000e16:	f005 fdd1 	bl	80069bc <HAL_UARTEx_SetTxFifoThreshold>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000e20:	f000 fa5c 	bl	80012dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e24:	2100      	movs	r1, #0
 8000e26:	4809      	ldr	r0, [pc, #36]	; (8000e4c <MX_USART2_UART_Init+0x94>)
 8000e28:	f005 fe06 	bl	8006a38 <HAL_UARTEx_SetRxFifoThreshold>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000e32:	f000 fa53 	bl	80012dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e36:	4805      	ldr	r0, [pc, #20]	; (8000e4c <MX_USART2_UART_Init+0x94>)
 8000e38:	f005 fd87 	bl	800694a <HAL_UARTEx_DisableFifoMode>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000e42:	f000 fa4b 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000450 	.word	0x20000450
 8000e50:	40004400 	.word	0x40004400

08000e54 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e58:	4b22      	ldr	r3, [pc, #136]	; (8000ee4 <MX_USART3_UART_Init+0x90>)
 8000e5a:	4a23      	ldr	r2, [pc, #140]	; (8000ee8 <MX_USART3_UART_Init+0x94>)
 8000e5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e5e:	4b21      	ldr	r3, [pc, #132]	; (8000ee4 <MX_USART3_UART_Init+0x90>)
 8000e60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e66:	4b1f      	ldr	r3, [pc, #124]	; (8000ee4 <MX_USART3_UART_Init+0x90>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <MX_USART3_UART_Init+0x90>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e72:	4b1c      	ldr	r3, [pc, #112]	; (8000ee4 <MX_USART3_UART_Init+0x90>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e78:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <MX_USART3_UART_Init+0x90>)
 8000e7a:	220c      	movs	r2, #12
 8000e7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e7e:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <MX_USART3_UART_Init+0x90>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e84:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <MX_USART3_UART_Init+0x90>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e8a:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <MX_USART3_UART_Init+0x90>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e90:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <MX_USART3_UART_Init+0x90>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e96:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <MX_USART3_UART_Init+0x90>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e9c:	4811      	ldr	r0, [pc, #68]	; (8000ee4 <MX_USART3_UART_Init+0x90>)
 8000e9e:	f004 ffef 	bl	8005e80 <HAL_UART_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ea8:	f000 fa18 	bl	80012dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eac:	2100      	movs	r1, #0
 8000eae:	480d      	ldr	r0, [pc, #52]	; (8000ee4 <MX_USART3_UART_Init+0x90>)
 8000eb0:	f005 fd84 	bl	80069bc <HAL_UARTEx_SetTxFifoThreshold>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000eba:	f000 fa0f 	bl	80012dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	4808      	ldr	r0, [pc, #32]	; (8000ee4 <MX_USART3_UART_Init+0x90>)
 8000ec2:	f005 fdb9 	bl	8006a38 <HAL_UARTEx_SetRxFifoThreshold>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ecc:	f000 fa06 	bl	80012dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ed0:	4804      	ldr	r0, [pc, #16]	; (8000ee4 <MX_USART3_UART_Init+0x90>)
 8000ed2:	f005 fd3a 	bl	800694a <HAL_UARTEx_DisableFifoMode>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000edc:	f000 f9fe 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	200004e4 	.word	0x200004e4
 8000ee8:	40004800 	.word	0x40004800

08000eec <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
	...

08000efc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08c      	sub	sp, #48	; 0x30
 8000f00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f02:	f107 031c 	add.w	r3, r7, #28
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
 8000f10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f12:	4b9e      	ldr	r3, [pc, #632]	; (800118c <MX_GPIO_Init+0x290>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f16:	4a9d      	ldr	r2, [pc, #628]	; (800118c <MX_GPIO_Init+0x290>)
 8000f18:	f043 0310 	orr.w	r3, r3, #16
 8000f1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f1e:	4b9b      	ldr	r3, [pc, #620]	; (800118c <MX_GPIO_Init+0x290>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f22:	f003 0310 	and.w	r3, r3, #16
 8000f26:	61bb      	str	r3, [r7, #24]
 8000f28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2a:	4b98      	ldr	r3, [pc, #608]	; (800118c <MX_GPIO_Init+0x290>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2e:	4a97      	ldr	r2, [pc, #604]	; (800118c <MX_GPIO_Init+0x290>)
 8000f30:	f043 0304 	orr.w	r3, r3, #4
 8000f34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f36:	4b95      	ldr	r3, [pc, #596]	; (800118c <MX_GPIO_Init+0x290>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3a:	f003 0304 	and.w	r3, r3, #4
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f42:	4b92      	ldr	r3, [pc, #584]	; (800118c <MX_GPIO_Init+0x290>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f46:	4a91      	ldr	r2, [pc, #580]	; (800118c <MX_GPIO_Init+0x290>)
 8000f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f4e:	4b8f      	ldr	r3, [pc, #572]	; (800118c <MX_GPIO_Init+0x290>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	4b8c      	ldr	r3, [pc, #560]	; (800118c <MX_GPIO_Init+0x290>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5e:	4a8b      	ldr	r2, [pc, #556]	; (800118c <MX_GPIO_Init+0x290>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f66:	4b89      	ldr	r3, [pc, #548]	; (800118c <MX_GPIO_Init+0x290>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f72:	4b86      	ldr	r3, [pc, #536]	; (800118c <MX_GPIO_Init+0x290>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f76:	4a85      	ldr	r2, [pc, #532]	; (800118c <MX_GPIO_Init+0x290>)
 8000f78:	f043 0302 	orr.w	r3, r3, #2
 8000f7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f7e:	4b83      	ldr	r3, [pc, #524]	; (800118c <MX_GPIO_Init+0x290>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f8a:	4b80      	ldr	r3, [pc, #512]	; (800118c <MX_GPIO_Init+0x290>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8e:	4a7f      	ldr	r2, [pc, #508]	; (800118c <MX_GPIO_Init+0x290>)
 8000f90:	f043 0308 	orr.w	r3, r3, #8
 8000f94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f96:	4b7d      	ldr	r3, [pc, #500]	; (800118c <MX_GPIO_Init+0x290>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9a:	f003 0308 	and.w	r3, r3, #8
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f240 1105 	movw	r1, #261	; 0x105
 8000fa8:	4879      	ldr	r0, [pc, #484]	; (8001190 <MX_GPIO_Init+0x294>)
 8000faa:	f002 f8d5 	bl	8003158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f248 111c 	movw	r1, #33052	; 0x811c
 8000fb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb8:	f002 f8ce 	bl	8003158 <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f24f 0134 	movw	r1, #61492	; 0xf034
 8000fc2:	4874      	ldr	r0, [pc, #464]	; (8001194 <MX_GPIO_Init+0x298>)
 8000fc4:	f002 f8c8 	bl	8003158 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f242 0183 	movw	r1, #8323	; 0x2083
 8000fce:	4872      	ldr	r0, [pc, #456]	; (8001198 <MX_GPIO_Init+0x29c>)
 8000fd0:	f002 f8c2 	bl	8003158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000fda:	4870      	ldr	r0, [pc, #448]	; (800119c <MX_GPIO_Init+0x2a0>)
 8000fdc:	f002 f8bc 	bl	8003158 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000fe0:	f240 1305 	movw	r3, #261	; 0x105
 8000fe4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ff2:	f107 031c 	add.w	r3, r7, #28
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4865      	ldr	r0, [pc, #404]	; (8001190 <MX_GPIO_Init+0x294>)
 8000ffa:	f001 ff1b 	bl	8002e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8000ffe:	237a      	movs	r3, #122	; 0x7a
 8001000:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001002:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001006:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800100c:	f107 031c 	add.w	r3, r7, #28
 8001010:	4619      	mov	r1, r3
 8001012:	485f      	ldr	r0, [pc, #380]	; (8001190 <MX_GPIO_Init+0x294>)
 8001014:	f001 ff0e 	bl	8002e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001018:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 800101c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800101e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001022:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001028:	f107 031c 	add.w	r3, r7, #28
 800102c:	4619      	mov	r1, r3
 800102e:	485b      	ldr	r0, [pc, #364]	; (800119c <MX_GPIO_Init+0x2a0>)
 8001030:	f001 ff00 	bl	8002e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8001034:	f248 131c 	movw	r3, #33052	; 0x811c
 8001038:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103a:	2301      	movs	r3, #1
 800103c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001046:	f107 031c 	add.w	r3, r7, #28
 800104a:	4619      	mov	r1, r3
 800104c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001050:	f001 fef0 	bl	8002e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001054:	2301      	movs	r3, #1
 8001056:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001058:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800105c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001062:	f107 031c 	add.w	r3, r7, #28
 8001066:	4619      	mov	r1, r3
 8001068:	484a      	ldr	r0, [pc, #296]	; (8001194 <MX_GPIO_Init+0x298>)
 800106a:	f001 fee3 	bl	8002e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800106e:	2302      	movs	r3, #2
 8001070:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2300      	movs	r3, #0
 800107c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800107e:	2302      	movs	r3, #2
 8001080:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001082:	f107 031c 	add.w	r3, r7, #28
 8001086:	4619      	mov	r1, r3
 8001088:	4842      	ldr	r0, [pc, #264]	; (8001194 <MX_GPIO_Init+0x298>)
 800108a:	f001 fed3 	bl	8002e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 800108e:	f24b 0334 	movw	r3, #45108	; 0xb034
 8001092:	61fb      	str	r3, [r7, #28]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001094:	2301      	movs	r3, #1
 8001096:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2300      	movs	r3, #0
 800109e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a0:	f107 031c 	add.w	r3, r7, #28
 80010a4:	4619      	mov	r1, r3
 80010a6:	483b      	ldr	r0, [pc, #236]	; (8001194 <MX_GPIO_Init+0x298>)
 80010a8:	f001 fec4 	bl	8002e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 80010ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b2:	2301      	movs	r3, #1
 80010b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ba:	2303      	movs	r3, #3
 80010bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80010be:	f107 031c 	add.w	r3, r7, #28
 80010c2:	4619      	mov	r1, r3
 80010c4:	4833      	ldr	r0, [pc, #204]	; (8001194 <MX_GPIO_Init+0x298>)
 80010c6:	f001 feb5 	bl	8002e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 80010ca:	f64d 4304 	movw	r3, #56324	; 0xdc04
 80010ce:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010d0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010da:	f107 031c 	add.w	r3, r7, #28
 80010de:	4619      	mov	r1, r3
 80010e0:	482d      	ldr	r0, [pc, #180]	; (8001198 <MX_GPIO_Init+0x29c>)
 80010e2:	f001 fea7 	bl	8002e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 80010e6:	f242 0383 	movw	r3, #8323	; 0x2083
 80010ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ec:	2301      	movs	r3, #1
 80010ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	2300      	movs	r3, #0
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010f8:	f107 031c 	add.w	r3, r7, #28
 80010fc:	4619      	mov	r1, r3
 80010fe:	4826      	ldr	r0, [pc, #152]	; (8001198 <MX_GPIO_Init+0x29c>)
 8001100:	f001 fe98 	bl	8002e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001104:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001108:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110a:	2301      	movs	r3, #1
 800110c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001116:	f107 031c 	add.w	r3, r7, #28
 800111a:	4619      	mov	r1, r3
 800111c:	481f      	ldr	r0, [pc, #124]	; (800119c <MX_GPIO_Init+0x2a0>)
 800111e:	f001 fe89 	bl	8002e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001122:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001126:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001128:	2300      	movs	r3, #0
 800112a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001130:	f107 031c 	add.w	r3, r7, #28
 8001134:	4619      	mov	r1, r3
 8001136:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800113a:	f001 fe7b 	bl	8002e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800113e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001142:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001144:	2302      	movs	r3, #2
 8001146:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114c:	2303      	movs	r3, #3
 800114e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001150:	230a      	movs	r3, #10
 8001152:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001154:	f107 031c 	add.w	r3, r7, #28
 8001158:	4619      	mov	r1, r3
 800115a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115e:	f001 fe69 	bl	8002e34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	2100      	movs	r1, #0
 8001166:	2017      	movs	r0, #23
 8001168:	f001 fd2e 	bl	8002bc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800116c:	2017      	movs	r0, #23
 800116e:	f001 fd47 	bl	8002c00 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001172:	2200      	movs	r2, #0
 8001174:	2100      	movs	r1, #0
 8001176:	2028      	movs	r0, #40	; 0x28
 8001178:	f001 fd26 	bl	8002bc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800117c:	2028      	movs	r0, #40	; 0x28
 800117e:	f001 fd3f 	bl	8002c00 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001182:	bf00      	nop
 8001184:	3730      	adds	r7, #48	; 0x30
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40021000 	.word	0x40021000
 8001190:	48001000 	.word	0x48001000
 8001194:	48000400 	.word	0x48000400
 8001198:	48000c00 	.word	0x48000c00
 800119c:	48000800 	.word	0x48000800

080011a0 <MyLED2_init>:

/* USER CODE BEGIN 4 */
static void MyLED2_init(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  //Configure the MODE register
  //01:general purpose output
  //MODER Bit 29 and Bit 28
  //Reset both bits 28 and 29 to 0
	GPIOB->MODER &=~(0x3 <<28);
 80011a4:	4b16      	ldr	r3, [pc, #88]	; (8001200 <MyLED2_init+0x60>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a15      	ldr	r2, [pc, #84]	; (8001200 <MyLED2_init+0x60>)
 80011aa:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80011ae:	6013      	str	r3, [r2, #0]
  //Set the values
	GPIOB->MODER |=(0x1 <<28);
 80011b0:	4b13      	ldr	r3, [pc, #76]	; (8001200 <MyLED2_init+0x60>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a12      	ldr	r2, [pc, #72]	; (8001200 <MyLED2_init+0x60>)
 80011b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ba:	6013      	str	r3, [r2, #0]

  //Configure the output type register
  //0:Push-Pull
  //OTYPER Bit 14
	GPIOB->OTYPER &=~(1<<14);
 80011bc:	4b10      	ldr	r3, [pc, #64]	; (8001200 <MyLED2_init+0x60>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	4a0f      	ldr	r2, [pc, #60]	; (8001200 <MyLED2_init+0x60>)
 80011c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80011c6:	6053      	str	r3, [r2, #4]

  //Configure the speed register
  //11:Very high speed
  //OSPEEDR Bit 29 and Bit 28
  //Reset both bits 28 and 29 to 0
	GPIOB->OSPEEDR &=~(0x3 <<28);
 80011c8:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <MyLED2_init+0x60>)
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	4a0c      	ldr	r2, [pc, #48]	; (8001200 <MyLED2_init+0x60>)
 80011ce:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80011d2:	6093      	str	r3, [r2, #8]
  //Set the values
	GPIOB->OSPEEDR |=(0x1 <<28);
 80011d4:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <MyLED2_init+0x60>)
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	4a09      	ldr	r2, [pc, #36]	; (8001200 <MyLED2_init+0x60>)
 80011da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011de:	6093      	str	r3, [r2, #8]

  //Configure pull-up/pull-down register
  //00: no pull-up/pull-down
  //PUPDR Bit 29 and Bit 28
  //Reset both bits 28 and 29 to 0
	GPIOB->PUPDR &=~(0x3 <<28);
 80011e0:	4b07      	ldr	r3, [pc, #28]	; (8001200 <MyLED2_init+0x60>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	4a06      	ldr	r2, [pc, #24]	; (8001200 <MyLED2_init+0x60>)
 80011e6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80011ea:	60d3      	str	r3, [r2, #12]
  //Set the values
	GPIOB->PUPDR |=(0x0 <<28);
 80011ec:	4b04      	ldr	r3, [pc, #16]	; (8001200 <MyLED2_init+0x60>)
 80011ee:	4a04      	ldr	r2, [pc, #16]	; (8001200 <MyLED2_init+0x60>)
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	60d3      	str	r3, [r2, #12]

}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	48000400 	.word	0x48000400

08001204 <MyButton_init>:

static void MyButton_init(void)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
  //Button is Port C, Pin 13, EXTI13
  //Configure SYSCLK
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 800120a:	4b1e      	ldr	r3, [pc, #120]	; (8001284 <MyButton_init+0x80>)
 800120c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800120e:	4a1d      	ldr	r2, [pc, #116]	; (8001284 <MyButton_init+0x80>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6613      	str	r3, [r2, #96]	; 0x60
 8001216:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <MyButton_init+0x80>)
 8001218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	687b      	ldr	r3, [r7, #4]

  //Configure the MODE register
  //00:input mode
  //MODER Bit 27 and Bit 26
  //Reset both bits 27 and 26 to 0
	GPIOC->MODER &=~(0x3 <<26);
 8001222:	4b19      	ldr	r3, [pc, #100]	; (8001288 <MyButton_init+0x84>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a18      	ldr	r2, [pc, #96]	; (8001288 <MyButton_init+0x84>)
 8001228:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800122c:	6013      	str	r3, [r2, #0]

  //Configure pull-up/pull-down register
  //00: no pull-up/pull-down
  //PUPDR Bit 27 and Bit 26
  //Reset both bits 27 and 26 to 0
	GPIOC->PUPDR &=~(0x3 <<26);
 800122e:	4b16      	ldr	r3, [pc, #88]	; (8001288 <MyButton_init+0x84>)
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	4a15      	ldr	r2, [pc, #84]	; (8001288 <MyButton_init+0x84>)
 8001234:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001238:	60d3      	str	r3, [r2, #12]
  //Set the values
	GPIOC->PUPDR |=(0x3 <<26);
 800123a:	4b13      	ldr	r3, [pc, #76]	; (8001288 <MyButton_init+0x84>)
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	4a12      	ldr	r2, [pc, #72]	; (8001288 <MyButton_init+0x84>)
 8001240:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 8001244:	60d3      	str	r3, [r2, #12]
  //sysconfig Register
  //EXTI13, Choose port C
  //Configure the External Interrupt Configuration Register
  //SYSCFG_EXTICR4 :only 2nd bit in EXTICR[3] is set to 1
	//SYSCFG->EXTICR[3]|=(0x1<<4);
	SYSCFG->EXTICR[3]|=(0x1<<5);
 8001246:	4b11      	ldr	r3, [pc, #68]	; (800128c <MyButton_init+0x88>)
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	4a10      	ldr	r2, [pc, #64]	; (800128c <MyButton_init+0x88>)
 800124c:	f043 0320 	orr.w	r3, r3, #32
 8001250:	6153      	str	r3, [r2, #20]
	//SYSCFG->EXTICR[3]|=(0x1<<7);


  //Configure the falling trigger selection register
  //EXTI_FTSR
	EXTI->FTSR1 |=(0x1 <<13) ;
 8001252:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <MyButton_init+0x8c>)
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	4a0e      	ldr	r2, [pc, #56]	; (8001290 <MyButton_init+0x8c>)
 8001258:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800125c:	60d3      	str	r3, [r2, #12]


  //Configure the Interrupt Mask Register
  //EXTI_IMR
	EXTI->IMR1 |=(0x1 <<13);
 800125e:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <MyButton_init+0x8c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a0b      	ldr	r2, [pc, #44]	; (8001290 <MyButton_init+0x8c>)
 8001264:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001268:	6013      	str	r3, [r2, #0]

  //Configure NVIC Set Enable Register
  //NVIC_ISER
  //NVIC->ISER[] Register no. & location based on position
  //NVIC->ISER[(((uint32_t)EXTI15_10_IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)EXTI15_10_IRQn) & 0x1FUL));
	NVIC->ISER[1] |= (0x1 << 8);
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <MyButton_init+0x90>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	4a09      	ldr	r2, [pc, #36]	; (8001294 <MyButton_init+0x90>)
 8001270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001274:	6053      	str	r3, [r2, #4]
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	40021000 	.word	0x40021000
 8001288:	48000800 	.word	0x48000800
 800128c:	40010000 	.word	0x40010000
 8001290:	40010400 	.word	0x40010400
 8001294:	e000e100 	.word	0xe000e100

08001298 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	80fb      	strh	r3, [r7, #6]
	//set a flag to initialize SOS transmission
	SOS_transmission=1;
 80012a2:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <HAL_GPIO_EXTI_Callback+0x1c>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	601a      	str	r2, [r3, #0]
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	200000c4 	.word	0x200000c4

080012b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a04      	ldr	r2, [pc, #16]	; (80012d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d101      	bne.n	80012ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012ca:	f000 fc9f 	bl	8001c0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40001000 	.word	0x40001000

080012dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e0:	b672      	cpsid	i
}
 80012e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <Error_Handler+0x8>
	...

080012e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ee:	4b0f      	ldr	r3, [pc, #60]	; (800132c <HAL_MspInit+0x44>)
 80012f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012f2:	4a0e      	ldr	r2, [pc, #56]	; (800132c <HAL_MspInit+0x44>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6613      	str	r3, [r2, #96]	; 0x60
 80012fa:	4b0c      	ldr	r3, [pc, #48]	; (800132c <HAL_MspInit+0x44>)
 80012fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001306:	4b09      	ldr	r3, [pc, #36]	; (800132c <HAL_MspInit+0x44>)
 8001308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130a:	4a08      	ldr	r2, [pc, #32]	; (800132c <HAL_MspInit+0x44>)
 800130c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001310:	6593      	str	r3, [r2, #88]	; 0x58
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_MspInit+0x44>)
 8001314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131a:	603b      	str	r3, [r7, #0]
 800131c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40021000 	.word	0x40021000

08001330 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08a      	sub	sp, #40	; 0x28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a15      	ldr	r2, [pc, #84]	; (80013a4 <HAL_ADC_MspInit+0x74>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d123      	bne.n	800139a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <HAL_ADC_MspInit+0x78>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001356:	4a14      	ldr	r2, [pc, #80]	; (80013a8 <HAL_ADC_MspInit+0x78>)
 8001358:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800135c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800135e:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <HAL_ADC_MspInit+0x78>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001362:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800136a:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <HAL_ADC_MspInit+0x78>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136e:	4a0e      	ldr	r2, [pc, #56]	; (80013a8 <HAL_ADC_MspInit+0x78>)
 8001370:	f043 0304 	orr.w	r3, r3, #4
 8001374:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001376:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <HAL_ADC_MspInit+0x78>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137a:	f003 0304 	and.w	r3, r3, #4
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001382:	233f      	movs	r3, #63	; 0x3f
 8001384:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001386:	230b      	movs	r3, #11
 8001388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	4619      	mov	r1, r3
 8001394:	4805      	ldr	r0, [pc, #20]	; (80013ac <HAL_ADC_MspInit+0x7c>)
 8001396:	f001 fd4d 	bl	8002e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800139a:	bf00      	nop
 800139c:	3728      	adds	r7, #40	; 0x28
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	50040000 	.word	0x50040000
 80013a8:	40021000 	.word	0x40021000
 80013ac:	48000800 	.word	0x48000800

080013b0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b0ae      	sub	sp, #184	; 0xb8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013c8:	f107 0310 	add.w	r3, r7, #16
 80013cc:	2294      	movs	r2, #148	; 0x94
 80013ce:	2100      	movs	r1, #0
 80013d0:	4618      	mov	r0, r3
 80013d2:	f005 fbbd 	bl	8006b50 <memset>
  if(DFSDM1_Init == 0)
 80013d6:	4b25      	ldr	r3, [pc, #148]	; (800146c <HAL_DFSDM_ChannelMspInit+0xbc>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d142      	bne.n	8001464 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80013de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013e2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013ea:	f107 0310 	add.w	r3, r7, #16
 80013ee:	4618      	mov	r0, r3
 80013f0:	f003 fcc8 	bl	8004d84 <HAL_RCCEx_PeriphCLKConfig>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80013fa:	f7ff ff6f 	bl	80012dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80013fe:	4b1c      	ldr	r3, [pc, #112]	; (8001470 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001402:	4a1b      	ldr	r2, [pc, #108]	; (8001470 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001404:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001408:	6613      	str	r3, [r2, #96]	; 0x60
 800140a:	4b19      	ldr	r3, [pc, #100]	; (8001470 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800140c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800140e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001416:	4b16      	ldr	r3, [pc, #88]	; (8001470 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141a:	4a15      	ldr	r2, [pc, #84]	; (8001470 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800141c:	f043 0310 	orr.w	r3, r3, #16
 8001420:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001422:	4b13      	ldr	r3, [pc, #76]	; (8001470 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001426:	f003 0310 	and.w	r3, r3, #16
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800142e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001432:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001436:	2302      	movs	r3, #2
 8001438:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2300      	movs	r3, #0
 8001444:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001448:	2306      	movs	r3, #6
 800144a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800144e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001452:	4619      	mov	r1, r3
 8001454:	4807      	ldr	r0, [pc, #28]	; (8001474 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001456:	f001 fced 	bl	8002e34 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800145a:	4b04      	ldr	r3, [pc, #16]	; (800146c <HAL_DFSDM_ChannelMspInit+0xbc>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	3301      	adds	r3, #1
 8001460:	4a02      	ldr	r2, [pc, #8]	; (800146c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001462:	6013      	str	r3, [r2, #0]
  }

}
 8001464:	bf00      	nop
 8001466:	37b8      	adds	r7, #184	; 0xb8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000578 	.word	0x20000578
 8001470:	40021000 	.word	0x40021000
 8001474:	48001000 	.word	0x48001000

08001478 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b0b0      	sub	sp, #192	; 0xc0
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001490:	f107 0318 	add.w	r3, r7, #24
 8001494:	2294      	movs	r2, #148	; 0x94
 8001496:	2100      	movs	r1, #0
 8001498:	4618      	mov	r0, r3
 800149a:	f005 fb59 	bl	8006b50 <memset>
  if(hi2c->Instance==I2C1)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a42      	ldr	r2, [pc, #264]	; (80015ac <HAL_I2C_MspInit+0x134>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d13c      	bne.n	8001522 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014a8:	2340      	movs	r3, #64	; 0x40
 80014aa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80014ac:	2300      	movs	r3, #0
 80014ae:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014b0:	f107 0318 	add.w	r3, r7, #24
 80014b4:	4618      	mov	r0, r3
 80014b6:	f003 fc65 	bl	8004d84 <HAL_RCCEx_PeriphCLKConfig>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80014c0:	f7ff ff0c 	bl	80012dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c4:	4b3a      	ldr	r3, [pc, #232]	; (80015b0 <HAL_I2C_MspInit+0x138>)
 80014c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c8:	4a39      	ldr	r2, [pc, #228]	; (80015b0 <HAL_I2C_MspInit+0x138>)
 80014ca:	f043 0302 	orr.w	r3, r3, #2
 80014ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d0:	4b37      	ldr	r3, [pc, #220]	; (80015b0 <HAL_I2C_MspInit+0x138>)
 80014d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80014dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014e4:	2312      	movs	r3, #18
 80014e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014ea:	2301      	movs	r3, #1
 80014ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f0:	2303      	movs	r3, #3
 80014f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014f6:	2304      	movs	r3, #4
 80014f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001500:	4619      	mov	r1, r3
 8001502:	482c      	ldr	r0, [pc, #176]	; (80015b4 <HAL_I2C_MspInit+0x13c>)
 8001504:	f001 fc96 	bl	8002e34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001508:	4b29      	ldr	r3, [pc, #164]	; (80015b0 <HAL_I2C_MspInit+0x138>)
 800150a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150c:	4a28      	ldr	r2, [pc, #160]	; (80015b0 <HAL_I2C_MspInit+0x138>)
 800150e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001512:	6593      	str	r3, [r2, #88]	; 0x58
 8001514:	4b26      	ldr	r3, [pc, #152]	; (80015b0 <HAL_I2C_MspInit+0x138>)
 8001516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001518:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001520:	e040      	b.n	80015a4 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a24      	ldr	r2, [pc, #144]	; (80015b8 <HAL_I2C_MspInit+0x140>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d13b      	bne.n	80015a4 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800152c:	2380      	movs	r3, #128	; 0x80
 800152e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001530:	2300      	movs	r3, #0
 8001532:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001534:	f107 0318 	add.w	r3, r7, #24
 8001538:	4618      	mov	r0, r3
 800153a:	f003 fc23 	bl	8004d84 <HAL_RCCEx_PeriphCLKConfig>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001544:	f7ff feca 	bl	80012dc <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001548:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <HAL_I2C_MspInit+0x138>)
 800154a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154c:	4a18      	ldr	r2, [pc, #96]	; (80015b0 <HAL_I2C_MspInit+0x138>)
 800154e:	f043 0302 	orr.w	r3, r3, #2
 8001552:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001554:	4b16      	ldr	r3, [pc, #88]	; (80015b0 <HAL_I2C_MspInit+0x138>)
 8001556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001560:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001564:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001568:	2312      	movs	r3, #18
 800156a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800156e:	2301      	movs	r3, #1
 8001570:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001574:	2303      	movs	r3, #3
 8001576:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800157a:	2304      	movs	r3, #4
 800157c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001580:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001584:	4619      	mov	r1, r3
 8001586:	480b      	ldr	r0, [pc, #44]	; (80015b4 <HAL_I2C_MspInit+0x13c>)
 8001588:	f001 fc54 	bl	8002e34 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <HAL_I2C_MspInit+0x138>)
 800158e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001590:	4a07      	ldr	r2, [pc, #28]	; (80015b0 <HAL_I2C_MspInit+0x138>)
 8001592:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001596:	6593      	str	r3, [r2, #88]	; 0x58
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <HAL_I2C_MspInit+0x138>)
 800159a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	68bb      	ldr	r3, [r7, #8]
}
 80015a4:	bf00      	nop
 80015a6:	37c0      	adds	r7, #192	; 0xc0
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40005400 	.word	0x40005400
 80015b0:	40021000 	.word	0x40021000
 80015b4:	48000400 	.word	0x48000400
 80015b8:	40005800 	.word	0x40005800

080015bc <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b0b0      	sub	sp, #192	; 0xc0
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015d4:	f107 0318 	add.w	r3, r7, #24
 80015d8:	2294      	movs	r2, #148	; 0x94
 80015da:	2100      	movs	r1, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	f005 fab7 	bl	8006b50 <memset>
  if(hospi->Instance==OCTOSPI1)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a28      	ldr	r2, [pc, #160]	; (8001688 <HAL_OSPI_MspInit+0xcc>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d149      	bne.n	8001680 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80015ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015f0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 80015f2:	2300      	movs	r3, #0
 80015f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015f8:	f107 0318 	add.w	r3, r7, #24
 80015fc:	4618      	mov	r0, r3
 80015fe:	f003 fbc1 	bl	8004d84 <HAL_RCCEx_PeriphCLKConfig>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8001608:	f7ff fe68 	bl	80012dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 800160c:	4b1f      	ldr	r3, [pc, #124]	; (800168c <HAL_OSPI_MspInit+0xd0>)
 800160e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001610:	4a1e      	ldr	r2, [pc, #120]	; (800168c <HAL_OSPI_MspInit+0xd0>)
 8001612:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001616:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001618:	4b1c      	ldr	r3, [pc, #112]	; (800168c <HAL_OSPI_MspInit+0xd0>)
 800161a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001620:	617b      	str	r3, [r7, #20]
 8001622:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001624:	4b19      	ldr	r3, [pc, #100]	; (800168c <HAL_OSPI_MspInit+0xd0>)
 8001626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001628:	4a18      	ldr	r2, [pc, #96]	; (800168c <HAL_OSPI_MspInit+0xd0>)
 800162a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162e:	6513      	str	r3, [r2, #80]	; 0x50
 8001630:	4b16      	ldr	r3, [pc, #88]	; (800168c <HAL_OSPI_MspInit+0xd0>)
 8001632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800163c:	4b13      	ldr	r3, [pc, #76]	; (800168c <HAL_OSPI_MspInit+0xd0>)
 800163e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001640:	4a12      	ldr	r2, [pc, #72]	; (800168c <HAL_OSPI_MspInit+0xd0>)
 8001642:	f043 0310 	orr.w	r3, r3, #16
 8001646:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001648:	4b10      	ldr	r3, [pc, #64]	; (800168c <HAL_OSPI_MspInit+0xd0>)
 800164a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164c:	f003 0310 	and.w	r3, r3, #16
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001654:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001658:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165c:	2302      	movs	r3, #2
 800165e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001668:	2303      	movs	r3, #3
 800166a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800166e:	230a      	movs	r3, #10
 8001670:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001674:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001678:	4619      	mov	r1, r3
 800167a:	4805      	ldr	r0, [pc, #20]	; (8001690 <HAL_OSPI_MspInit+0xd4>)
 800167c:	f001 fbda 	bl	8002e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8001680:	bf00      	nop
 8001682:	37c0      	adds	r7, #192	; 0xc0
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	a0001000 	.word	0xa0001000
 800168c:	40021000 	.word	0x40021000
 8001690:	48001000 	.word	0x48001000

08001694 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08c      	sub	sp, #48	; 0x30
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169c:	f107 031c 	add.w	r3, r7, #28
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a2f      	ldr	r2, [pc, #188]	; (8001770 <HAL_SPI_MspInit+0xdc>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d129      	bne.n	800170a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016b6:	4b2f      	ldr	r3, [pc, #188]	; (8001774 <HAL_SPI_MspInit+0xe0>)
 80016b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ba:	4a2e      	ldr	r2, [pc, #184]	; (8001774 <HAL_SPI_MspInit+0xe0>)
 80016bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016c0:	6613      	str	r3, [r2, #96]	; 0x60
 80016c2:	4b2c      	ldr	r3, [pc, #176]	; (8001774 <HAL_SPI_MspInit+0xe0>)
 80016c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016ca:	61bb      	str	r3, [r7, #24]
 80016cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ce:	4b29      	ldr	r3, [pc, #164]	; (8001774 <HAL_SPI_MspInit+0xe0>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d2:	4a28      	ldr	r2, [pc, #160]	; (8001774 <HAL_SPI_MspInit+0xe0>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016da:	4b26      	ldr	r3, [pc, #152]	; (8001774 <HAL_SPI_MspInit+0xe0>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80016e6:	23e0      	movs	r3, #224	; 0xe0
 80016e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ea:	2302      	movs	r3, #2
 80016ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f2:	2303      	movs	r3, #3
 80016f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016f6:	2305      	movs	r3, #5
 80016f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fa:	f107 031c 	add.w	r3, r7, #28
 80016fe:	4619      	mov	r1, r3
 8001700:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001704:	f001 fb96 	bl	8002e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001708:	e02d      	b.n	8001766 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a1a      	ldr	r2, [pc, #104]	; (8001778 <HAL_SPI_MspInit+0xe4>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d128      	bne.n	8001766 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001714:	4b17      	ldr	r3, [pc, #92]	; (8001774 <HAL_SPI_MspInit+0xe0>)
 8001716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001718:	4a16      	ldr	r2, [pc, #88]	; (8001774 <HAL_SPI_MspInit+0xe0>)
 800171a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800171e:	6593      	str	r3, [r2, #88]	; 0x58
 8001720:	4b14      	ldr	r3, [pc, #80]	; (8001774 <HAL_SPI_MspInit+0xe0>)
 8001722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001724:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800172c:	4b11      	ldr	r3, [pc, #68]	; (8001774 <HAL_SPI_MspInit+0xe0>)
 800172e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001730:	4a10      	ldr	r2, [pc, #64]	; (8001774 <HAL_SPI_MspInit+0xe0>)
 8001732:	f043 0304 	orr.w	r3, r3, #4
 8001736:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001738:	4b0e      	ldr	r3, [pc, #56]	; (8001774 <HAL_SPI_MspInit+0xe0>)
 800173a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001744:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174a:	2302      	movs	r3, #2
 800174c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001752:	2303      	movs	r3, #3
 8001754:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001756:	2306      	movs	r3, #6
 8001758:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800175a:	f107 031c 	add.w	r3, r7, #28
 800175e:	4619      	mov	r1, r3
 8001760:	4806      	ldr	r0, [pc, #24]	; (800177c <HAL_SPI_MspInit+0xe8>)
 8001762:	f001 fb67 	bl	8002e34 <HAL_GPIO_Init>
}
 8001766:	bf00      	nop
 8001768:	3730      	adds	r7, #48	; 0x30
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40013000 	.word	0x40013000
 8001774:	40021000 	.word	0x40021000
 8001778:	40003c00 	.word	0x40003c00
 800177c:	48000800 	.word	0x48000800

08001780 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b0b4      	sub	sp, #208	; 0xd0
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001798:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800179c:	2294      	movs	r2, #148	; 0x94
 800179e:	2100      	movs	r1, #0
 80017a0:	4618      	mov	r0, r3
 80017a2:	f005 f9d5 	bl	8006b50 <memset>
  if(huart->Instance==UART4)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a83      	ldr	r2, [pc, #524]	; (80019b8 <HAL_UART_MspInit+0x238>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d13c      	bne.n	800182a <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80017b0:	2308      	movs	r3, #8
 80017b2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80017b4:	2300      	movs	r3, #0
 80017b6:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017bc:	4618      	mov	r0, r3
 80017be:	f003 fae1 	bl	8004d84 <HAL_RCCEx_PeriphCLKConfig>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017c8:	f7ff fd88 	bl	80012dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80017cc:	4b7b      	ldr	r3, [pc, #492]	; (80019bc <HAL_UART_MspInit+0x23c>)
 80017ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d0:	4a7a      	ldr	r2, [pc, #488]	; (80019bc <HAL_UART_MspInit+0x23c>)
 80017d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80017d6:	6593      	str	r3, [r2, #88]	; 0x58
 80017d8:	4b78      	ldr	r3, [pc, #480]	; (80019bc <HAL_UART_MspInit+0x23c>)
 80017da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e4:	4b75      	ldr	r3, [pc, #468]	; (80019bc <HAL_UART_MspInit+0x23c>)
 80017e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e8:	4a74      	ldr	r2, [pc, #464]	; (80019bc <HAL_UART_MspInit+0x23c>)
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f0:	4b72      	ldr	r3, [pc, #456]	; (80019bc <HAL_UART_MspInit+0x23c>)
 80017f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	623b      	str	r3, [r7, #32]
 80017fa:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80017fc:	2303      	movs	r3, #3
 80017fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001802:	2302      	movs	r3, #2
 8001804:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180e:	2303      	movs	r3, #3
 8001810:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001814:	2308      	movs	r3, #8
 8001816:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800181e:	4619      	mov	r1, r3
 8001820:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001824:	f001 fb06 	bl	8002e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001828:	e0c2      	b.n	80019b0 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART1)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a64      	ldr	r2, [pc, #400]	; (80019c0 <HAL_UART_MspInit+0x240>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d13b      	bne.n	80018ac <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001834:	2301      	movs	r3, #1
 8001836:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001838:	2300      	movs	r3, #0
 800183a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800183c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001840:	4618      	mov	r0, r3
 8001842:	f003 fa9f 	bl	8004d84 <HAL_RCCEx_PeriphCLKConfig>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 800184c:	f7ff fd46 	bl	80012dc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001850:	4b5a      	ldr	r3, [pc, #360]	; (80019bc <HAL_UART_MspInit+0x23c>)
 8001852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001854:	4a59      	ldr	r2, [pc, #356]	; (80019bc <HAL_UART_MspInit+0x23c>)
 8001856:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800185a:	6613      	str	r3, [r2, #96]	; 0x60
 800185c:	4b57      	ldr	r3, [pc, #348]	; (80019bc <HAL_UART_MspInit+0x23c>)
 800185e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001860:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001864:	61fb      	str	r3, [r7, #28]
 8001866:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001868:	4b54      	ldr	r3, [pc, #336]	; (80019bc <HAL_UART_MspInit+0x23c>)
 800186a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186c:	4a53      	ldr	r2, [pc, #332]	; (80019bc <HAL_UART_MspInit+0x23c>)
 800186e:	f043 0302 	orr.w	r3, r3, #2
 8001872:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001874:	4b51      	ldr	r3, [pc, #324]	; (80019bc <HAL_UART_MspInit+0x23c>)
 8001876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	61bb      	str	r3, [r7, #24]
 800187e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001880:	23c0      	movs	r3, #192	; 0xc0
 8001882:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001886:	2302      	movs	r3, #2
 8001888:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001892:	2303      	movs	r3, #3
 8001894:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001898:	2307      	movs	r3, #7
 800189a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80018a2:	4619      	mov	r1, r3
 80018a4:	4847      	ldr	r0, [pc, #284]	; (80019c4 <HAL_UART_MspInit+0x244>)
 80018a6:	f001 fac5 	bl	8002e34 <HAL_GPIO_Init>
}
 80018aa:	e081      	b.n	80019b0 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a45      	ldr	r2, [pc, #276]	; (80019c8 <HAL_UART_MspInit+0x248>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d13b      	bne.n	800192e <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80018b6:	2302      	movs	r3, #2
 80018b8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018ba:	2300      	movs	r3, #0
 80018bc:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018c2:	4618      	mov	r0, r3
 80018c4:	f003 fa5e 	bl	8004d84 <HAL_RCCEx_PeriphCLKConfig>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <HAL_UART_MspInit+0x152>
      Error_Handler();
 80018ce:	f7ff fd05 	bl	80012dc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80018d2:	4b3a      	ldr	r3, [pc, #232]	; (80019bc <HAL_UART_MspInit+0x23c>)
 80018d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d6:	4a39      	ldr	r2, [pc, #228]	; (80019bc <HAL_UART_MspInit+0x23c>)
 80018d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018dc:	6593      	str	r3, [r2, #88]	; 0x58
 80018de:	4b37      	ldr	r3, [pc, #220]	; (80019bc <HAL_UART_MspInit+0x23c>)
 80018e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ea:	4b34      	ldr	r3, [pc, #208]	; (80019bc <HAL_UART_MspInit+0x23c>)
 80018ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ee:	4a33      	ldr	r2, [pc, #204]	; (80019bc <HAL_UART_MspInit+0x23c>)
 80018f0:	f043 0308 	orr.w	r3, r3, #8
 80018f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018f6:	4b31      	ldr	r3, [pc, #196]	; (80019bc <HAL_UART_MspInit+0x23c>)
 80018f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fa:	f003 0308 	and.w	r3, r3, #8
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001902:	2378      	movs	r3, #120	; 0x78
 8001904:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001908:	2302      	movs	r3, #2
 800190a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001914:	2303      	movs	r3, #3
 8001916:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800191a:	2307      	movs	r3, #7
 800191c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001920:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001924:	4619      	mov	r1, r3
 8001926:	4829      	ldr	r0, [pc, #164]	; (80019cc <HAL_UART_MspInit+0x24c>)
 8001928:	f001 fa84 	bl	8002e34 <HAL_GPIO_Init>
}
 800192c:	e040      	b.n	80019b0 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART3)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a27      	ldr	r2, [pc, #156]	; (80019d0 <HAL_UART_MspInit+0x250>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d13b      	bne.n	80019b0 <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001938:	2304      	movs	r3, #4
 800193a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800193c:	2300      	movs	r3, #0
 800193e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001940:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001944:	4618      	mov	r0, r3
 8001946:	f003 fa1d 	bl	8004d84 <HAL_RCCEx_PeriphCLKConfig>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8001950:	f7ff fcc4 	bl	80012dc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001954:	4b19      	ldr	r3, [pc, #100]	; (80019bc <HAL_UART_MspInit+0x23c>)
 8001956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001958:	4a18      	ldr	r2, [pc, #96]	; (80019bc <HAL_UART_MspInit+0x23c>)
 800195a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800195e:	6593      	str	r3, [r2, #88]	; 0x58
 8001960:	4b16      	ldr	r3, [pc, #88]	; (80019bc <HAL_UART_MspInit+0x23c>)
 8001962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001964:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800196c:	4b13      	ldr	r3, [pc, #76]	; (80019bc <HAL_UART_MspInit+0x23c>)
 800196e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001970:	4a12      	ldr	r2, [pc, #72]	; (80019bc <HAL_UART_MspInit+0x23c>)
 8001972:	f043 0308 	orr.w	r3, r3, #8
 8001976:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001978:	4b10      	ldr	r3, [pc, #64]	; (80019bc <HAL_UART_MspInit+0x23c>)
 800197a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001984:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001988:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198c:	2302      	movs	r3, #2
 800198e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001998:	2303      	movs	r3, #3
 800199a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800199e:	2307      	movs	r3, #7
 80019a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019a4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80019a8:	4619      	mov	r1, r3
 80019aa:	4808      	ldr	r0, [pc, #32]	; (80019cc <HAL_UART_MspInit+0x24c>)
 80019ac:	f001 fa42 	bl	8002e34 <HAL_GPIO_Init>
}
 80019b0:	bf00      	nop
 80019b2:	37d0      	adds	r7, #208	; 0xd0
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40004c00 	.word	0x40004c00
 80019bc:	40021000 	.word	0x40021000
 80019c0:	40013800 	.word	0x40013800
 80019c4:	48000400 	.word	0x48000400
 80019c8:	40004400 	.word	0x40004400
 80019cc:	48000c00 	.word	0x48000c00
 80019d0:	40004800 	.word	0x40004800

080019d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08e      	sub	sp, #56	; 0x38
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80019dc:	2300      	movs	r3, #0
 80019de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80019e2:	4b34      	ldr	r3, [pc, #208]	; (8001ab4 <HAL_InitTick+0xe0>)
 80019e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e6:	4a33      	ldr	r2, [pc, #204]	; (8001ab4 <HAL_InitTick+0xe0>)
 80019e8:	f043 0310 	orr.w	r3, r3, #16
 80019ec:	6593      	str	r3, [r2, #88]	; 0x58
 80019ee:	4b31      	ldr	r3, [pc, #196]	; (8001ab4 <HAL_InitTick+0xe0>)
 80019f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f2:	f003 0310 	and.w	r3, r3, #16
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019fa:	f107 0210 	add.w	r2, r7, #16
 80019fe:	f107 0314 	add.w	r3, r7, #20
 8001a02:	4611      	mov	r1, r2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f003 f8cb 	bl	8004ba0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001a0a:	6a3b      	ldr	r3, [r7, #32]
 8001a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d103      	bne.n	8001a1c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a14:	f003 f898 	bl	8004b48 <HAL_RCC_GetPCLK1Freq>
 8001a18:	6378      	str	r0, [r7, #52]	; 0x34
 8001a1a:	e004      	b.n	8001a26 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001a1c:	f003 f894 	bl	8004b48 <HAL_RCC_GetPCLK1Freq>
 8001a20:	4603      	mov	r3, r0
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a28:	4a23      	ldr	r2, [pc, #140]	; (8001ab8 <HAL_InitTick+0xe4>)
 8001a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2e:	0c9b      	lsrs	r3, r3, #18
 8001a30:	3b01      	subs	r3, #1
 8001a32:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001a34:	4b21      	ldr	r3, [pc, #132]	; (8001abc <HAL_InitTick+0xe8>)
 8001a36:	4a22      	ldr	r2, [pc, #136]	; (8001ac0 <HAL_InitTick+0xec>)
 8001a38:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001a3a:	4b20      	ldr	r3, [pc, #128]	; (8001abc <HAL_InitTick+0xe8>)
 8001a3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a40:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001a42:	4a1e      	ldr	r2, [pc, #120]	; (8001abc <HAL_InitTick+0xe8>)
 8001a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a46:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001a48:	4b1c      	ldr	r3, [pc, #112]	; (8001abc <HAL_InitTick+0xe8>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a4e:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <HAL_InitTick+0xe8>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a54:	4b19      	ldr	r3, [pc, #100]	; (8001abc <HAL_InitTick+0xe8>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001a5a:	4818      	ldr	r0, [pc, #96]	; (8001abc <HAL_InitTick+0xe8>)
 8001a5c:	f003 ff5d 	bl	800591a <HAL_TIM_Base_Init>
 8001a60:	4603      	mov	r3, r0
 8001a62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001a66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d11b      	bne.n	8001aa6 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001a6e:	4813      	ldr	r0, [pc, #76]	; (8001abc <HAL_InitTick+0xe8>)
 8001a70:	f003 ffb4 	bl	80059dc <HAL_TIM_Base_Start_IT>
 8001a74:	4603      	mov	r3, r0
 8001a76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001a7a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d111      	bne.n	8001aa6 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a82:	2036      	movs	r0, #54	; 0x36
 8001a84:	f001 f8bc 	bl	8002c00 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b0f      	cmp	r3, #15
 8001a8c:	d808      	bhi.n	8001aa0 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	6879      	ldr	r1, [r7, #4]
 8001a92:	2036      	movs	r0, #54	; 0x36
 8001a94:	f001 f898 	bl	8002bc8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a98:	4a0a      	ldr	r2, [pc, #40]	; (8001ac4 <HAL_InitTick+0xf0>)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6013      	str	r3, [r2, #0]
 8001a9e:	e002      	b.n	8001aa6 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001aa6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3738      	adds	r7, #56	; 0x38
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	431bde83 	.word	0x431bde83
 8001abc:	2000057c 	.word	0x2000057c
 8001ac0:	40001000 	.word	0x40001000
 8001ac4:	20000004 	.word	0x20000004

08001ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001acc:	e7fe      	b.n	8001acc <NMI_Handler+0x4>

08001ace <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ad2:	e7fe      	b.n	8001ad2 <HardFault_Handler+0x4>

08001ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad8:	e7fe      	b.n	8001ad8 <MemManage_Handler+0x4>

08001ada <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ade:	e7fe      	b.n	8001ade <BusFault_Handler+0x4>

08001ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae4:	e7fe      	b.n	8001ae4 <UsageFault_Handler+0x4>

08001ae6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001af8:	2020      	movs	r0, #32
 8001afa:	f001 fb45 	bl	8003188 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001afe:	2040      	movs	r0, #64	; 0x40
 8001b00:	f001 fb42 	bl	8003188 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001b04:	2080      	movs	r0, #128	; 0x80
 8001b06:	f001 fb3f 	bl	8003188 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001b0a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001b0e:	f001 fb3b 	bl	8003188 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 8001b1a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001b1e:	f001 fb33 	bl	8003188 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001b22:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001b26:	f001 fb2f 	bl	8003188 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 8001b2a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001b2e:	f001 fb2b 	bl	8003188 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001b32:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b36:	f001 fb27 	bl	8003188 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001b3a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001b3e:	f001 fb23 	bl	8003188 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001b42:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001b46:	f001 fb1f 	bl	8003188 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b54:	4802      	ldr	r0, [pc, #8]	; (8001b60 <TIM6_DAC_IRQHandler+0x10>)
 8001b56:	f003 ffb1 	bl	8005abc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	2000057c 	.word	0x2000057c

08001b64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b68:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <SystemInit+0x20>)
 8001b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b6e:	4a05      	ldr	r2, [pc, #20]	; (8001b84 <SystemInit+0x20>)
 8001b70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bc0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b8c:	f7ff ffea 	bl	8001b64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b90:	480c      	ldr	r0, [pc, #48]	; (8001bc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b92:	490d      	ldr	r1, [pc, #52]	; (8001bc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b94:	4a0d      	ldr	r2, [pc, #52]	; (8001bcc <LoopForever+0xe>)
  movs r3, #0
 8001b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b98:	e002      	b.n	8001ba0 <LoopCopyDataInit>

08001b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b9e:	3304      	adds	r3, #4

08001ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ba4:	d3f9      	bcc.n	8001b9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ba6:	4a0a      	ldr	r2, [pc, #40]	; (8001bd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ba8:	4c0a      	ldr	r4, [pc, #40]	; (8001bd4 <LoopForever+0x16>)
  movs r3, #0
 8001baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bac:	e001      	b.n	8001bb2 <LoopFillZerobss>

08001bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb0:	3204      	adds	r2, #4

08001bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bb4:	d3fb      	bcc.n	8001bae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bb6:	f004 ffd3 	bl	8006b60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bba:	f7fe fd4d 	bl	8000658 <main>

08001bbe <LoopForever>:

LoopForever:
    b LoopForever
 8001bbe:	e7fe      	b.n	8001bbe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001bc0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bc8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001bcc:	08006c40 	.word	0x08006c40
  ldr r2, =_sbss
 8001bd0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001bd4:	200005f0 	.word	0x200005f0

08001bd8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bd8:	e7fe      	b.n	8001bd8 <ADC1_IRQHandler>

08001bda <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be4:	2003      	movs	r0, #3
 8001be6:	f000 ffe4 	bl	8002bb2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bea:	200f      	movs	r0, #15
 8001bec:	f7ff fef2 	bl	80019d4 <HAL_InitTick>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d002      	beq.n	8001bfc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	71fb      	strb	r3, [r7, #7]
 8001bfa:	e001      	b.n	8001c00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bfc:	f7ff fb74 	bl	80012e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c00:	79fb      	ldrb	r3, [r7, #7]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <HAL_IncTick+0x20>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	461a      	mov	r2, r3
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_IncTick+0x24>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	4a04      	ldr	r2, [pc, #16]	; (8001c30 <HAL_IncTick+0x24>)
 8001c1e:	6013      	str	r3, [r2, #0]
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	20000008 	.word	0x20000008
 8001c30:	200005c8 	.word	0x200005c8

08001c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return uwTick;
 8001c38:	4b03      	ldr	r3, [pc, #12]	; (8001c48 <HAL_GetTick+0x14>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	200005c8 	.word	0x200005c8

08001c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c54:	f7ff ffee 	bl	8001c34 <HAL_GetTick>
 8001c58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c64:	d005      	beq.n	8001c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c66:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <HAL_Delay+0x44>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4413      	add	r3, r2
 8001c70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c72:	bf00      	nop
 8001c74:	f7ff ffde 	bl	8001c34 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d8f7      	bhi.n	8001c74 <HAL_Delay+0x28>
  {
  }
}
 8001c84:	bf00      	nop
 8001c86:	bf00      	nop
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000008 	.word	0x20000008

08001c94 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	609a      	str	r2, [r3, #8]
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b087      	sub	sp, #28
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
 8001d08:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	3360      	adds	r3, #96	; 0x60
 8001d0e:	461a      	mov	r2, r3
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4413      	add	r3, r2
 8001d16:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <LL_ADC_SetOffset+0x44>)
 8001d1e:	4013      	ands	r3, r2
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d34:	bf00      	nop
 8001d36:	371c      	adds	r7, #28
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	03fff000 	.word	0x03fff000

08001d44 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	3360      	adds	r3, #96	; 0x60
 8001d52:	461a      	mov	r2, r3
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b087      	sub	sp, #28
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	3360      	adds	r3, #96	; 0x60
 8001d80:	461a      	mov	r2, r3
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	431a      	orrs	r2, r3
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d9a:	bf00      	nop
 8001d9c:	371c      	adds	r7, #28
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
 8001dae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	695b      	ldr	r3, [r3, #20]
 8001db4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	615a      	str	r2, [r3, #20]
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b087      	sub	sp, #28
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	3330      	adds	r3, #48	; 0x30
 8001ddc:	461a      	mov	r2, r3
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	0a1b      	lsrs	r3, r3, #8
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	f003 030c 	and.w	r3, r3, #12
 8001de8:	4413      	add	r3, r2
 8001dea:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	f003 031f 	and.w	r3, r3, #31
 8001df6:	211f      	movs	r1, #31
 8001df8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	401a      	ands	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	0e9b      	lsrs	r3, r3, #26
 8001e04:	f003 011f 	and.w	r1, r3, #31
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	f003 031f 	and.w	r3, r3, #31
 8001e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e12:	431a      	orrs	r2, r3
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e18:	bf00      	nop
 8001e1a:	371c      	adds	r7, #28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b087      	sub	sp, #28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	3314      	adds	r3, #20
 8001e34:	461a      	mov	r2, r3
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	0e5b      	lsrs	r3, r3, #25
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	4413      	add	r3, r2
 8001e42:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	0d1b      	lsrs	r3, r3, #20
 8001e4c:	f003 031f 	and.w	r3, r3, #31
 8001e50:	2107      	movs	r1, #7
 8001e52:	fa01 f303 	lsl.w	r3, r1, r3
 8001e56:	43db      	mvns	r3, r3
 8001e58:	401a      	ands	r2, r3
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	0d1b      	lsrs	r3, r3, #20
 8001e5e:	f003 031f 	and.w	r3, r3, #31
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	fa01 f303 	lsl.w	r3, r1, r3
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e6e:	bf00      	nop
 8001e70:	371c      	adds	r7, #28
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
	...

08001e7c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e94:	43db      	mvns	r3, r3
 8001e96:	401a      	ands	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f003 0318 	and.w	r3, r3, #24
 8001e9e:	4908      	ldr	r1, [pc, #32]	; (8001ec0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ea0:	40d9      	lsrs	r1, r3
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	400b      	ands	r3, r1
 8001ea6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001eb2:	bf00      	nop
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	0007ffff 	.word	0x0007ffff

08001ec4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001ed4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6093      	str	r3, [r2, #8]
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ef8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001efc:	d101      	bne.n	8001f02 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001efe:	2301      	movs	r3, #1
 8001f00:	e000      	b.n	8001f04 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001f20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f24:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f4c:	d101      	bne.n	8001f52 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e000      	b.n	8001f54 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d101      	bne.n	8001f78 <LL_ADC_IsEnabled+0x18>
 8001f74:	2301      	movs	r3, #1
 8001f76:	e000      	b.n	8001f7a <LL_ADC_IsEnabled+0x1a>
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 0304 	and.w	r3, r3, #4
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	d101      	bne.n	8001f9e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e000      	b.n	8001fa0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f003 0308 	and.w	r3, r3, #8
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	d101      	bne.n	8001fc4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e000      	b.n	8001fc6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
	...

08001fd4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e129      	b.n	8002242 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d109      	bne.n	8002010 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff f997 	bl	8001330 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff ff67 	bl	8001ee8 <LL_ADC_IsDeepPowerDownEnabled>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d004      	beq.n	800202a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff ff4d 	bl	8001ec4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff ff82 	bl	8001f38 <LL_ADC_IsInternalRegulatorEnabled>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d115      	bne.n	8002066 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff ff66 	bl	8001f10 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002044:	4b81      	ldr	r3, [pc, #516]	; (800224c <HAL_ADC_Init+0x278>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	099b      	lsrs	r3, r3, #6
 800204a:	4a81      	ldr	r2, [pc, #516]	; (8002250 <HAL_ADC_Init+0x27c>)
 800204c:	fba2 2303 	umull	r2, r3, r2, r3
 8002050:	099b      	lsrs	r3, r3, #6
 8002052:	3301      	adds	r3, #1
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002058:	e002      	b.n	8002060 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	3b01      	subs	r3, #1
 800205e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f9      	bne.n	800205a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff ff64 	bl	8001f38 <LL_ADC_IsInternalRegulatorEnabled>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10d      	bne.n	8002092 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207a:	f043 0210 	orr.w	r2, r3, #16
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002086:	f043 0201 	orr.w	r2, r3, #1
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff ff75 	bl	8001f86 <LL_ADC_REG_IsConversionOngoing>
 800209c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a2:	f003 0310 	and.w	r3, r3, #16
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f040 80c2 	bne.w	8002230 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f040 80be 	bne.w	8002230 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80020bc:	f043 0202 	orr.w	r2, r3, #2
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff ff49 	bl	8001f60 <LL_ADC_IsEnabled>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d10b      	bne.n	80020ec <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020d4:	485f      	ldr	r0, [pc, #380]	; (8002254 <HAL_ADC_Init+0x280>)
 80020d6:	f7ff ff43 	bl	8001f60 <LL_ADC_IsEnabled>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d105      	bne.n	80020ec <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	4619      	mov	r1, r3
 80020e6:	485c      	ldr	r0, [pc, #368]	; (8002258 <HAL_ADC_Init+0x284>)
 80020e8:	f7ff fdd4 	bl	8001c94 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	7e5b      	ldrb	r3, [r3, #25]
 80020f0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020f6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80020fc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002102:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 3020 	ldrb.w	r3, [r3, #32]
 800210a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d106      	bne.n	8002128 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	3b01      	subs	r3, #1
 8002120:	045b      	lsls	r3, r3, #17
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4313      	orrs	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212c:	2b00      	cmp	r3, #0
 800212e:	d009      	beq.n	8002144 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002134:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4313      	orrs	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68da      	ldr	r2, [r3, #12]
 800214a:	4b44      	ldr	r3, [pc, #272]	; (800225c <HAL_ADC_Init+0x288>)
 800214c:	4013      	ands	r3, r2
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6812      	ldr	r2, [r2, #0]
 8002152:	69b9      	ldr	r1, [r7, #24]
 8002154:	430b      	orrs	r3, r1
 8002156:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff ff25 	bl	8001fac <LL_ADC_INJ_IsConversionOngoing>
 8002162:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d140      	bne.n	80021ec <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d13d      	bne.n	80021ec <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	7e1b      	ldrb	r3, [r3, #24]
 8002178:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800217a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002182:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002184:	4313      	orrs	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002192:	f023 0306 	bic.w	r3, r3, #6
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6812      	ldr	r2, [r2, #0]
 800219a:	69b9      	ldr	r1, [r7, #24]
 800219c:	430b      	orrs	r3, r1
 800219e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d118      	bne.n	80021dc <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80021b4:	f023 0304 	bic.w	r3, r3, #4
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021c0:	4311      	orrs	r1, r2
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80021c6:	4311      	orrs	r1, r2
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80021cc:	430a      	orrs	r2, r1
 80021ce:	431a      	orrs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f042 0201 	orr.w	r2, r2, #1
 80021d8:	611a      	str	r2, [r3, #16]
 80021da:	e007      	b.n	80021ec <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	691a      	ldr	r2, [r3, #16]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 0201 	bic.w	r2, r2, #1
 80021ea:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d10c      	bne.n	800220e <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	f023 010f 	bic.w	r1, r3, #15
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	1e5a      	subs	r2, r3, #1
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	430a      	orrs	r2, r1
 800220a:	631a      	str	r2, [r3, #48]	; 0x30
 800220c:	e007      	b.n	800221e <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 020f 	bic.w	r2, r2, #15
 800221c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002222:	f023 0303 	bic.w	r3, r3, #3
 8002226:	f043 0201 	orr.w	r2, r3, #1
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	659a      	str	r2, [r3, #88]	; 0x58
 800222e:	e007      	b.n	8002240 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002234:	f043 0210 	orr.w	r2, r3, #16
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002240:	7ffb      	ldrb	r3, [r7, #31]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3720      	adds	r7, #32
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20000000 	.word	0x20000000
 8002250:	053e2d63 	.word	0x053e2d63
 8002254:	50040000 	.word	0x50040000
 8002258:	50040300 	.word	0x50040300
 800225c:	fff0c007 	.word	0xfff0c007

08002260 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b0b6      	sub	sp, #216	; 0xd8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800226a:	2300      	movs	r3, #0
 800226c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002270:	2300      	movs	r3, #0
 8002272:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800227a:	2b01      	cmp	r3, #1
 800227c:	d101      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x22>
 800227e:	2302      	movs	r3, #2
 8002280:	e3d5      	b.n	8002a2e <HAL_ADC_ConfigChannel+0x7ce>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff fe79 	bl	8001f86 <LL_ADC_REG_IsConversionOngoing>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	f040 83ba 	bne.w	8002a10 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b05      	cmp	r3, #5
 80022aa:	d824      	bhi.n	80022f6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	3b02      	subs	r3, #2
 80022b2:	2b03      	cmp	r3, #3
 80022b4:	d81b      	bhi.n	80022ee <HAL_ADC_ConfigChannel+0x8e>
 80022b6:	a201      	add	r2, pc, #4	; (adr r2, 80022bc <HAL_ADC_ConfigChannel+0x5c>)
 80022b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022bc:	080022cd 	.word	0x080022cd
 80022c0:	080022d5 	.word	0x080022d5
 80022c4:	080022dd 	.word	0x080022dd
 80022c8:	080022e5 	.word	0x080022e5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80022cc:	230c      	movs	r3, #12
 80022ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80022d2:	e010      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80022d4:	2312      	movs	r3, #18
 80022d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80022da:	e00c      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80022dc:	2318      	movs	r3, #24
 80022de:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80022e2:	e008      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80022e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80022ec:	e003      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80022ee:	2306      	movs	r3, #6
 80022f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80022f4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6818      	ldr	r0, [r3, #0]
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	461a      	mov	r2, r3
 8002300:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002304:	f7ff fd62 	bl	8001dcc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff fe3a 	bl	8001f86 <LL_ADC_REG_IsConversionOngoing>
 8002312:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fe46 	bl	8001fac <LL_ADC_INJ_IsConversionOngoing>
 8002320:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002324:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002328:	2b00      	cmp	r3, #0
 800232a:	f040 81bf 	bne.w	80026ac <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800232e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002332:	2b00      	cmp	r3, #0
 8002334:	f040 81ba 	bne.w	80026ac <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002340:	d10f      	bne.n	8002362 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6818      	ldr	r0, [r3, #0]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2200      	movs	r2, #0
 800234c:	4619      	mov	r1, r3
 800234e:	f7ff fd69 	bl	8001e24 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff fd23 	bl	8001da6 <LL_ADC_SetSamplingTimeCommonConfig>
 8002360:	e00e      	b.n	8002380 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6818      	ldr	r0, [r3, #0]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	6819      	ldr	r1, [r3, #0]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	461a      	mov	r2, r3
 8002370:	f7ff fd58 	bl	8001e24 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2100      	movs	r1, #0
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff fd13 	bl	8001da6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	695a      	ldr	r2, [r3, #20]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	08db      	lsrs	r3, r3, #3
 800238c:	f003 0303 	and.w	r3, r3, #3
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	2b04      	cmp	r3, #4
 80023a0:	d00a      	beq.n	80023b8 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6818      	ldr	r0, [r3, #0]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	6919      	ldr	r1, [r3, #16]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023b2:	f7ff fca3 	bl	8001cfc <LL_ADC_SetOffset>
 80023b6:	e179      	b.n	80026ac <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2100      	movs	r1, #0
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff fcc0 	bl	8001d44 <LL_ADC_GetOffsetChannel>
 80023c4:	4603      	mov	r3, r0
 80023c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10a      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x184>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2100      	movs	r1, #0
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff fcb5 	bl	8001d44 <LL_ADC_GetOffsetChannel>
 80023da:	4603      	mov	r3, r0
 80023dc:	0e9b      	lsrs	r3, r3, #26
 80023de:	f003 021f 	and.w	r2, r3, #31
 80023e2:	e01e      	b.n	8002422 <HAL_ADC_ConfigChannel+0x1c2>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2100      	movs	r1, #0
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff fcaa 	bl	8001d44 <LL_ADC_GetOffsetChannel>
 80023f0:	4603      	mov	r3, r0
 80023f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80023fa:	fa93 f3a3 	rbit	r3, r3
 80023fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002402:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002406:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800240a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002412:	2320      	movs	r3, #32
 8002414:	e004      	b.n	8002420 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002416:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800241a:	fab3 f383 	clz	r3, r3
 800241e:	b2db      	uxtb	r3, r3
 8002420:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800242a:	2b00      	cmp	r3, #0
 800242c:	d105      	bne.n	800243a <HAL_ADC_ConfigChannel+0x1da>
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	0e9b      	lsrs	r3, r3, #26
 8002434:	f003 031f 	and.w	r3, r3, #31
 8002438:	e018      	b.n	800246c <HAL_ADC_ConfigChannel+0x20c>
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002442:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002446:	fa93 f3a3 	rbit	r3, r3
 800244a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 800244e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002452:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002456:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800245e:	2320      	movs	r3, #32
 8002460:	e004      	b.n	800246c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002462:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002466:	fab3 f383 	clz	r3, r3
 800246a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800246c:	429a      	cmp	r2, r3
 800246e:	d106      	bne.n	800247e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2200      	movs	r2, #0
 8002476:	2100      	movs	r1, #0
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff fc79 	bl	8001d70 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2101      	movs	r1, #1
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff fc5d 	bl	8001d44 <LL_ADC_GetOffsetChannel>
 800248a:	4603      	mov	r3, r0
 800248c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10a      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x24a>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2101      	movs	r1, #1
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff fc52 	bl	8001d44 <LL_ADC_GetOffsetChannel>
 80024a0:	4603      	mov	r3, r0
 80024a2:	0e9b      	lsrs	r3, r3, #26
 80024a4:	f003 021f 	and.w	r2, r3, #31
 80024a8:	e01e      	b.n	80024e8 <HAL_ADC_ConfigChannel+0x288>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2101      	movs	r1, #1
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff fc47 	bl	8001d44 <LL_ADC_GetOffsetChannel>
 80024b6:	4603      	mov	r3, r0
 80024b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80024c0:	fa93 f3a3 	rbit	r3, r3
 80024c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80024c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80024d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80024d8:	2320      	movs	r3, #32
 80024da:	e004      	b.n	80024e6 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80024dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80024e0:	fab3 f383 	clz	r3, r3
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d105      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x2a0>
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	0e9b      	lsrs	r3, r3, #26
 80024fa:	f003 031f 	and.w	r3, r3, #31
 80024fe:	e018      	b.n	8002532 <HAL_ADC_ConfigChannel+0x2d2>
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002508:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800250c:	fa93 f3a3 	rbit	r3, r3
 8002510:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002514:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002518:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800251c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002524:	2320      	movs	r3, #32
 8002526:	e004      	b.n	8002532 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002528:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800252c:	fab3 f383 	clz	r3, r3
 8002530:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002532:	429a      	cmp	r2, r3
 8002534:	d106      	bne.n	8002544 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2200      	movs	r2, #0
 800253c:	2101      	movs	r1, #1
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff fc16 	bl	8001d70 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2102      	movs	r1, #2
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff fbfa 	bl	8001d44 <LL_ADC_GetOffsetChannel>
 8002550:	4603      	mov	r3, r0
 8002552:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10a      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x310>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2102      	movs	r1, #2
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff fbef 	bl	8001d44 <LL_ADC_GetOffsetChannel>
 8002566:	4603      	mov	r3, r0
 8002568:	0e9b      	lsrs	r3, r3, #26
 800256a:	f003 021f 	and.w	r2, r3, #31
 800256e:	e01e      	b.n	80025ae <HAL_ADC_ConfigChannel+0x34e>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2102      	movs	r1, #2
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff fbe4 	bl	8001d44 <LL_ADC_GetOffsetChannel>
 800257c:	4603      	mov	r3, r0
 800257e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002582:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002586:	fa93 f3a3 	rbit	r3, r3
 800258a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800258e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002592:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002596:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800259e:	2320      	movs	r3, #32
 80025a0:	e004      	b.n	80025ac <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80025a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025a6:	fab3 f383 	clz	r3, r3
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d105      	bne.n	80025c6 <HAL_ADC_ConfigChannel+0x366>
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	0e9b      	lsrs	r3, r3, #26
 80025c0:	f003 031f 	and.w	r3, r3, #31
 80025c4:	e014      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x390>
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025ce:	fa93 f3a3 	rbit	r3, r3
 80025d2:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80025d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80025da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80025e2:	2320      	movs	r3, #32
 80025e4:	e004      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80025e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025ea:	fab3 f383 	clz	r3, r3
 80025ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d106      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2200      	movs	r2, #0
 80025fa:	2102      	movs	r1, #2
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff fbb7 	bl	8001d70 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2103      	movs	r1, #3
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff fb9b 	bl	8001d44 <LL_ADC_GetOffsetChannel>
 800260e:	4603      	mov	r3, r0
 8002610:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10a      	bne.n	800262e <HAL_ADC_ConfigChannel+0x3ce>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2103      	movs	r1, #3
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff fb90 	bl	8001d44 <LL_ADC_GetOffsetChannel>
 8002624:	4603      	mov	r3, r0
 8002626:	0e9b      	lsrs	r3, r3, #26
 8002628:	f003 021f 	and.w	r2, r3, #31
 800262c:	e017      	b.n	800265e <HAL_ADC_ConfigChannel+0x3fe>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2103      	movs	r1, #3
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff fb85 	bl	8001d44 <LL_ADC_GetOffsetChannel>
 800263a:	4603      	mov	r3, r0
 800263c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002640:	fa93 f3a3 	rbit	r3, r3
 8002644:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002648:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800264a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002650:	2320      	movs	r3, #32
 8002652:	e003      	b.n	800265c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002654:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002656:	fab3 f383 	clz	r3, r3
 800265a:	b2db      	uxtb	r3, r3
 800265c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002666:	2b00      	cmp	r3, #0
 8002668:	d105      	bne.n	8002676 <HAL_ADC_ConfigChannel+0x416>
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	0e9b      	lsrs	r3, r3, #26
 8002670:	f003 031f 	and.w	r3, r3, #31
 8002674:	e011      	b.n	800269a <HAL_ADC_ConfigChannel+0x43a>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800267e:	fa93 f3a3 	rbit	r3, r3
 8002682:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002684:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002686:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002688:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800268e:	2320      	movs	r3, #32
 8002690:	e003      	b.n	800269a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002692:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002694:	fab3 f383 	clz	r3, r3
 8002698:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800269a:	429a      	cmp	r2, r3
 800269c:	d106      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2200      	movs	r2, #0
 80026a4:	2103      	movs	r1, #3
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff fb62 	bl	8001d70 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff fc55 	bl	8001f60 <LL_ADC_IsEnabled>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f040 813f 	bne.w	800293c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6818      	ldr	r0, [r3, #0]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	6819      	ldr	r1, [r3, #0]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	461a      	mov	r2, r3
 80026cc:	f7ff fbd6 	bl	8001e7c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	4a8e      	ldr	r2, [pc, #568]	; (8002910 <HAL_ADC_ConfigChannel+0x6b0>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	f040 8130 	bne.w	800293c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d10b      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x4a4>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	0e9b      	lsrs	r3, r3, #26
 80026f2:	3301      	adds	r3, #1
 80026f4:	f003 031f 	and.w	r3, r3, #31
 80026f8:	2b09      	cmp	r3, #9
 80026fa:	bf94      	ite	ls
 80026fc:	2301      	movls	r3, #1
 80026fe:	2300      	movhi	r3, #0
 8002700:	b2db      	uxtb	r3, r3
 8002702:	e019      	b.n	8002738 <HAL_ADC_ConfigChannel+0x4d8>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800270c:	fa93 f3a3 	rbit	r3, r3
 8002710:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002714:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002716:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 800271c:	2320      	movs	r3, #32
 800271e:	e003      	b.n	8002728 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002720:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002722:	fab3 f383 	clz	r3, r3
 8002726:	b2db      	uxtb	r3, r3
 8002728:	3301      	adds	r3, #1
 800272a:	f003 031f 	and.w	r3, r3, #31
 800272e:	2b09      	cmp	r3, #9
 8002730:	bf94      	ite	ls
 8002732:	2301      	movls	r3, #1
 8002734:	2300      	movhi	r3, #0
 8002736:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002738:	2b00      	cmp	r3, #0
 800273a:	d079      	beq.n	8002830 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002744:	2b00      	cmp	r3, #0
 8002746:	d107      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x4f8>
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	0e9b      	lsrs	r3, r3, #26
 800274e:	3301      	adds	r3, #1
 8002750:	069b      	lsls	r3, r3, #26
 8002752:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002756:	e015      	b.n	8002784 <HAL_ADC_ConfigChannel+0x524>
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002760:	fa93 f3a3 	rbit	r3, r3
 8002764:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002766:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002768:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800276a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002770:	2320      	movs	r3, #32
 8002772:	e003      	b.n	800277c <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002774:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002776:	fab3 f383 	clz	r3, r3
 800277a:	b2db      	uxtb	r3, r3
 800277c:	3301      	adds	r3, #1
 800277e:	069b      	lsls	r3, r3, #26
 8002780:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800278c:	2b00      	cmp	r3, #0
 800278e:	d109      	bne.n	80027a4 <HAL_ADC_ConfigChannel+0x544>
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	0e9b      	lsrs	r3, r3, #26
 8002796:	3301      	adds	r3, #1
 8002798:	f003 031f 	and.w	r3, r3, #31
 800279c:	2101      	movs	r1, #1
 800279e:	fa01 f303 	lsl.w	r3, r1, r3
 80027a2:	e017      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x574>
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027ac:	fa93 f3a3 	rbit	r3, r3
 80027b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80027b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027b4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80027b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80027bc:	2320      	movs	r3, #32
 80027be:	e003      	b.n	80027c8 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80027c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027c2:	fab3 f383 	clz	r3, r3
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	3301      	adds	r3, #1
 80027ca:	f003 031f 	and.w	r3, r3, #31
 80027ce:	2101      	movs	r1, #1
 80027d0:	fa01 f303 	lsl.w	r3, r1, r3
 80027d4:	ea42 0103 	orr.w	r1, r2, r3
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10a      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x59a>
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	0e9b      	lsrs	r3, r3, #26
 80027ea:	3301      	adds	r3, #1
 80027ec:	f003 021f 	and.w	r2, r3, #31
 80027f0:	4613      	mov	r3, r2
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	4413      	add	r3, r2
 80027f6:	051b      	lsls	r3, r3, #20
 80027f8:	e018      	b.n	800282c <HAL_ADC_ConfigChannel+0x5cc>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002802:	fa93 f3a3 	rbit	r3, r3
 8002806:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800280c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002812:	2320      	movs	r3, #32
 8002814:	e003      	b.n	800281e <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002818:	fab3 f383 	clz	r3, r3
 800281c:	b2db      	uxtb	r3, r3
 800281e:	3301      	adds	r3, #1
 8002820:	f003 021f 	and.w	r2, r3, #31
 8002824:	4613      	mov	r3, r2
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	4413      	add	r3, r2
 800282a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800282c:	430b      	orrs	r3, r1
 800282e:	e080      	b.n	8002932 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002838:	2b00      	cmp	r3, #0
 800283a:	d107      	bne.n	800284c <HAL_ADC_ConfigChannel+0x5ec>
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	0e9b      	lsrs	r3, r3, #26
 8002842:	3301      	adds	r3, #1
 8002844:	069b      	lsls	r3, r3, #26
 8002846:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800284a:	e015      	b.n	8002878 <HAL_ADC_ConfigChannel+0x618>
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002854:	fa93 f3a3 	rbit	r3, r3
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800285e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002864:	2320      	movs	r3, #32
 8002866:	e003      	b.n	8002870 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800286a:	fab3 f383 	clz	r3, r3
 800286e:	b2db      	uxtb	r3, r3
 8002870:	3301      	adds	r3, #1
 8002872:	069b      	lsls	r3, r3, #26
 8002874:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002880:	2b00      	cmp	r3, #0
 8002882:	d109      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x638>
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	0e9b      	lsrs	r3, r3, #26
 800288a:	3301      	adds	r3, #1
 800288c:	f003 031f 	and.w	r3, r3, #31
 8002890:	2101      	movs	r1, #1
 8002892:	fa01 f303 	lsl.w	r3, r1, r3
 8002896:	e017      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x668>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	fa93 f3a3 	rbit	r3, r3
 80028a4:	61bb      	str	r3, [r7, #24]
  return result;
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80028aa:	6a3b      	ldr	r3, [r7, #32]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80028b0:	2320      	movs	r3, #32
 80028b2:	e003      	b.n	80028bc <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80028b4:	6a3b      	ldr	r3, [r7, #32]
 80028b6:	fab3 f383 	clz	r3, r3
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	3301      	adds	r3, #1
 80028be:	f003 031f 	and.w	r3, r3, #31
 80028c2:	2101      	movs	r1, #1
 80028c4:	fa01 f303 	lsl.w	r3, r1, r3
 80028c8:	ea42 0103 	orr.w	r1, r2, r3
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10d      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x694>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	0e9b      	lsrs	r3, r3, #26
 80028de:	3301      	adds	r3, #1
 80028e0:	f003 021f 	and.w	r2, r3, #31
 80028e4:	4613      	mov	r3, r2
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	4413      	add	r3, r2
 80028ea:	3b1e      	subs	r3, #30
 80028ec:	051b      	lsls	r3, r3, #20
 80028ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028f2:	e01d      	b.n	8002930 <HAL_ADC_ConfigChannel+0x6d0>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	fa93 f3a3 	rbit	r3, r3
 8002900:	60fb      	str	r3, [r7, #12]
  return result;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d103      	bne.n	8002914 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800290c:	2320      	movs	r3, #32
 800290e:	e005      	b.n	800291c <HAL_ADC_ConfigChannel+0x6bc>
 8002910:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	fab3 f383 	clz	r3, r3
 800291a:	b2db      	uxtb	r3, r3
 800291c:	3301      	adds	r3, #1
 800291e:	f003 021f 	and.w	r2, r3, #31
 8002922:	4613      	mov	r3, r2
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	4413      	add	r3, r2
 8002928:	3b1e      	subs	r3, #30
 800292a:	051b      	lsls	r3, r3, #20
 800292c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002930:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002936:	4619      	mov	r1, r3
 8002938:	f7ff fa74 	bl	8001e24 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	4b3d      	ldr	r3, [pc, #244]	; (8002a38 <HAL_ADC_ConfigChannel+0x7d8>)
 8002942:	4013      	ands	r3, r2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d06c      	beq.n	8002a22 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002948:	483c      	ldr	r0, [pc, #240]	; (8002a3c <HAL_ADC_ConfigChannel+0x7dc>)
 800294a:	f7ff f9c9 	bl	8001ce0 <LL_ADC_GetCommonPathInternalCh>
 800294e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a3a      	ldr	r2, [pc, #232]	; (8002a40 <HAL_ADC_ConfigChannel+0x7e0>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d127      	bne.n	80029ac <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800295c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002960:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d121      	bne.n	80029ac <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a35      	ldr	r2, [pc, #212]	; (8002a44 <HAL_ADC_ConfigChannel+0x7e4>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d157      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002972:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002976:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800297a:	4619      	mov	r1, r3
 800297c:	482f      	ldr	r0, [pc, #188]	; (8002a3c <HAL_ADC_ConfigChannel+0x7dc>)
 800297e:	f7ff f99c 	bl	8001cba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002982:	4b31      	ldr	r3, [pc, #196]	; (8002a48 <HAL_ADC_ConfigChannel+0x7e8>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	099b      	lsrs	r3, r3, #6
 8002988:	4a30      	ldr	r2, [pc, #192]	; (8002a4c <HAL_ADC_ConfigChannel+0x7ec>)
 800298a:	fba2 2303 	umull	r2, r3, r2, r3
 800298e:	099b      	lsrs	r3, r3, #6
 8002990:	1c5a      	adds	r2, r3, #1
 8002992:	4613      	mov	r3, r2
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	4413      	add	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800299c:	e002      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	3b01      	subs	r3, #1
 80029a2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1f9      	bne.n	800299e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029aa:	e03a      	b.n	8002a22 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a27      	ldr	r2, [pc, #156]	; (8002a50 <HAL_ADC_ConfigChannel+0x7f0>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d113      	bne.n	80029de <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10d      	bne.n	80029de <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a1f      	ldr	r2, [pc, #124]	; (8002a44 <HAL_ADC_ConfigChannel+0x7e4>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d12a      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029d4:	4619      	mov	r1, r3
 80029d6:	4819      	ldr	r0, [pc, #100]	; (8002a3c <HAL_ADC_ConfigChannel+0x7dc>)
 80029d8:	f7ff f96f 	bl	8001cba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029dc:	e021      	b.n	8002a22 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a1c      	ldr	r2, [pc, #112]	; (8002a54 <HAL_ADC_ConfigChannel+0x7f4>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d11c      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80029e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d116      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a12      	ldr	r2, [pc, #72]	; (8002a44 <HAL_ADC_ConfigChannel+0x7e4>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d111      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a02:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a06:	4619      	mov	r1, r3
 8002a08:	480c      	ldr	r0, [pc, #48]	; (8002a3c <HAL_ADC_ConfigChannel+0x7dc>)
 8002a0a:	f7ff f956 	bl	8001cba <LL_ADC_SetCommonPathInternalCh>
 8002a0e:	e008      	b.n	8002a22 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a14:	f043 0220 	orr.w	r2, r3, #32
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002a2a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	37d8      	adds	r7, #216	; 0xd8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	80080000 	.word	0x80080000
 8002a3c:	50040300 	.word	0x50040300
 8002a40:	c7520000 	.word	0xc7520000
 8002a44:	50040000 	.word	0x50040000
 8002a48:	20000000 	.word	0x20000000
 8002a4c:	053e2d63 	.word	0x053e2d63
 8002a50:	cb840000 	.word	0xcb840000
 8002a54:	80000001 	.word	0x80000001

08002a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a68:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <__NVIC_SetPriorityGrouping+0x44>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a74:	4013      	ands	r3, r2
 8002a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a8a:	4a04      	ldr	r2, [pc, #16]	; (8002a9c <__NVIC_SetPriorityGrouping+0x44>)
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	60d3      	str	r3, [r2, #12]
}
 8002a90:	bf00      	nop
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	e000ed00 	.word	0xe000ed00

08002aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002aa4:	4b04      	ldr	r3, [pc, #16]	; (8002ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	0a1b      	lsrs	r3, r3, #8
 8002aaa:	f003 0307 	and.w	r3, r3, #7
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	e000ed00 	.word	0xe000ed00

08002abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	db0b      	blt.n	8002ae6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ace:	79fb      	ldrb	r3, [r7, #7]
 8002ad0:	f003 021f 	and.w	r2, r3, #31
 8002ad4:	4907      	ldr	r1, [pc, #28]	; (8002af4 <__NVIC_EnableIRQ+0x38>)
 8002ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ada:	095b      	lsrs	r3, r3, #5
 8002adc:	2001      	movs	r0, #1
 8002ade:	fa00 f202 	lsl.w	r2, r0, r2
 8002ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	e000e100 	.word	0xe000e100

08002af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	6039      	str	r1, [r7, #0]
 8002b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	db0a      	blt.n	8002b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	490c      	ldr	r1, [pc, #48]	; (8002b44 <__NVIC_SetPriority+0x4c>)
 8002b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b16:	0112      	lsls	r2, r2, #4
 8002b18:	b2d2      	uxtb	r2, r2
 8002b1a:	440b      	add	r3, r1
 8002b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b20:	e00a      	b.n	8002b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	4908      	ldr	r1, [pc, #32]	; (8002b48 <__NVIC_SetPriority+0x50>)
 8002b28:	79fb      	ldrb	r3, [r7, #7]
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	3b04      	subs	r3, #4
 8002b30:	0112      	lsls	r2, r2, #4
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	440b      	add	r3, r1
 8002b36:	761a      	strb	r2, [r3, #24]
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	e000e100 	.word	0xe000e100
 8002b48:	e000ed00 	.word	0xe000ed00

08002b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b089      	sub	sp, #36	; 0x24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f1c3 0307 	rsb	r3, r3, #7
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	bf28      	it	cs
 8002b6a:	2304      	movcs	r3, #4
 8002b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	3304      	adds	r3, #4
 8002b72:	2b06      	cmp	r3, #6
 8002b74:	d902      	bls.n	8002b7c <NVIC_EncodePriority+0x30>
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	3b03      	subs	r3, #3
 8002b7a:	e000      	b.n	8002b7e <NVIC_EncodePriority+0x32>
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b80:	f04f 32ff 	mov.w	r2, #4294967295
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	43da      	mvns	r2, r3
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	401a      	ands	r2, r3
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b94:	f04f 31ff 	mov.w	r1, #4294967295
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9e:	43d9      	mvns	r1, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba4:	4313      	orrs	r3, r2
         );
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3724      	adds	r7, #36	; 0x24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b082      	sub	sp, #8
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7ff ff4c 	bl	8002a58 <__NVIC_SetPriorityGrouping>
}
 8002bc0:	bf00      	nop
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
 8002bd4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bda:	f7ff ff61 	bl	8002aa0 <__NVIC_GetPriorityGrouping>
 8002bde:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	68b9      	ldr	r1, [r7, #8]
 8002be4:	6978      	ldr	r0, [r7, #20]
 8002be6:	f7ff ffb1 	bl	8002b4c <NVIC_EncodePriority>
 8002bea:	4602      	mov	r2, r0
 8002bec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bf0:	4611      	mov	r1, r2
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff ff80 	bl	8002af8 <__NVIC_SetPriority>
}
 8002bf8:	bf00      	nop
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7ff ff54 	bl	8002abc <__NVIC_EnableIRQ>
}
 8002c14:	bf00      	nop
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e0ac      	b.n	8002d88 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 f8b2 	bl	8002d9c <DFSDM_GetChannelFromInstance>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	4a55      	ldr	r2, [pc, #340]	; (8002d90 <HAL_DFSDM_ChannelInit+0x174>)
 8002c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e09f      	b.n	8002d88 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f7fe fbb1 	bl	80013b0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002c4e:	4b51      	ldr	r3, [pc, #324]	; (8002d94 <HAL_DFSDM_ChannelInit+0x178>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	3301      	adds	r3, #1
 8002c54:	4a4f      	ldr	r2, [pc, #316]	; (8002d94 <HAL_DFSDM_ChannelInit+0x178>)
 8002c56:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002c58:	4b4e      	ldr	r3, [pc, #312]	; (8002d94 <HAL_DFSDM_ChannelInit+0x178>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d125      	bne.n	8002cac <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002c60:	4b4d      	ldr	r3, [pc, #308]	; (8002d98 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a4c      	ldr	r2, [pc, #304]	; (8002d98 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c6a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002c6c:	4b4a      	ldr	r3, [pc, #296]	; (8002d98 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	4948      	ldr	r1, [pc, #288]	; (8002d98 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002c7a:	4b47      	ldr	r3, [pc, #284]	; (8002d98 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a46      	ldr	r2, [pc, #280]	; (8002d98 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c80:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002c84:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	791b      	ldrb	r3, [r3, #4]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d108      	bne.n	8002ca0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002c8e:	4b42      	ldr	r3, [pc, #264]	; (8002d98 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	3b01      	subs	r3, #1
 8002c98:	041b      	lsls	r3, r3, #16
 8002c9a:	493f      	ldr	r1, [pc, #252]	; (8002d98 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002ca0:	4b3d      	ldr	r3, [pc, #244]	; (8002d98 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a3c      	ldr	r2, [pc, #240]	; (8002d98 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ca6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002caa:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002cba:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6819      	ldr	r1, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002cca:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002cd0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 020f 	bic.w	r2, r2, #15
 8002ce8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6819      	ldr	r1, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002d10:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6899      	ldr	r1, [r3, #8]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d20:	3b01      	subs	r3, #1
 8002d22:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002d24:	431a      	orrs	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f002 0207 	and.w	r2, r2, #7
 8002d3c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6859      	ldr	r1, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d48:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002d50:	431a      	orrs	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d68:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 f810 	bl	8002d9c <DFSDM_GetChannelFromInstance>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	4904      	ldr	r1, [pc, #16]	; (8002d90 <HAL_DFSDM_ChannelInit+0x174>)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	200005d0 	.word	0x200005d0
 8002d94:	200005cc 	.word	0x200005cc
 8002d98:	40016000 	.word	0x40016000

08002d9c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a1c      	ldr	r2, [pc, #112]	; (8002e18 <DFSDM_GetChannelFromInstance+0x7c>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d102      	bne.n	8002db2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002dac:	2300      	movs	r3, #0
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	e02b      	b.n	8002e0a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a19      	ldr	r2, [pc, #100]	; (8002e1c <DFSDM_GetChannelFromInstance+0x80>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d102      	bne.n	8002dc0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	e024      	b.n	8002e0a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a17      	ldr	r2, [pc, #92]	; (8002e20 <DFSDM_GetChannelFromInstance+0x84>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d102      	bne.n	8002dce <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002dc8:	2302      	movs	r3, #2
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	e01d      	b.n	8002e0a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a14      	ldr	r2, [pc, #80]	; (8002e24 <DFSDM_GetChannelFromInstance+0x88>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d102      	bne.n	8002ddc <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002dd6:	2304      	movs	r3, #4
 8002dd8:	60fb      	str	r3, [r7, #12]
 8002dda:	e016      	b.n	8002e0a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a12      	ldr	r2, [pc, #72]	; (8002e28 <DFSDM_GetChannelFromInstance+0x8c>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d102      	bne.n	8002dea <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002de4:	2305      	movs	r3, #5
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	e00f      	b.n	8002e0a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a0f      	ldr	r2, [pc, #60]	; (8002e2c <DFSDM_GetChannelFromInstance+0x90>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d102      	bne.n	8002df8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002df2:	2306      	movs	r3, #6
 8002df4:	60fb      	str	r3, [r7, #12]
 8002df6:	e008      	b.n	8002e0a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a0d      	ldr	r2, [pc, #52]	; (8002e30 <DFSDM_GetChannelFromInstance+0x94>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d102      	bne.n	8002e06 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002e00:	2307      	movs	r3, #7
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	e001      	b.n	8002e0a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002e06:	2303      	movs	r3, #3
 8002e08:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3714      	adds	r7, #20
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	40016000 	.word	0x40016000
 8002e1c:	40016020 	.word	0x40016020
 8002e20:	40016040 	.word	0x40016040
 8002e24:	40016080 	.word	0x40016080
 8002e28:	400160a0 	.word	0x400160a0
 8002e2c:	400160c0 	.word	0x400160c0
 8002e30:	400160e0 	.word	0x400160e0

08002e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b087      	sub	sp, #28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e42:	e166      	b.n	8003112 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	2101      	movs	r1, #1
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e50:	4013      	ands	r3, r2
 8002e52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f000 8158 	beq.w	800310c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 0303 	and.w	r3, r3, #3
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d005      	beq.n	8002e74 <HAL_GPIO_Init+0x40>
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f003 0303 	and.w	r3, r3, #3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d130      	bne.n	8002ed6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	2203      	movs	r2, #3
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	43db      	mvns	r3, r3
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	68da      	ldr	r2, [r3, #12]
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002eaa:	2201      	movs	r2, #1
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	091b      	lsrs	r3, r3, #4
 8002ec0:	f003 0201 	and.w	r2, r3, #1
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f003 0303 	and.w	r3, r3, #3
 8002ede:	2b03      	cmp	r3, #3
 8002ee0:	d017      	beq.n	8002f12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	2203      	movs	r2, #3
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d123      	bne.n	8002f66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	08da      	lsrs	r2, r3, #3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	3208      	adds	r2, #8
 8002f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	220f      	movs	r2, #15
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	691a      	ldr	r2, [r3, #16]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	08da      	lsrs	r2, r3, #3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	3208      	adds	r2, #8
 8002f60:	6939      	ldr	r1, [r7, #16]
 8002f62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	2203      	movs	r2, #3
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	43db      	mvns	r3, r3
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f003 0203 	and.w	r2, r3, #3
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f000 80b2 	beq.w	800310c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fa8:	4b61      	ldr	r3, [pc, #388]	; (8003130 <HAL_GPIO_Init+0x2fc>)
 8002faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fac:	4a60      	ldr	r2, [pc, #384]	; (8003130 <HAL_GPIO_Init+0x2fc>)
 8002fae:	f043 0301 	orr.w	r3, r3, #1
 8002fb2:	6613      	str	r3, [r2, #96]	; 0x60
 8002fb4:	4b5e      	ldr	r3, [pc, #376]	; (8003130 <HAL_GPIO_Init+0x2fc>)
 8002fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	60bb      	str	r3, [r7, #8]
 8002fbe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002fc0:	4a5c      	ldr	r2, [pc, #368]	; (8003134 <HAL_GPIO_Init+0x300>)
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	089b      	lsrs	r3, r3, #2
 8002fc6:	3302      	adds	r3, #2
 8002fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f003 0303 	and.w	r3, r3, #3
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	220f      	movs	r2, #15
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002fea:	d02b      	beq.n	8003044 <HAL_GPIO_Init+0x210>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a52      	ldr	r2, [pc, #328]	; (8003138 <HAL_GPIO_Init+0x304>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d025      	beq.n	8003040 <HAL_GPIO_Init+0x20c>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a51      	ldr	r2, [pc, #324]	; (800313c <HAL_GPIO_Init+0x308>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d01f      	beq.n	800303c <HAL_GPIO_Init+0x208>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a50      	ldr	r2, [pc, #320]	; (8003140 <HAL_GPIO_Init+0x30c>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d019      	beq.n	8003038 <HAL_GPIO_Init+0x204>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a4f      	ldr	r2, [pc, #316]	; (8003144 <HAL_GPIO_Init+0x310>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d013      	beq.n	8003034 <HAL_GPIO_Init+0x200>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a4e      	ldr	r2, [pc, #312]	; (8003148 <HAL_GPIO_Init+0x314>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d00d      	beq.n	8003030 <HAL_GPIO_Init+0x1fc>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a4d      	ldr	r2, [pc, #308]	; (800314c <HAL_GPIO_Init+0x318>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d007      	beq.n	800302c <HAL_GPIO_Init+0x1f8>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a4c      	ldr	r2, [pc, #304]	; (8003150 <HAL_GPIO_Init+0x31c>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d101      	bne.n	8003028 <HAL_GPIO_Init+0x1f4>
 8003024:	2307      	movs	r3, #7
 8003026:	e00e      	b.n	8003046 <HAL_GPIO_Init+0x212>
 8003028:	2308      	movs	r3, #8
 800302a:	e00c      	b.n	8003046 <HAL_GPIO_Init+0x212>
 800302c:	2306      	movs	r3, #6
 800302e:	e00a      	b.n	8003046 <HAL_GPIO_Init+0x212>
 8003030:	2305      	movs	r3, #5
 8003032:	e008      	b.n	8003046 <HAL_GPIO_Init+0x212>
 8003034:	2304      	movs	r3, #4
 8003036:	e006      	b.n	8003046 <HAL_GPIO_Init+0x212>
 8003038:	2303      	movs	r3, #3
 800303a:	e004      	b.n	8003046 <HAL_GPIO_Init+0x212>
 800303c:	2302      	movs	r3, #2
 800303e:	e002      	b.n	8003046 <HAL_GPIO_Init+0x212>
 8003040:	2301      	movs	r3, #1
 8003042:	e000      	b.n	8003046 <HAL_GPIO_Init+0x212>
 8003044:	2300      	movs	r3, #0
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	f002 0203 	and.w	r2, r2, #3
 800304c:	0092      	lsls	r2, r2, #2
 800304e:	4093      	lsls	r3, r2
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	4313      	orrs	r3, r2
 8003054:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003056:	4937      	ldr	r1, [pc, #220]	; (8003134 <HAL_GPIO_Init+0x300>)
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	089b      	lsrs	r3, r3, #2
 800305c:	3302      	adds	r3, #2
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003064:	4b3b      	ldr	r3, [pc, #236]	; (8003154 <HAL_GPIO_Init+0x320>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	43db      	mvns	r3, r3
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	4013      	ands	r3, r2
 8003072:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	4313      	orrs	r3, r2
 8003086:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003088:	4a32      	ldr	r2, [pc, #200]	; (8003154 <HAL_GPIO_Init+0x320>)
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800308e:	4b31      	ldr	r3, [pc, #196]	; (8003154 <HAL_GPIO_Init+0x320>)
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	43db      	mvns	r3, r3
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	4013      	ands	r3, r2
 800309c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030b2:	4a28      	ldr	r2, [pc, #160]	; (8003154 <HAL_GPIO_Init+0x320>)
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80030b8:	4b26      	ldr	r3, [pc, #152]	; (8003154 <HAL_GPIO_Init+0x320>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	43db      	mvns	r3, r3
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	4013      	ands	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d003      	beq.n	80030dc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	4313      	orrs	r3, r2
 80030da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030dc:	4a1d      	ldr	r2, [pc, #116]	; (8003154 <HAL_GPIO_Init+0x320>)
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80030e2:	4b1c      	ldr	r3, [pc, #112]	; (8003154 <HAL_GPIO_Init+0x320>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	43db      	mvns	r3, r3
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	4013      	ands	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4313      	orrs	r3, r2
 8003104:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003106:	4a13      	ldr	r2, [pc, #76]	; (8003154 <HAL_GPIO_Init+0x320>)
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	3301      	adds	r3, #1
 8003110:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	fa22 f303 	lsr.w	r3, r2, r3
 800311c:	2b00      	cmp	r3, #0
 800311e:	f47f ae91 	bne.w	8002e44 <HAL_GPIO_Init+0x10>
  }
}
 8003122:	bf00      	nop
 8003124:	bf00      	nop
 8003126:	371c      	adds	r7, #28
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	40021000 	.word	0x40021000
 8003134:	40010000 	.word	0x40010000
 8003138:	48000400 	.word	0x48000400
 800313c:	48000800 	.word	0x48000800
 8003140:	48000c00 	.word	0x48000c00
 8003144:	48001000 	.word	0x48001000
 8003148:	48001400 	.word	0x48001400
 800314c:	48001800 	.word	0x48001800
 8003150:	48001c00 	.word	0x48001c00
 8003154:	40010400 	.word	0x40010400

08003158 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	807b      	strh	r3, [r7, #2]
 8003164:	4613      	mov	r3, r2
 8003166:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003168:	787b      	ldrb	r3, [r7, #1]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800316e:	887a      	ldrh	r2, [r7, #2]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003174:	e002      	b.n	800317c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003176:	887a      	ldrh	r2, [r7, #2]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	4603      	mov	r3, r0
 8003190:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003192:	4b08      	ldr	r3, [pc, #32]	; (80031b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003194:	695a      	ldr	r2, [r3, #20]
 8003196:	88fb      	ldrh	r3, [r7, #6]
 8003198:	4013      	ands	r3, r2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d006      	beq.n	80031ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800319e:	4a05      	ldr	r2, [pc, #20]	; (80031b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031a0:	88fb      	ldrh	r3, [r7, #6]
 80031a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031a4:	88fb      	ldrh	r3, [r7, #6]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fe f876 	bl	8001298 <HAL_GPIO_EXTI_Callback>
  }
}
 80031ac:	bf00      	nop
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40010400 	.word	0x40010400

080031b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e08d      	b.n	80032e6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d106      	bne.n	80031e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7fe f94a 	bl	8001478 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2224      	movs	r2, #36	; 0x24
 80031e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 0201 	bic.w	r2, r2, #1
 80031fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003208:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003218:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d107      	bne.n	8003232 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689a      	ldr	r2, [r3, #8]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800322e:	609a      	str	r2, [r3, #8]
 8003230:	e006      	b.n	8003240 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800323e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	2b02      	cmp	r3, #2
 8003246:	d108      	bne.n	800325a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003256:	605a      	str	r2, [r3, #4]
 8003258:	e007      	b.n	800326a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003268:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	6812      	ldr	r2, [r2, #0]
 8003274:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003278:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800327c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68da      	ldr	r2, [r3, #12]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800328c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691a      	ldr	r2, [r3, #16]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	69d9      	ldr	r1, [r3, #28]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a1a      	ldr	r2, [r3, #32]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	430a      	orrs	r2, r1
 80032b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f042 0201 	orr.w	r2, r2, #1
 80032c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2220      	movs	r2, #32
 80032d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b083      	sub	sp, #12
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
 80032f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b20      	cmp	r3, #32
 8003302:	d138      	bne.n	8003376 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800330a:	2b01      	cmp	r3, #1
 800330c:	d101      	bne.n	8003312 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800330e:	2302      	movs	r3, #2
 8003310:	e032      	b.n	8003378 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2201      	movs	r2, #1
 8003316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2224      	movs	r2, #36	; 0x24
 800331e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 0201 	bic.w	r2, r2, #1
 8003330:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003340:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6819      	ldr	r1, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f042 0201 	orr.w	r2, r2, #1
 8003360:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2220      	movs	r2, #32
 8003366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003372:	2300      	movs	r3, #0
 8003374:	e000      	b.n	8003378 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003376:	2302      	movs	r3, #2
  }
}
 8003378:	4618      	mov	r0, r3
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b20      	cmp	r3, #32
 8003398:	d139      	bne.n	800340e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d101      	bne.n	80033a8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033a4:	2302      	movs	r3, #2
 80033a6:	e033      	b.n	8003410 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2224      	movs	r2, #36	; 0x24
 80033b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 0201 	bic.w	r2, r2, #1
 80033c6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80033d6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	021b      	lsls	r3, r3, #8
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	4313      	orrs	r3, r2
 80033e0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f042 0201 	orr.w	r2, r2, #1
 80033f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2220      	movs	r2, #32
 80033fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800340a:	2300      	movs	r3, #0
 800340c:	e000      	b.n	8003410 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800340e:	2302      	movs	r3, #2
  }
}
 8003410:	4618      	mov	r0, r3
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af02      	add	r7, sp, #8
 8003422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003424:	2300      	movs	r3, #0
 8003426:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8003428:	f7fe fc04 	bl	8001c34 <HAL_GetTick>
 800342c:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d102      	bne.n	800343a <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	73fb      	strb	r3, [r7, #15]
 8003438:	e092      	b.n	8003560 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003444:	2b00      	cmp	r3, #0
 8003446:	f040 808b 	bne.w	8003560 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f7fe f8b6 	bl	80015bc <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8003450:	f241 3188 	movw	r1, #5000	; 0x1388
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f88b 	bl	8003570 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	4b42      	ldr	r3, [pc, #264]	; (800356c <HAL_OSPI_Init+0x150>)
 8003462:	4013      	ands	r3, r2
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	68d1      	ldr	r1, [r2, #12]
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	6912      	ldr	r2, [r2, #16]
 800346c:	3a01      	subs	r2, #1
 800346e:	0412      	lsls	r2, r2, #16
 8003470:	4311      	orrs	r1, r2
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6952      	ldr	r2, [r2, #20]
 8003476:	3a01      	subs	r2, #1
 8003478:	0212      	lsls	r2, r2, #8
 800347a:	4311      	orrs	r1, r2
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003480:	4311      	orrs	r1, r2
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	69d2      	ldr	r2, [r2, #28]
 8003486:	4311      	orrs	r1, r2
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	6812      	ldr	r2, [r2, #0]
 800348c:	430b      	orrs	r3, r1
 800348e:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	0412      	lsls	r2, r2, #16
 800349a:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	021a      	lsls	r2, r3, #8
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	2200      	movs	r2, #0
 80034c0:	2120      	movs	r1, #32
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 fb98 	bl	8003bf8 <OSPI_WaitFlagStateUntilTimeout>
 80034c8:	4603      	mov	r3, r0
 80034ca:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80034cc:	7bfb      	ldrb	r3, [r7, #15]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d146      	bne.n	8003560 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	1e5a      	subs	r2, r3, #1
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003508:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003514:	431a      	orrs	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	430a      	orrs	r2, r1
 800351c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 0201 	orr.w	r2, r2, #1
 800352e:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	2b02      	cmp	r3, #2
 8003536:	d107      	bne.n	8003548 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 0202 	orr.w	r2, r2, #2
 8003546:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003550:	d103      	bne.n	800355a <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	645a      	str	r2, [r3, #68]	; 0x44
 8003558:	e002      	b.n	8003560 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2202      	movs	r2, #2
 800355e:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8003560:	7bfb      	ldrb	r3, [r7, #15]
}
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	f8e0f8f4 	.word	0xf8e0f8f4

08003570 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
	...

08003590 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b092      	sub	sp, #72	; 0x48
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800359c:	2300      	movs	r3, #0
 800359e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a08      	ldr	r2, [pc, #32]	; (80035d0 <HAL_OSPIM_Config+0x40>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d105      	bne.n	80035be <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80035b2:	2300      	movs	r3, #0
 80035b4:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 80035b6:	2301      	movs	r3, #1
 80035b8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80035bc:	e004      	b.n	80035c8 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80035be:	2301      	movs	r3, #1
 80035c0:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 80035c2:	2300      	movs	r3, #0
 80035c4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80035c8:	2300      	movs	r3, #0
 80035ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80035ce:	e01f      	b.n	8003610 <HAL_OSPIM_Config+0x80>
 80035d0:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 80035d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80035d8:	3301      	adds	r3, #1
 80035da:	b2d8      	uxtb	r0, r3
 80035dc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80035e0:	f107 0114 	add.w	r1, r7, #20
 80035e4:	4613      	mov	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4413      	add	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	4619      	mov	r1, r3
 80035f0:	f000 fb3a 	bl	8003c68 <OSPIM_GetConfig>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d005      	beq.n	8003606 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2208      	movs	r2, #8
 8003604:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003606:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800360a:	3301      	adds	r3, #1
 800360c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003610:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003614:	2b01      	cmp	r3, #1
 8003616:	d9dd      	bls.n	80035d4 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8003618:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800361c:	2b00      	cmp	r3, #0
 800361e:	f040 82de 	bne.w	8003bde <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8003622:	4bc6      	ldr	r3, [pc, #792]	; (800393c <HAL_OSPIM_Config+0x3ac>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00b      	beq.n	8003646 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800362e:	4bc3      	ldr	r3, [pc, #780]	; (800393c <HAL_OSPIM_Config+0x3ac>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4ac2      	ldr	r2, [pc, #776]	; (800393c <HAL_OSPIM_Config+0x3ac>)
 8003634:	f023 0301 	bic.w	r3, r3, #1
 8003638:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800363a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800363e:	f043 0301 	orr.w	r3, r3, #1
 8003642:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8003646:	4bbe      	ldr	r3, [pc, #760]	; (8003940 <HAL_OSPIM_Config+0x3b0>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00b      	beq.n	800366a <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003652:	4bbb      	ldr	r3, [pc, #748]	; (8003940 <HAL_OSPIM_Config+0x3b0>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4aba      	ldr	r2, [pc, #744]	; (8003940 <HAL_OSPIM_Config+0x3b0>)
 8003658:	f023 0301 	bic.w	r3, r3, #1
 800365c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800365e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003662:	f043 0302 	orr.w	r3, r3, #2
 8003666:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800366a:	49b6      	ldr	r1, [pc, #728]	; (8003944 <HAL_OSPIM_Config+0x3b4>)
 800366c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800366e:	4613      	mov	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	3348      	adds	r3, #72	; 0x48
 8003678:	443b      	add	r3, r7
 800367a:	3b2c      	subs	r3, #44	; 0x2c
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	3b01      	subs	r3, #1
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	440b      	add	r3, r1
 8003684:	6859      	ldr	r1, [r3, #4]
 8003686:	48af      	ldr	r0, [pc, #700]	; (8003944 <HAL_OSPIM_Config+0x3b4>)
 8003688:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800368a:	4613      	mov	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4413      	add	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	3348      	adds	r3, #72	; 0x48
 8003694:	443b      	add	r3, r7
 8003696:	3b2c      	subs	r3, #44	; 0x2c
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	3b01      	subs	r3, #1
 800369c:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4403      	add	r3, r0
 80036a4:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 80036a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036a8:	4613      	mov	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	3348      	adds	r3, #72	; 0x48
 80036b2:	443b      	add	r3, r7
 80036b4:	3b34      	subs	r3, #52	; 0x34
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f000 80a1 	beq.w	8003800 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80036be:	49a1      	ldr	r1, [pc, #644]	; (8003944 <HAL_OSPIM_Config+0x3b4>)
 80036c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036c2:	4613      	mov	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	3348      	adds	r3, #72	; 0x48
 80036cc:	443b      	add	r3, r7
 80036ce:	3b34      	subs	r3, #52	; 0x34
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	3b01      	subs	r3, #1
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	440b      	add	r3, r1
 80036d8:	6859      	ldr	r1, [r3, #4]
 80036da:	489a      	ldr	r0, [pc, #616]	; (8003944 <HAL_OSPIM_Config+0x3b4>)
 80036dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036de:	4613      	mov	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4413      	add	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	3348      	adds	r3, #72	; 0x48
 80036e8:	443b      	add	r3, r7
 80036ea:	3b34      	subs	r3, #52	; 0x34
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	3b01      	subs	r3, #1
 80036f0:	f021 0201 	bic.w	r2, r1, #1
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4403      	add	r3, r0
 80036f8:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80036fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036fc:	4613      	mov	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4413      	add	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	3348      	adds	r3, #72	; 0x48
 8003706:	443b      	add	r3, r7
 8003708:	3b30      	subs	r3, #48	; 0x30
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d01d      	beq.n	800374c <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8003710:	498c      	ldr	r1, [pc, #560]	; (8003944 <HAL_OSPIM_Config+0x3b4>)
 8003712:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003714:	4613      	mov	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4413      	add	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	3348      	adds	r3, #72	; 0x48
 800371e:	443b      	add	r3, r7
 8003720:	3b30      	subs	r3, #48	; 0x30
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	3b01      	subs	r3, #1
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	6859      	ldr	r1, [r3, #4]
 800372c:	4885      	ldr	r0, [pc, #532]	; (8003944 <HAL_OSPIM_Config+0x3b4>)
 800372e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003730:	4613      	mov	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	3348      	adds	r3, #72	; 0x48
 800373a:	443b      	add	r3, r7
 800373c:	3b30      	subs	r3, #48	; 0x30
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	3b01      	subs	r3, #1
 8003742:	f021 0210 	bic.w	r2, r1, #16
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4403      	add	r3, r0
 800374a:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800374c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800374e:	4613      	mov	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4413      	add	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	3348      	adds	r3, #72	; 0x48
 8003758:	443b      	add	r3, r7
 800375a:	3b28      	subs	r3, #40	; 0x28
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d021      	beq.n	80037a6 <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8003762:	4978      	ldr	r1, [pc, #480]	; (8003944 <HAL_OSPIM_Config+0x3b4>)
 8003764:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003766:	4613      	mov	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4413      	add	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	3348      	adds	r3, #72	; 0x48
 8003770:	443b      	add	r3, r7
 8003772:	3b28      	subs	r3, #40	; 0x28
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	3b01      	subs	r3, #1
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	440b      	add	r3, r1
 8003780:	6859      	ldr	r1, [r3, #4]
 8003782:	4870      	ldr	r0, [pc, #448]	; (8003944 <HAL_OSPIM_Config+0x3b4>)
 8003784:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003786:	4613      	mov	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	4413      	add	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	3348      	adds	r3, #72	; 0x48
 8003790:	443b      	add	r3, r7
 8003792:	3b28      	subs	r3, #40	; 0x28
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	3b01      	subs	r3, #1
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4403      	add	r3, r0
 80037a4:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80037a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037a8:	4613      	mov	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	3348      	adds	r3, #72	; 0x48
 80037b2:	443b      	add	r3, r7
 80037b4:	3b24      	subs	r3, #36	; 0x24
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d021      	beq.n	8003800 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80037bc:	4961      	ldr	r1, [pc, #388]	; (8003944 <HAL_OSPIM_Config+0x3b4>)
 80037be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037c0:	4613      	mov	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4413      	add	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	3348      	adds	r3, #72	; 0x48
 80037ca:	443b      	add	r3, r7
 80037cc:	3b24      	subs	r3, #36	; 0x24
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	3b01      	subs	r3, #1
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	6859      	ldr	r1, [r3, #4]
 80037dc:	4859      	ldr	r0, [pc, #356]	; (8003944 <HAL_OSPIM_Config+0x3b4>)
 80037de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037e0:	4613      	mov	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	3348      	adds	r3, #72	; 0x48
 80037ea:	443b      	add	r3, r7
 80037ec:	3b24      	subs	r3, #36	; 0x24
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	3b01      	subs	r3, #1
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4403      	add	r3, r0
 80037fe:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	6819      	ldr	r1, [r3, #0]
 8003804:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003808:	4613      	mov	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	3348      	adds	r3, #72	; 0x48
 8003812:	443b      	add	r3, r7
 8003814:	3b34      	subs	r3, #52	; 0x34
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4299      	cmp	r1, r3
 800381a:	d038      	beq.n	800388e <HAL_OSPIM_Config+0x2fe>
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	6859      	ldr	r1, [r3, #4]
 8003820:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003824:	4613      	mov	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4413      	add	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	3348      	adds	r3, #72	; 0x48
 800382e:	443b      	add	r3, r7
 8003830:	3b30      	subs	r3, #48	; 0x30
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4299      	cmp	r1, r3
 8003836:	d02a      	beq.n	800388e <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	6899      	ldr	r1, [r3, #8]
 800383c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003840:	4613      	mov	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	3348      	adds	r3, #72	; 0x48
 800384a:	443b      	add	r3, r7
 800384c:	3b2c      	subs	r3, #44	; 0x2c
 800384e:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003850:	4299      	cmp	r1, r3
 8003852:	d01c      	beq.n	800388e <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	68d9      	ldr	r1, [r3, #12]
 8003858:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800385c:	4613      	mov	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	3348      	adds	r3, #72	; 0x48
 8003866:	443b      	add	r3, r7
 8003868:	3b28      	subs	r3, #40	; 0x28
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4299      	cmp	r1, r3
 800386e:	d00e      	beq.n	800388e <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	6919      	ldr	r1, [r3, #16]
 8003874:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003878:	4613      	mov	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4413      	add	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	3348      	adds	r3, #72	; 0x48
 8003882:	443b      	add	r3, r7
 8003884:	3b24      	subs	r3, #36	; 0x24
 8003886:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003888:	4299      	cmp	r1, r3
 800388a:	f040 80d3 	bne.w	8003a34 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800388e:	492d      	ldr	r1, [pc, #180]	; (8003944 <HAL_OSPIM_Config+0x3b4>)
 8003890:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003894:	4613      	mov	r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	4413      	add	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	3348      	adds	r3, #72	; 0x48
 800389e:	443b      	add	r3, r7
 80038a0:	3b34      	subs	r3, #52	; 0x34
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	3b01      	subs	r3, #1
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	6859      	ldr	r1, [r3, #4]
 80038ac:	4825      	ldr	r0, [pc, #148]	; (8003944 <HAL_OSPIM_Config+0x3b4>)
 80038ae:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80038b2:	4613      	mov	r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	4413      	add	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	3348      	adds	r3, #72	; 0x48
 80038bc:	443b      	add	r3, r7
 80038be:	3b34      	subs	r3, #52	; 0x34
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	3b01      	subs	r3, #1
 80038c4:	f021 0201 	bic.w	r2, r1, #1
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4403      	add	r3, r0
 80038cc:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80038ce:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80038d2:	4613      	mov	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4413      	add	r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	3348      	adds	r3, #72	; 0x48
 80038dc:	443b      	add	r3, r7
 80038de:	3b30      	subs	r3, #48	; 0x30
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d01f      	beq.n	8003926 <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80038e6:	4917      	ldr	r1, [pc, #92]	; (8003944 <HAL_OSPIM_Config+0x3b4>)
 80038e8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80038ec:	4613      	mov	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	3348      	adds	r3, #72	; 0x48
 80038f6:	443b      	add	r3, r7
 80038f8:	3b30      	subs	r3, #48	; 0x30
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	3b01      	subs	r3, #1
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	6859      	ldr	r1, [r3, #4]
 8003904:	480f      	ldr	r0, [pc, #60]	; (8003944 <HAL_OSPIM_Config+0x3b4>)
 8003906:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800390a:	4613      	mov	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	4413      	add	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	3348      	adds	r3, #72	; 0x48
 8003914:	443b      	add	r3, r7
 8003916:	3b30      	subs	r3, #48	; 0x30
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	3b01      	subs	r3, #1
 800391c:	f021 0210 	bic.w	r2, r1, #16
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4403      	add	r3, r0
 8003924:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8003926:	4907      	ldr	r1, [pc, #28]	; (8003944 <HAL_OSPIM_Config+0x3b4>)
 8003928:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800392c:	4613      	mov	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	3348      	adds	r3, #72	; 0x48
 8003936:	443b      	add	r3, r7
 8003938:	3b2c      	subs	r3, #44	; 0x2c
 800393a:	e005      	b.n	8003948 <HAL_OSPIM_Config+0x3b8>
 800393c:	a0001000 	.word	0xa0001000
 8003940:	a0001400 	.word	0xa0001400
 8003944:	50061c00 	.word	0x50061c00
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	3b01      	subs	r3, #1
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	440b      	add	r3, r1
 8003950:	6859      	ldr	r1, [r3, #4]
 8003952:	48a6      	ldr	r0, [pc, #664]	; (8003bec <HAL_OSPIM_Config+0x65c>)
 8003954:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003958:	4613      	mov	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4413      	add	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	3348      	adds	r3, #72	; 0x48
 8003962:	443b      	add	r3, r7
 8003964:	3b2c      	subs	r3, #44	; 0x2c
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	3b01      	subs	r3, #1
 800396a:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	4403      	add	r3, r0
 8003972:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003974:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003978:	4613      	mov	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4413      	add	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	3348      	adds	r3, #72	; 0x48
 8003982:	443b      	add	r3, r7
 8003984:	3b28      	subs	r3, #40	; 0x28
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d023      	beq.n	80039d4 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800398c:	4997      	ldr	r1, [pc, #604]	; (8003bec <HAL_OSPIM_Config+0x65c>)
 800398e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003992:	4613      	mov	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	3348      	adds	r3, #72	; 0x48
 800399c:	443b      	add	r3, r7
 800399e:	3b28      	subs	r3, #40	; 0x28
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	440b      	add	r3, r1
 80039ac:	6859      	ldr	r1, [r3, #4]
 80039ae:	488f      	ldr	r0, [pc, #572]	; (8003bec <HAL_OSPIM_Config+0x65c>)
 80039b0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80039b4:	4613      	mov	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	3348      	adds	r3, #72	; 0x48
 80039be:	443b      	add	r3, r7
 80039c0:	3b28      	subs	r3, #40	; 0x28
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	3b01      	subs	r3, #1
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4403      	add	r3, r0
 80039d2:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80039d4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80039d8:	4613      	mov	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	3348      	adds	r3, #72	; 0x48
 80039e2:	443b      	add	r3, r7
 80039e4:	3b24      	subs	r3, #36	; 0x24
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d023      	beq.n	8003a34 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80039ec:	497f      	ldr	r1, [pc, #508]	; (8003bec <HAL_OSPIM_Config+0x65c>)
 80039ee:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80039f2:	4613      	mov	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4413      	add	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	3348      	adds	r3, #72	; 0x48
 80039fc:	443b      	add	r3, r7
 80039fe:	3b24      	subs	r3, #36	; 0x24
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	3b01      	subs	r3, #1
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	440b      	add	r3, r1
 8003a0c:	6859      	ldr	r1, [r3, #4]
 8003a0e:	4877      	ldr	r0, [pc, #476]	; (8003bec <HAL_OSPIM_Config+0x65c>)
 8003a10:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003a14:	4613      	mov	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	3348      	adds	r3, #72	; 0x48
 8003a1e:	443b      	add	r3, r7
 8003a20:	3b24      	subs	r3, #36	; 0x24
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	3b01      	subs	r3, #1
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4403      	add	r3, r0
 8003a32:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8003a34:	4a6d      	ldr	r2, [pc, #436]	; (8003bec <HAL_OSPIM_Config+0x65c>)
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a48:	025b      	lsls	r3, r3, #9
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	4967      	ldr	r1, [pc, #412]	; (8003bec <HAL_OSPIM_Config+0x65c>)
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	3b01      	subs	r3, #1
 8003a54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	440b      	add	r3, r1
 8003a5c:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8003a5e:	4a63      	ldr	r2, [pc, #396]	; (8003bec <HAL_OSPIM_Config+0x65c>)
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	3b01      	subs	r3, #1
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f023 0203 	bic.w	r2, r3, #3
 8003a70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a72:	005b      	lsls	r3, r3, #1
 8003a74:	431a      	orrs	r2, r3
 8003a76:	495d      	ldr	r1, [pc, #372]	; (8003bec <HAL_OSPIM_Config+0x65c>)
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	f042 0201 	orr.w	r2, r2, #1
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d014      	beq.n	8003aba <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8003a90:	4a56      	ldr	r2, [pc, #344]	; (8003bec <HAL_OSPIM_Config+0x65c>)
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	3b01      	subs	r3, #1
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	4413      	add	r3, r2
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003aa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aa4:	015b      	lsls	r3, r3, #5
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	4950      	ldr	r1, [pc, #320]	; (8003bec <HAL_OSPIM_Config+0x65c>)
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	f042 0210 	orr.w	r2, r2, #16
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	440b      	add	r3, r1
 8003ab8:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d019      	beq.n	8003afa <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003ac6:	4a49      	ldr	r2, [pc, #292]	; (8003bec <HAL_OSPIM_Config+0x65c>)
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	3b01      	subs	r3, #1
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003adc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ade:	049b      	lsls	r3, r3, #18
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	4942      	ldr	r1, [pc, #264]	; (8003bec <HAL_OSPIM_Config+0x65c>)
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	440b      	add	r3, r1
 8003af6:	605a      	str	r2, [r3, #4]
 8003af8:	e01c      	b.n	8003b34 <HAL_OSPIM_Config+0x5a4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d018      	beq.n	8003b34 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003b02:	4a3a      	ldr	r2, [pc, #232]	; (8003bec <HAL_OSPIM_Config+0x65c>)
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003b18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b1a:	069b      	lsls	r3, r3, #26
 8003b1c:	431a      	orrs	r2, r3
 8003b1e:	4933      	ldr	r1, [pc, #204]	; (8003bec <HAL_OSPIM_Config+0x65c>)
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	3b01      	subs	r3, #1
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	440b      	add	r3, r1
 8003b32:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d019      	beq.n	8003b74 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003b40:	4a2a      	ldr	r2, [pc, #168]	; (8003bec <HAL_OSPIM_Config+0x65c>)
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	3b01      	subs	r3, #1
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4413      	add	r3, r2
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003b56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b58:	049b      	lsls	r3, r3, #18
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	4923      	ldr	r1, [pc, #140]	; (8003bec <HAL_OSPIM_Config+0x65c>)
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	3b01      	subs	r3, #1
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	440b      	add	r3, r1
 8003b70:	605a      	str	r2, [r3, #4]
 8003b72:	e01c      	b.n	8003bae <HAL_OSPIM_Config+0x61e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d018      	beq.n	8003bae <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003b7c:	4a1b      	ldr	r2, [pc, #108]	; (8003bec <HAL_OSPIM_Config+0x65c>)
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	3b01      	subs	r3, #1
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b94:	069b      	lsls	r3, r3, #26
 8003b96:	431a      	orrs	r2, r3
 8003b98:	4914      	ldr	r1, [pc, #80]	; (8003bec <HAL_OSPIM_Config+0x65c>)
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	440b      	add	r3, r1
 8003bac:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8003bae:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d005      	beq.n	8003bc6 <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003bba:	4b0d      	ldr	r3, [pc, #52]	; (8003bf0 <HAL_OSPIM_Config+0x660>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a0c      	ldr	r2, [pc, #48]	; (8003bf0 <HAL_OSPIM_Config+0x660>)
 8003bc0:	f043 0301 	orr.w	r3, r3, #1
 8003bc4:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8003bc6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d005      	beq.n	8003bde <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003bd2:	4b08      	ldr	r3, [pc, #32]	; (8003bf4 <HAL_OSPIM_Config+0x664>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a07      	ldr	r2, [pc, #28]	; (8003bf4 <HAL_OSPIM_Config+0x664>)
 8003bd8:	f043 0301 	orr.w	r3, r3, #1
 8003bdc:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8003bde:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3748      	adds	r7, #72	; 0x48
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	50061c00 	.word	0x50061c00
 8003bf0:	a0001000 	.word	0xa0001000
 8003bf4:	a0001400 	.word	0xa0001400

08003bf8 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	603b      	str	r3, [r7, #0]
 8003c04:	4613      	mov	r3, r2
 8003c06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003c08:	e01a      	b.n	8003c40 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c10:	d016      	beq.n	8003c40 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c12:	f7fe f80f 	bl	8001c34 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d302      	bcc.n	8003c28 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10b      	bne.n	8003c40 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c2e:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c34:	f043 0201 	orr.w	r2, r3, #1
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e00e      	b.n	8003c5e <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6a1a      	ldr	r2, [r3, #32]
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	bf14      	ite	ne
 8003c4e:	2301      	movne	r3, #1
 8003c50:	2300      	moveq	r3, #0
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	461a      	mov	r2, r3
 8003c56:	79fb      	ldrb	r3, [r7, #7]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d1d6      	bne.n	8003c0a <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
	...

08003c68 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	4603      	mov	r3, r0
 8003c70:	6039      	str	r1, [r7, #0]
 8003c72:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003c74:	2300      	movs	r3, #0
 8003c76:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8003c7c:	79fb      	ldrb	r3, [r7, #7]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d005      	beq.n	8003c8e <OSPIM_GetConfig+0x26>
 8003c82:	79fb      	ldrb	r3, [r7, #7]
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d802      	bhi.n	8003c8e <OSPIM_GetConfig+0x26>
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d102      	bne.n	8003c94 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	75fb      	strb	r3, [r7, #23]
 8003c92:	e08e      	b.n	8003db2 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	2200      	movs	r2, #0
 8003c98:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8003cb2:	79fb      	ldrb	r3, [r7, #7]
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d101      	bne.n	8003cbc <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8003cb8:	4b41      	ldr	r3, [pc, #260]	; (8003dc0 <OSPIM_GetConfig+0x158>)
 8003cba:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	e074      	b.n	8003dac <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8003cc2:	4a40      	ldr	r2, [pc, #256]	; (8003dc4 <OSPIM_GetConfig+0x15c>)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4413      	add	r3, r2
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00a      	beq.n	8003cee <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	4053      	eors	r3, r2
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d103      	bne.n	8003cee <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	1c5a      	adds	r2, r3, #1
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	f003 0310 	and.w	r3, r3, #16
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00a      	beq.n	8003d0e <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	4053      	eors	r3, r2
 8003cfe:	f003 0320 	and.w	r3, r3, #32
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d103      	bne.n	8003d0e <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	1c5a      	adds	r2, r3, #1
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00a      	beq.n	8003d2e <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	4053      	eors	r3, r2
 8003d1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d103      	bne.n	8003d2e <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	1c5a      	adds	r2, r3, #1
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d018      	beq.n	8003d6a <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	4053      	eors	r3, r2
 8003d3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d111      	bne.n	8003d6a <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d106      	bne.n	8003d5e <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	3301      	adds	r3, #1
 8003d54:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	60da      	str	r2, [r3, #12]
 8003d5c:	e005      	b.n	8003d6a <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	3301      	adds	r3, #1
 8003d62:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d018      	beq.n	8003da6 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8003d74:	68ba      	ldr	r2, [r7, #8]
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	4053      	eors	r3, r2
 8003d7a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d111      	bne.n	8003da6 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d106      	bne.n	8003d9a <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	611a      	str	r2, [r3, #16]
 8003d98:	e005      	b.n	8003da6 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	3301      	adds	r3, #1
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d987      	bls.n	8003cc2 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8003db2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	371c      	adds	r7, #28
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	04040222 	.word	0x04040222
 8003dc4:	50061c00 	.word	0x50061c00

08003dc8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dcc:	4b05      	ldr	r3, [pc, #20]	; (8003de4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a04      	ldr	r2, [pc, #16]	; (8003de4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd6:	6013      	str	r3, [r2, #0]
}
 8003dd8:	bf00      	nop
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	40007000 	.word	0x40007000

08003de8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dec:	4b0d      	ldr	r3, [pc, #52]	; (8003e24 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df8:	d102      	bne.n	8003e00 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003dfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dfe:	e00b      	b.n	8003e18 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003e00:	4b08      	ldr	r3, [pc, #32]	; (8003e24 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e0e:	d102      	bne.n	8003e16 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003e10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e14:	e000      	b.n	8003e18 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003e16:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	40007000 	.word	0x40007000

08003e28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d141      	bne.n	8003eba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e36:	4b4b      	ldr	r3, [pc, #300]	; (8003f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e42:	d131      	bne.n	8003ea8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e44:	4b47      	ldr	r3, [pc, #284]	; (8003f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e4a:	4a46      	ldr	r2, [pc, #280]	; (8003f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e54:	4b43      	ldr	r3, [pc, #268]	; (8003f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e5c:	4a41      	ldr	r2, [pc, #260]	; (8003f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003e64:	4b40      	ldr	r3, [pc, #256]	; (8003f68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2232      	movs	r2, #50	; 0x32
 8003e6a:	fb02 f303 	mul.w	r3, r2, r3
 8003e6e:	4a3f      	ldr	r2, [pc, #252]	; (8003f6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e70:	fba2 2303 	umull	r2, r3, r2, r3
 8003e74:	0c9b      	lsrs	r3, r3, #18
 8003e76:	3301      	adds	r3, #1
 8003e78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e7a:	e002      	b.n	8003e82 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e82:	4b38      	ldr	r3, [pc, #224]	; (8003f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e8e:	d102      	bne.n	8003e96 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1f2      	bne.n	8003e7c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e96:	4b33      	ldr	r3, [pc, #204]	; (8003f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ea2:	d158      	bne.n	8003f56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e057      	b.n	8003f58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ea8:	4b2e      	ldr	r3, [pc, #184]	; (8003f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003eae:	4a2d      	ldr	r2, [pc, #180]	; (8003f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003eb8:	e04d      	b.n	8003f56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ec0:	d141      	bne.n	8003f46 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ec2:	4b28      	ldr	r3, [pc, #160]	; (8003f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003eca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ece:	d131      	bne.n	8003f34 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ed0:	4b24      	ldr	r3, [pc, #144]	; (8003f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ed6:	4a23      	ldr	r2, [pc, #140]	; (8003f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003edc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ee0:	4b20      	ldr	r3, [pc, #128]	; (8003f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ee8:	4a1e      	ldr	r2, [pc, #120]	; (8003f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003eee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003ef0:	4b1d      	ldr	r3, [pc, #116]	; (8003f68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2232      	movs	r2, #50	; 0x32
 8003ef6:	fb02 f303 	mul.w	r3, r2, r3
 8003efa:	4a1c      	ldr	r2, [pc, #112]	; (8003f6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003efc:	fba2 2303 	umull	r2, r3, r2, r3
 8003f00:	0c9b      	lsrs	r3, r3, #18
 8003f02:	3301      	adds	r3, #1
 8003f04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f06:	e002      	b.n	8003f0e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f0e:	4b15      	ldr	r3, [pc, #84]	; (8003f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f1a:	d102      	bne.n	8003f22 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1f2      	bne.n	8003f08 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f22:	4b10      	ldr	r3, [pc, #64]	; (8003f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f2e:	d112      	bne.n	8003f56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e011      	b.n	8003f58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f34:	4b0b      	ldr	r3, [pc, #44]	; (8003f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f3a:	4a0a      	ldr	r2, [pc, #40]	; (8003f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003f44:	e007      	b.n	8003f56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f46:	4b07      	ldr	r3, [pc, #28]	; (8003f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f4e:	4a05      	ldr	r2, [pc, #20]	; (8003f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f54:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	40007000 	.word	0x40007000
 8003f68:	20000000 	.word	0x20000000
 8003f6c:	431bde83 	.word	0x431bde83

08003f70 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b088      	sub	sp, #32
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d102      	bne.n	8003f84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	f000 bc08 	b.w	8004794 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f84:	4b96      	ldr	r3, [pc, #600]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f003 030c 	and.w	r3, r3, #12
 8003f8c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f8e:	4b94      	ldr	r3, [pc, #592]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f003 0303 	and.w	r3, r3, #3
 8003f96:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0310 	and.w	r3, r3, #16
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f000 80e4 	beq.w	800416e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d007      	beq.n	8003fbc <HAL_RCC_OscConfig+0x4c>
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	2b0c      	cmp	r3, #12
 8003fb0:	f040 808b 	bne.w	80040ca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	f040 8087 	bne.w	80040ca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003fbc:	4b88      	ldr	r3, [pc, #544]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d005      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x64>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e3df      	b.n	8004794 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a1a      	ldr	r2, [r3, #32]
 8003fd8:	4b81      	ldr	r3, [pc, #516]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0308 	and.w	r3, r3, #8
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d004      	beq.n	8003fee <HAL_RCC_OscConfig+0x7e>
 8003fe4:	4b7e      	ldr	r3, [pc, #504]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fec:	e005      	b.n	8003ffa <HAL_RCC_OscConfig+0x8a>
 8003fee:	4b7c      	ldr	r3, [pc, #496]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 8003ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ff4:	091b      	lsrs	r3, r3, #4
 8003ff6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d223      	bcs.n	8004046 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	4618      	mov	r0, r3
 8004004:	f000 fdfe 	bl	8004c04 <RCC_SetFlashLatencyFromMSIRange>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e3c0      	b.n	8004794 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004012:	4b73      	ldr	r3, [pc, #460]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a72      	ldr	r2, [pc, #456]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 8004018:	f043 0308 	orr.w	r3, r3, #8
 800401c:	6013      	str	r3, [r2, #0]
 800401e:	4b70      	ldr	r3, [pc, #448]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	496d      	ldr	r1, [pc, #436]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 800402c:	4313      	orrs	r3, r2
 800402e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004030:	4b6b      	ldr	r3, [pc, #428]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	021b      	lsls	r3, r3, #8
 800403e:	4968      	ldr	r1, [pc, #416]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 8004040:	4313      	orrs	r3, r2
 8004042:	604b      	str	r3, [r1, #4]
 8004044:	e025      	b.n	8004092 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004046:	4b66      	ldr	r3, [pc, #408]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a65      	ldr	r2, [pc, #404]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 800404c:	f043 0308 	orr.w	r3, r3, #8
 8004050:	6013      	str	r3, [r2, #0]
 8004052:	4b63      	ldr	r3, [pc, #396]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	4960      	ldr	r1, [pc, #384]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 8004060:	4313      	orrs	r3, r2
 8004062:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004064:	4b5e      	ldr	r3, [pc, #376]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	69db      	ldr	r3, [r3, #28]
 8004070:	021b      	lsls	r3, r3, #8
 8004072:	495b      	ldr	r1, [pc, #364]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 8004074:	4313      	orrs	r3, r2
 8004076:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d109      	bne.n	8004092 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	4618      	mov	r0, r3
 8004084:	f000 fdbe 	bl	8004c04 <RCC_SetFlashLatencyFromMSIRange>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e380      	b.n	8004794 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004092:	f000 fcc1 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 8004096:	4602      	mov	r2, r0
 8004098:	4b51      	ldr	r3, [pc, #324]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	091b      	lsrs	r3, r3, #4
 800409e:	f003 030f 	and.w	r3, r3, #15
 80040a2:	4950      	ldr	r1, [pc, #320]	; (80041e4 <HAL_RCC_OscConfig+0x274>)
 80040a4:	5ccb      	ldrb	r3, [r1, r3]
 80040a6:	f003 031f 	and.w	r3, r3, #31
 80040aa:	fa22 f303 	lsr.w	r3, r2, r3
 80040ae:	4a4e      	ldr	r2, [pc, #312]	; (80041e8 <HAL_RCC_OscConfig+0x278>)
 80040b0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80040b2:	4b4e      	ldr	r3, [pc, #312]	; (80041ec <HAL_RCC_OscConfig+0x27c>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7fd fc8c 	bl	80019d4 <HAL_InitTick>
 80040bc:	4603      	mov	r3, r0
 80040be:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d052      	beq.n	800416c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80040c6:	7bfb      	ldrb	r3, [r7, #15]
 80040c8:	e364      	b.n	8004794 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d032      	beq.n	8004138 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80040d2:	4b43      	ldr	r3, [pc, #268]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a42      	ldr	r2, [pc, #264]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 80040d8:	f043 0301 	orr.w	r3, r3, #1
 80040dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80040de:	f7fd fda9 	bl	8001c34 <HAL_GetTick>
 80040e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040e4:	e008      	b.n	80040f8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040e6:	f7fd fda5 	bl	8001c34 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e34d      	b.n	8004794 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040f8:	4b39      	ldr	r3, [pc, #228]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0f0      	beq.n	80040e6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004104:	4b36      	ldr	r3, [pc, #216]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a35      	ldr	r2, [pc, #212]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 800410a:	f043 0308 	orr.w	r3, r3, #8
 800410e:	6013      	str	r3, [r2, #0]
 8004110:	4b33      	ldr	r3, [pc, #204]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	4930      	ldr	r1, [pc, #192]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 800411e:	4313      	orrs	r3, r2
 8004120:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004122:	4b2f      	ldr	r3, [pc, #188]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	69db      	ldr	r3, [r3, #28]
 800412e:	021b      	lsls	r3, r3, #8
 8004130:	492b      	ldr	r1, [pc, #172]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 8004132:	4313      	orrs	r3, r2
 8004134:	604b      	str	r3, [r1, #4]
 8004136:	e01a      	b.n	800416e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004138:	4b29      	ldr	r3, [pc, #164]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a28      	ldr	r2, [pc, #160]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 800413e:	f023 0301 	bic.w	r3, r3, #1
 8004142:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004144:	f7fd fd76 	bl	8001c34 <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800414c:	f7fd fd72 	bl	8001c34 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e31a      	b.n	8004794 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800415e:	4b20      	ldr	r3, [pc, #128]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1f0      	bne.n	800414c <HAL_RCC_OscConfig+0x1dc>
 800416a:	e000      	b.n	800416e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800416c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d073      	beq.n	8004262 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	2b08      	cmp	r3, #8
 800417e:	d005      	beq.n	800418c <HAL_RCC_OscConfig+0x21c>
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	2b0c      	cmp	r3, #12
 8004184:	d10e      	bne.n	80041a4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	2b03      	cmp	r3, #3
 800418a:	d10b      	bne.n	80041a4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800418c:	4b14      	ldr	r3, [pc, #80]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d063      	beq.n	8004260 <HAL_RCC_OscConfig+0x2f0>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d15f      	bne.n	8004260 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e2f7      	b.n	8004794 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ac:	d106      	bne.n	80041bc <HAL_RCC_OscConfig+0x24c>
 80041ae:	4b0c      	ldr	r3, [pc, #48]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a0b      	ldr	r2, [pc, #44]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 80041b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b8:	6013      	str	r3, [r2, #0]
 80041ba:	e025      	b.n	8004208 <HAL_RCC_OscConfig+0x298>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041c4:	d114      	bne.n	80041f0 <HAL_RCC_OscConfig+0x280>
 80041c6:	4b06      	ldr	r3, [pc, #24]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a05      	ldr	r2, [pc, #20]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 80041cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041d0:	6013      	str	r3, [r2, #0]
 80041d2:	4b03      	ldr	r3, [pc, #12]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a02      	ldr	r2, [pc, #8]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 80041d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041dc:	6013      	str	r3, [r2, #0]
 80041de:	e013      	b.n	8004208 <HAL_RCC_OscConfig+0x298>
 80041e0:	40021000 	.word	0x40021000
 80041e4:	08006bc0 	.word	0x08006bc0
 80041e8:	20000000 	.word	0x20000000
 80041ec:	20000004 	.word	0x20000004
 80041f0:	4ba0      	ldr	r3, [pc, #640]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a9f      	ldr	r2, [pc, #636]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 80041f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041fa:	6013      	str	r3, [r2, #0]
 80041fc:	4b9d      	ldr	r3, [pc, #628]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a9c      	ldr	r2, [pc, #624]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 8004202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004206:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d013      	beq.n	8004238 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004210:	f7fd fd10 	bl	8001c34 <HAL_GetTick>
 8004214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004216:	e008      	b.n	800422a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004218:	f7fd fd0c 	bl	8001c34 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b64      	cmp	r3, #100	; 0x64
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e2b4      	b.n	8004794 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800422a:	4b92      	ldr	r3, [pc, #584]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d0f0      	beq.n	8004218 <HAL_RCC_OscConfig+0x2a8>
 8004236:	e014      	b.n	8004262 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004238:	f7fd fcfc 	bl	8001c34 <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004240:	f7fd fcf8 	bl	8001c34 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b64      	cmp	r3, #100	; 0x64
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e2a0      	b.n	8004794 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004252:	4b88      	ldr	r3, [pc, #544]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1f0      	bne.n	8004240 <HAL_RCC_OscConfig+0x2d0>
 800425e:	e000      	b.n	8004262 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d060      	beq.n	8004330 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	2b04      	cmp	r3, #4
 8004272:	d005      	beq.n	8004280 <HAL_RCC_OscConfig+0x310>
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	2b0c      	cmp	r3, #12
 8004278:	d119      	bne.n	80042ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	2b02      	cmp	r3, #2
 800427e:	d116      	bne.n	80042ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004280:	4b7c      	ldr	r3, [pc, #496]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004288:	2b00      	cmp	r3, #0
 800428a:	d005      	beq.n	8004298 <HAL_RCC_OscConfig+0x328>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d101      	bne.n	8004298 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e27d      	b.n	8004794 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004298:	4b76      	ldr	r3, [pc, #472]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	061b      	lsls	r3, r3, #24
 80042a6:	4973      	ldr	r1, [pc, #460]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042ac:	e040      	b.n	8004330 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d023      	beq.n	80042fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042b6:	4b6f      	ldr	r3, [pc, #444]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a6e      	ldr	r2, [pc, #440]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 80042bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c2:	f7fd fcb7 	bl	8001c34 <HAL_GetTick>
 80042c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042c8:	e008      	b.n	80042dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042ca:	f7fd fcb3 	bl	8001c34 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e25b      	b.n	8004794 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042dc:	4b65      	ldr	r3, [pc, #404]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d0f0      	beq.n	80042ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042e8:	4b62      	ldr	r3, [pc, #392]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	061b      	lsls	r3, r3, #24
 80042f6:	495f      	ldr	r1, [pc, #380]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	604b      	str	r3, [r1, #4]
 80042fc:	e018      	b.n	8004330 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042fe:	4b5d      	ldr	r3, [pc, #372]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a5c      	ldr	r2, [pc, #368]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 8004304:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004308:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800430a:	f7fd fc93 	bl	8001c34 <HAL_GetTick>
 800430e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004310:	e008      	b.n	8004324 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004312:	f7fd fc8f 	bl	8001c34 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e237      	b.n	8004794 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004324:	4b53      	ldr	r3, [pc, #332]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1f0      	bne.n	8004312 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0308 	and.w	r3, r3, #8
 8004338:	2b00      	cmp	r3, #0
 800433a:	d03c      	beq.n	80043b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d01c      	beq.n	800437e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004344:	4b4b      	ldr	r3, [pc, #300]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 8004346:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800434a:	4a4a      	ldr	r2, [pc, #296]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 800434c:	f043 0301 	orr.w	r3, r3, #1
 8004350:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004354:	f7fd fc6e 	bl	8001c34 <HAL_GetTick>
 8004358:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800435a:	e008      	b.n	800436e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800435c:	f7fd fc6a 	bl	8001c34 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e212      	b.n	8004794 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800436e:	4b41      	ldr	r3, [pc, #260]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 8004370:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d0ef      	beq.n	800435c <HAL_RCC_OscConfig+0x3ec>
 800437c:	e01b      	b.n	80043b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800437e:	4b3d      	ldr	r3, [pc, #244]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 8004380:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004384:	4a3b      	ldr	r2, [pc, #236]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 8004386:	f023 0301 	bic.w	r3, r3, #1
 800438a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800438e:	f7fd fc51 	bl	8001c34 <HAL_GetTick>
 8004392:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004394:	e008      	b.n	80043a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004396:	f7fd fc4d 	bl	8001c34 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d901      	bls.n	80043a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e1f5      	b.n	8004794 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043a8:	4b32      	ldr	r3, [pc, #200]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 80043aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1ef      	bne.n	8004396 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0304 	and.w	r3, r3, #4
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f000 80a6 	beq.w	8004510 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043c4:	2300      	movs	r3, #0
 80043c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80043c8:	4b2a      	ldr	r3, [pc, #168]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 80043ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10d      	bne.n	80043f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043d4:	4b27      	ldr	r3, [pc, #156]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 80043d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d8:	4a26      	ldr	r2, [pc, #152]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 80043da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043de:	6593      	str	r3, [r2, #88]	; 0x58
 80043e0:	4b24      	ldr	r3, [pc, #144]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 80043e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e8:	60bb      	str	r3, [r7, #8]
 80043ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043ec:	2301      	movs	r3, #1
 80043ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043f0:	4b21      	ldr	r3, [pc, #132]	; (8004478 <HAL_RCC_OscConfig+0x508>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d118      	bne.n	800442e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043fc:	4b1e      	ldr	r3, [pc, #120]	; (8004478 <HAL_RCC_OscConfig+0x508>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a1d      	ldr	r2, [pc, #116]	; (8004478 <HAL_RCC_OscConfig+0x508>)
 8004402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004406:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004408:	f7fd fc14 	bl	8001c34 <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004410:	f7fd fc10 	bl	8001c34 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e1b8      	b.n	8004794 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004422:	4b15      	ldr	r3, [pc, #84]	; (8004478 <HAL_RCC_OscConfig+0x508>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800442a:	2b00      	cmp	r3, #0
 800442c:	d0f0      	beq.n	8004410 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d108      	bne.n	8004448 <HAL_RCC_OscConfig+0x4d8>
 8004436:	4b0f      	ldr	r3, [pc, #60]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 8004438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443c:	4a0d      	ldr	r2, [pc, #52]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 800443e:	f043 0301 	orr.w	r3, r3, #1
 8004442:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004446:	e029      	b.n	800449c <HAL_RCC_OscConfig+0x52c>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	2b05      	cmp	r3, #5
 800444e:	d115      	bne.n	800447c <HAL_RCC_OscConfig+0x50c>
 8004450:	4b08      	ldr	r3, [pc, #32]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 8004452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004456:	4a07      	ldr	r2, [pc, #28]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 8004458:	f043 0304 	orr.w	r3, r3, #4
 800445c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004460:	4b04      	ldr	r3, [pc, #16]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 8004462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004466:	4a03      	ldr	r2, [pc, #12]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 8004468:	f043 0301 	orr.w	r3, r3, #1
 800446c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004470:	e014      	b.n	800449c <HAL_RCC_OscConfig+0x52c>
 8004472:	bf00      	nop
 8004474:	40021000 	.word	0x40021000
 8004478:	40007000 	.word	0x40007000
 800447c:	4b9d      	ldr	r3, [pc, #628]	; (80046f4 <HAL_RCC_OscConfig+0x784>)
 800447e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004482:	4a9c      	ldr	r2, [pc, #624]	; (80046f4 <HAL_RCC_OscConfig+0x784>)
 8004484:	f023 0301 	bic.w	r3, r3, #1
 8004488:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800448c:	4b99      	ldr	r3, [pc, #612]	; (80046f4 <HAL_RCC_OscConfig+0x784>)
 800448e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004492:	4a98      	ldr	r2, [pc, #608]	; (80046f4 <HAL_RCC_OscConfig+0x784>)
 8004494:	f023 0304 	bic.w	r3, r3, #4
 8004498:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d016      	beq.n	80044d2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a4:	f7fd fbc6 	bl	8001c34 <HAL_GetTick>
 80044a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044aa:	e00a      	b.n	80044c2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ac:	f7fd fbc2 	bl	8001c34 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e168      	b.n	8004794 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044c2:	4b8c      	ldr	r3, [pc, #560]	; (80046f4 <HAL_RCC_OscConfig+0x784>)
 80044c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0ed      	beq.n	80044ac <HAL_RCC_OscConfig+0x53c>
 80044d0:	e015      	b.n	80044fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d2:	f7fd fbaf 	bl	8001c34 <HAL_GetTick>
 80044d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044d8:	e00a      	b.n	80044f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044da:	f7fd fbab 	bl	8001c34 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d901      	bls.n	80044f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e151      	b.n	8004794 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044f0:	4b80      	ldr	r3, [pc, #512]	; (80046f4 <HAL_RCC_OscConfig+0x784>)
 80044f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1ed      	bne.n	80044da <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044fe:	7ffb      	ldrb	r3, [r7, #31]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d105      	bne.n	8004510 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004504:	4b7b      	ldr	r3, [pc, #492]	; (80046f4 <HAL_RCC_OscConfig+0x784>)
 8004506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004508:	4a7a      	ldr	r2, [pc, #488]	; (80046f4 <HAL_RCC_OscConfig+0x784>)
 800450a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800450e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0320 	and.w	r3, r3, #32
 8004518:	2b00      	cmp	r3, #0
 800451a:	d03c      	beq.n	8004596 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	2b00      	cmp	r3, #0
 8004522:	d01c      	beq.n	800455e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004524:	4b73      	ldr	r3, [pc, #460]	; (80046f4 <HAL_RCC_OscConfig+0x784>)
 8004526:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800452a:	4a72      	ldr	r2, [pc, #456]	; (80046f4 <HAL_RCC_OscConfig+0x784>)
 800452c:	f043 0301 	orr.w	r3, r3, #1
 8004530:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004534:	f7fd fb7e 	bl	8001c34 <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800453a:	e008      	b.n	800454e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800453c:	f7fd fb7a 	bl	8001c34 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e122      	b.n	8004794 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800454e:	4b69      	ldr	r3, [pc, #420]	; (80046f4 <HAL_RCC_OscConfig+0x784>)
 8004550:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d0ef      	beq.n	800453c <HAL_RCC_OscConfig+0x5cc>
 800455c:	e01b      	b.n	8004596 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800455e:	4b65      	ldr	r3, [pc, #404]	; (80046f4 <HAL_RCC_OscConfig+0x784>)
 8004560:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004564:	4a63      	ldr	r2, [pc, #396]	; (80046f4 <HAL_RCC_OscConfig+0x784>)
 8004566:	f023 0301 	bic.w	r3, r3, #1
 800456a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800456e:	f7fd fb61 	bl	8001c34 <HAL_GetTick>
 8004572:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004574:	e008      	b.n	8004588 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004576:	f7fd fb5d 	bl	8001c34 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d901      	bls.n	8004588 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e105      	b.n	8004794 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004588:	4b5a      	ldr	r3, [pc, #360]	; (80046f4 <HAL_RCC_OscConfig+0x784>)
 800458a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1ef      	bne.n	8004576 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459a:	2b00      	cmp	r3, #0
 800459c:	f000 80f9 	beq.w	8004792 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	f040 80cf 	bne.w	8004748 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80045aa:	4b52      	ldr	r3, [pc, #328]	; (80046f4 <HAL_RCC_OscConfig+0x784>)
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f003 0203 	and.w	r2, r3, #3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d12c      	bne.n	8004618 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c8:	3b01      	subs	r3, #1
 80045ca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d123      	bne.n	8004618 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045da:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045dc:	429a      	cmp	r2, r3
 80045de:	d11b      	bne.n	8004618 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d113      	bne.n	8004618 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fa:	085b      	lsrs	r3, r3, #1
 80045fc:	3b01      	subs	r3, #1
 80045fe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004600:	429a      	cmp	r2, r3
 8004602:	d109      	bne.n	8004618 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	085b      	lsrs	r3, r3, #1
 8004610:	3b01      	subs	r3, #1
 8004612:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004614:	429a      	cmp	r2, r3
 8004616:	d071      	beq.n	80046fc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	2b0c      	cmp	r3, #12
 800461c:	d068      	beq.n	80046f0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800461e:	4b35      	ldr	r3, [pc, #212]	; (80046f4 <HAL_RCC_OscConfig+0x784>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d105      	bne.n	8004636 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800462a:	4b32      	ldr	r3, [pc, #200]	; (80046f4 <HAL_RCC_OscConfig+0x784>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e0ac      	b.n	8004794 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800463a:	4b2e      	ldr	r3, [pc, #184]	; (80046f4 <HAL_RCC_OscConfig+0x784>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a2d      	ldr	r2, [pc, #180]	; (80046f4 <HAL_RCC_OscConfig+0x784>)
 8004640:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004644:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004646:	f7fd faf5 	bl	8001c34 <HAL_GetTick>
 800464a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800464c:	e008      	b.n	8004660 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800464e:	f7fd faf1 	bl	8001c34 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e099      	b.n	8004794 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004660:	4b24      	ldr	r3, [pc, #144]	; (80046f4 <HAL_RCC_OscConfig+0x784>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1f0      	bne.n	800464e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800466c:	4b21      	ldr	r3, [pc, #132]	; (80046f4 <HAL_RCC_OscConfig+0x784>)
 800466e:	68da      	ldr	r2, [r3, #12]
 8004670:	4b21      	ldr	r3, [pc, #132]	; (80046f8 <HAL_RCC_OscConfig+0x788>)
 8004672:	4013      	ands	r3, r2
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800467c:	3a01      	subs	r2, #1
 800467e:	0112      	lsls	r2, r2, #4
 8004680:	4311      	orrs	r1, r2
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004686:	0212      	lsls	r2, r2, #8
 8004688:	4311      	orrs	r1, r2
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800468e:	0852      	lsrs	r2, r2, #1
 8004690:	3a01      	subs	r2, #1
 8004692:	0552      	lsls	r2, r2, #21
 8004694:	4311      	orrs	r1, r2
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800469a:	0852      	lsrs	r2, r2, #1
 800469c:	3a01      	subs	r2, #1
 800469e:	0652      	lsls	r2, r2, #25
 80046a0:	4311      	orrs	r1, r2
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046a6:	06d2      	lsls	r2, r2, #27
 80046a8:	430a      	orrs	r2, r1
 80046aa:	4912      	ldr	r1, [pc, #72]	; (80046f4 <HAL_RCC_OscConfig+0x784>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80046b0:	4b10      	ldr	r3, [pc, #64]	; (80046f4 <HAL_RCC_OscConfig+0x784>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a0f      	ldr	r2, [pc, #60]	; (80046f4 <HAL_RCC_OscConfig+0x784>)
 80046b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046bc:	4b0d      	ldr	r3, [pc, #52]	; (80046f4 <HAL_RCC_OscConfig+0x784>)
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	4a0c      	ldr	r2, [pc, #48]	; (80046f4 <HAL_RCC_OscConfig+0x784>)
 80046c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046c8:	f7fd fab4 	bl	8001c34 <HAL_GetTick>
 80046cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046ce:	e008      	b.n	80046e2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046d0:	f7fd fab0 	bl	8001c34 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e058      	b.n	8004794 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046e2:	4b04      	ldr	r3, [pc, #16]	; (80046f4 <HAL_RCC_OscConfig+0x784>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d0f0      	beq.n	80046d0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046ee:	e050      	b.n	8004792 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e04f      	b.n	8004794 <HAL_RCC_OscConfig+0x824>
 80046f4:	40021000 	.word	0x40021000
 80046f8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046fc:	4b27      	ldr	r3, [pc, #156]	; (800479c <HAL_RCC_OscConfig+0x82c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d144      	bne.n	8004792 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004708:	4b24      	ldr	r3, [pc, #144]	; (800479c <HAL_RCC_OscConfig+0x82c>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a23      	ldr	r2, [pc, #140]	; (800479c <HAL_RCC_OscConfig+0x82c>)
 800470e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004712:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004714:	4b21      	ldr	r3, [pc, #132]	; (800479c <HAL_RCC_OscConfig+0x82c>)
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	4a20      	ldr	r2, [pc, #128]	; (800479c <HAL_RCC_OscConfig+0x82c>)
 800471a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800471e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004720:	f7fd fa88 	bl	8001c34 <HAL_GetTick>
 8004724:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004726:	e008      	b.n	800473a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004728:	f7fd fa84 	bl	8001c34 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b02      	cmp	r3, #2
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e02c      	b.n	8004794 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800473a:	4b18      	ldr	r3, [pc, #96]	; (800479c <HAL_RCC_OscConfig+0x82c>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d0f0      	beq.n	8004728 <HAL_RCC_OscConfig+0x7b8>
 8004746:	e024      	b.n	8004792 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	2b0c      	cmp	r3, #12
 800474c:	d01f      	beq.n	800478e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800474e:	4b13      	ldr	r3, [pc, #76]	; (800479c <HAL_RCC_OscConfig+0x82c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a12      	ldr	r2, [pc, #72]	; (800479c <HAL_RCC_OscConfig+0x82c>)
 8004754:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004758:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800475a:	f7fd fa6b 	bl	8001c34 <HAL_GetTick>
 800475e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004760:	e008      	b.n	8004774 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004762:	f7fd fa67 	bl	8001c34 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	2b02      	cmp	r3, #2
 800476e:	d901      	bls.n	8004774 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e00f      	b.n	8004794 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004774:	4b09      	ldr	r3, [pc, #36]	; (800479c <HAL_RCC_OscConfig+0x82c>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1f0      	bne.n	8004762 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004780:	4b06      	ldr	r3, [pc, #24]	; (800479c <HAL_RCC_OscConfig+0x82c>)
 8004782:	68da      	ldr	r2, [r3, #12]
 8004784:	4905      	ldr	r1, [pc, #20]	; (800479c <HAL_RCC_OscConfig+0x82c>)
 8004786:	4b06      	ldr	r3, [pc, #24]	; (80047a0 <HAL_RCC_OscConfig+0x830>)
 8004788:	4013      	ands	r3, r2
 800478a:	60cb      	str	r3, [r1, #12]
 800478c:	e001      	b.n	8004792 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e000      	b.n	8004794 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3720      	adds	r7, #32
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	40021000 	.word	0x40021000
 80047a0:	feeefffc 	.word	0xfeeefffc

080047a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80047ae:	2300      	movs	r3, #0
 80047b0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d101      	bne.n	80047bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e11d      	b.n	80049f8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047bc:	4b90      	ldr	r3, [pc, #576]	; (8004a00 <HAL_RCC_ClockConfig+0x25c>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 030f 	and.w	r3, r3, #15
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d910      	bls.n	80047ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ca:	4b8d      	ldr	r3, [pc, #564]	; (8004a00 <HAL_RCC_ClockConfig+0x25c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f023 020f 	bic.w	r2, r3, #15
 80047d2:	498b      	ldr	r1, [pc, #556]	; (8004a00 <HAL_RCC_ClockConfig+0x25c>)
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047da:	4b89      	ldr	r3, [pc, #548]	; (8004a00 <HAL_RCC_ClockConfig+0x25c>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 030f 	and.w	r3, r3, #15
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d001      	beq.n	80047ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e105      	b.n	80049f8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d010      	beq.n	800481a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689a      	ldr	r2, [r3, #8]
 80047fc:	4b81      	ldr	r3, [pc, #516]	; (8004a04 <HAL_RCC_ClockConfig+0x260>)
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004804:	429a      	cmp	r2, r3
 8004806:	d908      	bls.n	800481a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004808:	4b7e      	ldr	r3, [pc, #504]	; (8004a04 <HAL_RCC_ClockConfig+0x260>)
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	497b      	ldr	r1, [pc, #492]	; (8004a04 <HAL_RCC_ClockConfig+0x260>)
 8004816:	4313      	orrs	r3, r2
 8004818:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b00      	cmp	r3, #0
 8004824:	d079      	beq.n	800491a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	2b03      	cmp	r3, #3
 800482c:	d11e      	bne.n	800486c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800482e:	4b75      	ldr	r3, [pc, #468]	; (8004a04 <HAL_RCC_ClockConfig+0x260>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e0dc      	b.n	80049f8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800483e:	f000 fa3b 	bl	8004cb8 <RCC_GetSysClockFreqFromPLLSource>
 8004842:	4603      	mov	r3, r0
 8004844:	4a70      	ldr	r2, [pc, #448]	; (8004a08 <HAL_RCC_ClockConfig+0x264>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d946      	bls.n	80048d8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800484a:	4b6e      	ldr	r3, [pc, #440]	; (8004a04 <HAL_RCC_ClockConfig+0x260>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d140      	bne.n	80048d8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004856:	4b6b      	ldr	r3, [pc, #428]	; (8004a04 <HAL_RCC_ClockConfig+0x260>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800485e:	4a69      	ldr	r2, [pc, #420]	; (8004a04 <HAL_RCC_ClockConfig+0x260>)
 8004860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004864:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004866:	2380      	movs	r3, #128	; 0x80
 8004868:	617b      	str	r3, [r7, #20]
 800486a:	e035      	b.n	80048d8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	2b02      	cmp	r3, #2
 8004872:	d107      	bne.n	8004884 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004874:	4b63      	ldr	r3, [pc, #396]	; (8004a04 <HAL_RCC_ClockConfig+0x260>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d115      	bne.n	80048ac <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e0b9      	b.n	80049f8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d107      	bne.n	800489c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800488c:	4b5d      	ldr	r3, [pc, #372]	; (8004a04 <HAL_RCC_ClockConfig+0x260>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d109      	bne.n	80048ac <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e0ad      	b.n	80049f8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800489c:	4b59      	ldr	r3, [pc, #356]	; (8004a04 <HAL_RCC_ClockConfig+0x260>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d101      	bne.n	80048ac <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e0a5      	b.n	80049f8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80048ac:	f000 f8b4 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 80048b0:	4603      	mov	r3, r0
 80048b2:	4a55      	ldr	r2, [pc, #340]	; (8004a08 <HAL_RCC_ClockConfig+0x264>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d90f      	bls.n	80048d8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80048b8:	4b52      	ldr	r3, [pc, #328]	; (8004a04 <HAL_RCC_ClockConfig+0x260>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d109      	bne.n	80048d8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80048c4:	4b4f      	ldr	r3, [pc, #316]	; (8004a04 <HAL_RCC_ClockConfig+0x260>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048cc:	4a4d      	ldr	r2, [pc, #308]	; (8004a04 <HAL_RCC_ClockConfig+0x260>)
 80048ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048d2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80048d4:	2380      	movs	r3, #128	; 0x80
 80048d6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048d8:	4b4a      	ldr	r3, [pc, #296]	; (8004a04 <HAL_RCC_ClockConfig+0x260>)
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f023 0203 	bic.w	r2, r3, #3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	4947      	ldr	r1, [pc, #284]	; (8004a04 <HAL_RCC_ClockConfig+0x260>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048ea:	f7fd f9a3 	bl	8001c34 <HAL_GetTick>
 80048ee:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048f0:	e00a      	b.n	8004908 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048f2:	f7fd f99f 	bl	8001c34 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004900:	4293      	cmp	r3, r2
 8004902:	d901      	bls.n	8004908 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e077      	b.n	80049f8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004908:	4b3e      	ldr	r3, [pc, #248]	; (8004a04 <HAL_RCC_ClockConfig+0x260>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f003 020c 	and.w	r2, r3, #12
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	429a      	cmp	r2, r3
 8004918:	d1eb      	bne.n	80048f2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	2b80      	cmp	r3, #128	; 0x80
 800491e:	d105      	bne.n	800492c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004920:	4b38      	ldr	r3, [pc, #224]	; (8004a04 <HAL_RCC_ClockConfig+0x260>)
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	4a37      	ldr	r2, [pc, #220]	; (8004a04 <HAL_RCC_ClockConfig+0x260>)
 8004926:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800492a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d010      	beq.n	800495a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689a      	ldr	r2, [r3, #8]
 800493c:	4b31      	ldr	r3, [pc, #196]	; (8004a04 <HAL_RCC_ClockConfig+0x260>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004944:	429a      	cmp	r2, r3
 8004946:	d208      	bcs.n	800495a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004948:	4b2e      	ldr	r3, [pc, #184]	; (8004a04 <HAL_RCC_ClockConfig+0x260>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	492b      	ldr	r1, [pc, #172]	; (8004a04 <HAL_RCC_ClockConfig+0x260>)
 8004956:	4313      	orrs	r3, r2
 8004958:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800495a:	4b29      	ldr	r3, [pc, #164]	; (8004a00 <HAL_RCC_ClockConfig+0x25c>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 030f 	and.w	r3, r3, #15
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	429a      	cmp	r2, r3
 8004966:	d210      	bcs.n	800498a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004968:	4b25      	ldr	r3, [pc, #148]	; (8004a00 <HAL_RCC_ClockConfig+0x25c>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f023 020f 	bic.w	r2, r3, #15
 8004970:	4923      	ldr	r1, [pc, #140]	; (8004a00 <HAL_RCC_ClockConfig+0x25c>)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	4313      	orrs	r3, r2
 8004976:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004978:	4b21      	ldr	r3, [pc, #132]	; (8004a00 <HAL_RCC_ClockConfig+0x25c>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 030f 	and.w	r3, r3, #15
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	429a      	cmp	r2, r3
 8004984:	d001      	beq.n	800498a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e036      	b.n	80049f8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0304 	and.w	r3, r3, #4
 8004992:	2b00      	cmp	r3, #0
 8004994:	d008      	beq.n	80049a8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004996:	4b1b      	ldr	r3, [pc, #108]	; (8004a04 <HAL_RCC_ClockConfig+0x260>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	4918      	ldr	r1, [pc, #96]	; (8004a04 <HAL_RCC_ClockConfig+0x260>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0308 	and.w	r3, r3, #8
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d009      	beq.n	80049c8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049b4:	4b13      	ldr	r3, [pc, #76]	; (8004a04 <HAL_RCC_ClockConfig+0x260>)
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	00db      	lsls	r3, r3, #3
 80049c2:	4910      	ldr	r1, [pc, #64]	; (8004a04 <HAL_RCC_ClockConfig+0x260>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049c8:	f000 f826 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 80049cc:	4602      	mov	r2, r0
 80049ce:	4b0d      	ldr	r3, [pc, #52]	; (8004a04 <HAL_RCC_ClockConfig+0x260>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	091b      	lsrs	r3, r3, #4
 80049d4:	f003 030f 	and.w	r3, r3, #15
 80049d8:	490c      	ldr	r1, [pc, #48]	; (8004a0c <HAL_RCC_ClockConfig+0x268>)
 80049da:	5ccb      	ldrb	r3, [r1, r3]
 80049dc:	f003 031f 	and.w	r3, r3, #31
 80049e0:	fa22 f303 	lsr.w	r3, r2, r3
 80049e4:	4a0a      	ldr	r2, [pc, #40]	; (8004a10 <HAL_RCC_ClockConfig+0x26c>)
 80049e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80049e8:	4b0a      	ldr	r3, [pc, #40]	; (8004a14 <HAL_RCC_ClockConfig+0x270>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7fc fff1 	bl	80019d4 <HAL_InitTick>
 80049f2:	4603      	mov	r3, r0
 80049f4:	73fb      	strb	r3, [r7, #15]

  return status;
 80049f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3718      	adds	r7, #24
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	40022000 	.word	0x40022000
 8004a04:	40021000 	.word	0x40021000
 8004a08:	04c4b400 	.word	0x04c4b400
 8004a0c:	08006bc0 	.word	0x08006bc0
 8004a10:	20000000 	.word	0x20000000
 8004a14:	20000004 	.word	0x20000004

08004a18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b089      	sub	sp, #36	; 0x24
 8004a1c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	61fb      	str	r3, [r7, #28]
 8004a22:	2300      	movs	r3, #0
 8004a24:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a26:	4b3e      	ldr	r3, [pc, #248]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f003 030c 	and.w	r3, r3, #12
 8004a2e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a30:	4b3b      	ldr	r3, [pc, #236]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f003 0303 	and.w	r3, r3, #3
 8004a38:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d005      	beq.n	8004a4c <HAL_RCC_GetSysClockFreq+0x34>
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	2b0c      	cmp	r3, #12
 8004a44:	d121      	bne.n	8004a8a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d11e      	bne.n	8004a8a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a4c:	4b34      	ldr	r3, [pc, #208]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0308 	and.w	r3, r3, #8
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d107      	bne.n	8004a68 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a58:	4b31      	ldr	r3, [pc, #196]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a5e:	0a1b      	lsrs	r3, r3, #8
 8004a60:	f003 030f 	and.w	r3, r3, #15
 8004a64:	61fb      	str	r3, [r7, #28]
 8004a66:	e005      	b.n	8004a74 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a68:	4b2d      	ldr	r3, [pc, #180]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	091b      	lsrs	r3, r3, #4
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004a74:	4a2b      	ldr	r2, [pc, #172]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a7c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10d      	bne.n	8004aa0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a88:	e00a      	b.n	8004aa0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	2b04      	cmp	r3, #4
 8004a8e:	d102      	bne.n	8004a96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a90:	4b25      	ldr	r3, [pc, #148]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x110>)
 8004a92:	61bb      	str	r3, [r7, #24]
 8004a94:	e004      	b.n	8004aa0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d101      	bne.n	8004aa0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a9c:	4b23      	ldr	r3, [pc, #140]	; (8004b2c <HAL_RCC_GetSysClockFreq+0x114>)
 8004a9e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	2b0c      	cmp	r3, #12
 8004aa4:	d134      	bne.n	8004b10 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004aa6:	4b1e      	ldr	r3, [pc, #120]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f003 0303 	and.w	r3, r3, #3
 8004aae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d003      	beq.n	8004abe <HAL_RCC_GetSysClockFreq+0xa6>
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	2b03      	cmp	r3, #3
 8004aba:	d003      	beq.n	8004ac4 <HAL_RCC_GetSysClockFreq+0xac>
 8004abc:	e005      	b.n	8004aca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004abe:	4b1a      	ldr	r3, [pc, #104]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ac0:	617b      	str	r3, [r7, #20]
      break;
 8004ac2:	e005      	b.n	8004ad0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ac4:	4b19      	ldr	r3, [pc, #100]	; (8004b2c <HAL_RCC_GetSysClockFreq+0x114>)
 8004ac6:	617b      	str	r3, [r7, #20]
      break;
 8004ac8:	e002      	b.n	8004ad0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	617b      	str	r3, [r7, #20]
      break;
 8004ace:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ad0:	4b13      	ldr	r3, [pc, #76]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	091b      	lsrs	r3, r3, #4
 8004ad6:	f003 030f 	and.w	r3, r3, #15
 8004ada:	3301      	adds	r3, #1
 8004adc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004ade:	4b10      	ldr	r3, [pc, #64]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	0a1b      	lsrs	r3, r3, #8
 8004ae4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ae8:	697a      	ldr	r2, [r7, #20]
 8004aea:	fb03 f202 	mul.w	r2, r3, r2
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004af6:	4b0a      	ldr	r3, [pc, #40]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	0e5b      	lsrs	r3, r3, #25
 8004afc:	f003 0303 	and.w	r3, r3, #3
 8004b00:	3301      	adds	r3, #1
 8004b02:	005b      	lsls	r3, r3, #1
 8004b04:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b0e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004b10:	69bb      	ldr	r3, [r7, #24]
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3724      	adds	r7, #36	; 0x24
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	40021000 	.word	0x40021000
 8004b24:	08006bd8 	.word	0x08006bd8
 8004b28:	00f42400 	.word	0x00f42400
 8004b2c:	007a1200 	.word	0x007a1200

08004b30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b30:	b480      	push	{r7}
 8004b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b34:	4b03      	ldr	r3, [pc, #12]	; (8004b44 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b36:	681b      	ldr	r3, [r3, #0]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	20000000 	.word	0x20000000

08004b48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b4c:	f7ff fff0 	bl	8004b30 <HAL_RCC_GetHCLKFreq>
 8004b50:	4602      	mov	r2, r0
 8004b52:	4b06      	ldr	r3, [pc, #24]	; (8004b6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	0a1b      	lsrs	r3, r3, #8
 8004b58:	f003 0307 	and.w	r3, r3, #7
 8004b5c:	4904      	ldr	r1, [pc, #16]	; (8004b70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b5e:	5ccb      	ldrb	r3, [r1, r3]
 8004b60:	f003 031f 	and.w	r3, r3, #31
 8004b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	40021000 	.word	0x40021000
 8004b70:	08006bd0 	.word	0x08006bd0

08004b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b78:	f7ff ffda 	bl	8004b30 <HAL_RCC_GetHCLKFreq>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	4b06      	ldr	r3, [pc, #24]	; (8004b98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	0adb      	lsrs	r3, r3, #11
 8004b84:	f003 0307 	and.w	r3, r3, #7
 8004b88:	4904      	ldr	r1, [pc, #16]	; (8004b9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b8a:	5ccb      	ldrb	r3, [r1, r3]
 8004b8c:	f003 031f 	and.w	r3, r3, #31
 8004b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	40021000 	.word	0x40021000
 8004b9c:	08006bd0 	.word	0x08006bd0

08004ba0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	220f      	movs	r2, #15
 8004bae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004bb0:	4b12      	ldr	r3, [pc, #72]	; (8004bfc <HAL_RCC_GetClockConfig+0x5c>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f003 0203 	and.w	r2, r3, #3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004bbc:	4b0f      	ldr	r3, [pc, #60]	; (8004bfc <HAL_RCC_GetClockConfig+0x5c>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004bc8:	4b0c      	ldr	r3, [pc, #48]	; (8004bfc <HAL_RCC_GetClockConfig+0x5c>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004bd4:	4b09      	ldr	r3, [pc, #36]	; (8004bfc <HAL_RCC_GetClockConfig+0x5c>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	08db      	lsrs	r3, r3, #3
 8004bda:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004be2:	4b07      	ldr	r3, [pc, #28]	; (8004c00 <HAL_RCC_GetClockConfig+0x60>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 020f 	and.w	r2, r3, #15
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	601a      	str	r2, [r3, #0]
}
 8004bee:	bf00      	nop
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	40022000 	.word	0x40022000

08004c04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c10:	4b27      	ldr	r3, [pc, #156]	; (8004cb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c1c:	f7ff f8e4 	bl	8003de8 <HAL_PWREx_GetVoltageRange>
 8004c20:	6178      	str	r0, [r7, #20]
 8004c22:	e014      	b.n	8004c4e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c24:	4b22      	ldr	r3, [pc, #136]	; (8004cb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c28:	4a21      	ldr	r2, [pc, #132]	; (8004cb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c2e:	6593      	str	r3, [r2, #88]	; 0x58
 8004c30:	4b1f      	ldr	r3, [pc, #124]	; (8004cb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c38:	60fb      	str	r3, [r7, #12]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004c3c:	f7ff f8d4 	bl	8003de8 <HAL_PWREx_GetVoltageRange>
 8004c40:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004c42:	4b1b      	ldr	r3, [pc, #108]	; (8004cb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c46:	4a1a      	ldr	r2, [pc, #104]	; (8004cb0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004c48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c4c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c54:	d10b      	bne.n	8004c6e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b80      	cmp	r3, #128	; 0x80
 8004c5a:	d913      	bls.n	8004c84 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2ba0      	cmp	r3, #160	; 0xa0
 8004c60:	d902      	bls.n	8004c68 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c62:	2302      	movs	r3, #2
 8004c64:	613b      	str	r3, [r7, #16]
 8004c66:	e00d      	b.n	8004c84 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c68:	2301      	movs	r3, #1
 8004c6a:	613b      	str	r3, [r7, #16]
 8004c6c:	e00a      	b.n	8004c84 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2b7f      	cmp	r3, #127	; 0x7f
 8004c72:	d902      	bls.n	8004c7a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004c74:	2302      	movs	r3, #2
 8004c76:	613b      	str	r3, [r7, #16]
 8004c78:	e004      	b.n	8004c84 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b70      	cmp	r3, #112	; 0x70
 8004c7e:	d101      	bne.n	8004c84 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c80:	2301      	movs	r3, #1
 8004c82:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004c84:	4b0b      	ldr	r3, [pc, #44]	; (8004cb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f023 020f 	bic.w	r2, r3, #15
 8004c8c:	4909      	ldr	r1, [pc, #36]	; (8004cb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004c94:	4b07      	ldr	r3, [pc, #28]	; (8004cb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 030f 	and.w	r3, r3, #15
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d001      	beq.n	8004ca6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e000      	b.n	8004ca8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3718      	adds	r7, #24
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	40021000 	.word	0x40021000
 8004cb4:	40022000 	.word	0x40022000

08004cb8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b087      	sub	sp, #28
 8004cbc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004cbe:	4b2d      	ldr	r3, [pc, #180]	; (8004d74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f003 0303 	and.w	r3, r3, #3
 8004cc6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2b03      	cmp	r3, #3
 8004ccc:	d00b      	beq.n	8004ce6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2b03      	cmp	r3, #3
 8004cd2:	d825      	bhi.n	8004d20 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d008      	beq.n	8004cec <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d11f      	bne.n	8004d20 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004ce0:	4b25      	ldr	r3, [pc, #148]	; (8004d78 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004ce2:	613b      	str	r3, [r7, #16]
    break;
 8004ce4:	e01f      	b.n	8004d26 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004ce6:	4b25      	ldr	r3, [pc, #148]	; (8004d7c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004ce8:	613b      	str	r3, [r7, #16]
    break;
 8004cea:	e01c      	b.n	8004d26 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004cec:	4b21      	ldr	r3, [pc, #132]	; (8004d74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0308 	and.w	r3, r3, #8
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d107      	bne.n	8004d08 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004cf8:	4b1e      	ldr	r3, [pc, #120]	; (8004d74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cfe:	0a1b      	lsrs	r3, r3, #8
 8004d00:	f003 030f 	and.w	r3, r3, #15
 8004d04:	617b      	str	r3, [r7, #20]
 8004d06:	e005      	b.n	8004d14 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d08:	4b1a      	ldr	r3, [pc, #104]	; (8004d74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	091b      	lsrs	r3, r3, #4
 8004d0e:	f003 030f 	and.w	r3, r3, #15
 8004d12:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004d14:	4a1a      	ldr	r2, [pc, #104]	; (8004d80 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d1c:	613b      	str	r3, [r7, #16]
    break;
 8004d1e:	e002      	b.n	8004d26 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004d20:	2300      	movs	r3, #0
 8004d22:	613b      	str	r3, [r7, #16]
    break;
 8004d24:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d26:	4b13      	ldr	r3, [pc, #76]	; (8004d74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	091b      	lsrs	r3, r3, #4
 8004d2c:	f003 030f 	and.w	r3, r3, #15
 8004d30:	3301      	adds	r3, #1
 8004d32:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004d34:	4b0f      	ldr	r3, [pc, #60]	; (8004d74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	0a1b      	lsrs	r3, r3, #8
 8004d3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	fb03 f202 	mul.w	r2, r3, r2
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d4a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d4c:	4b09      	ldr	r3, [pc, #36]	; (8004d74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	0e5b      	lsrs	r3, r3, #25
 8004d52:	f003 0303 	and.w	r3, r3, #3
 8004d56:	3301      	adds	r3, #1
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d64:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004d66:	683b      	ldr	r3, [r7, #0]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	371c      	adds	r7, #28
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	40021000 	.word	0x40021000
 8004d78:	00f42400 	.word	0x00f42400
 8004d7c:	007a1200 	.word	0x007a1200
 8004d80:	08006bd8 	.word	0x08006bd8

08004d84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b086      	sub	sp, #24
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d90:	2300      	movs	r3, #0
 8004d92:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d040      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004da4:	2b80      	cmp	r3, #128	; 0x80
 8004da6:	d02a      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004da8:	2b80      	cmp	r3, #128	; 0x80
 8004daa:	d825      	bhi.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004dac:	2b60      	cmp	r3, #96	; 0x60
 8004dae:	d026      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004db0:	2b60      	cmp	r3, #96	; 0x60
 8004db2:	d821      	bhi.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004db4:	2b40      	cmp	r3, #64	; 0x40
 8004db6:	d006      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004db8:	2b40      	cmp	r3, #64	; 0x40
 8004dba:	d81d      	bhi.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d009      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004dc0:	2b20      	cmp	r3, #32
 8004dc2:	d010      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004dc4:	e018      	b.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004dc6:	4b89      	ldr	r3, [pc, #548]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	4a88      	ldr	r2, [pc, #544]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dd0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004dd2:	e015      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	3304      	adds	r3, #4
 8004dd8:	2100      	movs	r1, #0
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 fb12 	bl	8005404 <RCCEx_PLLSAI1_Config>
 8004de0:	4603      	mov	r3, r0
 8004de2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004de4:	e00c      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	3320      	adds	r3, #32
 8004dea:	2100      	movs	r1, #0
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 fbfd 	bl	80055ec <RCCEx_PLLSAI2_Config>
 8004df2:	4603      	mov	r3, r0
 8004df4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004df6:	e003      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	74fb      	strb	r3, [r7, #19]
      break;
 8004dfc:	e000      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004dfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e00:	7cfb      	ldrb	r3, [r7, #19]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10b      	bne.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e06:	4b79      	ldr	r3, [pc, #484]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e0c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e14:	4975      	ldr	r1, [pc, #468]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004e1c:	e001      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e1e:	7cfb      	ldrb	r3, [r7, #19]
 8004e20:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d047      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e36:	d030      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e3c:	d82a      	bhi.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004e3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e42:	d02a      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004e44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e48:	d824      	bhi.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004e4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e4e:	d008      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e54:	d81e      	bhi.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00a      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004e5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e5e:	d010      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004e60:	e018      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e62:	4b62      	ldr	r3, [pc, #392]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	4a61      	ldr	r2, [pc, #388]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e6c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e6e:	e015      	b.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	3304      	adds	r3, #4
 8004e74:	2100      	movs	r1, #0
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 fac4 	bl	8005404 <RCCEx_PLLSAI1_Config>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e80:	e00c      	b.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	3320      	adds	r3, #32
 8004e86:	2100      	movs	r1, #0
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f000 fbaf 	bl	80055ec <RCCEx_PLLSAI2_Config>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e92:	e003      	b.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	74fb      	strb	r3, [r7, #19]
      break;
 8004e98:	e000      	b.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004e9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e9c:	7cfb      	ldrb	r3, [r7, #19]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10b      	bne.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ea2:	4b52      	ldr	r3, [pc, #328]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ea4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ea8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb0:	494e      	ldr	r1, [pc, #312]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004eb8:	e001      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eba:	7cfb      	ldrb	r3, [r7, #19]
 8004ebc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	f000 809f 	beq.w	800500a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ed0:	4b46      	ldr	r3, [pc, #280]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d101      	bne.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004edc:	2301      	movs	r3, #1
 8004ede:	e000      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00d      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ee6:	4b41      	ldr	r3, [pc, #260]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eea:	4a40      	ldr	r2, [pc, #256]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ef0:	6593      	str	r3, [r2, #88]	; 0x58
 8004ef2:	4b3e      	ldr	r3, [pc, #248]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004efa:	60bb      	str	r3, [r7, #8]
 8004efc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004efe:	2301      	movs	r3, #1
 8004f00:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f02:	4b3b      	ldr	r3, [pc, #236]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a3a      	ldr	r2, [pc, #232]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f0e:	f7fc fe91 	bl	8001c34 <HAL_GetTick>
 8004f12:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f14:	e009      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f16:	f7fc fe8d 	bl	8001c34 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d902      	bls.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	74fb      	strb	r3, [r7, #19]
        break;
 8004f28:	e005      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f2a:	4b31      	ldr	r3, [pc, #196]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d0ef      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004f36:	7cfb      	ldrb	r3, [r7, #19]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d15b      	bne.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f3c:	4b2b      	ldr	r3, [pc, #172]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f46:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d01f      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d019      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f5a:	4b24      	ldr	r3, [pc, #144]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f64:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f66:	4b21      	ldr	r3, [pc, #132]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f6c:	4a1f      	ldr	r2, [pc, #124]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f76:	4b1d      	ldr	r3, [pc, #116]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7c:	4a1b      	ldr	r2, [pc, #108]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f86:	4a19      	ldr	r2, [pc, #100]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d016      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f98:	f7fc fe4c 	bl	8001c34 <HAL_GetTick>
 8004f9c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f9e:	e00b      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fa0:	f7fc fe48 	bl	8001c34 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d902      	bls.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	74fb      	strb	r3, [r7, #19]
            break;
 8004fb6:	e006      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fb8:	4b0c      	ldr	r3, [pc, #48]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d0ec      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004fc6:	7cfb      	ldrb	r3, [r7, #19]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10c      	bne.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fcc:	4b07      	ldr	r3, [pc, #28]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fdc:	4903      	ldr	r1, [pc, #12]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004fe4:	e008      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004fe6:	7cfb      	ldrb	r3, [r7, #19]
 8004fe8:	74bb      	strb	r3, [r7, #18]
 8004fea:	e005      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004fec:	40021000 	.word	0x40021000
 8004ff0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff4:	7cfb      	ldrb	r3, [r7, #19]
 8004ff6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ff8:	7c7b      	ldrb	r3, [r7, #17]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d105      	bne.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ffe:	4ba0      	ldr	r3, [pc, #640]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005002:	4a9f      	ldr	r2, [pc, #636]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005008:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00a      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005016:	4b9a      	ldr	r3, [pc, #616]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800501c:	f023 0203 	bic.w	r2, r3, #3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005024:	4996      	ldr	r1, [pc, #600]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005026:	4313      	orrs	r3, r2
 8005028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00a      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005038:	4b91      	ldr	r3, [pc, #580]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800503a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800503e:	f023 020c 	bic.w	r2, r3, #12
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005046:	498e      	ldr	r1, [pc, #568]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005048:	4313      	orrs	r3, r2
 800504a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0304 	and.w	r3, r3, #4
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00a      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800505a:	4b89      	ldr	r3, [pc, #548]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800505c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005060:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005068:	4985      	ldr	r1, [pc, #532]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800506a:	4313      	orrs	r3, r2
 800506c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0308 	and.w	r3, r3, #8
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00a      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800507c:	4b80      	ldr	r3, [pc, #512]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800507e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005082:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800508a:	497d      	ldr	r1, [pc, #500]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800508c:	4313      	orrs	r3, r2
 800508e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0310 	and.w	r3, r3, #16
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00a      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800509e:	4b78      	ldr	r3, [pc, #480]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ac:	4974      	ldr	r1, [pc, #464]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0320 	and.w	r3, r3, #32
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00a      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050c0:	4b6f      	ldr	r3, [pc, #444]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ce:	496c      	ldr	r1, [pc, #432]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00a      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050e2:	4b67      	ldr	r3, [pc, #412]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050f0:	4963      	ldr	r1, [pc, #396]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00a      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005104:	4b5e      	ldr	r3, [pc, #376]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005112:	495b      	ldr	r1, [pc, #364]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005114:	4313      	orrs	r3, r2
 8005116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00a      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005126:	4b56      	ldr	r3, [pc, #344]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800512c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005134:	4952      	ldr	r1, [pc, #328]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005136:	4313      	orrs	r3, r2
 8005138:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00a      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005148:	4b4d      	ldr	r3, [pc, #308]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800514a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800514e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005156:	494a      	ldr	r1, [pc, #296]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005158:	4313      	orrs	r3, r2
 800515a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00a      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800516a:	4b45      	ldr	r3, [pc, #276]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800516c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005170:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005178:	4941      	ldr	r1, [pc, #260]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800517a:	4313      	orrs	r3, r2
 800517c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00a      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800518c:	4b3c      	ldr	r3, [pc, #240]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800518e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005192:	f023 0203 	bic.w	r2, r3, #3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800519a:	4939      	ldr	r1, [pc, #228]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800519c:	4313      	orrs	r3, r2
 800519e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d028      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051ae:	4b34      	ldr	r3, [pc, #208]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051bc:	4930      	ldr	r1, [pc, #192]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051cc:	d106      	bne.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051ce:	4b2c      	ldr	r3, [pc, #176]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	4a2b      	ldr	r2, [pc, #172]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051d8:	60d3      	str	r3, [r2, #12]
 80051da:	e011      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051e4:	d10c      	bne.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	3304      	adds	r3, #4
 80051ea:	2101      	movs	r1, #1
 80051ec:	4618      	mov	r0, r3
 80051ee:	f000 f909 	bl	8005404 <RCCEx_PLLSAI1_Config>
 80051f2:	4603      	mov	r3, r0
 80051f4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80051f6:	7cfb      	ldrb	r3, [r7, #19]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d001      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80051fc:	7cfb      	ldrb	r3, [r7, #19]
 80051fe:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d04d      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005210:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005214:	d108      	bne.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005216:	4b1a      	ldr	r3, [pc, #104]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005218:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800521c:	4a18      	ldr	r2, [pc, #96]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800521e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005222:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005226:	e012      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005228:	4b15      	ldr	r3, [pc, #84]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800522a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800522e:	4a14      	ldr	r2, [pc, #80]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005230:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005234:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005238:	4b11      	ldr	r3, [pc, #68]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800523a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800523e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005246:	490e      	ldr	r1, [pc, #56]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005248:	4313      	orrs	r3, r2
 800524a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005252:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005256:	d106      	bne.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005258:	4b09      	ldr	r3, [pc, #36]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	4a08      	ldr	r2, [pc, #32]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800525e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005262:	60d3      	str	r3, [r2, #12]
 8005264:	e020      	b.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800526a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800526e:	d109      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005270:	4b03      	ldr	r3, [pc, #12]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	4a02      	ldr	r2, [pc, #8]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005276:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800527a:	60d3      	str	r3, [r2, #12]
 800527c:	e014      	b.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800527e:	bf00      	nop
 8005280:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005288:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800528c:	d10c      	bne.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	3304      	adds	r3, #4
 8005292:	2101      	movs	r1, #1
 8005294:	4618      	mov	r0, r3
 8005296:	f000 f8b5 	bl	8005404 <RCCEx_PLLSAI1_Config>
 800529a:	4603      	mov	r3, r0
 800529c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800529e:	7cfb      	ldrb	r3, [r7, #19]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d001      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80052a4:	7cfb      	ldrb	r3, [r7, #19]
 80052a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d028      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052b4:	4b4a      	ldr	r3, [pc, #296]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052c2:	4947      	ldr	r1, [pc, #284]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052d2:	d106      	bne.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052d4:	4b42      	ldr	r3, [pc, #264]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	4a41      	ldr	r2, [pc, #260]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052de:	60d3      	str	r3, [r2, #12]
 80052e0:	e011      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052ea:	d10c      	bne.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	3304      	adds	r3, #4
 80052f0:	2101      	movs	r1, #1
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 f886 	bl	8005404 <RCCEx_PLLSAI1_Config>
 80052f8:	4603      	mov	r3, r0
 80052fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052fc:	7cfb      	ldrb	r3, [r7, #19]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005302:	7cfb      	ldrb	r3, [r7, #19]
 8005304:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d01e      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005312:	4b33      	ldr	r3, [pc, #204]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005318:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005322:	492f      	ldr	r1, [pc, #188]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005324:	4313      	orrs	r3, r2
 8005326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005330:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005334:	d10c      	bne.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	3304      	adds	r3, #4
 800533a:	2102      	movs	r1, #2
 800533c:	4618      	mov	r0, r3
 800533e:	f000 f861 	bl	8005404 <RCCEx_PLLSAI1_Config>
 8005342:	4603      	mov	r3, r0
 8005344:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005346:	7cfb      	ldrb	r3, [r7, #19]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d001      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800534c:	7cfb      	ldrb	r3, [r7, #19]
 800534e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00b      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800535c:	4b20      	ldr	r3, [pc, #128]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800535e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005362:	f023 0204 	bic.w	r2, r3, #4
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800536c:	491c      	ldr	r1, [pc, #112]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800536e:	4313      	orrs	r3, r2
 8005370:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00b      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005380:	4b17      	ldr	r3, [pc, #92]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005382:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005386:	f023 0218 	bic.w	r2, r3, #24
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005390:	4913      	ldr	r1, [pc, #76]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005392:	4313      	orrs	r3, r2
 8005394:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d017      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80053a4:	4b0e      	ldr	r3, [pc, #56]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053b4:	490a      	ldr	r1, [pc, #40]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053c6:	d105      	bne.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053c8:	4b05      	ldr	r3, [pc, #20]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	4a04      	ldr	r2, [pc, #16]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053d2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80053d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3718      	adds	r7, #24
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	40021000 	.word	0x40021000

080053e4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80053e4:	b480      	push	{r7}
 80053e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80053e8:	4b05      	ldr	r3, [pc, #20]	; (8005400 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a04      	ldr	r2, [pc, #16]	; (8005400 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80053ee:	f043 0304 	orr.w	r3, r3, #4
 80053f2:	6013      	str	r3, [r2, #0]
}
 80053f4:	bf00      	nop
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	40021000 	.word	0x40021000

08005404 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800540e:	2300      	movs	r3, #0
 8005410:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005412:	4b72      	ldr	r3, [pc, #456]	; (80055dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	f003 0303 	and.w	r3, r3, #3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00e      	beq.n	800543c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800541e:	4b6f      	ldr	r3, [pc, #444]	; (80055dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	f003 0203 	and.w	r2, r3, #3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	429a      	cmp	r2, r3
 800542c:	d103      	bne.n	8005436 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
       ||
 8005432:	2b00      	cmp	r3, #0
 8005434:	d142      	bne.n	80054bc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	73fb      	strb	r3, [r7, #15]
 800543a:	e03f      	b.n	80054bc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2b03      	cmp	r3, #3
 8005442:	d018      	beq.n	8005476 <RCCEx_PLLSAI1_Config+0x72>
 8005444:	2b03      	cmp	r3, #3
 8005446:	d825      	bhi.n	8005494 <RCCEx_PLLSAI1_Config+0x90>
 8005448:	2b01      	cmp	r3, #1
 800544a:	d002      	beq.n	8005452 <RCCEx_PLLSAI1_Config+0x4e>
 800544c:	2b02      	cmp	r3, #2
 800544e:	d009      	beq.n	8005464 <RCCEx_PLLSAI1_Config+0x60>
 8005450:	e020      	b.n	8005494 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005452:	4b62      	ldr	r3, [pc, #392]	; (80055dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0302 	and.w	r3, r3, #2
 800545a:	2b00      	cmp	r3, #0
 800545c:	d11d      	bne.n	800549a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005462:	e01a      	b.n	800549a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005464:	4b5d      	ldr	r3, [pc, #372]	; (80055dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800546c:	2b00      	cmp	r3, #0
 800546e:	d116      	bne.n	800549e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005474:	e013      	b.n	800549e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005476:	4b59      	ldr	r3, [pc, #356]	; (80055dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10f      	bne.n	80054a2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005482:	4b56      	ldr	r3, [pc, #344]	; (80055dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d109      	bne.n	80054a2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005492:	e006      	b.n	80054a2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	73fb      	strb	r3, [r7, #15]
      break;
 8005498:	e004      	b.n	80054a4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800549a:	bf00      	nop
 800549c:	e002      	b.n	80054a4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800549e:	bf00      	nop
 80054a0:	e000      	b.n	80054a4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80054a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80054a4:	7bfb      	ldrb	r3, [r7, #15]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d108      	bne.n	80054bc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80054aa:	4b4c      	ldr	r3, [pc, #304]	; (80055dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	f023 0203 	bic.w	r2, r3, #3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4949      	ldr	r1, [pc, #292]	; (80055dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80054bc:	7bfb      	ldrb	r3, [r7, #15]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f040 8086 	bne.w	80055d0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80054c4:	4b45      	ldr	r3, [pc, #276]	; (80055dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a44      	ldr	r2, [pc, #272]	; (80055dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80054ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80054ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054d0:	f7fc fbb0 	bl	8001c34 <HAL_GetTick>
 80054d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80054d6:	e009      	b.n	80054ec <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054d8:	f7fc fbac 	bl	8001c34 <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d902      	bls.n	80054ec <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	73fb      	strb	r3, [r7, #15]
        break;
 80054ea:	e005      	b.n	80054f8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80054ec:	4b3b      	ldr	r3, [pc, #236]	; (80055dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1ef      	bne.n	80054d8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80054f8:	7bfb      	ldrb	r3, [r7, #15]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d168      	bne.n	80055d0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d113      	bne.n	800552c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005504:	4b35      	ldr	r3, [pc, #212]	; (80055dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005506:	691a      	ldr	r2, [r3, #16]
 8005508:	4b35      	ldr	r3, [pc, #212]	; (80055e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800550a:	4013      	ands	r3, r2
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	6892      	ldr	r2, [r2, #8]
 8005510:	0211      	lsls	r1, r2, #8
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	68d2      	ldr	r2, [r2, #12]
 8005516:	06d2      	lsls	r2, r2, #27
 8005518:	4311      	orrs	r1, r2
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	6852      	ldr	r2, [r2, #4]
 800551e:	3a01      	subs	r2, #1
 8005520:	0112      	lsls	r2, r2, #4
 8005522:	430a      	orrs	r2, r1
 8005524:	492d      	ldr	r1, [pc, #180]	; (80055dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005526:	4313      	orrs	r3, r2
 8005528:	610b      	str	r3, [r1, #16]
 800552a:	e02d      	b.n	8005588 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d115      	bne.n	800555e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005532:	4b2a      	ldr	r3, [pc, #168]	; (80055dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005534:	691a      	ldr	r2, [r3, #16]
 8005536:	4b2b      	ldr	r3, [pc, #172]	; (80055e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005538:	4013      	ands	r3, r2
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	6892      	ldr	r2, [r2, #8]
 800553e:	0211      	lsls	r1, r2, #8
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	6912      	ldr	r2, [r2, #16]
 8005544:	0852      	lsrs	r2, r2, #1
 8005546:	3a01      	subs	r2, #1
 8005548:	0552      	lsls	r2, r2, #21
 800554a:	4311      	orrs	r1, r2
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	6852      	ldr	r2, [r2, #4]
 8005550:	3a01      	subs	r2, #1
 8005552:	0112      	lsls	r2, r2, #4
 8005554:	430a      	orrs	r2, r1
 8005556:	4921      	ldr	r1, [pc, #132]	; (80055dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005558:	4313      	orrs	r3, r2
 800555a:	610b      	str	r3, [r1, #16]
 800555c:	e014      	b.n	8005588 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800555e:	4b1f      	ldr	r3, [pc, #124]	; (80055dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005560:	691a      	ldr	r2, [r3, #16]
 8005562:	4b21      	ldr	r3, [pc, #132]	; (80055e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005564:	4013      	ands	r3, r2
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	6892      	ldr	r2, [r2, #8]
 800556a:	0211      	lsls	r1, r2, #8
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	6952      	ldr	r2, [r2, #20]
 8005570:	0852      	lsrs	r2, r2, #1
 8005572:	3a01      	subs	r2, #1
 8005574:	0652      	lsls	r2, r2, #25
 8005576:	4311      	orrs	r1, r2
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	6852      	ldr	r2, [r2, #4]
 800557c:	3a01      	subs	r2, #1
 800557e:	0112      	lsls	r2, r2, #4
 8005580:	430a      	orrs	r2, r1
 8005582:	4916      	ldr	r1, [pc, #88]	; (80055dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005584:	4313      	orrs	r3, r2
 8005586:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005588:	4b14      	ldr	r3, [pc, #80]	; (80055dc <RCCEx_PLLSAI1_Config+0x1d8>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a13      	ldr	r2, [pc, #76]	; (80055dc <RCCEx_PLLSAI1_Config+0x1d8>)
 800558e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005592:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005594:	f7fc fb4e 	bl	8001c34 <HAL_GetTick>
 8005598:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800559a:	e009      	b.n	80055b0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800559c:	f7fc fb4a 	bl	8001c34 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d902      	bls.n	80055b0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	73fb      	strb	r3, [r7, #15]
          break;
 80055ae:	e005      	b.n	80055bc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80055b0:	4b0a      	ldr	r3, [pc, #40]	; (80055dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d0ef      	beq.n	800559c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80055bc:	7bfb      	ldrb	r3, [r7, #15]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d106      	bne.n	80055d0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80055c2:	4b06      	ldr	r3, [pc, #24]	; (80055dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80055c4:	691a      	ldr	r2, [r3, #16]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	4904      	ldr	r1, [pc, #16]	; (80055dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80055d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	40021000 	.word	0x40021000
 80055e0:	07ff800f 	.word	0x07ff800f
 80055e4:	ff9f800f 	.word	0xff9f800f
 80055e8:	f9ff800f 	.word	0xf9ff800f

080055ec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055f6:	2300      	movs	r3, #0
 80055f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80055fa:	4b72      	ldr	r3, [pc, #456]	; (80057c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	f003 0303 	and.w	r3, r3, #3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00e      	beq.n	8005624 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005606:	4b6f      	ldr	r3, [pc, #444]	; (80057c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	f003 0203 	and.w	r2, r3, #3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	429a      	cmp	r2, r3
 8005614:	d103      	bne.n	800561e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
       ||
 800561a:	2b00      	cmp	r3, #0
 800561c:	d142      	bne.n	80056a4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	73fb      	strb	r3, [r7, #15]
 8005622:	e03f      	b.n	80056a4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2b03      	cmp	r3, #3
 800562a:	d018      	beq.n	800565e <RCCEx_PLLSAI2_Config+0x72>
 800562c:	2b03      	cmp	r3, #3
 800562e:	d825      	bhi.n	800567c <RCCEx_PLLSAI2_Config+0x90>
 8005630:	2b01      	cmp	r3, #1
 8005632:	d002      	beq.n	800563a <RCCEx_PLLSAI2_Config+0x4e>
 8005634:	2b02      	cmp	r3, #2
 8005636:	d009      	beq.n	800564c <RCCEx_PLLSAI2_Config+0x60>
 8005638:	e020      	b.n	800567c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800563a:	4b62      	ldr	r3, [pc, #392]	; (80057c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d11d      	bne.n	8005682 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800564a:	e01a      	b.n	8005682 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800564c:	4b5d      	ldr	r3, [pc, #372]	; (80057c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005654:	2b00      	cmp	r3, #0
 8005656:	d116      	bne.n	8005686 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800565c:	e013      	b.n	8005686 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800565e:	4b59      	ldr	r3, [pc, #356]	; (80057c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10f      	bne.n	800568a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800566a:	4b56      	ldr	r3, [pc, #344]	; (80057c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d109      	bne.n	800568a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800567a:	e006      	b.n	800568a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	73fb      	strb	r3, [r7, #15]
      break;
 8005680:	e004      	b.n	800568c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005682:	bf00      	nop
 8005684:	e002      	b.n	800568c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005686:	bf00      	nop
 8005688:	e000      	b.n	800568c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800568a:	bf00      	nop
    }

    if(status == HAL_OK)
 800568c:	7bfb      	ldrb	r3, [r7, #15]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d108      	bne.n	80056a4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005692:	4b4c      	ldr	r3, [pc, #304]	; (80057c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	f023 0203 	bic.w	r2, r3, #3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4949      	ldr	r1, [pc, #292]	; (80057c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80056a4:	7bfb      	ldrb	r3, [r7, #15]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f040 8086 	bne.w	80057b8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80056ac:	4b45      	ldr	r3, [pc, #276]	; (80057c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a44      	ldr	r2, [pc, #272]	; (80057c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056b8:	f7fc fabc 	bl	8001c34 <HAL_GetTick>
 80056bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80056be:	e009      	b.n	80056d4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80056c0:	f7fc fab8 	bl	8001c34 <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d902      	bls.n	80056d4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	73fb      	strb	r3, [r7, #15]
        break;
 80056d2:	e005      	b.n	80056e0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80056d4:	4b3b      	ldr	r3, [pc, #236]	; (80057c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1ef      	bne.n	80056c0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80056e0:	7bfb      	ldrb	r3, [r7, #15]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d168      	bne.n	80057b8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d113      	bne.n	8005714 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80056ec:	4b35      	ldr	r3, [pc, #212]	; (80057c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056ee:	695a      	ldr	r2, [r3, #20]
 80056f0:	4b35      	ldr	r3, [pc, #212]	; (80057c8 <RCCEx_PLLSAI2_Config+0x1dc>)
 80056f2:	4013      	ands	r3, r2
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	6892      	ldr	r2, [r2, #8]
 80056f8:	0211      	lsls	r1, r2, #8
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	68d2      	ldr	r2, [r2, #12]
 80056fe:	06d2      	lsls	r2, r2, #27
 8005700:	4311      	orrs	r1, r2
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	6852      	ldr	r2, [r2, #4]
 8005706:	3a01      	subs	r2, #1
 8005708:	0112      	lsls	r2, r2, #4
 800570a:	430a      	orrs	r2, r1
 800570c:	492d      	ldr	r1, [pc, #180]	; (80057c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800570e:	4313      	orrs	r3, r2
 8005710:	614b      	str	r3, [r1, #20]
 8005712:	e02d      	b.n	8005770 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	2b01      	cmp	r3, #1
 8005718:	d115      	bne.n	8005746 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800571a:	4b2a      	ldr	r3, [pc, #168]	; (80057c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800571c:	695a      	ldr	r2, [r3, #20]
 800571e:	4b2b      	ldr	r3, [pc, #172]	; (80057cc <RCCEx_PLLSAI2_Config+0x1e0>)
 8005720:	4013      	ands	r3, r2
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	6892      	ldr	r2, [r2, #8]
 8005726:	0211      	lsls	r1, r2, #8
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	6912      	ldr	r2, [r2, #16]
 800572c:	0852      	lsrs	r2, r2, #1
 800572e:	3a01      	subs	r2, #1
 8005730:	0552      	lsls	r2, r2, #21
 8005732:	4311      	orrs	r1, r2
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	6852      	ldr	r2, [r2, #4]
 8005738:	3a01      	subs	r2, #1
 800573a:	0112      	lsls	r2, r2, #4
 800573c:	430a      	orrs	r2, r1
 800573e:	4921      	ldr	r1, [pc, #132]	; (80057c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005740:	4313      	orrs	r3, r2
 8005742:	614b      	str	r3, [r1, #20]
 8005744:	e014      	b.n	8005770 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005746:	4b1f      	ldr	r3, [pc, #124]	; (80057c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005748:	695a      	ldr	r2, [r3, #20]
 800574a:	4b21      	ldr	r3, [pc, #132]	; (80057d0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800574c:	4013      	ands	r3, r2
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	6892      	ldr	r2, [r2, #8]
 8005752:	0211      	lsls	r1, r2, #8
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	6952      	ldr	r2, [r2, #20]
 8005758:	0852      	lsrs	r2, r2, #1
 800575a:	3a01      	subs	r2, #1
 800575c:	0652      	lsls	r2, r2, #25
 800575e:	4311      	orrs	r1, r2
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	6852      	ldr	r2, [r2, #4]
 8005764:	3a01      	subs	r2, #1
 8005766:	0112      	lsls	r2, r2, #4
 8005768:	430a      	orrs	r2, r1
 800576a:	4916      	ldr	r1, [pc, #88]	; (80057c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800576c:	4313      	orrs	r3, r2
 800576e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005770:	4b14      	ldr	r3, [pc, #80]	; (80057c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a13      	ldr	r2, [pc, #76]	; (80057c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800577a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800577c:	f7fc fa5a 	bl	8001c34 <HAL_GetTick>
 8005780:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005782:	e009      	b.n	8005798 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005784:	f7fc fa56 	bl	8001c34 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b02      	cmp	r3, #2
 8005790:	d902      	bls.n	8005798 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	73fb      	strb	r3, [r7, #15]
          break;
 8005796:	e005      	b.n	80057a4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005798:	4b0a      	ldr	r3, [pc, #40]	; (80057c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d0ef      	beq.n	8005784 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80057a4:	7bfb      	ldrb	r3, [r7, #15]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d106      	bne.n	80057b8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80057aa:	4b06      	ldr	r3, [pc, #24]	; (80057c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057ac:	695a      	ldr	r2, [r3, #20]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	4904      	ldr	r1, [pc, #16]	; (80057c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80057b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	40021000 	.word	0x40021000
 80057c8:	07ff800f 	.word	0x07ff800f
 80057cc:	ff9f800f 	.word	0xff9f800f
 80057d0:	f9ff800f 	.word	0xf9ff800f

080057d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e095      	b.n	8005912 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d108      	bne.n	8005800 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057f6:	d009      	beq.n	800580c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	61da      	str	r2, [r3, #28]
 80057fe:	e005      	b.n	800580c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d106      	bne.n	800582c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f7fb ff34 	bl	8001694 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2202      	movs	r2, #2
 8005830:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005842:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800584c:	d902      	bls.n	8005854 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800584e:	2300      	movs	r3, #0
 8005850:	60fb      	str	r3, [r7, #12]
 8005852:	e002      	b.n	800585a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005858:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005862:	d007      	beq.n	8005874 <HAL_SPI_Init+0xa0>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800586c:	d002      	beq.n	8005874 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005884:	431a      	orrs	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	f003 0302 	and.w	r3, r3, #2
 800588e:	431a      	orrs	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	431a      	orrs	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058a2:	431a      	orrs	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	69db      	ldr	r3, [r3, #28]
 80058a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058ac:	431a      	orrs	r2, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b6:	ea42 0103 	orr.w	r1, r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058be:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	430a      	orrs	r2, r1
 80058c8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	0c1b      	lsrs	r3, r3, #16
 80058d0:	f003 0204 	and.w	r2, r3, #4
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d8:	f003 0310 	and.w	r3, r3, #16
 80058dc:	431a      	orrs	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058e2:	f003 0308 	and.w	r3, r3, #8
 80058e6:	431a      	orrs	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80058f0:	ea42 0103 	orr.w	r1, r2, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	430a      	orrs	r2, r1
 8005900:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3710      	adds	r7, #16
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800591a:	b580      	push	{r7, lr}
 800591c:	b082      	sub	sp, #8
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d101      	bne.n	800592c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e049      	b.n	80059c0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005932:	b2db      	uxtb	r3, r3
 8005934:	2b00      	cmp	r3, #0
 8005936:	d106      	bne.n	8005946 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 f841 	bl	80059c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2202      	movs	r2, #2
 800594a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	3304      	adds	r3, #4
 8005956:	4619      	mov	r1, r3
 8005958:	4610      	mov	r0, r2
 800595a:	f000 f9d9 	bl	8005d10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3708      	adds	r7, #8
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d001      	beq.n	80059f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e04f      	b.n	8005a94 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2202      	movs	r2, #2
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68da      	ldr	r2, [r3, #12]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f042 0201 	orr.w	r2, r2, #1
 8005a0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a23      	ldr	r2, [pc, #140]	; (8005aa0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d01d      	beq.n	8005a52 <HAL_TIM_Base_Start_IT+0x76>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a1e:	d018      	beq.n	8005a52 <HAL_TIM_Base_Start_IT+0x76>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a1f      	ldr	r2, [pc, #124]	; (8005aa4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d013      	beq.n	8005a52 <HAL_TIM_Base_Start_IT+0x76>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a1e      	ldr	r2, [pc, #120]	; (8005aa8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d00e      	beq.n	8005a52 <HAL_TIM_Base_Start_IT+0x76>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a1c      	ldr	r2, [pc, #112]	; (8005aac <HAL_TIM_Base_Start_IT+0xd0>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d009      	beq.n	8005a52 <HAL_TIM_Base_Start_IT+0x76>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a1b      	ldr	r2, [pc, #108]	; (8005ab0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d004      	beq.n	8005a52 <HAL_TIM_Base_Start_IT+0x76>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a19      	ldr	r2, [pc, #100]	; (8005ab4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d115      	bne.n	8005a7e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689a      	ldr	r2, [r3, #8]
 8005a58:	4b17      	ldr	r3, [pc, #92]	; (8005ab8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2b06      	cmp	r3, #6
 8005a62:	d015      	beq.n	8005a90 <HAL_TIM_Base_Start_IT+0xb4>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a6a:	d011      	beq.n	8005a90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f042 0201 	orr.w	r2, r2, #1
 8005a7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a7c:	e008      	b.n	8005a90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f042 0201 	orr.w	r2, r2, #1
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	e000      	b.n	8005a92 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a90:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3714      	adds	r7, #20
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr
 8005aa0:	40012c00 	.word	0x40012c00
 8005aa4:	40000400 	.word	0x40000400
 8005aa8:	40000800 	.word	0x40000800
 8005aac:	40000c00 	.word	0x40000c00
 8005ab0:	40013400 	.word	0x40013400
 8005ab4:	40014000 	.word	0x40014000
 8005ab8:	00010007 	.word	0x00010007

08005abc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d020      	beq.n	8005b20 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f003 0302 	and.w	r3, r3, #2
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d01b      	beq.n	8005b20 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f06f 0202 	mvn.w	r2, #2
 8005af0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2201      	movs	r2, #1
 8005af6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	f003 0303 	and.w	r3, r3, #3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d003      	beq.n	8005b0e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 f8e4 	bl	8005cd4 <HAL_TIM_IC_CaptureCallback>
 8005b0c:	e005      	b.n	8005b1a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 f8d6 	bl	8005cc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 f8e7 	bl	8005ce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	f003 0304 	and.w	r3, r3, #4
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d020      	beq.n	8005b6c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f003 0304 	and.w	r3, r3, #4
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d01b      	beq.n	8005b6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f06f 0204 	mvn.w	r2, #4
 8005b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2202      	movs	r2, #2
 8005b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f8be 	bl	8005cd4 <HAL_TIM_IC_CaptureCallback>
 8005b58:	e005      	b.n	8005b66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f8b0 	bl	8005cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 f8c1 	bl	8005ce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	f003 0308 	and.w	r3, r3, #8
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d020      	beq.n	8005bb8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f003 0308 	and.w	r3, r3, #8
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d01b      	beq.n	8005bb8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f06f 0208 	mvn.w	r2, #8
 8005b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2204      	movs	r2, #4
 8005b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	f003 0303 	and.w	r3, r3, #3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d003      	beq.n	8005ba6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f898 	bl	8005cd4 <HAL_TIM_IC_CaptureCallback>
 8005ba4:	e005      	b.n	8005bb2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 f88a 	bl	8005cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 f89b 	bl	8005ce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	f003 0310 	and.w	r3, r3, #16
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d020      	beq.n	8005c04 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f003 0310 	and.w	r3, r3, #16
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d01b      	beq.n	8005c04 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f06f 0210 	mvn.w	r2, #16
 8005bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2208      	movs	r2, #8
 8005bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	69db      	ldr	r3, [r3, #28]
 8005be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d003      	beq.n	8005bf2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 f872 	bl	8005cd4 <HAL_TIM_IC_CaptureCallback>
 8005bf0:	e005      	b.n	8005bfe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 f864 	bl	8005cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 f875 	bl	8005ce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00c      	beq.n	8005c28 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d007      	beq.n	8005c28 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f06f 0201 	mvn.w	r2, #1
 8005c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7fb fb48 	bl	80012b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00c      	beq.n	8005c4c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d007      	beq.n	8005c4c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f906 	bl	8005e58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d00c      	beq.n	8005c70 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d007      	beq.n	8005c70 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 f8fe 	bl	8005e6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00c      	beq.n	8005c94 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d007      	beq.n	8005c94 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 f834 	bl	8005cfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	f003 0320 	and.w	r3, r3, #32
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00c      	beq.n	8005cb8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f003 0320 	and.w	r3, r3, #32
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d007      	beq.n	8005cb8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f06f 0220 	mvn.w	r2, #32
 8005cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f8c6 	bl	8005e44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cb8:	bf00      	nop
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cc8:	bf00      	nop
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cdc:	bf00      	nop
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d04:	bf00      	nop
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a40      	ldr	r2, [pc, #256]	; (8005e24 <TIM_Base_SetConfig+0x114>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d013      	beq.n	8005d50 <TIM_Base_SetConfig+0x40>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d2e:	d00f      	beq.n	8005d50 <TIM_Base_SetConfig+0x40>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a3d      	ldr	r2, [pc, #244]	; (8005e28 <TIM_Base_SetConfig+0x118>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d00b      	beq.n	8005d50 <TIM_Base_SetConfig+0x40>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a3c      	ldr	r2, [pc, #240]	; (8005e2c <TIM_Base_SetConfig+0x11c>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d007      	beq.n	8005d50 <TIM_Base_SetConfig+0x40>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a3b      	ldr	r2, [pc, #236]	; (8005e30 <TIM_Base_SetConfig+0x120>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d003      	beq.n	8005d50 <TIM_Base_SetConfig+0x40>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a3a      	ldr	r2, [pc, #232]	; (8005e34 <TIM_Base_SetConfig+0x124>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d108      	bne.n	8005d62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a2f      	ldr	r2, [pc, #188]	; (8005e24 <TIM_Base_SetConfig+0x114>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d01f      	beq.n	8005daa <TIM_Base_SetConfig+0x9a>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d70:	d01b      	beq.n	8005daa <TIM_Base_SetConfig+0x9a>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a2c      	ldr	r2, [pc, #176]	; (8005e28 <TIM_Base_SetConfig+0x118>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d017      	beq.n	8005daa <TIM_Base_SetConfig+0x9a>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a2b      	ldr	r2, [pc, #172]	; (8005e2c <TIM_Base_SetConfig+0x11c>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d013      	beq.n	8005daa <TIM_Base_SetConfig+0x9a>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a2a      	ldr	r2, [pc, #168]	; (8005e30 <TIM_Base_SetConfig+0x120>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d00f      	beq.n	8005daa <TIM_Base_SetConfig+0x9a>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a29      	ldr	r2, [pc, #164]	; (8005e34 <TIM_Base_SetConfig+0x124>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d00b      	beq.n	8005daa <TIM_Base_SetConfig+0x9a>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a28      	ldr	r2, [pc, #160]	; (8005e38 <TIM_Base_SetConfig+0x128>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d007      	beq.n	8005daa <TIM_Base_SetConfig+0x9a>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a27      	ldr	r2, [pc, #156]	; (8005e3c <TIM_Base_SetConfig+0x12c>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d003      	beq.n	8005daa <TIM_Base_SetConfig+0x9a>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a26      	ldr	r2, [pc, #152]	; (8005e40 <TIM_Base_SetConfig+0x130>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d108      	bne.n	8005dbc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005db0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	689a      	ldr	r2, [r3, #8]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a10      	ldr	r2, [pc, #64]	; (8005e24 <TIM_Base_SetConfig+0x114>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d00f      	beq.n	8005e08 <TIM_Base_SetConfig+0xf8>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a12      	ldr	r2, [pc, #72]	; (8005e34 <TIM_Base_SetConfig+0x124>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d00b      	beq.n	8005e08 <TIM_Base_SetConfig+0xf8>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a11      	ldr	r2, [pc, #68]	; (8005e38 <TIM_Base_SetConfig+0x128>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d007      	beq.n	8005e08 <TIM_Base_SetConfig+0xf8>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a10      	ldr	r2, [pc, #64]	; (8005e3c <TIM_Base_SetConfig+0x12c>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d003      	beq.n	8005e08 <TIM_Base_SetConfig+0xf8>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a0f      	ldr	r2, [pc, #60]	; (8005e40 <TIM_Base_SetConfig+0x130>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d103      	bne.n	8005e10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	691a      	ldr	r2, [r3, #16]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	615a      	str	r2, [r3, #20]
}
 8005e16:	bf00      	nop
 8005e18:	3714      	adds	r7, #20
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	40012c00 	.word	0x40012c00
 8005e28:	40000400 	.word	0x40000400
 8005e2c:	40000800 	.word	0x40000800
 8005e30:	40000c00 	.word	0x40000c00
 8005e34:	40013400 	.word	0x40013400
 8005e38:	40014000 	.word	0x40014000
 8005e3c:	40014400 	.word	0x40014400
 8005e40:	40014800 	.word	0x40014800

08005e44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e042      	b.n	8005f18 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d106      	bne.n	8005eaa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f7fb fc6b 	bl	8001780 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2224      	movs	r2, #36	; 0x24
 8005eae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f022 0201 	bic.w	r2, r2, #1
 8005ec0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d002      	beq.n	8005ed0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 fb24 	bl	8006518 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 f825 	bl	8005f20 <UART_SetConfig>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d101      	bne.n	8005ee0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e01b      	b.n	8005f18 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	685a      	ldr	r2, [r3, #4]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005eee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	689a      	ldr	r2, [r3, #8]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005efe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f042 0201 	orr.w	r2, r2, #1
 8005f0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fba3 	bl	800665c <UART_CheckIdleState>
 8005f16:	4603      	mov	r3, r0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3708      	adds	r7, #8
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f24:	b08c      	sub	sp, #48	; 0x30
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	689a      	ldr	r2, [r3, #8]
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	431a      	orrs	r2, r3
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	431a      	orrs	r2, r3
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	69db      	ldr	r3, [r3, #28]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	4baa      	ldr	r3, [pc, #680]	; (80061f8 <UART_SetConfig+0x2d8>)
 8005f50:	4013      	ands	r3, r2
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	6812      	ldr	r2, [r2, #0]
 8005f56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f58:	430b      	orrs	r3, r1
 8005f5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	68da      	ldr	r2, [r3, #12]
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a9f      	ldr	r2, [pc, #636]	; (80061fc <UART_SetConfig+0x2dc>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d004      	beq.n	8005f8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005f96:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005f9a:	697a      	ldr	r2, [r7, #20]
 8005f9c:	6812      	ldr	r2, [r2, #0]
 8005f9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fa0:	430b      	orrs	r3, r1
 8005fa2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005faa:	f023 010f 	bic.w	r1, r3, #15
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a90      	ldr	r2, [pc, #576]	; (8006200 <UART_SetConfig+0x2e0>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d125      	bne.n	8006010 <UART_SetConfig+0xf0>
 8005fc4:	4b8f      	ldr	r3, [pc, #572]	; (8006204 <UART_SetConfig+0x2e4>)
 8005fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fca:	f003 0303 	and.w	r3, r3, #3
 8005fce:	2b03      	cmp	r3, #3
 8005fd0:	d81a      	bhi.n	8006008 <UART_SetConfig+0xe8>
 8005fd2:	a201      	add	r2, pc, #4	; (adr r2, 8005fd8 <UART_SetConfig+0xb8>)
 8005fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd8:	08005fe9 	.word	0x08005fe9
 8005fdc:	08005ff9 	.word	0x08005ff9
 8005fe0:	08005ff1 	.word	0x08005ff1
 8005fe4:	08006001 	.word	0x08006001
 8005fe8:	2301      	movs	r3, #1
 8005fea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fee:	e116      	b.n	800621e <UART_SetConfig+0x2fe>
 8005ff0:	2302      	movs	r3, #2
 8005ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ff6:	e112      	b.n	800621e <UART_SetConfig+0x2fe>
 8005ff8:	2304      	movs	r3, #4
 8005ffa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ffe:	e10e      	b.n	800621e <UART_SetConfig+0x2fe>
 8006000:	2308      	movs	r3, #8
 8006002:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006006:	e10a      	b.n	800621e <UART_SetConfig+0x2fe>
 8006008:	2310      	movs	r3, #16
 800600a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800600e:	e106      	b.n	800621e <UART_SetConfig+0x2fe>
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a7c      	ldr	r2, [pc, #496]	; (8006208 <UART_SetConfig+0x2e8>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d138      	bne.n	800608c <UART_SetConfig+0x16c>
 800601a:	4b7a      	ldr	r3, [pc, #488]	; (8006204 <UART_SetConfig+0x2e4>)
 800601c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006020:	f003 030c 	and.w	r3, r3, #12
 8006024:	2b0c      	cmp	r3, #12
 8006026:	d82d      	bhi.n	8006084 <UART_SetConfig+0x164>
 8006028:	a201      	add	r2, pc, #4	; (adr r2, 8006030 <UART_SetConfig+0x110>)
 800602a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800602e:	bf00      	nop
 8006030:	08006065 	.word	0x08006065
 8006034:	08006085 	.word	0x08006085
 8006038:	08006085 	.word	0x08006085
 800603c:	08006085 	.word	0x08006085
 8006040:	08006075 	.word	0x08006075
 8006044:	08006085 	.word	0x08006085
 8006048:	08006085 	.word	0x08006085
 800604c:	08006085 	.word	0x08006085
 8006050:	0800606d 	.word	0x0800606d
 8006054:	08006085 	.word	0x08006085
 8006058:	08006085 	.word	0x08006085
 800605c:	08006085 	.word	0x08006085
 8006060:	0800607d 	.word	0x0800607d
 8006064:	2300      	movs	r3, #0
 8006066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800606a:	e0d8      	b.n	800621e <UART_SetConfig+0x2fe>
 800606c:	2302      	movs	r3, #2
 800606e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006072:	e0d4      	b.n	800621e <UART_SetConfig+0x2fe>
 8006074:	2304      	movs	r3, #4
 8006076:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800607a:	e0d0      	b.n	800621e <UART_SetConfig+0x2fe>
 800607c:	2308      	movs	r3, #8
 800607e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006082:	e0cc      	b.n	800621e <UART_SetConfig+0x2fe>
 8006084:	2310      	movs	r3, #16
 8006086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800608a:	e0c8      	b.n	800621e <UART_SetConfig+0x2fe>
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a5e      	ldr	r2, [pc, #376]	; (800620c <UART_SetConfig+0x2ec>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d125      	bne.n	80060e2 <UART_SetConfig+0x1c2>
 8006096:	4b5b      	ldr	r3, [pc, #364]	; (8006204 <UART_SetConfig+0x2e4>)
 8006098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800609c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80060a0:	2b30      	cmp	r3, #48	; 0x30
 80060a2:	d016      	beq.n	80060d2 <UART_SetConfig+0x1b2>
 80060a4:	2b30      	cmp	r3, #48	; 0x30
 80060a6:	d818      	bhi.n	80060da <UART_SetConfig+0x1ba>
 80060a8:	2b20      	cmp	r3, #32
 80060aa:	d00a      	beq.n	80060c2 <UART_SetConfig+0x1a2>
 80060ac:	2b20      	cmp	r3, #32
 80060ae:	d814      	bhi.n	80060da <UART_SetConfig+0x1ba>
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d002      	beq.n	80060ba <UART_SetConfig+0x19a>
 80060b4:	2b10      	cmp	r3, #16
 80060b6:	d008      	beq.n	80060ca <UART_SetConfig+0x1aa>
 80060b8:	e00f      	b.n	80060da <UART_SetConfig+0x1ba>
 80060ba:	2300      	movs	r3, #0
 80060bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060c0:	e0ad      	b.n	800621e <UART_SetConfig+0x2fe>
 80060c2:	2302      	movs	r3, #2
 80060c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060c8:	e0a9      	b.n	800621e <UART_SetConfig+0x2fe>
 80060ca:	2304      	movs	r3, #4
 80060cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060d0:	e0a5      	b.n	800621e <UART_SetConfig+0x2fe>
 80060d2:	2308      	movs	r3, #8
 80060d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060d8:	e0a1      	b.n	800621e <UART_SetConfig+0x2fe>
 80060da:	2310      	movs	r3, #16
 80060dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060e0:	e09d      	b.n	800621e <UART_SetConfig+0x2fe>
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a4a      	ldr	r2, [pc, #296]	; (8006210 <UART_SetConfig+0x2f0>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d125      	bne.n	8006138 <UART_SetConfig+0x218>
 80060ec:	4b45      	ldr	r3, [pc, #276]	; (8006204 <UART_SetConfig+0x2e4>)
 80060ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80060f6:	2bc0      	cmp	r3, #192	; 0xc0
 80060f8:	d016      	beq.n	8006128 <UART_SetConfig+0x208>
 80060fa:	2bc0      	cmp	r3, #192	; 0xc0
 80060fc:	d818      	bhi.n	8006130 <UART_SetConfig+0x210>
 80060fe:	2b80      	cmp	r3, #128	; 0x80
 8006100:	d00a      	beq.n	8006118 <UART_SetConfig+0x1f8>
 8006102:	2b80      	cmp	r3, #128	; 0x80
 8006104:	d814      	bhi.n	8006130 <UART_SetConfig+0x210>
 8006106:	2b00      	cmp	r3, #0
 8006108:	d002      	beq.n	8006110 <UART_SetConfig+0x1f0>
 800610a:	2b40      	cmp	r3, #64	; 0x40
 800610c:	d008      	beq.n	8006120 <UART_SetConfig+0x200>
 800610e:	e00f      	b.n	8006130 <UART_SetConfig+0x210>
 8006110:	2300      	movs	r3, #0
 8006112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006116:	e082      	b.n	800621e <UART_SetConfig+0x2fe>
 8006118:	2302      	movs	r3, #2
 800611a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800611e:	e07e      	b.n	800621e <UART_SetConfig+0x2fe>
 8006120:	2304      	movs	r3, #4
 8006122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006126:	e07a      	b.n	800621e <UART_SetConfig+0x2fe>
 8006128:	2308      	movs	r3, #8
 800612a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800612e:	e076      	b.n	800621e <UART_SetConfig+0x2fe>
 8006130:	2310      	movs	r3, #16
 8006132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006136:	e072      	b.n	800621e <UART_SetConfig+0x2fe>
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a35      	ldr	r2, [pc, #212]	; (8006214 <UART_SetConfig+0x2f4>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d12a      	bne.n	8006198 <UART_SetConfig+0x278>
 8006142:	4b30      	ldr	r3, [pc, #192]	; (8006204 <UART_SetConfig+0x2e4>)
 8006144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006148:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800614c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006150:	d01a      	beq.n	8006188 <UART_SetConfig+0x268>
 8006152:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006156:	d81b      	bhi.n	8006190 <UART_SetConfig+0x270>
 8006158:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800615c:	d00c      	beq.n	8006178 <UART_SetConfig+0x258>
 800615e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006162:	d815      	bhi.n	8006190 <UART_SetConfig+0x270>
 8006164:	2b00      	cmp	r3, #0
 8006166:	d003      	beq.n	8006170 <UART_SetConfig+0x250>
 8006168:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800616c:	d008      	beq.n	8006180 <UART_SetConfig+0x260>
 800616e:	e00f      	b.n	8006190 <UART_SetConfig+0x270>
 8006170:	2300      	movs	r3, #0
 8006172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006176:	e052      	b.n	800621e <UART_SetConfig+0x2fe>
 8006178:	2302      	movs	r3, #2
 800617a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800617e:	e04e      	b.n	800621e <UART_SetConfig+0x2fe>
 8006180:	2304      	movs	r3, #4
 8006182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006186:	e04a      	b.n	800621e <UART_SetConfig+0x2fe>
 8006188:	2308      	movs	r3, #8
 800618a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800618e:	e046      	b.n	800621e <UART_SetConfig+0x2fe>
 8006190:	2310      	movs	r3, #16
 8006192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006196:	e042      	b.n	800621e <UART_SetConfig+0x2fe>
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a17      	ldr	r2, [pc, #92]	; (80061fc <UART_SetConfig+0x2dc>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d13a      	bne.n	8006218 <UART_SetConfig+0x2f8>
 80061a2:	4b18      	ldr	r3, [pc, #96]	; (8006204 <UART_SetConfig+0x2e4>)
 80061a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80061ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061b0:	d01a      	beq.n	80061e8 <UART_SetConfig+0x2c8>
 80061b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061b6:	d81b      	bhi.n	80061f0 <UART_SetConfig+0x2d0>
 80061b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061bc:	d00c      	beq.n	80061d8 <UART_SetConfig+0x2b8>
 80061be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061c2:	d815      	bhi.n	80061f0 <UART_SetConfig+0x2d0>
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d003      	beq.n	80061d0 <UART_SetConfig+0x2b0>
 80061c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061cc:	d008      	beq.n	80061e0 <UART_SetConfig+0x2c0>
 80061ce:	e00f      	b.n	80061f0 <UART_SetConfig+0x2d0>
 80061d0:	2300      	movs	r3, #0
 80061d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061d6:	e022      	b.n	800621e <UART_SetConfig+0x2fe>
 80061d8:	2302      	movs	r3, #2
 80061da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061de:	e01e      	b.n	800621e <UART_SetConfig+0x2fe>
 80061e0:	2304      	movs	r3, #4
 80061e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061e6:	e01a      	b.n	800621e <UART_SetConfig+0x2fe>
 80061e8:	2308      	movs	r3, #8
 80061ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061ee:	e016      	b.n	800621e <UART_SetConfig+0x2fe>
 80061f0:	2310      	movs	r3, #16
 80061f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061f6:	e012      	b.n	800621e <UART_SetConfig+0x2fe>
 80061f8:	cfff69f3 	.word	0xcfff69f3
 80061fc:	40008000 	.word	0x40008000
 8006200:	40013800 	.word	0x40013800
 8006204:	40021000 	.word	0x40021000
 8006208:	40004400 	.word	0x40004400
 800620c:	40004800 	.word	0x40004800
 8006210:	40004c00 	.word	0x40004c00
 8006214:	40005000 	.word	0x40005000
 8006218:	2310      	movs	r3, #16
 800621a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4aae      	ldr	r2, [pc, #696]	; (80064dc <UART_SetConfig+0x5bc>)
 8006224:	4293      	cmp	r3, r2
 8006226:	f040 8097 	bne.w	8006358 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800622a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800622e:	2b08      	cmp	r3, #8
 8006230:	d823      	bhi.n	800627a <UART_SetConfig+0x35a>
 8006232:	a201      	add	r2, pc, #4	; (adr r2, 8006238 <UART_SetConfig+0x318>)
 8006234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006238:	0800625d 	.word	0x0800625d
 800623c:	0800627b 	.word	0x0800627b
 8006240:	08006265 	.word	0x08006265
 8006244:	0800627b 	.word	0x0800627b
 8006248:	0800626b 	.word	0x0800626b
 800624c:	0800627b 	.word	0x0800627b
 8006250:	0800627b 	.word	0x0800627b
 8006254:	0800627b 	.word	0x0800627b
 8006258:	08006273 	.word	0x08006273
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800625c:	f7fe fc74 	bl	8004b48 <HAL_RCC_GetPCLK1Freq>
 8006260:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006262:	e010      	b.n	8006286 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006264:	4b9e      	ldr	r3, [pc, #632]	; (80064e0 <UART_SetConfig+0x5c0>)
 8006266:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006268:	e00d      	b.n	8006286 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800626a:	f7fe fbd5 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 800626e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006270:	e009      	b.n	8006286 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006276:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006278:	e005      	b.n	8006286 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800627a:	2300      	movs	r3, #0
 800627c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006284:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006288:	2b00      	cmp	r3, #0
 800628a:	f000 8130 	beq.w	80064ee <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006292:	4a94      	ldr	r2, [pc, #592]	; (80064e4 <UART_SetConfig+0x5c4>)
 8006294:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006298:	461a      	mov	r2, r3
 800629a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629c:	fbb3 f3f2 	udiv	r3, r3, r2
 80062a0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	685a      	ldr	r2, [r3, #4]
 80062a6:	4613      	mov	r3, r2
 80062a8:	005b      	lsls	r3, r3, #1
 80062aa:	4413      	add	r3, r2
 80062ac:	69ba      	ldr	r2, [r7, #24]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d305      	bcc.n	80062be <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062b8:	69ba      	ldr	r2, [r7, #24]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d903      	bls.n	80062c6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80062c4:	e113      	b.n	80064ee <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	2200      	movs	r2, #0
 80062ca:	60bb      	str	r3, [r7, #8]
 80062cc:	60fa      	str	r2, [r7, #12]
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d2:	4a84      	ldr	r2, [pc, #528]	; (80064e4 <UART_SetConfig+0x5c4>)
 80062d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062d8:	b29b      	uxth	r3, r3
 80062da:	2200      	movs	r2, #0
 80062dc:	603b      	str	r3, [r7, #0]
 80062de:	607a      	str	r2, [r7, #4]
 80062e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80062e8:	f7f9 ff8a 	bl	8000200 <__aeabi_uldivmod>
 80062ec:	4602      	mov	r2, r0
 80062ee:	460b      	mov	r3, r1
 80062f0:	4610      	mov	r0, r2
 80062f2:	4619      	mov	r1, r3
 80062f4:	f04f 0200 	mov.w	r2, #0
 80062f8:	f04f 0300 	mov.w	r3, #0
 80062fc:	020b      	lsls	r3, r1, #8
 80062fe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006302:	0202      	lsls	r2, r0, #8
 8006304:	6979      	ldr	r1, [r7, #20]
 8006306:	6849      	ldr	r1, [r1, #4]
 8006308:	0849      	lsrs	r1, r1, #1
 800630a:	2000      	movs	r0, #0
 800630c:	460c      	mov	r4, r1
 800630e:	4605      	mov	r5, r0
 8006310:	eb12 0804 	adds.w	r8, r2, r4
 8006314:	eb43 0905 	adc.w	r9, r3, r5
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	469a      	mov	sl, r3
 8006320:	4693      	mov	fp, r2
 8006322:	4652      	mov	r2, sl
 8006324:	465b      	mov	r3, fp
 8006326:	4640      	mov	r0, r8
 8006328:	4649      	mov	r1, r9
 800632a:	f7f9 ff69 	bl	8000200 <__aeabi_uldivmod>
 800632e:	4602      	mov	r2, r0
 8006330:	460b      	mov	r3, r1
 8006332:	4613      	mov	r3, r2
 8006334:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006336:	6a3b      	ldr	r3, [r7, #32]
 8006338:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800633c:	d308      	bcc.n	8006350 <UART_SetConfig+0x430>
 800633e:	6a3b      	ldr	r3, [r7, #32]
 8006340:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006344:	d204      	bcs.n	8006350 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	6a3a      	ldr	r2, [r7, #32]
 800634c:	60da      	str	r2, [r3, #12]
 800634e:	e0ce      	b.n	80064ee <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006356:	e0ca      	b.n	80064ee <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	69db      	ldr	r3, [r3, #28]
 800635c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006360:	d166      	bne.n	8006430 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006362:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006366:	2b08      	cmp	r3, #8
 8006368:	d827      	bhi.n	80063ba <UART_SetConfig+0x49a>
 800636a:	a201      	add	r2, pc, #4	; (adr r2, 8006370 <UART_SetConfig+0x450>)
 800636c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006370:	08006395 	.word	0x08006395
 8006374:	0800639d 	.word	0x0800639d
 8006378:	080063a5 	.word	0x080063a5
 800637c:	080063bb 	.word	0x080063bb
 8006380:	080063ab 	.word	0x080063ab
 8006384:	080063bb 	.word	0x080063bb
 8006388:	080063bb 	.word	0x080063bb
 800638c:	080063bb 	.word	0x080063bb
 8006390:	080063b3 	.word	0x080063b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006394:	f7fe fbd8 	bl	8004b48 <HAL_RCC_GetPCLK1Freq>
 8006398:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800639a:	e014      	b.n	80063c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800639c:	f7fe fbea 	bl	8004b74 <HAL_RCC_GetPCLK2Freq>
 80063a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80063a2:	e010      	b.n	80063c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063a4:	4b4e      	ldr	r3, [pc, #312]	; (80064e0 <UART_SetConfig+0x5c0>)
 80063a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80063a8:	e00d      	b.n	80063c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063aa:	f7fe fb35 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 80063ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80063b0:	e009      	b.n	80063c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80063b8:	e005      	b.n	80063c6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80063ba:	2300      	movs	r3, #0
 80063bc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80063c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f000 8090 	beq.w	80064ee <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d2:	4a44      	ldr	r2, [pc, #272]	; (80064e4 <UART_SetConfig+0x5c4>)
 80063d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063d8:	461a      	mov	r2, r3
 80063da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80063e0:	005a      	lsls	r2, r3, #1
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	085b      	lsrs	r3, r3, #1
 80063e8:	441a      	add	r2, r3
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	2b0f      	cmp	r3, #15
 80063f8:	d916      	bls.n	8006428 <UART_SetConfig+0x508>
 80063fa:	6a3b      	ldr	r3, [r7, #32]
 80063fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006400:	d212      	bcs.n	8006428 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006402:	6a3b      	ldr	r3, [r7, #32]
 8006404:	b29b      	uxth	r3, r3
 8006406:	f023 030f 	bic.w	r3, r3, #15
 800640a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800640c:	6a3b      	ldr	r3, [r7, #32]
 800640e:	085b      	lsrs	r3, r3, #1
 8006410:	b29b      	uxth	r3, r3
 8006412:	f003 0307 	and.w	r3, r3, #7
 8006416:	b29a      	uxth	r2, r3
 8006418:	8bfb      	ldrh	r3, [r7, #30]
 800641a:	4313      	orrs	r3, r2
 800641c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	8bfa      	ldrh	r2, [r7, #30]
 8006424:	60da      	str	r2, [r3, #12]
 8006426:	e062      	b.n	80064ee <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800642e:	e05e      	b.n	80064ee <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006430:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006434:	2b08      	cmp	r3, #8
 8006436:	d828      	bhi.n	800648a <UART_SetConfig+0x56a>
 8006438:	a201      	add	r2, pc, #4	; (adr r2, 8006440 <UART_SetConfig+0x520>)
 800643a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800643e:	bf00      	nop
 8006440:	08006465 	.word	0x08006465
 8006444:	0800646d 	.word	0x0800646d
 8006448:	08006475 	.word	0x08006475
 800644c:	0800648b 	.word	0x0800648b
 8006450:	0800647b 	.word	0x0800647b
 8006454:	0800648b 	.word	0x0800648b
 8006458:	0800648b 	.word	0x0800648b
 800645c:	0800648b 	.word	0x0800648b
 8006460:	08006483 	.word	0x08006483
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006464:	f7fe fb70 	bl	8004b48 <HAL_RCC_GetPCLK1Freq>
 8006468:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800646a:	e014      	b.n	8006496 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800646c:	f7fe fb82 	bl	8004b74 <HAL_RCC_GetPCLK2Freq>
 8006470:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006472:	e010      	b.n	8006496 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006474:	4b1a      	ldr	r3, [pc, #104]	; (80064e0 <UART_SetConfig+0x5c0>)
 8006476:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006478:	e00d      	b.n	8006496 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800647a:	f7fe facd 	bl	8004a18 <HAL_RCC_GetSysClockFreq>
 800647e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006480:	e009      	b.n	8006496 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006482:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006486:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006488:	e005      	b.n	8006496 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800648a:	2300      	movs	r3, #0
 800648c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006494:	bf00      	nop
    }

    if (pclk != 0U)
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	2b00      	cmp	r3, #0
 800649a:	d028      	beq.n	80064ee <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a0:	4a10      	ldr	r2, [pc, #64]	; (80064e4 <UART_SetConfig+0x5c4>)
 80064a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064a6:	461a      	mov	r2, r3
 80064a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	085b      	lsrs	r3, r3, #1
 80064b4:	441a      	add	r2, r3
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80064be:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064c0:	6a3b      	ldr	r3, [r7, #32]
 80064c2:	2b0f      	cmp	r3, #15
 80064c4:	d910      	bls.n	80064e8 <UART_SetConfig+0x5c8>
 80064c6:	6a3b      	ldr	r3, [r7, #32]
 80064c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064cc:	d20c      	bcs.n	80064e8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80064ce:	6a3b      	ldr	r3, [r7, #32]
 80064d0:	b29a      	uxth	r2, r3
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	60da      	str	r2, [r3, #12]
 80064d8:	e009      	b.n	80064ee <UART_SetConfig+0x5ce>
 80064da:	bf00      	nop
 80064dc:	40008000 	.word	0x40008000
 80064e0:	00f42400 	.word	0x00f42400
 80064e4:	08006c08 	.word	0x08006c08
      }
      else
      {
        ret = HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	2201      	movs	r2, #1
 80064f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	2201      	movs	r2, #1
 80064fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	2200      	movs	r2, #0
 8006502:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	2200      	movs	r2, #0
 8006508:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800650a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800650e:	4618      	mov	r0, r3
 8006510:	3730      	adds	r7, #48	; 0x30
 8006512:	46bd      	mov	sp, r7
 8006514:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006518 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006524:	f003 0308 	and.w	r3, r3, #8
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00a      	beq.n	8006542 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	430a      	orrs	r2, r1
 8006540:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006546:	f003 0301 	and.w	r3, r3, #1
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00a      	beq.n	8006564 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	430a      	orrs	r2, r1
 8006562:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006568:	f003 0302 	and.w	r3, r3, #2
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00a      	beq.n	8006586 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	430a      	orrs	r2, r1
 8006584:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800658a:	f003 0304 	and.w	r3, r3, #4
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00a      	beq.n	80065a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	430a      	orrs	r2, r1
 80065a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ac:	f003 0310 	and.w	r3, r3, #16
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00a      	beq.n	80065ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ce:	f003 0320 	and.w	r3, r3, #32
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00a      	beq.n	80065ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	430a      	orrs	r2, r1
 80065ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d01a      	beq.n	800662e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	430a      	orrs	r2, r1
 800660c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006612:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006616:	d10a      	bne.n	800662e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	430a      	orrs	r2, r1
 800662c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00a      	beq.n	8006650 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	430a      	orrs	r2, r1
 800664e:	605a      	str	r2, [r3, #4]
  }
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b098      	sub	sp, #96	; 0x60
 8006660:	af02      	add	r7, sp, #8
 8006662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800666c:	f7fb fae2 	bl	8001c34 <HAL_GetTick>
 8006670:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0308 	and.w	r3, r3, #8
 800667c:	2b08      	cmp	r3, #8
 800667e:	d12f      	bne.n	80066e0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006680:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006684:	9300      	str	r3, [sp, #0]
 8006686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006688:	2200      	movs	r2, #0
 800668a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 f88e 	bl	80067b0 <UART_WaitOnFlagUntilTimeout>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d022      	beq.n	80066e0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a2:	e853 3f00 	ldrex	r3, [r3]
 80066a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80066a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066ae:	653b      	str	r3, [r7, #80]	; 0x50
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	461a      	mov	r2, r3
 80066b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066b8:	647b      	str	r3, [r7, #68]	; 0x44
 80066ba:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80066be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066c0:	e841 2300 	strex	r3, r2, [r1]
 80066c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80066c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d1e6      	bne.n	800669a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2220      	movs	r2, #32
 80066d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	e063      	b.n	80067a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0304 	and.w	r3, r3, #4
 80066ea:	2b04      	cmp	r3, #4
 80066ec:	d149      	bne.n	8006782 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066f2:	9300      	str	r3, [sp, #0]
 80066f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066f6:	2200      	movs	r2, #0
 80066f8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 f857 	bl	80067b0 <UART_WaitOnFlagUntilTimeout>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d03c      	beq.n	8006782 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006710:	e853 3f00 	ldrex	r3, [r3]
 8006714:	623b      	str	r3, [r7, #32]
   return(result);
 8006716:	6a3b      	ldr	r3, [r7, #32]
 8006718:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800671c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	461a      	mov	r2, r3
 8006724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006726:	633b      	str	r3, [r7, #48]	; 0x30
 8006728:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800672c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800672e:	e841 2300 	strex	r3, r2, [r1]
 8006732:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1e6      	bne.n	8006708 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	3308      	adds	r3, #8
 8006740:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	e853 3f00 	ldrex	r3, [r3]
 8006748:	60fb      	str	r3, [r7, #12]
   return(result);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f023 0301 	bic.w	r3, r3, #1
 8006750:	64bb      	str	r3, [r7, #72]	; 0x48
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	3308      	adds	r3, #8
 8006758:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800675a:	61fa      	str	r2, [r7, #28]
 800675c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675e:	69b9      	ldr	r1, [r7, #24]
 8006760:	69fa      	ldr	r2, [r7, #28]
 8006762:	e841 2300 	strex	r3, r2, [r1]
 8006766:	617b      	str	r3, [r7, #20]
   return(result);
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1e5      	bne.n	800673a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2220      	movs	r2, #32
 8006772:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	e012      	b.n	80067a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2220      	movs	r2, #32
 8006786:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2220      	movs	r2, #32
 800678e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3758      	adds	r7, #88	; 0x58
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	603b      	str	r3, [r7, #0]
 80067bc:	4613      	mov	r3, r2
 80067be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067c0:	e049      	b.n	8006856 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c8:	d045      	beq.n	8006856 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067ca:	f7fb fa33 	bl	8001c34 <HAL_GetTick>
 80067ce:	4602      	mov	r2, r0
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	69ba      	ldr	r2, [r7, #24]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d302      	bcc.n	80067e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d101      	bne.n	80067e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80067e0:	2303      	movs	r3, #3
 80067e2:	e048      	b.n	8006876 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 0304 	and.w	r3, r3, #4
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d031      	beq.n	8006856 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	69db      	ldr	r3, [r3, #28]
 80067f8:	f003 0308 	and.w	r3, r3, #8
 80067fc:	2b08      	cmp	r3, #8
 80067fe:	d110      	bne.n	8006822 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2208      	movs	r2, #8
 8006806:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006808:	68f8      	ldr	r0, [r7, #12]
 800680a:	f000 f838 	bl	800687e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2208      	movs	r2, #8
 8006812:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e029      	b.n	8006876 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	69db      	ldr	r3, [r3, #28]
 8006828:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800682c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006830:	d111      	bne.n	8006856 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800683a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f000 f81e 	bl	800687e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2220      	movs	r2, #32
 8006846:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	e00f      	b.n	8006876 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	69da      	ldr	r2, [r3, #28]
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	4013      	ands	r3, r2
 8006860:	68ba      	ldr	r2, [r7, #8]
 8006862:	429a      	cmp	r2, r3
 8006864:	bf0c      	ite	eq
 8006866:	2301      	moveq	r3, #1
 8006868:	2300      	movne	r3, #0
 800686a:	b2db      	uxtb	r3, r3
 800686c:	461a      	mov	r2, r3
 800686e:	79fb      	ldrb	r3, [r7, #7]
 8006870:	429a      	cmp	r2, r3
 8006872:	d0a6      	beq.n	80067c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800687e:	b480      	push	{r7}
 8006880:	b095      	sub	sp, #84	; 0x54
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800688e:	e853 3f00 	ldrex	r3, [r3]
 8006892:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006896:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800689a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	461a      	mov	r2, r3
 80068a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068a4:	643b      	str	r3, [r7, #64]	; 0x40
 80068a6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80068aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068ac:	e841 2300 	strex	r3, r2, [r1]
 80068b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d1e6      	bne.n	8006886 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	3308      	adds	r3, #8
 80068be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c0:	6a3b      	ldr	r3, [r7, #32]
 80068c2:	e853 3f00 	ldrex	r3, [r3]
 80068c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068ce:	f023 0301 	bic.w	r3, r3, #1
 80068d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	3308      	adds	r3, #8
 80068da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068e4:	e841 2300 	strex	r3, r2, [r1]
 80068e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d1e3      	bne.n	80068b8 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d118      	bne.n	800692a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	e853 3f00 	ldrex	r3, [r3]
 8006904:	60bb      	str	r3, [r7, #8]
   return(result);
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	f023 0310 	bic.w	r3, r3, #16
 800690c:	647b      	str	r3, [r7, #68]	; 0x44
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	461a      	mov	r2, r3
 8006914:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006916:	61bb      	str	r3, [r7, #24]
 8006918:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691a:	6979      	ldr	r1, [r7, #20]
 800691c:	69ba      	ldr	r2, [r7, #24]
 800691e:	e841 2300 	strex	r3, r2, [r1]
 8006922:	613b      	str	r3, [r7, #16]
   return(result);
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1e6      	bne.n	80068f8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2220      	movs	r2, #32
 800692e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800693e:	bf00      	nop
 8006940:	3754      	adds	r7, #84	; 0x54
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr

0800694a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800694a:	b480      	push	{r7}
 800694c:	b085      	sub	sp, #20
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006958:	2b01      	cmp	r3, #1
 800695a:	d101      	bne.n	8006960 <HAL_UARTEx_DisableFifoMode+0x16>
 800695c:	2302      	movs	r3, #2
 800695e:	e027      	b.n	80069b0 <HAL_UARTEx_DisableFifoMode+0x66>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2224      	movs	r2, #36	; 0x24
 800696c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f022 0201 	bic.w	r2, r2, #1
 8006986:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800698e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2220      	movs	r2, #32
 80069a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3714      	adds	r7, #20
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d101      	bne.n	80069d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80069d0:	2302      	movs	r3, #2
 80069d2:	e02d      	b.n	8006a30 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2224      	movs	r2, #36	; 0x24
 80069e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f022 0201 	bic.w	r2, r2, #1
 80069fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	683a      	ldr	r2, [r7, #0]
 8006a0c:	430a      	orrs	r2, r1
 8006a0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 f84f 	bl	8006ab4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2220      	movs	r2, #32
 8006a22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3710      	adds	r7, #16
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d101      	bne.n	8006a50 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	e02d      	b.n	8006aac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2224      	movs	r2, #36	; 0x24
 8006a5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f022 0201 	bic.w	r2, r2, #1
 8006a76:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	683a      	ldr	r2, [r7, #0]
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 f811 	bl	8006ab4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68fa      	ldr	r2, [r7, #12]
 8006a98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2220      	movs	r2, #32
 8006a9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3710      	adds	r7, #16
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d108      	bne.n	8006ad6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006ad4:	e031      	b.n	8006b3a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006ad6:	2308      	movs	r3, #8
 8006ad8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006ada:	2308      	movs	r3, #8
 8006adc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	0e5b      	lsrs	r3, r3, #25
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	f003 0307 	and.w	r3, r3, #7
 8006aec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	0f5b      	lsrs	r3, r3, #29
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	f003 0307 	and.w	r3, r3, #7
 8006afc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006afe:	7bbb      	ldrb	r3, [r7, #14]
 8006b00:	7b3a      	ldrb	r2, [r7, #12]
 8006b02:	4911      	ldr	r1, [pc, #68]	; (8006b48 <UARTEx_SetNbDataToProcess+0x94>)
 8006b04:	5c8a      	ldrb	r2, [r1, r2]
 8006b06:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006b0a:	7b3a      	ldrb	r2, [r7, #12]
 8006b0c:	490f      	ldr	r1, [pc, #60]	; (8006b4c <UARTEx_SetNbDataToProcess+0x98>)
 8006b0e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b10:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b1c:	7bfb      	ldrb	r3, [r7, #15]
 8006b1e:	7b7a      	ldrb	r2, [r7, #13]
 8006b20:	4909      	ldr	r1, [pc, #36]	; (8006b48 <UARTEx_SetNbDataToProcess+0x94>)
 8006b22:	5c8a      	ldrb	r2, [r1, r2]
 8006b24:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006b28:	7b7a      	ldrb	r2, [r7, #13]
 8006b2a:	4908      	ldr	r1, [pc, #32]	; (8006b4c <UARTEx_SetNbDataToProcess+0x98>)
 8006b2c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006b3a:	bf00      	nop
 8006b3c:	3714      	adds	r7, #20
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	08006c20 	.word	0x08006c20
 8006b4c:	08006c28 	.word	0x08006c28

08006b50 <memset>:
 8006b50:	4402      	add	r2, r0
 8006b52:	4603      	mov	r3, r0
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d100      	bne.n	8006b5a <memset+0xa>
 8006b58:	4770      	bx	lr
 8006b5a:	f803 1b01 	strb.w	r1, [r3], #1
 8006b5e:	e7f9      	b.n	8006b54 <memset+0x4>

08006b60 <__libc_init_array>:
 8006b60:	b570      	push	{r4, r5, r6, lr}
 8006b62:	4d0d      	ldr	r5, [pc, #52]	; (8006b98 <__libc_init_array+0x38>)
 8006b64:	4c0d      	ldr	r4, [pc, #52]	; (8006b9c <__libc_init_array+0x3c>)
 8006b66:	1b64      	subs	r4, r4, r5
 8006b68:	10a4      	asrs	r4, r4, #2
 8006b6a:	2600      	movs	r6, #0
 8006b6c:	42a6      	cmp	r6, r4
 8006b6e:	d109      	bne.n	8006b84 <__libc_init_array+0x24>
 8006b70:	4d0b      	ldr	r5, [pc, #44]	; (8006ba0 <__libc_init_array+0x40>)
 8006b72:	4c0c      	ldr	r4, [pc, #48]	; (8006ba4 <__libc_init_array+0x44>)
 8006b74:	f000 f818 	bl	8006ba8 <_init>
 8006b78:	1b64      	subs	r4, r4, r5
 8006b7a:	10a4      	asrs	r4, r4, #2
 8006b7c:	2600      	movs	r6, #0
 8006b7e:	42a6      	cmp	r6, r4
 8006b80:	d105      	bne.n	8006b8e <__libc_init_array+0x2e>
 8006b82:	bd70      	pop	{r4, r5, r6, pc}
 8006b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b88:	4798      	blx	r3
 8006b8a:	3601      	adds	r6, #1
 8006b8c:	e7ee      	b.n	8006b6c <__libc_init_array+0xc>
 8006b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b92:	4798      	blx	r3
 8006b94:	3601      	adds	r6, #1
 8006b96:	e7f2      	b.n	8006b7e <__libc_init_array+0x1e>
 8006b98:	08006c38 	.word	0x08006c38
 8006b9c:	08006c38 	.word	0x08006c38
 8006ba0:	08006c38 	.word	0x08006c38
 8006ba4:	08006c3c 	.word	0x08006c3c

08006ba8 <_init>:
 8006ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006baa:	bf00      	nop
 8006bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bae:	bc08      	pop	{r3}
 8006bb0:	469e      	mov	lr, r3
 8006bb2:	4770      	bx	lr

08006bb4 <_fini>:
 8006bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bb6:	bf00      	nop
 8006bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bba:	bc08      	pop	{r3}
 8006bbc:	469e      	mov	lr, r3
 8006bbe:	4770      	bx	lr

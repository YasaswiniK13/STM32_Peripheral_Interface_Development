
Module2_Interrupt_Button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062a0  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800645c  0800645c  0001645c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064cc  080064cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080064cc  080064cc  000164cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064d4  080064d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064d4  080064d4  000164d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064d8  080064d8  000164d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080064dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004fc  2000000c  080064e8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  080064e8  00020508  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000195aa  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c71  00000000  00000000  00039629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015c8  00000000  00000000  0003c2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010fd  00000000  00000000  0003d868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cb2b  00000000  00000000  0003e965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019c9d  00000000  00000000  0006b490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00118ef8  00000000  00000000  0008512d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005dc0  00000000  00000000  0019e028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  001a3de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08006444 	.word	0x08006444

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08006444 	.word	0x08006444

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fe:	f001 fa32 	bl	8001966 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000502:	f000 f899 	bl	8000638 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000506:	f000 f8f5 	bl	80006f4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050a:	f000 fc47 	bl	8000d9c <MX_GPIO_Init>
  MX_ADC1_Init();
 800050e:	f000 f921 	bl	8000754 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8000512:	f000 f983 	bl	800081c <MX_DFSDM1_Init>
  MX_I2C1_Init();
 8000516:	f000 f9b9 	bl	800088c <MX_I2C1_Init>
  MX_I2C2_Init();
 800051a:	f000 f9f5 	bl	8000908 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 800051e:	f000 fa31 	bl	8000984 <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 8000522:	f000 fa85 	bl	8000a30 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000526:	f000 fac1 	bl	8000aac <MX_SPI3_Init>
  MX_UART4_Init();
 800052a:	f000 fafd 	bl	8000b28 <MX_UART4_Init>
  MX_USART1_UART_Init();
 800052e:	f000 fb47 	bl	8000bc0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000532:	f000 fb91 	bl	8000c58 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000536:	f000 fbdd 	bl	8000cf4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 800053a:	f000 fc27 	bl	8000d8c <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
 MyLED2_init();
 800053e:	f000 fd77 	bl	8001030 <MyLED2_init>
 MyButton_init();
 8000542:	f000 fda7 	bl	8001094 <MyButton_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  while(SOS_transmission==1)
 8000546:	e06e      	b.n	8000626 <main+0x12e>
	  {
		  for(int j=0; j<3; j++)
 8000548:	2300      	movs	r3, #0
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	e065      	b.n	800061a <main+0x122>
		  {

	//sending 's'
	  for(int i=0; i<3; i++)
 800054e:	2300      	movs	r3, #0
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	e016      	b.n	8000582 <main+0x8a>
	  {
		  //turning up the led for a dot
		  //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET); or
		  //write a 1 to Bit 14 of GPIOB ODR(output data register)
		  GPIOB->ODR |=(1<<14);
 8000554:	4b36      	ldr	r3, [pc, #216]	; (8000630 <main+0x138>)
 8000556:	695b      	ldr	r3, [r3, #20]
 8000558:	4a35      	ldr	r2, [pc, #212]	; (8000630 <main+0x138>)
 800055a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800055e:	6153      	str	r3, [r2, #20]
		  HAL_Delay(300);
 8000560:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000564:	f001 fa74 	bl	8001a50 <HAL_Delay>
	      //turning the led off for spacing
		  //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET); or
		  //write a 0 to Bit 14 of GPIOB ODR(output data register)
		  GPIOB->ODR &=~(1<<14);
 8000568:	4b31      	ldr	r3, [pc, #196]	; (8000630 <main+0x138>)
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	4a30      	ldr	r2, [pc, #192]	; (8000630 <main+0x138>)
 800056e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000572:	6153      	str	r3, [r2, #20]
          HAL_Delay(300);
 8000574:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000578:	f001 fa6a 	bl	8001a50 <HAL_Delay>
	  for(int i=0; i<3; i++)
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	3301      	adds	r3, #1
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	2b02      	cmp	r3, #2
 8000586:	dde5      	ble.n	8000554 <main+0x5c>
	  }
	  //3 time units between characters
	  HAL_Delay(300*2);
 8000588:	f44f 7016 	mov.w	r0, #600	; 0x258
 800058c:	f001 fa60 	bl	8001a50 <HAL_Delay>

	  //sending 'o'
	  for(int i=0; i<3; i++)
 8000590:	2300      	movs	r3, #0
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	e016      	b.n	80005c4 <main+0xcc>
	 	  {
	 		  //turning up the led for a dash
	 		  //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
		      //write a 1 to Bit 14 of GPIOB ODR(output data register)
		  	  GPIOB->ODR |=(1<<14);
 8000596:	4b26      	ldr	r3, [pc, #152]	; (8000630 <main+0x138>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	4a25      	ldr	r2, [pc, #148]	; (8000630 <main+0x138>)
 800059c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005a0:	6153      	str	r3, [r2, #20]
	 		  HAL_Delay(300*3);
 80005a2:	f44f 7061 	mov.w	r0, #900	; 0x384
 80005a6:	f001 fa53 	bl	8001a50 <HAL_Delay>
	 	      //turning the led off for spacing
	 		  //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
	 		  //write a 0 to Bit 14 of GPIOB ODR(output data register)
	 		 GPIOB->ODR &=~(1<<14);
 80005aa:	4b21      	ldr	r3, [pc, #132]	; (8000630 <main+0x138>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	4a20      	ldr	r2, [pc, #128]	; (8000630 <main+0x138>)
 80005b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80005b4:	6153      	str	r3, [r2, #20]
	 		 HAL_Delay(300);
 80005b6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005ba:	f001 fa49 	bl	8001a50 <HAL_Delay>
	  for(int i=0; i<3; i++)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	3301      	adds	r3, #1
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2b02      	cmp	r3, #2
 80005c8:	dde5      	ble.n	8000596 <main+0x9e>
	 	  }
	 	  //3 time units between characters
	 	  HAL_Delay(300*2);
 80005ca:	f44f 7016 	mov.w	r0, #600	; 0x258
 80005ce:	f001 fa3f 	bl	8001a50 <HAL_Delay>
	  //sending 's'
	  for(int i=0; i<3; i++)
 80005d2:	2300      	movs	r3, #0
 80005d4:	603b      	str	r3, [r7, #0]
 80005d6:	e016      	b.n	8000606 <main+0x10e>
	 		  {
	 			  //turning up the led for a dot
	 			  //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
		         //write a 1 to Bit 14 of GPIOB ODR(output data register)
		  		  GPIOB->ODR |=(1<<14);
 80005d8:	4b15      	ldr	r3, [pc, #84]	; (8000630 <main+0x138>)
 80005da:	695b      	ldr	r3, [r3, #20]
 80005dc:	4a14      	ldr	r2, [pc, #80]	; (8000630 <main+0x138>)
 80005de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e2:	6153      	str	r3, [r2, #20]
		          HAL_Delay(300);
 80005e4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005e8:	f001 fa32 	bl	8001a50 <HAL_Delay>
	 		      //turning the led off for spacing
	 			  //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
		          //write a 0 to Bit 14 of GPIOB ODR(output data register)
		          GPIOB->ODR &=~(1<<14);
 80005ec:	4b10      	ldr	r3, [pc, #64]	; (8000630 <main+0x138>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	4a0f      	ldr	r2, [pc, #60]	; (8000630 <main+0x138>)
 80005f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80005f6:	6153      	str	r3, [r2, #20]
		          HAL_Delay(300);
 80005f8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005fc:	f001 fa28 	bl	8001a50 <HAL_Delay>
	  for(int i=0; i<3; i++)
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	3301      	adds	r3, #1
 8000604:	603b      	str	r3, [r7, #0]
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	2b02      	cmp	r3, #2
 800060a:	dde5      	ble.n	80005d8 <main+0xe0>
	 		  }
	    //7 time units between words
	 	HAL_Delay(300*6);
 800060c:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8000610:	f001 fa1e 	bl	8001a50 <HAL_Delay>
		  for(int j=0; j<3; j++)
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	3301      	adds	r3, #1
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	2b02      	cmp	r3, #2
 800061e:	dd96      	ble.n	800054e <main+0x56>
   }
		  SOS_transmission=0;
 8000620:	4b04      	ldr	r3, [pc, #16]	; (8000634 <main+0x13c>)
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
	  while(SOS_transmission==1)
 8000626:	4b03      	ldr	r3, [pc, #12]	; (8000634 <main+0x13c>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d08c      	beq.n	8000548 <main+0x50>
 800062e:	e7fa      	b.n	8000626 <main+0x12e>
 8000630:	48000400 	.word	0x48000400
 8000634:	20000028 	.word	0x20000028

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b096      	sub	sp, #88	; 0x58
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	2244      	movs	r2, #68	; 0x44
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f005 fed0 	bl	80063ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	463b      	mov	r3, r7
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800065a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800065e:	f003 fb15 	bl	8003c8c <HAL_PWREx_ControlVoltageScaling>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000668:	f000 fd6e 	bl	8001148 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800066c:	f003 fade 	bl	8003c2c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000670:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <SystemClock_Config+0xb8>)
 8000672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000676:	4a1e      	ldr	r2, [pc, #120]	; (80006f0 <SystemClock_Config+0xb8>)
 8000678:	f023 0318 	bic.w	r3, r3, #24
 800067c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8000680:	2316      	movs	r3, #22
 8000682:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000684:	2301      	movs	r3, #1
 8000686:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000688:	f44f 7380 	mov.w	r3, #256	; 0x100
 800068c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068e:	2340      	movs	r3, #64	; 0x40
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000692:	2301      	movs	r3, #1
 8000694:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800069a:	2360      	movs	r3, #96	; 0x60
 800069c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800069e:	2300      	movs	r3, #0
 80006a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	4618      	mov	r0, r3
 80006a8:	f003 fb94 	bl	8003dd4 <HAL_RCC_OscConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80006b2:	f000 fd49 	bl	8001148 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b6:	230f      	movs	r3, #15
 80006b8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ba:	2301      	movs	r3, #1
 80006bc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80006c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 80006c8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80006cc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ce:	463b      	mov	r3, r7
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f003 ff98 	bl	8004608 <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006de:	f000 fd33 	bl	8001148 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006e2:	f004 fd7f 	bl	80051e4 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006e6:	bf00      	nop
 80006e8:	3758      	adds	r7, #88	; 0x58
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40021000 	.word	0x40021000

080006f4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b0a6      	sub	sp, #152	; 0x98
 80006f8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2294      	movs	r2, #148	; 0x94
 80006fe:	2100      	movs	r1, #0
 8000700:	4618      	mov	r0, r3
 8000702:	f005 fe73 	bl	80063ec <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8000706:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800070a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800070c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000710:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000714:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000718:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800071a:	2301      	movs	r3, #1
 800071c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800071e:	2301      	movs	r3, #1
 8000720:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000722:	2318      	movs	r3, #24
 8000724:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000726:	2302      	movs	r3, #2
 8000728:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800072a:	2302      	movs	r3, #2
 800072c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800072e:	2302      	movs	r3, #2
 8000730:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8000732:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8000736:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	4618      	mov	r0, r3
 800073c:	f004 fa22 	bl	8004b84 <HAL_RCCEx_PeriphCLKConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000746:	f000 fcff 	bl	8001148 <Error_Handler>
  }
}
 800074a:	bf00      	nop
 800074c:	3798      	adds	r7, #152	; 0x98
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800075a:	463b      	mov	r3, r7
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]
 8000768:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800076a:	4b29      	ldr	r3, [pc, #164]	; (8000810 <MX_ADC1_Init+0xbc>)
 800076c:	4a29      	ldr	r2, [pc, #164]	; (8000814 <MX_ADC1_Init+0xc0>)
 800076e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000770:	4b27      	ldr	r3, [pc, #156]	; (8000810 <MX_ADC1_Init+0xbc>)
 8000772:	2200      	movs	r2, #0
 8000774:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000776:	4b26      	ldr	r3, [pc, #152]	; (8000810 <MX_ADC1_Init+0xbc>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800077c:	4b24      	ldr	r3, [pc, #144]	; (8000810 <MX_ADC1_Init+0xbc>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000782:	4b23      	ldr	r3, [pc, #140]	; (8000810 <MX_ADC1_Init+0xbc>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000788:	4b21      	ldr	r3, [pc, #132]	; (8000810 <MX_ADC1_Init+0xbc>)
 800078a:	2204      	movs	r2, #4
 800078c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800078e:	4b20      	ldr	r3, [pc, #128]	; (8000810 <MX_ADC1_Init+0xbc>)
 8000790:	2200      	movs	r2, #0
 8000792:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000794:	4b1e      	ldr	r3, [pc, #120]	; (8000810 <MX_ADC1_Init+0xbc>)
 8000796:	2200      	movs	r2, #0
 8000798:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800079a:	4b1d      	ldr	r3, [pc, #116]	; (8000810 <MX_ADC1_Init+0xbc>)
 800079c:	2201      	movs	r2, #1
 800079e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <MX_ADC1_Init+0xbc>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007a8:	4b19      	ldr	r3, [pc, #100]	; (8000810 <MX_ADC1_Init+0xbc>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ae:	4b18      	ldr	r3, [pc, #96]	; (8000810 <MX_ADC1_Init+0xbc>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007b4:	4b16      	ldr	r3, [pc, #88]	; (8000810 <MX_ADC1_Init+0xbc>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_ADC1_Init+0xbc>)
 80007be:	2200      	movs	r2, #0
 80007c0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007c2:	4b13      	ldr	r3, [pc, #76]	; (8000810 <MX_ADC1_Init+0xbc>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ca:	4811      	ldr	r0, [pc, #68]	; (8000810 <MX_ADC1_Init+0xbc>)
 80007cc:	f001 fb04 	bl	8001dd8 <HAL_ADC_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80007d6:	f000 fcb7 	bl	8001148 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007da:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_ADC1_Init+0xc4>)
 80007dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007de:	2306      	movs	r3, #6
 80007e0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007e6:	237f      	movs	r3, #127	; 0x7f
 80007e8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007ea:	2304      	movs	r3, #4
 80007ec:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f2:	463b      	mov	r3, r7
 80007f4:	4619      	mov	r1, r3
 80007f6:	4806      	ldr	r0, [pc, #24]	; (8000810 <MX_ADC1_Init+0xbc>)
 80007f8:	f001 fc34 	bl	8002064 <HAL_ADC_ConfigChannel>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000802:	f000 fca1 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	3718      	adds	r7, #24
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	2000002c 	.word	0x2000002c
 8000814:	50040000 	.word	0x50040000
 8000818:	04300002 	.word	0x04300002

0800081c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000820:	4b18      	ldr	r3, [pc, #96]	; (8000884 <MX_DFSDM1_Init+0x68>)
 8000822:	4a19      	ldr	r2, [pc, #100]	; (8000888 <MX_DFSDM1_Init+0x6c>)
 8000824:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000826:	4b17      	ldr	r3, [pc, #92]	; (8000884 <MX_DFSDM1_Init+0x68>)
 8000828:	2201      	movs	r2, #1
 800082a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800082c:	4b15      	ldr	r3, [pc, #84]	; (8000884 <MX_DFSDM1_Init+0x68>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8000832:	4b14      	ldr	r3, [pc, #80]	; (8000884 <MX_DFSDM1_Init+0x68>)
 8000834:	2202      	movs	r2, #2
 8000836:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <MX_DFSDM1_Init+0x68>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_DFSDM1_Init+0x68>)
 8000840:	2200      	movs	r2, #0
 8000842:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000844:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <MX_DFSDM1_Init+0x68>)
 8000846:	2200      	movs	r2, #0
 8000848:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_DFSDM1_Init+0x68>)
 800084c:	2200      	movs	r2, #0
 800084e:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <MX_DFSDM1_Init+0x68>)
 8000852:	2204      	movs	r2, #4
 8000854:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <MX_DFSDM1_Init+0x68>)
 8000858:	2200      	movs	r2, #0
 800085a:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_DFSDM1_Init+0x68>)
 800085e:	2201      	movs	r2, #1
 8000860:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <MX_DFSDM1_Init+0x68>)
 8000864:	2200      	movs	r2, #0
 8000866:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_DFSDM1_Init+0x68>)
 800086a:	2200      	movs	r2, #0
 800086c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 800086e:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_DFSDM1_Init+0x68>)
 8000870:	f002 f906 	bl	8002a80 <HAL_DFSDM_ChannelInit>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 800087a:	f000 fc65 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000094 	.word	0x20000094
 8000888:	40016040 	.word	0x40016040

0800088c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000890:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <MX_I2C1_Init+0x74>)
 8000892:	4a1c      	ldr	r2, [pc, #112]	; (8000904 <MX_I2C1_Init+0x78>)
 8000894:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8000896:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <MX_I2C1_Init+0x74>)
 8000898:	f640 6214 	movw	r2, #3604	; 0xe14
 800089c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800089e:	4b18      	ldr	r3, [pc, #96]	; (8000900 <MX_I2C1_Init+0x74>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a4:	4b16      	ldr	r3, [pc, #88]	; (8000900 <MX_I2C1_Init+0x74>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008aa:	4b15      	ldr	r3, [pc, #84]	; (8000900 <MX_I2C1_Init+0x74>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008b0:	4b13      	ldr	r3, [pc, #76]	; (8000900 <MX_I2C1_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008b6:	4b12      	ldr	r3, [pc, #72]	; (8000900 <MX_I2C1_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008bc:	4b10      	ldr	r3, [pc, #64]	; (8000900 <MX_I2C1_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008c2:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_I2C1_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008c8:	480d      	ldr	r0, [pc, #52]	; (8000900 <MX_I2C1_Init+0x74>)
 80008ca:	f002 fba7 	bl	800301c <HAL_I2C_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008d4:	f000 fc38 	bl	8001148 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008d8:	2100      	movs	r1, #0
 80008da:	4809      	ldr	r0, [pc, #36]	; (8000900 <MX_I2C1_Init+0x74>)
 80008dc:	f002 fc39 	bl	8003152 <HAL_I2CEx_ConfigAnalogFilter>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80008e6:	f000 fc2f 	bl	8001148 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008ea:	2100      	movs	r1, #0
 80008ec:	4804      	ldr	r0, [pc, #16]	; (8000900 <MX_I2C1_Init+0x74>)
 80008ee:	f002 fc7b 	bl	80031e8 <HAL_I2CEx_ConfigDigitalFilter>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80008f8:	f000 fc26 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	200000cc 	.word	0x200000cc
 8000904:	40005400 	.word	0x40005400

08000908 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800090c:	4b1b      	ldr	r3, [pc, #108]	; (800097c <MX_I2C2_Init+0x74>)
 800090e:	4a1c      	ldr	r2, [pc, #112]	; (8000980 <MX_I2C2_Init+0x78>)
 8000910:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000912:	4b1a      	ldr	r3, [pc, #104]	; (800097c <MX_I2C2_Init+0x74>)
 8000914:	f640 6214 	movw	r2, #3604	; 0xe14
 8000918:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800091a:	4b18      	ldr	r3, [pc, #96]	; (800097c <MX_I2C2_Init+0x74>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000920:	4b16      	ldr	r3, [pc, #88]	; (800097c <MX_I2C2_Init+0x74>)
 8000922:	2201      	movs	r2, #1
 8000924:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <MX_I2C2_Init+0x74>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800092c:	4b13      	ldr	r3, [pc, #76]	; (800097c <MX_I2C2_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000932:	4b12      	ldr	r3, [pc, #72]	; (800097c <MX_I2C2_Init+0x74>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000938:	4b10      	ldr	r3, [pc, #64]	; (800097c <MX_I2C2_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800093e:	4b0f      	ldr	r3, [pc, #60]	; (800097c <MX_I2C2_Init+0x74>)
 8000940:	2200      	movs	r2, #0
 8000942:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000944:	480d      	ldr	r0, [pc, #52]	; (800097c <MX_I2C2_Init+0x74>)
 8000946:	f002 fb69 	bl	800301c <HAL_I2C_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000950:	f000 fbfa 	bl	8001148 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000954:	2100      	movs	r1, #0
 8000956:	4809      	ldr	r0, [pc, #36]	; (800097c <MX_I2C2_Init+0x74>)
 8000958:	f002 fbfb 	bl	8003152 <HAL_I2CEx_ConfigAnalogFilter>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000962:	f000 fbf1 	bl	8001148 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000966:	2100      	movs	r1, #0
 8000968:	4804      	ldr	r0, [pc, #16]	; (800097c <MX_I2C2_Init+0x74>)
 800096a:	f002 fc3d 	bl	80031e8 <HAL_I2CEx_ConfigDigitalFilter>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000974:	f000 fbe8 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000120 	.word	0x20000120
 8000980:	40005800 	.word	0x40005800

08000984 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000998:	4b23      	ldr	r3, [pc, #140]	; (8000a28 <MX_OCTOSPI1_Init+0xa4>)
 800099a:	4a24      	ldr	r2, [pc, #144]	; (8000a2c <MX_OCTOSPI1_Init+0xa8>)
 800099c:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 800099e:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <MX_OCTOSPI1_Init+0xa4>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80009a4:	4b20      	ldr	r3, [pc, #128]	; (8000a28 <MX_OCTOSPI1_Init+0xa4>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 80009aa:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <MX_OCTOSPI1_Init+0xa4>)
 80009ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80009b0:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 80009b2:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <MX_OCTOSPI1_Init+0xa4>)
 80009b4:	2220      	movs	r2, #32
 80009b6:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 80009b8:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <MX_OCTOSPI1_Init+0xa4>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80009be:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <MX_OCTOSPI1_Init+0xa4>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80009c4:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <MX_OCTOSPI1_Init+0xa4>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 80009ca:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <MX_OCTOSPI1_Init+0xa4>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80009d0:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <MX_OCTOSPI1_Init+0xa4>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80009d6:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <MX_OCTOSPI1_Init+0xa4>)
 80009d8:	2200      	movs	r2, #0
 80009da:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <MX_OCTOSPI1_Init+0xa4>)
 80009de:	2200      	movs	r2, #0
 80009e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <MX_OCTOSPI1_Init+0xa4>)
 80009e4:	2208      	movs	r2, #8
 80009e6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80009e8:	480f      	ldr	r0, [pc, #60]	; (8000a28 <MX_OCTOSPI1_Init+0xa4>)
 80009ea:	f002 fc49 	bl	8003280 <HAL_OSPI_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 80009f4:	f000 fba8 	bl	8001148 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 80009f8:	2301      	movs	r3, #1
 80009fa:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 80009fc:	2301      	movs	r3, #1
 80009fe:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000a00:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8000a04:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4806      	ldr	r0, [pc, #24]	; (8000a28 <MX_OCTOSPI1_Init+0xa4>)
 8000a10:	f002 fcf0 	bl	80033f4 <HAL_OSPIM_Config>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8000a1a:	f000 fb95 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	3718      	adds	r7, #24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000174 	.word	0x20000174
 8000a2c:	a0001000 	.word	0xa0001000

08000a30 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a34:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <MX_SPI1_Init+0x74>)
 8000a36:	4a1c      	ldr	r2, [pc, #112]	; (8000aa8 <MX_SPI1_Init+0x78>)
 8000a38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a3a:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <MX_SPI1_Init+0x74>)
 8000a3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a42:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <MX_SPI1_Init+0x74>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a48:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <MX_SPI1_Init+0x74>)
 8000a4a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a4e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a50:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <MX_SPI1_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a56:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <MX_SPI1_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a5c:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <MX_SPI1_Init+0x74>)
 8000a5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a62:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <MX_SPI1_Init+0x74>)
 8000a66:	2208      	movs	r2, #8
 8000a68:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <MX_SPI1_Init+0x74>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <MX_SPI1_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a76:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <MX_SPI1_Init+0x74>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a7c:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <MX_SPI1_Init+0x74>)
 8000a7e:	2207      	movs	r2, #7
 8000a80:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a82:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <MX_SPI1_Init+0x74>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <MX_SPI1_Init+0x74>)
 8000a8a:	2208      	movs	r2, #8
 8000a8c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a8e:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <MX_SPI1_Init+0x74>)
 8000a90:	f004 fda0 	bl	80055d4 <HAL_SPI_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a9a:	f000 fb55 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	200001c4 	.word	0x200001c4
 8000aa8:	40013000 	.word	0x40013000

08000aac <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000ab0:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <MX_SPI3_Init+0x74>)
 8000ab2:	4a1c      	ldr	r2, [pc, #112]	; (8000b24 <MX_SPI3_Init+0x78>)
 8000ab4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000ab6:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <MX_SPI3_Init+0x74>)
 8000ab8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000abc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000abe:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <MX_SPI3_Init+0x74>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ac4:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <MX_SPI3_Init+0x74>)
 8000ac6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000aca:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000acc:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <MX_SPI3_Init+0x74>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ad2:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <MX_SPI3_Init+0x74>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ad8:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <MX_SPI3_Init+0x74>)
 8000ada:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ade:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_SPI3_Init+0x74>)
 8000ae2:	2208      	movs	r2, #8
 8000ae4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_SPI3_Init+0x74>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_SPI3_Init+0x74>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <MX_SPI3_Init+0x74>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_SPI3_Init+0x74>)
 8000afa:	2207      	movs	r2, #7
 8000afc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <MX_SPI3_Init+0x74>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_SPI3_Init+0x74>)
 8000b06:	2208      	movs	r2, #8
 8000b08:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_SPI3_Init+0x74>)
 8000b0c:	f004 fd62 	bl	80055d4 <HAL_SPI_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000b16:	f000 fb17 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000228 	.word	0x20000228
 8000b24:	40003c00 	.word	0x40003c00

08000b28 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000b2c:	4b22      	ldr	r3, [pc, #136]	; (8000bb8 <MX_UART4_Init+0x90>)
 8000b2e:	4a23      	ldr	r2, [pc, #140]	; (8000bbc <MX_UART4_Init+0x94>)
 8000b30:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000b32:	4b21      	ldr	r3, [pc, #132]	; (8000bb8 <MX_UART4_Init+0x90>)
 8000b34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b38:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3a:	4b1f      	ldr	r3, [pc, #124]	; (8000bb8 <MX_UART4_Init+0x90>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b40:	4b1d      	ldr	r3, [pc, #116]	; (8000bb8 <MX_UART4_Init+0x90>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b46:	4b1c      	ldr	r3, [pc, #112]	; (8000bb8 <MX_UART4_Init+0x90>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000b4c:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <MX_UART4_Init+0x90>)
 8000b4e:	220c      	movs	r2, #12
 8000b50:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b52:	4b19      	ldr	r3, [pc, #100]	; (8000bb8 <MX_UART4_Init+0x90>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b58:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <MX_UART4_Init+0x90>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b5e:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <MX_UART4_Init+0x90>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b64:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <MX_UART4_Init+0x90>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b6a:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <MX_UART4_Init+0x90>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b70:	4811      	ldr	r0, [pc, #68]	; (8000bb8 <MX_UART4_Init+0x90>)
 8000b72:	f004 fdd2 	bl	800571a <HAL_UART_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000b7c:	f000 fae4 	bl	8001148 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b80:	2100      	movs	r1, #0
 8000b82:	480d      	ldr	r0, [pc, #52]	; (8000bb8 <MX_UART4_Init+0x90>)
 8000b84:	f005 fb68 	bl	8006258 <HAL_UARTEx_SetTxFifoThreshold>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000b8e:	f000 fadb 	bl	8001148 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b92:	2100      	movs	r1, #0
 8000b94:	4808      	ldr	r0, [pc, #32]	; (8000bb8 <MX_UART4_Init+0x90>)
 8000b96:	f005 fb9d 	bl	80062d4 <HAL_UARTEx_SetRxFifoThreshold>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000ba0:	f000 fad2 	bl	8001148 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000ba4:	4804      	ldr	r0, [pc, #16]	; (8000bb8 <MX_UART4_Init+0x90>)
 8000ba6:	f005 fb1e 	bl	80061e6 <HAL_UARTEx_DisableFifoMode>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000bb0:	f000 faca 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	2000028c 	.word	0x2000028c
 8000bbc:	40004c00 	.word	0x40004c00

08000bc0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bc4:	4b22      	ldr	r3, [pc, #136]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000bc6:	4a23      	ldr	r2, [pc, #140]	; (8000c54 <MX_USART1_UART_Init+0x94>)
 8000bc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bca:	4b21      	ldr	r3, [pc, #132]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000bcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd2:	4b1f      	ldr	r3, [pc, #124]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bd8:	4b1d      	ldr	r3, [pc, #116]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bde:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000be4:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000be6:	220c      	movs	r2, #12
 8000be8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bea:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf0:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bf6:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bfc:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c02:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c08:	4811      	ldr	r0, [pc, #68]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000c0a:	f004 fd86 	bl	800571a <HAL_UART_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c14:	f000 fa98 	bl	8001148 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c18:	2100      	movs	r1, #0
 8000c1a:	480d      	ldr	r0, [pc, #52]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000c1c:	f005 fb1c 	bl	8006258 <HAL_UARTEx_SetTxFifoThreshold>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c26:	f000 fa8f 	bl	8001148 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4808      	ldr	r0, [pc, #32]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000c2e:	f005 fb51 	bl	80062d4 <HAL_UARTEx_SetRxFifoThreshold>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c38:	f000 fa86 	bl	8001148 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c3c:	4804      	ldr	r0, [pc, #16]	; (8000c50 <MX_USART1_UART_Init+0x90>)
 8000c3e:	f005 fad2 	bl	80061e6 <HAL_UARTEx_DisableFifoMode>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c48:	f000 fa7e 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000320 	.word	0x20000320
 8000c54:	40013800 	.word	0x40013800

08000c58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c5c:	4b23      	ldr	r3, [pc, #140]	; (8000cec <MX_USART2_UART_Init+0x94>)
 8000c5e:	4a24      	ldr	r2, [pc, #144]	; (8000cf0 <MX_USART2_UART_Init+0x98>)
 8000c60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c62:	4b22      	ldr	r3, [pc, #136]	; (8000cec <MX_USART2_UART_Init+0x94>)
 8000c64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c6a:	4b20      	ldr	r3, [pc, #128]	; (8000cec <MX_USART2_UART_Init+0x94>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c70:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <MX_USART2_UART_Init+0x94>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c76:	4b1d      	ldr	r3, [pc, #116]	; (8000cec <MX_USART2_UART_Init+0x94>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c7c:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <MX_USART2_UART_Init+0x94>)
 8000c7e:	220c      	movs	r2, #12
 8000c80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000c82:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <MX_USART2_UART_Init+0x94>)
 8000c84:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c88:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c8a:	4b18      	ldr	r3, [pc, #96]	; (8000cec <MX_USART2_UART_Init+0x94>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c90:	4b16      	ldr	r3, [pc, #88]	; (8000cec <MX_USART2_UART_Init+0x94>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c96:	4b15      	ldr	r3, [pc, #84]	; (8000cec <MX_USART2_UART_Init+0x94>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c9c:	4b13      	ldr	r3, [pc, #76]	; (8000cec <MX_USART2_UART_Init+0x94>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ca2:	4812      	ldr	r0, [pc, #72]	; (8000cec <MX_USART2_UART_Init+0x94>)
 8000ca4:	f004 fd39 	bl	800571a <HAL_UART_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000cae:	f000 fa4b 	bl	8001148 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	480d      	ldr	r0, [pc, #52]	; (8000cec <MX_USART2_UART_Init+0x94>)
 8000cb6:	f005 facf 	bl	8006258 <HAL_UARTEx_SetTxFifoThreshold>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000cc0:	f000 fa42 	bl	8001148 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4809      	ldr	r0, [pc, #36]	; (8000cec <MX_USART2_UART_Init+0x94>)
 8000cc8:	f005 fb04 	bl	80062d4 <HAL_UARTEx_SetRxFifoThreshold>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000cd2:	f000 fa39 	bl	8001148 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000cd6:	4805      	ldr	r0, [pc, #20]	; (8000cec <MX_USART2_UART_Init+0x94>)
 8000cd8:	f005 fa85 	bl	80061e6 <HAL_UARTEx_DisableFifoMode>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000ce2:	f000 fa31 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200003b4 	.word	0x200003b4
 8000cf0:	40004400 	.word	0x40004400

08000cf4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cf8:	4b22      	ldr	r3, [pc, #136]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000cfa:	4a23      	ldr	r2, [pc, #140]	; (8000d88 <MX_USART3_UART_Init+0x94>)
 8000cfc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cfe:	4b21      	ldr	r3, [pc, #132]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d06:	4b1f      	ldr	r3, [pc, #124]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d12:	4b1c      	ldr	r3, [pc, #112]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d18:	4b1a      	ldr	r3, [pc, #104]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1e:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d24:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d2a:	4b16      	ldr	r3, [pc, #88]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d30:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d36:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d3c:	4811      	ldr	r0, [pc, #68]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d3e:	f004 fcec 	bl	800571a <HAL_UART_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d48:	f000 f9fe 	bl	8001148 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	480d      	ldr	r0, [pc, #52]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d50:	f005 fa82 	bl	8006258 <HAL_UARTEx_SetTxFifoThreshold>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d5a:	f000 f9f5 	bl	8001148 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4808      	ldr	r0, [pc, #32]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d62:	f005 fab7 	bl	80062d4 <HAL_UARTEx_SetRxFifoThreshold>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d6c:	f000 f9ec 	bl	8001148 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d70:	4804      	ldr	r0, [pc, #16]	; (8000d84 <MX_USART3_UART_Init+0x90>)
 8000d72:	f005 fa38 	bl	80061e6 <HAL_UARTEx_DisableFifoMode>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d7c:	f000 f9e4 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000448 	.word	0x20000448
 8000d88:	40004800 	.word	0x40004800

08000d8c <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
	...

08000d9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08c      	sub	sp, #48	; 0x30
 8000da0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da2:	f107 031c 	add.w	r3, r7, #28
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
 8000db0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000db2:	4b9a      	ldr	r3, [pc, #616]	; (800101c <MX_GPIO_Init+0x280>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db6:	4a99      	ldr	r2, [pc, #612]	; (800101c <MX_GPIO_Init+0x280>)
 8000db8:	f043 0310 	orr.w	r3, r3, #16
 8000dbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dbe:	4b97      	ldr	r3, [pc, #604]	; (800101c <MX_GPIO_Init+0x280>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	f003 0310 	and.w	r3, r3, #16
 8000dc6:	61bb      	str	r3, [r7, #24]
 8000dc8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dca:	4b94      	ldr	r3, [pc, #592]	; (800101c <MX_GPIO_Init+0x280>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	4a93      	ldr	r2, [pc, #588]	; (800101c <MX_GPIO_Init+0x280>)
 8000dd0:	f043 0304 	orr.w	r3, r3, #4
 8000dd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd6:	4b91      	ldr	r3, [pc, #580]	; (800101c <MX_GPIO_Init+0x280>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dda:	f003 0304 	and.w	r3, r3, #4
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000de2:	4b8e      	ldr	r3, [pc, #568]	; (800101c <MX_GPIO_Init+0x280>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	4a8d      	ldr	r2, [pc, #564]	; (800101c <MX_GPIO_Init+0x280>)
 8000de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dee:	4b8b      	ldr	r3, [pc, #556]	; (800101c <MX_GPIO_Init+0x280>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	4b88      	ldr	r3, [pc, #544]	; (800101c <MX_GPIO_Init+0x280>)
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfe:	4a87      	ldr	r2, [pc, #540]	; (800101c <MX_GPIO_Init+0x280>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e06:	4b85      	ldr	r3, [pc, #532]	; (800101c <MX_GPIO_Init+0x280>)
 8000e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e12:	4b82      	ldr	r3, [pc, #520]	; (800101c <MX_GPIO_Init+0x280>)
 8000e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e16:	4a81      	ldr	r2, [pc, #516]	; (800101c <MX_GPIO_Init+0x280>)
 8000e18:	f043 0302 	orr.w	r3, r3, #2
 8000e1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e1e:	4b7f      	ldr	r3, [pc, #508]	; (800101c <MX_GPIO_Init+0x280>)
 8000e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e22:	f003 0302 	and.w	r3, r3, #2
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e2a:	4b7c      	ldr	r3, [pc, #496]	; (800101c <MX_GPIO_Init+0x280>)
 8000e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2e:	4a7b      	ldr	r2, [pc, #492]	; (800101c <MX_GPIO_Init+0x280>)
 8000e30:	f043 0308 	orr.w	r3, r3, #8
 8000e34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e36:	4b79      	ldr	r3, [pc, #484]	; (800101c <MX_GPIO_Init+0x280>)
 8000e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3a:	f003 0308 	and.w	r3, r3, #8
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8000e42:	2200      	movs	r2, #0
 8000e44:	f240 1105 	movw	r1, #261	; 0x105
 8000e48:	4875      	ldr	r0, [pc, #468]	; (8001020 <MX_GPIO_Init+0x284>)
 8000e4a:	f002 f8b7 	bl	8002fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f248 111c 	movw	r1, #33052	; 0x811c
 8000e54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e58:	f002 f8b0 	bl	8002fbc <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f24f 0134 	movw	r1, #61492	; 0xf034
 8000e62:	4870      	ldr	r0, [pc, #448]	; (8001024 <MX_GPIO_Init+0x288>)
 8000e64:	f002 f8aa 	bl	8002fbc <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f242 0183 	movw	r1, #8323	; 0x2083
 8000e6e:	486e      	ldr	r0, [pc, #440]	; (8001028 <MX_GPIO_Init+0x28c>)
 8000e70:	f002 f8a4 	bl	8002fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000e7a:	486c      	ldr	r0, [pc, #432]	; (800102c <MX_GPIO_Init+0x290>)
 8000e7c:	f002 f89e 	bl	8002fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000e80:	f240 1305 	movw	r3, #261	; 0x105
 8000e84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e86:	2301      	movs	r3, #1
 8000e88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e92:	f107 031c 	add.w	r3, r7, #28
 8000e96:	4619      	mov	r1, r3
 8000e98:	4861      	ldr	r0, [pc, #388]	; (8001020 <MX_GPIO_Init+0x284>)
 8000e9a:	f001 fefd 	bl	8002c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8000e9e:	237a      	movs	r3, #122	; 0x7a
 8000ea0:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ea2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ea6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eac:	f107 031c 	add.w	r3, r7, #28
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	485b      	ldr	r0, [pc, #364]	; (8001020 <MX_GPIO_Init+0x284>)
 8000eb4:	f001 fef0 	bl	8002c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
 // GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000eb8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000ebc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ebe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ec2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec8:	f107 031c 	add.w	r3, r7, #28
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4857      	ldr	r0, [pc, #348]	; (800102c <MX_GPIO_Init+0x290>)
 8000ed0:	f001 fee2 	bl	8002c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8000ed4:	f248 131c 	movw	r3, #33052	; 0x811c
 8000ed8:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eda:	2301      	movs	r3, #1
 8000edc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee6:	f107 031c 	add.w	r3, r7, #28
 8000eea:	4619      	mov	r1, r3
 8000eec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef0:	f001 fed2 	bl	8002c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ef8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000efc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000f02:	f107 031c 	add.w	r3, r7, #28
 8000f06:	4619      	mov	r1, r3
 8000f08:	4846      	ldr	r0, [pc, #280]	; (8001024 <MX_GPIO_Init+0x288>)
 8000f0a:	f001 fec5 	bl	8002c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000f22:	f107 031c 	add.w	r3, r7, #28
 8000f26:	4619      	mov	r1, r3
 8000f28:	483e      	ldr	r0, [pc, #248]	; (8001024 <MX_GPIO_Init+0x288>)
 8000f2a:	f001 feb5 	bl	8002c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 8000f2e:	f24b 0334 	movw	r3, #45108	; 0xb034
 8000f32:	61fb      	str	r3, [r7, #28]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f34:	2301      	movs	r3, #1
 8000f36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f40:	f107 031c 	add.w	r3, r7, #28
 8000f44:	4619      	mov	r1, r3
 8000f46:	4837      	ldr	r0, [pc, #220]	; (8001024 <MX_GPIO_Init+0x288>)
 8000f48:	f001 fea6 	bl	8002c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000f4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	4619      	mov	r1, r3
 8000f64:	482f      	ldr	r0, [pc, #188]	; (8001024 <MX_GPIO_Init+0x288>)
 8000f66:	f001 fe97 	bl	8002c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8000f6a:	f64d 4304 	movw	r3, #56324	; 0xdc04
 8000f6e:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f70:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f7a:	f107 031c 	add.w	r3, r7, #28
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4829      	ldr	r0, [pc, #164]	; (8001028 <MX_GPIO_Init+0x28c>)
 8000f82:	f001 fe89 	bl	8002c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8000f86:	f242 0383 	movw	r3, #8323	; 0x2083
 8000f8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f94:	2300      	movs	r3, #0
 8000f96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f98:	f107 031c 	add.w	r3, r7, #28
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4822      	ldr	r0, [pc, #136]	; (8001028 <MX_GPIO_Init+0x28c>)
 8000fa0:	f001 fe7a 	bl	8002c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000fa4:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000fa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000faa:	2301      	movs	r3, #1
 8000fac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb6:	f107 031c 	add.w	r3, r7, #28
 8000fba:	4619      	mov	r1, r3
 8000fbc:	481b      	ldr	r0, [pc, #108]	; (800102c <MX_GPIO_Init+0x290>)
 8000fbe:	f001 fe6b 	bl	8002c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000fc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fda:	f001 fe5d 	bl	8002c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000fde:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000fe2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fec:	2303      	movs	r3, #3
 8000fee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ff0:	230a      	movs	r3, #10
 8000ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff4:	f107 031c 	add.w	r3, r7, #28
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ffe:	f001 fe4b 	bl	8002c98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001002:	2200      	movs	r2, #0
 8001004:	2100      	movs	r1, #0
 8001006:	2017      	movs	r0, #23
 8001008:	f001 fd03 	bl	8002a12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800100c:	2017      	movs	r0, #23
 800100e:	f001 fd1c 	bl	8002a4a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
*/
/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001012:	bf00      	nop
 8001014:	3730      	adds	r7, #48	; 0x30
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40021000 	.word	0x40021000
 8001020:	48001000 	.word	0x48001000
 8001024:	48000400 	.word	0x48000400
 8001028:	48000c00 	.word	0x48000c00
 800102c:	48000800 	.word	0x48000800

08001030 <MyLED2_init>:

/* USER CODE BEGIN 4 */
static void MyLED2_init(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  //Configure the MODE register
  //01:general purpose output
  //MODER Bit 29 and Bit 28
  //Reset both bits 28 and 29 to 0
	GPIOB->MODER &=~(0x3 <<28);
 8001034:	4b16      	ldr	r3, [pc, #88]	; (8001090 <MyLED2_init+0x60>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a15      	ldr	r2, [pc, #84]	; (8001090 <MyLED2_init+0x60>)
 800103a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800103e:	6013      	str	r3, [r2, #0]
  //Set the values
	GPIOB->MODER |=(0x1 <<28);
 8001040:	4b13      	ldr	r3, [pc, #76]	; (8001090 <MyLED2_init+0x60>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a12      	ldr	r2, [pc, #72]	; (8001090 <MyLED2_init+0x60>)
 8001046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800104a:	6013      	str	r3, [r2, #0]

  //Configure the output type register
  //0:Push-Pull
  //OTYPER Bit 14
	GPIOB->OTYPER &=~(1<<14);
 800104c:	4b10      	ldr	r3, [pc, #64]	; (8001090 <MyLED2_init+0x60>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	4a0f      	ldr	r2, [pc, #60]	; (8001090 <MyLED2_init+0x60>)
 8001052:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001056:	6053      	str	r3, [r2, #4]

  //Configure the speed register
  //11:Very high speed
  //OSPEEDR Bit 29 and Bit 28
  //Reset both bits 28 and 29 to 0
	GPIOB->OSPEEDR &=~(0x3 <<28);
 8001058:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <MyLED2_init+0x60>)
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	4a0c      	ldr	r2, [pc, #48]	; (8001090 <MyLED2_init+0x60>)
 800105e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001062:	6093      	str	r3, [r2, #8]
  //Set the values
	GPIOB->OSPEEDR |=(0x1 <<28);
 8001064:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <MyLED2_init+0x60>)
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	4a09      	ldr	r2, [pc, #36]	; (8001090 <MyLED2_init+0x60>)
 800106a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800106e:	6093      	str	r3, [r2, #8]

  //Configure pull-up/pull-down register
  //00: no pull-up/pull-down
  //PUPDR Bit 29 and Bit 28
  //Reset both bits 28 and 29 to 0
	GPIOB->PUPDR &=~(0x3 <<28);
 8001070:	4b07      	ldr	r3, [pc, #28]	; (8001090 <MyLED2_init+0x60>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	4a06      	ldr	r2, [pc, #24]	; (8001090 <MyLED2_init+0x60>)
 8001076:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800107a:	60d3      	str	r3, [r2, #12]
  //Set the values
	GPIOB->PUPDR |=(0x0 <<28);
 800107c:	4b04      	ldr	r3, [pc, #16]	; (8001090 <MyLED2_init+0x60>)
 800107e:	4a04      	ldr	r2, [pc, #16]	; (8001090 <MyLED2_init+0x60>)
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	60d3      	str	r3, [r2, #12]

}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	48000400 	.word	0x48000400

08001094 <MyButton_init>:

static void MyButton_init(void)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
  //Button is Port C, Pin 13, EXTI13
  //Configure SYSCLK
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 800109a:	4b1e      	ldr	r3, [pc, #120]	; (8001114 <MyButton_init+0x80>)
 800109c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800109e:	4a1d      	ldr	r2, [pc, #116]	; (8001114 <MyButton_init+0x80>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	6613      	str	r3, [r2, #96]	; 0x60
 80010a6:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <MyButton_init+0x80>)
 80010a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]

  //Configure the MODE register
  //00:input mode
  //MODER Bit 27 and Bit 26
  //Reset both bits 27 and 26 to 0
	GPIOC->MODER &=~(0x3 <<26);
 80010b2:	4b19      	ldr	r3, [pc, #100]	; (8001118 <MyButton_init+0x84>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a18      	ldr	r2, [pc, #96]	; (8001118 <MyButton_init+0x84>)
 80010b8:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80010bc:	6013      	str	r3, [r2, #0]

  //Configure pull-up/pull-down register
  //00: no pull-up/pull-down
  //PUPDR Bit 27 and Bit 26
  //Reset both bits 27 and 26 to 0
	GPIOC->PUPDR &=~(0x3 <<26);
 80010be:	4b16      	ldr	r3, [pc, #88]	; (8001118 <MyButton_init+0x84>)
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	4a15      	ldr	r2, [pc, #84]	; (8001118 <MyButton_init+0x84>)
 80010c4:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80010c8:	60d3      	str	r3, [r2, #12]
  //Set the values
	GPIOC->PUPDR |=(0x3 <<26);
 80010ca:	4b13      	ldr	r3, [pc, #76]	; (8001118 <MyButton_init+0x84>)
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	4a12      	ldr	r2, [pc, #72]	; (8001118 <MyButton_init+0x84>)
 80010d0:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 80010d4:	60d3      	str	r3, [r2, #12]
  //sysconfig Register
  //EXTI13, Choose port C
  //Configure the External Interrupt Configuration Register
  //SYSCFG_EXTICR4 :only 2nd bit in EXTICR[3] is set to 1
	//SYSCFG->EXTICR[3]|=(0x1<<4);
	SYSCFG->EXTICR[3]|=(0x1<<5);
 80010d6:	4b11      	ldr	r3, [pc, #68]	; (800111c <MyButton_init+0x88>)
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	4a10      	ldr	r2, [pc, #64]	; (800111c <MyButton_init+0x88>)
 80010dc:	f043 0320 	orr.w	r3, r3, #32
 80010e0:	6153      	str	r3, [r2, #20]
	//SYSCFG->EXTICR[3]|=(0x1<<7);


  //Configure the falling trigger selection register
  //EXTI_FTSR
	EXTI->FTSR1 |=(0x1 <<13) ;
 80010e2:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <MyButton_init+0x8c>)
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	4a0e      	ldr	r2, [pc, #56]	; (8001120 <MyButton_init+0x8c>)
 80010e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010ec:	60d3      	str	r3, [r2, #12]


  //Configure the Interrupt Mask Register
  //EXTI_IMR
	EXTI->IMR1 |=(0x1 <<13);
 80010ee:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <MyButton_init+0x8c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a0b      	ldr	r2, [pc, #44]	; (8001120 <MyButton_init+0x8c>)
 80010f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010f8:	6013      	str	r3, [r2, #0]

  //Configure NVIC Set Enable Register
  //NVIC_ISER
  //NVIC->ISER[] Register no. & location based on position
  //NVIC->ISER[(((uint32_t)EXTI15_10_IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)EXTI15_10_IRQn) & 0x1FUL));
	NVIC->ISER[1] |= (0x1 << 9);
 80010fa:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <MyButton_init+0x90>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	4a09      	ldr	r2, [pc, #36]	; (8001124 <MyButton_init+0x90>)
 8001100:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001104:	6053      	str	r3, [r2, #4]
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40021000 	.word	0x40021000
 8001118:	48000800 	.word	0x48000800
 800111c:	40010000 	.word	0x40010000
 8001120:	40010400 	.word	0x40010400
 8001124:	e000e100 	.word	0xe000e100

08001128 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	80fb      	strh	r3, [r7, #6]
	//set a flag to initialize SOS transmission
	SOS_transmission=1;
 8001132:	4b04      	ldr	r3, [pc, #16]	; (8001144 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001134:	2201      	movs	r2, #1
 8001136:	601a      	str	r2, [r3, #0]
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	20000028 	.word	0x20000028

08001148 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800114c:	b672      	cpsid	i
}
 800114e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001150:	e7fe      	b.n	8001150 <Error_Handler+0x8>
	...

08001154 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115a:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <HAL_MspInit+0x44>)
 800115c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800115e:	4a0e      	ldr	r2, [pc, #56]	; (8001198 <HAL_MspInit+0x44>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6613      	str	r3, [r2, #96]	; 0x60
 8001166:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <HAL_MspInit+0x44>)
 8001168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <HAL_MspInit+0x44>)
 8001174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001176:	4a08      	ldr	r2, [pc, #32]	; (8001198 <HAL_MspInit+0x44>)
 8001178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800117c:	6593      	str	r3, [r2, #88]	; 0x58
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_MspInit+0x44>)
 8001180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001186:	603b      	str	r3, [r7, #0]
 8001188:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	40021000 	.word	0x40021000

0800119c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	; 0x28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a15      	ldr	r2, [pc, #84]	; (8001210 <HAL_ADC_MspInit+0x74>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d123      	bne.n	8001206 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <HAL_ADC_MspInit+0x78>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c2:	4a14      	ldr	r2, [pc, #80]	; (8001214 <HAL_ADC_MspInit+0x78>)
 80011c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ca:	4b12      	ldr	r3, [pc, #72]	; (8001214 <HAL_ADC_MspInit+0x78>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d6:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <HAL_ADC_MspInit+0x78>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011da:	4a0e      	ldr	r2, [pc, #56]	; (8001214 <HAL_ADC_MspInit+0x78>)
 80011dc:	f043 0304 	orr.w	r3, r3, #4
 80011e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e2:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <HAL_ADC_MspInit+0x78>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e6:	f003 0304 	and.w	r3, r3, #4
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80011ee:	233f      	movs	r3, #63	; 0x3f
 80011f0:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80011f2:	230b      	movs	r3, #11
 80011f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011fa:	f107 0314 	add.w	r3, r7, #20
 80011fe:	4619      	mov	r1, r3
 8001200:	4805      	ldr	r0, [pc, #20]	; (8001218 <HAL_ADC_MspInit+0x7c>)
 8001202:	f001 fd49 	bl	8002c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001206:	bf00      	nop
 8001208:	3728      	adds	r7, #40	; 0x28
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	50040000 	.word	0x50040000
 8001214:	40021000 	.word	0x40021000
 8001218:	48000800 	.word	0x48000800

0800121c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b0ae      	sub	sp, #184	; 0xb8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001234:	f107 0310 	add.w	r3, r7, #16
 8001238:	2294      	movs	r2, #148	; 0x94
 800123a:	2100      	movs	r1, #0
 800123c:	4618      	mov	r0, r3
 800123e:	f005 f8d5 	bl	80063ec <memset>
  if(DFSDM1_Init == 0)
 8001242:	4b25      	ldr	r3, [pc, #148]	; (80012d8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d142      	bne.n	80012d0 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800124a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800124e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001250:	2300      	movs	r3, #0
 8001252:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001256:	f107 0310 	add.w	r3, r7, #16
 800125a:	4618      	mov	r0, r3
 800125c:	f003 fc92 	bl	8004b84 <HAL_RCCEx_PeriphCLKConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001266:	f7ff ff6f 	bl	8001148 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800126a:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <HAL_DFSDM_ChannelMspInit+0xc0>)
 800126c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800126e:	4a1b      	ldr	r2, [pc, #108]	; (80012dc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001270:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001274:	6613      	str	r3, [r2, #96]	; 0x60
 8001276:	4b19      	ldr	r3, [pc, #100]	; (80012dc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800127a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001282:	4b16      	ldr	r3, [pc, #88]	; (80012dc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	4a15      	ldr	r2, [pc, #84]	; (80012dc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001288:	f043 0310 	orr.w	r3, r3, #16
 800128c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128e:	4b13      	ldr	r3, [pc, #76]	; (80012dc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	f003 0310 	and.w	r3, r3, #16
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800129a:	f44f 7320 	mov.w	r3, #640	; 0x280
 800129e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a2:	2302      	movs	r3, #2
 80012a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ae:	2300      	movs	r3, #0
 80012b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80012b4:	2306      	movs	r3, #6
 80012b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012ba:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012be:	4619      	mov	r1, r3
 80012c0:	4807      	ldr	r0, [pc, #28]	; (80012e0 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80012c2:	f001 fce9 	bl	8002c98 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80012c6:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	3301      	adds	r3, #1
 80012cc:	4a02      	ldr	r2, [pc, #8]	; (80012d8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80012ce:	6013      	str	r3, [r2, #0]
  }

}
 80012d0:	bf00      	nop
 80012d2:	37b8      	adds	r7, #184	; 0xb8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	200004dc 	.word	0x200004dc
 80012dc:	40021000 	.word	0x40021000
 80012e0:	48001000 	.word	0x48001000

080012e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b0b0      	sub	sp, #192	; 0xc0
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012fc:	f107 0318 	add.w	r3, r7, #24
 8001300:	2294      	movs	r2, #148	; 0x94
 8001302:	2100      	movs	r1, #0
 8001304:	4618      	mov	r0, r3
 8001306:	f005 f871 	bl	80063ec <memset>
  if(hi2c->Instance==I2C1)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a42      	ldr	r2, [pc, #264]	; (8001418 <HAL_I2C_MspInit+0x134>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d13c      	bne.n	800138e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001314:	2340      	movs	r3, #64	; 0x40
 8001316:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001318:	2300      	movs	r3, #0
 800131a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800131c:	f107 0318 	add.w	r3, r7, #24
 8001320:	4618      	mov	r0, r3
 8001322:	f003 fc2f 	bl	8004b84 <HAL_RCCEx_PeriphCLKConfig>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800132c:	f7ff ff0c 	bl	8001148 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001330:	4b3a      	ldr	r3, [pc, #232]	; (800141c <HAL_I2C_MspInit+0x138>)
 8001332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001334:	4a39      	ldr	r2, [pc, #228]	; (800141c <HAL_I2C_MspInit+0x138>)
 8001336:	f043 0302 	orr.w	r3, r3, #2
 800133a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800133c:	4b37      	ldr	r3, [pc, #220]	; (800141c <HAL_I2C_MspInit+0x138>)
 800133e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001340:	f003 0302 	and.w	r3, r3, #2
 8001344:	617b      	str	r3, [r7, #20]
 8001346:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001348:	f44f 7340 	mov.w	r3, #768	; 0x300
 800134c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001350:	2312      	movs	r3, #18
 8001352:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001356:	2301      	movs	r3, #1
 8001358:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135c:	2303      	movs	r3, #3
 800135e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001362:	2304      	movs	r3, #4
 8001364:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001368:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800136c:	4619      	mov	r1, r3
 800136e:	482c      	ldr	r0, [pc, #176]	; (8001420 <HAL_I2C_MspInit+0x13c>)
 8001370:	f001 fc92 	bl	8002c98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001374:	4b29      	ldr	r3, [pc, #164]	; (800141c <HAL_I2C_MspInit+0x138>)
 8001376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001378:	4a28      	ldr	r2, [pc, #160]	; (800141c <HAL_I2C_MspInit+0x138>)
 800137a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800137e:	6593      	str	r3, [r2, #88]	; 0x58
 8001380:	4b26      	ldr	r3, [pc, #152]	; (800141c <HAL_I2C_MspInit+0x138>)
 8001382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001384:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800138c:	e040      	b.n	8001410 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a24      	ldr	r2, [pc, #144]	; (8001424 <HAL_I2C_MspInit+0x140>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d13b      	bne.n	8001410 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001398:	2380      	movs	r3, #128	; 0x80
 800139a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800139c:	2300      	movs	r3, #0
 800139e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013a0:	f107 0318 	add.w	r3, r7, #24
 80013a4:	4618      	mov	r0, r3
 80013a6:	f003 fbed 	bl	8004b84 <HAL_RCCEx_PeriphCLKConfig>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 80013b0:	f7ff feca 	bl	8001148 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b4:	4b19      	ldr	r3, [pc, #100]	; (800141c <HAL_I2C_MspInit+0x138>)
 80013b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b8:	4a18      	ldr	r2, [pc, #96]	; (800141c <HAL_I2C_MspInit+0x138>)
 80013ba:	f043 0302 	orr.w	r3, r3, #2
 80013be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c0:	4b16      	ldr	r3, [pc, #88]	; (800141c <HAL_I2C_MspInit+0x138>)
 80013c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80013cc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013d4:	2312      	movs	r3, #18
 80013d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013da:	2301      	movs	r3, #1
 80013dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e0:	2303      	movs	r3, #3
 80013e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80013e6:	2304      	movs	r3, #4
 80013e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013f0:	4619      	mov	r1, r3
 80013f2:	480b      	ldr	r0, [pc, #44]	; (8001420 <HAL_I2C_MspInit+0x13c>)
 80013f4:	f001 fc50 	bl	8002c98 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013f8:	4b08      	ldr	r3, [pc, #32]	; (800141c <HAL_I2C_MspInit+0x138>)
 80013fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013fc:	4a07      	ldr	r2, [pc, #28]	; (800141c <HAL_I2C_MspInit+0x138>)
 80013fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001402:	6593      	str	r3, [r2, #88]	; 0x58
 8001404:	4b05      	ldr	r3, [pc, #20]	; (800141c <HAL_I2C_MspInit+0x138>)
 8001406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001408:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	68bb      	ldr	r3, [r7, #8]
}
 8001410:	bf00      	nop
 8001412:	37c0      	adds	r7, #192	; 0xc0
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40005400 	.word	0x40005400
 800141c:	40021000 	.word	0x40021000
 8001420:	48000400 	.word	0x48000400
 8001424:	40005800 	.word	0x40005800

08001428 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b0b0      	sub	sp, #192	; 0xc0
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001430:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001440:	f107 0318 	add.w	r3, r7, #24
 8001444:	2294      	movs	r2, #148	; 0x94
 8001446:	2100      	movs	r1, #0
 8001448:	4618      	mov	r0, r3
 800144a:	f004 ffcf 	bl	80063ec <memset>
  if(hospi->Instance==OCTOSPI1)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a28      	ldr	r2, [pc, #160]	; (80014f4 <HAL_OSPI_MspInit+0xcc>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d149      	bne.n	80014ec <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001458:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800145c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800145e:	2300      	movs	r3, #0
 8001460:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001464:	f107 0318 	add.w	r3, r7, #24
 8001468:	4618      	mov	r0, r3
 800146a:	f003 fb8b 	bl	8004b84 <HAL_RCCEx_PeriphCLKConfig>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8001474:	f7ff fe68 	bl	8001148 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8001478:	4b1f      	ldr	r3, [pc, #124]	; (80014f8 <HAL_OSPI_MspInit+0xd0>)
 800147a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147c:	4a1e      	ldr	r2, [pc, #120]	; (80014f8 <HAL_OSPI_MspInit+0xd0>)
 800147e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001482:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001484:	4b1c      	ldr	r3, [pc, #112]	; (80014f8 <HAL_OSPI_MspInit+0xd0>)
 8001486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001488:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800148c:	617b      	str	r3, [r7, #20]
 800148e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001490:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <HAL_OSPI_MspInit+0xd0>)
 8001492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001494:	4a18      	ldr	r2, [pc, #96]	; (80014f8 <HAL_OSPI_MspInit+0xd0>)
 8001496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800149a:	6513      	str	r3, [r2, #80]	; 0x50
 800149c:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <HAL_OSPI_MspInit+0xd0>)
 800149e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a4:	613b      	str	r3, [r7, #16]
 80014a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014a8:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <HAL_OSPI_MspInit+0xd0>)
 80014aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ac:	4a12      	ldr	r2, [pc, #72]	; (80014f8 <HAL_OSPI_MspInit+0xd0>)
 80014ae:	f043 0310 	orr.w	r3, r3, #16
 80014b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b4:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <HAL_OSPI_MspInit+0xd0>)
 80014b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b8:	f003 0310 	and.w	r3, r3, #16
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80014c0:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80014c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	2302      	movs	r3, #2
 80014ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d4:	2303      	movs	r3, #3
 80014d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80014da:	230a      	movs	r3, #10
 80014dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014e0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80014e4:	4619      	mov	r1, r3
 80014e6:	4805      	ldr	r0, [pc, #20]	; (80014fc <HAL_OSPI_MspInit+0xd4>)
 80014e8:	f001 fbd6 	bl	8002c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 80014ec:	bf00      	nop
 80014ee:	37c0      	adds	r7, #192	; 0xc0
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	a0001000 	.word	0xa0001000
 80014f8:	40021000 	.word	0x40021000
 80014fc:	48001000 	.word	0x48001000

08001500 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08c      	sub	sp, #48	; 0x30
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	f107 031c 	add.w	r3, r7, #28
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a2f      	ldr	r2, [pc, #188]	; (80015dc <HAL_SPI_MspInit+0xdc>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d129      	bne.n	8001576 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001522:	4b2f      	ldr	r3, [pc, #188]	; (80015e0 <HAL_SPI_MspInit+0xe0>)
 8001524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001526:	4a2e      	ldr	r2, [pc, #184]	; (80015e0 <HAL_SPI_MspInit+0xe0>)
 8001528:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800152c:	6613      	str	r3, [r2, #96]	; 0x60
 800152e:	4b2c      	ldr	r3, [pc, #176]	; (80015e0 <HAL_SPI_MspInit+0xe0>)
 8001530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001532:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001536:	61bb      	str	r3, [r7, #24]
 8001538:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153a:	4b29      	ldr	r3, [pc, #164]	; (80015e0 <HAL_SPI_MspInit+0xe0>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153e:	4a28      	ldr	r2, [pc, #160]	; (80015e0 <HAL_SPI_MspInit+0xe0>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001546:	4b26      	ldr	r3, [pc, #152]	; (80015e0 <HAL_SPI_MspInit+0xe0>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001552:	23e0      	movs	r3, #224	; 0xe0
 8001554:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001556:	2302      	movs	r3, #2
 8001558:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155e:	2303      	movs	r3, #3
 8001560:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001562:	2305      	movs	r3, #5
 8001564:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001566:	f107 031c 	add.w	r3, r7, #28
 800156a:	4619      	mov	r1, r3
 800156c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001570:	f001 fb92 	bl	8002c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001574:	e02d      	b.n	80015d2 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a1a      	ldr	r2, [pc, #104]	; (80015e4 <HAL_SPI_MspInit+0xe4>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d128      	bne.n	80015d2 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001580:	4b17      	ldr	r3, [pc, #92]	; (80015e0 <HAL_SPI_MspInit+0xe0>)
 8001582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001584:	4a16      	ldr	r2, [pc, #88]	; (80015e0 <HAL_SPI_MspInit+0xe0>)
 8001586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800158a:	6593      	str	r3, [r2, #88]	; 0x58
 800158c:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <HAL_SPI_MspInit+0xe0>)
 800158e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001590:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <HAL_SPI_MspInit+0xe0>)
 800159a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159c:	4a10      	ldr	r2, [pc, #64]	; (80015e0 <HAL_SPI_MspInit+0xe0>)
 800159e:	f043 0304 	orr.w	r3, r3, #4
 80015a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015a4:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <HAL_SPI_MspInit+0xe0>)
 80015a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80015b0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80015b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015be:	2303      	movs	r3, #3
 80015c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015c2:	2306      	movs	r3, #6
 80015c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c6:	f107 031c 	add.w	r3, r7, #28
 80015ca:	4619      	mov	r1, r3
 80015cc:	4806      	ldr	r0, [pc, #24]	; (80015e8 <HAL_SPI_MspInit+0xe8>)
 80015ce:	f001 fb63 	bl	8002c98 <HAL_GPIO_Init>
}
 80015d2:	bf00      	nop
 80015d4:	3730      	adds	r7, #48	; 0x30
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40013000 	.word	0x40013000
 80015e0:	40021000 	.word	0x40021000
 80015e4:	40003c00 	.word	0x40003c00
 80015e8:	48000800 	.word	0x48000800

080015ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b0b4      	sub	sp, #208	; 0xd0
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001604:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001608:	2294      	movs	r2, #148	; 0x94
 800160a:	2100      	movs	r1, #0
 800160c:	4618      	mov	r0, r3
 800160e:	f004 feed 	bl	80063ec <memset>
  if(huart->Instance==UART4)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a83      	ldr	r2, [pc, #524]	; (8001824 <HAL_UART_MspInit+0x238>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d13c      	bne.n	8001696 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800161c:	2308      	movs	r3, #8
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001620:	2300      	movs	r3, #0
 8001622:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001624:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001628:	4618      	mov	r0, r3
 800162a:	f003 faab 	bl	8004b84 <HAL_RCCEx_PeriphCLKConfig>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001634:	f7ff fd88 	bl	8001148 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001638:	4b7b      	ldr	r3, [pc, #492]	; (8001828 <HAL_UART_MspInit+0x23c>)
 800163a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800163c:	4a7a      	ldr	r2, [pc, #488]	; (8001828 <HAL_UART_MspInit+0x23c>)
 800163e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001642:	6593      	str	r3, [r2, #88]	; 0x58
 8001644:	4b78      	ldr	r3, [pc, #480]	; (8001828 <HAL_UART_MspInit+0x23c>)
 8001646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001648:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001650:	4b75      	ldr	r3, [pc, #468]	; (8001828 <HAL_UART_MspInit+0x23c>)
 8001652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001654:	4a74      	ldr	r2, [pc, #464]	; (8001828 <HAL_UART_MspInit+0x23c>)
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800165c:	4b72      	ldr	r3, [pc, #456]	; (8001828 <HAL_UART_MspInit+0x23c>)
 800165e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	623b      	str	r3, [r7, #32]
 8001666:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001668:	2303      	movs	r3, #3
 800166a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166e:	2302      	movs	r3, #2
 8001670:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167a:	2303      	movs	r3, #3
 800167c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001680:	2308      	movs	r3, #8
 8001682:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001686:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800168a:	4619      	mov	r1, r3
 800168c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001690:	f001 fb02 	bl	8002c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001694:	e0c2      	b.n	800181c <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART1)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a64      	ldr	r2, [pc, #400]	; (800182c <HAL_UART_MspInit+0x240>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d13b      	bne.n	8001718 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80016a0:	2301      	movs	r3, #1
 80016a2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80016a4:	2300      	movs	r3, #0
 80016a6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ac:	4618      	mov	r0, r3
 80016ae:	f003 fa69 	bl	8004b84 <HAL_RCCEx_PeriphCLKConfig>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80016b8:	f7ff fd46 	bl	8001148 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80016bc:	4b5a      	ldr	r3, [pc, #360]	; (8001828 <HAL_UART_MspInit+0x23c>)
 80016be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016c0:	4a59      	ldr	r2, [pc, #356]	; (8001828 <HAL_UART_MspInit+0x23c>)
 80016c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016c6:	6613      	str	r3, [r2, #96]	; 0x60
 80016c8:	4b57      	ldr	r3, [pc, #348]	; (8001828 <HAL_UART_MspInit+0x23c>)
 80016ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016d0:	61fb      	str	r3, [r7, #28]
 80016d2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d4:	4b54      	ldr	r3, [pc, #336]	; (8001828 <HAL_UART_MspInit+0x23c>)
 80016d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d8:	4a53      	ldr	r2, [pc, #332]	; (8001828 <HAL_UART_MspInit+0x23c>)
 80016da:	f043 0302 	orr.w	r3, r3, #2
 80016de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e0:	4b51      	ldr	r3, [pc, #324]	; (8001828 <HAL_UART_MspInit+0x23c>)
 80016e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	61bb      	str	r3, [r7, #24]
 80016ea:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80016ec:	23c0      	movs	r3, #192	; 0xc0
 80016ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fe:	2303      	movs	r3, #3
 8001700:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001704:	2307      	movs	r3, #7
 8001706:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800170e:	4619      	mov	r1, r3
 8001710:	4847      	ldr	r0, [pc, #284]	; (8001830 <HAL_UART_MspInit+0x244>)
 8001712:	f001 fac1 	bl	8002c98 <HAL_GPIO_Init>
}
 8001716:	e081      	b.n	800181c <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a45      	ldr	r2, [pc, #276]	; (8001834 <HAL_UART_MspInit+0x248>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d13b      	bne.n	800179a <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001722:	2302      	movs	r3, #2
 8001724:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001726:	2300      	movs	r3, #0
 8001728:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800172a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800172e:	4618      	mov	r0, r3
 8001730:	f003 fa28 	bl	8004b84 <HAL_RCCEx_PeriphCLKConfig>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <HAL_UART_MspInit+0x152>
      Error_Handler();
 800173a:	f7ff fd05 	bl	8001148 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800173e:	4b3a      	ldr	r3, [pc, #232]	; (8001828 <HAL_UART_MspInit+0x23c>)
 8001740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001742:	4a39      	ldr	r2, [pc, #228]	; (8001828 <HAL_UART_MspInit+0x23c>)
 8001744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001748:	6593      	str	r3, [r2, #88]	; 0x58
 800174a:	4b37      	ldr	r3, [pc, #220]	; (8001828 <HAL_UART_MspInit+0x23c>)
 800174c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001752:	617b      	str	r3, [r7, #20]
 8001754:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001756:	4b34      	ldr	r3, [pc, #208]	; (8001828 <HAL_UART_MspInit+0x23c>)
 8001758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175a:	4a33      	ldr	r2, [pc, #204]	; (8001828 <HAL_UART_MspInit+0x23c>)
 800175c:	f043 0308 	orr.w	r3, r3, #8
 8001760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001762:	4b31      	ldr	r3, [pc, #196]	; (8001828 <HAL_UART_MspInit+0x23c>)
 8001764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	613b      	str	r3, [r7, #16]
 800176c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800176e:	2378      	movs	r3, #120	; 0x78
 8001770:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001774:	2302      	movs	r3, #2
 8001776:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001780:	2303      	movs	r3, #3
 8001782:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001786:	2307      	movs	r3, #7
 8001788:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800178c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001790:	4619      	mov	r1, r3
 8001792:	4829      	ldr	r0, [pc, #164]	; (8001838 <HAL_UART_MspInit+0x24c>)
 8001794:	f001 fa80 	bl	8002c98 <HAL_GPIO_Init>
}
 8001798:	e040      	b.n	800181c <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART3)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a27      	ldr	r2, [pc, #156]	; (800183c <HAL_UART_MspInit+0x250>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d13b      	bne.n	800181c <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80017a4:	2304      	movs	r3, #4
 80017a6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80017a8:	2300      	movs	r3, #0
 80017aa:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017b0:	4618      	mov	r0, r3
 80017b2:	f003 f9e7 	bl	8004b84 <HAL_RCCEx_PeriphCLKConfig>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 80017bc:	f7ff fcc4 	bl	8001148 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80017c0:	4b19      	ldr	r3, [pc, #100]	; (8001828 <HAL_UART_MspInit+0x23c>)
 80017c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c4:	4a18      	ldr	r2, [pc, #96]	; (8001828 <HAL_UART_MspInit+0x23c>)
 80017c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ca:	6593      	str	r3, [r2, #88]	; 0x58
 80017cc:	4b16      	ldr	r3, [pc, #88]	; (8001828 <HAL_UART_MspInit+0x23c>)
 80017ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017d8:	4b13      	ldr	r3, [pc, #76]	; (8001828 <HAL_UART_MspInit+0x23c>)
 80017da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017dc:	4a12      	ldr	r2, [pc, #72]	; (8001828 <HAL_UART_MspInit+0x23c>)
 80017de:	f043 0308 	orr.w	r3, r3, #8
 80017e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017e4:	4b10      	ldr	r3, [pc, #64]	; (8001828 <HAL_UART_MspInit+0x23c>)
 80017e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e8:	f003 0308 	and.w	r3, r3, #8
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80017f0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f8:	2302      	movs	r3, #2
 80017fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001804:	2303      	movs	r3, #3
 8001806:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800180a:	2307      	movs	r3, #7
 800180c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001810:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001814:	4619      	mov	r1, r3
 8001816:	4808      	ldr	r0, [pc, #32]	; (8001838 <HAL_UART_MspInit+0x24c>)
 8001818:	f001 fa3e 	bl	8002c98 <HAL_GPIO_Init>
}
 800181c:	bf00      	nop
 800181e:	37d0      	adds	r7, #208	; 0xd0
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40004c00 	.word	0x40004c00
 8001828:	40021000 	.word	0x40021000
 800182c:	40013800 	.word	0x40013800
 8001830:	48000400 	.word	0x48000400
 8001834:	40004400 	.word	0x40004400
 8001838:	48000c00 	.word	0x48000c00
 800183c:	40004800 	.word	0x40004800

08001840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001844:	e7fe      	b.n	8001844 <NMI_Handler+0x4>

08001846 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800184a:	e7fe      	b.n	800184a <HardFault_Handler+0x4>

0800184c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <MemManage_Handler+0x4>

08001852 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001856:	e7fe      	b.n	8001856 <BusFault_Handler+0x4>

08001858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800185c:	e7fe      	b.n	800185c <UsageFault_Handler+0x4>

0800185e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800188c:	f000 f8c0 	bl	8001a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}

08001894 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001898:	2020      	movs	r0, #32
 800189a:	f001 fba7 	bl	8002fec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800189e:	2040      	movs	r0, #64	; 0x40
 80018a0:	f001 fba4 	bl	8002fec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80018a4:	2080      	movs	r0, #128	; 0x80
 80018a6:	f001 fba1 	bl	8002fec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80018aa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80018ae:	f001 fb9d 	bl	8002fec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 80018ba:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80018be:	f001 fb95 	bl	8002fec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80018c2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80018c6:	f001 fb91 	bl	8002fec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 80018ca:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80018ce:	f001 fb8d 	bl	8002fec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80018d2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80018d6:	f001 fb89 	bl	8002fec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80018da:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80018de:	f001 fb85 	bl	8002fec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80018e2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80018e6:	f001 fb81 	bl	8002fec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
	...

080018f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <SystemInit+0x20>)
 80018f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018fa:	4a05      	ldr	r2, [pc, #20]	; (8001910 <SystemInit+0x20>)
 80018fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001900:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001914:	f8df d034 	ldr.w	sp, [pc, #52]	; 800194c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001918:	f7ff ffea 	bl	80018f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800191c:	480c      	ldr	r0, [pc, #48]	; (8001950 <LoopForever+0x6>)
  ldr r1, =_edata
 800191e:	490d      	ldr	r1, [pc, #52]	; (8001954 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001920:	4a0d      	ldr	r2, [pc, #52]	; (8001958 <LoopForever+0xe>)
  movs r3, #0
 8001922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001924:	e002      	b.n	800192c <LoopCopyDataInit>

08001926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800192a:	3304      	adds	r3, #4

0800192c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800192c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800192e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001930:	d3f9      	bcc.n	8001926 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001932:	4a0a      	ldr	r2, [pc, #40]	; (800195c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001934:	4c0a      	ldr	r4, [pc, #40]	; (8001960 <LoopForever+0x16>)
  movs r3, #0
 8001936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001938:	e001      	b.n	800193e <LoopFillZerobss>

0800193a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800193a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800193c:	3204      	adds	r2, #4

0800193e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800193e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001940:	d3fb      	bcc.n	800193a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001942:	f004 fd5b 	bl	80063fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001946:	f7fe fdd7 	bl	80004f8 <main>

0800194a <LoopForever>:

LoopForever:
    b LoopForever
 800194a:	e7fe      	b.n	800194a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800194c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001954:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001958:	080064dc 	.word	0x080064dc
  ldr r2, =_sbss
 800195c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001960:	20000508 	.word	0x20000508

08001964 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001964:	e7fe      	b.n	8001964 <ADC1_IRQHandler>

08001966 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800196c:	2300      	movs	r3, #0
 800196e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001970:	2003      	movs	r0, #3
 8001972:	f001 f843 	bl	80029fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001976:	2000      	movs	r0, #0
 8001978:	f000 f80e 	bl	8001998 <HAL_InitTick>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d002      	beq.n	8001988 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	71fb      	strb	r3, [r7, #7]
 8001986:	e001      	b.n	800198c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001988:	f7ff fbe4 	bl	8001154 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800198c:	79fb      	ldrb	r3, [r7, #7]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
	...

08001998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019a0:	2300      	movs	r3, #0
 80019a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019a4:	4b17      	ldr	r3, [pc, #92]	; (8001a04 <HAL_InitTick+0x6c>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d023      	beq.n	80019f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019ac:	4b16      	ldr	r3, [pc, #88]	; (8001a08 <HAL_InitTick+0x70>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <HAL_InitTick+0x6c>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	4619      	mov	r1, r3
 80019b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80019be:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c2:	4618      	mov	r0, r3
 80019c4:	f001 f84f 	bl	8002a66 <HAL_SYSTICK_Config>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d10f      	bne.n	80019ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b0f      	cmp	r3, #15
 80019d2:	d809      	bhi.n	80019e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d4:	2200      	movs	r2, #0
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	f04f 30ff 	mov.w	r0, #4294967295
 80019dc:	f001 f819 	bl	8002a12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019e0:	4a0a      	ldr	r2, [pc, #40]	; (8001a0c <HAL_InitTick+0x74>)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	e007      	b.n	80019f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	73fb      	strb	r3, [r7, #15]
 80019ec:	e004      	b.n	80019f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	73fb      	strb	r3, [r7, #15]
 80019f2:	e001      	b.n	80019f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000008 	.word	0x20000008
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	20000004 	.word	0x20000004

08001a10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <HAL_IncTick+0x20>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_IncTick+0x24>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4413      	add	r3, r2
 8001a20:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <HAL_IncTick+0x24>)
 8001a22:	6013      	str	r3, [r2, #0]
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	20000008 	.word	0x20000008
 8001a34:	200004e0 	.word	0x200004e0

08001a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a3c:	4b03      	ldr	r3, [pc, #12]	; (8001a4c <HAL_GetTick+0x14>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	200004e0 	.word	0x200004e0

08001a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a58:	f7ff ffee 	bl	8001a38 <HAL_GetTick>
 8001a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a68:	d005      	beq.n	8001a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <HAL_Delay+0x44>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4413      	add	r3, r2
 8001a74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a76:	bf00      	nop
 8001a78:	f7ff ffde 	bl	8001a38 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d8f7      	bhi.n	8001a78 <HAL_Delay+0x28>
  {
  }
}
 8001a88:	bf00      	nop
 8001a8a:	bf00      	nop
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000008 	.word	0x20000008

08001a98 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	431a      	orrs	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	609a      	str	r2, [r3, #8]
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
 8001ac6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b087      	sub	sp, #28
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
 8001b0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	3360      	adds	r3, #96	; 0x60
 8001b12:	461a      	mov	r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <LL_ADC_SetOffset+0x44>)
 8001b22:	4013      	ands	r3, r2
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b38:	bf00      	nop
 8001b3a:	371c      	adds	r7, #28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	03fff000 	.word	0x03fff000

08001b48 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	3360      	adds	r3, #96	; 0x60
 8001b56:	461a      	mov	r2, r3
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b087      	sub	sp, #28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	3360      	adds	r3, #96	; 0x60
 8001b84:	461a      	mov	r2, r3
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b9e:	bf00      	nop
 8001ba0:	371c      	adds	r7, #28
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
 8001bb2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	615a      	str	r2, [r3, #20]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b087      	sub	sp, #28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	3330      	adds	r3, #48	; 0x30
 8001be0:	461a      	mov	r2, r3
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	0a1b      	lsrs	r3, r3, #8
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	f003 030c 	and.w	r3, r3, #12
 8001bec:	4413      	add	r3, r2
 8001bee:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	f003 031f 	and.w	r3, r3, #31
 8001bfa:	211f      	movs	r1, #31
 8001bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	401a      	ands	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	0e9b      	lsrs	r3, r3, #26
 8001c08:	f003 011f 	and.w	r1, r3, #31
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	f003 031f 	and.w	r3, r3, #31
 8001c12:	fa01 f303 	lsl.w	r3, r1, r3
 8001c16:	431a      	orrs	r2, r3
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c1c:	bf00      	nop
 8001c1e:	371c      	adds	r7, #28
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b087      	sub	sp, #28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	3314      	adds	r3, #20
 8001c38:	461a      	mov	r2, r3
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	0e5b      	lsrs	r3, r3, #25
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	4413      	add	r3, r2
 8001c46:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	0d1b      	lsrs	r3, r3, #20
 8001c50:	f003 031f 	and.w	r3, r3, #31
 8001c54:	2107      	movs	r1, #7
 8001c56:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	401a      	ands	r2, r3
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	0d1b      	lsrs	r3, r3, #20
 8001c62:	f003 031f 	and.w	r3, r3, #31
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c72:	bf00      	nop
 8001c74:	371c      	adds	r7, #28
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
	...

08001c80 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	401a      	ands	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f003 0318 	and.w	r3, r3, #24
 8001ca2:	4908      	ldr	r1, [pc, #32]	; (8001cc4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ca4:	40d9      	lsrs	r1, r3
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	400b      	ands	r3, r1
 8001caa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001cb6:	bf00      	nop
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	0007ffff 	.word	0x0007ffff

08001cc8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001cd8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6093      	str	r3, [r2, #8]
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d00:	d101      	bne.n	8001d06 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001d24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d28:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d50:	d101      	bne.n	8001d56 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d52:	2301      	movs	r3, #1
 8001d54:	e000      	b.n	8001d58 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d101      	bne.n	8001d7c <LL_ADC_IsEnabled+0x18>
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e000      	b.n	8001d7e <LL_ADC_IsEnabled+0x1a>
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 0304 	and.w	r3, r3, #4
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	d101      	bne.n	8001da2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f003 0308 	and.w	r3, r3, #8
 8001dc0:	2b08      	cmp	r3, #8
 8001dc2:	d101      	bne.n	8001dc8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e000      	b.n	8001dca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
	...

08001dd8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b088      	sub	sp, #32
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001de0:	2300      	movs	r3, #0
 8001de2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e129      	b.n	8002046 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d109      	bne.n	8001e14 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f7ff f9cb 	bl	800119c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ff67 	bl	8001cec <LL_ADC_IsDeepPowerDownEnabled>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d004      	beq.n	8001e2e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff ff4d 	bl	8001cc8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff ff82 	bl	8001d3c <LL_ADC_IsInternalRegulatorEnabled>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d115      	bne.n	8001e6a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff ff66 	bl	8001d14 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e48:	4b81      	ldr	r3, [pc, #516]	; (8002050 <HAL_ADC_Init+0x278>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	099b      	lsrs	r3, r3, #6
 8001e4e:	4a81      	ldr	r2, [pc, #516]	; (8002054 <HAL_ADC_Init+0x27c>)
 8001e50:	fba2 2303 	umull	r2, r3, r2, r3
 8001e54:	099b      	lsrs	r3, r3, #6
 8001e56:	3301      	adds	r3, #1
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e5c:	e002      	b.n	8001e64 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	3b01      	subs	r3, #1
 8001e62:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1f9      	bne.n	8001e5e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff ff64 	bl	8001d3c <LL_ADC_IsInternalRegulatorEnabled>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10d      	bne.n	8001e96 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7e:	f043 0210 	orr.w	r2, r3, #16
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8a:	f043 0201 	orr.w	r2, r3, #1
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff ff75 	bl	8001d8a <LL_ADC_REG_IsConversionOngoing>
 8001ea0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea6:	f003 0310 	and.w	r3, r3, #16
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f040 80c2 	bne.w	8002034 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f040 80be 	bne.w	8002034 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ebc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ec0:	f043 0202 	orr.w	r2, r3, #2
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff49 	bl	8001d64 <LL_ADC_IsEnabled>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d10b      	bne.n	8001ef0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ed8:	485f      	ldr	r0, [pc, #380]	; (8002058 <HAL_ADC_Init+0x280>)
 8001eda:	f7ff ff43 	bl	8001d64 <LL_ADC_IsEnabled>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d105      	bne.n	8001ef0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	4619      	mov	r1, r3
 8001eea:	485c      	ldr	r0, [pc, #368]	; (800205c <HAL_ADC_Init+0x284>)
 8001eec:	f7ff fdd4 	bl	8001a98 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	7e5b      	ldrb	r3, [r3, #25]
 8001ef4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001efa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001f00:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001f06:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f0e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d106      	bne.n	8001f2c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f22:	3b01      	subs	r3, #1
 8001f24:	045b      	lsls	r3, r3, #17
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d009      	beq.n	8001f48 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f38:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f40:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	4b44      	ldr	r3, [pc, #272]	; (8002060 <HAL_ADC_Init+0x288>)
 8001f50:	4013      	ands	r3, r2
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	6812      	ldr	r2, [r2, #0]
 8001f56:	69b9      	ldr	r1, [r7, #24]
 8001f58:	430b      	orrs	r3, r1
 8001f5a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff ff25 	bl	8001db0 <LL_ADC_INJ_IsConversionOngoing>
 8001f66:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d140      	bne.n	8001ff0 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d13d      	bne.n	8001ff0 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	7e1b      	ldrb	r3, [r3, #24]
 8001f7c:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f7e:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f86:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f96:	f023 0306 	bic.w	r3, r3, #6
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	6812      	ldr	r2, [r2, #0]
 8001f9e:	69b9      	ldr	r1, [r7, #24]
 8001fa0:	430b      	orrs	r3, r1
 8001fa2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d118      	bne.n	8001fe0 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001fb8:	f023 0304 	bic.w	r3, r3, #4
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001fc4:	4311      	orrs	r1, r2
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001fca:	4311      	orrs	r1, r2
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f042 0201 	orr.w	r2, r2, #1
 8001fdc:	611a      	str	r2, [r3, #16]
 8001fde:	e007      	b.n	8001ff0 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	691a      	ldr	r2, [r3, #16]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0201 	bic.w	r2, r2, #1
 8001fee:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d10c      	bne.n	8002012 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	f023 010f 	bic.w	r1, r3, #15
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	1e5a      	subs	r2, r3, #1
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	430a      	orrs	r2, r1
 800200e:	631a      	str	r2, [r3, #48]	; 0x30
 8002010:	e007      	b.n	8002022 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 020f 	bic.w	r2, r2, #15
 8002020:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002026:	f023 0303 	bic.w	r3, r3, #3
 800202a:	f043 0201 	orr.w	r2, r3, #1
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	659a      	str	r2, [r3, #88]	; 0x58
 8002032:	e007      	b.n	8002044 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002038:	f043 0210 	orr.w	r2, r3, #16
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002044:	7ffb      	ldrb	r3, [r7, #31]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3720      	adds	r7, #32
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000000 	.word	0x20000000
 8002054:	053e2d63 	.word	0x053e2d63
 8002058:	50040000 	.word	0x50040000
 800205c:	50040300 	.word	0x50040300
 8002060:	fff0c007 	.word	0xfff0c007

08002064 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b0b6      	sub	sp, #216	; 0xd8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800206e:	2300      	movs	r3, #0
 8002070:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002074:	2300      	movs	r3, #0
 8002076:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800207e:	2b01      	cmp	r3, #1
 8002080:	d101      	bne.n	8002086 <HAL_ADC_ConfigChannel+0x22>
 8002082:	2302      	movs	r3, #2
 8002084:	e3d5      	b.n	8002832 <HAL_ADC_ConfigChannel+0x7ce>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff fe79 	bl	8001d8a <LL_ADC_REG_IsConversionOngoing>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	f040 83ba 	bne.w	8002814 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2b05      	cmp	r3, #5
 80020ae:	d824      	bhi.n	80020fa <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	3b02      	subs	r3, #2
 80020b6:	2b03      	cmp	r3, #3
 80020b8:	d81b      	bhi.n	80020f2 <HAL_ADC_ConfigChannel+0x8e>
 80020ba:	a201      	add	r2, pc, #4	; (adr r2, 80020c0 <HAL_ADC_ConfigChannel+0x5c>)
 80020bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c0:	080020d1 	.word	0x080020d1
 80020c4:	080020d9 	.word	0x080020d9
 80020c8:	080020e1 	.word	0x080020e1
 80020cc:	080020e9 	.word	0x080020e9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80020d0:	230c      	movs	r3, #12
 80020d2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80020d6:	e010      	b.n	80020fa <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80020d8:	2312      	movs	r3, #18
 80020da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80020de:	e00c      	b.n	80020fa <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80020e0:	2318      	movs	r3, #24
 80020e2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80020e6:	e008      	b.n	80020fa <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80020e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80020f0:	e003      	b.n	80020fa <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80020f2:	2306      	movs	r3, #6
 80020f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80020f8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6818      	ldr	r0, [r3, #0]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	461a      	mov	r2, r3
 8002104:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002108:	f7ff fd62 	bl	8001bd0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff fe3a 	bl	8001d8a <LL_ADC_REG_IsConversionOngoing>
 8002116:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff fe46 	bl	8001db0 <LL_ADC_INJ_IsConversionOngoing>
 8002124:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002128:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800212c:	2b00      	cmp	r3, #0
 800212e:	f040 81bf 	bne.w	80024b0 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002132:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002136:	2b00      	cmp	r3, #0
 8002138:	f040 81ba 	bne.w	80024b0 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002144:	d10f      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6818      	ldr	r0, [r3, #0]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2200      	movs	r2, #0
 8002150:	4619      	mov	r1, r3
 8002152:	f7ff fd69 	bl	8001c28 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff fd23 	bl	8001baa <LL_ADC_SetSamplingTimeCommonConfig>
 8002164:	e00e      	b.n	8002184 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6818      	ldr	r0, [r3, #0]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	6819      	ldr	r1, [r3, #0]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	461a      	mov	r2, r3
 8002174:	f7ff fd58 	bl	8001c28 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2100      	movs	r1, #0
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff fd13 	bl	8001baa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	695a      	ldr	r2, [r3, #20]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	08db      	lsrs	r3, r3, #3
 8002190:	f003 0303 	and.w	r3, r3, #3
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	d00a      	beq.n	80021bc <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6818      	ldr	r0, [r3, #0]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	6919      	ldr	r1, [r3, #16]
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021b6:	f7ff fca3 	bl	8001b00 <LL_ADC_SetOffset>
 80021ba:	e179      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2100      	movs	r1, #0
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff fcc0 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 80021c8:	4603      	mov	r3, r0
 80021ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10a      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x184>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2100      	movs	r1, #0
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff fcb5 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 80021de:	4603      	mov	r3, r0
 80021e0:	0e9b      	lsrs	r3, r3, #26
 80021e2:	f003 021f 	and.w	r2, r3, #31
 80021e6:	e01e      	b.n	8002226 <HAL_ADC_ConfigChannel+0x1c2>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2100      	movs	r1, #0
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff fcaa 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 80021f4:	4603      	mov	r3, r0
 80021f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80021fe:	fa93 f3a3 	rbit	r3, r3
 8002202:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002206:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800220a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800220e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002216:	2320      	movs	r3, #32
 8002218:	e004      	b.n	8002224 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800221a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800221e:	fab3 f383 	clz	r3, r3
 8002222:	b2db      	uxtb	r3, r3
 8002224:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800222e:	2b00      	cmp	r3, #0
 8002230:	d105      	bne.n	800223e <HAL_ADC_ConfigChannel+0x1da>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	0e9b      	lsrs	r3, r3, #26
 8002238:	f003 031f 	and.w	r3, r3, #31
 800223c:	e018      	b.n	8002270 <HAL_ADC_ConfigChannel+0x20c>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002246:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800224a:	fa93 f3a3 	rbit	r3, r3
 800224e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002252:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002256:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800225a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002262:	2320      	movs	r3, #32
 8002264:	e004      	b.n	8002270 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002266:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800226a:	fab3 f383 	clz	r3, r3
 800226e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002270:	429a      	cmp	r2, r3
 8002272:	d106      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2200      	movs	r2, #0
 800227a:	2100      	movs	r1, #0
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff fc79 	bl	8001b74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2101      	movs	r1, #1
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff fc5d 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 800228e:	4603      	mov	r3, r0
 8002290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10a      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x24a>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2101      	movs	r1, #1
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff fc52 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 80022a4:	4603      	mov	r3, r0
 80022a6:	0e9b      	lsrs	r3, r3, #26
 80022a8:	f003 021f 	and.w	r2, r3, #31
 80022ac:	e01e      	b.n	80022ec <HAL_ADC_ConfigChannel+0x288>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2101      	movs	r1, #1
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff fc47 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 80022ba:	4603      	mov	r3, r0
 80022bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80022c4:	fa93 f3a3 	rbit	r3, r3
 80022c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80022cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80022d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80022dc:	2320      	movs	r3, #32
 80022de:	e004      	b.n	80022ea <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80022e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022e4:	fab3 f383 	clz	r3, r3
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d105      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x2a0>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	0e9b      	lsrs	r3, r3, #26
 80022fe:	f003 031f 	and.w	r3, r3, #31
 8002302:	e018      	b.n	8002336 <HAL_ADC_ConfigChannel+0x2d2>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002310:	fa93 f3a3 	rbit	r3, r3
 8002314:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002318:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800231c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002320:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002328:	2320      	movs	r3, #32
 800232a:	e004      	b.n	8002336 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 800232c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002330:	fab3 f383 	clz	r3, r3
 8002334:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002336:	429a      	cmp	r2, r3
 8002338:	d106      	bne.n	8002348 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2200      	movs	r2, #0
 8002340:	2101      	movs	r1, #1
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff fc16 	bl	8001b74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2102      	movs	r1, #2
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff fbfa 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 8002354:	4603      	mov	r3, r0
 8002356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10a      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x310>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2102      	movs	r1, #2
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff fbef 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 800236a:	4603      	mov	r3, r0
 800236c:	0e9b      	lsrs	r3, r3, #26
 800236e:	f003 021f 	and.w	r2, r3, #31
 8002372:	e01e      	b.n	80023b2 <HAL_ADC_ConfigChannel+0x34e>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2102      	movs	r1, #2
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff fbe4 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 8002380:	4603      	mov	r3, r0
 8002382:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002386:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800238a:	fa93 f3a3 	rbit	r3, r3
 800238e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002392:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002396:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800239a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80023a2:	2320      	movs	r3, #32
 80023a4:	e004      	b.n	80023b0 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80023a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023aa:	fab3 f383 	clz	r3, r3
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d105      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x366>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	0e9b      	lsrs	r3, r3, #26
 80023c4:	f003 031f 	and.w	r3, r3, #31
 80023c8:	e014      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x390>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023d2:	fa93 f3a3 	rbit	r3, r3
 80023d6:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80023d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80023de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80023e6:	2320      	movs	r3, #32
 80023e8:	e004      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80023ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023ee:	fab3 f383 	clz	r3, r3
 80023f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d106      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2200      	movs	r2, #0
 80023fe:	2102      	movs	r1, #2
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff fbb7 	bl	8001b74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2103      	movs	r1, #3
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff fb9b 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 8002412:	4603      	mov	r3, r0
 8002414:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10a      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x3ce>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2103      	movs	r1, #3
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff fb90 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 8002428:	4603      	mov	r3, r0
 800242a:	0e9b      	lsrs	r3, r3, #26
 800242c:	f003 021f 	and.w	r2, r3, #31
 8002430:	e017      	b.n	8002462 <HAL_ADC_ConfigChannel+0x3fe>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2103      	movs	r1, #3
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff fb85 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 800243e:	4603      	mov	r3, r0
 8002440:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002442:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002444:	fa93 f3a3 	rbit	r3, r3
 8002448:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800244a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800244c:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800244e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002454:	2320      	movs	r3, #32
 8002456:	e003      	b.n	8002460 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002458:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800245a:	fab3 f383 	clz	r3, r3
 800245e:	b2db      	uxtb	r3, r3
 8002460:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800246a:	2b00      	cmp	r3, #0
 800246c:	d105      	bne.n	800247a <HAL_ADC_ConfigChannel+0x416>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	0e9b      	lsrs	r3, r3, #26
 8002474:	f003 031f 	and.w	r3, r3, #31
 8002478:	e011      	b.n	800249e <HAL_ADC_ConfigChannel+0x43a>
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002480:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002482:	fa93 f3a3 	rbit	r3, r3
 8002486:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002488:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800248a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800248c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002492:	2320      	movs	r3, #32
 8002494:	e003      	b.n	800249e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002496:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002498:	fab3 f383 	clz	r3, r3
 800249c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800249e:	429a      	cmp	r2, r3
 80024a0:	d106      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2200      	movs	r2, #0
 80024a8:	2103      	movs	r1, #3
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff fb62 	bl	8001b74 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff fc55 	bl	8001d64 <LL_ADC_IsEnabled>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f040 813f 	bne.w	8002740 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6818      	ldr	r0, [r3, #0]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	6819      	ldr	r1, [r3, #0]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	461a      	mov	r2, r3
 80024d0:	f7ff fbd6 	bl	8001c80 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	4a8e      	ldr	r2, [pc, #568]	; (8002714 <HAL_ADC_ConfigChannel+0x6b0>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	f040 8130 	bne.w	8002740 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10b      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x4a4>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	0e9b      	lsrs	r3, r3, #26
 80024f6:	3301      	adds	r3, #1
 80024f8:	f003 031f 	and.w	r3, r3, #31
 80024fc:	2b09      	cmp	r3, #9
 80024fe:	bf94      	ite	ls
 8002500:	2301      	movls	r3, #1
 8002502:	2300      	movhi	r3, #0
 8002504:	b2db      	uxtb	r3, r3
 8002506:	e019      	b.n	800253c <HAL_ADC_ConfigChannel+0x4d8>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002510:	fa93 f3a3 	rbit	r3, r3
 8002514:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002516:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002518:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800251a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002520:	2320      	movs	r3, #32
 8002522:	e003      	b.n	800252c <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002524:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002526:	fab3 f383 	clz	r3, r3
 800252a:	b2db      	uxtb	r3, r3
 800252c:	3301      	adds	r3, #1
 800252e:	f003 031f 	and.w	r3, r3, #31
 8002532:	2b09      	cmp	r3, #9
 8002534:	bf94      	ite	ls
 8002536:	2301      	movls	r3, #1
 8002538:	2300      	movhi	r3, #0
 800253a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800253c:	2b00      	cmp	r3, #0
 800253e:	d079      	beq.n	8002634 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002548:	2b00      	cmp	r3, #0
 800254a:	d107      	bne.n	800255c <HAL_ADC_ConfigChannel+0x4f8>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	0e9b      	lsrs	r3, r3, #26
 8002552:	3301      	adds	r3, #1
 8002554:	069b      	lsls	r3, r3, #26
 8002556:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800255a:	e015      	b.n	8002588 <HAL_ADC_ConfigChannel+0x524>
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002564:	fa93 f3a3 	rbit	r3, r3
 8002568:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800256a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800256c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800256e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002574:	2320      	movs	r3, #32
 8002576:	e003      	b.n	8002580 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800257a:	fab3 f383 	clz	r3, r3
 800257e:	b2db      	uxtb	r3, r3
 8002580:	3301      	adds	r3, #1
 8002582:	069b      	lsls	r3, r3, #26
 8002584:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002590:	2b00      	cmp	r3, #0
 8002592:	d109      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x544>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	0e9b      	lsrs	r3, r3, #26
 800259a:	3301      	adds	r3, #1
 800259c:	f003 031f 	and.w	r3, r3, #31
 80025a0:	2101      	movs	r1, #1
 80025a2:	fa01 f303 	lsl.w	r3, r1, r3
 80025a6:	e017      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x574>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025b0:	fa93 f3a3 	rbit	r3, r3
 80025b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80025b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025b8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80025ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80025c0:	2320      	movs	r3, #32
 80025c2:	e003      	b.n	80025cc <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80025c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025c6:	fab3 f383 	clz	r3, r3
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	3301      	adds	r3, #1
 80025ce:	f003 031f 	and.w	r3, r3, #31
 80025d2:	2101      	movs	r1, #1
 80025d4:	fa01 f303 	lsl.w	r3, r1, r3
 80025d8:	ea42 0103 	orr.w	r1, r2, r3
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d10a      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x59a>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	0e9b      	lsrs	r3, r3, #26
 80025ee:	3301      	adds	r3, #1
 80025f0:	f003 021f 	and.w	r2, r3, #31
 80025f4:	4613      	mov	r3, r2
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	4413      	add	r3, r2
 80025fa:	051b      	lsls	r3, r3, #20
 80025fc:	e018      	b.n	8002630 <HAL_ADC_ConfigChannel+0x5cc>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002606:	fa93 f3a3 	rbit	r3, r3
 800260a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800260c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002616:	2320      	movs	r3, #32
 8002618:	e003      	b.n	8002622 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800261a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800261c:	fab3 f383 	clz	r3, r3
 8002620:	b2db      	uxtb	r3, r3
 8002622:	3301      	adds	r3, #1
 8002624:	f003 021f 	and.w	r2, r3, #31
 8002628:	4613      	mov	r3, r2
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	4413      	add	r3, r2
 800262e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002630:	430b      	orrs	r3, r1
 8002632:	e080      	b.n	8002736 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800263c:	2b00      	cmp	r3, #0
 800263e:	d107      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x5ec>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	0e9b      	lsrs	r3, r3, #26
 8002646:	3301      	adds	r3, #1
 8002648:	069b      	lsls	r3, r3, #26
 800264a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800264e:	e015      	b.n	800267c <HAL_ADC_ConfigChannel+0x618>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002658:	fa93 f3a3 	rbit	r3, r3
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002668:	2320      	movs	r3, #32
 800266a:	e003      	b.n	8002674 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 800266c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266e:	fab3 f383 	clz	r3, r3
 8002672:	b2db      	uxtb	r3, r3
 8002674:	3301      	adds	r3, #1
 8002676:	069b      	lsls	r3, r3, #26
 8002678:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002684:	2b00      	cmp	r3, #0
 8002686:	d109      	bne.n	800269c <HAL_ADC_ConfigChannel+0x638>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	0e9b      	lsrs	r3, r3, #26
 800268e:	3301      	adds	r3, #1
 8002690:	f003 031f 	and.w	r3, r3, #31
 8002694:	2101      	movs	r1, #1
 8002696:	fa01 f303 	lsl.w	r3, r1, r3
 800269a:	e017      	b.n	80026cc <HAL_ADC_ConfigChannel+0x668>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	fa93 f3a3 	rbit	r3, r3
 80026a8:	61bb      	str	r3, [r7, #24]
  return result;
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80026b4:	2320      	movs	r3, #32
 80026b6:	e003      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80026b8:	6a3b      	ldr	r3, [r7, #32]
 80026ba:	fab3 f383 	clz	r3, r3
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	3301      	adds	r3, #1
 80026c2:	f003 031f 	and.w	r3, r3, #31
 80026c6:	2101      	movs	r1, #1
 80026c8:	fa01 f303 	lsl.w	r3, r1, r3
 80026cc:	ea42 0103 	orr.w	r1, r2, r3
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10d      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0x694>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	0e9b      	lsrs	r3, r3, #26
 80026e2:	3301      	adds	r3, #1
 80026e4:	f003 021f 	and.w	r2, r3, #31
 80026e8:	4613      	mov	r3, r2
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	4413      	add	r3, r2
 80026ee:	3b1e      	subs	r3, #30
 80026f0:	051b      	lsls	r3, r3, #20
 80026f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026f6:	e01d      	b.n	8002734 <HAL_ADC_ConfigChannel+0x6d0>
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	fa93 f3a3 	rbit	r3, r3
 8002704:	60fb      	str	r3, [r7, #12]
  return result;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d103      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002710:	2320      	movs	r3, #32
 8002712:	e005      	b.n	8002720 <HAL_ADC_ConfigChannel+0x6bc>
 8002714:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	fab3 f383 	clz	r3, r3
 800271e:	b2db      	uxtb	r3, r3
 8002720:	3301      	adds	r3, #1
 8002722:	f003 021f 	and.w	r2, r3, #31
 8002726:	4613      	mov	r3, r2
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	4413      	add	r3, r2
 800272c:	3b1e      	subs	r3, #30
 800272e:	051b      	lsls	r3, r3, #20
 8002730:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002734:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800273a:	4619      	mov	r1, r3
 800273c:	f7ff fa74 	bl	8001c28 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	4b3d      	ldr	r3, [pc, #244]	; (800283c <HAL_ADC_ConfigChannel+0x7d8>)
 8002746:	4013      	ands	r3, r2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d06c      	beq.n	8002826 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800274c:	483c      	ldr	r0, [pc, #240]	; (8002840 <HAL_ADC_ConfigChannel+0x7dc>)
 800274e:	f7ff f9c9 	bl	8001ae4 <LL_ADC_GetCommonPathInternalCh>
 8002752:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a3a      	ldr	r2, [pc, #232]	; (8002844 <HAL_ADC_ConfigChannel+0x7e0>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d127      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002760:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002764:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d121      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a35      	ldr	r2, [pc, #212]	; (8002848 <HAL_ADC_ConfigChannel+0x7e4>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d157      	bne.n	8002826 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002776:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800277a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800277e:	4619      	mov	r1, r3
 8002780:	482f      	ldr	r0, [pc, #188]	; (8002840 <HAL_ADC_ConfigChannel+0x7dc>)
 8002782:	f7ff f99c 	bl	8001abe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002786:	4b31      	ldr	r3, [pc, #196]	; (800284c <HAL_ADC_ConfigChannel+0x7e8>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	099b      	lsrs	r3, r3, #6
 800278c:	4a30      	ldr	r2, [pc, #192]	; (8002850 <HAL_ADC_ConfigChannel+0x7ec>)
 800278e:	fba2 2303 	umull	r2, r3, r2, r3
 8002792:	099b      	lsrs	r3, r3, #6
 8002794:	1c5a      	adds	r2, r3, #1
 8002796:	4613      	mov	r3, r2
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	4413      	add	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80027a0:	e002      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	3b01      	subs	r3, #1
 80027a6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f9      	bne.n	80027a2 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027ae:	e03a      	b.n	8002826 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a27      	ldr	r2, [pc, #156]	; (8002854 <HAL_ADC_ConfigChannel+0x7f0>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d113      	bne.n	80027e2 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10d      	bne.n	80027e2 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a1f      	ldr	r2, [pc, #124]	; (8002848 <HAL_ADC_ConfigChannel+0x7e4>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d12a      	bne.n	8002826 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027d8:	4619      	mov	r1, r3
 80027da:	4819      	ldr	r0, [pc, #100]	; (8002840 <HAL_ADC_ConfigChannel+0x7dc>)
 80027dc:	f7ff f96f 	bl	8001abe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027e0:	e021      	b.n	8002826 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a1c      	ldr	r2, [pc, #112]	; (8002858 <HAL_ADC_ConfigChannel+0x7f4>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d11c      	bne.n	8002826 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d116      	bne.n	8002826 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a12      	ldr	r2, [pc, #72]	; (8002848 <HAL_ADC_ConfigChannel+0x7e4>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d111      	bne.n	8002826 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002802:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002806:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800280a:	4619      	mov	r1, r3
 800280c:	480c      	ldr	r0, [pc, #48]	; (8002840 <HAL_ADC_ConfigChannel+0x7dc>)
 800280e:	f7ff f956 	bl	8001abe <LL_ADC_SetCommonPathInternalCh>
 8002812:	e008      	b.n	8002826 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002818:	f043 0220 	orr.w	r2, r3, #32
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800282e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002832:	4618      	mov	r0, r3
 8002834:	37d8      	adds	r7, #216	; 0xd8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	80080000 	.word	0x80080000
 8002840:	50040300 	.word	0x50040300
 8002844:	c7520000 	.word	0xc7520000
 8002848:	50040000 	.word	0x50040000
 800284c:	20000000 	.word	0x20000000
 8002850:	053e2d63 	.word	0x053e2d63
 8002854:	cb840000 	.word	0xcb840000
 8002858:	80000001 	.word	0x80000001

0800285c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800286c:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <__NVIC_SetPriorityGrouping+0x44>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002878:	4013      	ands	r3, r2
 800287a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002884:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800288c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800288e:	4a04      	ldr	r2, [pc, #16]	; (80028a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	60d3      	str	r3, [r2, #12]
}
 8002894:	bf00      	nop
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	e000ed00 	.word	0xe000ed00

080028a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028a8:	4b04      	ldr	r3, [pc, #16]	; (80028bc <__NVIC_GetPriorityGrouping+0x18>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	0a1b      	lsrs	r3, r3, #8
 80028ae:	f003 0307 	and.w	r3, r3, #7
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	e000ed00 	.word	0xe000ed00

080028c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	db0b      	blt.n	80028ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	f003 021f 	and.w	r2, r3, #31
 80028d8:	4907      	ldr	r1, [pc, #28]	; (80028f8 <__NVIC_EnableIRQ+0x38>)
 80028da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028de:	095b      	lsrs	r3, r3, #5
 80028e0:	2001      	movs	r0, #1
 80028e2:	fa00 f202 	lsl.w	r2, r0, r2
 80028e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	e000e100 	.word	0xe000e100

080028fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	6039      	str	r1, [r7, #0]
 8002906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290c:	2b00      	cmp	r3, #0
 800290e:	db0a      	blt.n	8002926 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	b2da      	uxtb	r2, r3
 8002914:	490c      	ldr	r1, [pc, #48]	; (8002948 <__NVIC_SetPriority+0x4c>)
 8002916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291a:	0112      	lsls	r2, r2, #4
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	440b      	add	r3, r1
 8002920:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002924:	e00a      	b.n	800293c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	b2da      	uxtb	r2, r3
 800292a:	4908      	ldr	r1, [pc, #32]	; (800294c <__NVIC_SetPriority+0x50>)
 800292c:	79fb      	ldrb	r3, [r7, #7]
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	3b04      	subs	r3, #4
 8002934:	0112      	lsls	r2, r2, #4
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	440b      	add	r3, r1
 800293a:	761a      	strb	r2, [r3, #24]
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	e000e100 	.word	0xe000e100
 800294c:	e000ed00 	.word	0xe000ed00

08002950 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002950:	b480      	push	{r7}
 8002952:	b089      	sub	sp, #36	; 0x24
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f1c3 0307 	rsb	r3, r3, #7
 800296a:	2b04      	cmp	r3, #4
 800296c:	bf28      	it	cs
 800296e:	2304      	movcs	r3, #4
 8002970:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	3304      	adds	r3, #4
 8002976:	2b06      	cmp	r3, #6
 8002978:	d902      	bls.n	8002980 <NVIC_EncodePriority+0x30>
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	3b03      	subs	r3, #3
 800297e:	e000      	b.n	8002982 <NVIC_EncodePriority+0x32>
 8002980:	2300      	movs	r3, #0
 8002982:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002984:	f04f 32ff 	mov.w	r2, #4294967295
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43da      	mvns	r2, r3
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	401a      	ands	r2, r3
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002998:	f04f 31ff 	mov.w	r1, #4294967295
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	fa01 f303 	lsl.w	r3, r1, r3
 80029a2:	43d9      	mvns	r1, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a8:	4313      	orrs	r3, r2
         );
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3724      	adds	r7, #36	; 0x24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
	...

080029b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029c8:	d301      	bcc.n	80029ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ca:	2301      	movs	r3, #1
 80029cc:	e00f      	b.n	80029ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ce:	4a0a      	ldr	r2, [pc, #40]	; (80029f8 <SysTick_Config+0x40>)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3b01      	subs	r3, #1
 80029d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029d6:	210f      	movs	r1, #15
 80029d8:	f04f 30ff 	mov.w	r0, #4294967295
 80029dc:	f7ff ff8e 	bl	80028fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029e0:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <SysTick_Config+0x40>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029e6:	4b04      	ldr	r3, [pc, #16]	; (80029f8 <SysTick_Config+0x40>)
 80029e8:	2207      	movs	r2, #7
 80029ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	e000e010 	.word	0xe000e010

080029fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f7ff ff29 	bl	800285c <__NVIC_SetPriorityGrouping>
}
 8002a0a:	bf00      	nop
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b086      	sub	sp, #24
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	4603      	mov	r3, r0
 8002a1a:	60b9      	str	r1, [r7, #8]
 8002a1c:	607a      	str	r2, [r7, #4]
 8002a1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a24:	f7ff ff3e 	bl	80028a4 <__NVIC_GetPriorityGrouping>
 8002a28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	68b9      	ldr	r1, [r7, #8]
 8002a2e:	6978      	ldr	r0, [r7, #20]
 8002a30:	f7ff ff8e 	bl	8002950 <NVIC_EncodePriority>
 8002a34:	4602      	mov	r2, r0
 8002a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a3a:	4611      	mov	r1, r2
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff ff5d 	bl	80028fc <__NVIC_SetPriority>
}
 8002a42:	bf00      	nop
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b082      	sub	sp, #8
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	4603      	mov	r3, r0
 8002a52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff ff31 	bl	80028c0 <__NVIC_EnableIRQ>
}
 8002a5e:	bf00      	nop
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b082      	sub	sp, #8
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7ff ffa2 	bl	80029b8 <SysTick_Config>
 8002a74:	4603      	mov	r3, r0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
	...

08002a80 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e0ac      	b.n	8002bec <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 f8b2 	bl	8002c00 <DFSDM_GetChannelFromInstance>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	4a55      	ldr	r2, [pc, #340]	; (8002bf4 <HAL_DFSDM_ChannelInit+0x174>)
 8002aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e09f      	b.n	8002bec <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7fe fbb5 	bl	800121c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002ab2:	4b51      	ldr	r3, [pc, #324]	; (8002bf8 <HAL_DFSDM_ChannelInit+0x178>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	4a4f      	ldr	r2, [pc, #316]	; (8002bf8 <HAL_DFSDM_ChannelInit+0x178>)
 8002aba:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002abc:	4b4e      	ldr	r3, [pc, #312]	; (8002bf8 <HAL_DFSDM_ChannelInit+0x178>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d125      	bne.n	8002b10 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002ac4:	4b4d      	ldr	r3, [pc, #308]	; (8002bfc <HAL_DFSDM_ChannelInit+0x17c>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a4c      	ldr	r2, [pc, #304]	; (8002bfc <HAL_DFSDM_ChannelInit+0x17c>)
 8002aca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ace:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002ad0:	4b4a      	ldr	r3, [pc, #296]	; (8002bfc <HAL_DFSDM_ChannelInit+0x17c>)
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	4948      	ldr	r1, [pc, #288]	; (8002bfc <HAL_DFSDM_ChannelInit+0x17c>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002ade:	4b47      	ldr	r3, [pc, #284]	; (8002bfc <HAL_DFSDM_ChannelInit+0x17c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a46      	ldr	r2, [pc, #280]	; (8002bfc <HAL_DFSDM_ChannelInit+0x17c>)
 8002ae4:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002ae8:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	791b      	ldrb	r3, [r3, #4]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d108      	bne.n	8002b04 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002af2:	4b42      	ldr	r3, [pc, #264]	; (8002bfc <HAL_DFSDM_ChannelInit+0x17c>)
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	3b01      	subs	r3, #1
 8002afc:	041b      	lsls	r3, r3, #16
 8002afe:	493f      	ldr	r1, [pc, #252]	; (8002bfc <HAL_DFSDM_ChannelInit+0x17c>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002b04:	4b3d      	ldr	r3, [pc, #244]	; (8002bfc <HAL_DFSDM_ChannelInit+0x17c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a3c      	ldr	r2, [pc, #240]	; (8002bfc <HAL_DFSDM_ChannelInit+0x17c>)
 8002b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b0e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002b1e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6819      	ldr	r1, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002b2e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002b34:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 020f 	bic.w	r2, r2, #15
 8002b4c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6819      	ldr	r1, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002b74:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	6899      	ldr	r1, [r3, #8]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b84:	3b01      	subs	r3, #1
 8002b86:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f002 0207 	and.w	r2, r2, #7
 8002ba0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6859      	ldr	r1, [r3, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bac:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002bcc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f000 f810 	bl	8002c00 <DFSDM_GetChannelFromInstance>
 8002be0:	4602      	mov	r2, r0
 8002be2:	4904      	ldr	r1, [pc, #16]	; (8002bf4 <HAL_DFSDM_ChannelInit+0x174>)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	200004e8 	.word	0x200004e8
 8002bf8:	200004e4 	.word	0x200004e4
 8002bfc:	40016000 	.word	0x40016000

08002c00 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a1c      	ldr	r2, [pc, #112]	; (8002c7c <DFSDM_GetChannelFromInstance+0x7c>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d102      	bne.n	8002c16 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002c10:	2300      	movs	r3, #0
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	e02b      	b.n	8002c6e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a19      	ldr	r2, [pc, #100]	; (8002c80 <DFSDM_GetChannelFromInstance+0x80>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d102      	bne.n	8002c24 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	e024      	b.n	8002c6e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a17      	ldr	r2, [pc, #92]	; (8002c84 <DFSDM_GetChannelFromInstance+0x84>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d102      	bne.n	8002c32 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	e01d      	b.n	8002c6e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a14      	ldr	r2, [pc, #80]	; (8002c88 <DFSDM_GetChannelFromInstance+0x88>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d102      	bne.n	8002c40 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002c3a:	2304      	movs	r3, #4
 8002c3c:	60fb      	str	r3, [r7, #12]
 8002c3e:	e016      	b.n	8002c6e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a12      	ldr	r2, [pc, #72]	; (8002c8c <DFSDM_GetChannelFromInstance+0x8c>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d102      	bne.n	8002c4e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002c48:	2305      	movs	r3, #5
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	e00f      	b.n	8002c6e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a0f      	ldr	r2, [pc, #60]	; (8002c90 <DFSDM_GetChannelFromInstance+0x90>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d102      	bne.n	8002c5c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002c56:	2306      	movs	r3, #6
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	e008      	b.n	8002c6e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a0d      	ldr	r2, [pc, #52]	; (8002c94 <DFSDM_GetChannelFromInstance+0x94>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d102      	bne.n	8002c6a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002c64:	2307      	movs	r3, #7
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	e001      	b.n	8002c6e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr
 8002c7c:	40016000 	.word	0x40016000
 8002c80:	40016020 	.word	0x40016020
 8002c84:	40016040 	.word	0x40016040
 8002c88:	40016080 	.word	0x40016080
 8002c8c:	400160a0 	.word	0x400160a0
 8002c90:	400160c0 	.word	0x400160c0
 8002c94:	400160e0 	.word	0x400160e0

08002c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b087      	sub	sp, #28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ca6:	e166      	b.n	8002f76 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	2101      	movs	r1, #1
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 8158 	beq.w	8002f70 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f003 0303 	and.w	r3, r3, #3
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d005      	beq.n	8002cd8 <HAL_GPIO_Init+0x40>
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f003 0303 	and.w	r3, r3, #3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d130      	bne.n	8002d3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	2203      	movs	r2, #3
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	4013      	ands	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d0e:	2201      	movs	r2, #1
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	43db      	mvns	r3, r3
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	091b      	lsrs	r3, r3, #4
 8002d24:	f003 0201 	and.w	r2, r3, #1
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	2b03      	cmp	r3, #3
 8002d44:	d017      	beq.n	8002d76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	2203      	movs	r2, #3
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43db      	mvns	r3, r3
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	689a      	ldr	r2, [r3, #8]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d123      	bne.n	8002dca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	08da      	lsrs	r2, r3, #3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	3208      	adds	r2, #8
 8002d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	220f      	movs	r2, #15
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	4013      	ands	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	691a      	ldr	r2, [r3, #16]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	08da      	lsrs	r2, r3, #3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3208      	adds	r2, #8
 8002dc4:	6939      	ldr	r1, [r7, #16]
 8002dc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	2203      	movs	r2, #3
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4013      	ands	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f003 0203 	and.w	r2, r3, #3
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 80b2 	beq.w	8002f70 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e0c:	4b61      	ldr	r3, [pc, #388]	; (8002f94 <HAL_GPIO_Init+0x2fc>)
 8002e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e10:	4a60      	ldr	r2, [pc, #384]	; (8002f94 <HAL_GPIO_Init+0x2fc>)
 8002e12:	f043 0301 	orr.w	r3, r3, #1
 8002e16:	6613      	str	r3, [r2, #96]	; 0x60
 8002e18:	4b5e      	ldr	r3, [pc, #376]	; (8002f94 <HAL_GPIO_Init+0x2fc>)
 8002e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	60bb      	str	r3, [r7, #8]
 8002e22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e24:	4a5c      	ldr	r2, [pc, #368]	; (8002f98 <HAL_GPIO_Init+0x300>)
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	089b      	lsrs	r3, r3, #2
 8002e2a:	3302      	adds	r3, #2
 8002e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f003 0303 	and.w	r3, r3, #3
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	220f      	movs	r2, #15
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	43db      	mvns	r3, r3
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	4013      	ands	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e4e:	d02b      	beq.n	8002ea8 <HAL_GPIO_Init+0x210>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a52      	ldr	r2, [pc, #328]	; (8002f9c <HAL_GPIO_Init+0x304>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d025      	beq.n	8002ea4 <HAL_GPIO_Init+0x20c>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a51      	ldr	r2, [pc, #324]	; (8002fa0 <HAL_GPIO_Init+0x308>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d01f      	beq.n	8002ea0 <HAL_GPIO_Init+0x208>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a50      	ldr	r2, [pc, #320]	; (8002fa4 <HAL_GPIO_Init+0x30c>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d019      	beq.n	8002e9c <HAL_GPIO_Init+0x204>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a4f      	ldr	r2, [pc, #316]	; (8002fa8 <HAL_GPIO_Init+0x310>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d013      	beq.n	8002e98 <HAL_GPIO_Init+0x200>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a4e      	ldr	r2, [pc, #312]	; (8002fac <HAL_GPIO_Init+0x314>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d00d      	beq.n	8002e94 <HAL_GPIO_Init+0x1fc>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a4d      	ldr	r2, [pc, #308]	; (8002fb0 <HAL_GPIO_Init+0x318>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d007      	beq.n	8002e90 <HAL_GPIO_Init+0x1f8>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a4c      	ldr	r2, [pc, #304]	; (8002fb4 <HAL_GPIO_Init+0x31c>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d101      	bne.n	8002e8c <HAL_GPIO_Init+0x1f4>
 8002e88:	2307      	movs	r3, #7
 8002e8a:	e00e      	b.n	8002eaa <HAL_GPIO_Init+0x212>
 8002e8c:	2308      	movs	r3, #8
 8002e8e:	e00c      	b.n	8002eaa <HAL_GPIO_Init+0x212>
 8002e90:	2306      	movs	r3, #6
 8002e92:	e00a      	b.n	8002eaa <HAL_GPIO_Init+0x212>
 8002e94:	2305      	movs	r3, #5
 8002e96:	e008      	b.n	8002eaa <HAL_GPIO_Init+0x212>
 8002e98:	2304      	movs	r3, #4
 8002e9a:	e006      	b.n	8002eaa <HAL_GPIO_Init+0x212>
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e004      	b.n	8002eaa <HAL_GPIO_Init+0x212>
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	e002      	b.n	8002eaa <HAL_GPIO_Init+0x212>
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e000      	b.n	8002eaa <HAL_GPIO_Init+0x212>
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	f002 0203 	and.w	r2, r2, #3
 8002eb0:	0092      	lsls	r2, r2, #2
 8002eb2:	4093      	lsls	r3, r2
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002eba:	4937      	ldr	r1, [pc, #220]	; (8002f98 <HAL_GPIO_Init+0x300>)
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	089b      	lsrs	r3, r3, #2
 8002ec0:	3302      	adds	r3, #2
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ec8:	4b3b      	ldr	r3, [pc, #236]	; (8002fb8 <HAL_GPIO_Init+0x320>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002eec:	4a32      	ldr	r2, [pc, #200]	; (8002fb8 <HAL_GPIO_Init+0x320>)
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ef2:	4b31      	ldr	r3, [pc, #196]	; (8002fb8 <HAL_GPIO_Init+0x320>)
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	43db      	mvns	r3, r3
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	4013      	ands	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f16:	4a28      	ldr	r2, [pc, #160]	; (8002fb8 <HAL_GPIO_Init+0x320>)
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002f1c:	4b26      	ldr	r3, [pc, #152]	; (8002fb8 <HAL_GPIO_Init+0x320>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	43db      	mvns	r3, r3
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f40:	4a1d      	ldr	r2, [pc, #116]	; (8002fb8 <HAL_GPIO_Init+0x320>)
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002f46:	4b1c      	ldr	r3, [pc, #112]	; (8002fb8 <HAL_GPIO_Init+0x320>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	4013      	ands	r3, r2
 8002f54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f6a:	4a13      	ldr	r2, [pc, #76]	; (8002fb8 <HAL_GPIO_Init+0x320>)
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	3301      	adds	r3, #1
 8002f74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f47f ae91 	bne.w	8002ca8 <HAL_GPIO_Init+0x10>
  }
}
 8002f86:	bf00      	nop
 8002f88:	bf00      	nop
 8002f8a:	371c      	adds	r7, #28
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	40021000 	.word	0x40021000
 8002f98:	40010000 	.word	0x40010000
 8002f9c:	48000400 	.word	0x48000400
 8002fa0:	48000800 	.word	0x48000800
 8002fa4:	48000c00 	.word	0x48000c00
 8002fa8:	48001000 	.word	0x48001000
 8002fac:	48001400 	.word	0x48001400
 8002fb0:	48001800 	.word	0x48001800
 8002fb4:	48001c00 	.word	0x48001c00
 8002fb8:	40010400 	.word	0x40010400

08002fbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	807b      	strh	r3, [r7, #2]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fcc:	787b      	ldrb	r3, [r7, #1]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fd2:	887a      	ldrh	r2, [r7, #2]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002fd8:	e002      	b.n	8002fe0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fda:	887a      	ldrh	r2, [r7, #2]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ff6:	4b08      	ldr	r3, [pc, #32]	; (8003018 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ff8:	695a      	ldr	r2, [r3, #20]
 8002ffa:	88fb      	ldrh	r3, [r7, #6]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d006      	beq.n	8003010 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003002:	4a05      	ldr	r2, [pc, #20]	; (8003018 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003004:	88fb      	ldrh	r3, [r7, #6]
 8003006:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003008:	88fb      	ldrh	r3, [r7, #6]
 800300a:	4618      	mov	r0, r3
 800300c:	f7fe f88c 	bl	8001128 <HAL_GPIO_EXTI_Callback>
  }
}
 8003010:	bf00      	nop
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40010400 	.word	0x40010400

0800301c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e08d      	b.n	800314a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d106      	bne.n	8003048 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7fe f94e 	bl	80012e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2224      	movs	r2, #36	; 0x24
 800304c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0201 	bic.w	r2, r2, #1
 800305e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800306c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800307c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d107      	bne.n	8003096 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	689a      	ldr	r2, [r3, #8]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003092:	609a      	str	r2, [r3, #8]
 8003094:	e006      	b.n	80030a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	689a      	ldr	r2, [r3, #8]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80030a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d108      	bne.n	80030be <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030ba:	605a      	str	r2, [r3, #4]
 80030bc:	e007      	b.n	80030ce <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6812      	ldr	r2, [r2, #0]
 80030d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68da      	ldr	r2, [r3, #12]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	691a      	ldr	r2, [r3, #16]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	69d9      	ldr	r1, [r3, #28]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a1a      	ldr	r2, [r3, #32]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	430a      	orrs	r2, r1
 800311a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0201 	orr.w	r2, r2, #1
 800312a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2220      	movs	r2, #32
 8003136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003152:	b480      	push	{r7}
 8003154:	b083      	sub	sp, #12
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
 800315a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b20      	cmp	r3, #32
 8003166:	d138      	bne.n	80031da <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800316e:	2b01      	cmp	r3, #1
 8003170:	d101      	bne.n	8003176 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003172:	2302      	movs	r3, #2
 8003174:	e032      	b.n	80031dc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2224      	movs	r2, #36	; 0x24
 8003182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0201 	bic.w	r2, r2, #1
 8003194:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031a4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6819      	ldr	r1, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f042 0201 	orr.w	r2, r2, #1
 80031c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2220      	movs	r2, #32
 80031ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031d6:	2300      	movs	r3, #0
 80031d8:	e000      	b.n	80031dc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80031da:	2302      	movs	r3, #2
  }
}
 80031dc:	4618      	mov	r0, r3
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b20      	cmp	r3, #32
 80031fc:	d139      	bne.n	8003272 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003204:	2b01      	cmp	r3, #1
 8003206:	d101      	bne.n	800320c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003208:	2302      	movs	r3, #2
 800320a:	e033      	b.n	8003274 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2224      	movs	r2, #36	; 0x24
 8003218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 0201 	bic.w	r2, r2, #1
 800322a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800323a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	021b      	lsls	r3, r3, #8
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	4313      	orrs	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f042 0201 	orr.w	r2, r2, #1
 800325c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2220      	movs	r2, #32
 8003262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800326e:	2300      	movs	r3, #0
 8003270:	e000      	b.n	8003274 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003272:	2302      	movs	r3, #2
  }
}
 8003274:	4618      	mov	r0, r3
 8003276:	3714      	adds	r7, #20
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af02      	add	r7, sp, #8
 8003286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003288:	2300      	movs	r3, #0
 800328a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800328c:	f7fe fbd4 	bl	8001a38 <HAL_GetTick>
 8003290:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d102      	bne.n	800329e <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	73fb      	strb	r3, [r7, #15]
 800329c:	e092      	b.n	80033c4 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f040 808b 	bne.w	80033c4 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7fe f8ba 	bl	8001428 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80032b4:	f241 3188 	movw	r1, #5000	; 0x1388
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 f88b 	bl	80033d4 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	4b42      	ldr	r3, [pc, #264]	; (80033d0 <HAL_OSPI_Init+0x150>)
 80032c6:	4013      	ands	r3, r2
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	68d1      	ldr	r1, [r2, #12]
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	6912      	ldr	r2, [r2, #16]
 80032d0:	3a01      	subs	r2, #1
 80032d2:	0412      	lsls	r2, r2, #16
 80032d4:	4311      	orrs	r1, r2
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	6952      	ldr	r2, [r2, #20]
 80032da:	3a01      	subs	r2, #1
 80032dc:	0212      	lsls	r2, r2, #8
 80032de:	4311      	orrs	r1, r2
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80032e4:	4311      	orrs	r1, r2
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	69d2      	ldr	r2, [r2, #28]
 80032ea:	4311      	orrs	r1, r2
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	6812      	ldr	r2, [r2, #0]
 80032f0:	430b      	orrs	r3, r1
 80032f2:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	0412      	lsls	r2, r2, #16
 80032fe:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	3b01      	subs	r3, #1
 8003310:	021a      	lsls	r2, r3, #8
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	2200      	movs	r2, #0
 8003324:	2120      	movs	r1, #32
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 fb98 	bl	8003a5c <OSPI_WaitFlagStateUntilTimeout>
 800332c:	4603      	mov	r3, r0
 800332e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d146      	bne.n	80033c4 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	1e5a      	subs	r2, r3, #1
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	430a      	orrs	r2, r1
 8003362:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800336c:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003378:	431a      	orrs	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 0201 	orr.w	r2, r2, #1
 8003392:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	2b02      	cmp	r3, #2
 800339a:	d107      	bne.n	80033ac <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f042 0202 	orr.w	r2, r2, #2
 80033aa:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033b4:	d103      	bne.n	80033be <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	645a      	str	r2, [r3, #68]	; 0x44
 80033bc:	e002      	b.n	80033c4 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2202      	movs	r2, #2
 80033c2:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	f8e0f8f4 	.word	0xf8e0f8f4

080033d4 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
	...

080033f4 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b092      	sub	sp, #72	; 0x48
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003400:	2300      	movs	r3, #0
 8003402:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8003406:	2300      	movs	r3, #0
 8003408:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a08      	ldr	r2, [pc, #32]	; (8003434 <HAL_OSPIM_Config+0x40>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d105      	bne.n	8003422 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8003416:	2300      	movs	r3, #0
 8003418:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 800341a:	2301      	movs	r3, #1
 800341c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8003420:	e004      	b.n	800342c <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8003422:	2301      	movs	r3, #1
 8003424:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 8003426:	2300      	movs	r3, #0
 8003428:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800342c:	2300      	movs	r3, #0
 800342e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003432:	e01f      	b.n	8003474 <HAL_OSPIM_Config+0x80>
 8003434:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8003438:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800343c:	3301      	adds	r3, #1
 800343e:	b2d8      	uxtb	r0, r3
 8003440:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003444:	f107 0114 	add.w	r1, r7, #20
 8003448:	4613      	mov	r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4413      	add	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	4619      	mov	r1, r3
 8003454:	f000 fb3a 	bl	8003acc <OSPIM_GetConfig>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d005      	beq.n	800346a <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2208      	movs	r2, #8
 8003468:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800346a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800346e:	3301      	adds	r3, #1
 8003470:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003474:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003478:	2b01      	cmp	r3, #1
 800347a:	d9dd      	bls.n	8003438 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 800347c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003480:	2b00      	cmp	r3, #0
 8003482:	f040 82de 	bne.w	8003a42 <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8003486:	4bc6      	ldr	r3, [pc, #792]	; (80037a0 <HAL_OSPIM_Config+0x3ac>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00b      	beq.n	80034aa <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003492:	4bc3      	ldr	r3, [pc, #780]	; (80037a0 <HAL_OSPIM_Config+0x3ac>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4ac2      	ldr	r2, [pc, #776]	; (80037a0 <HAL_OSPIM_Config+0x3ac>)
 8003498:	f023 0301 	bic.w	r3, r3, #1
 800349c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800349e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80034a2:	f043 0301 	orr.w	r3, r3, #1
 80034a6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80034aa:	4bbe      	ldr	r3, [pc, #760]	; (80037a4 <HAL_OSPIM_Config+0x3b0>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00b      	beq.n	80034ce <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80034b6:	4bbb      	ldr	r3, [pc, #748]	; (80037a4 <HAL_OSPIM_Config+0x3b0>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4aba      	ldr	r2, [pc, #744]	; (80037a4 <HAL_OSPIM_Config+0x3b0>)
 80034bc:	f023 0301 	bic.w	r3, r3, #1
 80034c0:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80034c2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80034c6:	f043 0302 	orr.w	r3, r3, #2
 80034ca:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80034ce:	49b6      	ldr	r1, [pc, #728]	; (80037a8 <HAL_OSPIM_Config+0x3b4>)
 80034d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80034d2:	4613      	mov	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	3348      	adds	r3, #72	; 0x48
 80034dc:	443b      	add	r3, r7
 80034de:	3b2c      	subs	r3, #44	; 0x2c
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	3b01      	subs	r3, #1
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	6859      	ldr	r1, [r3, #4]
 80034ea:	48af      	ldr	r0, [pc, #700]	; (80037a8 <HAL_OSPIM_Config+0x3b4>)
 80034ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80034ee:	4613      	mov	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	3348      	adds	r3, #72	; 0x48
 80034f8:	443b      	add	r3, r7
 80034fa:	3b2c      	subs	r3, #44	; 0x2c
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	3b01      	subs	r3, #1
 8003500:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4403      	add	r3, r0
 8003508:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 800350a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800350c:	4613      	mov	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	3348      	adds	r3, #72	; 0x48
 8003516:	443b      	add	r3, r7
 8003518:	3b34      	subs	r3, #52	; 0x34
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 80a1 	beq.w	8003664 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8003522:	49a1      	ldr	r1, [pc, #644]	; (80037a8 <HAL_OSPIM_Config+0x3b4>)
 8003524:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003526:	4613      	mov	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4413      	add	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	3348      	adds	r3, #72	; 0x48
 8003530:	443b      	add	r3, r7
 8003532:	3b34      	subs	r3, #52	; 0x34
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	3b01      	subs	r3, #1
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	440b      	add	r3, r1
 800353c:	6859      	ldr	r1, [r3, #4]
 800353e:	489a      	ldr	r0, [pc, #616]	; (80037a8 <HAL_OSPIM_Config+0x3b4>)
 8003540:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003542:	4613      	mov	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	4413      	add	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	3348      	adds	r3, #72	; 0x48
 800354c:	443b      	add	r3, r7
 800354e:	3b34      	subs	r3, #52	; 0x34
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	3b01      	subs	r3, #1
 8003554:	f021 0201 	bic.w	r2, r1, #1
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4403      	add	r3, r0
 800355c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800355e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003560:	4613      	mov	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	3348      	adds	r3, #72	; 0x48
 800356a:	443b      	add	r3, r7
 800356c:	3b30      	subs	r3, #48	; 0x30
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d01d      	beq.n	80035b0 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8003574:	498c      	ldr	r1, [pc, #560]	; (80037a8 <HAL_OSPIM_Config+0x3b4>)
 8003576:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003578:	4613      	mov	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4413      	add	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	3348      	adds	r3, #72	; 0x48
 8003582:	443b      	add	r3, r7
 8003584:	3b30      	subs	r3, #48	; 0x30
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	3b01      	subs	r3, #1
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	6859      	ldr	r1, [r3, #4]
 8003590:	4885      	ldr	r0, [pc, #532]	; (80037a8 <HAL_OSPIM_Config+0x3b4>)
 8003592:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003594:	4613      	mov	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	3348      	adds	r3, #72	; 0x48
 800359e:	443b      	add	r3, r7
 80035a0:	3b30      	subs	r3, #48	; 0x30
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	3b01      	subs	r3, #1
 80035a6:	f021 0210 	bic.w	r2, r1, #16
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4403      	add	r3, r0
 80035ae:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80035b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035b2:	4613      	mov	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4413      	add	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	3348      	adds	r3, #72	; 0x48
 80035bc:	443b      	add	r3, r7
 80035be:	3b28      	subs	r3, #40	; 0x28
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d021      	beq.n	800360a <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80035c6:	4978      	ldr	r1, [pc, #480]	; (80037a8 <HAL_OSPIM_Config+0x3b4>)
 80035c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035ca:	4613      	mov	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4413      	add	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	3348      	adds	r3, #72	; 0x48
 80035d4:	443b      	add	r3, r7
 80035d6:	3b28      	subs	r3, #40	; 0x28
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	3b01      	subs	r3, #1
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	440b      	add	r3, r1
 80035e4:	6859      	ldr	r1, [r3, #4]
 80035e6:	4870      	ldr	r0, [pc, #448]	; (80037a8 <HAL_OSPIM_Config+0x3b4>)
 80035e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035ea:	4613      	mov	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4413      	add	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	3348      	adds	r3, #72	; 0x48
 80035f4:	443b      	add	r3, r7
 80035f6:	3b28      	subs	r3, #40	; 0x28
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4403      	add	r3, r0
 8003608:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800360a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800360c:	4613      	mov	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	3348      	adds	r3, #72	; 0x48
 8003616:	443b      	add	r3, r7
 8003618:	3b24      	subs	r3, #36	; 0x24
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d021      	beq.n	8003664 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8003620:	4961      	ldr	r1, [pc, #388]	; (80037a8 <HAL_OSPIM_Config+0x3b4>)
 8003622:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003624:	4613      	mov	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4413      	add	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	3348      	adds	r3, #72	; 0x48
 800362e:	443b      	add	r3, r7
 8003630:	3b24      	subs	r3, #36	; 0x24
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	3b01      	subs	r3, #1
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	440b      	add	r3, r1
 800363e:	6859      	ldr	r1, [r3, #4]
 8003640:	4859      	ldr	r0, [pc, #356]	; (80037a8 <HAL_OSPIM_Config+0x3b4>)
 8003642:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003644:	4613      	mov	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	3348      	adds	r3, #72	; 0x48
 800364e:	443b      	add	r3, r7
 8003650:	3b24      	subs	r3, #36	; 0x24
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	3b01      	subs	r3, #1
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4403      	add	r3, r0
 8003662:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	6819      	ldr	r1, [r3, #0]
 8003668:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800366c:	4613      	mov	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4413      	add	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	3348      	adds	r3, #72	; 0x48
 8003676:	443b      	add	r3, r7
 8003678:	3b34      	subs	r3, #52	; 0x34
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4299      	cmp	r1, r3
 800367e:	d038      	beq.n	80036f2 <HAL_OSPIM_Config+0x2fe>
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	6859      	ldr	r1, [r3, #4]
 8003684:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003688:	4613      	mov	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4413      	add	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	3348      	adds	r3, #72	; 0x48
 8003692:	443b      	add	r3, r7
 8003694:	3b30      	subs	r3, #48	; 0x30
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4299      	cmp	r1, r3
 800369a:	d02a      	beq.n	80036f2 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	6899      	ldr	r1, [r3, #8]
 80036a0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80036a4:	4613      	mov	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	3348      	adds	r3, #72	; 0x48
 80036ae:	443b      	add	r3, r7
 80036b0:	3b2c      	subs	r3, #44	; 0x2c
 80036b2:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80036b4:	4299      	cmp	r1, r3
 80036b6:	d01c      	beq.n	80036f2 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	68d9      	ldr	r1, [r3, #12]
 80036bc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80036c0:	4613      	mov	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	3348      	adds	r3, #72	; 0x48
 80036ca:	443b      	add	r3, r7
 80036cc:	3b28      	subs	r3, #40	; 0x28
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4299      	cmp	r1, r3
 80036d2:	d00e      	beq.n	80036f2 <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	6919      	ldr	r1, [r3, #16]
 80036d8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80036dc:	4613      	mov	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	3348      	adds	r3, #72	; 0x48
 80036e6:	443b      	add	r3, r7
 80036e8:	3b24      	subs	r3, #36	; 0x24
 80036ea:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80036ec:	4299      	cmp	r1, r3
 80036ee:	f040 80d3 	bne.w	8003898 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80036f2:	492d      	ldr	r1, [pc, #180]	; (80037a8 <HAL_OSPIM_Config+0x3b4>)
 80036f4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80036f8:	4613      	mov	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	3348      	adds	r3, #72	; 0x48
 8003702:	443b      	add	r3, r7
 8003704:	3b34      	subs	r3, #52	; 0x34
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	3b01      	subs	r3, #1
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	440b      	add	r3, r1
 800370e:	6859      	ldr	r1, [r3, #4]
 8003710:	4825      	ldr	r0, [pc, #148]	; (80037a8 <HAL_OSPIM_Config+0x3b4>)
 8003712:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003716:	4613      	mov	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4413      	add	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	3348      	adds	r3, #72	; 0x48
 8003720:	443b      	add	r3, r7
 8003722:	3b34      	subs	r3, #52	; 0x34
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	3b01      	subs	r3, #1
 8003728:	f021 0201 	bic.w	r2, r1, #1
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4403      	add	r3, r0
 8003730:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8003732:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003736:	4613      	mov	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4413      	add	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	3348      	adds	r3, #72	; 0x48
 8003740:	443b      	add	r3, r7
 8003742:	3b30      	subs	r3, #48	; 0x30
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d01f      	beq.n	800378a <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800374a:	4917      	ldr	r1, [pc, #92]	; (80037a8 <HAL_OSPIM_Config+0x3b4>)
 800374c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003750:	4613      	mov	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4413      	add	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	3348      	adds	r3, #72	; 0x48
 800375a:	443b      	add	r3, r7
 800375c:	3b30      	subs	r3, #48	; 0x30
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	3b01      	subs	r3, #1
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	440b      	add	r3, r1
 8003766:	6859      	ldr	r1, [r3, #4]
 8003768:	480f      	ldr	r0, [pc, #60]	; (80037a8 <HAL_OSPIM_Config+0x3b4>)
 800376a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800376e:	4613      	mov	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	4413      	add	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	3348      	adds	r3, #72	; 0x48
 8003778:	443b      	add	r3, r7
 800377a:	3b30      	subs	r3, #48	; 0x30
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	3b01      	subs	r3, #1
 8003780:	f021 0210 	bic.w	r2, r1, #16
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4403      	add	r3, r0
 8003788:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800378a:	4907      	ldr	r1, [pc, #28]	; (80037a8 <HAL_OSPIM_Config+0x3b4>)
 800378c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003790:	4613      	mov	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4413      	add	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	3348      	adds	r3, #72	; 0x48
 800379a:	443b      	add	r3, r7
 800379c:	3b2c      	subs	r3, #44	; 0x2c
 800379e:	e005      	b.n	80037ac <HAL_OSPIM_Config+0x3b8>
 80037a0:	a0001000 	.word	0xa0001000
 80037a4:	a0001400 	.word	0xa0001400
 80037a8:	50061c00 	.word	0x50061c00
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	3b01      	subs	r3, #1
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	440b      	add	r3, r1
 80037b4:	6859      	ldr	r1, [r3, #4]
 80037b6:	48a6      	ldr	r0, [pc, #664]	; (8003a50 <HAL_OSPIM_Config+0x65c>)
 80037b8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80037bc:	4613      	mov	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	3348      	adds	r3, #72	; 0x48
 80037c6:	443b      	add	r3, r7
 80037c8:	3b2c      	subs	r3, #44	; 0x2c
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	3b01      	subs	r3, #1
 80037ce:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4403      	add	r3, r0
 80037d6:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80037d8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80037dc:	4613      	mov	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	3348      	adds	r3, #72	; 0x48
 80037e6:	443b      	add	r3, r7
 80037e8:	3b28      	subs	r3, #40	; 0x28
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d023      	beq.n	8003838 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80037f0:	4997      	ldr	r1, [pc, #604]	; (8003a50 <HAL_OSPIM_Config+0x65c>)
 80037f2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80037f6:	4613      	mov	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4413      	add	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	3348      	adds	r3, #72	; 0x48
 8003800:	443b      	add	r3, r7
 8003802:	3b28      	subs	r3, #40	; 0x28
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	3b01      	subs	r3, #1
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	440b      	add	r3, r1
 8003810:	6859      	ldr	r1, [r3, #4]
 8003812:	488f      	ldr	r0, [pc, #572]	; (8003a50 <HAL_OSPIM_Config+0x65c>)
 8003814:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003818:	4613      	mov	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4413      	add	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	3348      	adds	r3, #72	; 0x48
 8003822:	443b      	add	r3, r7
 8003824:	3b28      	subs	r3, #40	; 0x28
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	3b01      	subs	r3, #1
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4403      	add	r3, r0
 8003836:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003838:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800383c:	4613      	mov	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4413      	add	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	3348      	adds	r3, #72	; 0x48
 8003846:	443b      	add	r3, r7
 8003848:	3b24      	subs	r3, #36	; 0x24
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d023      	beq.n	8003898 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003850:	497f      	ldr	r1, [pc, #508]	; (8003a50 <HAL_OSPIM_Config+0x65c>)
 8003852:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003856:	4613      	mov	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	4413      	add	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	3348      	adds	r3, #72	; 0x48
 8003860:	443b      	add	r3, r7
 8003862:	3b24      	subs	r3, #36	; 0x24
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	3b01      	subs	r3, #1
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	440b      	add	r3, r1
 8003870:	6859      	ldr	r1, [r3, #4]
 8003872:	4877      	ldr	r0, [pc, #476]	; (8003a50 <HAL_OSPIM_Config+0x65c>)
 8003874:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003878:	4613      	mov	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4413      	add	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	3348      	adds	r3, #72	; 0x48
 8003882:	443b      	add	r3, r7
 8003884:	3b24      	subs	r3, #36	; 0x24
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	3b01      	subs	r3, #1
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4403      	add	r3, r0
 8003896:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8003898:	4a6d      	ldr	r2, [pc, #436]	; (8003a50 <HAL_OSPIM_Config+0x65c>)
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	3b01      	subs	r3, #1
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038ac:	025b      	lsls	r3, r3, #9
 80038ae:	431a      	orrs	r2, r3
 80038b0:	4967      	ldr	r1, [pc, #412]	; (8003a50 <HAL_OSPIM_Config+0x65c>)
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	3b01      	subs	r3, #1
 80038b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	440b      	add	r3, r1
 80038c0:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80038c2:	4a63      	ldr	r2, [pc, #396]	; (8003a50 <HAL_OSPIM_Config+0x65c>)
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	3b01      	subs	r3, #1
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4413      	add	r3, r2
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f023 0203 	bic.w	r2, r3, #3
 80038d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	431a      	orrs	r2, r3
 80038da:	495d      	ldr	r1, [pc, #372]	; (8003a50 <HAL_OSPIM_Config+0x65c>)
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	3b01      	subs	r3, #1
 80038e2:	f042 0201 	orr.w	r2, r2, #1
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	440b      	add	r3, r1
 80038ea:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d014      	beq.n	800391e <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80038f4:	4a56      	ldr	r2, [pc, #344]	; (8003a50 <HAL_OSPIM_Config+0x65c>)
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4413      	add	r3, r2
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003906:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003908:	015b      	lsls	r3, r3, #5
 800390a:	431a      	orrs	r2, r3
 800390c:	4950      	ldr	r1, [pc, #320]	; (8003a50 <HAL_OSPIM_Config+0x65c>)
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	3b01      	subs	r3, #1
 8003914:	f042 0210 	orr.w	r2, r2, #16
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	440b      	add	r3, r1
 800391c:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d019      	beq.n	800395e <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800392a:	4a49      	ldr	r2, [pc, #292]	; (8003a50 <HAL_OSPIM_Config+0x65c>)
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	3b01      	subs	r3, #1
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003942:	049b      	lsls	r3, r3, #18
 8003944:	431a      	orrs	r2, r3
 8003946:	4942      	ldr	r1, [pc, #264]	; (8003a50 <HAL_OSPIM_Config+0x65c>)
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	3b01      	subs	r3, #1
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	440b      	add	r3, r1
 800395a:	605a      	str	r2, [r3, #4]
 800395c:	e01c      	b.n	8003998 <HAL_OSPIM_Config+0x5a4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d018      	beq.n	8003998 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003966:	4a3a      	ldr	r2, [pc, #232]	; (8003a50 <HAL_OSPIM_Config+0x65c>)
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	3b01      	subs	r3, #1
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	4413      	add	r3, r2
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800397c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800397e:	069b      	lsls	r3, r3, #26
 8003980:	431a      	orrs	r2, r3
 8003982:	4933      	ldr	r1, [pc, #204]	; (8003a50 <HAL_OSPIM_Config+0x65c>)
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	3b01      	subs	r3, #1
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	440b      	add	r3, r1
 8003996:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d019      	beq.n	80039d8 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80039a4:	4a2a      	ldr	r2, [pc, #168]	; (8003a50 <HAL_OSPIM_Config+0x65c>)
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	3b01      	subs	r3, #1
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	4413      	add	r3, r2
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80039ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039bc:	049b      	lsls	r3, r3, #18
 80039be:	431a      	orrs	r2, r3
 80039c0:	4923      	ldr	r1, [pc, #140]	; (8003a50 <HAL_OSPIM_Config+0x65c>)
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	3b01      	subs	r3, #1
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	440b      	add	r3, r1
 80039d4:	605a      	str	r2, [r3, #4]
 80039d6:	e01c      	b.n	8003a12 <HAL_OSPIM_Config+0x61e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d018      	beq.n	8003a12 <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80039e0:	4a1b      	ldr	r2, [pc, #108]	; (8003a50 <HAL_OSPIM_Config+0x65c>)
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	3b01      	subs	r3, #1
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80039f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039f8:	069b      	lsls	r3, r3, #26
 80039fa:	431a      	orrs	r2, r3
 80039fc:	4914      	ldr	r1, [pc, #80]	; (8003a50 <HAL_OSPIM_Config+0x65c>)
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	3b01      	subs	r3, #1
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	440b      	add	r3, r1
 8003a10:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8003a12:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d005      	beq.n	8003a2a <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003a1e:	4b0d      	ldr	r3, [pc, #52]	; (8003a54 <HAL_OSPIM_Config+0x660>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a0c      	ldr	r2, [pc, #48]	; (8003a54 <HAL_OSPIM_Config+0x660>)
 8003a24:	f043 0301 	orr.w	r3, r3, #1
 8003a28:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8003a2a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d005      	beq.n	8003a42 <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003a36:	4b08      	ldr	r3, [pc, #32]	; (8003a58 <HAL_OSPIM_Config+0x664>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a07      	ldr	r2, [pc, #28]	; (8003a58 <HAL_OSPIM_Config+0x664>)
 8003a3c:	f043 0301 	orr.w	r3, r3, #1
 8003a40:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8003a42:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3748      	adds	r7, #72	; 0x48
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	50061c00 	.word	0x50061c00
 8003a54:	a0001000 	.word	0xa0001000
 8003a58:	a0001400 	.word	0xa0001400

08003a5c <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	603b      	str	r3, [r7, #0]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003a6c:	e01a      	b.n	8003aa4 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a74:	d016      	beq.n	8003aa4 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a76:	f7fd ffdf 	bl	8001a38 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d302      	bcc.n	8003a8c <OSPI_WaitFlagStateUntilTimeout+0x30>
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10b      	bne.n	8003aa4 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a92:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a98:	f043 0201 	orr.w	r2, r3, #1
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e00e      	b.n	8003ac2 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6a1a      	ldr	r2, [r3, #32]
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	4013      	ands	r3, r2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	bf14      	ite	ne
 8003ab2:	2301      	movne	r3, #1
 8003ab4:	2300      	moveq	r3, #0
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	461a      	mov	r2, r3
 8003aba:	79fb      	ldrb	r3, [r7, #7]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d1d6      	bne.n	8003a6e <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
	...

08003acc <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b087      	sub	sp, #28
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	6039      	str	r1, [r7, #0]
 8003ad6:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8003ae0:	79fb      	ldrb	r3, [r7, #7]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d005      	beq.n	8003af2 <OSPIM_GetConfig+0x26>
 8003ae6:	79fb      	ldrb	r3, [r7, #7]
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d802      	bhi.n	8003af2 <OSPIM_GetConfig+0x26>
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d102      	bne.n	8003af8 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	75fb      	strb	r3, [r7, #23]
 8003af6:	e08e      	b.n	8003c16 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	2200      	movs	r2, #0
 8003afc:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	2200      	movs	r2, #0
 8003b02:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	2200      	movs	r2, #0
 8003b08:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	2200      	movs	r2, #0
 8003b14:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8003b16:	79fb      	ldrb	r3, [r7, #7]
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d101      	bne.n	8003b20 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8003b1c:	4b41      	ldr	r3, [pc, #260]	; (8003c24 <OSPIM_GetConfig+0x158>)
 8003b1e:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003b20:	2300      	movs	r3, #0
 8003b22:	60fb      	str	r3, [r7, #12]
 8003b24:	e074      	b.n	8003c10 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8003b26:	4a40      	ldr	r2, [pc, #256]	; (8003c28 <OSPIM_GetConfig+0x15c>)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00a      	beq.n	8003b52 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	4053      	eors	r3, r2
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d103      	bne.n	8003b52 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	1c5a      	adds	r2, r3, #1
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	f003 0310 	and.w	r3, r3, #16
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00a      	beq.n	8003b72 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	4053      	eors	r3, r2
 8003b62:	f003 0320 	and.w	r3, r3, #32
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d103      	bne.n	8003b72 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00a      	beq.n	8003b92 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	4053      	eors	r3, r2
 8003b82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d103      	bne.n	8003b92 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	1c5a      	adds	r2, r3, #1
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d018      	beq.n	8003bce <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	4053      	eors	r3, r2
 8003ba2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d111      	bne.n	8003bce <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d106      	bne.n	8003bc2 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	60da      	str	r2, [r3, #12]
 8003bc0:	e005      	b.n	8003bce <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d018      	beq.n	8003c0a <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	4053      	eors	r3, r2
 8003bde:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d111      	bne.n	8003c0a <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d106      	bne.n	8003bfe <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	611a      	str	r2, [r3, #16]
 8003bfc:	e005      	b.n	8003c0a <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	3301      	adds	r3, #1
 8003c02:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d987      	bls.n	8003b26 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8003c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	371c      	adds	r7, #28
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	04040222 	.word	0x04040222
 8003c28:	50061c00 	.word	0x50061c00

08003c2c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c30:	4b05      	ldr	r3, [pc, #20]	; (8003c48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a04      	ldr	r2, [pc, #16]	; (8003c48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c3a:	6013      	str	r3, [r2, #0]
}
 8003c3c:	bf00      	nop
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	40007000 	.word	0x40007000

08003c4c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c50:	4b0d      	ldr	r3, [pc, #52]	; (8003c88 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c5c:	d102      	bne.n	8003c64 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003c5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c62:	e00b      	b.n	8003c7c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003c64:	4b08      	ldr	r3, [pc, #32]	; (8003c88 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c72:	d102      	bne.n	8003c7a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003c74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c78:	e000      	b.n	8003c7c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003c7a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	40007000 	.word	0x40007000

08003c8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d141      	bne.n	8003d1e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c9a:	4b4b      	ldr	r3, [pc, #300]	; (8003dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ca6:	d131      	bne.n	8003d0c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ca8:	4b47      	ldr	r3, [pc, #284]	; (8003dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cae:	4a46      	ldr	r2, [pc, #280]	; (8003dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cb8:	4b43      	ldr	r3, [pc, #268]	; (8003dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cc0:	4a41      	ldr	r2, [pc, #260]	; (8003dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cc6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003cc8:	4b40      	ldr	r3, [pc, #256]	; (8003dcc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2232      	movs	r2, #50	; 0x32
 8003cce:	fb02 f303 	mul.w	r3, r2, r3
 8003cd2:	4a3f      	ldr	r2, [pc, #252]	; (8003dd0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd8:	0c9b      	lsrs	r3, r3, #18
 8003cda:	3301      	adds	r3, #1
 8003cdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cde:	e002      	b.n	8003ce6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ce6:	4b38      	ldr	r3, [pc, #224]	; (8003dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cf2:	d102      	bne.n	8003cfa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f2      	bne.n	8003ce0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cfa:	4b33      	ldr	r3, [pc, #204]	; (8003dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d06:	d158      	bne.n	8003dba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e057      	b.n	8003dbc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d0c:	4b2e      	ldr	r3, [pc, #184]	; (8003dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d12:	4a2d      	ldr	r2, [pc, #180]	; (8003dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003d1c:	e04d      	b.n	8003dba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d24:	d141      	bne.n	8003daa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d26:	4b28      	ldr	r3, [pc, #160]	; (8003dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d32:	d131      	bne.n	8003d98 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d34:	4b24      	ldr	r3, [pc, #144]	; (8003dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d3a:	4a23      	ldr	r2, [pc, #140]	; (8003dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d44:	4b20      	ldr	r3, [pc, #128]	; (8003dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d4c:	4a1e      	ldr	r2, [pc, #120]	; (8003dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003d54:	4b1d      	ldr	r3, [pc, #116]	; (8003dcc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2232      	movs	r2, #50	; 0x32
 8003d5a:	fb02 f303 	mul.w	r3, r2, r3
 8003d5e:	4a1c      	ldr	r2, [pc, #112]	; (8003dd0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d60:	fba2 2303 	umull	r2, r3, r2, r3
 8003d64:	0c9b      	lsrs	r3, r3, #18
 8003d66:	3301      	adds	r3, #1
 8003d68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d6a:	e002      	b.n	8003d72 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d72:	4b15      	ldr	r3, [pc, #84]	; (8003dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d7e:	d102      	bne.n	8003d86 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1f2      	bne.n	8003d6c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d86:	4b10      	ldr	r3, [pc, #64]	; (8003dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d92:	d112      	bne.n	8003dba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e011      	b.n	8003dbc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d98:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d9e:	4a0a      	ldr	r2, [pc, #40]	; (8003dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003da8:	e007      	b.n	8003dba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003daa:	4b07      	ldr	r3, [pc, #28]	; (8003dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003db2:	4a05      	ldr	r2, [pc, #20]	; (8003dc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003db8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3714      	adds	r7, #20
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	40007000 	.word	0x40007000
 8003dcc:	20000000 	.word	0x20000000
 8003dd0:	431bde83 	.word	0x431bde83

08003dd4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b088      	sub	sp, #32
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d102      	bne.n	8003de8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	f000 bc08 	b.w	80045f8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003de8:	4b96      	ldr	r3, [pc, #600]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f003 030c 	and.w	r3, r3, #12
 8003df0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003df2:	4b94      	ldr	r3, [pc, #592]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	f003 0303 	and.w	r3, r3, #3
 8003dfa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0310 	and.w	r3, r3, #16
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f000 80e4 	beq.w	8003fd2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d007      	beq.n	8003e20 <HAL_RCC_OscConfig+0x4c>
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	2b0c      	cmp	r3, #12
 8003e14:	f040 808b 	bne.w	8003f2e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	f040 8087 	bne.w	8003f2e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e20:	4b88      	ldr	r3, [pc, #544]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d005      	beq.n	8003e38 <HAL_RCC_OscConfig+0x64>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d101      	bne.n	8003e38 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e3df      	b.n	80045f8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a1a      	ldr	r2, [r3, #32]
 8003e3c:	4b81      	ldr	r3, [pc, #516]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0308 	and.w	r3, r3, #8
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d004      	beq.n	8003e52 <HAL_RCC_OscConfig+0x7e>
 8003e48:	4b7e      	ldr	r3, [pc, #504]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e50:	e005      	b.n	8003e5e <HAL_RCC_OscConfig+0x8a>
 8003e52:	4b7c      	ldr	r3, [pc, #496]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003e54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e58:	091b      	lsrs	r3, r3, #4
 8003e5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d223      	bcs.n	8003eaa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 fdcc 	bl	8004a04 <RCC_SetFlashLatencyFromMSIRange>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e3c0      	b.n	80045f8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e76:	4b73      	ldr	r3, [pc, #460]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a72      	ldr	r2, [pc, #456]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003e7c:	f043 0308 	orr.w	r3, r3, #8
 8003e80:	6013      	str	r3, [r2, #0]
 8003e82:	4b70      	ldr	r3, [pc, #448]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	496d      	ldr	r1, [pc, #436]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e94:	4b6b      	ldr	r3, [pc, #428]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	69db      	ldr	r3, [r3, #28]
 8003ea0:	021b      	lsls	r3, r3, #8
 8003ea2:	4968      	ldr	r1, [pc, #416]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	604b      	str	r3, [r1, #4]
 8003ea8:	e025      	b.n	8003ef6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003eaa:	4b66      	ldr	r3, [pc, #408]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a65      	ldr	r2, [pc, #404]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003eb0:	f043 0308 	orr.w	r3, r3, #8
 8003eb4:	6013      	str	r3, [r2, #0]
 8003eb6:	4b63      	ldr	r3, [pc, #396]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	4960      	ldr	r1, [pc, #384]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ec8:	4b5e      	ldr	r3, [pc, #376]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	021b      	lsls	r3, r3, #8
 8003ed6:	495b      	ldr	r1, [pc, #364]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d109      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 fd8c 	bl	8004a04 <RCC_SetFlashLatencyFromMSIRange>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e380      	b.n	80045f8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ef6:	f000 fcc1 	bl	800487c <HAL_RCC_GetSysClockFreq>
 8003efa:	4602      	mov	r2, r0
 8003efc:	4b51      	ldr	r3, [pc, #324]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	091b      	lsrs	r3, r3, #4
 8003f02:	f003 030f 	and.w	r3, r3, #15
 8003f06:	4950      	ldr	r1, [pc, #320]	; (8004048 <HAL_RCC_OscConfig+0x274>)
 8003f08:	5ccb      	ldrb	r3, [r1, r3]
 8003f0a:	f003 031f 	and.w	r3, r3, #31
 8003f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f12:	4a4e      	ldr	r2, [pc, #312]	; (800404c <HAL_RCC_OscConfig+0x278>)
 8003f14:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f16:	4b4e      	ldr	r3, [pc, #312]	; (8004050 <HAL_RCC_OscConfig+0x27c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7fd fd3c 	bl	8001998 <HAL_InitTick>
 8003f20:	4603      	mov	r3, r0
 8003f22:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f24:	7bfb      	ldrb	r3, [r7, #15]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d052      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003f2a:	7bfb      	ldrb	r3, [r7, #15]
 8003f2c:	e364      	b.n	80045f8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d032      	beq.n	8003f9c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f36:	4b43      	ldr	r3, [pc, #268]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a42      	ldr	r2, [pc, #264]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003f3c:	f043 0301 	orr.w	r3, r3, #1
 8003f40:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f42:	f7fd fd79 	bl	8001a38 <HAL_GetTick>
 8003f46:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f48:	e008      	b.n	8003f5c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f4a:	f7fd fd75 	bl	8001a38 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d901      	bls.n	8003f5c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e34d      	b.n	80045f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f5c:	4b39      	ldr	r3, [pc, #228]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d0f0      	beq.n	8003f4a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f68:	4b36      	ldr	r3, [pc, #216]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a35      	ldr	r2, [pc, #212]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003f6e:	f043 0308 	orr.w	r3, r3, #8
 8003f72:	6013      	str	r3, [r2, #0]
 8003f74:	4b33      	ldr	r3, [pc, #204]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	4930      	ldr	r1, [pc, #192]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f86:	4b2f      	ldr	r3, [pc, #188]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	021b      	lsls	r3, r3, #8
 8003f94:	492b      	ldr	r1, [pc, #172]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	604b      	str	r3, [r1, #4]
 8003f9a:	e01a      	b.n	8003fd2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f9c:	4b29      	ldr	r3, [pc, #164]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a28      	ldr	r2, [pc, #160]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003fa2:	f023 0301 	bic.w	r3, r3, #1
 8003fa6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fa8:	f7fd fd46 	bl	8001a38 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fb0:	f7fd fd42 	bl	8001a38 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e31a      	b.n	80045f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fc2:	4b20      	ldr	r3, [pc, #128]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1f0      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x1dc>
 8003fce:	e000      	b.n	8003fd2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003fd0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d073      	beq.n	80040c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	2b08      	cmp	r3, #8
 8003fe2:	d005      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x21c>
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	2b0c      	cmp	r3, #12
 8003fe8:	d10e      	bne.n	8004008 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	2b03      	cmp	r3, #3
 8003fee:	d10b      	bne.n	8004008 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ff0:	4b14      	ldr	r3, [pc, #80]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d063      	beq.n	80040c4 <HAL_RCC_OscConfig+0x2f0>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d15f      	bne.n	80040c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e2f7      	b.n	80045f8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004010:	d106      	bne.n	8004020 <HAL_RCC_OscConfig+0x24c>
 8004012:	4b0c      	ldr	r3, [pc, #48]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a0b      	ldr	r2, [pc, #44]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8004018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800401c:	6013      	str	r3, [r2, #0]
 800401e:	e025      	b.n	800406c <HAL_RCC_OscConfig+0x298>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004028:	d114      	bne.n	8004054 <HAL_RCC_OscConfig+0x280>
 800402a:	4b06      	ldr	r3, [pc, #24]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a05      	ldr	r2, [pc, #20]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8004030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004034:	6013      	str	r3, [r2, #0]
 8004036:	4b03      	ldr	r3, [pc, #12]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a02      	ldr	r2, [pc, #8]	; (8004044 <HAL_RCC_OscConfig+0x270>)
 800403c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004040:	6013      	str	r3, [r2, #0]
 8004042:	e013      	b.n	800406c <HAL_RCC_OscConfig+0x298>
 8004044:	40021000 	.word	0x40021000
 8004048:	0800645c 	.word	0x0800645c
 800404c:	20000000 	.word	0x20000000
 8004050:	20000004 	.word	0x20000004
 8004054:	4ba0      	ldr	r3, [pc, #640]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a9f      	ldr	r2, [pc, #636]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 800405a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800405e:	6013      	str	r3, [r2, #0]
 8004060:	4b9d      	ldr	r3, [pc, #628]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a9c      	ldr	r2, [pc, #624]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 8004066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800406a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d013      	beq.n	800409c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004074:	f7fd fce0 	bl	8001a38 <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800407c:	f7fd fcdc 	bl	8001a38 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b64      	cmp	r3, #100	; 0x64
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e2b4      	b.n	80045f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800408e:	4b92      	ldr	r3, [pc, #584]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d0f0      	beq.n	800407c <HAL_RCC_OscConfig+0x2a8>
 800409a:	e014      	b.n	80040c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409c:	f7fd fccc 	bl	8001a38 <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040a4:	f7fd fcc8 	bl	8001a38 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b64      	cmp	r3, #100	; 0x64
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e2a0      	b.n	80045f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040b6:	4b88      	ldr	r3, [pc, #544]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1f0      	bne.n	80040a4 <HAL_RCC_OscConfig+0x2d0>
 80040c2:	e000      	b.n	80040c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d060      	beq.n	8004194 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	2b04      	cmp	r3, #4
 80040d6:	d005      	beq.n	80040e4 <HAL_RCC_OscConfig+0x310>
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	2b0c      	cmp	r3, #12
 80040dc:	d119      	bne.n	8004112 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d116      	bne.n	8004112 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040e4:	4b7c      	ldr	r3, [pc, #496]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <HAL_RCC_OscConfig+0x328>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e27d      	b.n	80045f8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040fc:	4b76      	ldr	r3, [pc, #472]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	061b      	lsls	r3, r3, #24
 800410a:	4973      	ldr	r1, [pc, #460]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 800410c:	4313      	orrs	r3, r2
 800410e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004110:	e040      	b.n	8004194 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d023      	beq.n	8004162 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800411a:	4b6f      	ldr	r3, [pc, #444]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a6e      	ldr	r2, [pc, #440]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 8004120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004124:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004126:	f7fd fc87 	bl	8001a38 <HAL_GetTick>
 800412a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800412c:	e008      	b.n	8004140 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800412e:	f7fd fc83 	bl	8001a38 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d901      	bls.n	8004140 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e25b      	b.n	80045f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004140:	4b65      	ldr	r3, [pc, #404]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004148:	2b00      	cmp	r3, #0
 800414a:	d0f0      	beq.n	800412e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800414c:	4b62      	ldr	r3, [pc, #392]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	061b      	lsls	r3, r3, #24
 800415a:	495f      	ldr	r1, [pc, #380]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 800415c:	4313      	orrs	r3, r2
 800415e:	604b      	str	r3, [r1, #4]
 8004160:	e018      	b.n	8004194 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004162:	4b5d      	ldr	r3, [pc, #372]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a5c      	ldr	r2, [pc, #368]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 8004168:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800416c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416e:	f7fd fc63 	bl	8001a38 <HAL_GetTick>
 8004172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004174:	e008      	b.n	8004188 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004176:	f7fd fc5f 	bl	8001a38 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d901      	bls.n	8004188 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e237      	b.n	80045f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004188:	4b53      	ldr	r3, [pc, #332]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1f0      	bne.n	8004176 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0308 	and.w	r3, r3, #8
 800419c:	2b00      	cmp	r3, #0
 800419e:	d03c      	beq.n	800421a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d01c      	beq.n	80041e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041a8:	4b4b      	ldr	r3, [pc, #300]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 80041aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ae:	4a4a      	ldr	r2, [pc, #296]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 80041b0:	f043 0301 	orr.w	r3, r3, #1
 80041b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b8:	f7fd fc3e 	bl	8001a38 <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041c0:	f7fd fc3a 	bl	8001a38 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e212      	b.n	80045f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041d2:	4b41      	ldr	r3, [pc, #260]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 80041d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d0ef      	beq.n	80041c0 <HAL_RCC_OscConfig+0x3ec>
 80041e0:	e01b      	b.n	800421a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041e2:	4b3d      	ldr	r3, [pc, #244]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 80041e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041e8:	4a3b      	ldr	r2, [pc, #236]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 80041ea:	f023 0301 	bic.w	r3, r3, #1
 80041ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f2:	f7fd fc21 	bl	8001a38 <HAL_GetTick>
 80041f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041f8:	e008      	b.n	800420c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041fa:	f7fd fc1d 	bl	8001a38 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e1f5      	b.n	80045f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800420c:	4b32      	ldr	r3, [pc, #200]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 800420e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1ef      	bne.n	80041fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0304 	and.w	r3, r3, #4
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 80a6 	beq.w	8004374 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004228:	2300      	movs	r3, #0
 800422a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800422c:	4b2a      	ldr	r3, [pc, #168]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 800422e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10d      	bne.n	8004254 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004238:	4b27      	ldr	r3, [pc, #156]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 800423a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423c:	4a26      	ldr	r2, [pc, #152]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 800423e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004242:	6593      	str	r3, [r2, #88]	; 0x58
 8004244:	4b24      	ldr	r3, [pc, #144]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 8004246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800424c:	60bb      	str	r3, [r7, #8]
 800424e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004250:	2301      	movs	r3, #1
 8004252:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004254:	4b21      	ldr	r3, [pc, #132]	; (80042dc <HAL_RCC_OscConfig+0x508>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425c:	2b00      	cmp	r3, #0
 800425e:	d118      	bne.n	8004292 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004260:	4b1e      	ldr	r3, [pc, #120]	; (80042dc <HAL_RCC_OscConfig+0x508>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a1d      	ldr	r2, [pc, #116]	; (80042dc <HAL_RCC_OscConfig+0x508>)
 8004266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800426a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800426c:	f7fd fbe4 	bl	8001a38 <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004272:	e008      	b.n	8004286 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004274:	f7fd fbe0 	bl	8001a38 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e1b8      	b.n	80045f8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004286:	4b15      	ldr	r3, [pc, #84]	; (80042dc <HAL_RCC_OscConfig+0x508>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428e:	2b00      	cmp	r3, #0
 8004290:	d0f0      	beq.n	8004274 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d108      	bne.n	80042ac <HAL_RCC_OscConfig+0x4d8>
 800429a:	4b0f      	ldr	r3, [pc, #60]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 800429c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a0:	4a0d      	ldr	r2, [pc, #52]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 80042a2:	f043 0301 	orr.w	r3, r3, #1
 80042a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042aa:	e029      	b.n	8004300 <HAL_RCC_OscConfig+0x52c>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	2b05      	cmp	r3, #5
 80042b2:	d115      	bne.n	80042e0 <HAL_RCC_OscConfig+0x50c>
 80042b4:	4b08      	ldr	r3, [pc, #32]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 80042b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ba:	4a07      	ldr	r2, [pc, #28]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 80042bc:	f043 0304 	orr.w	r3, r3, #4
 80042c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042c4:	4b04      	ldr	r3, [pc, #16]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 80042c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ca:	4a03      	ldr	r2, [pc, #12]	; (80042d8 <HAL_RCC_OscConfig+0x504>)
 80042cc:	f043 0301 	orr.w	r3, r3, #1
 80042d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042d4:	e014      	b.n	8004300 <HAL_RCC_OscConfig+0x52c>
 80042d6:	bf00      	nop
 80042d8:	40021000 	.word	0x40021000
 80042dc:	40007000 	.word	0x40007000
 80042e0:	4b9d      	ldr	r3, [pc, #628]	; (8004558 <HAL_RCC_OscConfig+0x784>)
 80042e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e6:	4a9c      	ldr	r2, [pc, #624]	; (8004558 <HAL_RCC_OscConfig+0x784>)
 80042e8:	f023 0301 	bic.w	r3, r3, #1
 80042ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042f0:	4b99      	ldr	r3, [pc, #612]	; (8004558 <HAL_RCC_OscConfig+0x784>)
 80042f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f6:	4a98      	ldr	r2, [pc, #608]	; (8004558 <HAL_RCC_OscConfig+0x784>)
 80042f8:	f023 0304 	bic.w	r3, r3, #4
 80042fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d016      	beq.n	8004336 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004308:	f7fd fb96 	bl	8001a38 <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800430e:	e00a      	b.n	8004326 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004310:	f7fd fb92 	bl	8001a38 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	f241 3288 	movw	r2, #5000	; 0x1388
 800431e:	4293      	cmp	r3, r2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e168      	b.n	80045f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004326:	4b8c      	ldr	r3, [pc, #560]	; (8004558 <HAL_RCC_OscConfig+0x784>)
 8004328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d0ed      	beq.n	8004310 <HAL_RCC_OscConfig+0x53c>
 8004334:	e015      	b.n	8004362 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004336:	f7fd fb7f 	bl	8001a38 <HAL_GetTick>
 800433a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800433c:	e00a      	b.n	8004354 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800433e:	f7fd fb7b 	bl	8001a38 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	f241 3288 	movw	r2, #5000	; 0x1388
 800434c:	4293      	cmp	r3, r2
 800434e:	d901      	bls.n	8004354 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e151      	b.n	80045f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004354:	4b80      	ldr	r3, [pc, #512]	; (8004558 <HAL_RCC_OscConfig+0x784>)
 8004356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1ed      	bne.n	800433e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004362:	7ffb      	ldrb	r3, [r7, #31]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d105      	bne.n	8004374 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004368:	4b7b      	ldr	r3, [pc, #492]	; (8004558 <HAL_RCC_OscConfig+0x784>)
 800436a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800436c:	4a7a      	ldr	r2, [pc, #488]	; (8004558 <HAL_RCC_OscConfig+0x784>)
 800436e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004372:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0320 	and.w	r3, r3, #32
 800437c:	2b00      	cmp	r3, #0
 800437e:	d03c      	beq.n	80043fa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004384:	2b00      	cmp	r3, #0
 8004386:	d01c      	beq.n	80043c2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004388:	4b73      	ldr	r3, [pc, #460]	; (8004558 <HAL_RCC_OscConfig+0x784>)
 800438a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800438e:	4a72      	ldr	r2, [pc, #456]	; (8004558 <HAL_RCC_OscConfig+0x784>)
 8004390:	f043 0301 	orr.w	r3, r3, #1
 8004394:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004398:	f7fd fb4e 	bl	8001a38 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043a0:	f7fd fb4a 	bl	8001a38 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e122      	b.n	80045f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80043b2:	4b69      	ldr	r3, [pc, #420]	; (8004558 <HAL_RCC_OscConfig+0x784>)
 80043b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d0ef      	beq.n	80043a0 <HAL_RCC_OscConfig+0x5cc>
 80043c0:	e01b      	b.n	80043fa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80043c2:	4b65      	ldr	r3, [pc, #404]	; (8004558 <HAL_RCC_OscConfig+0x784>)
 80043c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043c8:	4a63      	ldr	r2, [pc, #396]	; (8004558 <HAL_RCC_OscConfig+0x784>)
 80043ca:	f023 0301 	bic.w	r3, r3, #1
 80043ce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d2:	f7fd fb31 	bl	8001a38 <HAL_GetTick>
 80043d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043d8:	e008      	b.n	80043ec <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043da:	f7fd fb2d 	bl	8001a38 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d901      	bls.n	80043ec <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e105      	b.n	80045f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043ec:	4b5a      	ldr	r3, [pc, #360]	; (8004558 <HAL_RCC_OscConfig+0x784>)
 80043ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1ef      	bne.n	80043da <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f000 80f9 	beq.w	80045f6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004408:	2b02      	cmp	r3, #2
 800440a:	f040 80cf 	bne.w	80045ac <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800440e:	4b52      	ldr	r3, [pc, #328]	; (8004558 <HAL_RCC_OscConfig+0x784>)
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	f003 0203 	and.w	r2, r3, #3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441e:	429a      	cmp	r2, r3
 8004420:	d12c      	bne.n	800447c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442c:	3b01      	subs	r3, #1
 800442e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004430:	429a      	cmp	r2, r3
 8004432:	d123      	bne.n	800447c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800443e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004440:	429a      	cmp	r2, r3
 8004442:	d11b      	bne.n	800447c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004450:	429a      	cmp	r2, r3
 8004452:	d113      	bne.n	800447c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800445e:	085b      	lsrs	r3, r3, #1
 8004460:	3b01      	subs	r3, #1
 8004462:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004464:	429a      	cmp	r2, r3
 8004466:	d109      	bne.n	800447c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004472:	085b      	lsrs	r3, r3, #1
 8004474:	3b01      	subs	r3, #1
 8004476:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004478:	429a      	cmp	r2, r3
 800447a:	d071      	beq.n	8004560 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	2b0c      	cmp	r3, #12
 8004480:	d068      	beq.n	8004554 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004482:	4b35      	ldr	r3, [pc, #212]	; (8004558 <HAL_RCC_OscConfig+0x784>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d105      	bne.n	800449a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800448e:	4b32      	ldr	r3, [pc, #200]	; (8004558 <HAL_RCC_OscConfig+0x784>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e0ac      	b.n	80045f8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800449e:	4b2e      	ldr	r3, [pc, #184]	; (8004558 <HAL_RCC_OscConfig+0x784>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a2d      	ldr	r2, [pc, #180]	; (8004558 <HAL_RCC_OscConfig+0x784>)
 80044a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044a8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044aa:	f7fd fac5 	bl	8001a38 <HAL_GetTick>
 80044ae:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044b0:	e008      	b.n	80044c4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044b2:	f7fd fac1 	bl	8001a38 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d901      	bls.n	80044c4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e099      	b.n	80045f8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044c4:	4b24      	ldr	r3, [pc, #144]	; (8004558 <HAL_RCC_OscConfig+0x784>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1f0      	bne.n	80044b2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044d0:	4b21      	ldr	r3, [pc, #132]	; (8004558 <HAL_RCC_OscConfig+0x784>)
 80044d2:	68da      	ldr	r2, [r3, #12]
 80044d4:	4b21      	ldr	r3, [pc, #132]	; (800455c <HAL_RCC_OscConfig+0x788>)
 80044d6:	4013      	ands	r3, r2
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80044e0:	3a01      	subs	r2, #1
 80044e2:	0112      	lsls	r2, r2, #4
 80044e4:	4311      	orrs	r1, r2
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80044ea:	0212      	lsls	r2, r2, #8
 80044ec:	4311      	orrs	r1, r2
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80044f2:	0852      	lsrs	r2, r2, #1
 80044f4:	3a01      	subs	r2, #1
 80044f6:	0552      	lsls	r2, r2, #21
 80044f8:	4311      	orrs	r1, r2
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80044fe:	0852      	lsrs	r2, r2, #1
 8004500:	3a01      	subs	r2, #1
 8004502:	0652      	lsls	r2, r2, #25
 8004504:	4311      	orrs	r1, r2
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800450a:	06d2      	lsls	r2, r2, #27
 800450c:	430a      	orrs	r2, r1
 800450e:	4912      	ldr	r1, [pc, #72]	; (8004558 <HAL_RCC_OscConfig+0x784>)
 8004510:	4313      	orrs	r3, r2
 8004512:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004514:	4b10      	ldr	r3, [pc, #64]	; (8004558 <HAL_RCC_OscConfig+0x784>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a0f      	ldr	r2, [pc, #60]	; (8004558 <HAL_RCC_OscConfig+0x784>)
 800451a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800451e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004520:	4b0d      	ldr	r3, [pc, #52]	; (8004558 <HAL_RCC_OscConfig+0x784>)
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	4a0c      	ldr	r2, [pc, #48]	; (8004558 <HAL_RCC_OscConfig+0x784>)
 8004526:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800452a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800452c:	f7fd fa84 	bl	8001a38 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004534:	f7fd fa80 	bl	8001a38 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e058      	b.n	80045f8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004546:	4b04      	ldr	r3, [pc, #16]	; (8004558 <HAL_RCC_OscConfig+0x784>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0f0      	beq.n	8004534 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004552:	e050      	b.n	80045f6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e04f      	b.n	80045f8 <HAL_RCC_OscConfig+0x824>
 8004558:	40021000 	.word	0x40021000
 800455c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004560:	4b27      	ldr	r3, [pc, #156]	; (8004600 <HAL_RCC_OscConfig+0x82c>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d144      	bne.n	80045f6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800456c:	4b24      	ldr	r3, [pc, #144]	; (8004600 <HAL_RCC_OscConfig+0x82c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a23      	ldr	r2, [pc, #140]	; (8004600 <HAL_RCC_OscConfig+0x82c>)
 8004572:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004576:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004578:	4b21      	ldr	r3, [pc, #132]	; (8004600 <HAL_RCC_OscConfig+0x82c>)
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	4a20      	ldr	r2, [pc, #128]	; (8004600 <HAL_RCC_OscConfig+0x82c>)
 800457e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004582:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004584:	f7fd fa58 	bl	8001a38 <HAL_GetTick>
 8004588:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800458c:	f7fd fa54 	bl	8001a38 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e02c      	b.n	80045f8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800459e:	4b18      	ldr	r3, [pc, #96]	; (8004600 <HAL_RCC_OscConfig+0x82c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d0f0      	beq.n	800458c <HAL_RCC_OscConfig+0x7b8>
 80045aa:	e024      	b.n	80045f6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	2b0c      	cmp	r3, #12
 80045b0:	d01f      	beq.n	80045f2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045b2:	4b13      	ldr	r3, [pc, #76]	; (8004600 <HAL_RCC_OscConfig+0x82c>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a12      	ldr	r2, [pc, #72]	; (8004600 <HAL_RCC_OscConfig+0x82c>)
 80045b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045be:	f7fd fa3b 	bl	8001a38 <HAL_GetTick>
 80045c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045c4:	e008      	b.n	80045d8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045c6:	f7fd fa37 	bl	8001a38 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e00f      	b.n	80045f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045d8:	4b09      	ldr	r3, [pc, #36]	; (8004600 <HAL_RCC_OscConfig+0x82c>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1f0      	bne.n	80045c6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80045e4:	4b06      	ldr	r3, [pc, #24]	; (8004600 <HAL_RCC_OscConfig+0x82c>)
 80045e6:	68da      	ldr	r2, [r3, #12]
 80045e8:	4905      	ldr	r1, [pc, #20]	; (8004600 <HAL_RCC_OscConfig+0x82c>)
 80045ea:	4b06      	ldr	r3, [pc, #24]	; (8004604 <HAL_RCC_OscConfig+0x830>)
 80045ec:	4013      	ands	r3, r2
 80045ee:	60cb      	str	r3, [r1, #12]
 80045f0:	e001      	b.n	80045f6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e000      	b.n	80045f8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3720      	adds	r7, #32
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	40021000 	.word	0x40021000
 8004604:	feeefffc 	.word	0xfeeefffc

08004608 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004612:	2300      	movs	r3, #0
 8004614:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d101      	bne.n	8004620 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e11d      	b.n	800485c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004620:	4b90      	ldr	r3, [pc, #576]	; (8004864 <HAL_RCC_ClockConfig+0x25c>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 030f 	and.w	r3, r3, #15
 8004628:	683a      	ldr	r2, [r7, #0]
 800462a:	429a      	cmp	r2, r3
 800462c:	d910      	bls.n	8004650 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800462e:	4b8d      	ldr	r3, [pc, #564]	; (8004864 <HAL_RCC_ClockConfig+0x25c>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f023 020f 	bic.w	r2, r3, #15
 8004636:	498b      	ldr	r1, [pc, #556]	; (8004864 <HAL_RCC_ClockConfig+0x25c>)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	4313      	orrs	r3, r2
 800463c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800463e:	4b89      	ldr	r3, [pc, #548]	; (8004864 <HAL_RCC_ClockConfig+0x25c>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 030f 	and.w	r3, r3, #15
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	429a      	cmp	r2, r3
 800464a:	d001      	beq.n	8004650 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e105      	b.n	800485c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d010      	beq.n	800467e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	4b81      	ldr	r3, [pc, #516]	; (8004868 <HAL_RCC_ClockConfig+0x260>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004668:	429a      	cmp	r2, r3
 800466a:	d908      	bls.n	800467e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800466c:	4b7e      	ldr	r3, [pc, #504]	; (8004868 <HAL_RCC_ClockConfig+0x260>)
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	497b      	ldr	r1, [pc, #492]	; (8004868 <HAL_RCC_ClockConfig+0x260>)
 800467a:	4313      	orrs	r3, r2
 800467c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d079      	beq.n	800477e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	2b03      	cmp	r3, #3
 8004690:	d11e      	bne.n	80046d0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004692:	4b75      	ldr	r3, [pc, #468]	; (8004868 <HAL_RCC_ClockConfig+0x260>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e0dc      	b.n	800485c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80046a2:	f000 fa09 	bl	8004ab8 <RCC_GetSysClockFreqFromPLLSource>
 80046a6:	4603      	mov	r3, r0
 80046a8:	4a70      	ldr	r2, [pc, #448]	; (800486c <HAL_RCC_ClockConfig+0x264>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d946      	bls.n	800473c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80046ae:	4b6e      	ldr	r3, [pc, #440]	; (8004868 <HAL_RCC_ClockConfig+0x260>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d140      	bne.n	800473c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80046ba:	4b6b      	ldr	r3, [pc, #428]	; (8004868 <HAL_RCC_ClockConfig+0x260>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046c2:	4a69      	ldr	r2, [pc, #420]	; (8004868 <HAL_RCC_ClockConfig+0x260>)
 80046c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80046ca:	2380      	movs	r3, #128	; 0x80
 80046cc:	617b      	str	r3, [r7, #20]
 80046ce:	e035      	b.n	800473c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d107      	bne.n	80046e8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046d8:	4b63      	ldr	r3, [pc, #396]	; (8004868 <HAL_RCC_ClockConfig+0x260>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d115      	bne.n	8004710 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e0b9      	b.n	800485c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d107      	bne.n	8004700 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046f0:	4b5d      	ldr	r3, [pc, #372]	; (8004868 <HAL_RCC_ClockConfig+0x260>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d109      	bne.n	8004710 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e0ad      	b.n	800485c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004700:	4b59      	ldr	r3, [pc, #356]	; (8004868 <HAL_RCC_ClockConfig+0x260>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004708:	2b00      	cmp	r3, #0
 800470a:	d101      	bne.n	8004710 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e0a5      	b.n	800485c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004710:	f000 f8b4 	bl	800487c <HAL_RCC_GetSysClockFreq>
 8004714:	4603      	mov	r3, r0
 8004716:	4a55      	ldr	r2, [pc, #340]	; (800486c <HAL_RCC_ClockConfig+0x264>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d90f      	bls.n	800473c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800471c:	4b52      	ldr	r3, [pc, #328]	; (8004868 <HAL_RCC_ClockConfig+0x260>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d109      	bne.n	800473c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004728:	4b4f      	ldr	r3, [pc, #316]	; (8004868 <HAL_RCC_ClockConfig+0x260>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004730:	4a4d      	ldr	r2, [pc, #308]	; (8004868 <HAL_RCC_ClockConfig+0x260>)
 8004732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004736:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004738:	2380      	movs	r3, #128	; 0x80
 800473a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800473c:	4b4a      	ldr	r3, [pc, #296]	; (8004868 <HAL_RCC_ClockConfig+0x260>)
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f023 0203 	bic.w	r2, r3, #3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	4947      	ldr	r1, [pc, #284]	; (8004868 <HAL_RCC_ClockConfig+0x260>)
 800474a:	4313      	orrs	r3, r2
 800474c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800474e:	f7fd f973 	bl	8001a38 <HAL_GetTick>
 8004752:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004754:	e00a      	b.n	800476c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004756:	f7fd f96f 	bl	8001a38 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	f241 3288 	movw	r2, #5000	; 0x1388
 8004764:	4293      	cmp	r3, r2
 8004766:	d901      	bls.n	800476c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e077      	b.n	800485c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800476c:	4b3e      	ldr	r3, [pc, #248]	; (8004868 <HAL_RCC_ClockConfig+0x260>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f003 020c 	and.w	r2, r3, #12
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	429a      	cmp	r2, r3
 800477c:	d1eb      	bne.n	8004756 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	2b80      	cmp	r3, #128	; 0x80
 8004782:	d105      	bne.n	8004790 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004784:	4b38      	ldr	r3, [pc, #224]	; (8004868 <HAL_RCC_ClockConfig+0x260>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	4a37      	ldr	r2, [pc, #220]	; (8004868 <HAL_RCC_ClockConfig+0x260>)
 800478a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800478e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d010      	beq.n	80047be <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	4b31      	ldr	r3, [pc, #196]	; (8004868 <HAL_RCC_ClockConfig+0x260>)
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d208      	bcs.n	80047be <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047ac:	4b2e      	ldr	r3, [pc, #184]	; (8004868 <HAL_RCC_ClockConfig+0x260>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	492b      	ldr	r1, [pc, #172]	; (8004868 <HAL_RCC_ClockConfig+0x260>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047be:	4b29      	ldr	r3, [pc, #164]	; (8004864 <HAL_RCC_ClockConfig+0x25c>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 030f 	and.w	r3, r3, #15
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d210      	bcs.n	80047ee <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047cc:	4b25      	ldr	r3, [pc, #148]	; (8004864 <HAL_RCC_ClockConfig+0x25c>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f023 020f 	bic.w	r2, r3, #15
 80047d4:	4923      	ldr	r1, [pc, #140]	; (8004864 <HAL_RCC_ClockConfig+0x25c>)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	4313      	orrs	r3, r2
 80047da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047dc:	4b21      	ldr	r3, [pc, #132]	; (8004864 <HAL_RCC_ClockConfig+0x25c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 030f 	and.w	r3, r3, #15
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d001      	beq.n	80047ee <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e036      	b.n	800485c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0304 	and.w	r3, r3, #4
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d008      	beq.n	800480c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047fa:	4b1b      	ldr	r3, [pc, #108]	; (8004868 <HAL_RCC_ClockConfig+0x260>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	4918      	ldr	r1, [pc, #96]	; (8004868 <HAL_RCC_ClockConfig+0x260>)
 8004808:	4313      	orrs	r3, r2
 800480a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0308 	and.w	r3, r3, #8
 8004814:	2b00      	cmp	r3, #0
 8004816:	d009      	beq.n	800482c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004818:	4b13      	ldr	r3, [pc, #76]	; (8004868 <HAL_RCC_ClockConfig+0x260>)
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	00db      	lsls	r3, r3, #3
 8004826:	4910      	ldr	r1, [pc, #64]	; (8004868 <HAL_RCC_ClockConfig+0x260>)
 8004828:	4313      	orrs	r3, r2
 800482a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800482c:	f000 f826 	bl	800487c <HAL_RCC_GetSysClockFreq>
 8004830:	4602      	mov	r2, r0
 8004832:	4b0d      	ldr	r3, [pc, #52]	; (8004868 <HAL_RCC_ClockConfig+0x260>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	091b      	lsrs	r3, r3, #4
 8004838:	f003 030f 	and.w	r3, r3, #15
 800483c:	490c      	ldr	r1, [pc, #48]	; (8004870 <HAL_RCC_ClockConfig+0x268>)
 800483e:	5ccb      	ldrb	r3, [r1, r3]
 8004840:	f003 031f 	and.w	r3, r3, #31
 8004844:	fa22 f303 	lsr.w	r3, r2, r3
 8004848:	4a0a      	ldr	r2, [pc, #40]	; (8004874 <HAL_RCC_ClockConfig+0x26c>)
 800484a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800484c:	4b0a      	ldr	r3, [pc, #40]	; (8004878 <HAL_RCC_ClockConfig+0x270>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4618      	mov	r0, r3
 8004852:	f7fd f8a1 	bl	8001998 <HAL_InitTick>
 8004856:	4603      	mov	r3, r0
 8004858:	73fb      	strb	r3, [r7, #15]

  return status;
 800485a:	7bfb      	ldrb	r3, [r7, #15]
}
 800485c:	4618      	mov	r0, r3
 800485e:	3718      	adds	r7, #24
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	40022000 	.word	0x40022000
 8004868:	40021000 	.word	0x40021000
 800486c:	04c4b400 	.word	0x04c4b400
 8004870:	0800645c 	.word	0x0800645c
 8004874:	20000000 	.word	0x20000000
 8004878:	20000004 	.word	0x20000004

0800487c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800487c:	b480      	push	{r7}
 800487e:	b089      	sub	sp, #36	; 0x24
 8004880:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004882:	2300      	movs	r3, #0
 8004884:	61fb      	str	r3, [r7, #28]
 8004886:	2300      	movs	r3, #0
 8004888:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800488a:	4b3e      	ldr	r3, [pc, #248]	; (8004984 <HAL_RCC_GetSysClockFreq+0x108>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f003 030c 	and.w	r3, r3, #12
 8004892:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004894:	4b3b      	ldr	r3, [pc, #236]	; (8004984 <HAL_RCC_GetSysClockFreq+0x108>)
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f003 0303 	and.w	r3, r3, #3
 800489c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d005      	beq.n	80048b0 <HAL_RCC_GetSysClockFreq+0x34>
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	2b0c      	cmp	r3, #12
 80048a8:	d121      	bne.n	80048ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d11e      	bne.n	80048ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80048b0:	4b34      	ldr	r3, [pc, #208]	; (8004984 <HAL_RCC_GetSysClockFreq+0x108>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0308 	and.w	r3, r3, #8
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d107      	bne.n	80048cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80048bc:	4b31      	ldr	r3, [pc, #196]	; (8004984 <HAL_RCC_GetSysClockFreq+0x108>)
 80048be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048c2:	0a1b      	lsrs	r3, r3, #8
 80048c4:	f003 030f 	and.w	r3, r3, #15
 80048c8:	61fb      	str	r3, [r7, #28]
 80048ca:	e005      	b.n	80048d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80048cc:	4b2d      	ldr	r3, [pc, #180]	; (8004984 <HAL_RCC_GetSysClockFreq+0x108>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	091b      	lsrs	r3, r3, #4
 80048d2:	f003 030f 	and.w	r3, r3, #15
 80048d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80048d8:	4a2b      	ldr	r2, [pc, #172]	; (8004988 <HAL_RCC_GetSysClockFreq+0x10c>)
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10d      	bne.n	8004904 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048ec:	e00a      	b.n	8004904 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	2b04      	cmp	r3, #4
 80048f2:	d102      	bne.n	80048fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80048f4:	4b25      	ldr	r3, [pc, #148]	; (800498c <HAL_RCC_GetSysClockFreq+0x110>)
 80048f6:	61bb      	str	r3, [r7, #24]
 80048f8:	e004      	b.n	8004904 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	d101      	bne.n	8004904 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004900:	4b23      	ldr	r3, [pc, #140]	; (8004990 <HAL_RCC_GetSysClockFreq+0x114>)
 8004902:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	2b0c      	cmp	r3, #12
 8004908:	d134      	bne.n	8004974 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800490a:	4b1e      	ldr	r3, [pc, #120]	; (8004984 <HAL_RCC_GetSysClockFreq+0x108>)
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	f003 0303 	and.w	r3, r3, #3
 8004912:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	2b02      	cmp	r3, #2
 8004918:	d003      	beq.n	8004922 <HAL_RCC_GetSysClockFreq+0xa6>
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	2b03      	cmp	r3, #3
 800491e:	d003      	beq.n	8004928 <HAL_RCC_GetSysClockFreq+0xac>
 8004920:	e005      	b.n	800492e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004922:	4b1a      	ldr	r3, [pc, #104]	; (800498c <HAL_RCC_GetSysClockFreq+0x110>)
 8004924:	617b      	str	r3, [r7, #20]
      break;
 8004926:	e005      	b.n	8004934 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004928:	4b19      	ldr	r3, [pc, #100]	; (8004990 <HAL_RCC_GetSysClockFreq+0x114>)
 800492a:	617b      	str	r3, [r7, #20]
      break;
 800492c:	e002      	b.n	8004934 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	617b      	str	r3, [r7, #20]
      break;
 8004932:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004934:	4b13      	ldr	r3, [pc, #76]	; (8004984 <HAL_RCC_GetSysClockFreq+0x108>)
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	091b      	lsrs	r3, r3, #4
 800493a:	f003 030f 	and.w	r3, r3, #15
 800493e:	3301      	adds	r3, #1
 8004940:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004942:	4b10      	ldr	r3, [pc, #64]	; (8004984 <HAL_RCC_GetSysClockFreq+0x108>)
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	0a1b      	lsrs	r3, r3, #8
 8004948:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	fb03 f202 	mul.w	r2, r3, r2
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	fbb2 f3f3 	udiv	r3, r2, r3
 8004958:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800495a:	4b0a      	ldr	r3, [pc, #40]	; (8004984 <HAL_RCC_GetSysClockFreq+0x108>)
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	0e5b      	lsrs	r3, r3, #25
 8004960:	f003 0303 	and.w	r3, r3, #3
 8004964:	3301      	adds	r3, #1
 8004966:	005b      	lsls	r3, r3, #1
 8004968:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004972:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004974:	69bb      	ldr	r3, [r7, #24]
}
 8004976:	4618      	mov	r0, r3
 8004978:	3724      	adds	r7, #36	; 0x24
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	40021000 	.word	0x40021000
 8004988:	08006474 	.word	0x08006474
 800498c:	00f42400 	.word	0x00f42400
 8004990:	007a1200 	.word	0x007a1200

08004994 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004998:	4b03      	ldr	r3, [pc, #12]	; (80049a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800499a:	681b      	ldr	r3, [r3, #0]
}
 800499c:	4618      	mov	r0, r3
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	20000000 	.word	0x20000000

080049ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80049b0:	f7ff fff0 	bl	8004994 <HAL_RCC_GetHCLKFreq>
 80049b4:	4602      	mov	r2, r0
 80049b6:	4b06      	ldr	r3, [pc, #24]	; (80049d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	0a1b      	lsrs	r3, r3, #8
 80049bc:	f003 0307 	and.w	r3, r3, #7
 80049c0:	4904      	ldr	r1, [pc, #16]	; (80049d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80049c2:	5ccb      	ldrb	r3, [r1, r3]
 80049c4:	f003 031f 	and.w	r3, r3, #31
 80049c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	40021000 	.word	0x40021000
 80049d4:	0800646c 	.word	0x0800646c

080049d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80049dc:	f7ff ffda 	bl	8004994 <HAL_RCC_GetHCLKFreq>
 80049e0:	4602      	mov	r2, r0
 80049e2:	4b06      	ldr	r3, [pc, #24]	; (80049fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	0adb      	lsrs	r3, r3, #11
 80049e8:	f003 0307 	and.w	r3, r3, #7
 80049ec:	4904      	ldr	r1, [pc, #16]	; (8004a00 <HAL_RCC_GetPCLK2Freq+0x28>)
 80049ee:	5ccb      	ldrb	r3, [r1, r3]
 80049f0:	f003 031f 	and.w	r3, r3, #31
 80049f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40021000 	.word	0x40021000
 8004a00:	0800646c 	.word	0x0800646c

08004a04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004a10:	4b27      	ldr	r3, [pc, #156]	; (8004ab0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d003      	beq.n	8004a24 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004a1c:	f7ff f916 	bl	8003c4c <HAL_PWREx_GetVoltageRange>
 8004a20:	6178      	str	r0, [r7, #20]
 8004a22:	e014      	b.n	8004a4e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a24:	4b22      	ldr	r3, [pc, #136]	; (8004ab0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a28:	4a21      	ldr	r2, [pc, #132]	; (8004ab0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a2e:	6593      	str	r3, [r2, #88]	; 0x58
 8004a30:	4b1f      	ldr	r3, [pc, #124]	; (8004ab0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a38:	60fb      	str	r3, [r7, #12]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004a3c:	f7ff f906 	bl	8003c4c <HAL_PWREx_GetVoltageRange>
 8004a40:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004a42:	4b1b      	ldr	r3, [pc, #108]	; (8004ab0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a46:	4a1a      	ldr	r2, [pc, #104]	; (8004ab0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a4c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a54:	d10b      	bne.n	8004a6e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2b80      	cmp	r3, #128	; 0x80
 8004a5a:	d913      	bls.n	8004a84 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2ba0      	cmp	r3, #160	; 0xa0
 8004a60:	d902      	bls.n	8004a68 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a62:	2302      	movs	r3, #2
 8004a64:	613b      	str	r3, [r7, #16]
 8004a66:	e00d      	b.n	8004a84 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a68:	2301      	movs	r3, #1
 8004a6a:	613b      	str	r3, [r7, #16]
 8004a6c:	e00a      	b.n	8004a84 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b7f      	cmp	r3, #127	; 0x7f
 8004a72:	d902      	bls.n	8004a7a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004a74:	2302      	movs	r3, #2
 8004a76:	613b      	str	r3, [r7, #16]
 8004a78:	e004      	b.n	8004a84 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2b70      	cmp	r3, #112	; 0x70
 8004a7e:	d101      	bne.n	8004a84 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a80:	2301      	movs	r3, #1
 8004a82:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004a84:	4b0b      	ldr	r3, [pc, #44]	; (8004ab4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f023 020f 	bic.w	r2, r3, #15
 8004a8c:	4909      	ldr	r1, [pc, #36]	; (8004ab4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004a94:	4b07      	ldr	r3, [pc, #28]	; (8004ab4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 030f 	and.w	r3, r3, #15
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d001      	beq.n	8004aa6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e000      	b.n	8004aa8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3718      	adds	r7, #24
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	40021000 	.word	0x40021000
 8004ab4:	40022000 	.word	0x40022000

08004ab8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b087      	sub	sp, #28
 8004abc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004abe:	4b2d      	ldr	r3, [pc, #180]	; (8004b74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	f003 0303 	and.w	r3, r3, #3
 8004ac6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2b03      	cmp	r3, #3
 8004acc:	d00b      	beq.n	8004ae6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2b03      	cmp	r3, #3
 8004ad2:	d825      	bhi.n	8004b20 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d008      	beq.n	8004aec <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d11f      	bne.n	8004b20 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004ae0:	4b25      	ldr	r3, [pc, #148]	; (8004b78 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004ae2:	613b      	str	r3, [r7, #16]
    break;
 8004ae4:	e01f      	b.n	8004b26 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004ae6:	4b25      	ldr	r3, [pc, #148]	; (8004b7c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004ae8:	613b      	str	r3, [r7, #16]
    break;
 8004aea:	e01c      	b.n	8004b26 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004aec:	4b21      	ldr	r3, [pc, #132]	; (8004b74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0308 	and.w	r3, r3, #8
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d107      	bne.n	8004b08 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004af8:	4b1e      	ldr	r3, [pc, #120]	; (8004b74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004afe:	0a1b      	lsrs	r3, r3, #8
 8004b00:	f003 030f 	and.w	r3, r3, #15
 8004b04:	617b      	str	r3, [r7, #20]
 8004b06:	e005      	b.n	8004b14 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b08:	4b1a      	ldr	r3, [pc, #104]	; (8004b74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	091b      	lsrs	r3, r3, #4
 8004b0e:	f003 030f 	and.w	r3, r3, #15
 8004b12:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004b14:	4a1a      	ldr	r2, [pc, #104]	; (8004b80 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b1c:	613b      	str	r3, [r7, #16]
    break;
 8004b1e:	e002      	b.n	8004b26 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004b20:	2300      	movs	r3, #0
 8004b22:	613b      	str	r3, [r7, #16]
    break;
 8004b24:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b26:	4b13      	ldr	r3, [pc, #76]	; (8004b74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	091b      	lsrs	r3, r3, #4
 8004b2c:	f003 030f 	and.w	r3, r3, #15
 8004b30:	3301      	adds	r3, #1
 8004b32:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004b34:	4b0f      	ldr	r3, [pc, #60]	; (8004b74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	0a1b      	lsrs	r3, r3, #8
 8004b3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	fb03 f202 	mul.w	r2, r3, r2
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b4a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b4c:	4b09      	ldr	r3, [pc, #36]	; (8004b74 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	0e5b      	lsrs	r3, r3, #25
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	3301      	adds	r3, #1
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b64:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004b66:	683b      	ldr	r3, [r7, #0]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	371c      	adds	r7, #28
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	40021000 	.word	0x40021000
 8004b78:	00f42400 	.word	0x00f42400
 8004b7c:	007a1200 	.word	0x007a1200
 8004b80:	08006474 	.word	0x08006474

08004b84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b90:	2300      	movs	r3, #0
 8004b92:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d040      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ba4:	2b80      	cmp	r3, #128	; 0x80
 8004ba6:	d02a      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004ba8:	2b80      	cmp	r3, #128	; 0x80
 8004baa:	d825      	bhi.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004bac:	2b60      	cmp	r3, #96	; 0x60
 8004bae:	d026      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004bb0:	2b60      	cmp	r3, #96	; 0x60
 8004bb2:	d821      	bhi.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004bb4:	2b40      	cmp	r3, #64	; 0x40
 8004bb6:	d006      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004bb8:	2b40      	cmp	r3, #64	; 0x40
 8004bba:	d81d      	bhi.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d009      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004bc0:	2b20      	cmp	r3, #32
 8004bc2:	d010      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004bc4:	e018      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004bc6:	4b89      	ldr	r3, [pc, #548]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	4a88      	ldr	r2, [pc, #544]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bd0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004bd2:	e015      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	3304      	adds	r3, #4
 8004bd8:	2100      	movs	r1, #0
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f000 fb12 	bl	8005204 <RCCEx_PLLSAI1_Config>
 8004be0:	4603      	mov	r3, r0
 8004be2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004be4:	e00c      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	3320      	adds	r3, #32
 8004bea:	2100      	movs	r1, #0
 8004bec:	4618      	mov	r0, r3
 8004bee:	f000 fbfd 	bl	80053ec <RCCEx_PLLSAI2_Config>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004bf6:	e003      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	74fb      	strb	r3, [r7, #19]
      break;
 8004bfc:	e000      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004bfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c00:	7cfb      	ldrb	r3, [r7, #19]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10b      	bne.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c06:	4b79      	ldr	r3, [pc, #484]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c0c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c14:	4975      	ldr	r1, [pc, #468]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004c1c:	e001      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c1e:	7cfb      	ldrb	r3, [r7, #19]
 8004c20:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d047      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c36:	d030      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c3c:	d82a      	bhi.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004c3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c42:	d02a      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004c44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c48:	d824      	bhi.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004c4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c4e:	d008      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c54:	d81e      	bhi.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00a      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004c5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c5e:	d010      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004c60:	e018      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c62:	4b62      	ldr	r3, [pc, #392]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	4a61      	ldr	r2, [pc, #388]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c6c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c6e:	e015      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	3304      	adds	r3, #4
 8004c74:	2100      	movs	r1, #0
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 fac4 	bl	8005204 <RCCEx_PLLSAI1_Config>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c80:	e00c      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	3320      	adds	r3, #32
 8004c86:	2100      	movs	r1, #0
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f000 fbaf 	bl	80053ec <RCCEx_PLLSAI2_Config>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c92:	e003      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	74fb      	strb	r3, [r7, #19]
      break;
 8004c98:	e000      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004c9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c9c:	7cfb      	ldrb	r3, [r7, #19]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10b      	bne.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ca2:	4b52      	ldr	r3, [pc, #328]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ca4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ca8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb0:	494e      	ldr	r1, [pc, #312]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004cb8:	e001      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cba:	7cfb      	ldrb	r3, [r7, #19]
 8004cbc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f000 809f 	beq.w	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004cd0:	4b46      	ldr	r3, [pc, #280]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d101      	bne.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e000      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00d      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ce6:	4b41      	ldr	r3, [pc, #260]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cea:	4a40      	ldr	r2, [pc, #256]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cf0:	6593      	str	r3, [r2, #88]	; 0x58
 8004cf2:	4b3e      	ldr	r3, [pc, #248]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cfa:	60bb      	str	r3, [r7, #8]
 8004cfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d02:	4b3b      	ldr	r3, [pc, #236]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a3a      	ldr	r2, [pc, #232]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d0e:	f7fc fe93 	bl	8001a38 <HAL_GetTick>
 8004d12:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d14:	e009      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d16:	f7fc fe8f 	bl	8001a38 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d902      	bls.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	74fb      	strb	r3, [r7, #19]
        break;
 8004d28:	e005      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d2a:	4b31      	ldr	r3, [pc, #196]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d0ef      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004d36:	7cfb      	ldrb	r3, [r7, #19]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d15b      	bne.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d3c:	4b2b      	ldr	r3, [pc, #172]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d46:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d01f      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d019      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d5a:	4b24      	ldr	r3, [pc, #144]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d64:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d66:	4b21      	ldr	r3, [pc, #132]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6c:	4a1f      	ldr	r2, [pc, #124]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d76:	4b1d      	ldr	r3, [pc, #116]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7c:	4a1b      	ldr	r2, [pc, #108]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d86:	4a19      	ldr	r2, [pc, #100]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f003 0301 	and.w	r3, r3, #1
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d016      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d98:	f7fc fe4e 	bl	8001a38 <HAL_GetTick>
 8004d9c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d9e:	e00b      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004da0:	f7fc fe4a 	bl	8001a38 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d902      	bls.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	74fb      	strb	r3, [r7, #19]
            break;
 8004db6:	e006      	b.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004db8:	4b0c      	ldr	r3, [pc, #48]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d0ec      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004dc6:	7cfb      	ldrb	r3, [r7, #19]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10c      	bne.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dcc:	4b07      	ldr	r3, [pc, #28]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ddc:	4903      	ldr	r1, [pc, #12]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004de4:	e008      	b.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004de6:	7cfb      	ldrb	r3, [r7, #19]
 8004de8:	74bb      	strb	r3, [r7, #18]
 8004dea:	e005      	b.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004dec:	40021000 	.word	0x40021000
 8004df0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004df4:	7cfb      	ldrb	r3, [r7, #19]
 8004df6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004df8:	7c7b      	ldrb	r3, [r7, #17]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d105      	bne.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dfe:	4ba0      	ldr	r3, [pc, #640]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e02:	4a9f      	ldr	r2, [pc, #636]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e08:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00a      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e16:	4b9a      	ldr	r3, [pc, #616]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1c:	f023 0203 	bic.w	r2, r3, #3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e24:	4996      	ldr	r1, [pc, #600]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0302 	and.w	r3, r3, #2
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00a      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e38:	4b91      	ldr	r3, [pc, #580]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e3e:	f023 020c 	bic.w	r2, r3, #12
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	498e      	ldr	r1, [pc, #568]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0304 	and.w	r3, r3, #4
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00a      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e5a:	4b89      	ldr	r3, [pc, #548]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e60:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e68:	4985      	ldr	r1, [pc, #532]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0308 	and.w	r3, r3, #8
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00a      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e7c:	4b80      	ldr	r3, [pc, #512]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e82:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e8a:	497d      	ldr	r1, [pc, #500]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0310 	and.w	r3, r3, #16
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e9e:	4b78      	ldr	r3, [pc, #480]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eac:	4974      	ldr	r1, [pc, #464]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0320 	and.w	r3, r3, #32
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00a      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ec0:	4b6f      	ldr	r3, [pc, #444]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ece:	496c      	ldr	r1, [pc, #432]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00a      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ee2:	4b67      	ldr	r3, [pc, #412]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ef0:	4963      	ldr	r1, [pc, #396]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00a      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f04:	4b5e      	ldr	r3, [pc, #376]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f12:	495b      	ldr	r1, [pc, #364]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00a      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f26:	4b56      	ldr	r3, [pc, #344]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f34:	4952      	ldr	r1, [pc, #328]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00a      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f48:	4b4d      	ldr	r3, [pc, #308]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f4e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f56:	494a      	ldr	r1, [pc, #296]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00a      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f6a:	4b45      	ldr	r3, [pc, #276]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f78:	4941      	ldr	r1, [pc, #260]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00a      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f8c:	4b3c      	ldr	r3, [pc, #240]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f92:	f023 0203 	bic.w	r2, r3, #3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f9a:	4939      	ldr	r1, [pc, #228]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d028      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fae:	4b34      	ldr	r3, [pc, #208]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fbc:	4930      	ldr	r1, [pc, #192]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fcc:	d106      	bne.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fce:	4b2c      	ldr	r3, [pc, #176]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	4a2b      	ldr	r2, [pc, #172]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fd8:	60d3      	str	r3, [r2, #12]
 8004fda:	e011      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fe0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fe4:	d10c      	bne.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	3304      	adds	r3, #4
 8004fea:	2101      	movs	r1, #1
 8004fec:	4618      	mov	r0, r3
 8004fee:	f000 f909 	bl	8005204 <RCCEx_PLLSAI1_Config>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004ff6:	7cfb      	ldrb	r3, [r7, #19]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d001      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004ffc:	7cfb      	ldrb	r3, [r7, #19]
 8004ffe:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d04d      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005010:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005014:	d108      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005016:	4b1a      	ldr	r3, [pc, #104]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005018:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800501c:	4a18      	ldr	r2, [pc, #96]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800501e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005022:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005026:	e012      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005028:	4b15      	ldr	r3, [pc, #84]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800502a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800502e:	4a14      	ldr	r2, [pc, #80]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005030:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005034:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005038:	4b11      	ldr	r3, [pc, #68]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800503a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800503e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005046:	490e      	ldr	r1, [pc, #56]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005048:	4313      	orrs	r3, r2
 800504a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005052:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005056:	d106      	bne.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005058:	4b09      	ldr	r3, [pc, #36]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	4a08      	ldr	r2, [pc, #32]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800505e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005062:	60d3      	str	r3, [r2, #12]
 8005064:	e020      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800506a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800506e:	d109      	bne.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005070:	4b03      	ldr	r3, [pc, #12]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	4a02      	ldr	r2, [pc, #8]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800507a:	60d3      	str	r3, [r2, #12]
 800507c:	e014      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800507e:	bf00      	nop
 8005080:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005088:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800508c:	d10c      	bne.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	3304      	adds	r3, #4
 8005092:	2101      	movs	r1, #1
 8005094:	4618      	mov	r0, r3
 8005096:	f000 f8b5 	bl	8005204 <RCCEx_PLLSAI1_Config>
 800509a:	4603      	mov	r3, r0
 800509c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800509e:	7cfb      	ldrb	r3, [r7, #19]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d001      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80050a4:	7cfb      	ldrb	r3, [r7, #19]
 80050a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d028      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80050b4:	4b4a      	ldr	r3, [pc, #296]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050c2:	4947      	ldr	r1, [pc, #284]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050d2:	d106      	bne.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050d4:	4b42      	ldr	r3, [pc, #264]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	4a41      	ldr	r2, [pc, #260]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050de:	60d3      	str	r3, [r2, #12]
 80050e0:	e011      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050ea:	d10c      	bne.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	3304      	adds	r3, #4
 80050f0:	2101      	movs	r1, #1
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 f886 	bl	8005204 <RCCEx_PLLSAI1_Config>
 80050f8:	4603      	mov	r3, r0
 80050fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050fc:	7cfb      	ldrb	r3, [r7, #19]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d001      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005102:	7cfb      	ldrb	r3, [r7, #19]
 8005104:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d01e      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005112:	4b33      	ldr	r3, [pc, #204]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005118:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005122:	492f      	ldr	r1, [pc, #188]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005124:	4313      	orrs	r3, r2
 8005126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005130:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005134:	d10c      	bne.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	3304      	adds	r3, #4
 800513a:	2102      	movs	r1, #2
 800513c:	4618      	mov	r0, r3
 800513e:	f000 f861 	bl	8005204 <RCCEx_PLLSAI1_Config>
 8005142:	4603      	mov	r3, r0
 8005144:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005146:	7cfb      	ldrb	r3, [r7, #19]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800514c:	7cfb      	ldrb	r3, [r7, #19]
 800514e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00b      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800515c:	4b20      	ldr	r3, [pc, #128]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800515e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005162:	f023 0204 	bic.w	r2, r3, #4
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800516c:	491c      	ldr	r1, [pc, #112]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800516e:	4313      	orrs	r3, r2
 8005170:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00b      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005180:	4b17      	ldr	r3, [pc, #92]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005182:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005186:	f023 0218 	bic.w	r2, r3, #24
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005190:	4913      	ldr	r1, [pc, #76]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005192:	4313      	orrs	r3, r2
 8005194:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d017      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80051a4:	4b0e      	ldr	r3, [pc, #56]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051b4:	490a      	ldr	r1, [pc, #40]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051c6:	d105      	bne.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051c8:	4b05      	ldr	r3, [pc, #20]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	4a04      	ldr	r2, [pc, #16]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051d2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80051d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3718      	adds	r7, #24
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	40021000 	.word	0x40021000

080051e4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80051e4:	b480      	push	{r7}
 80051e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80051e8:	4b05      	ldr	r3, [pc, #20]	; (8005200 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a04      	ldr	r2, [pc, #16]	; (8005200 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80051ee:	f043 0304 	orr.w	r3, r3, #4
 80051f2:	6013      	str	r3, [r2, #0]
}
 80051f4:	bf00      	nop
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	40021000 	.word	0x40021000

08005204 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800520e:	2300      	movs	r3, #0
 8005210:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005212:	4b72      	ldr	r3, [pc, #456]	; (80053dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	f003 0303 	and.w	r3, r3, #3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00e      	beq.n	800523c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800521e:	4b6f      	ldr	r3, [pc, #444]	; (80053dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	f003 0203 	and.w	r2, r3, #3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	429a      	cmp	r2, r3
 800522c:	d103      	bne.n	8005236 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
       ||
 8005232:	2b00      	cmp	r3, #0
 8005234:	d142      	bne.n	80052bc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	73fb      	strb	r3, [r7, #15]
 800523a:	e03f      	b.n	80052bc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2b03      	cmp	r3, #3
 8005242:	d018      	beq.n	8005276 <RCCEx_PLLSAI1_Config+0x72>
 8005244:	2b03      	cmp	r3, #3
 8005246:	d825      	bhi.n	8005294 <RCCEx_PLLSAI1_Config+0x90>
 8005248:	2b01      	cmp	r3, #1
 800524a:	d002      	beq.n	8005252 <RCCEx_PLLSAI1_Config+0x4e>
 800524c:	2b02      	cmp	r3, #2
 800524e:	d009      	beq.n	8005264 <RCCEx_PLLSAI1_Config+0x60>
 8005250:	e020      	b.n	8005294 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005252:	4b62      	ldr	r3, [pc, #392]	; (80053dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d11d      	bne.n	800529a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005262:	e01a      	b.n	800529a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005264:	4b5d      	ldr	r3, [pc, #372]	; (80053dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800526c:	2b00      	cmp	r3, #0
 800526e:	d116      	bne.n	800529e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005274:	e013      	b.n	800529e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005276:	4b59      	ldr	r3, [pc, #356]	; (80053dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10f      	bne.n	80052a2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005282:	4b56      	ldr	r3, [pc, #344]	; (80053dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d109      	bne.n	80052a2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005292:	e006      	b.n	80052a2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	73fb      	strb	r3, [r7, #15]
      break;
 8005298:	e004      	b.n	80052a4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800529a:	bf00      	nop
 800529c:	e002      	b.n	80052a4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800529e:	bf00      	nop
 80052a0:	e000      	b.n	80052a4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80052a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80052a4:	7bfb      	ldrb	r3, [r7, #15]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d108      	bne.n	80052bc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80052aa:	4b4c      	ldr	r3, [pc, #304]	; (80053dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	f023 0203 	bic.w	r2, r3, #3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4949      	ldr	r1, [pc, #292]	; (80053dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80052bc:	7bfb      	ldrb	r3, [r7, #15]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f040 8086 	bne.w	80053d0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80052c4:	4b45      	ldr	r3, [pc, #276]	; (80053dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a44      	ldr	r2, [pc, #272]	; (80053dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80052ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80052ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052d0:	f7fc fbb2 	bl	8001a38 <HAL_GetTick>
 80052d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80052d6:	e009      	b.n	80052ec <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052d8:	f7fc fbae 	bl	8001a38 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d902      	bls.n	80052ec <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	73fb      	strb	r3, [r7, #15]
        break;
 80052ea:	e005      	b.n	80052f8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80052ec:	4b3b      	ldr	r3, [pc, #236]	; (80053dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1ef      	bne.n	80052d8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80052f8:	7bfb      	ldrb	r3, [r7, #15]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d168      	bne.n	80053d0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d113      	bne.n	800532c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005304:	4b35      	ldr	r3, [pc, #212]	; (80053dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005306:	691a      	ldr	r2, [r3, #16]
 8005308:	4b35      	ldr	r3, [pc, #212]	; (80053e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800530a:	4013      	ands	r3, r2
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	6892      	ldr	r2, [r2, #8]
 8005310:	0211      	lsls	r1, r2, #8
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	68d2      	ldr	r2, [r2, #12]
 8005316:	06d2      	lsls	r2, r2, #27
 8005318:	4311      	orrs	r1, r2
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	6852      	ldr	r2, [r2, #4]
 800531e:	3a01      	subs	r2, #1
 8005320:	0112      	lsls	r2, r2, #4
 8005322:	430a      	orrs	r2, r1
 8005324:	492d      	ldr	r1, [pc, #180]	; (80053dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005326:	4313      	orrs	r3, r2
 8005328:	610b      	str	r3, [r1, #16]
 800532a:	e02d      	b.n	8005388 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d115      	bne.n	800535e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005332:	4b2a      	ldr	r3, [pc, #168]	; (80053dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005334:	691a      	ldr	r2, [r3, #16]
 8005336:	4b2b      	ldr	r3, [pc, #172]	; (80053e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005338:	4013      	ands	r3, r2
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	6892      	ldr	r2, [r2, #8]
 800533e:	0211      	lsls	r1, r2, #8
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	6912      	ldr	r2, [r2, #16]
 8005344:	0852      	lsrs	r2, r2, #1
 8005346:	3a01      	subs	r2, #1
 8005348:	0552      	lsls	r2, r2, #21
 800534a:	4311      	orrs	r1, r2
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	6852      	ldr	r2, [r2, #4]
 8005350:	3a01      	subs	r2, #1
 8005352:	0112      	lsls	r2, r2, #4
 8005354:	430a      	orrs	r2, r1
 8005356:	4921      	ldr	r1, [pc, #132]	; (80053dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005358:	4313      	orrs	r3, r2
 800535a:	610b      	str	r3, [r1, #16]
 800535c:	e014      	b.n	8005388 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800535e:	4b1f      	ldr	r3, [pc, #124]	; (80053dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005360:	691a      	ldr	r2, [r3, #16]
 8005362:	4b21      	ldr	r3, [pc, #132]	; (80053e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005364:	4013      	ands	r3, r2
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	6892      	ldr	r2, [r2, #8]
 800536a:	0211      	lsls	r1, r2, #8
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	6952      	ldr	r2, [r2, #20]
 8005370:	0852      	lsrs	r2, r2, #1
 8005372:	3a01      	subs	r2, #1
 8005374:	0652      	lsls	r2, r2, #25
 8005376:	4311      	orrs	r1, r2
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	6852      	ldr	r2, [r2, #4]
 800537c:	3a01      	subs	r2, #1
 800537e:	0112      	lsls	r2, r2, #4
 8005380:	430a      	orrs	r2, r1
 8005382:	4916      	ldr	r1, [pc, #88]	; (80053dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005384:	4313      	orrs	r3, r2
 8005386:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005388:	4b14      	ldr	r3, [pc, #80]	; (80053dc <RCCEx_PLLSAI1_Config+0x1d8>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a13      	ldr	r2, [pc, #76]	; (80053dc <RCCEx_PLLSAI1_Config+0x1d8>)
 800538e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005392:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005394:	f7fc fb50 	bl	8001a38 <HAL_GetTick>
 8005398:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800539a:	e009      	b.n	80053b0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800539c:	f7fc fb4c 	bl	8001a38 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d902      	bls.n	80053b0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	73fb      	strb	r3, [r7, #15]
          break;
 80053ae:	e005      	b.n	80053bc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80053b0:	4b0a      	ldr	r3, [pc, #40]	; (80053dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d0ef      	beq.n	800539c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80053bc:	7bfb      	ldrb	r3, [r7, #15]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d106      	bne.n	80053d0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80053c2:	4b06      	ldr	r3, [pc, #24]	; (80053dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80053c4:	691a      	ldr	r2, [r3, #16]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	4904      	ldr	r1, [pc, #16]	; (80053dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80053d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	40021000 	.word	0x40021000
 80053e0:	07ff800f 	.word	0x07ff800f
 80053e4:	ff9f800f 	.word	0xff9f800f
 80053e8:	f9ff800f 	.word	0xf9ff800f

080053ec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053f6:	2300      	movs	r3, #0
 80053f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80053fa:	4b72      	ldr	r3, [pc, #456]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	f003 0303 	and.w	r3, r3, #3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00e      	beq.n	8005424 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005406:	4b6f      	ldr	r3, [pc, #444]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	f003 0203 	and.w	r2, r3, #3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	429a      	cmp	r2, r3
 8005414:	d103      	bne.n	800541e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
       ||
 800541a:	2b00      	cmp	r3, #0
 800541c:	d142      	bne.n	80054a4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	73fb      	strb	r3, [r7, #15]
 8005422:	e03f      	b.n	80054a4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b03      	cmp	r3, #3
 800542a:	d018      	beq.n	800545e <RCCEx_PLLSAI2_Config+0x72>
 800542c:	2b03      	cmp	r3, #3
 800542e:	d825      	bhi.n	800547c <RCCEx_PLLSAI2_Config+0x90>
 8005430:	2b01      	cmp	r3, #1
 8005432:	d002      	beq.n	800543a <RCCEx_PLLSAI2_Config+0x4e>
 8005434:	2b02      	cmp	r3, #2
 8005436:	d009      	beq.n	800544c <RCCEx_PLLSAI2_Config+0x60>
 8005438:	e020      	b.n	800547c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800543a:	4b62      	ldr	r3, [pc, #392]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0302 	and.w	r3, r3, #2
 8005442:	2b00      	cmp	r3, #0
 8005444:	d11d      	bne.n	8005482 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800544a:	e01a      	b.n	8005482 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800544c:	4b5d      	ldr	r3, [pc, #372]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005454:	2b00      	cmp	r3, #0
 8005456:	d116      	bne.n	8005486 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800545c:	e013      	b.n	8005486 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800545e:	4b59      	ldr	r3, [pc, #356]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10f      	bne.n	800548a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800546a:	4b56      	ldr	r3, [pc, #344]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d109      	bne.n	800548a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800547a:	e006      	b.n	800548a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	73fb      	strb	r3, [r7, #15]
      break;
 8005480:	e004      	b.n	800548c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005482:	bf00      	nop
 8005484:	e002      	b.n	800548c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005486:	bf00      	nop
 8005488:	e000      	b.n	800548c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800548a:	bf00      	nop
    }

    if(status == HAL_OK)
 800548c:	7bfb      	ldrb	r3, [r7, #15]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d108      	bne.n	80054a4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005492:	4b4c      	ldr	r3, [pc, #304]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	f023 0203 	bic.w	r2, r3, #3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4949      	ldr	r1, [pc, #292]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80054a4:	7bfb      	ldrb	r3, [r7, #15]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f040 8086 	bne.w	80055b8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80054ac:	4b45      	ldr	r3, [pc, #276]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a44      	ldr	r2, [pc, #272]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054b8:	f7fc fabe 	bl	8001a38 <HAL_GetTick>
 80054bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80054be:	e009      	b.n	80054d4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80054c0:	f7fc faba 	bl	8001a38 <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d902      	bls.n	80054d4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	73fb      	strb	r3, [r7, #15]
        break;
 80054d2:	e005      	b.n	80054e0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80054d4:	4b3b      	ldr	r3, [pc, #236]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1ef      	bne.n	80054c0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80054e0:	7bfb      	ldrb	r3, [r7, #15]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d168      	bne.n	80055b8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d113      	bne.n	8005514 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80054ec:	4b35      	ldr	r3, [pc, #212]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054ee:	695a      	ldr	r2, [r3, #20]
 80054f0:	4b35      	ldr	r3, [pc, #212]	; (80055c8 <RCCEx_PLLSAI2_Config+0x1dc>)
 80054f2:	4013      	ands	r3, r2
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	6892      	ldr	r2, [r2, #8]
 80054f8:	0211      	lsls	r1, r2, #8
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	68d2      	ldr	r2, [r2, #12]
 80054fe:	06d2      	lsls	r2, r2, #27
 8005500:	4311      	orrs	r1, r2
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	6852      	ldr	r2, [r2, #4]
 8005506:	3a01      	subs	r2, #1
 8005508:	0112      	lsls	r2, r2, #4
 800550a:	430a      	orrs	r2, r1
 800550c:	492d      	ldr	r1, [pc, #180]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800550e:	4313      	orrs	r3, r2
 8005510:	614b      	str	r3, [r1, #20]
 8005512:	e02d      	b.n	8005570 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	2b01      	cmp	r3, #1
 8005518:	d115      	bne.n	8005546 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800551a:	4b2a      	ldr	r3, [pc, #168]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800551c:	695a      	ldr	r2, [r3, #20]
 800551e:	4b2b      	ldr	r3, [pc, #172]	; (80055cc <RCCEx_PLLSAI2_Config+0x1e0>)
 8005520:	4013      	ands	r3, r2
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	6892      	ldr	r2, [r2, #8]
 8005526:	0211      	lsls	r1, r2, #8
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	6912      	ldr	r2, [r2, #16]
 800552c:	0852      	lsrs	r2, r2, #1
 800552e:	3a01      	subs	r2, #1
 8005530:	0552      	lsls	r2, r2, #21
 8005532:	4311      	orrs	r1, r2
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	6852      	ldr	r2, [r2, #4]
 8005538:	3a01      	subs	r2, #1
 800553a:	0112      	lsls	r2, r2, #4
 800553c:	430a      	orrs	r2, r1
 800553e:	4921      	ldr	r1, [pc, #132]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005540:	4313      	orrs	r3, r2
 8005542:	614b      	str	r3, [r1, #20]
 8005544:	e014      	b.n	8005570 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005546:	4b1f      	ldr	r3, [pc, #124]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005548:	695a      	ldr	r2, [r3, #20]
 800554a:	4b21      	ldr	r3, [pc, #132]	; (80055d0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800554c:	4013      	ands	r3, r2
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	6892      	ldr	r2, [r2, #8]
 8005552:	0211      	lsls	r1, r2, #8
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	6952      	ldr	r2, [r2, #20]
 8005558:	0852      	lsrs	r2, r2, #1
 800555a:	3a01      	subs	r2, #1
 800555c:	0652      	lsls	r2, r2, #25
 800555e:	4311      	orrs	r1, r2
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	6852      	ldr	r2, [r2, #4]
 8005564:	3a01      	subs	r2, #1
 8005566:	0112      	lsls	r2, r2, #4
 8005568:	430a      	orrs	r2, r1
 800556a:	4916      	ldr	r1, [pc, #88]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800556c:	4313      	orrs	r3, r2
 800556e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005570:	4b14      	ldr	r3, [pc, #80]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a13      	ldr	r2, [pc, #76]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800557a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800557c:	f7fc fa5c 	bl	8001a38 <HAL_GetTick>
 8005580:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005582:	e009      	b.n	8005598 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005584:	f7fc fa58 	bl	8001a38 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	2b02      	cmp	r3, #2
 8005590:	d902      	bls.n	8005598 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	73fb      	strb	r3, [r7, #15]
          break;
 8005596:	e005      	b.n	80055a4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005598:	4b0a      	ldr	r3, [pc, #40]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d0ef      	beq.n	8005584 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80055a4:	7bfb      	ldrb	r3, [r7, #15]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d106      	bne.n	80055b8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80055aa:	4b06      	ldr	r3, [pc, #24]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055ac:	695a      	ldr	r2, [r3, #20]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	4904      	ldr	r1, [pc, #16]	; (80055c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80055b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	40021000 	.word	0x40021000
 80055c8:	07ff800f 	.word	0x07ff800f
 80055cc:	ff9f800f 	.word	0xff9f800f
 80055d0:	f9ff800f 	.word	0xf9ff800f

080055d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e095      	b.n	8005712 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d108      	bne.n	8005600 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055f6:	d009      	beq.n	800560c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	61da      	str	r2, [r3, #28]
 80055fe:	e005      	b.n	800560c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d106      	bne.n	800562c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7fb ff6a 	bl	8001500 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2202      	movs	r2, #2
 8005630:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005642:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800564c:	d902      	bls.n	8005654 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800564e:	2300      	movs	r3, #0
 8005650:	60fb      	str	r3, [r7, #12]
 8005652:	e002      	b.n	800565a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005654:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005658:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005662:	d007      	beq.n	8005674 <HAL_SPI_Init+0xa0>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800566c:	d002      	beq.n	8005674 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005684:	431a      	orrs	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	f003 0302 	and.w	r3, r3, #2
 800568e:	431a      	orrs	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	695b      	ldr	r3, [r3, #20]
 8005694:	f003 0301 	and.w	r3, r3, #1
 8005698:	431a      	orrs	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056a2:	431a      	orrs	r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	69db      	ldr	r3, [r3, #28]
 80056a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056ac:	431a      	orrs	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b6:	ea42 0103 	orr.w	r1, r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056be:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	430a      	orrs	r2, r1
 80056c8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	0c1b      	lsrs	r3, r3, #16
 80056d0:	f003 0204 	and.w	r2, r3, #4
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d8:	f003 0310 	and.w	r3, r3, #16
 80056dc:	431a      	orrs	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e2:	f003 0308 	and.w	r3, r3, #8
 80056e6:	431a      	orrs	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80056f0:	ea42 0103 	orr.w	r1, r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	430a      	orrs	r2, r1
 8005700:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b082      	sub	sp, #8
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d101      	bne.n	800572c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e042      	b.n	80057b2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005732:	2b00      	cmp	r3, #0
 8005734:	d106      	bne.n	8005744 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7fb ff54 	bl	80015ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2224      	movs	r2, #36	; 0x24
 8005748:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f022 0201 	bic.w	r2, r2, #1
 800575a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005760:	2b00      	cmp	r3, #0
 8005762:	d002      	beq.n	800576a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 fb25 	bl	8005db4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 f826 	bl	80057bc <UART_SetConfig>
 8005770:	4603      	mov	r3, r0
 8005772:	2b01      	cmp	r3, #1
 8005774:	d101      	bne.n	800577a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e01b      	b.n	80057b2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005788:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	689a      	ldr	r2, [r3, #8]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005798:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f042 0201 	orr.w	r2, r2, #1
 80057a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 fba4 	bl	8005ef8 <UART_CheckIdleState>
 80057b0:	4603      	mov	r3, r0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
	...

080057bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057c0:	b08c      	sub	sp, #48	; 0x30
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057c6:	2300      	movs	r3, #0
 80057c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	689a      	ldr	r2, [r3, #8]
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	431a      	orrs	r2, r3
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	431a      	orrs	r2, r3
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	69db      	ldr	r3, [r3, #28]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	4baa      	ldr	r3, [pc, #680]	; (8005a94 <UART_SetConfig+0x2d8>)
 80057ec:	4013      	ands	r3, r2
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	6812      	ldr	r2, [r2, #0]
 80057f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057f4:	430b      	orrs	r3, r1
 80057f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	68da      	ldr	r2, [r3, #12]
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	430a      	orrs	r2, r1
 800580c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a9f      	ldr	r2, [pc, #636]	; (8005a98 <UART_SetConfig+0x2dc>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d004      	beq.n	8005828 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005824:	4313      	orrs	r3, r2
 8005826:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005832:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	6812      	ldr	r2, [r2, #0]
 800583a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800583c:	430b      	orrs	r3, r1
 800583e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005846:	f023 010f 	bic.w	r1, r3, #15
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	430a      	orrs	r2, r1
 8005854:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a90      	ldr	r2, [pc, #576]	; (8005a9c <UART_SetConfig+0x2e0>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d125      	bne.n	80058ac <UART_SetConfig+0xf0>
 8005860:	4b8f      	ldr	r3, [pc, #572]	; (8005aa0 <UART_SetConfig+0x2e4>)
 8005862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005866:	f003 0303 	and.w	r3, r3, #3
 800586a:	2b03      	cmp	r3, #3
 800586c:	d81a      	bhi.n	80058a4 <UART_SetConfig+0xe8>
 800586e:	a201      	add	r2, pc, #4	; (adr r2, 8005874 <UART_SetConfig+0xb8>)
 8005870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005874:	08005885 	.word	0x08005885
 8005878:	08005895 	.word	0x08005895
 800587c:	0800588d 	.word	0x0800588d
 8005880:	0800589d 	.word	0x0800589d
 8005884:	2301      	movs	r3, #1
 8005886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800588a:	e116      	b.n	8005aba <UART_SetConfig+0x2fe>
 800588c:	2302      	movs	r3, #2
 800588e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005892:	e112      	b.n	8005aba <UART_SetConfig+0x2fe>
 8005894:	2304      	movs	r3, #4
 8005896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800589a:	e10e      	b.n	8005aba <UART_SetConfig+0x2fe>
 800589c:	2308      	movs	r3, #8
 800589e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058a2:	e10a      	b.n	8005aba <UART_SetConfig+0x2fe>
 80058a4:	2310      	movs	r3, #16
 80058a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058aa:	e106      	b.n	8005aba <UART_SetConfig+0x2fe>
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a7c      	ldr	r2, [pc, #496]	; (8005aa4 <UART_SetConfig+0x2e8>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d138      	bne.n	8005928 <UART_SetConfig+0x16c>
 80058b6:	4b7a      	ldr	r3, [pc, #488]	; (8005aa0 <UART_SetConfig+0x2e4>)
 80058b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058bc:	f003 030c 	and.w	r3, r3, #12
 80058c0:	2b0c      	cmp	r3, #12
 80058c2:	d82d      	bhi.n	8005920 <UART_SetConfig+0x164>
 80058c4:	a201      	add	r2, pc, #4	; (adr r2, 80058cc <UART_SetConfig+0x110>)
 80058c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ca:	bf00      	nop
 80058cc:	08005901 	.word	0x08005901
 80058d0:	08005921 	.word	0x08005921
 80058d4:	08005921 	.word	0x08005921
 80058d8:	08005921 	.word	0x08005921
 80058dc:	08005911 	.word	0x08005911
 80058e0:	08005921 	.word	0x08005921
 80058e4:	08005921 	.word	0x08005921
 80058e8:	08005921 	.word	0x08005921
 80058ec:	08005909 	.word	0x08005909
 80058f0:	08005921 	.word	0x08005921
 80058f4:	08005921 	.word	0x08005921
 80058f8:	08005921 	.word	0x08005921
 80058fc:	08005919 	.word	0x08005919
 8005900:	2300      	movs	r3, #0
 8005902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005906:	e0d8      	b.n	8005aba <UART_SetConfig+0x2fe>
 8005908:	2302      	movs	r3, #2
 800590a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800590e:	e0d4      	b.n	8005aba <UART_SetConfig+0x2fe>
 8005910:	2304      	movs	r3, #4
 8005912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005916:	e0d0      	b.n	8005aba <UART_SetConfig+0x2fe>
 8005918:	2308      	movs	r3, #8
 800591a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800591e:	e0cc      	b.n	8005aba <UART_SetConfig+0x2fe>
 8005920:	2310      	movs	r3, #16
 8005922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005926:	e0c8      	b.n	8005aba <UART_SetConfig+0x2fe>
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a5e      	ldr	r2, [pc, #376]	; (8005aa8 <UART_SetConfig+0x2ec>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d125      	bne.n	800597e <UART_SetConfig+0x1c2>
 8005932:	4b5b      	ldr	r3, [pc, #364]	; (8005aa0 <UART_SetConfig+0x2e4>)
 8005934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005938:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800593c:	2b30      	cmp	r3, #48	; 0x30
 800593e:	d016      	beq.n	800596e <UART_SetConfig+0x1b2>
 8005940:	2b30      	cmp	r3, #48	; 0x30
 8005942:	d818      	bhi.n	8005976 <UART_SetConfig+0x1ba>
 8005944:	2b20      	cmp	r3, #32
 8005946:	d00a      	beq.n	800595e <UART_SetConfig+0x1a2>
 8005948:	2b20      	cmp	r3, #32
 800594a:	d814      	bhi.n	8005976 <UART_SetConfig+0x1ba>
 800594c:	2b00      	cmp	r3, #0
 800594e:	d002      	beq.n	8005956 <UART_SetConfig+0x19a>
 8005950:	2b10      	cmp	r3, #16
 8005952:	d008      	beq.n	8005966 <UART_SetConfig+0x1aa>
 8005954:	e00f      	b.n	8005976 <UART_SetConfig+0x1ba>
 8005956:	2300      	movs	r3, #0
 8005958:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800595c:	e0ad      	b.n	8005aba <UART_SetConfig+0x2fe>
 800595e:	2302      	movs	r3, #2
 8005960:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005964:	e0a9      	b.n	8005aba <UART_SetConfig+0x2fe>
 8005966:	2304      	movs	r3, #4
 8005968:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800596c:	e0a5      	b.n	8005aba <UART_SetConfig+0x2fe>
 800596e:	2308      	movs	r3, #8
 8005970:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005974:	e0a1      	b.n	8005aba <UART_SetConfig+0x2fe>
 8005976:	2310      	movs	r3, #16
 8005978:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800597c:	e09d      	b.n	8005aba <UART_SetConfig+0x2fe>
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a4a      	ldr	r2, [pc, #296]	; (8005aac <UART_SetConfig+0x2f0>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d125      	bne.n	80059d4 <UART_SetConfig+0x218>
 8005988:	4b45      	ldr	r3, [pc, #276]	; (8005aa0 <UART_SetConfig+0x2e4>)
 800598a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800598e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005992:	2bc0      	cmp	r3, #192	; 0xc0
 8005994:	d016      	beq.n	80059c4 <UART_SetConfig+0x208>
 8005996:	2bc0      	cmp	r3, #192	; 0xc0
 8005998:	d818      	bhi.n	80059cc <UART_SetConfig+0x210>
 800599a:	2b80      	cmp	r3, #128	; 0x80
 800599c:	d00a      	beq.n	80059b4 <UART_SetConfig+0x1f8>
 800599e:	2b80      	cmp	r3, #128	; 0x80
 80059a0:	d814      	bhi.n	80059cc <UART_SetConfig+0x210>
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d002      	beq.n	80059ac <UART_SetConfig+0x1f0>
 80059a6:	2b40      	cmp	r3, #64	; 0x40
 80059a8:	d008      	beq.n	80059bc <UART_SetConfig+0x200>
 80059aa:	e00f      	b.n	80059cc <UART_SetConfig+0x210>
 80059ac:	2300      	movs	r3, #0
 80059ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059b2:	e082      	b.n	8005aba <UART_SetConfig+0x2fe>
 80059b4:	2302      	movs	r3, #2
 80059b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059ba:	e07e      	b.n	8005aba <UART_SetConfig+0x2fe>
 80059bc:	2304      	movs	r3, #4
 80059be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059c2:	e07a      	b.n	8005aba <UART_SetConfig+0x2fe>
 80059c4:	2308      	movs	r3, #8
 80059c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059ca:	e076      	b.n	8005aba <UART_SetConfig+0x2fe>
 80059cc:	2310      	movs	r3, #16
 80059ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059d2:	e072      	b.n	8005aba <UART_SetConfig+0x2fe>
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a35      	ldr	r2, [pc, #212]	; (8005ab0 <UART_SetConfig+0x2f4>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d12a      	bne.n	8005a34 <UART_SetConfig+0x278>
 80059de:	4b30      	ldr	r3, [pc, #192]	; (8005aa0 <UART_SetConfig+0x2e4>)
 80059e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059ec:	d01a      	beq.n	8005a24 <UART_SetConfig+0x268>
 80059ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059f2:	d81b      	bhi.n	8005a2c <UART_SetConfig+0x270>
 80059f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059f8:	d00c      	beq.n	8005a14 <UART_SetConfig+0x258>
 80059fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059fe:	d815      	bhi.n	8005a2c <UART_SetConfig+0x270>
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d003      	beq.n	8005a0c <UART_SetConfig+0x250>
 8005a04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a08:	d008      	beq.n	8005a1c <UART_SetConfig+0x260>
 8005a0a:	e00f      	b.n	8005a2c <UART_SetConfig+0x270>
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a12:	e052      	b.n	8005aba <UART_SetConfig+0x2fe>
 8005a14:	2302      	movs	r3, #2
 8005a16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a1a:	e04e      	b.n	8005aba <UART_SetConfig+0x2fe>
 8005a1c:	2304      	movs	r3, #4
 8005a1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a22:	e04a      	b.n	8005aba <UART_SetConfig+0x2fe>
 8005a24:	2308      	movs	r3, #8
 8005a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a2a:	e046      	b.n	8005aba <UART_SetConfig+0x2fe>
 8005a2c:	2310      	movs	r3, #16
 8005a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a32:	e042      	b.n	8005aba <UART_SetConfig+0x2fe>
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a17      	ldr	r2, [pc, #92]	; (8005a98 <UART_SetConfig+0x2dc>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d13a      	bne.n	8005ab4 <UART_SetConfig+0x2f8>
 8005a3e:	4b18      	ldr	r3, [pc, #96]	; (8005aa0 <UART_SetConfig+0x2e4>)
 8005a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a4c:	d01a      	beq.n	8005a84 <UART_SetConfig+0x2c8>
 8005a4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a52:	d81b      	bhi.n	8005a8c <UART_SetConfig+0x2d0>
 8005a54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a58:	d00c      	beq.n	8005a74 <UART_SetConfig+0x2b8>
 8005a5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a5e:	d815      	bhi.n	8005a8c <UART_SetConfig+0x2d0>
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d003      	beq.n	8005a6c <UART_SetConfig+0x2b0>
 8005a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a68:	d008      	beq.n	8005a7c <UART_SetConfig+0x2c0>
 8005a6a:	e00f      	b.n	8005a8c <UART_SetConfig+0x2d0>
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a72:	e022      	b.n	8005aba <UART_SetConfig+0x2fe>
 8005a74:	2302      	movs	r3, #2
 8005a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a7a:	e01e      	b.n	8005aba <UART_SetConfig+0x2fe>
 8005a7c:	2304      	movs	r3, #4
 8005a7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a82:	e01a      	b.n	8005aba <UART_SetConfig+0x2fe>
 8005a84:	2308      	movs	r3, #8
 8005a86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a8a:	e016      	b.n	8005aba <UART_SetConfig+0x2fe>
 8005a8c:	2310      	movs	r3, #16
 8005a8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a92:	e012      	b.n	8005aba <UART_SetConfig+0x2fe>
 8005a94:	cfff69f3 	.word	0xcfff69f3
 8005a98:	40008000 	.word	0x40008000
 8005a9c:	40013800 	.word	0x40013800
 8005aa0:	40021000 	.word	0x40021000
 8005aa4:	40004400 	.word	0x40004400
 8005aa8:	40004800 	.word	0x40004800
 8005aac:	40004c00 	.word	0x40004c00
 8005ab0:	40005000 	.word	0x40005000
 8005ab4:	2310      	movs	r3, #16
 8005ab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4aae      	ldr	r2, [pc, #696]	; (8005d78 <UART_SetConfig+0x5bc>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	f040 8097 	bne.w	8005bf4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ac6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005aca:	2b08      	cmp	r3, #8
 8005acc:	d823      	bhi.n	8005b16 <UART_SetConfig+0x35a>
 8005ace:	a201      	add	r2, pc, #4	; (adr r2, 8005ad4 <UART_SetConfig+0x318>)
 8005ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad4:	08005af9 	.word	0x08005af9
 8005ad8:	08005b17 	.word	0x08005b17
 8005adc:	08005b01 	.word	0x08005b01
 8005ae0:	08005b17 	.word	0x08005b17
 8005ae4:	08005b07 	.word	0x08005b07
 8005ae8:	08005b17 	.word	0x08005b17
 8005aec:	08005b17 	.word	0x08005b17
 8005af0:	08005b17 	.word	0x08005b17
 8005af4:	08005b0f 	.word	0x08005b0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005af8:	f7fe ff58 	bl	80049ac <HAL_RCC_GetPCLK1Freq>
 8005afc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005afe:	e010      	b.n	8005b22 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b00:	4b9e      	ldr	r3, [pc, #632]	; (8005d7c <UART_SetConfig+0x5c0>)
 8005b02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b04:	e00d      	b.n	8005b22 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b06:	f7fe feb9 	bl	800487c <HAL_RCC_GetSysClockFreq>
 8005b0a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b0c:	e009      	b.n	8005b22 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b14:	e005      	b.n	8005b22 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005b16:	2300      	movs	r3, #0
 8005b18:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005b20:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f000 8130 	beq.w	8005d8a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2e:	4a94      	ldr	r2, [pc, #592]	; (8005d80 <UART_SetConfig+0x5c4>)
 8005b30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b34:	461a      	mov	r2, r3
 8005b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b38:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b3c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	685a      	ldr	r2, [r3, #4]
 8005b42:	4613      	mov	r3, r2
 8005b44:	005b      	lsls	r3, r3, #1
 8005b46:	4413      	add	r3, r2
 8005b48:	69ba      	ldr	r2, [r7, #24]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d305      	bcc.n	8005b5a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d903      	bls.n	8005b62 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005b60:	e113      	b.n	8005d8a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b64:	2200      	movs	r2, #0
 8005b66:	60bb      	str	r3, [r7, #8]
 8005b68:	60fa      	str	r2, [r7, #12]
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6e:	4a84      	ldr	r2, [pc, #528]	; (8005d80 <UART_SetConfig+0x5c4>)
 8005b70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	2200      	movs	r2, #0
 8005b78:	603b      	str	r3, [r7, #0]
 8005b7a:	607a      	str	r2, [r7, #4]
 8005b7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b80:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b84:	f7fa fb3a 	bl	80001fc <__aeabi_uldivmod>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	4610      	mov	r0, r2
 8005b8e:	4619      	mov	r1, r3
 8005b90:	f04f 0200 	mov.w	r2, #0
 8005b94:	f04f 0300 	mov.w	r3, #0
 8005b98:	020b      	lsls	r3, r1, #8
 8005b9a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005b9e:	0202      	lsls	r2, r0, #8
 8005ba0:	6979      	ldr	r1, [r7, #20]
 8005ba2:	6849      	ldr	r1, [r1, #4]
 8005ba4:	0849      	lsrs	r1, r1, #1
 8005ba6:	2000      	movs	r0, #0
 8005ba8:	460c      	mov	r4, r1
 8005baa:	4605      	mov	r5, r0
 8005bac:	eb12 0804 	adds.w	r8, r2, r4
 8005bb0:	eb43 0905 	adc.w	r9, r3, r5
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	469a      	mov	sl, r3
 8005bbc:	4693      	mov	fp, r2
 8005bbe:	4652      	mov	r2, sl
 8005bc0:	465b      	mov	r3, fp
 8005bc2:	4640      	mov	r0, r8
 8005bc4:	4649      	mov	r1, r9
 8005bc6:	f7fa fb19 	bl	80001fc <__aeabi_uldivmod>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	460b      	mov	r3, r1
 8005bce:	4613      	mov	r3, r2
 8005bd0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005bd2:	6a3b      	ldr	r3, [r7, #32]
 8005bd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bd8:	d308      	bcc.n	8005bec <UART_SetConfig+0x430>
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005be0:	d204      	bcs.n	8005bec <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	6a3a      	ldr	r2, [r7, #32]
 8005be8:	60da      	str	r2, [r3, #12]
 8005bea:	e0ce      	b.n	8005d8a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005bf2:	e0ca      	b.n	8005d8a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	69db      	ldr	r3, [r3, #28]
 8005bf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bfc:	d166      	bne.n	8005ccc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005bfe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c02:	2b08      	cmp	r3, #8
 8005c04:	d827      	bhi.n	8005c56 <UART_SetConfig+0x49a>
 8005c06:	a201      	add	r2, pc, #4	; (adr r2, 8005c0c <UART_SetConfig+0x450>)
 8005c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c0c:	08005c31 	.word	0x08005c31
 8005c10:	08005c39 	.word	0x08005c39
 8005c14:	08005c41 	.word	0x08005c41
 8005c18:	08005c57 	.word	0x08005c57
 8005c1c:	08005c47 	.word	0x08005c47
 8005c20:	08005c57 	.word	0x08005c57
 8005c24:	08005c57 	.word	0x08005c57
 8005c28:	08005c57 	.word	0x08005c57
 8005c2c:	08005c4f 	.word	0x08005c4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c30:	f7fe febc 	bl	80049ac <HAL_RCC_GetPCLK1Freq>
 8005c34:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c36:	e014      	b.n	8005c62 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c38:	f7fe fece 	bl	80049d8 <HAL_RCC_GetPCLK2Freq>
 8005c3c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c3e:	e010      	b.n	8005c62 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c40:	4b4e      	ldr	r3, [pc, #312]	; (8005d7c <UART_SetConfig+0x5c0>)
 8005c42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c44:	e00d      	b.n	8005c62 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c46:	f7fe fe19 	bl	800487c <HAL_RCC_GetSysClockFreq>
 8005c4a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c4c:	e009      	b.n	8005c62 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c54:	e005      	b.n	8005c62 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005c56:	2300      	movs	r3, #0
 8005c58:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005c60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 8090 	beq.w	8005d8a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6e:	4a44      	ldr	r2, [pc, #272]	; (8005d80 <UART_SetConfig+0x5c4>)
 8005c70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c74:	461a      	mov	r2, r3
 8005c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c78:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c7c:	005a      	lsls	r2, r3, #1
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	085b      	lsrs	r3, r3, #1
 8005c84:	441a      	add	r2, r3
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c8e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c90:	6a3b      	ldr	r3, [r7, #32]
 8005c92:	2b0f      	cmp	r3, #15
 8005c94:	d916      	bls.n	8005cc4 <UART_SetConfig+0x508>
 8005c96:	6a3b      	ldr	r3, [r7, #32]
 8005c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c9c:	d212      	bcs.n	8005cc4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c9e:	6a3b      	ldr	r3, [r7, #32]
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	f023 030f 	bic.w	r3, r3, #15
 8005ca6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ca8:	6a3b      	ldr	r3, [r7, #32]
 8005caa:	085b      	lsrs	r3, r3, #1
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	f003 0307 	and.w	r3, r3, #7
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	8bfb      	ldrh	r3, [r7, #30]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	8bfa      	ldrh	r2, [r7, #30]
 8005cc0:	60da      	str	r2, [r3, #12]
 8005cc2:	e062      	b.n	8005d8a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005cca:	e05e      	b.n	8005d8a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ccc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005cd0:	2b08      	cmp	r3, #8
 8005cd2:	d828      	bhi.n	8005d26 <UART_SetConfig+0x56a>
 8005cd4:	a201      	add	r2, pc, #4	; (adr r2, 8005cdc <UART_SetConfig+0x520>)
 8005cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cda:	bf00      	nop
 8005cdc:	08005d01 	.word	0x08005d01
 8005ce0:	08005d09 	.word	0x08005d09
 8005ce4:	08005d11 	.word	0x08005d11
 8005ce8:	08005d27 	.word	0x08005d27
 8005cec:	08005d17 	.word	0x08005d17
 8005cf0:	08005d27 	.word	0x08005d27
 8005cf4:	08005d27 	.word	0x08005d27
 8005cf8:	08005d27 	.word	0x08005d27
 8005cfc:	08005d1f 	.word	0x08005d1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d00:	f7fe fe54 	bl	80049ac <HAL_RCC_GetPCLK1Freq>
 8005d04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d06:	e014      	b.n	8005d32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d08:	f7fe fe66 	bl	80049d8 <HAL_RCC_GetPCLK2Freq>
 8005d0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d0e:	e010      	b.n	8005d32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d10:	4b1a      	ldr	r3, [pc, #104]	; (8005d7c <UART_SetConfig+0x5c0>)
 8005d12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d14:	e00d      	b.n	8005d32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d16:	f7fe fdb1 	bl	800487c <HAL_RCC_GetSysClockFreq>
 8005d1a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d1c:	e009      	b.n	8005d32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d24:	e005      	b.n	8005d32 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005d26:	2300      	movs	r3, #0
 8005d28:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005d30:	bf00      	nop
    }

    if (pclk != 0U)
 8005d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d028      	beq.n	8005d8a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3c:	4a10      	ldr	r2, [pc, #64]	; (8005d80 <UART_SetConfig+0x5c4>)
 8005d3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d42:	461a      	mov	r2, r3
 8005d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d46:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	085b      	lsrs	r3, r3, #1
 8005d50:	441a      	add	r2, r3
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d5a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d5c:	6a3b      	ldr	r3, [r7, #32]
 8005d5e:	2b0f      	cmp	r3, #15
 8005d60:	d910      	bls.n	8005d84 <UART_SetConfig+0x5c8>
 8005d62:	6a3b      	ldr	r3, [r7, #32]
 8005d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d68:	d20c      	bcs.n	8005d84 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d6a:	6a3b      	ldr	r3, [r7, #32]
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	60da      	str	r2, [r3, #12]
 8005d74:	e009      	b.n	8005d8a <UART_SetConfig+0x5ce>
 8005d76:	bf00      	nop
 8005d78:	40008000 	.word	0x40008000
 8005d7c:	00f42400 	.word	0x00f42400
 8005d80:	080064a4 	.word	0x080064a4
      }
      else
      {
        ret = HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	2200      	movs	r2, #0
 8005da4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005da6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3730      	adds	r7, #48	; 0x30
 8005dae:	46bd      	mov	sp, r7
 8005db0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005db4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc0:	f003 0308 	and.w	r3, r3, #8
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00a      	beq.n	8005dde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00a      	beq.n	8005e00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e04:	f003 0302 	and.w	r3, r3, #2
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00a      	beq.n	8005e22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	430a      	orrs	r2, r1
 8005e20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e26:	f003 0304 	and.w	r3, r3, #4
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00a      	beq.n	8005e44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	430a      	orrs	r2, r1
 8005e42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e48:	f003 0310 	and.w	r3, r3, #16
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00a      	beq.n	8005e66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	430a      	orrs	r2, r1
 8005e64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6a:	f003 0320 	and.w	r3, r3, #32
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00a      	beq.n	8005e88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	430a      	orrs	r2, r1
 8005e86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d01a      	beq.n	8005eca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eb2:	d10a      	bne.n	8005eca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00a      	beq.n	8005eec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	605a      	str	r2, [r3, #4]
  }
}
 8005eec:	bf00      	nop
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b098      	sub	sp, #96	; 0x60
 8005efc:	af02      	add	r7, sp, #8
 8005efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f08:	f7fb fd96 	bl	8001a38 <HAL_GetTick>
 8005f0c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0308 	and.w	r3, r3, #8
 8005f18:	2b08      	cmp	r3, #8
 8005f1a:	d12f      	bne.n	8005f7c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f20:	9300      	str	r3, [sp, #0]
 8005f22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f24:	2200      	movs	r2, #0
 8005f26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f88e 	bl	800604c <UART_WaitOnFlagUntilTimeout>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d022      	beq.n	8005f7c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3e:	e853 3f00 	ldrex	r3, [r3]
 8005f42:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f4a:	653b      	str	r3, [r7, #80]	; 0x50
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	461a      	mov	r2, r3
 8005f52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f54:	647b      	str	r3, [r7, #68]	; 0x44
 8005f56:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f5c:	e841 2300 	strex	r3, r2, [r1]
 8005f60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d1e6      	bne.n	8005f36 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2220      	movs	r2, #32
 8005f6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e063      	b.n	8006044 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0304 	and.w	r3, r3, #4
 8005f86:	2b04      	cmp	r3, #4
 8005f88:	d149      	bne.n	800601e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f8a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f8e:	9300      	str	r3, [sp, #0]
 8005f90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f92:	2200      	movs	r2, #0
 8005f94:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 f857 	bl	800604c <UART_WaitOnFlagUntilTimeout>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d03c      	beq.n	800601e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fac:	e853 3f00 	ldrex	r3, [r3]
 8005fb0:	623b      	str	r3, [r7, #32]
   return(result);
 8005fb2:	6a3b      	ldr	r3, [r7, #32]
 8005fb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fc2:	633b      	str	r3, [r7, #48]	; 0x30
 8005fc4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fca:	e841 2300 	strex	r3, r2, [r1]
 8005fce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1e6      	bne.n	8005fa4 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	3308      	adds	r3, #8
 8005fdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	e853 3f00 	ldrex	r3, [r3]
 8005fe4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f023 0301 	bic.w	r3, r3, #1
 8005fec:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	3308      	adds	r3, #8
 8005ff4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ff6:	61fa      	str	r2, [r7, #28]
 8005ff8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffa:	69b9      	ldr	r1, [r7, #24]
 8005ffc:	69fa      	ldr	r2, [r7, #28]
 8005ffe:	e841 2300 	strex	r3, r2, [r1]
 8006002:	617b      	str	r3, [r7, #20]
   return(result);
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1e5      	bne.n	8005fd6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2220      	movs	r2, #32
 800600e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e012      	b.n	8006044 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2220      	movs	r2, #32
 8006022:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2220      	movs	r2, #32
 800602a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3758      	adds	r7, #88	; 0x58
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	603b      	str	r3, [r7, #0]
 8006058:	4613      	mov	r3, r2
 800605a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800605c:	e049      	b.n	80060f2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006064:	d045      	beq.n	80060f2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006066:	f7fb fce7 	bl	8001a38 <HAL_GetTick>
 800606a:	4602      	mov	r2, r0
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	69ba      	ldr	r2, [r7, #24]
 8006072:	429a      	cmp	r2, r3
 8006074:	d302      	bcc.n	800607c <UART_WaitOnFlagUntilTimeout+0x30>
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d101      	bne.n	8006080 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e048      	b.n	8006112 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0304 	and.w	r3, r3, #4
 800608a:	2b00      	cmp	r3, #0
 800608c:	d031      	beq.n	80060f2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	69db      	ldr	r3, [r3, #28]
 8006094:	f003 0308 	and.w	r3, r3, #8
 8006098:	2b08      	cmp	r3, #8
 800609a:	d110      	bne.n	80060be <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2208      	movs	r2, #8
 80060a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f000 f838 	bl	800611a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2208      	movs	r2, #8
 80060ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e029      	b.n	8006112 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	69db      	ldr	r3, [r3, #28]
 80060c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060cc:	d111      	bne.n	80060f2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060d8:	68f8      	ldr	r0, [r7, #12]
 80060da:	f000 f81e 	bl	800611a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2220      	movs	r2, #32
 80060e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e00f      	b.n	8006112 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	69da      	ldr	r2, [r3, #28]
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	4013      	ands	r3, r2
 80060fc:	68ba      	ldr	r2, [r7, #8]
 80060fe:	429a      	cmp	r2, r3
 8006100:	bf0c      	ite	eq
 8006102:	2301      	moveq	r3, #1
 8006104:	2300      	movne	r3, #0
 8006106:	b2db      	uxtb	r3, r3
 8006108:	461a      	mov	r2, r3
 800610a:	79fb      	ldrb	r3, [r7, #7]
 800610c:	429a      	cmp	r2, r3
 800610e:	d0a6      	beq.n	800605e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800611a:	b480      	push	{r7}
 800611c:	b095      	sub	sp, #84	; 0x54
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800612a:	e853 3f00 	ldrex	r3, [r3]
 800612e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006132:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006136:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	461a      	mov	r2, r3
 800613e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006140:	643b      	str	r3, [r7, #64]	; 0x40
 8006142:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006144:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006146:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006148:	e841 2300 	strex	r3, r2, [r1]
 800614c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800614e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006150:	2b00      	cmp	r3, #0
 8006152:	d1e6      	bne.n	8006122 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	3308      	adds	r3, #8
 800615a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615c:	6a3b      	ldr	r3, [r7, #32]
 800615e:	e853 3f00 	ldrex	r3, [r3]
 8006162:	61fb      	str	r3, [r7, #28]
   return(result);
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800616a:	f023 0301 	bic.w	r3, r3, #1
 800616e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	3308      	adds	r3, #8
 8006176:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006178:	62fa      	str	r2, [r7, #44]	; 0x2c
 800617a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800617e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006180:	e841 2300 	strex	r3, r2, [r1]
 8006184:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1e3      	bne.n	8006154 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006190:	2b01      	cmp	r3, #1
 8006192:	d118      	bne.n	80061c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	e853 3f00 	ldrex	r3, [r3]
 80061a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	f023 0310 	bic.w	r3, r3, #16
 80061a8:	647b      	str	r3, [r7, #68]	; 0x44
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	461a      	mov	r2, r3
 80061b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061b2:	61bb      	str	r3, [r7, #24]
 80061b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b6:	6979      	ldr	r1, [r7, #20]
 80061b8:	69ba      	ldr	r2, [r7, #24]
 80061ba:	e841 2300 	strex	r3, r2, [r1]
 80061be:	613b      	str	r3, [r7, #16]
   return(result);
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1e6      	bne.n	8006194 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2220      	movs	r2, #32
 80061ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80061da:	bf00      	nop
 80061dc:	3754      	adds	r7, #84	; 0x54
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b085      	sub	sp, #20
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d101      	bne.n	80061fc <HAL_UARTEx_DisableFifoMode+0x16>
 80061f8:	2302      	movs	r3, #2
 80061fa:	e027      	b.n	800624c <HAL_UARTEx_DisableFifoMode+0x66>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2224      	movs	r2, #36	; 0x24
 8006208:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f022 0201 	bic.w	r2, r2, #1
 8006222:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800622a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2220      	movs	r2, #32
 800623e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3714      	adds	r7, #20
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006268:	2b01      	cmp	r3, #1
 800626a:	d101      	bne.n	8006270 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800626c:	2302      	movs	r3, #2
 800626e:	e02d      	b.n	80062cc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2224      	movs	r2, #36	; 0x24
 800627c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f022 0201 	bic.w	r2, r2, #1
 8006296:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	430a      	orrs	r2, r1
 80062aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 f84f 	bl	8006350 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2220      	movs	r2, #32
 80062be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d101      	bne.n	80062ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80062e8:	2302      	movs	r3, #2
 80062ea:	e02d      	b.n	8006348 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2224      	movs	r2, #36	; 0x24
 80062f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f022 0201 	bic.w	r2, r2, #1
 8006312:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	683a      	ldr	r2, [r7, #0]
 8006324:	430a      	orrs	r2, r1
 8006326:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 f811 	bl	8006350 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2220      	movs	r2, #32
 800633a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3710      	adds	r7, #16
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800635c:	2b00      	cmp	r3, #0
 800635e:	d108      	bne.n	8006372 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006370:	e031      	b.n	80063d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006372:	2308      	movs	r3, #8
 8006374:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006376:	2308      	movs	r3, #8
 8006378:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	0e5b      	lsrs	r3, r3, #25
 8006382:	b2db      	uxtb	r3, r3
 8006384:	f003 0307 	and.w	r3, r3, #7
 8006388:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	0f5b      	lsrs	r3, r3, #29
 8006392:	b2db      	uxtb	r3, r3
 8006394:	f003 0307 	and.w	r3, r3, #7
 8006398:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800639a:	7bbb      	ldrb	r3, [r7, #14]
 800639c:	7b3a      	ldrb	r2, [r7, #12]
 800639e:	4911      	ldr	r1, [pc, #68]	; (80063e4 <UARTEx_SetNbDataToProcess+0x94>)
 80063a0:	5c8a      	ldrb	r2, [r1, r2]
 80063a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80063a6:	7b3a      	ldrb	r2, [r7, #12]
 80063a8:	490f      	ldr	r1, [pc, #60]	; (80063e8 <UARTEx_SetNbDataToProcess+0x98>)
 80063aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063b8:	7bfb      	ldrb	r3, [r7, #15]
 80063ba:	7b7a      	ldrb	r2, [r7, #13]
 80063bc:	4909      	ldr	r1, [pc, #36]	; (80063e4 <UARTEx_SetNbDataToProcess+0x94>)
 80063be:	5c8a      	ldrb	r2, [r1, r2]
 80063c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80063c4:	7b7a      	ldrb	r2, [r7, #13]
 80063c6:	4908      	ldr	r1, [pc, #32]	; (80063e8 <UARTEx_SetNbDataToProcess+0x98>)
 80063c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80063d6:	bf00      	nop
 80063d8:	3714      	adds	r7, #20
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	080064bc 	.word	0x080064bc
 80063e8:	080064c4 	.word	0x080064c4

080063ec <memset>:
 80063ec:	4402      	add	r2, r0
 80063ee:	4603      	mov	r3, r0
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d100      	bne.n	80063f6 <memset+0xa>
 80063f4:	4770      	bx	lr
 80063f6:	f803 1b01 	strb.w	r1, [r3], #1
 80063fa:	e7f9      	b.n	80063f0 <memset+0x4>

080063fc <__libc_init_array>:
 80063fc:	b570      	push	{r4, r5, r6, lr}
 80063fe:	4d0d      	ldr	r5, [pc, #52]	; (8006434 <__libc_init_array+0x38>)
 8006400:	4c0d      	ldr	r4, [pc, #52]	; (8006438 <__libc_init_array+0x3c>)
 8006402:	1b64      	subs	r4, r4, r5
 8006404:	10a4      	asrs	r4, r4, #2
 8006406:	2600      	movs	r6, #0
 8006408:	42a6      	cmp	r6, r4
 800640a:	d109      	bne.n	8006420 <__libc_init_array+0x24>
 800640c:	4d0b      	ldr	r5, [pc, #44]	; (800643c <__libc_init_array+0x40>)
 800640e:	4c0c      	ldr	r4, [pc, #48]	; (8006440 <__libc_init_array+0x44>)
 8006410:	f000 f818 	bl	8006444 <_init>
 8006414:	1b64      	subs	r4, r4, r5
 8006416:	10a4      	asrs	r4, r4, #2
 8006418:	2600      	movs	r6, #0
 800641a:	42a6      	cmp	r6, r4
 800641c:	d105      	bne.n	800642a <__libc_init_array+0x2e>
 800641e:	bd70      	pop	{r4, r5, r6, pc}
 8006420:	f855 3b04 	ldr.w	r3, [r5], #4
 8006424:	4798      	blx	r3
 8006426:	3601      	adds	r6, #1
 8006428:	e7ee      	b.n	8006408 <__libc_init_array+0xc>
 800642a:	f855 3b04 	ldr.w	r3, [r5], #4
 800642e:	4798      	blx	r3
 8006430:	3601      	adds	r6, #1
 8006432:	e7f2      	b.n	800641a <__libc_init_array+0x1e>
 8006434:	080064d4 	.word	0x080064d4
 8006438:	080064d4 	.word	0x080064d4
 800643c:	080064d4 	.word	0x080064d4
 8006440:	080064d8 	.word	0x080064d8

08006444 <_init>:
 8006444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006446:	bf00      	nop
 8006448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800644a:	bc08      	pop	{r3}
 800644c:	469e      	mov	lr, r3
 800644e:	4770      	bx	lr

08006450 <_fini>:
 8006450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006452:	bf00      	nop
 8006454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006456:	bc08      	pop	{r3}
 8006458:	469e      	mov	lr, r3
 800645a:	4770      	bx	lr

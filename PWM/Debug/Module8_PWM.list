
Module8_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000954c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800970c  0800970c  0001970c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097f4  080097f4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080097f4  080097f4  000197f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097fc  080097fc  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097fc  080097fc  000197fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009800  08009800  00019800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08009804  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006f8  2000005c  08009860  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000754  08009860  00020754  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001efa8  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003509  00000000  00000000  0003f077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bf8  00000000  00000000  00042580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015fc  00000000  00000000  00044178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ef24  00000000  00000000  00045774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002140f  00000000  00000000  00074698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012805c  00000000  00000000  00095aa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008050  00000000  00000000  001bdb04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  001c5b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000005c 	.word	0x2000005c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080096f4 	.word	0x080096f4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000060 	.word	0x20000060
 80001fc:	080096f4 	.word	0x080096f4

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_uldivmod>:
 8000b3c:	b953      	cbnz	r3, 8000b54 <__aeabi_uldivmod+0x18>
 8000b3e:	b94a      	cbnz	r2, 8000b54 <__aeabi_uldivmod+0x18>
 8000b40:	2900      	cmp	r1, #0
 8000b42:	bf08      	it	eq
 8000b44:	2800      	cmpeq	r0, #0
 8000b46:	bf1c      	itt	ne
 8000b48:	f04f 31ff 	movne.w	r1, #4294967295
 8000b4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b50:	f000 b970 	b.w	8000e34 <__aeabi_idiv0>
 8000b54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b5c:	f000 f806 	bl	8000b6c <__udivmoddi4>
 8000b60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b68:	b004      	add	sp, #16
 8000b6a:	4770      	bx	lr

08000b6c <__udivmoddi4>:
 8000b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b70:	9e08      	ldr	r6, [sp, #32]
 8000b72:	460d      	mov	r5, r1
 8000b74:	4604      	mov	r4, r0
 8000b76:	460f      	mov	r7, r1
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d14a      	bne.n	8000c12 <__udivmoddi4+0xa6>
 8000b7c:	428a      	cmp	r2, r1
 8000b7e:	4694      	mov	ip, r2
 8000b80:	d965      	bls.n	8000c4e <__udivmoddi4+0xe2>
 8000b82:	fab2 f382 	clz	r3, r2
 8000b86:	b143      	cbz	r3, 8000b9a <__udivmoddi4+0x2e>
 8000b88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b8c:	f1c3 0220 	rsb	r2, r3, #32
 8000b90:	409f      	lsls	r7, r3
 8000b92:	fa20 f202 	lsr.w	r2, r0, r2
 8000b96:	4317      	orrs	r7, r2
 8000b98:	409c      	lsls	r4, r3
 8000b9a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b9e:	fa1f f58c 	uxth.w	r5, ip
 8000ba2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ba6:	0c22      	lsrs	r2, r4, #16
 8000ba8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bac:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bb0:	fb01 f005 	mul.w	r0, r1, r5
 8000bb4:	4290      	cmp	r0, r2
 8000bb6:	d90a      	bls.n	8000bce <__udivmoddi4+0x62>
 8000bb8:	eb1c 0202 	adds.w	r2, ip, r2
 8000bbc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bc0:	f080 811c 	bcs.w	8000dfc <__udivmoddi4+0x290>
 8000bc4:	4290      	cmp	r0, r2
 8000bc6:	f240 8119 	bls.w	8000dfc <__udivmoddi4+0x290>
 8000bca:	3902      	subs	r1, #2
 8000bcc:	4462      	add	r2, ip
 8000bce:	1a12      	subs	r2, r2, r0
 8000bd0:	b2a4      	uxth	r4, r4
 8000bd2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bd6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bda:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bde:	fb00 f505 	mul.w	r5, r0, r5
 8000be2:	42a5      	cmp	r5, r4
 8000be4:	d90a      	bls.n	8000bfc <__udivmoddi4+0x90>
 8000be6:	eb1c 0404 	adds.w	r4, ip, r4
 8000bea:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bee:	f080 8107 	bcs.w	8000e00 <__udivmoddi4+0x294>
 8000bf2:	42a5      	cmp	r5, r4
 8000bf4:	f240 8104 	bls.w	8000e00 <__udivmoddi4+0x294>
 8000bf8:	4464      	add	r4, ip
 8000bfa:	3802      	subs	r0, #2
 8000bfc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c00:	1b64      	subs	r4, r4, r5
 8000c02:	2100      	movs	r1, #0
 8000c04:	b11e      	cbz	r6, 8000c0e <__udivmoddi4+0xa2>
 8000c06:	40dc      	lsrs	r4, r3
 8000c08:	2300      	movs	r3, #0
 8000c0a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d908      	bls.n	8000c28 <__udivmoddi4+0xbc>
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	f000 80ed 	beq.w	8000df6 <__udivmoddi4+0x28a>
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c22:	4608      	mov	r0, r1
 8000c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c28:	fab3 f183 	clz	r1, r3
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	d149      	bne.n	8000cc4 <__udivmoddi4+0x158>
 8000c30:	42ab      	cmp	r3, r5
 8000c32:	d302      	bcc.n	8000c3a <__udivmoddi4+0xce>
 8000c34:	4282      	cmp	r2, r0
 8000c36:	f200 80f8 	bhi.w	8000e2a <__udivmoddi4+0x2be>
 8000c3a:	1a84      	subs	r4, r0, r2
 8000c3c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c40:	2001      	movs	r0, #1
 8000c42:	4617      	mov	r7, r2
 8000c44:	2e00      	cmp	r6, #0
 8000c46:	d0e2      	beq.n	8000c0e <__udivmoddi4+0xa2>
 8000c48:	e9c6 4700 	strd	r4, r7, [r6]
 8000c4c:	e7df      	b.n	8000c0e <__udivmoddi4+0xa2>
 8000c4e:	b902      	cbnz	r2, 8000c52 <__udivmoddi4+0xe6>
 8000c50:	deff      	udf	#255	; 0xff
 8000c52:	fab2 f382 	clz	r3, r2
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f040 8090 	bne.w	8000d7c <__udivmoddi4+0x210>
 8000c5c:	1a8a      	subs	r2, r1, r2
 8000c5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c62:	fa1f fe8c 	uxth.w	lr, ip
 8000c66:	2101      	movs	r1, #1
 8000c68:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c6c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c70:	0c22      	lsrs	r2, r4, #16
 8000c72:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c76:	fb0e f005 	mul.w	r0, lr, r5
 8000c7a:	4290      	cmp	r0, r2
 8000c7c:	d908      	bls.n	8000c90 <__udivmoddi4+0x124>
 8000c7e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c82:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c86:	d202      	bcs.n	8000c8e <__udivmoddi4+0x122>
 8000c88:	4290      	cmp	r0, r2
 8000c8a:	f200 80cb 	bhi.w	8000e24 <__udivmoddi4+0x2b8>
 8000c8e:	4645      	mov	r5, r8
 8000c90:	1a12      	subs	r2, r2, r0
 8000c92:	b2a4      	uxth	r4, r4
 8000c94:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c98:	fb07 2210 	mls	r2, r7, r0, r2
 8000c9c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ca0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ca4:	45a6      	cmp	lr, r4
 8000ca6:	d908      	bls.n	8000cba <__udivmoddi4+0x14e>
 8000ca8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cac:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cb0:	d202      	bcs.n	8000cb8 <__udivmoddi4+0x14c>
 8000cb2:	45a6      	cmp	lr, r4
 8000cb4:	f200 80bb 	bhi.w	8000e2e <__udivmoddi4+0x2c2>
 8000cb8:	4610      	mov	r0, r2
 8000cba:	eba4 040e 	sub.w	r4, r4, lr
 8000cbe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cc2:	e79f      	b.n	8000c04 <__udivmoddi4+0x98>
 8000cc4:	f1c1 0720 	rsb	r7, r1, #32
 8000cc8:	408b      	lsls	r3, r1
 8000cca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cce:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cd2:	fa05 f401 	lsl.w	r4, r5, r1
 8000cd6:	fa20 f307 	lsr.w	r3, r0, r7
 8000cda:	40fd      	lsrs	r5, r7
 8000cdc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ce0:	4323      	orrs	r3, r4
 8000ce2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	fb09 5518 	mls	r5, r9, r8, r5
 8000cee:	0c1c      	lsrs	r4, r3, #16
 8000cf0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cf4:	fb08 f50e 	mul.w	r5, r8, lr
 8000cf8:	42a5      	cmp	r5, r4
 8000cfa:	fa02 f201 	lsl.w	r2, r2, r1
 8000cfe:	fa00 f001 	lsl.w	r0, r0, r1
 8000d02:	d90b      	bls.n	8000d1c <__udivmoddi4+0x1b0>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d0c:	f080 8088 	bcs.w	8000e20 <__udivmoddi4+0x2b4>
 8000d10:	42a5      	cmp	r5, r4
 8000d12:	f240 8085 	bls.w	8000e20 <__udivmoddi4+0x2b4>
 8000d16:	f1a8 0802 	sub.w	r8, r8, #2
 8000d1a:	4464      	add	r4, ip
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	b29d      	uxth	r5, r3
 8000d20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d24:	fb09 4413 	mls	r4, r9, r3, r4
 8000d28:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d2c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d30:	45a6      	cmp	lr, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x1da>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d3c:	d26c      	bcs.n	8000e18 <__udivmoddi4+0x2ac>
 8000d3e:	45a6      	cmp	lr, r4
 8000d40:	d96a      	bls.n	8000e18 <__udivmoddi4+0x2ac>
 8000d42:	3b02      	subs	r3, #2
 8000d44:	4464      	add	r4, ip
 8000d46:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d4a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	42ac      	cmp	r4, r5
 8000d54:	46c8      	mov	r8, r9
 8000d56:	46ae      	mov	lr, r5
 8000d58:	d356      	bcc.n	8000e08 <__udivmoddi4+0x29c>
 8000d5a:	d053      	beq.n	8000e04 <__udivmoddi4+0x298>
 8000d5c:	b156      	cbz	r6, 8000d74 <__udivmoddi4+0x208>
 8000d5e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d62:	eb64 040e 	sbc.w	r4, r4, lr
 8000d66:	fa04 f707 	lsl.w	r7, r4, r7
 8000d6a:	40ca      	lsrs	r2, r1
 8000d6c:	40cc      	lsrs	r4, r1
 8000d6e:	4317      	orrs	r7, r2
 8000d70:	e9c6 7400 	strd	r7, r4, [r6]
 8000d74:	4618      	mov	r0, r3
 8000d76:	2100      	movs	r1, #0
 8000d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7c:	f1c3 0120 	rsb	r1, r3, #32
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	fa20 f201 	lsr.w	r2, r0, r1
 8000d88:	fa25 f101 	lsr.w	r1, r5, r1
 8000d8c:	409d      	lsls	r5, r3
 8000d8e:	432a      	orrs	r2, r5
 8000d90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d94:	fa1f fe8c 	uxth.w	lr, ip
 8000d98:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d9c:	fb07 1510 	mls	r5, r7, r0, r1
 8000da0:	0c11      	lsrs	r1, r2, #16
 8000da2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000da6:	fb00 f50e 	mul.w	r5, r0, lr
 8000daa:	428d      	cmp	r5, r1
 8000dac:	fa04 f403 	lsl.w	r4, r4, r3
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x258>
 8000db2:	eb1c 0101 	adds.w	r1, ip, r1
 8000db6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dba:	d22f      	bcs.n	8000e1c <__udivmoddi4+0x2b0>
 8000dbc:	428d      	cmp	r5, r1
 8000dbe:	d92d      	bls.n	8000e1c <__udivmoddi4+0x2b0>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	4461      	add	r1, ip
 8000dc4:	1b49      	subs	r1, r1, r5
 8000dc6:	b292      	uxth	r2, r2
 8000dc8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dcc:	fb07 1115 	mls	r1, r7, r5, r1
 8000dd0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dd4:	fb05 f10e 	mul.w	r1, r5, lr
 8000dd8:	4291      	cmp	r1, r2
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x282>
 8000ddc:	eb1c 0202 	adds.w	r2, ip, r2
 8000de0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000de4:	d216      	bcs.n	8000e14 <__udivmoddi4+0x2a8>
 8000de6:	4291      	cmp	r1, r2
 8000de8:	d914      	bls.n	8000e14 <__udivmoddi4+0x2a8>
 8000dea:	3d02      	subs	r5, #2
 8000dec:	4462      	add	r2, ip
 8000dee:	1a52      	subs	r2, r2, r1
 8000df0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000df4:	e738      	b.n	8000c68 <__udivmoddi4+0xfc>
 8000df6:	4631      	mov	r1, r6
 8000df8:	4630      	mov	r0, r6
 8000dfa:	e708      	b.n	8000c0e <__udivmoddi4+0xa2>
 8000dfc:	4639      	mov	r1, r7
 8000dfe:	e6e6      	b.n	8000bce <__udivmoddi4+0x62>
 8000e00:	4610      	mov	r0, r2
 8000e02:	e6fb      	b.n	8000bfc <__udivmoddi4+0x90>
 8000e04:	4548      	cmp	r0, r9
 8000e06:	d2a9      	bcs.n	8000d5c <__udivmoddi4+0x1f0>
 8000e08:	ebb9 0802 	subs.w	r8, r9, r2
 8000e0c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e10:	3b01      	subs	r3, #1
 8000e12:	e7a3      	b.n	8000d5c <__udivmoddi4+0x1f0>
 8000e14:	4645      	mov	r5, r8
 8000e16:	e7ea      	b.n	8000dee <__udivmoddi4+0x282>
 8000e18:	462b      	mov	r3, r5
 8000e1a:	e794      	b.n	8000d46 <__udivmoddi4+0x1da>
 8000e1c:	4640      	mov	r0, r8
 8000e1e:	e7d1      	b.n	8000dc4 <__udivmoddi4+0x258>
 8000e20:	46d0      	mov	r8, sl
 8000e22:	e77b      	b.n	8000d1c <__udivmoddi4+0x1b0>
 8000e24:	3d02      	subs	r5, #2
 8000e26:	4462      	add	r2, ip
 8000e28:	e732      	b.n	8000c90 <__udivmoddi4+0x124>
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e70a      	b.n	8000c44 <__udivmoddi4+0xd8>
 8000e2e:	4464      	add	r4, ip
 8000e30:	3802      	subs	r0, #2
 8000e32:	e742      	b.n	8000cba <__udivmoddi4+0x14e>

08000e34 <__aeabi_idiv0>:
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop

08000e38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e38:	b5b0      	push	{r4, r5, r7, lr}
 8000e3a:	b0a0      	sub	sp, #128	; 0x80
 8000e3c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e3e:	f001 fb7a 	bl	8002536 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e42:	f000 f8c1 	bl	8000fc8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000e46:	f000 f921 	bl	800108c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e4a:	f000 fd4d 	bl	80018e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e4e:	f000 fd21 	bl	8001894 <MX_DMA_Init>
  MX_ADC1_Init();
 8000e52:	f000 f94b 	bl	80010ec <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8000e56:	f000 f9ad 	bl	80011b4 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 8000e5a:	f000 f9e3 	bl	8001224 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000e5e:	f000 fa21 	bl	80012a4 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 8000e62:	f000 fa5f 	bl	8001324 <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 8000e66:	f000 fab3 	bl	80013d0 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000e6a:	f000 faef 	bl	800144c <MX_SPI3_Init>
  MX_UART4_Init();
 8000e6e:	f000 fbd7 	bl	8001620 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000e72:	f000 fc21 	bl	80016b8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000e76:	f000 fc6b 	bl	8001750 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000e7a:	f000 fcb7 	bl	80017ec <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8000e7e:	f000 fd01 	bl	8001884 <MX_USB_OTG_FS_USB_Init>
  MX_TIM1_Init();
 8000e82:	f000 fb21 	bl	80014c8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
//HAL_TIM_Base_Start_IT(&htim7);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000e86:	2104      	movs	r1, #4
 8000e88:	4844      	ldr	r0, [pc, #272]	; (8000f9c <main+0x164>)
 8000e8a:	f005 ff51 	bl	8006d30 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000e8e:	2104      	movs	r1, #4
 8000e90:	4842      	ldr	r0, [pc, #264]	; (8000f9c <main+0x164>)
 8000e92:	f006 fe61 	bl	8007b58 <HAL_TIMEx_PWMN_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&ADCBuf, 1);
 8000e96:	2201      	movs	r2, #1
 8000e98:	4941      	ldr	r1, [pc, #260]	; (8000fa0 <main+0x168>)
 8000e9a:	4842      	ldr	r0, [pc, #264]	; (8000fa4 <main+0x16c>)
 8000e9c:	f001 ff04 	bl	8002ca8 <HAL_ADC_Start_DMA>
	  while(ADCComplete == 0);
 8000ea0:	bf00      	nop
 8000ea2:	4b41      	ldr	r3, [pc, #260]	; (8000fa8 <main+0x170>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d0fb      	beq.n	8000ea2 <main+0x6a>
	  ADCComplete = 0;
 8000eaa:	4b3f      	ldr	r3, [pc, #252]	; (8000fa8 <main+0x170>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]

	  //Process internal temperature sensor data
     /* k = (*TS_CAL2 - *TS_CAL1)/(CAL2_TEMP - CAL1_TEMP);
      tempData = CAL1_TEMP + (ADCBuf - *TS_CAL1) / k;*/

	  tempData = ((uint16_t) (CAL2_TEMP - CAL1_TEMP))/(1.0 *(*TS_CAL2 - *TS_CAL1)*(ADCBuf - *TS_CAL1)) + ((uint16_t) CAL1_TEMP);
 8000eb0:	4b3e      	ldr	r3, [pc, #248]	; (8000fac <main+0x174>)
 8000eb2:	881b      	ldrh	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b3e      	ldr	r3, [pc, #248]	; (8000fb0 <main+0x178>)
 8000eb8:	881b      	ldrh	r3, [r3, #0]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fb49 	bl	8000554 <__aeabi_i2d>
 8000ec2:	4604      	mov	r4, r0
 8000ec4:	460d      	mov	r5, r1
 8000ec6:	4b36      	ldr	r3, [pc, #216]	; (8000fa0 <main+0x168>)
 8000ec8:	881b      	ldrh	r3, [r3, #0]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	4b38      	ldr	r3, [pc, #224]	; (8000fb0 <main+0x178>)
 8000ece:	881b      	ldrh	r3, [r3, #0]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fb3e 	bl	8000554 <__aeabi_i2d>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	460b      	mov	r3, r1
 8000edc:	4620      	mov	r0, r4
 8000ede:	4629      	mov	r1, r5
 8000ee0:	f7ff fba2 	bl	8000628 <__aeabi_dmul>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	f04f 0000 	mov.w	r0, #0
 8000eec:	4931      	ldr	r1, [pc, #196]	; (8000fb4 <main+0x17c>)
 8000eee:	f7ff fcc5 	bl	800087c <__aeabi_ddiv>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	4610      	mov	r0, r2
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f04f 0200 	mov.w	r2, #0
 8000efe:	4b2e      	ldr	r3, [pc, #184]	; (8000fb8 <main+0x180>)
 8000f00:	f7ff f9dc 	bl	80002bc <__adddf3>
 8000f04:	4602      	mov	r2, r0
 8000f06:	460b      	mov	r3, r1
 8000f08:	4610      	mov	r0, r2
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	f7ff fdc6 	bl	8000a9c <__aeabi_d2f>
 8000f10:	4603      	mov	r3, r0
 8000f12:	677b      	str	r3, [r7, #116]	; 0x74

      int tempDataInt = tempData;
 8000f14:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8000f18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f1c:	ee17 3a90 	vmov	r3, s15
 8000f20:	673b      	str	r3, [r7, #112]	; 0x70
      float tempDataFrac;

      tempDataFrac = tempData - tempDataInt;
 8000f22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f24:	ee07 3a90 	vmov	s15, r3
 8000f28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f2c:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8000f30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f34:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

      int tempDataFrac2Digits;

      tempDataFrac2Digits = trunc(tempDataFrac * 100);
 8000f38:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8000f3c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000fbc <main+0x184>
 8000f40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f44:	ee17 0a90 	vmov	r0, s15
 8000f48:	f7ff fb16 	bl	8000578 <__aeabi_f2d>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	460b      	mov	r3, r1
 8000f50:	ec43 2b10 	vmov	d0, r2, r3
 8000f54:	f008 fb94 	bl	8009680 <trunc>
 8000f58:	ec53 2b10 	vmov	r2, r3, d0
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	4619      	mov	r1, r3
 8000f60:	f7ff fd74 	bl	8000a4c <__aeabi_d2iz>
 8000f64:	4603      	mov	r3, r0
 8000f66:	66bb      	str	r3, [r7, #104]	; 0x68

      snprintf(tempReading, 100, "Internal temperature sensor reading from ADC: %1d.%02d degree C\r\n", tempDataInt, tempDataFrac2Digits);
 8000f68:	1d38      	adds	r0, r7, #4
 8000f6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f6c:	9300      	str	r3, [sp, #0]
 8000f6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f70:	4a13      	ldr	r2, [pc, #76]	; (8000fc0 <main+0x188>)
 8000f72:	2164      	movs	r1, #100	; 0x64
 8000f74:	f007 fecc 	bl	8008d10 <sniprintf>

      HAL_UART_Transmit(&huart1, (uint8_t *) tempReading, strlen(tempReading), 1000);
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff f940 	bl	8000200 <strlen>
 8000f80:	4603      	mov	r3, r0
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	1d39      	adds	r1, r7, #4
 8000f86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8a:	480e      	ldr	r0, [pc, #56]	; (8000fc4 <main+0x18c>)
 8000f8c:	f007 f819 	bl	8007fc2 <HAL_UART_Transmit>

      HAL_Delay(5000);
 8000f90:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f94:	f001 fb44 	bl	8002620 <HAL_Delay>
  {
 8000f98:	e77d      	b.n	8000e96 <main+0x5e>
 8000f9a:	bf00      	nop
 8000f9c:	20000338 	.word	0x20000338
 8000fa0:	200005d4 	.word	0x200005d4
 8000fa4:	20000078 	.word	0x20000078
 8000fa8:	200005d8 	.word	0x200005d8
 8000fac:	1fff75ca 	.word	0x1fff75ca
 8000fb0:	1fff75a8 	.word	0x1fff75a8
 8000fb4:	40590000 	.word	0x40590000
 8000fb8:	403e0000 	.word	0x403e0000
 8000fbc:	42c80000 	.word	0x42c80000
 8000fc0:	0800970c 	.word	0x0800970c
 8000fc4:	20000418 	.word	0x20000418

08000fc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b096      	sub	sp, #88	; 0x58
 8000fcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	2244      	movs	r2, #68	; 0x44
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f007 fece 	bl	8008d78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fdc:	463b      	mov	r3, r7
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
 8000fe8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000fea:	2000      	movs	r0, #0
 8000fec:	f004 f8a0 	bl	8005130 <HAL_PWREx_ControlVoltageScaling>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000ff6:	f000 fdc9 	bl	8001b8c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ffa:	f004 f869 	bl	80050d0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000ffe:	4b22      	ldr	r3, [pc, #136]	; (8001088 <SystemClock_Config+0xc0>)
 8001000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001004:	4a20      	ldr	r2, [pc, #128]	; (8001088 <SystemClock_Config+0xc0>)
 8001006:	f023 0318 	bic.w	r3, r3, #24
 800100a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800100e:	2314      	movs	r3, #20
 8001010:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001012:	2301      	movs	r3, #1
 8001014:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001016:	2301      	movs	r3, #1
 8001018:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800101e:	2360      	movs	r3, #96	; 0x60
 8001020:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001022:	2302      	movs	r3, #2
 8001024:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001026:	2301      	movs	r3, #1
 8001028:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800102a:	2301      	movs	r3, #1
 800102c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800102e:	233c      	movs	r3, #60	; 0x3c
 8001030:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001032:	2302      	movs	r3, #2
 8001034:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001036:	2302      	movs	r3, #2
 8001038:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800103a:	2302      	movs	r3, #2
 800103c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	4618      	mov	r0, r3
 8001044:	f004 f918 	bl	8005278 <HAL_RCC_OscConfig>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800104e:	f000 fd9d 	bl	8001b8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001052:	230f      	movs	r3, #15
 8001054:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001056:	2303      	movs	r3, #3
 8001058:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800105a:	2300      	movs	r3, #0
 800105c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001066:	463b      	mov	r3, r7
 8001068:	2105      	movs	r1, #5
 800106a:	4618      	mov	r0, r3
 800106c:	f004 fd1e 	bl	8005aac <HAL_RCC_ClockConfig>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001076:	f000 fd89 	bl	8001b8c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800107a:	f005 fb05 	bl	8006688 <HAL_RCCEx_EnableMSIPLLMode>
}
 800107e:	bf00      	nop
 8001080:	3758      	adds	r7, #88	; 0x58
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40021000 	.word	0x40021000

0800108c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b0a6      	sub	sp, #152	; 0x98
 8001090:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	2294      	movs	r2, #148	; 0x94
 8001096:	2100      	movs	r1, #0
 8001098:	4618      	mov	r0, r3
 800109a:	f007 fe6d 	bl	8008d78 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 800109e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80010a2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80010a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80010a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80010ac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80010b0:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80010b2:	2301      	movs	r3, #1
 80010b4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80010b6:	2301      	movs	r3, #1
 80010b8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80010ba:	2318      	movs	r3, #24
 80010bc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80010be:	2302      	movs	r3, #2
 80010c0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80010c2:	2302      	movs	r3, #2
 80010c4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80010c6:	2302      	movs	r3, #2
 80010c8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80010ca:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80010ce:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	4618      	mov	r0, r3
 80010d4:	f004 ffa8 	bl	8006028 <HAL_RCCEx_PeriphCLKConfig>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80010de:	f000 fd55 	bl	8001b8c <Error_Handler>
  }
}
 80010e2:	bf00      	nop
 80010e4:	3798      	adds	r7, #152	; 0x98
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010f2:	463b      	mov	r3, r7
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
 8001100:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001102:	4b29      	ldr	r3, [pc, #164]	; (80011a8 <MX_ADC1_Init+0xbc>)
 8001104:	4a29      	ldr	r2, [pc, #164]	; (80011ac <MX_ADC1_Init+0xc0>)
 8001106:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001108:	4b27      	ldr	r3, [pc, #156]	; (80011a8 <MX_ADC1_Init+0xbc>)
 800110a:	2200      	movs	r2, #0
 800110c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800110e:	4b26      	ldr	r3, [pc, #152]	; (80011a8 <MX_ADC1_Init+0xbc>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001114:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <MX_ADC1_Init+0xbc>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800111a:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <MX_ADC1_Init+0xbc>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001120:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <MX_ADC1_Init+0xbc>)
 8001122:	2204      	movs	r2, #4
 8001124:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001126:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <MX_ADC1_Init+0xbc>)
 8001128:	2200      	movs	r2, #0
 800112a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800112c:	4b1e      	ldr	r3, [pc, #120]	; (80011a8 <MX_ADC1_Init+0xbc>)
 800112e:	2200      	movs	r2, #0
 8001130:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001132:	4b1d      	ldr	r3, [pc, #116]	; (80011a8 <MX_ADC1_Init+0xbc>)
 8001134:	2201      	movs	r2, #1
 8001136:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001138:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <MX_ADC1_Init+0xbc>)
 800113a:	2200      	movs	r2, #0
 800113c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001140:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <MX_ADC1_Init+0xbc>)
 8001142:	2200      	movs	r2, #0
 8001144:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001146:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <MX_ADC1_Init+0xbc>)
 8001148:	2200      	movs	r2, #0
 800114a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800114c:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <MX_ADC1_Init+0xbc>)
 800114e:	2200      	movs	r2, #0
 8001150:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001154:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <MX_ADC1_Init+0xbc>)
 8001156:	2200      	movs	r2, #0
 8001158:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800115a:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <MX_ADC1_Init+0xbc>)
 800115c:	2200      	movs	r2, #0
 800115e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001162:	4811      	ldr	r0, [pc, #68]	; (80011a8 <MX_ADC1_Init+0xbc>)
 8001164:	f001 fc5a 	bl	8002a1c <HAL_ADC_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800116e:	f000 fd0d 	bl	8001b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001172:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_ADC1_Init+0xc4>)
 8001174:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001176:	2306      	movs	r3, #6
 8001178:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800117a:	2300      	movs	r3, #0
 800117c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800117e:	237f      	movs	r3, #127	; 0x7f
 8001180:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001182:	2304      	movs	r3, #4
 8001184:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800118a:	463b      	mov	r3, r7
 800118c:	4619      	mov	r1, r3
 800118e:	4806      	ldr	r0, [pc, #24]	; (80011a8 <MX_ADC1_Init+0xbc>)
 8001190:	f001 fe22 	bl	8002dd8 <HAL_ADC_ConfigChannel>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800119a:	f000 fcf7 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800119e:	bf00      	nop
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000078 	.word	0x20000078
 80011ac:	50040000 	.word	0x50040000
 80011b0:	04300002 	.word	0x04300002

080011b4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 80011b8:	4b18      	ldr	r3, [pc, #96]	; (800121c <MX_DFSDM1_Init+0x68>)
 80011ba:	4a19      	ldr	r2, [pc, #100]	; (8001220 <MX_DFSDM1_Init+0x6c>)
 80011bc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 80011be:	4b17      	ldr	r3, [pc, #92]	; (800121c <MX_DFSDM1_Init+0x68>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80011c4:	4b15      	ldr	r3, [pc, #84]	; (800121c <MX_DFSDM1_Init+0x68>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 80011ca:	4b14      	ldr	r3, [pc, #80]	; (800121c <MX_DFSDM1_Init+0x68>)
 80011cc:	2202      	movs	r2, #2
 80011ce:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <MX_DFSDM1_Init+0x68>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80011d6:	4b11      	ldr	r3, [pc, #68]	; (800121c <MX_DFSDM1_Init+0x68>)
 80011d8:	2200      	movs	r2, #0
 80011da:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <MX_DFSDM1_Init+0x68>)
 80011de:	2200      	movs	r2, #0
 80011e0:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <MX_DFSDM1_Init+0x68>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80011e8:	4b0c      	ldr	r3, [pc, #48]	; (800121c <MX_DFSDM1_Init+0x68>)
 80011ea:	2204      	movs	r2, #4
 80011ec:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <MX_DFSDM1_Init+0x68>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80011f4:	4b09      	ldr	r3, [pc, #36]	; (800121c <MX_DFSDM1_Init+0x68>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80011fa:	4b08      	ldr	r3, [pc, #32]	; (800121c <MX_DFSDM1_Init+0x68>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <MX_DFSDM1_Init+0x68>)
 8001202:	2200      	movs	r2, #0
 8001204:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8001206:	4805      	ldr	r0, [pc, #20]	; (800121c <MX_DFSDM1_Init+0x68>)
 8001208:	f002 fc0e 	bl	8003a28 <HAL_DFSDM_ChannelInit>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8001212:	f000 fcbb 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000140 	.word	0x20000140
 8001220:	40016040 	.word	0x40016040

08001224 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001228:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <MX_I2C1_Init+0x74>)
 800122a:	4a1c      	ldr	r2, [pc, #112]	; (800129c <MX_I2C1_Init+0x78>)
 800122c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 800122e:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <MX_I2C1_Init+0x74>)
 8001230:	4a1b      	ldr	r2, [pc, #108]	; (80012a0 <MX_I2C1_Init+0x7c>)
 8001232:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001234:	4b18      	ldr	r3, [pc, #96]	; (8001298 <MX_I2C1_Init+0x74>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800123a:	4b17      	ldr	r3, [pc, #92]	; (8001298 <MX_I2C1_Init+0x74>)
 800123c:	2201      	movs	r2, #1
 800123e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001240:	4b15      	ldr	r3, [pc, #84]	; (8001298 <MX_I2C1_Init+0x74>)
 8001242:	2200      	movs	r2, #0
 8001244:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001246:	4b14      	ldr	r3, [pc, #80]	; (8001298 <MX_I2C1_Init+0x74>)
 8001248:	2200      	movs	r2, #0
 800124a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <MX_I2C1_Init+0x74>)
 800124e:	2200      	movs	r2, #0
 8001250:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <MX_I2C1_Init+0x74>)
 8001254:	2200      	movs	r2, #0
 8001256:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001258:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <MX_I2C1_Init+0x74>)
 800125a:	2200      	movs	r2, #0
 800125c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800125e:	480e      	ldr	r0, [pc, #56]	; (8001298 <MX_I2C1_Init+0x74>)
 8001260:	f003 f92d 	bl	80044be <HAL_I2C_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800126a:	f000 fc8f 	bl	8001b8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800126e:	2100      	movs	r1, #0
 8001270:	4809      	ldr	r0, [pc, #36]	; (8001298 <MX_I2C1_Init+0x74>)
 8001272:	f003 f9bf 	bl	80045f4 <HAL_I2CEx_ConfigAnalogFilter>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800127c:	f000 fc86 	bl	8001b8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001280:	2100      	movs	r1, #0
 8001282:	4805      	ldr	r0, [pc, #20]	; (8001298 <MX_I2C1_Init+0x74>)
 8001284:	f003 fa01 	bl	800468a <HAL_I2CEx_ConfigDigitalFilter>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800128e:	f000 fc7d 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000178 	.word	0x20000178
 800129c:	40005400 	.word	0x40005400
 80012a0:	307075b1 	.word	0x307075b1

080012a4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012a8:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <MX_I2C2_Init+0x74>)
 80012aa:	4a1c      	ldr	r2, [pc, #112]	; (800131c <MX_I2C2_Init+0x78>)
 80012ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80012ae:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <MX_I2C2_Init+0x74>)
 80012b0:	4a1b      	ldr	r2, [pc, #108]	; (8001320 <MX_I2C2_Init+0x7c>)
 80012b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80012b4:	4b18      	ldr	r3, [pc, #96]	; (8001318 <MX_I2C2_Init+0x74>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ba:	4b17      	ldr	r3, [pc, #92]	; (8001318 <MX_I2C2_Init+0x74>)
 80012bc:	2201      	movs	r2, #1
 80012be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c0:	4b15      	ldr	r3, [pc, #84]	; (8001318 <MX_I2C2_Init+0x74>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80012c6:	4b14      	ldr	r3, [pc, #80]	; (8001318 <MX_I2C2_Init+0x74>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <MX_I2C2_Init+0x74>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012d2:	4b11      	ldr	r3, [pc, #68]	; (8001318 <MX_I2C2_Init+0x74>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <MX_I2C2_Init+0x74>)
 80012da:	2200      	movs	r2, #0
 80012dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012de:	480e      	ldr	r0, [pc, #56]	; (8001318 <MX_I2C2_Init+0x74>)
 80012e0:	f003 f8ed 	bl	80044be <HAL_I2C_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80012ea:	f000 fc4f 	bl	8001b8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012ee:	2100      	movs	r1, #0
 80012f0:	4809      	ldr	r0, [pc, #36]	; (8001318 <MX_I2C2_Init+0x74>)
 80012f2:	f003 f97f 	bl	80045f4 <HAL_I2CEx_ConfigAnalogFilter>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80012fc:	f000 fc46 	bl	8001b8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001300:	2100      	movs	r1, #0
 8001302:	4805      	ldr	r0, [pc, #20]	; (8001318 <MX_I2C2_Init+0x74>)
 8001304:	f003 f9c1 	bl	800468a <HAL_I2CEx_ConfigDigitalFilter>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800130e:	f000 fc3d 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	200001cc 	.word	0x200001cc
 800131c:	40005800 	.word	0x40005800
 8001320:	307075b1 	.word	0x307075b1

08001324 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8001338:	4b23      	ldr	r3, [pc, #140]	; (80013c8 <MX_OCTOSPI1_Init+0xa4>)
 800133a:	4a24      	ldr	r2, [pc, #144]	; (80013cc <MX_OCTOSPI1_Init+0xa8>)
 800133c:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 800133e:	4b22      	ldr	r3, [pc, #136]	; (80013c8 <MX_OCTOSPI1_Init+0xa4>)
 8001340:	2201      	movs	r2, #1
 8001342:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001344:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <MX_OCTOSPI1_Init+0xa4>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 800134a:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <MX_OCTOSPI1_Init+0xa4>)
 800134c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001350:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8001352:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <MX_OCTOSPI1_Init+0xa4>)
 8001354:	2220      	movs	r2, #32
 8001356:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8001358:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <MX_OCTOSPI1_Init+0xa4>)
 800135a:	2201      	movs	r2, #1
 800135c:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 800135e:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <MX_OCTOSPI1_Init+0xa4>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001364:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <MX_OCTOSPI1_Init+0xa4>)
 8001366:	2200      	movs	r2, #0
 8001368:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 800136a:	4b17      	ldr	r3, [pc, #92]	; (80013c8 <MX_OCTOSPI1_Init+0xa4>)
 800136c:	2201      	movs	r2, #1
 800136e:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001370:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <MX_OCTOSPI1_Init+0xa4>)
 8001372:	2200      	movs	r2, #0
 8001374:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001376:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <MX_OCTOSPI1_Init+0xa4>)
 8001378:	2200      	movs	r2, #0
 800137a:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 800137c:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <MX_OCTOSPI1_Init+0xa4>)
 800137e:	2200      	movs	r2, #0
 8001380:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001382:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <MX_OCTOSPI1_Init+0xa4>)
 8001384:	2208      	movs	r2, #8
 8001386:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001388:	480f      	ldr	r0, [pc, #60]	; (80013c8 <MX_OCTOSPI1_Init+0xa4>)
 800138a:	f003 f9cb 	bl	8004724 <HAL_OSPI_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8001394:	f000 fbfa 	bl	8001b8c <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8001398:	2301      	movs	r3, #1
 800139a:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 800139c:	2301      	movs	r3, #1
 800139e:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 80013a0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80013a4:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ac:	4619      	mov	r1, r3
 80013ae:	4806      	ldr	r0, [pc, #24]	; (80013c8 <MX_OCTOSPI1_Init+0xa4>)
 80013b0:	f003 fa72 	bl	8004898 <HAL_OSPIM_Config>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 80013ba:	f000 fbe7 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000220 	.word	0x20000220
 80013cc:	a0001000 	.word	0xa0001000

080013d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013d4:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <MX_SPI1_Init+0x74>)
 80013d6:	4a1c      	ldr	r2, [pc, #112]	; (8001448 <MX_SPI1_Init+0x78>)
 80013d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013da:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <MX_SPI1_Init+0x74>)
 80013dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013e2:	4b18      	ldr	r3, [pc, #96]	; (8001444 <MX_SPI1_Init+0x74>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80013e8:	4b16      	ldr	r3, [pc, #88]	; (8001444 <MX_SPI1_Init+0x74>)
 80013ea:	f44f 7240 	mov.w	r2, #768	; 0x300
 80013ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013f0:	4b14      	ldr	r3, [pc, #80]	; (8001444 <MX_SPI1_Init+0x74>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013f6:	4b13      	ldr	r3, [pc, #76]	; (8001444 <MX_SPI1_Init+0x74>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <MX_SPI1_Init+0x74>)
 80013fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001402:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001404:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <MX_SPI1_Init+0x74>)
 8001406:	2208      	movs	r2, #8
 8001408:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <MX_SPI1_Init+0x74>)
 800140c:	2200      	movs	r2, #0
 800140e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <MX_SPI1_Init+0x74>)
 8001412:	2200      	movs	r2, #0
 8001414:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <MX_SPI1_Init+0x74>)
 8001418:	2200      	movs	r2, #0
 800141a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <MX_SPI1_Init+0x74>)
 800141e:	2207      	movs	r2, #7
 8001420:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <MX_SPI1_Init+0x74>)
 8001424:	2200      	movs	r2, #0
 8001426:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <MX_SPI1_Init+0x74>)
 800142a:	2208      	movs	r2, #8
 800142c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800142e:	4805      	ldr	r0, [pc, #20]	; (8001444 <MX_SPI1_Init+0x74>)
 8001430:	f005 fb22 	bl	8006a78 <HAL_SPI_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800143a:	f000 fba7 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000270 	.word	0x20000270
 8001448:	40013000 	.word	0x40013000

0800144c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001450:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <MX_SPI3_Init+0x74>)
 8001452:	4a1c      	ldr	r2, [pc, #112]	; (80014c4 <MX_SPI3_Init+0x78>)
 8001454:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001456:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <MX_SPI3_Init+0x74>)
 8001458:	f44f 7282 	mov.w	r2, #260	; 0x104
 800145c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800145e:	4b18      	ldr	r3, [pc, #96]	; (80014c0 <MX_SPI3_Init+0x74>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001464:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <MX_SPI3_Init+0x74>)
 8001466:	f44f 7240 	mov.w	r2, #768	; 0x300
 800146a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800146c:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <MX_SPI3_Init+0x74>)
 800146e:	2200      	movs	r2, #0
 8001470:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001472:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <MX_SPI3_Init+0x74>)
 8001474:	2200      	movs	r2, #0
 8001476:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001478:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <MX_SPI3_Init+0x74>)
 800147a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800147e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001480:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <MX_SPI3_Init+0x74>)
 8001482:	2208      	movs	r2, #8
 8001484:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <MX_SPI3_Init+0x74>)
 8001488:	2200      	movs	r2, #0
 800148a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <MX_SPI3_Init+0x74>)
 800148e:	2200      	movs	r2, #0
 8001490:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <MX_SPI3_Init+0x74>)
 8001494:	2200      	movs	r2, #0
 8001496:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001498:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <MX_SPI3_Init+0x74>)
 800149a:	2207      	movs	r2, #7
 800149c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800149e:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <MX_SPI3_Init+0x74>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <MX_SPI3_Init+0x74>)
 80014a6:	2208      	movs	r2, #8
 80014a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80014aa:	4805      	ldr	r0, [pc, #20]	; (80014c0 <MX_SPI3_Init+0x74>)
 80014ac:	f005 fae4 	bl	8006a78 <HAL_SPI_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80014b6:	f000 fb69 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	200002d4 	.word	0x200002d4
 80014c4:	40003c00 	.word	0x40003c00

080014c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b09a      	sub	sp, #104	; 0x68
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
 80014f8:	615a      	str	r2, [r3, #20]
 80014fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	222c      	movs	r2, #44	; 0x2c
 8001500:	2100      	movs	r1, #0
 8001502:	4618      	mov	r0, r3
 8001504:	f007 fc38 	bl	8008d78 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001508:	4b43      	ldr	r3, [pc, #268]	; (8001618 <MX_TIM1_Init+0x150>)
 800150a:	4a44      	ldr	r2, [pc, #272]	; (800161c <MX_TIM1_Init+0x154>)
 800150c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 800150e:	4b42      	ldr	r3, [pc, #264]	; (8001618 <MX_TIM1_Init+0x150>)
 8001510:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001514:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001516:	4b40      	ldr	r3, [pc, #256]	; (8001618 <MX_TIM1_Init+0x150>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 800151c:	4b3e      	ldr	r3, [pc, #248]	; (8001618 <MX_TIM1_Init+0x150>)
 800151e:	2263      	movs	r2, #99	; 0x63
 8001520:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001522:	4b3d      	ldr	r3, [pc, #244]	; (8001618 <MX_TIM1_Init+0x150>)
 8001524:	2200      	movs	r2, #0
 8001526:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001528:	4b3b      	ldr	r3, [pc, #236]	; (8001618 <MX_TIM1_Init+0x150>)
 800152a:	2200      	movs	r2, #0
 800152c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800152e:	4b3a      	ldr	r3, [pc, #232]	; (8001618 <MX_TIM1_Init+0x150>)
 8001530:	2200      	movs	r2, #0
 8001532:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001534:	4838      	ldr	r0, [pc, #224]	; (8001618 <MX_TIM1_Init+0x150>)
 8001536:	f005 fb42 	bl	8006bbe <HAL_TIM_Base_Init>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001540:	f000 fb24 	bl	8001b8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001548:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800154a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800154e:	4619      	mov	r1, r3
 8001550:	4831      	ldr	r0, [pc, #196]	; (8001618 <MX_TIM1_Init+0x150>)
 8001552:	f005 fe07 	bl	8007164 <HAL_TIM_ConfigClockSource>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800155c:	f000 fb16 	bl	8001b8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001560:	482d      	ldr	r0, [pc, #180]	; (8001618 <MX_TIM1_Init+0x150>)
 8001562:	f005 fb83 	bl	8006c6c <HAL_TIM_PWM_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800156c:	f000 fb0e 	bl	8001b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001570:	2300      	movs	r3, #0
 8001572:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001574:	2300      	movs	r3, #0
 8001576:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001578:	2300      	movs	r3, #0
 800157a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800157c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001580:	4619      	mov	r1, r3
 8001582:	4825      	ldr	r0, [pc, #148]	; (8001618 <MX_TIM1_Init+0x150>)
 8001584:	f006 fba2 	bl	8007ccc <HAL_TIMEx_MasterConfigSynchronization>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800158e:	f000 fafd 	bl	8001b8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001592:	2370      	movs	r3, #112	; 0x70
 8001594:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 59;
 8001596:	233b      	movs	r3, #59	; 0x3b
 8001598:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800159a:	2300      	movs	r3, #0
 800159c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800159e:	2300      	movs	r3, #0
 80015a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015a6:	2300      	movs	r3, #0
 80015a8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015aa:	2300      	movs	r3, #0
 80015ac:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015b2:	2204      	movs	r2, #4
 80015b4:	4619      	mov	r1, r3
 80015b6:	4818      	ldr	r0, [pc, #96]	; (8001618 <MX_TIM1_Init+0x150>)
 80015b8:	f005 fcc0 	bl	8006f3c <HAL_TIM_PWM_ConfigChannel>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80015c2:	f000 fae3 	bl	8001b8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015c6:	2300      	movs	r3, #0
 80015c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015f2:	2300      	movs	r3, #0
 80015f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	4619      	mov	r1, r3
 80015fa:	4807      	ldr	r0, [pc, #28]	; (8001618 <MX_TIM1_Init+0x150>)
 80015fc:	f006 fbee 	bl	8007ddc <HAL_TIMEx_ConfigBreakDeadTime>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001606:	f000 fac1 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800160a:	4803      	ldr	r0, [pc, #12]	; (8001618 <MX_TIM1_Init+0x150>)
 800160c:	f000 fd5e 	bl	80020cc <HAL_TIM_MspPostInit>

}
 8001610:	bf00      	nop
 8001612:	3768      	adds	r7, #104	; 0x68
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20000338 	.word	0x20000338
 800161c:	40012c00 	.word	0x40012c00

08001620 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001624:	4b22      	ldr	r3, [pc, #136]	; (80016b0 <MX_UART4_Init+0x90>)
 8001626:	4a23      	ldr	r2, [pc, #140]	; (80016b4 <MX_UART4_Init+0x94>)
 8001628:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800162a:	4b21      	ldr	r3, [pc, #132]	; (80016b0 <MX_UART4_Init+0x90>)
 800162c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001630:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001632:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <MX_UART4_Init+0x90>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001638:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <MX_UART4_Init+0x90>)
 800163a:	2200      	movs	r2, #0
 800163c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800163e:	4b1c      	ldr	r3, [pc, #112]	; (80016b0 <MX_UART4_Init+0x90>)
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001644:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <MX_UART4_Init+0x90>)
 8001646:	220c      	movs	r2, #12
 8001648:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164a:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <MX_UART4_Init+0x90>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001650:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <MX_UART4_Init+0x90>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001656:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <MX_UART4_Init+0x90>)
 8001658:	2200      	movs	r2, #0
 800165a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <MX_UART4_Init+0x90>)
 800165e:	2200      	movs	r2, #0
 8001660:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001662:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <MX_UART4_Init+0x90>)
 8001664:	2200      	movs	r2, #0
 8001666:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001668:	4811      	ldr	r0, [pc, #68]	; (80016b0 <MX_UART4_Init+0x90>)
 800166a:	f006 fc5a 	bl	8007f22 <HAL_UART_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001674:	f000 fa8a 	bl	8001b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001678:	2100      	movs	r1, #0
 800167a:	480d      	ldr	r0, [pc, #52]	; (80016b0 <MX_UART4_Init+0x90>)
 800167c:	f007 fa7e 	bl	8008b7c <HAL_UARTEx_SetTxFifoThreshold>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001686:	f000 fa81 	bl	8001b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800168a:	2100      	movs	r1, #0
 800168c:	4808      	ldr	r0, [pc, #32]	; (80016b0 <MX_UART4_Init+0x90>)
 800168e:	f007 fab3 	bl	8008bf8 <HAL_UARTEx_SetRxFifoThreshold>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001698:	f000 fa78 	bl	8001b8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800169c:	4804      	ldr	r0, [pc, #16]	; (80016b0 <MX_UART4_Init+0x90>)
 800169e:	f007 fa34 	bl	8008b0a <HAL_UARTEx_DisableFifoMode>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80016a8:	f000 fa70 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000384 	.word	0x20000384
 80016b4:	40004c00 	.word	0x40004c00

080016b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016bc:	4b22      	ldr	r3, [pc, #136]	; (8001748 <MX_USART1_UART_Init+0x90>)
 80016be:	4a23      	ldr	r2, [pc, #140]	; (800174c <MX_USART1_UART_Init+0x94>)
 80016c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016c2:	4b21      	ldr	r3, [pc, #132]	; (8001748 <MX_USART1_UART_Init+0x90>)
 80016c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016ca:	4b1f      	ldr	r3, [pc, #124]	; (8001748 <MX_USART1_UART_Init+0x90>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016d0:	4b1d      	ldr	r3, [pc, #116]	; (8001748 <MX_USART1_UART_Init+0x90>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016d6:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <MX_USART1_UART_Init+0x90>)
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016dc:	4b1a      	ldr	r3, [pc, #104]	; (8001748 <MX_USART1_UART_Init+0x90>)
 80016de:	220c      	movs	r2, #12
 80016e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e2:	4b19      	ldr	r3, [pc, #100]	; (8001748 <MX_USART1_UART_Init+0x90>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e8:	4b17      	ldr	r3, [pc, #92]	; (8001748 <MX_USART1_UART_Init+0x90>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ee:	4b16      	ldr	r3, [pc, #88]	; (8001748 <MX_USART1_UART_Init+0x90>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016f4:	4b14      	ldr	r3, [pc, #80]	; (8001748 <MX_USART1_UART_Init+0x90>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016fa:	4b13      	ldr	r3, [pc, #76]	; (8001748 <MX_USART1_UART_Init+0x90>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001700:	4811      	ldr	r0, [pc, #68]	; (8001748 <MX_USART1_UART_Init+0x90>)
 8001702:	f006 fc0e 	bl	8007f22 <HAL_UART_Init>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800170c:	f000 fa3e 	bl	8001b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001710:	2100      	movs	r1, #0
 8001712:	480d      	ldr	r0, [pc, #52]	; (8001748 <MX_USART1_UART_Init+0x90>)
 8001714:	f007 fa32 	bl	8008b7c <HAL_UARTEx_SetTxFifoThreshold>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800171e:	f000 fa35 	bl	8001b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001722:	2100      	movs	r1, #0
 8001724:	4808      	ldr	r0, [pc, #32]	; (8001748 <MX_USART1_UART_Init+0x90>)
 8001726:	f007 fa67 	bl	8008bf8 <HAL_UARTEx_SetRxFifoThreshold>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001730:	f000 fa2c 	bl	8001b8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001734:	4804      	ldr	r0, [pc, #16]	; (8001748 <MX_USART1_UART_Init+0x90>)
 8001736:	f007 f9e8 	bl	8008b0a <HAL_UARTEx_DisableFifoMode>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001740:	f000 fa24 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000418 	.word	0x20000418
 800174c:	40013800 	.word	0x40013800

08001750 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001754:	4b23      	ldr	r3, [pc, #140]	; (80017e4 <MX_USART2_UART_Init+0x94>)
 8001756:	4a24      	ldr	r2, [pc, #144]	; (80017e8 <MX_USART2_UART_Init+0x98>)
 8001758:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800175a:	4b22      	ldr	r3, [pc, #136]	; (80017e4 <MX_USART2_UART_Init+0x94>)
 800175c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001760:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001762:	4b20      	ldr	r3, [pc, #128]	; (80017e4 <MX_USART2_UART_Init+0x94>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001768:	4b1e      	ldr	r3, [pc, #120]	; (80017e4 <MX_USART2_UART_Init+0x94>)
 800176a:	2200      	movs	r2, #0
 800176c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800176e:	4b1d      	ldr	r3, [pc, #116]	; (80017e4 <MX_USART2_UART_Init+0x94>)
 8001770:	2200      	movs	r2, #0
 8001772:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001774:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <MX_USART2_UART_Init+0x94>)
 8001776:	220c      	movs	r2, #12
 8001778:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800177a:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <MX_USART2_UART_Init+0x94>)
 800177c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001780:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001782:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <MX_USART2_UART_Init+0x94>)
 8001784:	2200      	movs	r2, #0
 8001786:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001788:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <MX_USART2_UART_Init+0x94>)
 800178a:	2200      	movs	r2, #0
 800178c:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <MX_USART2_UART_Init+0x94>)
 8001790:	2200      	movs	r2, #0
 8001792:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001794:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <MX_USART2_UART_Init+0x94>)
 8001796:	2200      	movs	r2, #0
 8001798:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800179a:	4812      	ldr	r0, [pc, #72]	; (80017e4 <MX_USART2_UART_Init+0x94>)
 800179c:	f006 fbc1 	bl	8007f22 <HAL_UART_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80017a6:	f000 f9f1 	bl	8001b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017aa:	2100      	movs	r1, #0
 80017ac:	480d      	ldr	r0, [pc, #52]	; (80017e4 <MX_USART2_UART_Init+0x94>)
 80017ae:	f007 f9e5 	bl	8008b7c <HAL_UARTEx_SetTxFifoThreshold>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 80017b8:	f000 f9e8 	bl	8001b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017bc:	2100      	movs	r1, #0
 80017be:	4809      	ldr	r0, [pc, #36]	; (80017e4 <MX_USART2_UART_Init+0x94>)
 80017c0:	f007 fa1a 	bl	8008bf8 <HAL_UARTEx_SetRxFifoThreshold>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 80017ca:	f000 f9df 	bl	8001b8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80017ce:	4805      	ldr	r0, [pc, #20]	; (80017e4 <MX_USART2_UART_Init+0x94>)
 80017d0:	f007 f99b 	bl	8008b0a <HAL_UARTEx_DisableFifoMode>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80017da:	f000 f9d7 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200004ac 	.word	0x200004ac
 80017e8:	40004400 	.word	0x40004400

080017ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017f0:	4b22      	ldr	r3, [pc, #136]	; (800187c <MX_USART3_UART_Init+0x90>)
 80017f2:	4a23      	ldr	r2, [pc, #140]	; (8001880 <MX_USART3_UART_Init+0x94>)
 80017f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017f6:	4b21      	ldr	r3, [pc, #132]	; (800187c <MX_USART3_UART_Init+0x90>)
 80017f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017fe:	4b1f      	ldr	r3, [pc, #124]	; (800187c <MX_USART3_UART_Init+0x90>)
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001804:	4b1d      	ldr	r3, [pc, #116]	; (800187c <MX_USART3_UART_Init+0x90>)
 8001806:	2200      	movs	r2, #0
 8001808:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800180a:	4b1c      	ldr	r3, [pc, #112]	; (800187c <MX_USART3_UART_Init+0x90>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001810:	4b1a      	ldr	r3, [pc, #104]	; (800187c <MX_USART3_UART_Init+0x90>)
 8001812:	220c      	movs	r2, #12
 8001814:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001816:	4b19      	ldr	r3, [pc, #100]	; (800187c <MX_USART3_UART_Init+0x90>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800181c:	4b17      	ldr	r3, [pc, #92]	; (800187c <MX_USART3_UART_Init+0x90>)
 800181e:	2200      	movs	r2, #0
 8001820:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001822:	4b16      	ldr	r3, [pc, #88]	; (800187c <MX_USART3_UART_Init+0x90>)
 8001824:	2200      	movs	r2, #0
 8001826:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001828:	4b14      	ldr	r3, [pc, #80]	; (800187c <MX_USART3_UART_Init+0x90>)
 800182a:	2200      	movs	r2, #0
 800182c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800182e:	4b13      	ldr	r3, [pc, #76]	; (800187c <MX_USART3_UART_Init+0x90>)
 8001830:	2200      	movs	r2, #0
 8001832:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001834:	4811      	ldr	r0, [pc, #68]	; (800187c <MX_USART3_UART_Init+0x90>)
 8001836:	f006 fb74 	bl	8007f22 <HAL_UART_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001840:	f000 f9a4 	bl	8001b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001844:	2100      	movs	r1, #0
 8001846:	480d      	ldr	r0, [pc, #52]	; (800187c <MX_USART3_UART_Init+0x90>)
 8001848:	f007 f998 	bl	8008b7c <HAL_UARTEx_SetTxFifoThreshold>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001852:	f000 f99b 	bl	8001b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001856:	2100      	movs	r1, #0
 8001858:	4808      	ldr	r0, [pc, #32]	; (800187c <MX_USART3_UART_Init+0x90>)
 800185a:	f007 f9cd 	bl	8008bf8 <HAL_UARTEx_SetRxFifoThreshold>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001864:	f000 f992 	bl	8001b8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001868:	4804      	ldr	r0, [pc, #16]	; (800187c <MX_USART3_UART_Init+0x90>)
 800186a:	f007 f94e 	bl	8008b0a <HAL_UARTEx_DisableFifoMode>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001874:	f000 f98a 	bl	8001b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001878:	bf00      	nop
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20000540 	.word	0x20000540
 8001880:	40004800 	.word	0x40004800

08001884 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800189a:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <MX_DMA_Init+0x50>)
 800189c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800189e:	4a11      	ldr	r2, [pc, #68]	; (80018e4 <MX_DMA_Init+0x50>)
 80018a0:	f043 0304 	orr.w	r3, r3, #4
 80018a4:	6493      	str	r3, [r2, #72]	; 0x48
 80018a6:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <MX_DMA_Init+0x50>)
 80018a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018aa:	f003 0304 	and.w	r3, r3, #4
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018b2:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <MX_DMA_Init+0x50>)
 80018b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018b6:	4a0b      	ldr	r2, [pc, #44]	; (80018e4 <MX_DMA_Init+0x50>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	6493      	str	r3, [r2, #72]	; 0x48
 80018be:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <MX_DMA_Init+0x50>)
 80018c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	603b      	str	r3, [r7, #0]
 80018c8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2100      	movs	r1, #0
 80018ce:	200b      	movs	r0, #11
 80018d0:	f002 f873 	bl	80039ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80018d4:	200b      	movs	r0, #11
 80018d6:	f002 f88c 	bl	80039f2 <HAL_NVIC_EnableIRQ>

}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40021000 	.word	0x40021000

080018e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08c      	sub	sp, #48	; 0x30
 80018ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ee:	f107 031c 	add.w	r3, r7, #28
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]
 80018fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018fe:	4b96      	ldr	r3, [pc, #600]	; (8001b58 <MX_GPIO_Init+0x270>)
 8001900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001902:	4a95      	ldr	r2, [pc, #596]	; (8001b58 <MX_GPIO_Init+0x270>)
 8001904:	f043 0310 	orr.w	r3, r3, #16
 8001908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800190a:	4b93      	ldr	r3, [pc, #588]	; (8001b58 <MX_GPIO_Init+0x270>)
 800190c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190e:	f003 0310 	and.w	r3, r3, #16
 8001912:	61bb      	str	r3, [r7, #24]
 8001914:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001916:	4b90      	ldr	r3, [pc, #576]	; (8001b58 <MX_GPIO_Init+0x270>)
 8001918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191a:	4a8f      	ldr	r2, [pc, #572]	; (8001b58 <MX_GPIO_Init+0x270>)
 800191c:	f043 0304 	orr.w	r3, r3, #4
 8001920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001922:	4b8d      	ldr	r3, [pc, #564]	; (8001b58 <MX_GPIO_Init+0x270>)
 8001924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001926:	f003 0304 	and.w	r3, r3, #4
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800192e:	4b8a      	ldr	r3, [pc, #552]	; (8001b58 <MX_GPIO_Init+0x270>)
 8001930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001932:	4a89      	ldr	r2, [pc, #548]	; (8001b58 <MX_GPIO_Init+0x270>)
 8001934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800193a:	4b87      	ldr	r3, [pc, #540]	; (8001b58 <MX_GPIO_Init+0x270>)
 800193c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001946:	4b84      	ldr	r3, [pc, #528]	; (8001b58 <MX_GPIO_Init+0x270>)
 8001948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194a:	4a83      	ldr	r2, [pc, #524]	; (8001b58 <MX_GPIO_Init+0x270>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001952:	4b81      	ldr	r3, [pc, #516]	; (8001b58 <MX_GPIO_Init+0x270>)
 8001954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800195e:	4b7e      	ldr	r3, [pc, #504]	; (8001b58 <MX_GPIO_Init+0x270>)
 8001960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001962:	4a7d      	ldr	r2, [pc, #500]	; (8001b58 <MX_GPIO_Init+0x270>)
 8001964:	f043 0302 	orr.w	r3, r3, #2
 8001968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800196a:	4b7b      	ldr	r3, [pc, #492]	; (8001b58 <MX_GPIO_Init+0x270>)
 800196c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	60bb      	str	r3, [r7, #8]
 8001974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001976:	4b78      	ldr	r3, [pc, #480]	; (8001b58 <MX_GPIO_Init+0x270>)
 8001978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197a:	4a77      	ldr	r2, [pc, #476]	; (8001b58 <MX_GPIO_Init+0x270>)
 800197c:	f043 0308 	orr.w	r3, r3, #8
 8001980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001982:	4b75      	ldr	r3, [pc, #468]	; (8001b58 <MX_GPIO_Init+0x270>)
 8001984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001986:	f003 0308 	and.w	r3, r3, #8
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 800198e:	2200      	movs	r2, #0
 8001990:	f240 1105 	movw	r1, #261	; 0x105
 8001994:	4871      	ldr	r0, [pc, #452]	; (8001b5c <MX_GPIO_Init+0x274>)
 8001996:	f002 fd57 	bl	8004448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 800199a:	2200      	movs	r2, #0
 800199c:	f248 111c 	movw	r1, #33052	; 0x811c
 80019a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a4:	f002 fd50 	bl	8004448 <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 80019a8:	2200      	movs	r2, #0
 80019aa:	f24b 0134 	movw	r1, #45108	; 0xb034
 80019ae:	486c      	ldr	r0, [pc, #432]	; (8001b60 <MX_GPIO_Init+0x278>)
 80019b0:	f002 fd4a 	bl	8004448 <HAL_GPIO_WritePin>
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 80019b4:	2200      	movs	r2, #0
 80019b6:	f242 0183 	movw	r1, #8323	; 0x2083
 80019ba:	486a      	ldr	r0, [pc, #424]	; (8001b64 <MX_GPIO_Init+0x27c>)
 80019bc:	f002 fd44 	bl	8004448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80019c0:	2200      	movs	r2, #0
 80019c2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80019c6:	4868      	ldr	r0, [pc, #416]	; (8001b68 <MX_GPIO_Init+0x280>)
 80019c8:	f002 fd3e 	bl	8004448 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80019cc:	f240 1305 	movw	r3, #261	; 0x105
 80019d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d2:	2301      	movs	r3, #1
 80019d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019da:	2300      	movs	r3, #0
 80019dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019de:	f107 031c 	add.w	r3, r7, #28
 80019e2:	4619      	mov	r1, r3
 80019e4:	485d      	ldr	r0, [pc, #372]	; (8001b5c <MX_GPIO_Init+0x274>)
 80019e6:	f002 fb9d 	bl	8004124 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 80019ea:	237a      	movs	r3, #122	; 0x7a
 80019ec:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019ee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019f8:	f107 031c 	add.w	r3, r7, #28
 80019fc:	4619      	mov	r1, r3
 80019fe:	4857      	ldr	r0, [pc, #348]	; (8001b5c <MX_GPIO_Init+0x274>)
 8001a00:	f002 fb90 	bl	8004124 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001a04:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8001a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a0a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a14:	f107 031c 	add.w	r3, r7, #28
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4853      	ldr	r0, [pc, #332]	; (8001b68 <MX_GPIO_Init+0x280>)
 8001a1c:	f002 fb82 	bl	8004124 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8001a20:	f248 131c 	movw	r3, #33052	; 0x811c
 8001a24:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a26:	2301      	movs	r3, #1
 8001a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a32:	f107 031c 	add.w	r3, r7, #28
 8001a36:	4619      	mov	r1, r3
 8001a38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a3c:	f002 fb72 	bl	8004124 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001a40:	2301      	movs	r3, #1
 8001a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a44:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001a4e:	f107 031c 	add.w	r3, r7, #28
 8001a52:	4619      	mov	r1, r3
 8001a54:	4842      	ldr	r0, [pc, #264]	; (8001b60 <MX_GPIO_Init+0x278>)
 8001a56:	f002 fb65 	bl	8004124 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a66:	2300      	movs	r3, #0
 8001a68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001a6e:	f107 031c 	add.w	r3, r7, #28
 8001a72:	4619      	mov	r1, r3
 8001a74:	483a      	ldr	r0, [pc, #232]	; (8001b60 <MX_GPIO_Init+0x278>)
 8001a76:	f002 fb55 	bl	8004124 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 8001a7a:	f24b 0334 	movw	r3, #45108	; 0xb034
 8001a7e:	61fb      	str	r3, [r7, #28]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a80:	2301      	movs	r3, #1
 8001a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a8c:	f107 031c 	add.w	r3, r7, #28
 8001a90:	4619      	mov	r1, r3
 8001a92:	4833      	ldr	r0, [pc, #204]	; (8001b60 <MX_GPIO_Init+0x278>)
 8001a94:	f002 fb46 	bl	8004124 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8001a98:	f64d 4304 	movw	r3, #56324	; 0xdc04
 8001a9c:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a9e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aa8:	f107 031c 	add.w	r3, r7, #28
 8001aac:	4619      	mov	r1, r3
 8001aae:	482d      	ldr	r0, [pc, #180]	; (8001b64 <MX_GPIO_Init+0x27c>)
 8001ab0:	f002 fb38 	bl	8004124 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8001ab4:	f242 0383 	movw	r3, #8323	; 0x2083
 8001ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aba:	2301      	movs	r3, #1
 8001abc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ac6:	f107 031c 	add.w	r3, r7, #28
 8001aca:	4619      	mov	r1, r3
 8001acc:	4825      	ldr	r0, [pc, #148]	; (8001b64 <MX_GPIO_Init+0x27c>)
 8001ace:	f002 fb29 	bl	8004124 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001ad2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ae4:	f107 031c 	add.w	r3, r7, #28
 8001ae8:	4619      	mov	r1, r3
 8001aea:	481f      	ldr	r0, [pc, #124]	; (8001b68 <MX_GPIO_Init+0x280>)
 8001aec:	f002 fb1a 	bl	8004124 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001af0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001af6:	2300      	movs	r3, #0
 8001af8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001afe:	f107 031c 	add.w	r3, r7, #28
 8001b02:	4619      	mov	r1, r3
 8001b04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b08:	f002 fb0c 	bl	8004124 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001b0c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b12:	2302      	movs	r3, #2
 8001b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b1e:	230a      	movs	r3, #10
 8001b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b22:	f107 031c 	add.w	r3, r7, #28
 8001b26:	4619      	mov	r1, r3
 8001b28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b2c:	f002 fafa 	bl	8004124 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001b30:	2200      	movs	r2, #0
 8001b32:	2100      	movs	r1, #0
 8001b34:	2017      	movs	r0, #23
 8001b36:	f001 ff40 	bl	80039ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b3a:	2017      	movs	r0, #23
 8001b3c:	f001 ff59 	bl	80039f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b40:	2200      	movs	r2, #0
 8001b42:	2100      	movs	r1, #0
 8001b44:	2028      	movs	r0, #40	; 0x28
 8001b46:	f001 ff38 	bl	80039ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b4a:	2028      	movs	r0, #40	; 0x28
 8001b4c:	f001 ff51 	bl	80039f2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b50:	bf00      	nop
 8001b52:	3730      	adds	r7, #48	; 0x30
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	48001000 	.word	0x48001000
 8001b60:	48000400 	.word	0x48000400
 8001b64:	48000c00 	.word	0x48000c00
 8001b68:	48000800 	.word	0x48000800

08001b6c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  ADCComplete = 1;
 8001b74:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	601a      	str	r2, [r3, #0]
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	200005d8 	.word	0x200005d8

08001b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b90:	b672      	cpsid	i
}
 8001b92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b94:	e7fe      	b.n	8001b94 <Error_Handler+0x8>
	...

08001b98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9e:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <HAL_MspInit+0x44>)
 8001ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ba2:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <HAL_MspInit+0x44>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	6613      	str	r3, [r2, #96]	; 0x60
 8001baa:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <HAL_MspInit+0x44>)
 8001bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	607b      	str	r3, [r7, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb6:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <HAL_MspInit+0x44>)
 8001bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bba:	4a08      	ldr	r2, [pc, #32]	; (8001bdc <HAL_MspInit+0x44>)
 8001bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc0:	6593      	str	r3, [r2, #88]	; 0x58
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_MspInit+0x44>)
 8001bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bca:	603b      	str	r3, [r7, #0]
 8001bcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40021000 	.word	0x40021000

08001be0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08a      	sub	sp, #40	; 0x28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a2a      	ldr	r2, [pc, #168]	; (8001ca8 <HAL_ADC_MspInit+0xc8>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d14e      	bne.n	8001ca0 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001c02:	4b2a      	ldr	r3, [pc, #168]	; (8001cac <HAL_ADC_MspInit+0xcc>)
 8001c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c06:	4a29      	ldr	r2, [pc, #164]	; (8001cac <HAL_ADC_MspInit+0xcc>)
 8001c08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c0e:	4b27      	ldr	r3, [pc, #156]	; (8001cac <HAL_ADC_MspInit+0xcc>)
 8001c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c1a:	4b24      	ldr	r3, [pc, #144]	; (8001cac <HAL_ADC_MspInit+0xcc>)
 8001c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1e:	4a23      	ldr	r2, [pc, #140]	; (8001cac <HAL_ADC_MspInit+0xcc>)
 8001c20:	f043 0304 	orr.w	r3, r3, #4
 8001c24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c26:	4b21      	ldr	r3, [pc, #132]	; (8001cac <HAL_ADC_MspInit+0xcc>)
 8001c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2a:	f003 0304 	and.w	r3, r3, #4
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001c32:	233f      	movs	r3, #63	; 0x3f
 8001c34:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c36:	230b      	movs	r3, #11
 8001c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c3e:	f107 0314 	add.w	r3, r7, #20
 8001c42:	4619      	mov	r1, r3
 8001c44:	481a      	ldr	r0, [pc, #104]	; (8001cb0 <HAL_ADC_MspInit+0xd0>)
 8001c46:	f002 fa6d 	bl	8004124 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001c4a:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <HAL_ADC_MspInit+0xd4>)
 8001c4c:	4a1a      	ldr	r2, [pc, #104]	; (8001cb8 <HAL_ADC_MspInit+0xd8>)
 8001c4e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001c50:	4b18      	ldr	r3, [pc, #96]	; (8001cb4 <HAL_ADC_MspInit+0xd4>)
 8001c52:	2205      	movs	r2, #5
 8001c54:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c56:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <HAL_ADC_MspInit+0xd4>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c5c:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <HAL_ADC_MspInit+0xd4>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c62:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <HAL_ADC_MspInit+0xd4>)
 8001c64:	2280      	movs	r2, #128	; 0x80
 8001c66:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c68:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <HAL_ADC_MspInit+0xd4>)
 8001c6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c6e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c70:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <HAL_ADC_MspInit+0xd4>)
 8001c72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c76:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001c78:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <HAL_ADC_MspInit+0xd4>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c7e:	4b0d      	ldr	r3, [pc, #52]	; (8001cb4 <HAL_ADC_MspInit+0xd4>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c84:	480b      	ldr	r0, [pc, #44]	; (8001cb4 <HAL_ADC_MspInit+0xd4>)
 8001c86:	f001 ffdb 	bl	8003c40 <HAL_DMA_Init>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 8001c90:	f7ff ff7c 	bl	8001b8c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a07      	ldr	r2, [pc, #28]	; (8001cb4 <HAL_ADC_MspInit+0xd4>)
 8001c98:	651a      	str	r2, [r3, #80]	; 0x50
 8001c9a:	4a06      	ldr	r2, [pc, #24]	; (8001cb4 <HAL_ADC_MspInit+0xd4>)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ca0:	bf00      	nop
 8001ca2:	3728      	adds	r7, #40	; 0x28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	50040000 	.word	0x50040000
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	48000800 	.word	0x48000800
 8001cb4:	200000e0 	.word	0x200000e0
 8001cb8:	40020008 	.word	0x40020008

08001cbc <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b0ae      	sub	sp, #184	; 0xb8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cd4:	f107 0310 	add.w	r3, r7, #16
 8001cd8:	2294      	movs	r2, #148	; 0x94
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f007 f84b 	bl	8008d78 <memset>
  if(DFSDM1_Init == 0)
 8001ce2:	4b25      	ldr	r3, [pc, #148]	; (8001d78 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d142      	bne.n	8001d70 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001cea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cf6:	f107 0310 	add.w	r3, r7, #16
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f004 f994 	bl	8006028 <HAL_RCCEx_PeriphCLKConfig>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001d06:	f7ff ff41 	bl	8001b8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001d0a:	4b1c      	ldr	r3, [pc, #112]	; (8001d7c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d0e:	4a1b      	ldr	r2, [pc, #108]	; (8001d7c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001d10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d14:	6613      	str	r3, [r2, #96]	; 0x60
 8001d16:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d22:	4b16      	ldr	r3, [pc, #88]	; (8001d7c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d26:	4a15      	ldr	r2, [pc, #84]	; (8001d7c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001d28:	f043 0310 	orr.w	r3, r3, #16
 8001d2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d2e:	4b13      	ldr	r3, [pc, #76]	; (8001d7c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d32:	f003 0310 	and.w	r3, r3, #16
 8001d36:	60bb      	str	r3, [r7, #8]
 8001d38:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001d3a:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001d3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d42:	2302      	movs	r3, #2
 8001d44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001d54:	2306      	movs	r3, #6
 8001d56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d5a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4807      	ldr	r0, [pc, #28]	; (8001d80 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001d62:	f002 f9df 	bl	8004124 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001d66:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	4a02      	ldr	r2, [pc, #8]	; (8001d78 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001d6e:	6013      	str	r3, [r2, #0]
  }

}
 8001d70:	bf00      	nop
 8001d72:	37b8      	adds	r7, #184	; 0xb8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	200005dc 	.word	0x200005dc
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	48001000 	.word	0x48001000

08001d84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b0b0      	sub	sp, #192	; 0xc0
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d9c:	f107 0318 	add.w	r3, r7, #24
 8001da0:	2294      	movs	r2, #148	; 0x94
 8001da2:	2100      	movs	r1, #0
 8001da4:	4618      	mov	r0, r3
 8001da6:	f006 ffe7 	bl	8008d78 <memset>
  if(hi2c->Instance==I2C1)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a42      	ldr	r2, [pc, #264]	; (8001eb8 <HAL_I2C_MspInit+0x134>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d13c      	bne.n	8001e2e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001db4:	2340      	movs	r3, #64	; 0x40
 8001db6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001db8:	2300      	movs	r3, #0
 8001dba:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dbc:	f107 0318 	add.w	r3, r7, #24
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f004 f931 	bl	8006028 <HAL_RCCEx_PeriphCLKConfig>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001dcc:	f7ff fede 	bl	8001b8c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd0:	4b3a      	ldr	r3, [pc, #232]	; (8001ebc <HAL_I2C_MspInit+0x138>)
 8001dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd4:	4a39      	ldr	r2, [pc, #228]	; (8001ebc <HAL_I2C_MspInit+0x138>)
 8001dd6:	f043 0302 	orr.w	r3, r3, #2
 8001dda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ddc:	4b37      	ldr	r3, [pc, #220]	; (8001ebc <HAL_I2C_MspInit+0x138>)
 8001dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001de8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001df0:	2312      	movs	r3, #18
 8001df2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001df6:	2301      	movs	r3, #1
 8001df8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e02:	2304      	movs	r3, #4
 8001e04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e08:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	482c      	ldr	r0, [pc, #176]	; (8001ec0 <HAL_I2C_MspInit+0x13c>)
 8001e10:	f002 f988 	bl	8004124 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e14:	4b29      	ldr	r3, [pc, #164]	; (8001ebc <HAL_I2C_MspInit+0x138>)
 8001e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e18:	4a28      	ldr	r2, [pc, #160]	; (8001ebc <HAL_I2C_MspInit+0x138>)
 8001e1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e1e:	6593      	str	r3, [r2, #88]	; 0x58
 8001e20:	4b26      	ldr	r3, [pc, #152]	; (8001ebc <HAL_I2C_MspInit+0x138>)
 8001e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e28:	613b      	str	r3, [r7, #16]
 8001e2a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001e2c:	e040      	b.n	8001eb0 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a24      	ldr	r2, [pc, #144]	; (8001ec4 <HAL_I2C_MspInit+0x140>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d13b      	bne.n	8001eb0 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001e38:	2380      	movs	r3, #128	; 0x80
 8001e3a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e40:	f107 0318 	add.w	r3, r7, #24
 8001e44:	4618      	mov	r0, r3
 8001e46:	f004 f8ef 	bl	8006028 <HAL_RCCEx_PeriphCLKConfig>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001e50:	f7ff fe9c 	bl	8001b8c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e54:	4b19      	ldr	r3, [pc, #100]	; (8001ebc <HAL_I2C_MspInit+0x138>)
 8001e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e58:	4a18      	ldr	r2, [pc, #96]	; (8001ebc <HAL_I2C_MspInit+0x138>)
 8001e5a:	f043 0302 	orr.w	r3, r3, #2
 8001e5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e60:	4b16      	ldr	r3, [pc, #88]	; (8001ebc <HAL_I2C_MspInit+0x138>)
 8001e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001e6c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e74:	2312      	movs	r3, #18
 8001e76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e80:	2303      	movs	r3, #3
 8001e82:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e86:	2304      	movs	r3, #4
 8001e88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e8c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001e90:	4619      	mov	r1, r3
 8001e92:	480b      	ldr	r0, [pc, #44]	; (8001ec0 <HAL_I2C_MspInit+0x13c>)
 8001e94:	f002 f946 	bl	8004124 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e98:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <HAL_I2C_MspInit+0x138>)
 8001e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9c:	4a07      	ldr	r2, [pc, #28]	; (8001ebc <HAL_I2C_MspInit+0x138>)
 8001e9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ea2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ea4:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <HAL_I2C_MspInit+0x138>)
 8001ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	68bb      	ldr	r3, [r7, #8]
}
 8001eb0:	bf00      	nop
 8001eb2:	37c0      	adds	r7, #192	; 0xc0
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40005400 	.word	0x40005400
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	48000400 	.word	0x48000400
 8001ec4:	40005800 	.word	0x40005800

08001ec8 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b0b0      	sub	sp, #192	; 0xc0
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
 8001ede:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ee0:	f107 0318 	add.w	r3, r7, #24
 8001ee4:	2294      	movs	r2, #148	; 0x94
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f006 ff45 	bl	8008d78 <memset>
  if(hospi->Instance==OCTOSPI1)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a28      	ldr	r2, [pc, #160]	; (8001f94 <HAL_OSPI_MspInit+0xcc>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d149      	bne.n	8001f8c <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001ef8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001efc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8001efe:	2300      	movs	r3, #0
 8001f00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f04:	f107 0318 	add.w	r3, r7, #24
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f004 f88d 	bl	8006028 <HAL_RCCEx_PeriphCLKConfig>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8001f14:	f7ff fe3a 	bl	8001b8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8001f18:	4b1f      	ldr	r3, [pc, #124]	; (8001f98 <HAL_OSPI_MspInit+0xd0>)
 8001f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f1c:	4a1e      	ldr	r2, [pc, #120]	; (8001f98 <HAL_OSPI_MspInit+0xd0>)
 8001f1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f24:	4b1c      	ldr	r3, [pc, #112]	; (8001f98 <HAL_OSPI_MspInit+0xd0>)
 8001f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f2c:	617b      	str	r3, [r7, #20]
 8001f2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001f30:	4b19      	ldr	r3, [pc, #100]	; (8001f98 <HAL_OSPI_MspInit+0xd0>)
 8001f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f34:	4a18      	ldr	r2, [pc, #96]	; (8001f98 <HAL_OSPI_MspInit+0xd0>)
 8001f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f3a:	6513      	str	r3, [r2, #80]	; 0x50
 8001f3c:	4b16      	ldr	r3, [pc, #88]	; (8001f98 <HAL_OSPI_MspInit+0xd0>)
 8001f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f44:	613b      	str	r3, [r7, #16]
 8001f46:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f48:	4b13      	ldr	r3, [pc, #76]	; (8001f98 <HAL_OSPI_MspInit+0xd0>)
 8001f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4c:	4a12      	ldr	r2, [pc, #72]	; (8001f98 <HAL_OSPI_MspInit+0xd0>)
 8001f4e:	f043 0310 	orr.w	r3, r3, #16
 8001f52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f54:	4b10      	ldr	r3, [pc, #64]	; (8001f98 <HAL_OSPI_MspInit+0xd0>)
 8001f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f58:	f003 0310 	and.w	r3, r3, #16
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001f60:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001f64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f74:	2303      	movs	r3, #3
 8001f76:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001f7a:	230a      	movs	r3, #10
 8001f7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f80:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f84:	4619      	mov	r1, r3
 8001f86:	4805      	ldr	r0, [pc, #20]	; (8001f9c <HAL_OSPI_MspInit+0xd4>)
 8001f88:	f002 f8cc 	bl	8004124 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8001f8c:	bf00      	nop
 8001f8e:	37c0      	adds	r7, #192	; 0xc0
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	a0001000 	.word	0xa0001000
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	48001000 	.word	0x48001000

08001fa0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08c      	sub	sp, #48	; 0x30
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa8:	f107 031c 	add.w	r3, r7, #28
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
 8001fb4:	60da      	str	r2, [r3, #12]
 8001fb6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a2f      	ldr	r2, [pc, #188]	; (800207c <HAL_SPI_MspInit+0xdc>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d129      	bne.n	8002016 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fc2:	4b2f      	ldr	r3, [pc, #188]	; (8002080 <HAL_SPI_MspInit+0xe0>)
 8001fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fc6:	4a2e      	ldr	r2, [pc, #184]	; (8002080 <HAL_SPI_MspInit+0xe0>)
 8001fc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fcc:	6613      	str	r3, [r2, #96]	; 0x60
 8001fce:	4b2c      	ldr	r3, [pc, #176]	; (8002080 <HAL_SPI_MspInit+0xe0>)
 8001fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fd6:	61bb      	str	r3, [r7, #24]
 8001fd8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fda:	4b29      	ldr	r3, [pc, #164]	; (8002080 <HAL_SPI_MspInit+0xe0>)
 8001fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fde:	4a28      	ldr	r2, [pc, #160]	; (8002080 <HAL_SPI_MspInit+0xe0>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fe6:	4b26      	ldr	r3, [pc, #152]	; (8002080 <HAL_SPI_MspInit+0xe0>)
 8001fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001ff2:	23e0      	movs	r3, #224	; 0xe0
 8001ff4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffe:	2303      	movs	r3, #3
 8002000:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002002:	2305      	movs	r3, #5
 8002004:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002006:	f107 031c 	add.w	r3, r7, #28
 800200a:	4619      	mov	r1, r3
 800200c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002010:	f002 f888 	bl	8004124 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002014:	e02d      	b.n	8002072 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a1a      	ldr	r2, [pc, #104]	; (8002084 <HAL_SPI_MspInit+0xe4>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d128      	bne.n	8002072 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002020:	4b17      	ldr	r3, [pc, #92]	; (8002080 <HAL_SPI_MspInit+0xe0>)
 8002022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002024:	4a16      	ldr	r2, [pc, #88]	; (8002080 <HAL_SPI_MspInit+0xe0>)
 8002026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800202a:	6593      	str	r3, [r2, #88]	; 0x58
 800202c:	4b14      	ldr	r3, [pc, #80]	; (8002080 <HAL_SPI_MspInit+0xe0>)
 800202e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002030:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002034:	613b      	str	r3, [r7, #16]
 8002036:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002038:	4b11      	ldr	r3, [pc, #68]	; (8002080 <HAL_SPI_MspInit+0xe0>)
 800203a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203c:	4a10      	ldr	r2, [pc, #64]	; (8002080 <HAL_SPI_MspInit+0xe0>)
 800203e:	f043 0304 	orr.w	r3, r3, #4
 8002042:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002044:	4b0e      	ldr	r3, [pc, #56]	; (8002080 <HAL_SPI_MspInit+0xe0>)
 8002046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8002050:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002056:	2302      	movs	r3, #2
 8002058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205e:	2303      	movs	r3, #3
 8002060:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002062:	2306      	movs	r3, #6
 8002064:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002066:	f107 031c 	add.w	r3, r7, #28
 800206a:	4619      	mov	r1, r3
 800206c:	4806      	ldr	r0, [pc, #24]	; (8002088 <HAL_SPI_MspInit+0xe8>)
 800206e:	f002 f859 	bl	8004124 <HAL_GPIO_Init>
}
 8002072:	bf00      	nop
 8002074:	3730      	adds	r7, #48	; 0x30
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40013000 	.word	0x40013000
 8002080:	40021000 	.word	0x40021000
 8002084:	40003c00 	.word	0x40003c00
 8002088:	48000800 	.word	0x48000800

0800208c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a0a      	ldr	r2, [pc, #40]	; (80020c4 <HAL_TIM_Base_MspInit+0x38>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d10b      	bne.n	80020b6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800209e:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <HAL_TIM_Base_MspInit+0x3c>)
 80020a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020a2:	4a09      	ldr	r2, [pc, #36]	; (80020c8 <HAL_TIM_Base_MspInit+0x3c>)
 80020a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020a8:	6613      	str	r3, [r2, #96]	; 0x60
 80020aa:	4b07      	ldr	r3, [pc, #28]	; (80020c8 <HAL_TIM_Base_MspInit+0x3c>)
 80020ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80020b6:	bf00      	nop
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40012c00 	.word	0x40012c00
 80020c8:	40021000 	.word	0x40021000

080020cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b088      	sub	sp, #32
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d4:	f107 030c 	add.w	r3, r7, #12
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	60da      	str	r2, [r3, #12]
 80020e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a11      	ldr	r2, [pc, #68]	; (8002130 <HAL_TIM_MspPostInit+0x64>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d11c      	bne.n	8002128 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ee:	4b11      	ldr	r3, [pc, #68]	; (8002134 <HAL_TIM_MspPostInit+0x68>)
 80020f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f2:	4a10      	ldr	r2, [pc, #64]	; (8002134 <HAL_TIM_MspPostInit+0x68>)
 80020f4:	f043 0302 	orr.w	r3, r3, #2
 80020f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020fa:	4b0e      	ldr	r3, [pc, #56]	; (8002134 <HAL_TIM_MspPostInit+0x68>)
 80020fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	60bb      	str	r3, [r7, #8]
 8002104:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB14     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002106:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800210a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210c:	2302      	movs	r3, #2
 800210e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002114:	2300      	movs	r3, #0
 8002116:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002118:	2301      	movs	r3, #1
 800211a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800211c:	f107 030c 	add.w	r3, r7, #12
 8002120:	4619      	mov	r1, r3
 8002122:	4805      	ldr	r0, [pc, #20]	; (8002138 <HAL_TIM_MspPostInit+0x6c>)
 8002124:	f001 fffe 	bl	8004124 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002128:	bf00      	nop
 800212a:	3720      	adds	r7, #32
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40012c00 	.word	0x40012c00
 8002134:	40021000 	.word	0x40021000
 8002138:	48000400 	.word	0x48000400

0800213c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b0b4      	sub	sp, #208	; 0xd0
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002144:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	60da      	str	r2, [r3, #12]
 8002152:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002154:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002158:	2294      	movs	r2, #148	; 0x94
 800215a:	2100      	movs	r1, #0
 800215c:	4618      	mov	r0, r3
 800215e:	f006 fe0b 	bl	8008d78 <memset>
  if(huart->Instance==UART4)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a83      	ldr	r2, [pc, #524]	; (8002374 <HAL_UART_MspInit+0x238>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d13c      	bne.n	80021e6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800216c:	2308      	movs	r3, #8
 800216e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002170:	2300      	movs	r3, #0
 8002172:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002174:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002178:	4618      	mov	r0, r3
 800217a:	f003 ff55 	bl	8006028 <HAL_RCCEx_PeriphCLKConfig>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002184:	f7ff fd02 	bl	8001b8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002188:	4b7b      	ldr	r3, [pc, #492]	; (8002378 <HAL_UART_MspInit+0x23c>)
 800218a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218c:	4a7a      	ldr	r2, [pc, #488]	; (8002378 <HAL_UART_MspInit+0x23c>)
 800218e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002192:	6593      	str	r3, [r2, #88]	; 0x58
 8002194:	4b78      	ldr	r3, [pc, #480]	; (8002378 <HAL_UART_MspInit+0x23c>)
 8002196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002198:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800219c:	627b      	str	r3, [r7, #36]	; 0x24
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a0:	4b75      	ldr	r3, [pc, #468]	; (8002378 <HAL_UART_MspInit+0x23c>)
 80021a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a4:	4a74      	ldr	r2, [pc, #464]	; (8002378 <HAL_UART_MspInit+0x23c>)
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ac:	4b72      	ldr	r3, [pc, #456]	; (8002378 <HAL_UART_MspInit+0x23c>)
 80021ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	623b      	str	r3, [r7, #32]
 80021b6:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80021b8:	2303      	movs	r3, #3
 80021ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021be:	2302      	movs	r3, #2
 80021c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ca:	2303      	movs	r3, #3
 80021cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80021d0:	2308      	movs	r3, #8
 80021d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80021da:	4619      	mov	r1, r3
 80021dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021e0:	f001 ffa0 	bl	8004124 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80021e4:	e0c2      	b.n	800236c <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART1)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a64      	ldr	r2, [pc, #400]	; (800237c <HAL_UART_MspInit+0x240>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d13b      	bne.n	8002268 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80021f0:	2301      	movs	r3, #1
 80021f2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80021f4:	2300      	movs	r3, #0
 80021f6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021fc:	4618      	mov	r0, r3
 80021fe:	f003 ff13 	bl	8006028 <HAL_RCCEx_PeriphCLKConfig>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8002208:	f7ff fcc0 	bl	8001b8c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800220c:	4b5a      	ldr	r3, [pc, #360]	; (8002378 <HAL_UART_MspInit+0x23c>)
 800220e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002210:	4a59      	ldr	r2, [pc, #356]	; (8002378 <HAL_UART_MspInit+0x23c>)
 8002212:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002216:	6613      	str	r3, [r2, #96]	; 0x60
 8002218:	4b57      	ldr	r3, [pc, #348]	; (8002378 <HAL_UART_MspInit+0x23c>)
 800221a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800221c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002220:	61fb      	str	r3, [r7, #28]
 8002222:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002224:	4b54      	ldr	r3, [pc, #336]	; (8002378 <HAL_UART_MspInit+0x23c>)
 8002226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002228:	4a53      	ldr	r2, [pc, #332]	; (8002378 <HAL_UART_MspInit+0x23c>)
 800222a:	f043 0302 	orr.w	r3, r3, #2
 800222e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002230:	4b51      	ldr	r3, [pc, #324]	; (8002378 <HAL_UART_MspInit+0x23c>)
 8002232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	61bb      	str	r3, [r7, #24]
 800223a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800223c:	23c0      	movs	r3, #192	; 0xc0
 800223e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002242:	2302      	movs	r3, #2
 8002244:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800224e:	2303      	movs	r3, #3
 8002250:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002254:	2307      	movs	r3, #7
 8002256:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800225a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800225e:	4619      	mov	r1, r3
 8002260:	4847      	ldr	r0, [pc, #284]	; (8002380 <HAL_UART_MspInit+0x244>)
 8002262:	f001 ff5f 	bl	8004124 <HAL_GPIO_Init>
}
 8002266:	e081      	b.n	800236c <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a45      	ldr	r2, [pc, #276]	; (8002384 <HAL_UART_MspInit+0x248>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d13b      	bne.n	80022ea <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002272:	2302      	movs	r3, #2
 8002274:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002276:	2300      	movs	r3, #0
 8002278:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800227a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800227e:	4618      	mov	r0, r3
 8002280:	f003 fed2 	bl	8006028 <HAL_RCCEx_PeriphCLKConfig>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <HAL_UART_MspInit+0x152>
      Error_Handler();
 800228a:	f7ff fc7f 	bl	8001b8c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800228e:	4b3a      	ldr	r3, [pc, #232]	; (8002378 <HAL_UART_MspInit+0x23c>)
 8002290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002292:	4a39      	ldr	r2, [pc, #228]	; (8002378 <HAL_UART_MspInit+0x23c>)
 8002294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002298:	6593      	str	r3, [r2, #88]	; 0x58
 800229a:	4b37      	ldr	r3, [pc, #220]	; (8002378 <HAL_UART_MspInit+0x23c>)
 800229c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022a6:	4b34      	ldr	r3, [pc, #208]	; (8002378 <HAL_UART_MspInit+0x23c>)
 80022a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022aa:	4a33      	ldr	r2, [pc, #204]	; (8002378 <HAL_UART_MspInit+0x23c>)
 80022ac:	f043 0308 	orr.w	r3, r3, #8
 80022b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022b2:	4b31      	ldr	r3, [pc, #196]	; (8002378 <HAL_UART_MspInit+0x23c>)
 80022b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	613b      	str	r3, [r7, #16]
 80022bc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80022be:	2378      	movs	r3, #120	; 0x78
 80022c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c4:	2302      	movs	r3, #2
 80022c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d0:	2303      	movs	r3, #3
 80022d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022d6:	2307      	movs	r3, #7
 80022d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022dc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80022e0:	4619      	mov	r1, r3
 80022e2:	4829      	ldr	r0, [pc, #164]	; (8002388 <HAL_UART_MspInit+0x24c>)
 80022e4:	f001 ff1e 	bl	8004124 <HAL_GPIO_Init>
}
 80022e8:	e040      	b.n	800236c <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART3)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a27      	ldr	r2, [pc, #156]	; (800238c <HAL_UART_MspInit+0x250>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d13b      	bne.n	800236c <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80022f4:	2304      	movs	r3, #4
 80022f6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80022f8:	2300      	movs	r3, #0
 80022fa:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002300:	4618      	mov	r0, r3
 8002302:	f003 fe91 	bl	8006028 <HAL_RCCEx_PeriphCLKConfig>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 800230c:	f7ff fc3e 	bl	8001b8c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002310:	4b19      	ldr	r3, [pc, #100]	; (8002378 <HAL_UART_MspInit+0x23c>)
 8002312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002314:	4a18      	ldr	r2, [pc, #96]	; (8002378 <HAL_UART_MspInit+0x23c>)
 8002316:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800231a:	6593      	str	r3, [r2, #88]	; 0x58
 800231c:	4b16      	ldr	r3, [pc, #88]	; (8002378 <HAL_UART_MspInit+0x23c>)
 800231e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002320:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002328:	4b13      	ldr	r3, [pc, #76]	; (8002378 <HAL_UART_MspInit+0x23c>)
 800232a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232c:	4a12      	ldr	r2, [pc, #72]	; (8002378 <HAL_UART_MspInit+0x23c>)
 800232e:	f043 0308 	orr.w	r3, r3, #8
 8002332:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002334:	4b10      	ldr	r3, [pc, #64]	; (8002378 <HAL_UART_MspInit+0x23c>)
 8002336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8002340:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002344:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002348:	2302      	movs	r3, #2
 800234a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234e:	2300      	movs	r3, #0
 8002350:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002354:	2303      	movs	r3, #3
 8002356:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800235a:	2307      	movs	r3, #7
 800235c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002360:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002364:	4619      	mov	r1, r3
 8002366:	4808      	ldr	r0, [pc, #32]	; (8002388 <HAL_UART_MspInit+0x24c>)
 8002368:	f001 fedc 	bl	8004124 <HAL_GPIO_Init>
}
 800236c:	bf00      	nop
 800236e:	37d0      	adds	r7, #208	; 0xd0
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40004c00 	.word	0x40004c00
 8002378:	40021000 	.word	0x40021000
 800237c:	40013800 	.word	0x40013800
 8002380:	48000400 	.word	0x48000400
 8002384:	40004400 	.word	0x40004400
 8002388:	48000c00 	.word	0x48000c00
 800238c:	40004800 	.word	0x40004800

08002390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002394:	e7fe      	b.n	8002394 <NMI_Handler+0x4>

08002396 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002396:	b480      	push	{r7}
 8002398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800239a:	e7fe      	b.n	800239a <HardFault_Handler+0x4>

0800239c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023a0:	e7fe      	b.n	80023a0 <MemManage_Handler+0x4>

080023a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023a2:	b480      	push	{r7}
 80023a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023a6:	e7fe      	b.n	80023a6 <BusFault_Handler+0x4>

080023a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023ac:	e7fe      	b.n	80023ac <UsageFault_Handler+0x4>

080023ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023ae:	b480      	push	{r7}
 80023b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023b2:	bf00      	nop
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023dc:	f000 f900 	bl	80025e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023e0:	bf00      	nop
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80023e8:	4802      	ldr	r0, [pc, #8]	; (80023f4 <DMA1_Channel1_IRQHandler+0x10>)
 80023ea:	f001 fd4c 	bl	8003e86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	200000e0 	.word	0x200000e0

080023f8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80023fc:	2020      	movs	r0, #32
 80023fe:	f002 f83b 	bl	8004478 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8002402:	2040      	movs	r0, #64	; 0x40
 8002404:	f002 f838 	bl	8004478 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8002408:	2080      	movs	r0, #128	; 0x80
 800240a:	f002 f835 	bl	8004478 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800240e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002412:	f002 f831 	bl	8004478 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}

0800241a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 800241e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002422:	f002 f829 	bl	8004478 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8002426:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800242a:	f002 f825 	bl	8004478 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 800242e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002432:	f002 f821 	bl	8004478 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8002436:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800243a:	f002 f81d 	bl	8004478 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800243e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002442:	f002 f819 	bl	8004478 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8002446:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800244a:	f002 f815 	bl	8004478 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
	...

08002454 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800245c:	4a14      	ldr	r2, [pc, #80]	; (80024b0 <_sbrk+0x5c>)
 800245e:	4b15      	ldr	r3, [pc, #84]	; (80024b4 <_sbrk+0x60>)
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002468:	4b13      	ldr	r3, [pc, #76]	; (80024b8 <_sbrk+0x64>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d102      	bne.n	8002476 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002470:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <_sbrk+0x64>)
 8002472:	4a12      	ldr	r2, [pc, #72]	; (80024bc <_sbrk+0x68>)
 8002474:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002476:	4b10      	ldr	r3, [pc, #64]	; (80024b8 <_sbrk+0x64>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4413      	add	r3, r2
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	429a      	cmp	r2, r3
 8002482:	d207      	bcs.n	8002494 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002484:	f006 fc80 	bl	8008d88 <__errno>
 8002488:	4603      	mov	r3, r0
 800248a:	220c      	movs	r2, #12
 800248c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800248e:	f04f 33ff 	mov.w	r3, #4294967295
 8002492:	e009      	b.n	80024a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002494:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <_sbrk+0x64>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800249a:	4b07      	ldr	r3, [pc, #28]	; (80024b8 <_sbrk+0x64>)
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4413      	add	r3, r2
 80024a2:	4a05      	ldr	r2, [pc, #20]	; (80024b8 <_sbrk+0x64>)
 80024a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024a6:	68fb      	ldr	r3, [r7, #12]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	200a0000 	.word	0x200a0000
 80024b4:	00000400 	.word	0x00000400
 80024b8:	200005e0 	.word	0x200005e0
 80024bc:	20000758 	.word	0x20000758

080024c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80024c4:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <SystemInit+0x20>)
 80024c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ca:	4a05      	ldr	r2, [pc, #20]	; (80024e0 <SystemInit+0x20>)
 80024cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80024d4:	bf00      	nop
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	e000ed00 	.word	0xe000ed00

080024e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80024e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800251c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024e8:	f7ff ffea 	bl	80024c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024ec:	480c      	ldr	r0, [pc, #48]	; (8002520 <LoopForever+0x6>)
  ldr r1, =_edata
 80024ee:	490d      	ldr	r1, [pc, #52]	; (8002524 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024f0:	4a0d      	ldr	r2, [pc, #52]	; (8002528 <LoopForever+0xe>)
  movs r3, #0
 80024f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024f4:	e002      	b.n	80024fc <LoopCopyDataInit>

080024f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024fa:	3304      	adds	r3, #4

080024fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002500:	d3f9      	bcc.n	80024f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002502:	4a0a      	ldr	r2, [pc, #40]	; (800252c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002504:	4c0a      	ldr	r4, [pc, #40]	; (8002530 <LoopForever+0x16>)
  movs r3, #0
 8002506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002508:	e001      	b.n	800250e <LoopFillZerobss>

0800250a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800250a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800250c:	3204      	adds	r2, #4

0800250e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800250e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002510:	d3fb      	bcc.n	800250a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002512:	f006 fc3f 	bl	8008d94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002516:	f7fe fc8f 	bl	8000e38 <main>

0800251a <LoopForever>:

LoopForever:
    b LoopForever
 800251a:	e7fe      	b.n	800251a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800251c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002520:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002524:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002528:	08009804 	.word	0x08009804
  ldr r2, =_sbss
 800252c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002530:	20000754 	.word	0x20000754

08002534 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002534:	e7fe      	b.n	8002534 <ADC1_IRQHandler>

08002536 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800253c:	2300      	movs	r3, #0
 800253e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002540:	2003      	movs	r0, #3
 8002542:	f001 fa2f 	bl	80039a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002546:	2000      	movs	r0, #0
 8002548:	f000 f80e 	bl	8002568 <HAL_InitTick>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d002      	beq.n	8002558 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	71fb      	strb	r3, [r7, #7]
 8002556:	e001      	b.n	800255c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002558:	f7ff fb1e 	bl	8001b98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800255c:	79fb      	ldrb	r3, [r7, #7]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002570:	2300      	movs	r3, #0
 8002572:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002574:	4b17      	ldr	r3, [pc, #92]	; (80025d4 <HAL_InitTick+0x6c>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d023      	beq.n	80025c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800257c:	4b16      	ldr	r3, [pc, #88]	; (80025d8 <HAL_InitTick+0x70>)
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	4b14      	ldr	r3, [pc, #80]	; (80025d4 <HAL_InitTick+0x6c>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	4619      	mov	r1, r3
 8002586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800258a:	fbb3 f3f1 	udiv	r3, r3, r1
 800258e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002592:	4618      	mov	r0, r3
 8002594:	f001 fa3b 	bl	8003a0e <HAL_SYSTICK_Config>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10f      	bne.n	80025be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b0f      	cmp	r3, #15
 80025a2:	d809      	bhi.n	80025b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025a4:	2200      	movs	r2, #0
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	f04f 30ff 	mov.w	r0, #4294967295
 80025ac:	f001 fa05 	bl	80039ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025b0:	4a0a      	ldr	r2, [pc, #40]	; (80025dc <HAL_InitTick+0x74>)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	e007      	b.n	80025c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	73fb      	strb	r3, [r7, #15]
 80025bc:	e004      	b.n	80025c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	73fb      	strb	r3, [r7, #15]
 80025c2:	e001      	b.n	80025c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	20000008 	.word	0x20000008
 80025d8:	20000000 	.word	0x20000000
 80025dc:	20000004 	.word	0x20000004

080025e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025e4:	4b06      	ldr	r3, [pc, #24]	; (8002600 <HAL_IncTick+0x20>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	461a      	mov	r2, r3
 80025ea:	4b06      	ldr	r3, [pc, #24]	; (8002604 <HAL_IncTick+0x24>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4413      	add	r3, r2
 80025f0:	4a04      	ldr	r2, [pc, #16]	; (8002604 <HAL_IncTick+0x24>)
 80025f2:	6013      	str	r3, [r2, #0]
}
 80025f4:	bf00      	nop
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	20000008 	.word	0x20000008
 8002604:	200005e4 	.word	0x200005e4

08002608 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  return uwTick;
 800260c:	4b03      	ldr	r3, [pc, #12]	; (800261c <HAL_GetTick+0x14>)
 800260e:	681b      	ldr	r3, [r3, #0]
}
 8002610:	4618      	mov	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	200005e4 	.word	0x200005e4

08002620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002628:	f7ff ffee 	bl	8002608 <HAL_GetTick>
 800262c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002638:	d005      	beq.n	8002646 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800263a:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <HAL_Delay+0x44>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	461a      	mov	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4413      	add	r3, r2
 8002644:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002646:	bf00      	nop
 8002648:	f7ff ffde 	bl	8002608 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	429a      	cmp	r2, r3
 8002656:	d8f7      	bhi.n	8002648 <HAL_Delay+0x28>
  {
  }
}
 8002658:	bf00      	nop
 800265a:	bf00      	nop
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	20000008 	.word	0x20000008

08002668 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	431a      	orrs	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	609a      	str	r2, [r3, #8]
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
 8002696:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	609a      	str	r2, [r3, #8]
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b087      	sub	sp, #28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
 80026dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	3360      	adds	r3, #96	; 0x60
 80026e2:	461a      	mov	r2, r3
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	4b08      	ldr	r3, [pc, #32]	; (8002714 <LL_ADC_SetOffset+0x44>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	430a      	orrs	r2, r1
 80026fe:	4313      	orrs	r3, r2
 8002700:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002708:	bf00      	nop
 800270a:	371c      	adds	r7, #28
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	03fff000 	.word	0x03fff000

08002718 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	3360      	adds	r3, #96	; 0x60
 8002726:	461a      	mov	r2, r3
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002738:	4618      	mov	r0, r3
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002744:	b480      	push	{r7}
 8002746:	b087      	sub	sp, #28
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	3360      	adds	r3, #96	; 0x60
 8002754:	461a      	mov	r2, r3
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4413      	add	r3, r2
 800275c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	431a      	orrs	r2, r3
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800276e:	bf00      	nop
 8002770:	371c      	adds	r7, #28
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
 8002782:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	431a      	orrs	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	615a      	str	r2, [r3, #20]
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80027b4:	2301      	movs	r3, #1
 80027b6:	e000      	b.n	80027ba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b087      	sub	sp, #28
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	60f8      	str	r0, [r7, #12]
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	3330      	adds	r3, #48	; 0x30
 80027d6:	461a      	mov	r2, r3
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	0a1b      	lsrs	r3, r3, #8
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	f003 030c 	and.w	r3, r3, #12
 80027e2:	4413      	add	r3, r2
 80027e4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	f003 031f 	and.w	r3, r3, #31
 80027f0:	211f      	movs	r1, #31
 80027f2:	fa01 f303 	lsl.w	r3, r1, r3
 80027f6:	43db      	mvns	r3, r3
 80027f8:	401a      	ands	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	0e9b      	lsrs	r3, r3, #26
 80027fe:	f003 011f 	and.w	r1, r3, #31
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	f003 031f 	and.w	r3, r3, #31
 8002808:	fa01 f303 	lsl.w	r3, r1, r3
 800280c:	431a      	orrs	r2, r3
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002812:	bf00      	nop
 8002814:	371c      	adds	r7, #28
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800281e:	b480      	push	{r7}
 8002820:	b087      	sub	sp, #28
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	3314      	adds	r3, #20
 800282e:	461a      	mov	r2, r3
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	0e5b      	lsrs	r3, r3, #25
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	f003 0304 	and.w	r3, r3, #4
 800283a:	4413      	add	r3, r2
 800283c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	0d1b      	lsrs	r3, r3, #20
 8002846:	f003 031f 	and.w	r3, r3, #31
 800284a:	2107      	movs	r1, #7
 800284c:	fa01 f303 	lsl.w	r3, r1, r3
 8002850:	43db      	mvns	r3, r3
 8002852:	401a      	ands	r2, r3
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	0d1b      	lsrs	r3, r3, #20
 8002858:	f003 031f 	and.w	r3, r3, #31
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	fa01 f303 	lsl.w	r3, r1, r3
 8002862:	431a      	orrs	r2, r3
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002868:	bf00      	nop
 800286a:	371c      	adds	r7, #28
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800288c:	43db      	mvns	r3, r3
 800288e:	401a      	ands	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f003 0318 	and.w	r3, r3, #24
 8002896:	4908      	ldr	r1, [pc, #32]	; (80028b8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002898:	40d9      	lsrs	r1, r3
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	400b      	ands	r3, r1
 800289e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a2:	431a      	orrs	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80028aa:	bf00      	nop
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	0007ffff 	.word	0x0007ffff

080028bc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80028cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6093      	str	r3, [r2, #8]
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028f4:	d101      	bne.n	80028fa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80028f6:	2301      	movs	r3, #1
 80028f8:	e000      	b.n	80028fc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002918:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800291c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002940:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002944:	d101      	bne.n	800294a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002946:	2301      	movs	r3, #1
 8002948:	e000      	b.n	800294c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002968:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800296c:	f043 0201 	orr.w	r2, r3, #1
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	2b01      	cmp	r3, #1
 8002992:	d101      	bne.n	8002998 <LL_ADC_IsEnabled+0x18>
 8002994:	2301      	movs	r3, #1
 8002996:	e000      	b.n	800299a <LL_ADC_IsEnabled+0x1a>
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029ba:	f043 0204 	orr.w	r2, r3, #4
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 0304 	and.w	r3, r3, #4
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d101      	bne.n	80029e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80029e2:	2301      	movs	r3, #1
 80029e4:	e000      	b.n	80029e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f003 0308 	and.w	r3, r3, #8
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	d101      	bne.n	8002a0c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e000      	b.n	8002a0e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
	...

08002a1c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b088      	sub	sp, #32
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a24:	2300      	movs	r3, #0
 8002a26:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e129      	b.n	8002c8a <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d109      	bne.n	8002a58 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7ff f8cb 	bl	8001be0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff ff3f 	bl	80028e0 <LL_ADC_IsDeepPowerDownEnabled>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d004      	beq.n	8002a72 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff ff25 	bl	80028bc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff ff5a 	bl	8002930 <LL_ADC_IsInternalRegulatorEnabled>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d115      	bne.n	8002aae <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff ff3e 	bl	8002908 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a8c:	4b81      	ldr	r3, [pc, #516]	; (8002c94 <HAL_ADC_Init+0x278>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	099b      	lsrs	r3, r3, #6
 8002a92:	4a81      	ldr	r2, [pc, #516]	; (8002c98 <HAL_ADC_Init+0x27c>)
 8002a94:	fba2 2303 	umull	r2, r3, r2, r3
 8002a98:	099b      	lsrs	r3, r3, #6
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002aa0:	e002      	b.n	8002aa8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f9      	bne.n	8002aa2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff ff3c 	bl	8002930 <LL_ADC_IsInternalRegulatorEnabled>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10d      	bne.n	8002ada <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac2:	f043 0210 	orr.w	r2, r3, #16
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ace:	f043 0201 	orr.w	r2, r3, #1
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff ff75 	bl	80029ce <LL_ADC_REG_IsConversionOngoing>
 8002ae4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aea:	f003 0310 	and.w	r3, r3, #16
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f040 80c2 	bne.w	8002c78 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f040 80be 	bne.w	8002c78 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b00:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002b04:	f043 0202 	orr.w	r2, r3, #2
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff ff35 	bl	8002980 <LL_ADC_IsEnabled>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10b      	bne.n	8002b34 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b1c:	485f      	ldr	r0, [pc, #380]	; (8002c9c <HAL_ADC_Init+0x280>)
 8002b1e:	f7ff ff2f 	bl	8002980 <LL_ADC_IsEnabled>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d105      	bne.n	8002b34 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	485c      	ldr	r0, [pc, #368]	; (8002ca0 <HAL_ADC_Init+0x284>)
 8002b30:	f7ff fd9a 	bl	8002668 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	7e5b      	ldrb	r3, [r3, #25]
 8002b38:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b3e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002b44:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002b4a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b52:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b54:	4313      	orrs	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d106      	bne.n	8002b70 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	3b01      	subs	r3, #1
 8002b68:	045b      	lsls	r3, r3, #17
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d009      	beq.n	8002b8c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b84:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68da      	ldr	r2, [r3, #12]
 8002b92:	4b44      	ldr	r3, [pc, #272]	; (8002ca4 <HAL_ADC_Init+0x288>)
 8002b94:	4013      	ands	r3, r2
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6812      	ldr	r2, [r2, #0]
 8002b9a:	69b9      	ldr	r1, [r7, #24]
 8002b9c:	430b      	orrs	r3, r1
 8002b9e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff ff25 	bl	80029f4 <LL_ADC_INJ_IsConversionOngoing>
 8002baa:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d140      	bne.n	8002c34 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d13d      	bne.n	8002c34 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	7e1b      	ldrb	r3, [r3, #24]
 8002bc0:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002bc2:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002bca:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bda:	f023 0306 	bic.w	r3, r3, #6
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6812      	ldr	r2, [r2, #0]
 8002be2:	69b9      	ldr	r1, [r7, #24]
 8002be4:	430b      	orrs	r3, r1
 8002be6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d118      	bne.n	8002c24 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002bfc:	f023 0304 	bic.w	r3, r3, #4
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c08:	4311      	orrs	r1, r2
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002c0e:	4311      	orrs	r1, r2
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c14:	430a      	orrs	r2, r1
 8002c16:	431a      	orrs	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f042 0201 	orr.w	r2, r2, #1
 8002c20:	611a      	str	r2, [r3, #16]
 8002c22:	e007      	b.n	8002c34 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	691a      	ldr	r2, [r3, #16]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 0201 	bic.w	r2, r2, #1
 8002c32:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d10c      	bne.n	8002c56 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	f023 010f 	bic.w	r1, r3, #15
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	1e5a      	subs	r2, r3, #1
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	430a      	orrs	r2, r1
 8002c52:	631a      	str	r2, [r3, #48]	; 0x30
 8002c54:	e007      	b.n	8002c66 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 020f 	bic.w	r2, r2, #15
 8002c64:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6a:	f023 0303 	bic.w	r3, r3, #3
 8002c6e:	f043 0201 	orr.w	r2, r3, #1
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	659a      	str	r2, [r3, #88]	; 0x58
 8002c76:	e007      	b.n	8002c88 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7c:	f043 0210 	orr.w	r2, r3, #16
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c88:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3720      	adds	r7, #32
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	20000000 	.word	0x20000000
 8002c98:	053e2d63 	.word	0x053e2d63
 8002c9c:	50040000 	.word	0x50040000
 8002ca0:	50040300 	.word	0x50040300
 8002ca4:	fff0c007 	.word	0xfff0c007

08002ca8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff fe88 	bl	80029ce <LL_ADC_REG_IsConversionOngoing>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d167      	bne.n	8002d94 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d101      	bne.n	8002cd2 <HAL_ADC_Start_DMA+0x2a>
 8002cce:	2302      	movs	r3, #2
 8002cd0:	e063      	b.n	8002d9a <HAL_ADC_Start_DMA+0xf2>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 fc78 	bl	80035d0 <ADC_Enable>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002ce4:	7dfb      	ldrb	r3, [r7, #23]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d14f      	bne.n	8002d8a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002cf2:	f023 0301 	bic.w	r3, r3, #1
 8002cf6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d006      	beq.n	8002d18 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0e:	f023 0206 	bic.w	r2, r3, #6
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d16:	e002      	b.n	8002d1e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d22:	4a20      	ldr	r2, [pc, #128]	; (8002da4 <HAL_ADC_Start_DMA+0xfc>)
 8002d24:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d2a:	4a1f      	ldr	r2, [pc, #124]	; (8002da8 <HAL_ADC_Start_DMA+0x100>)
 8002d2c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d32:	4a1e      	ldr	r2, [pc, #120]	; (8002dac <HAL_ADC_Start_DMA+0x104>)
 8002d34:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	221c      	movs	r2, #28
 8002d3c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f042 0210 	orr.w	r2, r2, #16
 8002d54:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68da      	ldr	r2, [r3, #12]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f042 0201 	orr.w	r2, r2, #1
 8002d64:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	3340      	adds	r3, #64	; 0x40
 8002d70:	4619      	mov	r1, r3
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f001 f80b 	bl	8003d90 <HAL_DMA_Start_IT>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff fe0f 	bl	80029a6 <LL_ADC_REG_StartConversion>
 8002d88:	e006      	b.n	8002d98 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002d92:	e001      	b.n	8002d98 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d94:	2302      	movs	r3, #2
 8002d96:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	080036dd 	.word	0x080036dd
 8002da8:	080037b5 	.word	0x080037b5
 8002dac:	080037d1 	.word	0x080037d1

08002db0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b0b6      	sub	sp, #216	; 0xd8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002de2:	2300      	movs	r3, #0
 8002de4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002de8:	2300      	movs	r3, #0
 8002dea:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d101      	bne.n	8002dfa <HAL_ADC_ConfigChannel+0x22>
 8002df6:	2302      	movs	r3, #2
 8002df8:	e3d5      	b.n	80035a6 <HAL_ADC_ConfigChannel+0x7ce>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff fde1 	bl	80029ce <LL_ADC_REG_IsConversionOngoing>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f040 83ba 	bne.w	8003588 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	2b05      	cmp	r3, #5
 8002e22:	d824      	bhi.n	8002e6e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	3b02      	subs	r3, #2
 8002e2a:	2b03      	cmp	r3, #3
 8002e2c:	d81b      	bhi.n	8002e66 <HAL_ADC_ConfigChannel+0x8e>
 8002e2e:	a201      	add	r2, pc, #4	; (adr r2, 8002e34 <HAL_ADC_ConfigChannel+0x5c>)
 8002e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e34:	08002e45 	.word	0x08002e45
 8002e38:	08002e4d 	.word	0x08002e4d
 8002e3c:	08002e55 	.word	0x08002e55
 8002e40:	08002e5d 	.word	0x08002e5d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002e44:	230c      	movs	r3, #12
 8002e46:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002e4a:	e010      	b.n	8002e6e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002e4c:	2312      	movs	r3, #18
 8002e4e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002e52:	e00c      	b.n	8002e6e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002e54:	2318      	movs	r3, #24
 8002e56:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002e5a:	e008      	b.n	8002e6e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002e5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002e64:	e003      	b.n	8002e6e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002e66:	2306      	movs	r3, #6
 8002e68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002e6c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6818      	ldr	r0, [r3, #0]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	461a      	mov	r2, r3
 8002e78:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002e7c:	f7ff fca3 	bl	80027c6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff fda2 	bl	80029ce <LL_ADC_REG_IsConversionOngoing>
 8002e8a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff fdae 	bl	80029f4 <LL_ADC_INJ_IsConversionOngoing>
 8002e98:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f040 81bf 	bne.w	8003224 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ea6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f040 81ba 	bne.w	8003224 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002eb8:	d10f      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6818      	ldr	r0, [r3, #0]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	f7ff fcaa 	bl	800281e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff fc51 	bl	800277a <LL_ADC_SetSamplingTimeCommonConfig>
 8002ed8:	e00e      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6818      	ldr	r0, [r3, #0]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	6819      	ldr	r1, [r3, #0]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	f7ff fc99 	bl	800281e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff fc41 	bl	800277a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	695a      	ldr	r2, [r3, #20]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	08db      	lsrs	r3, r3, #3
 8002f04:	f003 0303 	and.w	r3, r3, #3
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d00a      	beq.n	8002f30 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6818      	ldr	r0, [r3, #0]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	6919      	ldr	r1, [r3, #16]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f2a:	f7ff fbd1 	bl	80026d0 <LL_ADC_SetOffset>
 8002f2e:	e179      	b.n	8003224 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2100      	movs	r1, #0
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7ff fbee 	bl	8002718 <LL_ADC_GetOffsetChannel>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10a      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x184>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff fbe3 	bl	8002718 <LL_ADC_GetOffsetChannel>
 8002f52:	4603      	mov	r3, r0
 8002f54:	0e9b      	lsrs	r3, r3, #26
 8002f56:	f003 021f 	and.w	r2, r3, #31
 8002f5a:	e01e      	b.n	8002f9a <HAL_ADC_ConfigChannel+0x1c2>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2100      	movs	r1, #0
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff fbd8 	bl	8002718 <LL_ADC_GetOffsetChannel>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002f72:	fa93 f3a3 	rbit	r3, r3
 8002f76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f82:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002f8a:	2320      	movs	r3, #32
 8002f8c:	e004      	b.n	8002f98 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002f8e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f92:	fab3 f383 	clz	r3, r3
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d105      	bne.n	8002fb2 <HAL_ADC_ConfigChannel+0x1da>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	0e9b      	lsrs	r3, r3, #26
 8002fac:	f003 031f 	and.w	r3, r3, #31
 8002fb0:	e018      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x20c>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fbe:	fa93 f3a3 	rbit	r3, r3
 8002fc2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002fc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002fca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002fce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002fd6:	2320      	movs	r3, #32
 8002fd8:	e004      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002fda:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002fde:	fab3 f383 	clz	r3, r3
 8002fe2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d106      	bne.n	8002ff6 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2200      	movs	r2, #0
 8002fee:	2100      	movs	r1, #0
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff fba7 	bl	8002744 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff fb8b 	bl	8002718 <LL_ADC_GetOffsetChannel>
 8003002:	4603      	mov	r3, r0
 8003004:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10a      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x24a>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2101      	movs	r1, #1
 8003012:	4618      	mov	r0, r3
 8003014:	f7ff fb80 	bl	8002718 <LL_ADC_GetOffsetChannel>
 8003018:	4603      	mov	r3, r0
 800301a:	0e9b      	lsrs	r3, r3, #26
 800301c:	f003 021f 	and.w	r2, r3, #31
 8003020:	e01e      	b.n	8003060 <HAL_ADC_ConfigChannel+0x288>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2101      	movs	r1, #1
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff fb75 	bl	8002718 <LL_ADC_GetOffsetChannel>
 800302e:	4603      	mov	r3, r0
 8003030:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003034:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003038:	fa93 f3a3 	rbit	r3, r3
 800303c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003040:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003044:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003048:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8003050:	2320      	movs	r3, #32
 8003052:	e004      	b.n	800305e <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8003054:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003058:	fab3 f383 	clz	r3, r3
 800305c:	b2db      	uxtb	r3, r3
 800305e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003068:	2b00      	cmp	r3, #0
 800306a:	d105      	bne.n	8003078 <HAL_ADC_ConfigChannel+0x2a0>
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	0e9b      	lsrs	r3, r3, #26
 8003072:	f003 031f 	and.w	r3, r3, #31
 8003076:	e018      	b.n	80030aa <HAL_ADC_ConfigChannel+0x2d2>
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003080:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003084:	fa93 f3a3 	rbit	r3, r3
 8003088:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800308c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003090:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003094:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 800309c:	2320      	movs	r3, #32
 800309e:	e004      	b.n	80030aa <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80030a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030a4:	fab3 f383 	clz	r3, r3
 80030a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d106      	bne.n	80030bc <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2200      	movs	r2, #0
 80030b4:	2101      	movs	r1, #1
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7ff fb44 	bl	8002744 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2102      	movs	r1, #2
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff fb28 	bl	8002718 <LL_ADC_GetOffsetChannel>
 80030c8:	4603      	mov	r3, r0
 80030ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10a      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x310>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2102      	movs	r1, #2
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff fb1d 	bl	8002718 <LL_ADC_GetOffsetChannel>
 80030de:	4603      	mov	r3, r0
 80030e0:	0e9b      	lsrs	r3, r3, #26
 80030e2:	f003 021f 	and.w	r2, r3, #31
 80030e6:	e01e      	b.n	8003126 <HAL_ADC_ConfigChannel+0x34e>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2102      	movs	r1, #2
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7ff fb12 	bl	8002718 <LL_ADC_GetOffsetChannel>
 80030f4:	4603      	mov	r3, r0
 80030f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030fe:	fa93 f3a3 	rbit	r3, r3
 8003102:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003106:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800310a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800310e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8003116:	2320      	movs	r3, #32
 8003118:	e004      	b.n	8003124 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800311a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800311e:	fab3 f383 	clz	r3, r3
 8003122:	b2db      	uxtb	r3, r3
 8003124:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800312e:	2b00      	cmp	r3, #0
 8003130:	d105      	bne.n	800313e <HAL_ADC_ConfigChannel+0x366>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	0e9b      	lsrs	r3, r3, #26
 8003138:	f003 031f 	and.w	r3, r3, #31
 800313c:	e014      	b.n	8003168 <HAL_ADC_ConfigChannel+0x390>
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003144:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003146:	fa93 f3a3 	rbit	r3, r3
 800314a:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800314c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800314e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003152:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800315a:	2320      	movs	r3, #32
 800315c:	e004      	b.n	8003168 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800315e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003162:	fab3 f383 	clz	r3, r3
 8003166:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003168:	429a      	cmp	r2, r3
 800316a:	d106      	bne.n	800317a <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2200      	movs	r2, #0
 8003172:	2102      	movs	r1, #2
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff fae5 	bl	8002744 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2103      	movs	r1, #3
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff fac9 	bl	8002718 <LL_ADC_GetOffsetChannel>
 8003186:	4603      	mov	r3, r0
 8003188:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10a      	bne.n	80031a6 <HAL_ADC_ConfigChannel+0x3ce>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2103      	movs	r1, #3
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff fabe 	bl	8002718 <LL_ADC_GetOffsetChannel>
 800319c:	4603      	mov	r3, r0
 800319e:	0e9b      	lsrs	r3, r3, #26
 80031a0:	f003 021f 	and.w	r2, r3, #31
 80031a4:	e017      	b.n	80031d6 <HAL_ADC_ConfigChannel+0x3fe>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2103      	movs	r1, #3
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff fab3 	bl	8002718 <LL_ADC_GetOffsetChannel>
 80031b2:	4603      	mov	r3, r0
 80031b4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031b8:	fa93 f3a3 	rbit	r3, r3
 80031bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80031be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031c0:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80031c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80031c8:	2320      	movs	r3, #32
 80031ca:	e003      	b.n	80031d4 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80031cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031ce:	fab3 f383 	clz	r3, r3
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d105      	bne.n	80031ee <HAL_ADC_ConfigChannel+0x416>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	0e9b      	lsrs	r3, r3, #26
 80031e8:	f003 031f 	and.w	r3, r3, #31
 80031ec:	e011      	b.n	8003212 <HAL_ADC_ConfigChannel+0x43a>
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031f6:	fa93 f3a3 	rbit	r3, r3
 80031fa:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80031fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031fe:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003200:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8003206:	2320      	movs	r3, #32
 8003208:	e003      	b.n	8003212 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800320a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800320c:	fab3 f383 	clz	r3, r3
 8003210:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003212:	429a      	cmp	r2, r3
 8003214:	d106      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2200      	movs	r2, #0
 800321c:	2103      	movs	r1, #3
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff fa90 	bl	8002744 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff fba9 	bl	8002980 <LL_ADC_IsEnabled>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	f040 813f 	bne.w	80034b4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6818      	ldr	r0, [r3, #0]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	6819      	ldr	r1, [r3, #0]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	461a      	mov	r2, r3
 8003244:	f7ff fb16 	bl	8002874 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	4a8e      	ldr	r2, [pc, #568]	; (8003488 <HAL_ADC_ConfigChannel+0x6b0>)
 800324e:	4293      	cmp	r3, r2
 8003250:	f040 8130 	bne.w	80034b4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10b      	bne.n	800327c <HAL_ADC_ConfigChannel+0x4a4>
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	0e9b      	lsrs	r3, r3, #26
 800326a:	3301      	adds	r3, #1
 800326c:	f003 031f 	and.w	r3, r3, #31
 8003270:	2b09      	cmp	r3, #9
 8003272:	bf94      	ite	ls
 8003274:	2301      	movls	r3, #1
 8003276:	2300      	movhi	r3, #0
 8003278:	b2db      	uxtb	r3, r3
 800327a:	e019      	b.n	80032b0 <HAL_ADC_ConfigChannel+0x4d8>
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003282:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003284:	fa93 f3a3 	rbit	r3, r3
 8003288:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800328a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800328c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800328e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8003294:	2320      	movs	r3, #32
 8003296:	e003      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8003298:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800329a:	fab3 f383 	clz	r3, r3
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	3301      	adds	r3, #1
 80032a2:	f003 031f 	and.w	r3, r3, #31
 80032a6:	2b09      	cmp	r3, #9
 80032a8:	bf94      	ite	ls
 80032aa:	2301      	movls	r3, #1
 80032ac:	2300      	movhi	r3, #0
 80032ae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d079      	beq.n	80033a8 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d107      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x4f8>
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	0e9b      	lsrs	r3, r3, #26
 80032c6:	3301      	adds	r3, #1
 80032c8:	069b      	lsls	r3, r3, #26
 80032ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032ce:	e015      	b.n	80032fc <HAL_ADC_ConfigChannel+0x524>
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032d8:	fa93 f3a3 	rbit	r3, r3
 80032dc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80032de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032e0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80032e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80032e8:	2320      	movs	r3, #32
 80032ea:	e003      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80032ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032ee:	fab3 f383 	clz	r3, r3
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	3301      	adds	r3, #1
 80032f6:	069b      	lsls	r3, r3, #26
 80032f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003304:	2b00      	cmp	r3, #0
 8003306:	d109      	bne.n	800331c <HAL_ADC_ConfigChannel+0x544>
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	0e9b      	lsrs	r3, r3, #26
 800330e:	3301      	adds	r3, #1
 8003310:	f003 031f 	and.w	r3, r3, #31
 8003314:	2101      	movs	r1, #1
 8003316:	fa01 f303 	lsl.w	r3, r1, r3
 800331a:	e017      	b.n	800334c <HAL_ADC_ConfigChannel+0x574>
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003324:	fa93 f3a3 	rbit	r3, r3
 8003328:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800332a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800332c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800332e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8003334:	2320      	movs	r3, #32
 8003336:	e003      	b.n	8003340 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8003338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800333a:	fab3 f383 	clz	r3, r3
 800333e:	b2db      	uxtb	r3, r3
 8003340:	3301      	adds	r3, #1
 8003342:	f003 031f 	and.w	r3, r3, #31
 8003346:	2101      	movs	r1, #1
 8003348:	fa01 f303 	lsl.w	r3, r1, r3
 800334c:	ea42 0103 	orr.w	r1, r2, r3
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10a      	bne.n	8003372 <HAL_ADC_ConfigChannel+0x59a>
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	0e9b      	lsrs	r3, r3, #26
 8003362:	3301      	adds	r3, #1
 8003364:	f003 021f 	and.w	r2, r3, #31
 8003368:	4613      	mov	r3, r2
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	4413      	add	r3, r2
 800336e:	051b      	lsls	r3, r3, #20
 8003370:	e018      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x5cc>
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800337a:	fa93 f3a3 	rbit	r3, r3
 800337e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003382:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800338a:	2320      	movs	r3, #32
 800338c:	e003      	b.n	8003396 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800338e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003390:	fab3 f383 	clz	r3, r3
 8003394:	b2db      	uxtb	r3, r3
 8003396:	3301      	adds	r3, #1
 8003398:	f003 021f 	and.w	r2, r3, #31
 800339c:	4613      	mov	r3, r2
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	4413      	add	r3, r2
 80033a2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033a4:	430b      	orrs	r3, r1
 80033a6:	e080      	b.n	80034aa <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d107      	bne.n	80033c4 <HAL_ADC_ConfigChannel+0x5ec>
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	0e9b      	lsrs	r3, r3, #26
 80033ba:	3301      	adds	r3, #1
 80033bc:	069b      	lsls	r3, r3, #26
 80033be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033c2:	e015      	b.n	80033f0 <HAL_ADC_ConfigChannel+0x618>
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033cc:	fa93 f3a3 	rbit	r3, r3
 80033d0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80033d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80033dc:	2320      	movs	r3, #32
 80033de:	e003      	b.n	80033e8 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80033e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e2:	fab3 f383 	clz	r3, r3
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	3301      	adds	r3, #1
 80033ea:	069b      	lsls	r3, r3, #26
 80033ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d109      	bne.n	8003410 <HAL_ADC_ConfigChannel+0x638>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	0e9b      	lsrs	r3, r3, #26
 8003402:	3301      	adds	r3, #1
 8003404:	f003 031f 	and.w	r3, r3, #31
 8003408:	2101      	movs	r1, #1
 800340a:	fa01 f303 	lsl.w	r3, r1, r3
 800340e:	e017      	b.n	8003440 <HAL_ADC_ConfigChannel+0x668>
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	fa93 f3a3 	rbit	r3, r3
 800341c:	61bb      	str	r3, [r7, #24]
  return result;
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003428:	2320      	movs	r3, #32
 800342a:	e003      	b.n	8003434 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 800342c:	6a3b      	ldr	r3, [r7, #32]
 800342e:	fab3 f383 	clz	r3, r3
 8003432:	b2db      	uxtb	r3, r3
 8003434:	3301      	adds	r3, #1
 8003436:	f003 031f 	and.w	r3, r3, #31
 800343a:	2101      	movs	r1, #1
 800343c:	fa01 f303 	lsl.w	r3, r1, r3
 8003440:	ea42 0103 	orr.w	r1, r2, r3
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10d      	bne.n	800346c <HAL_ADC_ConfigChannel+0x694>
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	0e9b      	lsrs	r3, r3, #26
 8003456:	3301      	adds	r3, #1
 8003458:	f003 021f 	and.w	r2, r3, #31
 800345c:	4613      	mov	r3, r2
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	4413      	add	r3, r2
 8003462:	3b1e      	subs	r3, #30
 8003464:	051b      	lsls	r3, r3, #20
 8003466:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800346a:	e01d      	b.n	80034a8 <HAL_ADC_ConfigChannel+0x6d0>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	fa93 f3a3 	rbit	r3, r3
 8003478:	60fb      	str	r3, [r7, #12]
  return result;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d103      	bne.n	800348c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003484:	2320      	movs	r3, #32
 8003486:	e005      	b.n	8003494 <HAL_ADC_ConfigChannel+0x6bc>
 8003488:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	fab3 f383 	clz	r3, r3
 8003492:	b2db      	uxtb	r3, r3
 8003494:	3301      	adds	r3, #1
 8003496:	f003 021f 	and.w	r2, r3, #31
 800349a:	4613      	mov	r3, r2
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	4413      	add	r3, r2
 80034a0:	3b1e      	subs	r3, #30
 80034a2:	051b      	lsls	r3, r3, #20
 80034a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034a8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034ae:	4619      	mov	r1, r3
 80034b0:	f7ff f9b5 	bl	800281e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	4b3d      	ldr	r3, [pc, #244]	; (80035b0 <HAL_ADC_ConfigChannel+0x7d8>)
 80034ba:	4013      	ands	r3, r2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d06c      	beq.n	800359a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034c0:	483c      	ldr	r0, [pc, #240]	; (80035b4 <HAL_ADC_ConfigChannel+0x7dc>)
 80034c2:	f7ff f8f7 	bl	80026b4 <LL_ADC_GetCommonPathInternalCh>
 80034c6:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a3a      	ldr	r2, [pc, #232]	; (80035b8 <HAL_ADC_ConfigChannel+0x7e0>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d127      	bne.n	8003524 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80034d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d121      	bne.n	8003524 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a35      	ldr	r2, [pc, #212]	; (80035bc <HAL_ADC_ConfigChannel+0x7e4>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d157      	bne.n	800359a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034f2:	4619      	mov	r1, r3
 80034f4:	482f      	ldr	r0, [pc, #188]	; (80035b4 <HAL_ADC_ConfigChannel+0x7dc>)
 80034f6:	f7ff f8ca 	bl	800268e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034fa:	4b31      	ldr	r3, [pc, #196]	; (80035c0 <HAL_ADC_ConfigChannel+0x7e8>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	099b      	lsrs	r3, r3, #6
 8003500:	4a30      	ldr	r2, [pc, #192]	; (80035c4 <HAL_ADC_ConfigChannel+0x7ec>)
 8003502:	fba2 2303 	umull	r2, r3, r2, r3
 8003506:	099b      	lsrs	r3, r3, #6
 8003508:	1c5a      	adds	r2, r3, #1
 800350a:	4613      	mov	r3, r2
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	4413      	add	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003514:	e002      	b.n	800351c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	3b01      	subs	r3, #1
 800351a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f9      	bne.n	8003516 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003522:	e03a      	b.n	800359a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a27      	ldr	r2, [pc, #156]	; (80035c8 <HAL_ADC_ConfigChannel+0x7f0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d113      	bne.n	8003556 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800352e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003532:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10d      	bne.n	8003556 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a1f      	ldr	r2, [pc, #124]	; (80035bc <HAL_ADC_ConfigChannel+0x7e4>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d12a      	bne.n	800359a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003544:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003548:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800354c:	4619      	mov	r1, r3
 800354e:	4819      	ldr	r0, [pc, #100]	; (80035b4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003550:	f7ff f89d 	bl	800268e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003554:	e021      	b.n	800359a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a1c      	ldr	r2, [pc, #112]	; (80035cc <HAL_ADC_ConfigChannel+0x7f4>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d11c      	bne.n	800359a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003560:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003564:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d116      	bne.n	800359a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a12      	ldr	r2, [pc, #72]	; (80035bc <HAL_ADC_ConfigChannel+0x7e4>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d111      	bne.n	800359a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003576:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800357a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800357e:	4619      	mov	r1, r3
 8003580:	480c      	ldr	r0, [pc, #48]	; (80035b4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003582:	f7ff f884 	bl	800268e <LL_ADC_SetCommonPathInternalCh>
 8003586:	e008      	b.n	800359a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358c:	f043 0220 	orr.w	r2, r3, #32
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80035a2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	37d8      	adds	r7, #216	; 0xd8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	80080000 	.word	0x80080000
 80035b4:	50040300 	.word	0x50040300
 80035b8:	c7520000 	.word	0xc7520000
 80035bc:	50040000 	.word	0x50040000
 80035c0:	20000000 	.word	0x20000000
 80035c4:	053e2d63 	.word	0x053e2d63
 80035c8:	cb840000 	.word	0xcb840000
 80035cc:	80000001 	.word	0x80000001

080035d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80035d8:	2300      	movs	r3, #0
 80035da:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7ff f9cd 	bl	8002980 <LL_ADC_IsEnabled>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d169      	bne.n	80036c0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	4b36      	ldr	r3, [pc, #216]	; (80036cc <ADC_Enable+0xfc>)
 80035f4:	4013      	ands	r3, r2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00d      	beq.n	8003616 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fe:	f043 0210 	orr.w	r2, r3, #16
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360a:	f043 0201 	orr.w	r2, r3, #1
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e055      	b.n	80036c2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f7ff f99c 	bl	8002958 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003620:	482b      	ldr	r0, [pc, #172]	; (80036d0 <ADC_Enable+0x100>)
 8003622:	f7ff f847 	bl	80026b4 <LL_ADC_GetCommonPathInternalCh>
 8003626:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003628:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800362c:	2b00      	cmp	r3, #0
 800362e:	d013      	beq.n	8003658 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003630:	4b28      	ldr	r3, [pc, #160]	; (80036d4 <ADC_Enable+0x104>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	099b      	lsrs	r3, r3, #6
 8003636:	4a28      	ldr	r2, [pc, #160]	; (80036d8 <ADC_Enable+0x108>)
 8003638:	fba2 2303 	umull	r2, r3, r2, r3
 800363c:	099b      	lsrs	r3, r3, #6
 800363e:	1c5a      	adds	r2, r3, #1
 8003640:	4613      	mov	r3, r2
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	4413      	add	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800364a:	e002      	b.n	8003652 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	3b01      	subs	r3, #1
 8003650:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1f9      	bne.n	800364c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003658:	f7fe ffd6 	bl	8002608 <HAL_GetTick>
 800365c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800365e:	e028      	b.n	80036b2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff f98b 	bl	8002980 <LL_ADC_IsEnabled>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d104      	bne.n	800367a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff f96f 	bl	8002958 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800367a:	f7fe ffc5 	bl	8002608 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d914      	bls.n	80036b2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b01      	cmp	r3, #1
 8003694:	d00d      	beq.n	80036b2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369a:	f043 0210 	orr.w	r2, r3, #16
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a6:	f043 0201 	orr.w	r2, r3, #1
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e007      	b.n	80036c2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d1cf      	bne.n	8003660 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	8000003f 	.word	0x8000003f
 80036d0:	50040300 	.word	0x50040300
 80036d4:	20000000 	.word	0x20000000
 80036d8:	053e2d63 	.word	0x053e2d63

080036dc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d14b      	bne.n	800378e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0308 	and.w	r3, r3, #8
 800370c:	2b00      	cmp	r3, #0
 800370e:	d021      	beq.n	8003754 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4618      	mov	r0, r3
 8003716:	f7ff f843 	bl	80027a0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d032      	beq.n	8003786 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d12b      	bne.n	8003786 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003732:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d11f      	bne.n	8003786 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374a:	f043 0201 	orr.w	r2, r3, #1
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	659a      	str	r2, [r3, #88]	; 0x58
 8003752:	e018      	b.n	8003786 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d111      	bne.n	8003786 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003766:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003772:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d105      	bne.n	8003786 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377e:	f043 0201 	orr.w	r2, r3, #1
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f7fe f9f0 	bl	8001b6c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800378c:	e00e      	b.n	80037ac <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003792:	f003 0310 	and.w	r3, r3, #16
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f7ff fb12 	bl	8002dc4 <HAL_ADC_ErrorCallback>
}
 80037a0:	e004      	b.n	80037ac <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	4798      	blx	r3
}
 80037ac:	bf00      	nop
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f7ff faf4 	bl	8002db0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037c8:	bf00      	nop
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037dc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ee:	f043 0204 	orr.w	r2, r3, #4
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f7ff fae4 	bl	8002dc4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037fc:	bf00      	nop
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f003 0307 	and.w	r3, r3, #7
 8003812:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003814:	4b0c      	ldr	r3, [pc, #48]	; (8003848 <__NVIC_SetPriorityGrouping+0x44>)
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003820:	4013      	ands	r3, r2
 8003822:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800382c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003836:	4a04      	ldr	r2, [pc, #16]	; (8003848 <__NVIC_SetPriorityGrouping+0x44>)
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	60d3      	str	r3, [r2, #12]
}
 800383c:	bf00      	nop
 800383e:	3714      	adds	r7, #20
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	e000ed00 	.word	0xe000ed00

0800384c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003850:	4b04      	ldr	r3, [pc, #16]	; (8003864 <__NVIC_GetPriorityGrouping+0x18>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	0a1b      	lsrs	r3, r3, #8
 8003856:	f003 0307 	and.w	r3, r3, #7
}
 800385a:	4618      	mov	r0, r3
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	e000ed00 	.word	0xe000ed00

08003868 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	4603      	mov	r3, r0
 8003870:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003876:	2b00      	cmp	r3, #0
 8003878:	db0b      	blt.n	8003892 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800387a:	79fb      	ldrb	r3, [r7, #7]
 800387c:	f003 021f 	and.w	r2, r3, #31
 8003880:	4907      	ldr	r1, [pc, #28]	; (80038a0 <__NVIC_EnableIRQ+0x38>)
 8003882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003886:	095b      	lsrs	r3, r3, #5
 8003888:	2001      	movs	r0, #1
 800388a:	fa00 f202 	lsl.w	r2, r0, r2
 800388e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003892:	bf00      	nop
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	e000e100 	.word	0xe000e100

080038a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	4603      	mov	r3, r0
 80038ac:	6039      	str	r1, [r7, #0]
 80038ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	db0a      	blt.n	80038ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	b2da      	uxtb	r2, r3
 80038bc:	490c      	ldr	r1, [pc, #48]	; (80038f0 <__NVIC_SetPriority+0x4c>)
 80038be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c2:	0112      	lsls	r2, r2, #4
 80038c4:	b2d2      	uxtb	r2, r2
 80038c6:	440b      	add	r3, r1
 80038c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038cc:	e00a      	b.n	80038e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	4908      	ldr	r1, [pc, #32]	; (80038f4 <__NVIC_SetPriority+0x50>)
 80038d4:	79fb      	ldrb	r3, [r7, #7]
 80038d6:	f003 030f 	and.w	r3, r3, #15
 80038da:	3b04      	subs	r3, #4
 80038dc:	0112      	lsls	r2, r2, #4
 80038de:	b2d2      	uxtb	r2, r2
 80038e0:	440b      	add	r3, r1
 80038e2:	761a      	strb	r2, [r3, #24]
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	e000e100 	.word	0xe000e100
 80038f4:	e000ed00 	.word	0xe000ed00

080038f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b089      	sub	sp, #36	; 0x24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	f1c3 0307 	rsb	r3, r3, #7
 8003912:	2b04      	cmp	r3, #4
 8003914:	bf28      	it	cs
 8003916:	2304      	movcs	r3, #4
 8003918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	3304      	adds	r3, #4
 800391e:	2b06      	cmp	r3, #6
 8003920:	d902      	bls.n	8003928 <NVIC_EncodePriority+0x30>
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	3b03      	subs	r3, #3
 8003926:	e000      	b.n	800392a <NVIC_EncodePriority+0x32>
 8003928:	2300      	movs	r3, #0
 800392a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800392c:	f04f 32ff 	mov.w	r2, #4294967295
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	fa02 f303 	lsl.w	r3, r2, r3
 8003936:	43da      	mvns	r2, r3
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	401a      	ands	r2, r3
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003940:	f04f 31ff 	mov.w	r1, #4294967295
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	fa01 f303 	lsl.w	r3, r1, r3
 800394a:	43d9      	mvns	r1, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003950:	4313      	orrs	r3, r2
         );
}
 8003952:	4618      	mov	r0, r3
 8003954:	3724      	adds	r7, #36	; 0x24
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
	...

08003960 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3b01      	subs	r3, #1
 800396c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003970:	d301      	bcc.n	8003976 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003972:	2301      	movs	r3, #1
 8003974:	e00f      	b.n	8003996 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003976:	4a0a      	ldr	r2, [pc, #40]	; (80039a0 <SysTick_Config+0x40>)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3b01      	subs	r3, #1
 800397c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800397e:	210f      	movs	r1, #15
 8003980:	f04f 30ff 	mov.w	r0, #4294967295
 8003984:	f7ff ff8e 	bl	80038a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003988:	4b05      	ldr	r3, [pc, #20]	; (80039a0 <SysTick_Config+0x40>)
 800398a:	2200      	movs	r2, #0
 800398c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800398e:	4b04      	ldr	r3, [pc, #16]	; (80039a0 <SysTick_Config+0x40>)
 8003990:	2207      	movs	r2, #7
 8003992:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	e000e010 	.word	0xe000e010

080039a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7ff ff29 	bl	8003804 <__NVIC_SetPriorityGrouping>
}
 80039b2:	bf00      	nop
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b086      	sub	sp, #24
 80039be:	af00      	add	r7, sp, #0
 80039c0:	4603      	mov	r3, r0
 80039c2:	60b9      	str	r1, [r7, #8]
 80039c4:	607a      	str	r2, [r7, #4]
 80039c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80039c8:	2300      	movs	r3, #0
 80039ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80039cc:	f7ff ff3e 	bl	800384c <__NVIC_GetPriorityGrouping>
 80039d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	68b9      	ldr	r1, [r7, #8]
 80039d6:	6978      	ldr	r0, [r7, #20]
 80039d8:	f7ff ff8e 	bl	80038f8 <NVIC_EncodePriority>
 80039dc:	4602      	mov	r2, r0
 80039de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039e2:	4611      	mov	r1, r2
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff ff5d 	bl	80038a4 <__NVIC_SetPriority>
}
 80039ea:	bf00      	nop
 80039ec:	3718      	adds	r7, #24
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b082      	sub	sp, #8
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	4603      	mov	r3, r0
 80039fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff ff31 	bl	8003868 <__NVIC_EnableIRQ>
}
 8003a06:	bf00      	nop
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b082      	sub	sp, #8
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7ff ffa2 	bl	8003960 <SysTick_Config>
 8003a1c:	4603      	mov	r3, r0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
	...

08003a28 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e0ac      	b.n	8003b94 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 f8b2 	bl	8003ba8 <DFSDM_GetChannelFromInstance>
 8003a44:	4603      	mov	r3, r0
 8003a46:	4a55      	ldr	r2, [pc, #340]	; (8003b9c <HAL_DFSDM_ChannelInit+0x174>)
 8003a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d001      	beq.n	8003a54 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e09f      	b.n	8003b94 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f7fe f931 	bl	8001cbc <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003a5a:	4b51      	ldr	r3, [pc, #324]	; (8003ba0 <HAL_DFSDM_ChannelInit+0x178>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	3301      	adds	r3, #1
 8003a60:	4a4f      	ldr	r2, [pc, #316]	; (8003ba0 <HAL_DFSDM_ChannelInit+0x178>)
 8003a62:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003a64:	4b4e      	ldr	r3, [pc, #312]	; (8003ba0 <HAL_DFSDM_ChannelInit+0x178>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d125      	bne.n	8003ab8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003a6c:	4b4d      	ldr	r3, [pc, #308]	; (8003ba4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a4c      	ldr	r2, [pc, #304]	; (8003ba4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a76:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003a78:	4b4a      	ldr	r3, [pc, #296]	; (8003ba4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	4948      	ldr	r1, [pc, #288]	; (8003ba4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003a86:	4b47      	ldr	r3, [pc, #284]	; (8003ba4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a46      	ldr	r2, [pc, #280]	; (8003ba4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a8c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003a90:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	791b      	ldrb	r3, [r3, #4]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d108      	bne.n	8003aac <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003a9a:	4b42      	ldr	r3, [pc, #264]	; (8003ba4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	041b      	lsls	r3, r3, #16
 8003aa6:	493f      	ldr	r1, [pc, #252]	; (8003ba4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003aac:	4b3d      	ldr	r3, [pc, #244]	; (8003ba4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a3c      	ldr	r2, [pc, #240]	; (8003ba4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003ab2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ab6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003ac6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6819      	ldr	r1, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003ad6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003adc:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 020f 	bic.w	r2, r2, #15
 8003af4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	6819      	ldr	r1, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003b04:	431a      	orrs	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003b1c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6899      	ldr	r1, [r3, #8]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003b30:	431a      	orrs	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f002 0207 	and.w	r2, r2, #7
 8003b48:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	6859      	ldr	r1, [r3, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b54:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003b5c:	431a      	orrs	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b74:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 f810 	bl	8003ba8 <DFSDM_GetChannelFromInstance>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	4904      	ldr	r1, [pc, #16]	; (8003b9c <HAL_DFSDM_ChannelInit+0x174>)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	200005ec 	.word	0x200005ec
 8003ba0:	200005e8 	.word	0x200005e8
 8003ba4:	40016000 	.word	0x40016000

08003ba8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a1c      	ldr	r2, [pc, #112]	; (8003c24 <DFSDM_GetChannelFromInstance+0x7c>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d102      	bne.n	8003bbe <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	60fb      	str	r3, [r7, #12]
 8003bbc:	e02b      	b.n	8003c16 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a19      	ldr	r2, [pc, #100]	; (8003c28 <DFSDM_GetChannelFromInstance+0x80>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d102      	bne.n	8003bcc <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	60fb      	str	r3, [r7, #12]
 8003bca:	e024      	b.n	8003c16 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a17      	ldr	r2, [pc, #92]	; (8003c2c <DFSDM_GetChannelFromInstance+0x84>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d102      	bne.n	8003bda <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	e01d      	b.n	8003c16 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a14      	ldr	r2, [pc, #80]	; (8003c30 <DFSDM_GetChannelFromInstance+0x88>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d102      	bne.n	8003be8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003be2:	2304      	movs	r3, #4
 8003be4:	60fb      	str	r3, [r7, #12]
 8003be6:	e016      	b.n	8003c16 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a12      	ldr	r2, [pc, #72]	; (8003c34 <DFSDM_GetChannelFromInstance+0x8c>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d102      	bne.n	8003bf6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003bf0:	2305      	movs	r3, #5
 8003bf2:	60fb      	str	r3, [r7, #12]
 8003bf4:	e00f      	b.n	8003c16 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a0f      	ldr	r2, [pc, #60]	; (8003c38 <DFSDM_GetChannelFromInstance+0x90>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d102      	bne.n	8003c04 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003bfe:	2306      	movs	r3, #6
 8003c00:	60fb      	str	r3, [r7, #12]
 8003c02:	e008      	b.n	8003c16 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a0d      	ldr	r2, [pc, #52]	; (8003c3c <DFSDM_GetChannelFromInstance+0x94>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d102      	bne.n	8003c12 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003c0c:	2307      	movs	r3, #7
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	e001      	b.n	8003c16 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003c12:	2303      	movs	r3, #3
 8003c14:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003c16:	68fb      	ldr	r3, [r7, #12]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	40016000 	.word	0x40016000
 8003c28:	40016020 	.word	0x40016020
 8003c2c:	40016040 	.word	0x40016040
 8003c30:	40016080 	.word	0x40016080
 8003c34:	400160a0 	.word	0x400160a0
 8003c38:	400160c0 	.word	0x400160c0
 8003c3c:	400160e0 	.word	0x400160e0

08003c40 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e08d      	b.n	8003d6e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	461a      	mov	r2, r3
 8003c58:	4b47      	ldr	r3, [pc, #284]	; (8003d78 <HAL_DMA_Init+0x138>)
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d80f      	bhi.n	8003c7e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	461a      	mov	r2, r3
 8003c64:	4b45      	ldr	r3, [pc, #276]	; (8003d7c <HAL_DMA_Init+0x13c>)
 8003c66:	4413      	add	r3, r2
 8003c68:	4a45      	ldr	r2, [pc, #276]	; (8003d80 <HAL_DMA_Init+0x140>)
 8003c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6e:	091b      	lsrs	r3, r3, #4
 8003c70:	009a      	lsls	r2, r3, #2
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a42      	ldr	r2, [pc, #264]	; (8003d84 <HAL_DMA_Init+0x144>)
 8003c7a:	641a      	str	r2, [r3, #64]	; 0x40
 8003c7c:	e00e      	b.n	8003c9c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	461a      	mov	r2, r3
 8003c84:	4b40      	ldr	r3, [pc, #256]	; (8003d88 <HAL_DMA_Init+0x148>)
 8003c86:	4413      	add	r3, r2
 8003c88:	4a3d      	ldr	r2, [pc, #244]	; (8003d80 <HAL_DMA_Init+0x140>)
 8003c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8e:	091b      	lsrs	r3, r3, #4
 8003c90:	009a      	lsls	r2, r3, #2
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a3c      	ldr	r2, [pc, #240]	; (8003d8c <HAL_DMA_Init+0x14c>)
 8003c9a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cb6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003cc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ccc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f9b6 	bl	8004060 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cfc:	d102      	bne.n	8003d04 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d0c:	b2d2      	uxtb	r2, r2
 8003d0e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003d18:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d010      	beq.n	8003d44 <HAL_DMA_Init+0x104>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d80c      	bhi.n	8003d44 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f9d6 	bl	80040dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003d40:	605a      	str	r2, [r3, #4]
 8003d42:	e008      	b.n	8003d56 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	40020407 	.word	0x40020407
 8003d7c:	bffdfff8 	.word	0xbffdfff8
 8003d80:	cccccccd 	.word	0xcccccccd
 8003d84:	40020000 	.word	0x40020000
 8003d88:	bffdfbf8 	.word	0xbffdfbf8
 8003d8c:	40020400 	.word	0x40020400

08003d90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
 8003d9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d101      	bne.n	8003db0 <HAL_DMA_Start_IT+0x20>
 8003dac:	2302      	movs	r3, #2
 8003dae:	e066      	b.n	8003e7e <HAL_DMA_Start_IT+0xee>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d155      	bne.n	8003e70 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 0201 	bic.w	r2, r2, #1
 8003de0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	68b9      	ldr	r1, [r7, #8]
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f000 f8fb 	bl	8003fe4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d008      	beq.n	8003e08 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f042 020e 	orr.w	r2, r2, #14
 8003e04:	601a      	str	r2, [r3, #0]
 8003e06:	e00f      	b.n	8003e28 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 0204 	bic.w	r2, r2, #4
 8003e16:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f042 020a 	orr.w	r2, r2, #10
 8003e26:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d007      	beq.n	8003e46 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e44:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d007      	beq.n	8003e5e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e5c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f042 0201 	orr.w	r2, r2, #1
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	e005      	b.n	8003e7c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003e78:	2302      	movs	r3, #2
 8003e7a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3718      	adds	r7, #24
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b084      	sub	sp, #16
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea2:	f003 031c 	and.w	r3, r3, #28
 8003ea6:	2204      	movs	r2, #4
 8003ea8:	409a      	lsls	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	4013      	ands	r3, r2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d026      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x7a>
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d021      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0320 	and.w	r3, r3, #32
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d107      	bne.n	8003eda <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0204 	bic.w	r2, r2, #4
 8003ed8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ede:	f003 021c 	and.w	r2, r3, #28
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	2104      	movs	r1, #4
 8003ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8003eec:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d071      	beq.n	8003fda <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003efe:	e06c      	b.n	8003fda <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f04:	f003 031c 	and.w	r3, r3, #28
 8003f08:	2202      	movs	r2, #2
 8003f0a:	409a      	lsls	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d02e      	beq.n	8003f72 <HAL_DMA_IRQHandler+0xec>
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d029      	beq.n	8003f72 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0320 	and.w	r3, r3, #32
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10b      	bne.n	8003f44 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 020a 	bic.w	r2, r2, #10
 8003f3a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f48:	f003 021c 	and.w	r2, r3, #28
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f50:	2102      	movs	r1, #2
 8003f52:	fa01 f202 	lsl.w	r2, r1, r2
 8003f56:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d038      	beq.n	8003fda <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003f70:	e033      	b.n	8003fda <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f76:	f003 031c 	and.w	r3, r3, #28
 8003f7a:	2208      	movs	r2, #8
 8003f7c:	409a      	lsls	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	4013      	ands	r3, r2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d02a      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x156>
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	f003 0308 	and.w	r3, r3, #8
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d025      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 020e 	bic.w	r2, r2, #14
 8003f9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa4:	f003 021c 	and.w	r2, r3, #28
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fac:	2101      	movs	r1, #1
 8003fae:	fa01 f202 	lsl.w	r2, r1, r2
 8003fb2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d004      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003fda:	bf00      	nop
 8003fdc:	bf00      	nop
}
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
 8003ff0:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ffa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004000:	2b00      	cmp	r3, #0
 8004002:	d004      	beq.n	800400e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800400c:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004012:	f003 021c 	and.w	r2, r3, #28
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	2101      	movs	r1, #1
 800401c:	fa01 f202 	lsl.w	r2, r1, r2
 8004020:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	2b10      	cmp	r3, #16
 8004030:	d108      	bne.n	8004044 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004042:	e007      	b.n	8004054 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	60da      	str	r2, [r3, #12]
}
 8004054:	bf00      	nop
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	461a      	mov	r2, r3
 800406e:	4b17      	ldr	r3, [pc, #92]	; (80040cc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004070:	429a      	cmp	r2, r3
 8004072:	d80a      	bhi.n	800408a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004078:	089b      	lsrs	r3, r3, #2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004080:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	6493      	str	r3, [r2, #72]	; 0x48
 8004088:	e007      	b.n	800409a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408e:	089b      	lsrs	r3, r3, #2
 8004090:	009a      	lsls	r2, r3, #2
 8004092:	4b0f      	ldr	r3, [pc, #60]	; (80040d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004094:	4413      	add	r3, r2
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	3b08      	subs	r3, #8
 80040a2:	4a0c      	ldr	r2, [pc, #48]	; (80040d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80040a4:	fba2 2303 	umull	r2, r3, r2, r3
 80040a8:	091b      	lsrs	r3, r3, #4
 80040aa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a0a      	ldr	r2, [pc, #40]	; (80040d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80040b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f003 031f 	and.w	r3, r3, #31
 80040b8:	2201      	movs	r2, #1
 80040ba:	409a      	lsls	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	651a      	str	r2, [r3, #80]	; 0x50
}
 80040c0:	bf00      	nop
 80040c2:	3714      	adds	r7, #20
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	40020407 	.word	0x40020407
 80040d0:	4002081c 	.word	0x4002081c
 80040d4:	cccccccd 	.word	0xcccccccd
 80040d8:	40020880 	.word	0x40020880

080040dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	4b0b      	ldr	r3, [pc, #44]	; (800411c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80040f0:	4413      	add	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	461a      	mov	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a08      	ldr	r2, [pc, #32]	; (8004120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80040fe:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	3b01      	subs	r3, #1
 8004104:	f003 0303 	and.w	r3, r3, #3
 8004108:	2201      	movs	r2, #1
 800410a:	409a      	lsls	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004110:	bf00      	nop
 8004112:	3714      	adds	r7, #20
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	1000823f 	.word	0x1000823f
 8004120:	40020940 	.word	0x40020940

08004124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004124:	b480      	push	{r7}
 8004126:	b087      	sub	sp, #28
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800412e:	2300      	movs	r3, #0
 8004130:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004132:	e166      	b.n	8004402 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	2101      	movs	r1, #1
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	fa01 f303 	lsl.w	r3, r1, r3
 8004140:	4013      	ands	r3, r2
 8004142:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 8158 	beq.w	80043fc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f003 0303 	and.w	r3, r3, #3
 8004154:	2b01      	cmp	r3, #1
 8004156:	d005      	beq.n	8004164 <HAL_GPIO_Init+0x40>
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f003 0303 	and.w	r3, r3, #3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d130      	bne.n	80041c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	2203      	movs	r2, #3
 8004170:	fa02 f303 	lsl.w	r3, r2, r3
 8004174:	43db      	mvns	r3, r3
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	4013      	ands	r3, r2
 800417a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	68da      	ldr	r2, [r3, #12]
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	005b      	lsls	r3, r3, #1
 8004184:	fa02 f303 	lsl.w	r3, r2, r3
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	4313      	orrs	r3, r2
 800418c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800419a:	2201      	movs	r2, #1
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	fa02 f303 	lsl.w	r3, r2, r3
 80041a2:	43db      	mvns	r3, r3
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	4013      	ands	r3, r2
 80041a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	091b      	lsrs	r3, r3, #4
 80041b0:	f003 0201 	and.w	r2, r3, #1
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	4313      	orrs	r3, r2
 80041be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f003 0303 	and.w	r3, r3, #3
 80041ce:	2b03      	cmp	r3, #3
 80041d0:	d017      	beq.n	8004202 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	2203      	movs	r2, #3
 80041de:	fa02 f303 	lsl.w	r3, r2, r3
 80041e2:	43db      	mvns	r3, r3
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	4013      	ands	r3, r2
 80041e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	689a      	ldr	r2, [r3, #8]
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	fa02 f303 	lsl.w	r3, r2, r3
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d123      	bne.n	8004256 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	08da      	lsrs	r2, r3, #3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	3208      	adds	r2, #8
 8004216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800421a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	220f      	movs	r2, #15
 8004226:	fa02 f303 	lsl.w	r3, r2, r3
 800422a:	43db      	mvns	r3, r3
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	4013      	ands	r3, r2
 8004230:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	691a      	ldr	r2, [r3, #16]
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f003 0307 	and.w	r3, r3, #7
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	fa02 f303 	lsl.w	r3, r2, r3
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	4313      	orrs	r3, r2
 8004246:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	08da      	lsrs	r2, r3, #3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3208      	adds	r2, #8
 8004250:	6939      	ldr	r1, [r7, #16]
 8004252:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	2203      	movs	r2, #3
 8004262:	fa02 f303 	lsl.w	r3, r2, r3
 8004266:	43db      	mvns	r3, r3
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	4013      	ands	r3, r2
 800426c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f003 0203 	and.w	r2, r3, #3
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	fa02 f303 	lsl.w	r3, r2, r3
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	4313      	orrs	r3, r2
 8004282:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004292:	2b00      	cmp	r3, #0
 8004294:	f000 80b2 	beq.w	80043fc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004298:	4b61      	ldr	r3, [pc, #388]	; (8004420 <HAL_GPIO_Init+0x2fc>)
 800429a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800429c:	4a60      	ldr	r2, [pc, #384]	; (8004420 <HAL_GPIO_Init+0x2fc>)
 800429e:	f043 0301 	orr.w	r3, r3, #1
 80042a2:	6613      	str	r3, [r2, #96]	; 0x60
 80042a4:	4b5e      	ldr	r3, [pc, #376]	; (8004420 <HAL_GPIO_Init+0x2fc>)
 80042a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	60bb      	str	r3, [r7, #8]
 80042ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80042b0:	4a5c      	ldr	r2, [pc, #368]	; (8004424 <HAL_GPIO_Init+0x300>)
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	089b      	lsrs	r3, r3, #2
 80042b6:	3302      	adds	r3, #2
 80042b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f003 0303 	and.w	r3, r3, #3
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	220f      	movs	r2, #15
 80042c8:	fa02 f303 	lsl.w	r3, r2, r3
 80042cc:	43db      	mvns	r3, r3
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	4013      	ands	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80042da:	d02b      	beq.n	8004334 <HAL_GPIO_Init+0x210>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a52      	ldr	r2, [pc, #328]	; (8004428 <HAL_GPIO_Init+0x304>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d025      	beq.n	8004330 <HAL_GPIO_Init+0x20c>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a51      	ldr	r2, [pc, #324]	; (800442c <HAL_GPIO_Init+0x308>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d01f      	beq.n	800432c <HAL_GPIO_Init+0x208>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a50      	ldr	r2, [pc, #320]	; (8004430 <HAL_GPIO_Init+0x30c>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d019      	beq.n	8004328 <HAL_GPIO_Init+0x204>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a4f      	ldr	r2, [pc, #316]	; (8004434 <HAL_GPIO_Init+0x310>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d013      	beq.n	8004324 <HAL_GPIO_Init+0x200>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a4e      	ldr	r2, [pc, #312]	; (8004438 <HAL_GPIO_Init+0x314>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d00d      	beq.n	8004320 <HAL_GPIO_Init+0x1fc>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a4d      	ldr	r2, [pc, #308]	; (800443c <HAL_GPIO_Init+0x318>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d007      	beq.n	800431c <HAL_GPIO_Init+0x1f8>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a4c      	ldr	r2, [pc, #304]	; (8004440 <HAL_GPIO_Init+0x31c>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d101      	bne.n	8004318 <HAL_GPIO_Init+0x1f4>
 8004314:	2307      	movs	r3, #7
 8004316:	e00e      	b.n	8004336 <HAL_GPIO_Init+0x212>
 8004318:	2308      	movs	r3, #8
 800431a:	e00c      	b.n	8004336 <HAL_GPIO_Init+0x212>
 800431c:	2306      	movs	r3, #6
 800431e:	e00a      	b.n	8004336 <HAL_GPIO_Init+0x212>
 8004320:	2305      	movs	r3, #5
 8004322:	e008      	b.n	8004336 <HAL_GPIO_Init+0x212>
 8004324:	2304      	movs	r3, #4
 8004326:	e006      	b.n	8004336 <HAL_GPIO_Init+0x212>
 8004328:	2303      	movs	r3, #3
 800432a:	e004      	b.n	8004336 <HAL_GPIO_Init+0x212>
 800432c:	2302      	movs	r3, #2
 800432e:	e002      	b.n	8004336 <HAL_GPIO_Init+0x212>
 8004330:	2301      	movs	r3, #1
 8004332:	e000      	b.n	8004336 <HAL_GPIO_Init+0x212>
 8004334:	2300      	movs	r3, #0
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	f002 0203 	and.w	r2, r2, #3
 800433c:	0092      	lsls	r2, r2, #2
 800433e:	4093      	lsls	r3, r2
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	4313      	orrs	r3, r2
 8004344:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004346:	4937      	ldr	r1, [pc, #220]	; (8004424 <HAL_GPIO_Init+0x300>)
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	089b      	lsrs	r3, r3, #2
 800434c:	3302      	adds	r3, #2
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004354:	4b3b      	ldr	r3, [pc, #236]	; (8004444 <HAL_GPIO_Init+0x320>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	43db      	mvns	r3, r3
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	4013      	ands	r3, r2
 8004362:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d003      	beq.n	8004378 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	4313      	orrs	r3, r2
 8004376:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004378:	4a32      	ldr	r2, [pc, #200]	; (8004444 <HAL_GPIO_Init+0x320>)
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800437e:	4b31      	ldr	r3, [pc, #196]	; (8004444 <HAL_GPIO_Init+0x320>)
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	43db      	mvns	r3, r3
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	4013      	ands	r3, r2
 800438c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	4313      	orrs	r3, r2
 80043a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80043a2:	4a28      	ldr	r2, [pc, #160]	; (8004444 <HAL_GPIO_Init+0x320>)
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80043a8:	4b26      	ldr	r3, [pc, #152]	; (8004444 <HAL_GPIO_Init+0x320>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	43db      	mvns	r3, r3
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	4013      	ands	r3, r2
 80043b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80043cc:	4a1d      	ldr	r2, [pc, #116]	; (8004444 <HAL_GPIO_Init+0x320>)
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80043d2:	4b1c      	ldr	r3, [pc, #112]	; (8004444 <HAL_GPIO_Init+0x320>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	43db      	mvns	r3, r3
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	4013      	ands	r3, r2
 80043e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80043f6:	4a13      	ldr	r2, [pc, #76]	; (8004444 <HAL_GPIO_Init+0x320>)
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	3301      	adds	r3, #1
 8004400:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	fa22 f303 	lsr.w	r3, r2, r3
 800440c:	2b00      	cmp	r3, #0
 800440e:	f47f ae91 	bne.w	8004134 <HAL_GPIO_Init+0x10>
  }
}
 8004412:	bf00      	nop
 8004414:	bf00      	nop
 8004416:	371c      	adds	r7, #28
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	40021000 	.word	0x40021000
 8004424:	40010000 	.word	0x40010000
 8004428:	48000400 	.word	0x48000400
 800442c:	48000800 	.word	0x48000800
 8004430:	48000c00 	.word	0x48000c00
 8004434:	48001000 	.word	0x48001000
 8004438:	48001400 	.word	0x48001400
 800443c:	48001800 	.word	0x48001800
 8004440:	48001c00 	.word	0x48001c00
 8004444:	40010400 	.word	0x40010400

08004448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	460b      	mov	r3, r1
 8004452:	807b      	strh	r3, [r7, #2]
 8004454:	4613      	mov	r3, r2
 8004456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004458:	787b      	ldrb	r3, [r7, #1]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800445e:	887a      	ldrh	r2, [r7, #2]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004464:	e002      	b.n	800446c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004466:	887a      	ldrh	r2, [r7, #2]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	4603      	mov	r3, r0
 8004480:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004482:	4b08      	ldr	r3, [pc, #32]	; (80044a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004484:	695a      	ldr	r2, [r3, #20]
 8004486:	88fb      	ldrh	r3, [r7, #6]
 8004488:	4013      	ands	r3, r2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d006      	beq.n	800449c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800448e:	4a05      	ldr	r2, [pc, #20]	; (80044a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004490:	88fb      	ldrh	r3, [r7, #6]
 8004492:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004494:	88fb      	ldrh	r3, [r7, #6]
 8004496:	4618      	mov	r0, r3
 8004498:	f000 f806 	bl	80044a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800449c:	bf00      	nop
 800449e:	3708      	adds	r7, #8
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	40010400 	.word	0x40010400

080044a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	4603      	mov	r3, r0
 80044b0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80044b2:	bf00      	nop
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr

080044be <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b082      	sub	sp, #8
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e08d      	b.n	80045ec <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d106      	bne.n	80044ea <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f7fd fc4d 	bl	8001d84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2224      	movs	r2, #36	; 0x24
 80044ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 0201 	bic.w	r2, r2, #1
 8004500:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685a      	ldr	r2, [r3, #4]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800450e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689a      	ldr	r2, [r3, #8]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800451e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d107      	bne.n	8004538 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004534:	609a      	str	r2, [r3, #8]
 8004536:	e006      	b.n	8004546 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004544:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	2b02      	cmp	r3, #2
 800454c:	d108      	bne.n	8004560 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685a      	ldr	r2, [r3, #4]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800455c:	605a      	str	r2, [r3, #4]
 800455e:	e007      	b.n	8004570 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800456e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6812      	ldr	r2, [r2, #0]
 800457a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800457e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004582:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68da      	ldr	r2, [r3, #12]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004592:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	691a      	ldr	r2, [r3, #16]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	69d9      	ldr	r1, [r3, #28]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a1a      	ldr	r2, [r3, #32]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	430a      	orrs	r2, r1
 80045bc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f042 0201 	orr.w	r2, r2, #1
 80045cc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2220      	movs	r2, #32
 80045d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b20      	cmp	r3, #32
 8004608:	d138      	bne.n	800467c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004610:	2b01      	cmp	r3, #1
 8004612:	d101      	bne.n	8004618 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004614:	2302      	movs	r3, #2
 8004616:	e032      	b.n	800467e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2224      	movs	r2, #36	; 0x24
 8004624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 0201 	bic.w	r2, r2, #1
 8004636:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004646:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6819      	ldr	r1, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f042 0201 	orr.w	r2, r2, #1
 8004666:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2220      	movs	r2, #32
 800466c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004678:	2300      	movs	r3, #0
 800467a:	e000      	b.n	800467e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800467c:	2302      	movs	r3, #2
  }
}
 800467e:	4618      	mov	r0, r3
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800468a:	b480      	push	{r7}
 800468c:	b085      	sub	sp, #20
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
 8004692:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b20      	cmp	r3, #32
 800469e:	d139      	bne.n	8004714 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d101      	bne.n	80046ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80046aa:	2302      	movs	r3, #2
 80046ac:	e033      	b.n	8004716 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2224      	movs	r2, #36	; 0x24
 80046ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 0201 	bic.w	r2, r2, #1
 80046cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80046dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	021b      	lsls	r3, r3, #8
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f042 0201 	orr.w	r2, r2, #1
 80046fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2220      	movs	r2, #32
 8004704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004710:	2300      	movs	r3, #0
 8004712:	e000      	b.n	8004716 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004714:	2302      	movs	r3, #2
  }
}
 8004716:	4618      	mov	r0, r3
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
	...

08004724 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af02      	add	r7, sp, #8
 800472a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800472c:	2300      	movs	r3, #0
 800472e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8004730:	f7fd ff6a 	bl	8002608 <HAL_GetTick>
 8004734:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d102      	bne.n	8004742 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	73fb      	strb	r3, [r7, #15]
 8004740:	e092      	b.n	8004868 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474c:	2b00      	cmp	r3, #0
 800474e:	f040 808b 	bne.w	8004868 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7fd fbb8 	bl	8001ec8 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8004758:	f241 3188 	movw	r1, #5000	; 0x1388
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 f88b 	bl	8004878 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	4b42      	ldr	r3, [pc, #264]	; (8004874 <HAL_OSPI_Init+0x150>)
 800476a:	4013      	ands	r3, r2
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	68d1      	ldr	r1, [r2, #12]
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	6912      	ldr	r2, [r2, #16]
 8004774:	3a01      	subs	r2, #1
 8004776:	0412      	lsls	r2, r2, #16
 8004778:	4311      	orrs	r1, r2
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	6952      	ldr	r2, [r2, #20]
 800477e:	3a01      	subs	r2, #1
 8004780:	0212      	lsls	r2, r2, #8
 8004782:	4311      	orrs	r1, r2
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004788:	4311      	orrs	r1, r2
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	69d2      	ldr	r2, [r2, #28]
 800478e:	4311      	orrs	r1, r2
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6812      	ldr	r2, [r2, #0]
 8004794:	430b      	orrs	r3, r1
 8004796:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	0412      	lsls	r2, r2, #16
 80047a2:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	3b01      	subs	r3, #1
 80047b4:	021a      	lsls	r2, r3, #8
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047c2:	9300      	str	r3, [sp, #0]
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	2200      	movs	r2, #0
 80047c8:	2120      	movs	r1, #32
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 fb98 	bl	8004f00 <OSPI_WaitFlagStateUntilTimeout>
 80047d0:	4603      	mov	r3, r0
 80047d2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80047d4:	7bfb      	ldrb	r3, [r7, #15]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d146      	bne.n	8004868 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a1b      	ldr	r3, [r3, #32]
 80047e8:	1e5a      	subs	r2, r3, #1
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	430a      	orrs	r2, r1
 80047f0:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004810:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481c:	431a      	orrs	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	430a      	orrs	r2, r1
 8004824:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f042 0201 	orr.w	r2, r2, #1
 8004836:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	2b02      	cmp	r3, #2
 800483e:	d107      	bne.n	8004850 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	689a      	ldr	r2, [r3, #8]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0202 	orr.w	r2, r2, #2
 800484e:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004858:	d103      	bne.n	8004862 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	645a      	str	r2, [r3, #68]	; 0x44
 8004860:	e002      	b.n	8004868 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2202      	movs	r2, #2
 8004866:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8004868:	7bfb      	ldrb	r3, [r7, #15]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	f8e0f8f4 	.word	0xf8e0f8f4

08004878 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
	...

08004898 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b092      	sub	sp, #72	; 0x48
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048a4:	2300      	movs	r3, #0
 80048a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 80048aa:	2300      	movs	r3, #0
 80048ac:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a08      	ldr	r2, [pc, #32]	; (80048d8 <HAL_OSPIM_Config+0x40>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d105      	bne.n	80048c6 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80048ba:	2300      	movs	r3, #0
 80048bc:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 80048be:	2301      	movs	r3, #1
 80048c0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80048c4:	e004      	b.n	80048d0 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80048c6:	2301      	movs	r3, #1
 80048c8:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80048d0:	2300      	movs	r3, #0
 80048d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80048d6:	e01f      	b.n	8004918 <HAL_OSPIM_Config+0x80>
 80048d8:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 80048dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80048e0:	3301      	adds	r3, #1
 80048e2:	b2d8      	uxtb	r0, r3
 80048e4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80048e8:	f107 0114 	add.w	r1, r7, #20
 80048ec:	4613      	mov	r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	440b      	add	r3, r1
 80048f6:	4619      	mov	r1, r3
 80048f8:	f000 fb3a 	bl	8004f70 <OSPIM_GetConfig>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d005      	beq.n	800490e <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2208      	movs	r2, #8
 800490c:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800490e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004912:	3301      	adds	r3, #1
 8004914:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004918:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800491c:	2b01      	cmp	r3, #1
 800491e:	d9dd      	bls.n	80048dc <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8004920:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004924:	2b00      	cmp	r3, #0
 8004926:	f040 82de 	bne.w	8004ee6 <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800492a:	4bc6      	ldr	r3, [pc, #792]	; (8004c44 <HAL_OSPIM_Config+0x3ac>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00b      	beq.n	800494e <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004936:	4bc3      	ldr	r3, [pc, #780]	; (8004c44 <HAL_OSPIM_Config+0x3ac>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4ac2      	ldr	r2, [pc, #776]	; (8004c44 <HAL_OSPIM_Config+0x3ac>)
 800493c:	f023 0301 	bic.w	r3, r3, #1
 8004940:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8004942:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004946:	f043 0301 	orr.w	r3, r3, #1
 800494a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800494e:	4bbe      	ldr	r3, [pc, #760]	; (8004c48 <HAL_OSPIM_Config+0x3b0>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00b      	beq.n	8004972 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800495a:	4bbb      	ldr	r3, [pc, #748]	; (8004c48 <HAL_OSPIM_Config+0x3b0>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4aba      	ldr	r2, [pc, #744]	; (8004c48 <HAL_OSPIM_Config+0x3b0>)
 8004960:	f023 0301 	bic.w	r3, r3, #1
 8004964:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8004966:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800496a:	f043 0302 	orr.w	r3, r3, #2
 800496e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8004972:	49b6      	ldr	r1, [pc, #728]	; (8004c4c <HAL_OSPIM_Config+0x3b4>)
 8004974:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004976:	4613      	mov	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	3348      	adds	r3, #72	; 0x48
 8004980:	443b      	add	r3, r7
 8004982:	3b2c      	subs	r3, #44	; 0x2c
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	3b01      	subs	r3, #1
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	440b      	add	r3, r1
 800498c:	6859      	ldr	r1, [r3, #4]
 800498e:	48af      	ldr	r0, [pc, #700]	; (8004c4c <HAL_OSPIM_Config+0x3b4>)
 8004990:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004992:	4613      	mov	r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	4413      	add	r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	3348      	adds	r3, #72	; 0x48
 800499c:	443b      	add	r3, r7
 800499e:	3b2c      	subs	r3, #44	; 0x2c
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	3b01      	subs	r3, #1
 80049a4:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	4403      	add	r3, r0
 80049ac:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 80049ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049b0:	4613      	mov	r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4413      	add	r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	3348      	adds	r3, #72	; 0x48
 80049ba:	443b      	add	r3, r7
 80049bc:	3b34      	subs	r3, #52	; 0x34
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 80a1 	beq.w	8004b08 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80049c6:	49a1      	ldr	r1, [pc, #644]	; (8004c4c <HAL_OSPIM_Config+0x3b4>)
 80049c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049ca:	4613      	mov	r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4413      	add	r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	3348      	adds	r3, #72	; 0x48
 80049d4:	443b      	add	r3, r7
 80049d6:	3b34      	subs	r3, #52	; 0x34
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	3b01      	subs	r3, #1
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	440b      	add	r3, r1
 80049e0:	6859      	ldr	r1, [r3, #4]
 80049e2:	489a      	ldr	r0, [pc, #616]	; (8004c4c <HAL_OSPIM_Config+0x3b4>)
 80049e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049e6:	4613      	mov	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	4413      	add	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	3348      	adds	r3, #72	; 0x48
 80049f0:	443b      	add	r3, r7
 80049f2:	3b34      	subs	r3, #52	; 0x34
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	3b01      	subs	r3, #1
 80049f8:	f021 0201 	bic.w	r2, r1, #1
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4403      	add	r3, r0
 8004a00:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8004a02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a04:	4613      	mov	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4413      	add	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	3348      	adds	r3, #72	; 0x48
 8004a0e:	443b      	add	r3, r7
 8004a10:	3b30      	subs	r3, #48	; 0x30
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d01d      	beq.n	8004a54 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8004a18:	498c      	ldr	r1, [pc, #560]	; (8004c4c <HAL_OSPIM_Config+0x3b4>)
 8004a1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	3348      	adds	r3, #72	; 0x48
 8004a26:	443b      	add	r3, r7
 8004a28:	3b30      	subs	r3, #48	; 0x30
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	440b      	add	r3, r1
 8004a32:	6859      	ldr	r1, [r3, #4]
 8004a34:	4885      	ldr	r0, [pc, #532]	; (8004c4c <HAL_OSPIM_Config+0x3b4>)
 8004a36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a38:	4613      	mov	r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	4413      	add	r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	3348      	adds	r3, #72	; 0x48
 8004a42:	443b      	add	r3, r7
 8004a44:	3b30      	subs	r3, #48	; 0x30
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	f021 0210 	bic.w	r2, r1, #16
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	4403      	add	r3, r0
 8004a52:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004a54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a56:	4613      	mov	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	3348      	adds	r3, #72	; 0x48
 8004a60:	443b      	add	r3, r7
 8004a62:	3b28      	subs	r3, #40	; 0x28
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d021      	beq.n	8004aae <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8004a6a:	4978      	ldr	r1, [pc, #480]	; (8004c4c <HAL_OSPIM_Config+0x3b4>)
 8004a6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a6e:	4613      	mov	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4413      	add	r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	3348      	adds	r3, #72	; 0x48
 8004a78:	443b      	add	r3, r7
 8004a7a:	3b28      	subs	r3, #40	; 0x28
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	f003 0301 	and.w	r3, r3, #1
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	440b      	add	r3, r1
 8004a88:	6859      	ldr	r1, [r3, #4]
 8004a8a:	4870      	ldr	r0, [pc, #448]	; (8004c4c <HAL_OSPIM_Config+0x3b4>)
 8004a8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a8e:	4613      	mov	r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	4413      	add	r3, r2
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	3348      	adds	r3, #72	; 0x48
 8004a98:	443b      	add	r3, r7
 8004a9a:	3b28      	subs	r3, #40	; 0x28
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4403      	add	r3, r0
 8004aac:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004aae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4413      	add	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	3348      	adds	r3, #72	; 0x48
 8004aba:	443b      	add	r3, r7
 8004abc:	3b24      	subs	r3, #36	; 0x24
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d021      	beq.n	8004b08 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8004ac4:	4961      	ldr	r1, [pc, #388]	; (8004c4c <HAL_OSPIM_Config+0x3b4>)
 8004ac6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ac8:	4613      	mov	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	3348      	adds	r3, #72	; 0x48
 8004ad2:	443b      	add	r3, r7
 8004ad4:	3b24      	subs	r3, #36	; 0x24
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	440b      	add	r3, r1
 8004ae2:	6859      	ldr	r1, [r3, #4]
 8004ae4:	4859      	ldr	r0, [pc, #356]	; (8004c4c <HAL_OSPIM_Config+0x3b4>)
 8004ae6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ae8:	4613      	mov	r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	3348      	adds	r3, #72	; 0x48
 8004af2:	443b      	add	r3, r7
 8004af4:	3b24      	subs	r3, #36	; 0x24
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	3b01      	subs	r3, #1
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4403      	add	r3, r0
 8004b06:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	6819      	ldr	r1, [r3, #0]
 8004b0c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004b10:	4613      	mov	r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4413      	add	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	3348      	adds	r3, #72	; 0x48
 8004b1a:	443b      	add	r3, r7
 8004b1c:	3b34      	subs	r3, #52	; 0x34
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4299      	cmp	r1, r3
 8004b22:	d038      	beq.n	8004b96 <HAL_OSPIM_Config+0x2fe>
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	6859      	ldr	r1, [r3, #4]
 8004b28:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4413      	add	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	3348      	adds	r3, #72	; 0x48
 8004b36:	443b      	add	r3, r7
 8004b38:	3b30      	subs	r3, #48	; 0x30
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4299      	cmp	r1, r3
 8004b3e:	d02a      	beq.n	8004b96 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	6899      	ldr	r1, [r3, #8]
 8004b44:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004b48:	4613      	mov	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4413      	add	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	3348      	adds	r3, #72	; 0x48
 8004b52:	443b      	add	r3, r7
 8004b54:	3b2c      	subs	r3, #44	; 0x2c
 8004b56:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004b58:	4299      	cmp	r1, r3
 8004b5a:	d01c      	beq.n	8004b96 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	68d9      	ldr	r1, [r3, #12]
 8004b60:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004b64:	4613      	mov	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	3348      	adds	r3, #72	; 0x48
 8004b6e:	443b      	add	r3, r7
 8004b70:	3b28      	subs	r3, #40	; 0x28
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4299      	cmp	r1, r3
 8004b76:	d00e      	beq.n	8004b96 <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	6919      	ldr	r1, [r3, #16]
 8004b7c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004b80:	4613      	mov	r3, r2
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	4413      	add	r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	3348      	adds	r3, #72	; 0x48
 8004b8a:	443b      	add	r3, r7
 8004b8c:	3b24      	subs	r3, #36	; 0x24
 8004b8e:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004b90:	4299      	cmp	r1, r3
 8004b92:	f040 80d3 	bne.w	8004d3c <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8004b96:	492d      	ldr	r1, [pc, #180]	; (8004c4c <HAL_OSPIM_Config+0x3b4>)
 8004b98:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	3348      	adds	r3, #72	; 0x48
 8004ba6:	443b      	add	r3, r7
 8004ba8:	3b34      	subs	r3, #52	; 0x34
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	3b01      	subs	r3, #1
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	440b      	add	r3, r1
 8004bb2:	6859      	ldr	r1, [r3, #4]
 8004bb4:	4825      	ldr	r0, [pc, #148]	; (8004c4c <HAL_OSPIM_Config+0x3b4>)
 8004bb6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004bba:	4613      	mov	r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4413      	add	r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	3348      	adds	r3, #72	; 0x48
 8004bc4:	443b      	add	r3, r7
 8004bc6:	3b34      	subs	r3, #52	; 0x34
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	f021 0201 	bic.w	r2, r1, #1
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4403      	add	r3, r0
 8004bd4:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8004bd6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004bda:	4613      	mov	r3, r2
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	4413      	add	r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	3348      	adds	r3, #72	; 0x48
 8004be4:	443b      	add	r3, r7
 8004be6:	3b30      	subs	r3, #48	; 0x30
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d01f      	beq.n	8004c2e <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8004bee:	4917      	ldr	r1, [pc, #92]	; (8004c4c <HAL_OSPIM_Config+0x3b4>)
 8004bf0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4413      	add	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	3348      	adds	r3, #72	; 0x48
 8004bfe:	443b      	add	r3, r7
 8004c00:	3b30      	subs	r3, #48	; 0x30
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	3b01      	subs	r3, #1
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	440b      	add	r3, r1
 8004c0a:	6859      	ldr	r1, [r3, #4]
 8004c0c:	480f      	ldr	r0, [pc, #60]	; (8004c4c <HAL_OSPIM_Config+0x3b4>)
 8004c0e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004c12:	4613      	mov	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	3348      	adds	r3, #72	; 0x48
 8004c1c:	443b      	add	r3, r7
 8004c1e:	3b30      	subs	r3, #48	; 0x30
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	3b01      	subs	r3, #1
 8004c24:	f021 0210 	bic.w	r2, r1, #16
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4403      	add	r3, r0
 8004c2c:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8004c2e:	4907      	ldr	r1, [pc, #28]	; (8004c4c <HAL_OSPIM_Config+0x3b4>)
 8004c30:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004c34:	4613      	mov	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	3348      	adds	r3, #72	; 0x48
 8004c3e:	443b      	add	r3, r7
 8004c40:	3b2c      	subs	r3, #44	; 0x2c
 8004c42:	e005      	b.n	8004c50 <HAL_OSPIM_Config+0x3b8>
 8004c44:	a0001000 	.word	0xa0001000
 8004c48:	a0001400 	.word	0xa0001400
 8004c4c:	50061c00 	.word	0x50061c00
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	3b01      	subs	r3, #1
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	440b      	add	r3, r1
 8004c58:	6859      	ldr	r1, [r3, #4]
 8004c5a:	48a6      	ldr	r0, [pc, #664]	; (8004ef4 <HAL_OSPIM_Config+0x65c>)
 8004c5c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004c60:	4613      	mov	r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4413      	add	r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	3348      	adds	r3, #72	; 0x48
 8004c6a:	443b      	add	r3, r7
 8004c6c:	3b2c      	subs	r3, #44	; 0x2c
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3b01      	subs	r3, #1
 8004c72:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4403      	add	r3, r0
 8004c7a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004c7c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004c80:	4613      	mov	r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	4413      	add	r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	3348      	adds	r3, #72	; 0x48
 8004c8a:	443b      	add	r3, r7
 8004c8c:	3b28      	subs	r3, #40	; 0x28
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d023      	beq.n	8004cdc <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004c94:	4997      	ldr	r1, [pc, #604]	; (8004ef4 <HAL_OSPIM_Config+0x65c>)
 8004c96:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4413      	add	r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	3348      	adds	r3, #72	; 0x48
 8004ca4:	443b      	add	r3, r7
 8004ca6:	3b28      	subs	r3, #40	; 0x28
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	3b01      	subs	r3, #1
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	440b      	add	r3, r1
 8004cb4:	6859      	ldr	r1, [r3, #4]
 8004cb6:	488f      	ldr	r0, [pc, #572]	; (8004ef4 <HAL_OSPIM_Config+0x65c>)
 8004cb8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	3348      	adds	r3, #72	; 0x48
 8004cc6:	443b      	add	r3, r7
 8004cc8:	3b28      	subs	r3, #40	; 0x28
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4403      	add	r3, r0
 8004cda:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004cdc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	3348      	adds	r3, #72	; 0x48
 8004cea:	443b      	add	r3, r7
 8004cec:	3b24      	subs	r3, #36	; 0x24
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d023      	beq.n	8004d3c <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004cf4:	497f      	ldr	r1, [pc, #508]	; (8004ef4 <HAL_OSPIM_Config+0x65c>)
 8004cf6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	3348      	adds	r3, #72	; 0x48
 8004d04:	443b      	add	r3, r7
 8004d06:	3b24      	subs	r3, #36	; 0x24
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	440b      	add	r3, r1
 8004d14:	6859      	ldr	r1, [r3, #4]
 8004d16:	4877      	ldr	r0, [pc, #476]	; (8004ef4 <HAL_OSPIM_Config+0x65c>)
 8004d18:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4413      	add	r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	3348      	adds	r3, #72	; 0x48
 8004d26:	443b      	add	r3, r7
 8004d28:	3b24      	subs	r3, #36	; 0x24
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4403      	add	r3, r0
 8004d3a:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8004d3c:	4a6d      	ldr	r2, [pc, #436]	; (8004ef4 <HAL_OSPIM_Config+0x65c>)
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	3b01      	subs	r3, #1
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4413      	add	r3, r2
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d50:	025b      	lsls	r3, r3, #9
 8004d52:	431a      	orrs	r2, r3
 8004d54:	4967      	ldr	r1, [pc, #412]	; (8004ef4 <HAL_OSPIM_Config+0x65c>)
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	440b      	add	r3, r1
 8004d64:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8004d66:	4a63      	ldr	r2, [pc, #396]	; (8004ef4 <HAL_OSPIM_Config+0x65c>)
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	4413      	add	r3, r2
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f023 0203 	bic.w	r2, r3, #3
 8004d78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d7a:	005b      	lsls	r3, r3, #1
 8004d7c:	431a      	orrs	r2, r3
 8004d7e:	495d      	ldr	r1, [pc, #372]	; (8004ef4 <HAL_OSPIM_Config+0x65c>)
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	3b01      	subs	r3, #1
 8004d86:	f042 0201 	orr.w	r2, r2, #1
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	440b      	add	r3, r1
 8004d8e:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d014      	beq.n	8004dc2 <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8004d98:	4a56      	ldr	r2, [pc, #344]	; (8004ef4 <HAL_OSPIM_Config+0x65c>)
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4413      	add	r3, r2
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dac:	015b      	lsls	r3, r3, #5
 8004dae:	431a      	orrs	r2, r3
 8004db0:	4950      	ldr	r1, [pc, #320]	; (8004ef4 <HAL_OSPIM_Config+0x65c>)
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	3b01      	subs	r3, #1
 8004db8:	f042 0210 	orr.w	r2, r2, #16
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	440b      	add	r3, r1
 8004dc0:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d019      	beq.n	8004e02 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004dce:	4a49      	ldr	r2, [pc, #292]	; (8004ef4 <HAL_OSPIM_Config+0x65c>)
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	4413      	add	r3, r2
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004de4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004de6:	049b      	lsls	r3, r3, #18
 8004de8:	431a      	orrs	r2, r3
 8004dea:	4942      	ldr	r1, [pc, #264]	; (8004ef4 <HAL_OSPIM_Config+0x65c>)
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	3b01      	subs	r3, #1
 8004df2:	f003 0301 	and.w	r3, r3, #1
 8004df6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	440b      	add	r3, r1
 8004dfe:	605a      	str	r2, [r3, #4]
 8004e00:	e01c      	b.n	8004e3c <HAL_OSPIM_Config+0x5a4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d018      	beq.n	8004e3c <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004e0a:	4a3a      	ldr	r2, [pc, #232]	; (8004ef4 <HAL_OSPIM_Config+0x65c>)
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	3b01      	subs	r3, #1
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4413      	add	r3, r2
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004e20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e22:	069b      	lsls	r3, r3, #26
 8004e24:	431a      	orrs	r2, r3
 8004e26:	4933      	ldr	r1, [pc, #204]	; (8004ef4 <HAL_OSPIM_Config+0x65c>)
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	440b      	add	r3, r1
 8004e3a:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d019      	beq.n	8004e7c <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004e48:	4a2a      	ldr	r2, [pc, #168]	; (8004ef4 <HAL_OSPIM_Config+0x65c>)
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e60:	049b      	lsls	r3, r3, #18
 8004e62:	431a      	orrs	r2, r3
 8004e64:	4923      	ldr	r1, [pc, #140]	; (8004ef4 <HAL_OSPIM_Config+0x65c>)
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	440b      	add	r3, r1
 8004e78:	605a      	str	r2, [r3, #4]
 8004e7a:	e01c      	b.n	8004eb6 <HAL_OSPIM_Config+0x61e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d018      	beq.n	8004eb6 <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004e84:	4a1b      	ldr	r2, [pc, #108]	; (8004ef4 <HAL_OSPIM_Config+0x65c>)
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4413      	add	r3, r2
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004e9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e9c:	069b      	lsls	r3, r3, #26
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	4914      	ldr	r1, [pc, #80]	; (8004ef4 <HAL_OSPIM_Config+0x65c>)
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	440b      	add	r3, r1
 8004eb4:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8004eb6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d005      	beq.n	8004ece <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004ec2:	4b0d      	ldr	r3, [pc, #52]	; (8004ef8 <HAL_OSPIM_Config+0x660>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a0c      	ldr	r2, [pc, #48]	; (8004ef8 <HAL_OSPIM_Config+0x660>)
 8004ec8:	f043 0301 	orr.w	r3, r3, #1
 8004ecc:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8004ece:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d005      	beq.n	8004ee6 <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004eda:	4b08      	ldr	r3, [pc, #32]	; (8004efc <HAL_OSPIM_Config+0x664>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a07      	ldr	r2, [pc, #28]	; (8004efc <HAL_OSPIM_Config+0x664>)
 8004ee0:	f043 0301 	orr.w	r3, r3, #1
 8004ee4:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8004ee6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3748      	adds	r7, #72	; 0x48
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	50061c00 	.word	0x50061c00
 8004ef8:	a0001000 	.word	0xa0001000
 8004efc:	a0001400 	.word	0xa0001400

08004f00 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	603b      	str	r3, [r7, #0]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004f10:	e01a      	b.n	8004f48 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f18:	d016      	beq.n	8004f48 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f1a:	f7fd fb75 	bl	8002608 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	69ba      	ldr	r2, [r7, #24]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d302      	bcc.n	8004f30 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10b      	bne.n	8004f48 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f36:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f3c:	f043 0201 	orr.w	r2, r3, #1
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e00e      	b.n	8004f66 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6a1a      	ldr	r2, [r3, #32]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	4013      	ands	r3, r2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	bf14      	ite	ne
 8004f56:	2301      	movne	r3, #1
 8004f58:	2300      	moveq	r3, #0
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	79fb      	ldrb	r3, [r7, #7]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d1d6      	bne.n	8004f12 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
	...

08004f70 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b087      	sub	sp, #28
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	4603      	mov	r3, r0
 8004f78:	6039      	str	r1, [r7, #0]
 8004f7a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8004f80:	2300      	movs	r3, #0
 8004f82:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8004f84:	79fb      	ldrb	r3, [r7, #7]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d005      	beq.n	8004f96 <OSPIM_GetConfig+0x26>
 8004f8a:	79fb      	ldrb	r3, [r7, #7]
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d802      	bhi.n	8004f96 <OSPIM_GetConfig+0x26>
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d102      	bne.n	8004f9c <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	75fb      	strb	r3, [r7, #23]
 8004f9a:	e08e      	b.n	80050ba <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	2200      	movs	r2, #0
 8004fac:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8004fba:	79fb      	ldrb	r3, [r7, #7]
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d101      	bne.n	8004fc4 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8004fc0:	4b41      	ldr	r3, [pc, #260]	; (80050c8 <OSPIM_GetConfig+0x158>)
 8004fc2:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	60fb      	str	r3, [r7, #12]
 8004fc8:	e074      	b.n	80050b4 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8004fca:	4a40      	ldr	r2, [pc, #256]	; (80050cc <OSPIM_GetConfig+0x15c>)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00a      	beq.n	8004ff6 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8004fe0:	68ba      	ldr	r2, [r7, #8]
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	4053      	eors	r3, r2
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d103      	bne.n	8004ff6 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	1c5a      	adds	r2, r3, #1
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	f003 0310 	and.w	r3, r3, #16
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00a      	beq.n	8005016 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	4053      	eors	r3, r2
 8005006:	f003 0320 	and.w	r3, r3, #32
 800500a:	2b00      	cmp	r3, #0
 800500c:	d103      	bne.n	8005016 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	1c5a      	adds	r2, r3, #1
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00a      	beq.n	8005036 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8005020:	68ba      	ldr	r2, [r7, #8]
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	4053      	eors	r3, r2
 8005026:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800502a:	2b00      	cmp	r3, #0
 800502c:	d103      	bne.n	8005036 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	1c5a      	adds	r2, r3, #1
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d018      	beq.n	8005072 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	4053      	eors	r3, r2
 8005046:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d111      	bne.n	8005072 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d106      	bne.n	8005066 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	3301      	adds	r3, #1
 800505c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	60da      	str	r2, [r3, #12]
 8005064:	e005      	b.n	8005072 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	3301      	adds	r3, #1
 800506a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d018      	beq.n	80050ae <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	4053      	eors	r3, r2
 8005082:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d111      	bne.n	80050ae <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d106      	bne.n	80050a2 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	3301      	adds	r3, #1
 8005098:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	611a      	str	r2, [r3, #16]
 80050a0:	e005      	b.n	80050ae <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	3301      	adds	r3, #1
 80050a6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	3301      	adds	r3, #1
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d987      	bls.n	8004fca <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 80050ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	371c      	adds	r7, #28
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	04040222 	.word	0x04040222
 80050cc:	50061c00 	.word	0x50061c00

080050d0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80050d0:	b480      	push	{r7}
 80050d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050d4:	4b05      	ldr	r3, [pc, #20]	; (80050ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a04      	ldr	r2, [pc, #16]	; (80050ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80050da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050de:	6013      	str	r3, [r2, #0]
}
 80050e0:	bf00      	nop
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	40007000 	.word	0x40007000

080050f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80050f0:	b480      	push	{r7}
 80050f2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80050f4:	4b0d      	ldr	r3, [pc, #52]	; (800512c <HAL_PWREx_GetVoltageRange+0x3c>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80050fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005100:	d102      	bne.n	8005108 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8005102:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005106:	e00b      	b.n	8005120 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005108:	4b08      	ldr	r3, [pc, #32]	; (800512c <HAL_PWREx_GetVoltageRange+0x3c>)
 800510a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800510e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005116:	d102      	bne.n	800511e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8005118:	f44f 7300 	mov.w	r3, #512	; 0x200
 800511c:	e000      	b.n	8005120 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800511e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8005120:	4618      	mov	r0, r3
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	40007000 	.word	0x40007000

08005130 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d141      	bne.n	80051c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800513e:	4b4b      	ldr	r3, [pc, #300]	; (800526c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800514a:	d131      	bne.n	80051b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800514c:	4b47      	ldr	r3, [pc, #284]	; (800526c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800514e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005152:	4a46      	ldr	r2, [pc, #280]	; (800526c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005158:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800515c:	4b43      	ldr	r3, [pc, #268]	; (800526c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005164:	4a41      	ldr	r2, [pc, #260]	; (800526c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005166:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800516a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800516c:	4b40      	ldr	r3, [pc, #256]	; (8005270 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2232      	movs	r2, #50	; 0x32
 8005172:	fb02 f303 	mul.w	r3, r2, r3
 8005176:	4a3f      	ldr	r2, [pc, #252]	; (8005274 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005178:	fba2 2303 	umull	r2, r3, r2, r3
 800517c:	0c9b      	lsrs	r3, r3, #18
 800517e:	3301      	adds	r3, #1
 8005180:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005182:	e002      	b.n	800518a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	3b01      	subs	r3, #1
 8005188:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800518a:	4b38      	ldr	r3, [pc, #224]	; (800526c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005196:	d102      	bne.n	800519e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1f2      	bne.n	8005184 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800519e:	4b33      	ldr	r3, [pc, #204]	; (800526c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051aa:	d158      	bne.n	800525e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e057      	b.n	8005260 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80051b0:	4b2e      	ldr	r3, [pc, #184]	; (800526c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051b6:	4a2d      	ldr	r2, [pc, #180]	; (800526c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80051c0:	e04d      	b.n	800525e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051c8:	d141      	bne.n	800524e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80051ca:	4b28      	ldr	r3, [pc, #160]	; (800526c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80051d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051d6:	d131      	bne.n	800523c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80051d8:	4b24      	ldr	r3, [pc, #144]	; (800526c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051de:	4a23      	ldr	r2, [pc, #140]	; (800526c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80051e8:	4b20      	ldr	r3, [pc, #128]	; (800526c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80051f0:	4a1e      	ldr	r2, [pc, #120]	; (800526c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80051f8:	4b1d      	ldr	r3, [pc, #116]	; (8005270 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2232      	movs	r2, #50	; 0x32
 80051fe:	fb02 f303 	mul.w	r3, r2, r3
 8005202:	4a1c      	ldr	r2, [pc, #112]	; (8005274 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005204:	fba2 2303 	umull	r2, r3, r2, r3
 8005208:	0c9b      	lsrs	r3, r3, #18
 800520a:	3301      	adds	r3, #1
 800520c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800520e:	e002      	b.n	8005216 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	3b01      	subs	r3, #1
 8005214:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005216:	4b15      	ldr	r3, [pc, #84]	; (800526c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800521e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005222:	d102      	bne.n	800522a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1f2      	bne.n	8005210 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800522a:	4b10      	ldr	r3, [pc, #64]	; (800526c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005236:	d112      	bne.n	800525e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e011      	b.n	8005260 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800523c:	4b0b      	ldr	r3, [pc, #44]	; (800526c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800523e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005242:	4a0a      	ldr	r2, [pc, #40]	; (800526c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005248:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800524c:	e007      	b.n	800525e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800524e:	4b07      	ldr	r3, [pc, #28]	; (800526c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005256:	4a05      	ldr	r2, [pc, #20]	; (800526c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005258:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800525c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3714      	adds	r7, #20
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	40007000 	.word	0x40007000
 8005270:	20000000 	.word	0x20000000
 8005274:	431bde83 	.word	0x431bde83

08005278 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b088      	sub	sp, #32
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d102      	bne.n	800528c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	f000 bc08 	b.w	8005a9c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800528c:	4b96      	ldr	r3, [pc, #600]	; (80054e8 <HAL_RCC_OscConfig+0x270>)
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f003 030c 	and.w	r3, r3, #12
 8005294:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005296:	4b94      	ldr	r3, [pc, #592]	; (80054e8 <HAL_RCC_OscConfig+0x270>)
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	f003 0303 	and.w	r3, r3, #3
 800529e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0310 	and.w	r3, r3, #16
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f000 80e4 	beq.w	8005476 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d007      	beq.n	80052c4 <HAL_RCC_OscConfig+0x4c>
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	2b0c      	cmp	r3, #12
 80052b8:	f040 808b 	bne.w	80053d2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	f040 8087 	bne.w	80053d2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80052c4:	4b88      	ldr	r3, [pc, #544]	; (80054e8 <HAL_RCC_OscConfig+0x270>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0302 	and.w	r3, r3, #2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d005      	beq.n	80052dc <HAL_RCC_OscConfig+0x64>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d101      	bne.n	80052dc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e3df      	b.n	8005a9c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a1a      	ldr	r2, [r3, #32]
 80052e0:	4b81      	ldr	r3, [pc, #516]	; (80054e8 <HAL_RCC_OscConfig+0x270>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0308 	and.w	r3, r3, #8
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d004      	beq.n	80052f6 <HAL_RCC_OscConfig+0x7e>
 80052ec:	4b7e      	ldr	r3, [pc, #504]	; (80054e8 <HAL_RCC_OscConfig+0x270>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052f4:	e005      	b.n	8005302 <HAL_RCC_OscConfig+0x8a>
 80052f6:	4b7c      	ldr	r3, [pc, #496]	; (80054e8 <HAL_RCC_OscConfig+0x270>)
 80052f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052fc:	091b      	lsrs	r3, r3, #4
 80052fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005302:	4293      	cmp	r3, r2
 8005304:	d223      	bcs.n	800534e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	4618      	mov	r0, r3
 800530c:	f000 fdcc 	bl	8005ea8 <RCC_SetFlashLatencyFromMSIRange>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d001      	beq.n	800531a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e3c0      	b.n	8005a9c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800531a:	4b73      	ldr	r3, [pc, #460]	; (80054e8 <HAL_RCC_OscConfig+0x270>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a72      	ldr	r2, [pc, #456]	; (80054e8 <HAL_RCC_OscConfig+0x270>)
 8005320:	f043 0308 	orr.w	r3, r3, #8
 8005324:	6013      	str	r3, [r2, #0]
 8005326:	4b70      	ldr	r3, [pc, #448]	; (80054e8 <HAL_RCC_OscConfig+0x270>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	496d      	ldr	r1, [pc, #436]	; (80054e8 <HAL_RCC_OscConfig+0x270>)
 8005334:	4313      	orrs	r3, r2
 8005336:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005338:	4b6b      	ldr	r3, [pc, #428]	; (80054e8 <HAL_RCC_OscConfig+0x270>)
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	69db      	ldr	r3, [r3, #28]
 8005344:	021b      	lsls	r3, r3, #8
 8005346:	4968      	ldr	r1, [pc, #416]	; (80054e8 <HAL_RCC_OscConfig+0x270>)
 8005348:	4313      	orrs	r3, r2
 800534a:	604b      	str	r3, [r1, #4]
 800534c:	e025      	b.n	800539a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800534e:	4b66      	ldr	r3, [pc, #408]	; (80054e8 <HAL_RCC_OscConfig+0x270>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a65      	ldr	r2, [pc, #404]	; (80054e8 <HAL_RCC_OscConfig+0x270>)
 8005354:	f043 0308 	orr.w	r3, r3, #8
 8005358:	6013      	str	r3, [r2, #0]
 800535a:	4b63      	ldr	r3, [pc, #396]	; (80054e8 <HAL_RCC_OscConfig+0x270>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	4960      	ldr	r1, [pc, #384]	; (80054e8 <HAL_RCC_OscConfig+0x270>)
 8005368:	4313      	orrs	r3, r2
 800536a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800536c:	4b5e      	ldr	r3, [pc, #376]	; (80054e8 <HAL_RCC_OscConfig+0x270>)
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	69db      	ldr	r3, [r3, #28]
 8005378:	021b      	lsls	r3, r3, #8
 800537a:	495b      	ldr	r1, [pc, #364]	; (80054e8 <HAL_RCC_OscConfig+0x270>)
 800537c:	4313      	orrs	r3, r2
 800537e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d109      	bne.n	800539a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	4618      	mov	r0, r3
 800538c:	f000 fd8c 	bl	8005ea8 <RCC_SetFlashLatencyFromMSIRange>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e380      	b.n	8005a9c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800539a:	f000 fcc1 	bl	8005d20 <HAL_RCC_GetSysClockFreq>
 800539e:	4602      	mov	r2, r0
 80053a0:	4b51      	ldr	r3, [pc, #324]	; (80054e8 <HAL_RCC_OscConfig+0x270>)
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	091b      	lsrs	r3, r3, #4
 80053a6:	f003 030f 	and.w	r3, r3, #15
 80053aa:	4950      	ldr	r1, [pc, #320]	; (80054ec <HAL_RCC_OscConfig+0x274>)
 80053ac:	5ccb      	ldrb	r3, [r1, r3]
 80053ae:	f003 031f 	and.w	r3, r3, #31
 80053b2:	fa22 f303 	lsr.w	r3, r2, r3
 80053b6:	4a4e      	ldr	r2, [pc, #312]	; (80054f0 <HAL_RCC_OscConfig+0x278>)
 80053b8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80053ba:	4b4e      	ldr	r3, [pc, #312]	; (80054f4 <HAL_RCC_OscConfig+0x27c>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4618      	mov	r0, r3
 80053c0:	f7fd f8d2 	bl	8002568 <HAL_InitTick>
 80053c4:	4603      	mov	r3, r0
 80053c6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80053c8:	7bfb      	ldrb	r3, [r7, #15]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d052      	beq.n	8005474 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80053ce:	7bfb      	ldrb	r3, [r7, #15]
 80053d0:	e364      	b.n	8005a9c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d032      	beq.n	8005440 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80053da:	4b43      	ldr	r3, [pc, #268]	; (80054e8 <HAL_RCC_OscConfig+0x270>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a42      	ldr	r2, [pc, #264]	; (80054e8 <HAL_RCC_OscConfig+0x270>)
 80053e0:	f043 0301 	orr.w	r3, r3, #1
 80053e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80053e6:	f7fd f90f 	bl	8002608 <HAL_GetTick>
 80053ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80053ec:	e008      	b.n	8005400 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053ee:	f7fd f90b 	bl	8002608 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d901      	bls.n	8005400 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e34d      	b.n	8005a9c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005400:	4b39      	ldr	r3, [pc, #228]	; (80054e8 <HAL_RCC_OscConfig+0x270>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0302 	and.w	r3, r3, #2
 8005408:	2b00      	cmp	r3, #0
 800540a:	d0f0      	beq.n	80053ee <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800540c:	4b36      	ldr	r3, [pc, #216]	; (80054e8 <HAL_RCC_OscConfig+0x270>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a35      	ldr	r2, [pc, #212]	; (80054e8 <HAL_RCC_OscConfig+0x270>)
 8005412:	f043 0308 	orr.w	r3, r3, #8
 8005416:	6013      	str	r3, [r2, #0]
 8005418:	4b33      	ldr	r3, [pc, #204]	; (80054e8 <HAL_RCC_OscConfig+0x270>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a1b      	ldr	r3, [r3, #32]
 8005424:	4930      	ldr	r1, [pc, #192]	; (80054e8 <HAL_RCC_OscConfig+0x270>)
 8005426:	4313      	orrs	r3, r2
 8005428:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800542a:	4b2f      	ldr	r3, [pc, #188]	; (80054e8 <HAL_RCC_OscConfig+0x270>)
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	021b      	lsls	r3, r3, #8
 8005438:	492b      	ldr	r1, [pc, #172]	; (80054e8 <HAL_RCC_OscConfig+0x270>)
 800543a:	4313      	orrs	r3, r2
 800543c:	604b      	str	r3, [r1, #4]
 800543e:	e01a      	b.n	8005476 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005440:	4b29      	ldr	r3, [pc, #164]	; (80054e8 <HAL_RCC_OscConfig+0x270>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a28      	ldr	r2, [pc, #160]	; (80054e8 <HAL_RCC_OscConfig+0x270>)
 8005446:	f023 0301 	bic.w	r3, r3, #1
 800544a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800544c:	f7fd f8dc 	bl	8002608 <HAL_GetTick>
 8005450:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005452:	e008      	b.n	8005466 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005454:	f7fd f8d8 	bl	8002608 <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	2b02      	cmp	r3, #2
 8005460:	d901      	bls.n	8005466 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e31a      	b.n	8005a9c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005466:	4b20      	ldr	r3, [pc, #128]	; (80054e8 <HAL_RCC_OscConfig+0x270>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0302 	and.w	r3, r3, #2
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1f0      	bne.n	8005454 <HAL_RCC_OscConfig+0x1dc>
 8005472:	e000      	b.n	8005476 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005474:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b00      	cmp	r3, #0
 8005480:	d073      	beq.n	800556a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	2b08      	cmp	r3, #8
 8005486:	d005      	beq.n	8005494 <HAL_RCC_OscConfig+0x21c>
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	2b0c      	cmp	r3, #12
 800548c:	d10e      	bne.n	80054ac <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	2b03      	cmp	r3, #3
 8005492:	d10b      	bne.n	80054ac <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005494:	4b14      	ldr	r3, [pc, #80]	; (80054e8 <HAL_RCC_OscConfig+0x270>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d063      	beq.n	8005568 <HAL_RCC_OscConfig+0x2f0>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d15f      	bne.n	8005568 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e2f7      	b.n	8005a9c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054b4:	d106      	bne.n	80054c4 <HAL_RCC_OscConfig+0x24c>
 80054b6:	4b0c      	ldr	r3, [pc, #48]	; (80054e8 <HAL_RCC_OscConfig+0x270>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a0b      	ldr	r2, [pc, #44]	; (80054e8 <HAL_RCC_OscConfig+0x270>)
 80054bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054c0:	6013      	str	r3, [r2, #0]
 80054c2:	e025      	b.n	8005510 <HAL_RCC_OscConfig+0x298>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054cc:	d114      	bne.n	80054f8 <HAL_RCC_OscConfig+0x280>
 80054ce:	4b06      	ldr	r3, [pc, #24]	; (80054e8 <HAL_RCC_OscConfig+0x270>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a05      	ldr	r2, [pc, #20]	; (80054e8 <HAL_RCC_OscConfig+0x270>)
 80054d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054d8:	6013      	str	r3, [r2, #0]
 80054da:	4b03      	ldr	r3, [pc, #12]	; (80054e8 <HAL_RCC_OscConfig+0x270>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a02      	ldr	r2, [pc, #8]	; (80054e8 <HAL_RCC_OscConfig+0x270>)
 80054e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054e4:	6013      	str	r3, [r2, #0]
 80054e6:	e013      	b.n	8005510 <HAL_RCC_OscConfig+0x298>
 80054e8:	40021000 	.word	0x40021000
 80054ec:	08009750 	.word	0x08009750
 80054f0:	20000000 	.word	0x20000000
 80054f4:	20000004 	.word	0x20000004
 80054f8:	4ba0      	ldr	r3, [pc, #640]	; (800577c <HAL_RCC_OscConfig+0x504>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a9f      	ldr	r2, [pc, #636]	; (800577c <HAL_RCC_OscConfig+0x504>)
 80054fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005502:	6013      	str	r3, [r2, #0]
 8005504:	4b9d      	ldr	r3, [pc, #628]	; (800577c <HAL_RCC_OscConfig+0x504>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a9c      	ldr	r2, [pc, #624]	; (800577c <HAL_RCC_OscConfig+0x504>)
 800550a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800550e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d013      	beq.n	8005540 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005518:	f7fd f876 	bl	8002608 <HAL_GetTick>
 800551c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800551e:	e008      	b.n	8005532 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005520:	f7fd f872 	bl	8002608 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b64      	cmp	r3, #100	; 0x64
 800552c:	d901      	bls.n	8005532 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e2b4      	b.n	8005a9c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005532:	4b92      	ldr	r3, [pc, #584]	; (800577c <HAL_RCC_OscConfig+0x504>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d0f0      	beq.n	8005520 <HAL_RCC_OscConfig+0x2a8>
 800553e:	e014      	b.n	800556a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005540:	f7fd f862 	bl	8002608 <HAL_GetTick>
 8005544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005546:	e008      	b.n	800555a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005548:	f7fd f85e 	bl	8002608 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	2b64      	cmp	r3, #100	; 0x64
 8005554:	d901      	bls.n	800555a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e2a0      	b.n	8005a9c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800555a:	4b88      	ldr	r3, [pc, #544]	; (800577c <HAL_RCC_OscConfig+0x504>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1f0      	bne.n	8005548 <HAL_RCC_OscConfig+0x2d0>
 8005566:	e000      	b.n	800556a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	2b00      	cmp	r3, #0
 8005574:	d060      	beq.n	8005638 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	2b04      	cmp	r3, #4
 800557a:	d005      	beq.n	8005588 <HAL_RCC_OscConfig+0x310>
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	2b0c      	cmp	r3, #12
 8005580:	d119      	bne.n	80055b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	2b02      	cmp	r3, #2
 8005586:	d116      	bne.n	80055b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005588:	4b7c      	ldr	r3, [pc, #496]	; (800577c <HAL_RCC_OscConfig+0x504>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005590:	2b00      	cmp	r3, #0
 8005592:	d005      	beq.n	80055a0 <HAL_RCC_OscConfig+0x328>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d101      	bne.n	80055a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e27d      	b.n	8005a9c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055a0:	4b76      	ldr	r3, [pc, #472]	; (800577c <HAL_RCC_OscConfig+0x504>)
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	061b      	lsls	r3, r3, #24
 80055ae:	4973      	ldr	r1, [pc, #460]	; (800577c <HAL_RCC_OscConfig+0x504>)
 80055b0:	4313      	orrs	r3, r2
 80055b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055b4:	e040      	b.n	8005638 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d023      	beq.n	8005606 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055be:	4b6f      	ldr	r3, [pc, #444]	; (800577c <HAL_RCC_OscConfig+0x504>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a6e      	ldr	r2, [pc, #440]	; (800577c <HAL_RCC_OscConfig+0x504>)
 80055c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ca:	f7fd f81d 	bl	8002608 <HAL_GetTick>
 80055ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055d0:	e008      	b.n	80055e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055d2:	f7fd f819 	bl	8002608 <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d901      	bls.n	80055e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e25b      	b.n	8005a9c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055e4:	4b65      	ldr	r3, [pc, #404]	; (800577c <HAL_RCC_OscConfig+0x504>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d0f0      	beq.n	80055d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055f0:	4b62      	ldr	r3, [pc, #392]	; (800577c <HAL_RCC_OscConfig+0x504>)
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	061b      	lsls	r3, r3, #24
 80055fe:	495f      	ldr	r1, [pc, #380]	; (800577c <HAL_RCC_OscConfig+0x504>)
 8005600:	4313      	orrs	r3, r2
 8005602:	604b      	str	r3, [r1, #4]
 8005604:	e018      	b.n	8005638 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005606:	4b5d      	ldr	r3, [pc, #372]	; (800577c <HAL_RCC_OscConfig+0x504>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a5c      	ldr	r2, [pc, #368]	; (800577c <HAL_RCC_OscConfig+0x504>)
 800560c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005610:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005612:	f7fc fff9 	bl	8002608 <HAL_GetTick>
 8005616:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005618:	e008      	b.n	800562c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800561a:	f7fc fff5 	bl	8002608 <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	2b02      	cmp	r3, #2
 8005626:	d901      	bls.n	800562c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005628:	2303      	movs	r3, #3
 800562a:	e237      	b.n	8005a9c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800562c:	4b53      	ldr	r3, [pc, #332]	; (800577c <HAL_RCC_OscConfig+0x504>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1f0      	bne.n	800561a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0308 	and.w	r3, r3, #8
 8005640:	2b00      	cmp	r3, #0
 8005642:	d03c      	beq.n	80056be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d01c      	beq.n	8005686 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800564c:	4b4b      	ldr	r3, [pc, #300]	; (800577c <HAL_RCC_OscConfig+0x504>)
 800564e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005652:	4a4a      	ldr	r2, [pc, #296]	; (800577c <HAL_RCC_OscConfig+0x504>)
 8005654:	f043 0301 	orr.w	r3, r3, #1
 8005658:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800565c:	f7fc ffd4 	bl	8002608 <HAL_GetTick>
 8005660:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005662:	e008      	b.n	8005676 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005664:	f7fc ffd0 	bl	8002608 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	2b02      	cmp	r3, #2
 8005670:	d901      	bls.n	8005676 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e212      	b.n	8005a9c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005676:	4b41      	ldr	r3, [pc, #260]	; (800577c <HAL_RCC_OscConfig+0x504>)
 8005678:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800567c:	f003 0302 	and.w	r3, r3, #2
 8005680:	2b00      	cmp	r3, #0
 8005682:	d0ef      	beq.n	8005664 <HAL_RCC_OscConfig+0x3ec>
 8005684:	e01b      	b.n	80056be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005686:	4b3d      	ldr	r3, [pc, #244]	; (800577c <HAL_RCC_OscConfig+0x504>)
 8005688:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800568c:	4a3b      	ldr	r2, [pc, #236]	; (800577c <HAL_RCC_OscConfig+0x504>)
 800568e:	f023 0301 	bic.w	r3, r3, #1
 8005692:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005696:	f7fc ffb7 	bl	8002608 <HAL_GetTick>
 800569a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800569c:	e008      	b.n	80056b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800569e:	f7fc ffb3 	bl	8002608 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d901      	bls.n	80056b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e1f5      	b.n	8005a9c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80056b0:	4b32      	ldr	r3, [pc, #200]	; (800577c <HAL_RCC_OscConfig+0x504>)
 80056b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056b6:	f003 0302 	and.w	r3, r3, #2
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1ef      	bne.n	800569e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0304 	and.w	r3, r3, #4
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	f000 80a6 	beq.w	8005818 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056cc:	2300      	movs	r3, #0
 80056ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80056d0:	4b2a      	ldr	r3, [pc, #168]	; (800577c <HAL_RCC_OscConfig+0x504>)
 80056d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10d      	bne.n	80056f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056dc:	4b27      	ldr	r3, [pc, #156]	; (800577c <HAL_RCC_OscConfig+0x504>)
 80056de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056e0:	4a26      	ldr	r2, [pc, #152]	; (800577c <HAL_RCC_OscConfig+0x504>)
 80056e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056e6:	6593      	str	r3, [r2, #88]	; 0x58
 80056e8:	4b24      	ldr	r3, [pc, #144]	; (800577c <HAL_RCC_OscConfig+0x504>)
 80056ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056f0:	60bb      	str	r3, [r7, #8]
 80056f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056f4:	2301      	movs	r3, #1
 80056f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056f8:	4b21      	ldr	r3, [pc, #132]	; (8005780 <HAL_RCC_OscConfig+0x508>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005700:	2b00      	cmp	r3, #0
 8005702:	d118      	bne.n	8005736 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005704:	4b1e      	ldr	r3, [pc, #120]	; (8005780 <HAL_RCC_OscConfig+0x508>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a1d      	ldr	r2, [pc, #116]	; (8005780 <HAL_RCC_OscConfig+0x508>)
 800570a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800570e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005710:	f7fc ff7a 	bl	8002608 <HAL_GetTick>
 8005714:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005716:	e008      	b.n	800572a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005718:	f7fc ff76 	bl	8002608 <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	2b02      	cmp	r3, #2
 8005724:	d901      	bls.n	800572a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e1b8      	b.n	8005a9c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800572a:	4b15      	ldr	r3, [pc, #84]	; (8005780 <HAL_RCC_OscConfig+0x508>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005732:	2b00      	cmp	r3, #0
 8005734:	d0f0      	beq.n	8005718 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d108      	bne.n	8005750 <HAL_RCC_OscConfig+0x4d8>
 800573e:	4b0f      	ldr	r3, [pc, #60]	; (800577c <HAL_RCC_OscConfig+0x504>)
 8005740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005744:	4a0d      	ldr	r2, [pc, #52]	; (800577c <HAL_RCC_OscConfig+0x504>)
 8005746:	f043 0301 	orr.w	r3, r3, #1
 800574a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800574e:	e029      	b.n	80057a4 <HAL_RCC_OscConfig+0x52c>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	2b05      	cmp	r3, #5
 8005756:	d115      	bne.n	8005784 <HAL_RCC_OscConfig+0x50c>
 8005758:	4b08      	ldr	r3, [pc, #32]	; (800577c <HAL_RCC_OscConfig+0x504>)
 800575a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800575e:	4a07      	ldr	r2, [pc, #28]	; (800577c <HAL_RCC_OscConfig+0x504>)
 8005760:	f043 0304 	orr.w	r3, r3, #4
 8005764:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005768:	4b04      	ldr	r3, [pc, #16]	; (800577c <HAL_RCC_OscConfig+0x504>)
 800576a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800576e:	4a03      	ldr	r2, [pc, #12]	; (800577c <HAL_RCC_OscConfig+0x504>)
 8005770:	f043 0301 	orr.w	r3, r3, #1
 8005774:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005778:	e014      	b.n	80057a4 <HAL_RCC_OscConfig+0x52c>
 800577a:	bf00      	nop
 800577c:	40021000 	.word	0x40021000
 8005780:	40007000 	.word	0x40007000
 8005784:	4b9d      	ldr	r3, [pc, #628]	; (80059fc <HAL_RCC_OscConfig+0x784>)
 8005786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800578a:	4a9c      	ldr	r2, [pc, #624]	; (80059fc <HAL_RCC_OscConfig+0x784>)
 800578c:	f023 0301 	bic.w	r3, r3, #1
 8005790:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005794:	4b99      	ldr	r3, [pc, #612]	; (80059fc <HAL_RCC_OscConfig+0x784>)
 8005796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800579a:	4a98      	ldr	r2, [pc, #608]	; (80059fc <HAL_RCC_OscConfig+0x784>)
 800579c:	f023 0304 	bic.w	r3, r3, #4
 80057a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d016      	beq.n	80057da <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ac:	f7fc ff2c 	bl	8002608 <HAL_GetTick>
 80057b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057b2:	e00a      	b.n	80057ca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057b4:	f7fc ff28 	bl	8002608 <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	f241 3288 	movw	r2, #5000	; 0x1388
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e168      	b.n	8005a9c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057ca:	4b8c      	ldr	r3, [pc, #560]	; (80059fc <HAL_RCC_OscConfig+0x784>)
 80057cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d0:	f003 0302 	and.w	r3, r3, #2
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d0ed      	beq.n	80057b4 <HAL_RCC_OscConfig+0x53c>
 80057d8:	e015      	b.n	8005806 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057da:	f7fc ff15 	bl	8002608 <HAL_GetTick>
 80057de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057e0:	e00a      	b.n	80057f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057e2:	f7fc ff11 	bl	8002608 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d901      	bls.n	80057f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e151      	b.n	8005a9c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057f8:	4b80      	ldr	r3, [pc, #512]	; (80059fc <HAL_RCC_OscConfig+0x784>)
 80057fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057fe:	f003 0302 	and.w	r3, r3, #2
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1ed      	bne.n	80057e2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005806:	7ffb      	ldrb	r3, [r7, #31]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d105      	bne.n	8005818 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800580c:	4b7b      	ldr	r3, [pc, #492]	; (80059fc <HAL_RCC_OscConfig+0x784>)
 800580e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005810:	4a7a      	ldr	r2, [pc, #488]	; (80059fc <HAL_RCC_OscConfig+0x784>)
 8005812:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005816:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0320 	and.w	r3, r3, #32
 8005820:	2b00      	cmp	r3, #0
 8005822:	d03c      	beq.n	800589e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005828:	2b00      	cmp	r3, #0
 800582a:	d01c      	beq.n	8005866 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800582c:	4b73      	ldr	r3, [pc, #460]	; (80059fc <HAL_RCC_OscConfig+0x784>)
 800582e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005832:	4a72      	ldr	r2, [pc, #456]	; (80059fc <HAL_RCC_OscConfig+0x784>)
 8005834:	f043 0301 	orr.w	r3, r3, #1
 8005838:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800583c:	f7fc fee4 	bl	8002608 <HAL_GetTick>
 8005840:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005842:	e008      	b.n	8005856 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005844:	f7fc fee0 	bl	8002608 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	2b02      	cmp	r3, #2
 8005850:	d901      	bls.n	8005856 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e122      	b.n	8005a9c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005856:	4b69      	ldr	r3, [pc, #420]	; (80059fc <HAL_RCC_OscConfig+0x784>)
 8005858:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800585c:	f003 0302 	and.w	r3, r3, #2
 8005860:	2b00      	cmp	r3, #0
 8005862:	d0ef      	beq.n	8005844 <HAL_RCC_OscConfig+0x5cc>
 8005864:	e01b      	b.n	800589e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005866:	4b65      	ldr	r3, [pc, #404]	; (80059fc <HAL_RCC_OscConfig+0x784>)
 8005868:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800586c:	4a63      	ldr	r2, [pc, #396]	; (80059fc <HAL_RCC_OscConfig+0x784>)
 800586e:	f023 0301 	bic.w	r3, r3, #1
 8005872:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005876:	f7fc fec7 	bl	8002608 <HAL_GetTick>
 800587a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800587c:	e008      	b.n	8005890 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800587e:	f7fc fec3 	bl	8002608 <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	2b02      	cmp	r3, #2
 800588a:	d901      	bls.n	8005890 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e105      	b.n	8005a9c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005890:	4b5a      	ldr	r3, [pc, #360]	; (80059fc <HAL_RCC_OscConfig+0x784>)
 8005892:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1ef      	bne.n	800587e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	f000 80f9 	beq.w	8005a9a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	f040 80cf 	bne.w	8005a50 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80058b2:	4b52      	ldr	r3, [pc, #328]	; (80059fc <HAL_RCC_OscConfig+0x784>)
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	f003 0203 	and.w	r2, r3, #3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d12c      	bne.n	8005920 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d0:	3b01      	subs	r3, #1
 80058d2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d123      	bne.n	8005920 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058e2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d11b      	bne.n	8005920 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d113      	bne.n	8005920 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005902:	085b      	lsrs	r3, r3, #1
 8005904:	3b01      	subs	r3, #1
 8005906:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005908:	429a      	cmp	r2, r3
 800590a:	d109      	bne.n	8005920 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005916:	085b      	lsrs	r3, r3, #1
 8005918:	3b01      	subs	r3, #1
 800591a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800591c:	429a      	cmp	r2, r3
 800591e:	d071      	beq.n	8005a04 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	2b0c      	cmp	r3, #12
 8005924:	d068      	beq.n	80059f8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005926:	4b35      	ldr	r3, [pc, #212]	; (80059fc <HAL_RCC_OscConfig+0x784>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d105      	bne.n	800593e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005932:	4b32      	ldr	r3, [pc, #200]	; (80059fc <HAL_RCC_OscConfig+0x784>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d001      	beq.n	8005942 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e0ac      	b.n	8005a9c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005942:	4b2e      	ldr	r3, [pc, #184]	; (80059fc <HAL_RCC_OscConfig+0x784>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a2d      	ldr	r2, [pc, #180]	; (80059fc <HAL_RCC_OscConfig+0x784>)
 8005948:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800594c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800594e:	f7fc fe5b 	bl	8002608 <HAL_GetTick>
 8005952:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005954:	e008      	b.n	8005968 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005956:	f7fc fe57 	bl	8002608 <HAL_GetTick>
 800595a:	4602      	mov	r2, r0
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	2b02      	cmp	r3, #2
 8005962:	d901      	bls.n	8005968 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e099      	b.n	8005a9c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005968:	4b24      	ldr	r3, [pc, #144]	; (80059fc <HAL_RCC_OscConfig+0x784>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d1f0      	bne.n	8005956 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005974:	4b21      	ldr	r3, [pc, #132]	; (80059fc <HAL_RCC_OscConfig+0x784>)
 8005976:	68da      	ldr	r2, [r3, #12]
 8005978:	4b21      	ldr	r3, [pc, #132]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 800597a:	4013      	ands	r3, r2
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005984:	3a01      	subs	r2, #1
 8005986:	0112      	lsls	r2, r2, #4
 8005988:	4311      	orrs	r1, r2
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800598e:	0212      	lsls	r2, r2, #8
 8005990:	4311      	orrs	r1, r2
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005996:	0852      	lsrs	r2, r2, #1
 8005998:	3a01      	subs	r2, #1
 800599a:	0552      	lsls	r2, r2, #21
 800599c:	4311      	orrs	r1, r2
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80059a2:	0852      	lsrs	r2, r2, #1
 80059a4:	3a01      	subs	r2, #1
 80059a6:	0652      	lsls	r2, r2, #25
 80059a8:	4311      	orrs	r1, r2
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80059ae:	06d2      	lsls	r2, r2, #27
 80059b0:	430a      	orrs	r2, r1
 80059b2:	4912      	ldr	r1, [pc, #72]	; (80059fc <HAL_RCC_OscConfig+0x784>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80059b8:	4b10      	ldr	r3, [pc, #64]	; (80059fc <HAL_RCC_OscConfig+0x784>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a0f      	ldr	r2, [pc, #60]	; (80059fc <HAL_RCC_OscConfig+0x784>)
 80059be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80059c4:	4b0d      	ldr	r3, [pc, #52]	; (80059fc <HAL_RCC_OscConfig+0x784>)
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	4a0c      	ldr	r2, [pc, #48]	; (80059fc <HAL_RCC_OscConfig+0x784>)
 80059ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80059d0:	f7fc fe1a 	bl	8002608 <HAL_GetTick>
 80059d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059d6:	e008      	b.n	80059ea <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059d8:	f7fc fe16 	bl	8002608 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d901      	bls.n	80059ea <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e058      	b.n	8005a9c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059ea:	4b04      	ldr	r3, [pc, #16]	; (80059fc <HAL_RCC_OscConfig+0x784>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d0f0      	beq.n	80059d8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80059f6:	e050      	b.n	8005a9a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e04f      	b.n	8005a9c <HAL_RCC_OscConfig+0x824>
 80059fc:	40021000 	.word	0x40021000
 8005a00:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a04:	4b27      	ldr	r3, [pc, #156]	; (8005aa4 <HAL_RCC_OscConfig+0x82c>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d144      	bne.n	8005a9a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005a10:	4b24      	ldr	r3, [pc, #144]	; (8005aa4 <HAL_RCC_OscConfig+0x82c>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a23      	ldr	r2, [pc, #140]	; (8005aa4 <HAL_RCC_OscConfig+0x82c>)
 8005a16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a1a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a1c:	4b21      	ldr	r3, [pc, #132]	; (8005aa4 <HAL_RCC_OscConfig+0x82c>)
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	4a20      	ldr	r2, [pc, #128]	; (8005aa4 <HAL_RCC_OscConfig+0x82c>)
 8005a22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a26:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005a28:	f7fc fdee 	bl	8002608 <HAL_GetTick>
 8005a2c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a2e:	e008      	b.n	8005a42 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a30:	f7fc fdea 	bl	8002608 <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d901      	bls.n	8005a42 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e02c      	b.n	8005a9c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a42:	4b18      	ldr	r3, [pc, #96]	; (8005aa4 <HAL_RCC_OscConfig+0x82c>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d0f0      	beq.n	8005a30 <HAL_RCC_OscConfig+0x7b8>
 8005a4e:	e024      	b.n	8005a9a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	2b0c      	cmp	r3, #12
 8005a54:	d01f      	beq.n	8005a96 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a56:	4b13      	ldr	r3, [pc, #76]	; (8005aa4 <HAL_RCC_OscConfig+0x82c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a12      	ldr	r2, [pc, #72]	; (8005aa4 <HAL_RCC_OscConfig+0x82c>)
 8005a5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a62:	f7fc fdd1 	bl	8002608 <HAL_GetTick>
 8005a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a68:	e008      	b.n	8005a7c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a6a:	f7fc fdcd 	bl	8002608 <HAL_GetTick>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d901      	bls.n	8005a7c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e00f      	b.n	8005a9c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a7c:	4b09      	ldr	r3, [pc, #36]	; (8005aa4 <HAL_RCC_OscConfig+0x82c>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1f0      	bne.n	8005a6a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005a88:	4b06      	ldr	r3, [pc, #24]	; (8005aa4 <HAL_RCC_OscConfig+0x82c>)
 8005a8a:	68da      	ldr	r2, [r3, #12]
 8005a8c:	4905      	ldr	r1, [pc, #20]	; (8005aa4 <HAL_RCC_OscConfig+0x82c>)
 8005a8e:	4b06      	ldr	r3, [pc, #24]	; (8005aa8 <HAL_RCC_OscConfig+0x830>)
 8005a90:	4013      	ands	r3, r2
 8005a92:	60cb      	str	r3, [r1, #12]
 8005a94:	e001      	b.n	8005a9a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e000      	b.n	8005a9c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3720      	adds	r7, #32
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	40021000 	.word	0x40021000
 8005aa8:	feeefffc 	.word	0xfeeefffc

08005aac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b086      	sub	sp, #24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d101      	bne.n	8005ac4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e11d      	b.n	8005d00 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ac4:	4b90      	ldr	r3, [pc, #576]	; (8005d08 <HAL_RCC_ClockConfig+0x25c>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 030f 	and.w	r3, r3, #15
 8005acc:	683a      	ldr	r2, [r7, #0]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d910      	bls.n	8005af4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ad2:	4b8d      	ldr	r3, [pc, #564]	; (8005d08 <HAL_RCC_ClockConfig+0x25c>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f023 020f 	bic.w	r2, r3, #15
 8005ada:	498b      	ldr	r1, [pc, #556]	; (8005d08 <HAL_RCC_ClockConfig+0x25c>)
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ae2:	4b89      	ldr	r3, [pc, #548]	; (8005d08 <HAL_RCC_ClockConfig+0x25c>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 030f 	and.w	r3, r3, #15
 8005aea:	683a      	ldr	r2, [r7, #0]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d001      	beq.n	8005af4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e105      	b.n	8005d00 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0302 	and.w	r3, r3, #2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d010      	beq.n	8005b22 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	689a      	ldr	r2, [r3, #8]
 8005b04:	4b81      	ldr	r3, [pc, #516]	; (8005d0c <HAL_RCC_ClockConfig+0x260>)
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d908      	bls.n	8005b22 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b10:	4b7e      	ldr	r3, [pc, #504]	; (8005d0c <HAL_RCC_ClockConfig+0x260>)
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	497b      	ldr	r1, [pc, #492]	; (8005d0c <HAL_RCC_ClockConfig+0x260>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d079      	beq.n	8005c22 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	2b03      	cmp	r3, #3
 8005b34:	d11e      	bne.n	8005b74 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b36:	4b75      	ldr	r3, [pc, #468]	; (8005d0c <HAL_RCC_ClockConfig+0x260>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e0dc      	b.n	8005d00 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005b46:	f000 fa09 	bl	8005f5c <RCC_GetSysClockFreqFromPLLSource>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	4a70      	ldr	r2, [pc, #448]	; (8005d10 <HAL_RCC_ClockConfig+0x264>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d946      	bls.n	8005be0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005b52:	4b6e      	ldr	r3, [pc, #440]	; (8005d0c <HAL_RCC_ClockConfig+0x260>)
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d140      	bne.n	8005be0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005b5e:	4b6b      	ldr	r3, [pc, #428]	; (8005d0c <HAL_RCC_ClockConfig+0x260>)
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b66:	4a69      	ldr	r2, [pc, #420]	; (8005d0c <HAL_RCC_ClockConfig+0x260>)
 8005b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b6c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005b6e:	2380      	movs	r3, #128	; 0x80
 8005b70:	617b      	str	r3, [r7, #20]
 8005b72:	e035      	b.n	8005be0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d107      	bne.n	8005b8c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b7c:	4b63      	ldr	r3, [pc, #396]	; (8005d0c <HAL_RCC_ClockConfig+0x260>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d115      	bne.n	8005bb4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e0b9      	b.n	8005d00 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d107      	bne.n	8005ba4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b94:	4b5d      	ldr	r3, [pc, #372]	; (8005d0c <HAL_RCC_ClockConfig+0x260>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0302 	and.w	r3, r3, #2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d109      	bne.n	8005bb4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e0ad      	b.n	8005d00 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ba4:	4b59      	ldr	r3, [pc, #356]	; (8005d0c <HAL_RCC_ClockConfig+0x260>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d101      	bne.n	8005bb4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e0a5      	b.n	8005d00 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005bb4:	f000 f8b4 	bl	8005d20 <HAL_RCC_GetSysClockFreq>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	4a55      	ldr	r2, [pc, #340]	; (8005d10 <HAL_RCC_ClockConfig+0x264>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d90f      	bls.n	8005be0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005bc0:	4b52      	ldr	r3, [pc, #328]	; (8005d0c <HAL_RCC_ClockConfig+0x260>)
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d109      	bne.n	8005be0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005bcc:	4b4f      	ldr	r3, [pc, #316]	; (8005d0c <HAL_RCC_ClockConfig+0x260>)
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bd4:	4a4d      	ldr	r2, [pc, #308]	; (8005d0c <HAL_RCC_ClockConfig+0x260>)
 8005bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bda:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005bdc:	2380      	movs	r3, #128	; 0x80
 8005bde:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005be0:	4b4a      	ldr	r3, [pc, #296]	; (8005d0c <HAL_RCC_ClockConfig+0x260>)
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f023 0203 	bic.w	r2, r3, #3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	4947      	ldr	r1, [pc, #284]	; (8005d0c <HAL_RCC_ClockConfig+0x260>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bf2:	f7fc fd09 	bl	8002608 <HAL_GetTick>
 8005bf6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bf8:	e00a      	b.n	8005c10 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bfa:	f7fc fd05 	bl	8002608 <HAL_GetTick>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d901      	bls.n	8005c10 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e077      	b.n	8005d00 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c10:	4b3e      	ldr	r3, [pc, #248]	; (8005d0c <HAL_RCC_ClockConfig+0x260>)
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f003 020c 	and.w	r2, r3, #12
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d1eb      	bne.n	8005bfa <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	2b80      	cmp	r3, #128	; 0x80
 8005c26:	d105      	bne.n	8005c34 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005c28:	4b38      	ldr	r3, [pc, #224]	; (8005d0c <HAL_RCC_ClockConfig+0x260>)
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	4a37      	ldr	r2, [pc, #220]	; (8005d0c <HAL_RCC_ClockConfig+0x260>)
 8005c2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c32:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 0302 	and.w	r3, r3, #2
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d010      	beq.n	8005c62 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	689a      	ldr	r2, [r3, #8]
 8005c44:	4b31      	ldr	r3, [pc, #196]	; (8005d0c <HAL_RCC_ClockConfig+0x260>)
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d208      	bcs.n	8005c62 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c50:	4b2e      	ldr	r3, [pc, #184]	; (8005d0c <HAL_RCC_ClockConfig+0x260>)
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	492b      	ldr	r1, [pc, #172]	; (8005d0c <HAL_RCC_ClockConfig+0x260>)
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c62:	4b29      	ldr	r3, [pc, #164]	; (8005d08 <HAL_RCC_ClockConfig+0x25c>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 030f 	and.w	r3, r3, #15
 8005c6a:	683a      	ldr	r2, [r7, #0]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d210      	bcs.n	8005c92 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c70:	4b25      	ldr	r3, [pc, #148]	; (8005d08 <HAL_RCC_ClockConfig+0x25c>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f023 020f 	bic.w	r2, r3, #15
 8005c78:	4923      	ldr	r1, [pc, #140]	; (8005d08 <HAL_RCC_ClockConfig+0x25c>)
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c80:	4b21      	ldr	r3, [pc, #132]	; (8005d08 <HAL_RCC_ClockConfig+0x25c>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 030f 	and.w	r3, r3, #15
 8005c88:	683a      	ldr	r2, [r7, #0]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d001      	beq.n	8005c92 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e036      	b.n	8005d00 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0304 	and.w	r3, r3, #4
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d008      	beq.n	8005cb0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c9e:	4b1b      	ldr	r3, [pc, #108]	; (8005d0c <HAL_RCC_ClockConfig+0x260>)
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	4918      	ldr	r1, [pc, #96]	; (8005d0c <HAL_RCC_ClockConfig+0x260>)
 8005cac:	4313      	orrs	r3, r2
 8005cae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0308 	and.w	r3, r3, #8
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d009      	beq.n	8005cd0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005cbc:	4b13      	ldr	r3, [pc, #76]	; (8005d0c <HAL_RCC_ClockConfig+0x260>)
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	00db      	lsls	r3, r3, #3
 8005cca:	4910      	ldr	r1, [pc, #64]	; (8005d0c <HAL_RCC_ClockConfig+0x260>)
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005cd0:	f000 f826 	bl	8005d20 <HAL_RCC_GetSysClockFreq>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	4b0d      	ldr	r3, [pc, #52]	; (8005d0c <HAL_RCC_ClockConfig+0x260>)
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	091b      	lsrs	r3, r3, #4
 8005cdc:	f003 030f 	and.w	r3, r3, #15
 8005ce0:	490c      	ldr	r1, [pc, #48]	; (8005d14 <HAL_RCC_ClockConfig+0x268>)
 8005ce2:	5ccb      	ldrb	r3, [r1, r3]
 8005ce4:	f003 031f 	and.w	r3, r3, #31
 8005ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8005cec:	4a0a      	ldr	r2, [pc, #40]	; (8005d18 <HAL_RCC_ClockConfig+0x26c>)
 8005cee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005cf0:	4b0a      	ldr	r3, [pc, #40]	; (8005d1c <HAL_RCC_ClockConfig+0x270>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7fc fc37 	bl	8002568 <HAL_InitTick>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	73fb      	strb	r3, [r7, #15]

  return status;
 8005cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3718      	adds	r7, #24
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	40022000 	.word	0x40022000
 8005d0c:	40021000 	.word	0x40021000
 8005d10:	04c4b400 	.word	0x04c4b400
 8005d14:	08009750 	.word	0x08009750
 8005d18:	20000000 	.word	0x20000000
 8005d1c:	20000004 	.word	0x20000004

08005d20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b089      	sub	sp, #36	; 0x24
 8005d24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005d26:	2300      	movs	r3, #0
 8005d28:	61fb      	str	r3, [r7, #28]
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d2e:	4b3e      	ldr	r3, [pc, #248]	; (8005e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f003 030c 	and.w	r3, r3, #12
 8005d36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d38:	4b3b      	ldr	r3, [pc, #236]	; (8005e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	f003 0303 	and.w	r3, r3, #3
 8005d40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d005      	beq.n	8005d54 <HAL_RCC_GetSysClockFreq+0x34>
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	2b0c      	cmp	r3, #12
 8005d4c:	d121      	bne.n	8005d92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d11e      	bne.n	8005d92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005d54:	4b34      	ldr	r3, [pc, #208]	; (8005e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0308 	and.w	r3, r3, #8
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d107      	bne.n	8005d70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005d60:	4b31      	ldr	r3, [pc, #196]	; (8005e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d66:	0a1b      	lsrs	r3, r3, #8
 8005d68:	f003 030f 	and.w	r3, r3, #15
 8005d6c:	61fb      	str	r3, [r7, #28]
 8005d6e:	e005      	b.n	8005d7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005d70:	4b2d      	ldr	r3, [pc, #180]	; (8005e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	091b      	lsrs	r3, r3, #4
 8005d76:	f003 030f 	and.w	r3, r3, #15
 8005d7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005d7c:	4a2b      	ldr	r2, [pc, #172]	; (8005e2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10d      	bne.n	8005da8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005d90:	e00a      	b.n	8005da8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	2b04      	cmp	r3, #4
 8005d96:	d102      	bne.n	8005d9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005d98:	4b25      	ldr	r3, [pc, #148]	; (8005e30 <HAL_RCC_GetSysClockFreq+0x110>)
 8005d9a:	61bb      	str	r3, [r7, #24]
 8005d9c:	e004      	b.n	8005da8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	2b08      	cmp	r3, #8
 8005da2:	d101      	bne.n	8005da8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005da4:	4b23      	ldr	r3, [pc, #140]	; (8005e34 <HAL_RCC_GetSysClockFreq+0x114>)
 8005da6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	2b0c      	cmp	r3, #12
 8005dac:	d134      	bne.n	8005e18 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005dae:	4b1e      	ldr	r3, [pc, #120]	; (8005e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	f003 0303 	and.w	r3, r3, #3
 8005db6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d003      	beq.n	8005dc6 <HAL_RCC_GetSysClockFreq+0xa6>
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	2b03      	cmp	r3, #3
 8005dc2:	d003      	beq.n	8005dcc <HAL_RCC_GetSysClockFreq+0xac>
 8005dc4:	e005      	b.n	8005dd2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005dc6:	4b1a      	ldr	r3, [pc, #104]	; (8005e30 <HAL_RCC_GetSysClockFreq+0x110>)
 8005dc8:	617b      	str	r3, [r7, #20]
      break;
 8005dca:	e005      	b.n	8005dd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005dcc:	4b19      	ldr	r3, [pc, #100]	; (8005e34 <HAL_RCC_GetSysClockFreq+0x114>)
 8005dce:	617b      	str	r3, [r7, #20]
      break;
 8005dd0:	e002      	b.n	8005dd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	617b      	str	r3, [r7, #20]
      break;
 8005dd6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005dd8:	4b13      	ldr	r3, [pc, #76]	; (8005e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	091b      	lsrs	r3, r3, #4
 8005dde:	f003 030f 	and.w	r3, r3, #15
 8005de2:	3301      	adds	r3, #1
 8005de4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005de6:	4b10      	ldr	r3, [pc, #64]	; (8005e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	0a1b      	lsrs	r3, r3, #8
 8005dec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	fb03 f202 	mul.w	r2, r3, r2
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dfc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005dfe:	4b0a      	ldr	r3, [pc, #40]	; (8005e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	0e5b      	lsrs	r3, r3, #25
 8005e04:	f003 0303 	and.w	r3, r3, #3
 8005e08:	3301      	adds	r3, #1
 8005e0a:	005b      	lsls	r3, r3, #1
 8005e0c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005e0e:	697a      	ldr	r2, [r7, #20]
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e16:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005e18:	69bb      	ldr	r3, [r7, #24]
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3724      	adds	r7, #36	; 0x24
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	40021000 	.word	0x40021000
 8005e2c:	08009768 	.word	0x08009768
 8005e30:	00f42400 	.word	0x00f42400
 8005e34:	007a1200 	.word	0x007a1200

08005e38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e3c:	4b03      	ldr	r3, [pc, #12]	; (8005e4c <HAL_RCC_GetHCLKFreq+0x14>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	20000000 	.word	0x20000000

08005e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005e54:	f7ff fff0 	bl	8005e38 <HAL_RCC_GetHCLKFreq>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	4b06      	ldr	r3, [pc, #24]	; (8005e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	0a1b      	lsrs	r3, r3, #8
 8005e60:	f003 0307 	and.w	r3, r3, #7
 8005e64:	4904      	ldr	r1, [pc, #16]	; (8005e78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e66:	5ccb      	ldrb	r3, [r1, r3]
 8005e68:	f003 031f 	and.w	r3, r3, #31
 8005e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	40021000 	.word	0x40021000
 8005e78:	08009760 	.word	0x08009760

08005e7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005e80:	f7ff ffda 	bl	8005e38 <HAL_RCC_GetHCLKFreq>
 8005e84:	4602      	mov	r2, r0
 8005e86:	4b06      	ldr	r3, [pc, #24]	; (8005ea0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	0adb      	lsrs	r3, r3, #11
 8005e8c:	f003 0307 	and.w	r3, r3, #7
 8005e90:	4904      	ldr	r1, [pc, #16]	; (8005ea4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e92:	5ccb      	ldrb	r3, [r1, r3]
 8005e94:	f003 031f 	and.w	r3, r3, #31
 8005e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	40021000 	.word	0x40021000
 8005ea4:	08009760 	.word	0x08009760

08005ea8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b086      	sub	sp, #24
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005eb4:	4b27      	ldr	r3, [pc, #156]	; (8005f54 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d003      	beq.n	8005ec8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005ec0:	f7ff f916 	bl	80050f0 <HAL_PWREx_GetVoltageRange>
 8005ec4:	6178      	str	r0, [r7, #20]
 8005ec6:	e014      	b.n	8005ef2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ec8:	4b22      	ldr	r3, [pc, #136]	; (8005f54 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ecc:	4a21      	ldr	r2, [pc, #132]	; (8005f54 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ed2:	6593      	str	r3, [r2, #88]	; 0x58
 8005ed4:	4b1f      	ldr	r3, [pc, #124]	; (8005f54 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005edc:	60fb      	str	r3, [r7, #12]
 8005ede:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005ee0:	f7ff f906 	bl	80050f0 <HAL_PWREx_GetVoltageRange>
 8005ee4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005ee6:	4b1b      	ldr	r3, [pc, #108]	; (8005f54 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eea:	4a1a      	ldr	r2, [pc, #104]	; (8005f54 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005eec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ef0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ef8:	d10b      	bne.n	8005f12 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2b80      	cmp	r3, #128	; 0x80
 8005efe:	d913      	bls.n	8005f28 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2ba0      	cmp	r3, #160	; 0xa0
 8005f04:	d902      	bls.n	8005f0c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005f06:	2302      	movs	r3, #2
 8005f08:	613b      	str	r3, [r7, #16]
 8005f0a:	e00d      	b.n	8005f28 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	613b      	str	r3, [r7, #16]
 8005f10:	e00a      	b.n	8005f28 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2b7f      	cmp	r3, #127	; 0x7f
 8005f16:	d902      	bls.n	8005f1e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005f18:	2302      	movs	r3, #2
 8005f1a:	613b      	str	r3, [r7, #16]
 8005f1c:	e004      	b.n	8005f28 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2b70      	cmp	r3, #112	; 0x70
 8005f22:	d101      	bne.n	8005f28 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005f24:	2301      	movs	r3, #1
 8005f26:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005f28:	4b0b      	ldr	r3, [pc, #44]	; (8005f58 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f023 020f 	bic.w	r2, r3, #15
 8005f30:	4909      	ldr	r1, [pc, #36]	; (8005f58 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005f38:	4b07      	ldr	r3, [pc, #28]	; (8005f58 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 030f 	and.w	r3, r3, #15
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d001      	beq.n	8005f4a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e000      	b.n	8005f4c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3718      	adds	r7, #24
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	40021000 	.word	0x40021000
 8005f58:	40022000 	.word	0x40022000

08005f5c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b087      	sub	sp, #28
 8005f60:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f62:	4b2d      	ldr	r3, [pc, #180]	; (8006018 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	f003 0303 	and.w	r3, r3, #3
 8005f6a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2b03      	cmp	r3, #3
 8005f70:	d00b      	beq.n	8005f8a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2b03      	cmp	r3, #3
 8005f76:	d825      	bhi.n	8005fc4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d008      	beq.n	8005f90 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d11f      	bne.n	8005fc4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005f84:	4b25      	ldr	r3, [pc, #148]	; (800601c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005f86:	613b      	str	r3, [r7, #16]
    break;
 8005f88:	e01f      	b.n	8005fca <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005f8a:	4b25      	ldr	r3, [pc, #148]	; (8006020 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005f8c:	613b      	str	r3, [r7, #16]
    break;
 8005f8e:	e01c      	b.n	8005fca <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005f90:	4b21      	ldr	r3, [pc, #132]	; (8006018 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0308 	and.w	r3, r3, #8
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d107      	bne.n	8005fac <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005f9c:	4b1e      	ldr	r3, [pc, #120]	; (8006018 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fa2:	0a1b      	lsrs	r3, r3, #8
 8005fa4:	f003 030f 	and.w	r3, r3, #15
 8005fa8:	617b      	str	r3, [r7, #20]
 8005faa:	e005      	b.n	8005fb8 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005fac:	4b1a      	ldr	r3, [pc, #104]	; (8006018 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	091b      	lsrs	r3, r3, #4
 8005fb2:	f003 030f 	and.w	r3, r3, #15
 8005fb6:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005fb8:	4a1a      	ldr	r2, [pc, #104]	; (8006024 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fc0:	613b      	str	r3, [r7, #16]
    break;
 8005fc2:	e002      	b.n	8005fca <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	613b      	str	r3, [r7, #16]
    break;
 8005fc8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005fca:	4b13      	ldr	r3, [pc, #76]	; (8006018 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	091b      	lsrs	r3, r3, #4
 8005fd0:	f003 030f 	and.w	r3, r3, #15
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005fd8:	4b0f      	ldr	r3, [pc, #60]	; (8006018 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	0a1b      	lsrs	r3, r3, #8
 8005fde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	fb03 f202 	mul.w	r2, r3, r2
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fee:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ff0:	4b09      	ldr	r3, [pc, #36]	; (8006018 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	0e5b      	lsrs	r3, r3, #25
 8005ff6:	f003 0303 	and.w	r3, r3, #3
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	005b      	lsls	r3, r3, #1
 8005ffe:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	fbb2 f3f3 	udiv	r3, r2, r3
 8006008:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800600a:	683b      	ldr	r3, [r7, #0]
}
 800600c:	4618      	mov	r0, r3
 800600e:	371c      	adds	r7, #28
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr
 8006018:	40021000 	.word	0x40021000
 800601c:	00f42400 	.word	0x00f42400
 8006020:	007a1200 	.word	0x007a1200
 8006024:	08009768 	.word	0x08009768

08006028 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006030:	2300      	movs	r3, #0
 8006032:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006034:	2300      	movs	r3, #0
 8006036:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006040:	2b00      	cmp	r3, #0
 8006042:	d040      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006048:	2b80      	cmp	r3, #128	; 0x80
 800604a:	d02a      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800604c:	2b80      	cmp	r3, #128	; 0x80
 800604e:	d825      	bhi.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006050:	2b60      	cmp	r3, #96	; 0x60
 8006052:	d026      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006054:	2b60      	cmp	r3, #96	; 0x60
 8006056:	d821      	bhi.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006058:	2b40      	cmp	r3, #64	; 0x40
 800605a:	d006      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800605c:	2b40      	cmp	r3, #64	; 0x40
 800605e:	d81d      	bhi.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006060:	2b00      	cmp	r3, #0
 8006062:	d009      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8006064:	2b20      	cmp	r3, #32
 8006066:	d010      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8006068:	e018      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800606a:	4b89      	ldr	r3, [pc, #548]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	4a88      	ldr	r2, [pc, #544]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006074:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006076:	e015      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	3304      	adds	r3, #4
 800607c:	2100      	movs	r1, #0
 800607e:	4618      	mov	r0, r3
 8006080:	f000 fb12 	bl	80066a8 <RCCEx_PLLSAI1_Config>
 8006084:	4603      	mov	r3, r0
 8006086:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006088:	e00c      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	3320      	adds	r3, #32
 800608e:	2100      	movs	r1, #0
 8006090:	4618      	mov	r0, r3
 8006092:	f000 fbfd 	bl	8006890 <RCCEx_PLLSAI2_Config>
 8006096:	4603      	mov	r3, r0
 8006098:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800609a:	e003      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	74fb      	strb	r3, [r7, #19]
      break;
 80060a0:	e000      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80060a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060a4:	7cfb      	ldrb	r3, [r7, #19]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10b      	bne.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80060aa:	4b79      	ldr	r3, [pc, #484]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060b0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060b8:	4975      	ldr	r1, [pc, #468]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060ba:	4313      	orrs	r3, r2
 80060bc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80060c0:	e001      	b.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060c2:	7cfb      	ldrb	r3, [r7, #19]
 80060c4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d047      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060da:	d030      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80060dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060e0:	d82a      	bhi.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80060e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060e6:	d02a      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80060e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060ec:	d824      	bhi.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80060ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060f2:	d008      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80060f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060f8:	d81e      	bhi.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00a      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80060fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006102:	d010      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006104:	e018      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006106:	4b62      	ldr	r3, [pc, #392]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	4a61      	ldr	r2, [pc, #388]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800610c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006110:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006112:	e015      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	3304      	adds	r3, #4
 8006118:	2100      	movs	r1, #0
 800611a:	4618      	mov	r0, r3
 800611c:	f000 fac4 	bl	80066a8 <RCCEx_PLLSAI1_Config>
 8006120:	4603      	mov	r3, r0
 8006122:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006124:	e00c      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	3320      	adds	r3, #32
 800612a:	2100      	movs	r1, #0
 800612c:	4618      	mov	r0, r3
 800612e:	f000 fbaf 	bl	8006890 <RCCEx_PLLSAI2_Config>
 8006132:	4603      	mov	r3, r0
 8006134:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006136:	e003      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	74fb      	strb	r3, [r7, #19]
      break;
 800613c:	e000      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800613e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006140:	7cfb      	ldrb	r3, [r7, #19]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10b      	bne.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006146:	4b52      	ldr	r3, [pc, #328]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006148:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800614c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006154:	494e      	ldr	r1, [pc, #312]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006156:	4313      	orrs	r3, r2
 8006158:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800615c:	e001      	b.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800615e:	7cfb      	ldrb	r3, [r7, #19]
 8006160:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800616a:	2b00      	cmp	r3, #0
 800616c:	f000 809f 	beq.w	80062ae <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006170:	2300      	movs	r3, #0
 8006172:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006174:	4b46      	ldr	r3, [pc, #280]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d101      	bne.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006180:	2301      	movs	r3, #1
 8006182:	e000      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006184:	2300      	movs	r3, #0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00d      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800618a:	4b41      	ldr	r3, [pc, #260]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800618c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800618e:	4a40      	ldr	r2, [pc, #256]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006194:	6593      	str	r3, [r2, #88]	; 0x58
 8006196:	4b3e      	ldr	r3, [pc, #248]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800619a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800619e:	60bb      	str	r3, [r7, #8]
 80061a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061a2:	2301      	movs	r3, #1
 80061a4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061a6:	4b3b      	ldr	r3, [pc, #236]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a3a      	ldr	r2, [pc, #232]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80061ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061b2:	f7fc fa29 	bl	8002608 <HAL_GetTick>
 80061b6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80061b8:	e009      	b.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061ba:	f7fc fa25 	bl	8002608 <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d902      	bls.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	74fb      	strb	r3, [r7, #19]
        break;
 80061cc:	e005      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80061ce:	4b31      	ldr	r3, [pc, #196]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d0ef      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80061da:	7cfb      	ldrb	r3, [r7, #19]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d15b      	bne.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80061e0:	4b2b      	ldr	r3, [pc, #172]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061ea:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d01f      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d019      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80061fe:	4b24      	ldr	r3, [pc, #144]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006208:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800620a:	4b21      	ldr	r3, [pc, #132]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800620c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006210:	4a1f      	ldr	r2, [pc, #124]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006216:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800621a:	4b1d      	ldr	r3, [pc, #116]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800621c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006220:	4a1b      	ldr	r2, [pc, #108]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006226:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800622a:	4a19      	ldr	r2, [pc, #100]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	f003 0301 	and.w	r3, r3, #1
 8006238:	2b00      	cmp	r3, #0
 800623a:	d016      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800623c:	f7fc f9e4 	bl	8002608 <HAL_GetTick>
 8006240:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006242:	e00b      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006244:	f7fc f9e0 	bl	8002608 <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006252:	4293      	cmp	r3, r2
 8006254:	d902      	bls.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	74fb      	strb	r3, [r7, #19]
            break;
 800625a:	e006      	b.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800625c:	4b0c      	ldr	r3, [pc, #48]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800625e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006262:	f003 0302 	and.w	r3, r3, #2
 8006266:	2b00      	cmp	r3, #0
 8006268:	d0ec      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800626a:	7cfb      	ldrb	r3, [r7, #19]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10c      	bne.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006270:	4b07      	ldr	r3, [pc, #28]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006276:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006280:	4903      	ldr	r1, [pc, #12]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006282:	4313      	orrs	r3, r2
 8006284:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006288:	e008      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800628a:	7cfb      	ldrb	r3, [r7, #19]
 800628c:	74bb      	strb	r3, [r7, #18]
 800628e:	e005      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8006290:	40021000 	.word	0x40021000
 8006294:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006298:	7cfb      	ldrb	r3, [r7, #19]
 800629a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800629c:	7c7b      	ldrb	r3, [r7, #17]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d105      	bne.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062a2:	4ba0      	ldr	r3, [pc, #640]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062a6:	4a9f      	ldr	r2, [pc, #636]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00a      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80062ba:	4b9a      	ldr	r3, [pc, #616]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062c0:	f023 0203 	bic.w	r2, r3, #3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062c8:	4996      	ldr	r1, [pc, #600]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062ca:	4313      	orrs	r3, r2
 80062cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0302 	and.w	r3, r3, #2
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00a      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80062dc:	4b91      	ldr	r3, [pc, #580]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062e2:	f023 020c 	bic.w	r2, r3, #12
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ea:	498e      	ldr	r1, [pc, #568]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062ec:	4313      	orrs	r3, r2
 80062ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 0304 	and.w	r3, r3, #4
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00a      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80062fe:	4b89      	ldr	r3, [pc, #548]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006304:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800630c:	4985      	ldr	r1, [pc, #532]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800630e:	4313      	orrs	r3, r2
 8006310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0308 	and.w	r3, r3, #8
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00a      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006320:	4b80      	ldr	r3, [pc, #512]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006326:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800632e:	497d      	ldr	r1, [pc, #500]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006330:	4313      	orrs	r3, r2
 8006332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0310 	and.w	r3, r3, #16
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00a      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006342:	4b78      	ldr	r3, [pc, #480]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006348:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006350:	4974      	ldr	r1, [pc, #464]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006352:	4313      	orrs	r3, r2
 8006354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0320 	and.w	r3, r3, #32
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00a      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006364:	4b6f      	ldr	r3, [pc, #444]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800636a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006372:	496c      	ldr	r1, [pc, #432]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006374:	4313      	orrs	r3, r2
 8006376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00a      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006386:	4b67      	ldr	r3, [pc, #412]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800638c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006394:	4963      	ldr	r1, [pc, #396]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006396:	4313      	orrs	r3, r2
 8006398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00a      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80063a8:	4b5e      	ldr	r3, [pc, #376]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063b6:	495b      	ldr	r1, [pc, #364]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00a      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80063ca:	4b56      	ldr	r3, [pc, #344]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d8:	4952      	ldr	r1, [pc, #328]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00a      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80063ec:	4b4d      	ldr	r3, [pc, #308]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063fa:	494a      	ldr	r1, [pc, #296]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063fc:	4313      	orrs	r3, r2
 80063fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00a      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800640e:	4b45      	ldr	r3, [pc, #276]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006414:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800641c:	4941      	ldr	r1, [pc, #260]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800641e:	4313      	orrs	r3, r2
 8006420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00a      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006430:	4b3c      	ldr	r3, [pc, #240]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006432:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006436:	f023 0203 	bic.w	r2, r3, #3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800643e:	4939      	ldr	r1, [pc, #228]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006440:	4313      	orrs	r3, r2
 8006442:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d028      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006452:	4b34      	ldr	r3, [pc, #208]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006458:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006460:	4930      	ldr	r1, [pc, #192]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006462:	4313      	orrs	r3, r2
 8006464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800646c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006470:	d106      	bne.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006472:	4b2c      	ldr	r3, [pc, #176]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	4a2b      	ldr	r2, [pc, #172]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006478:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800647c:	60d3      	str	r3, [r2, #12]
 800647e:	e011      	b.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006484:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006488:	d10c      	bne.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	3304      	adds	r3, #4
 800648e:	2101      	movs	r1, #1
 8006490:	4618      	mov	r0, r3
 8006492:	f000 f909 	bl	80066a8 <RCCEx_PLLSAI1_Config>
 8006496:	4603      	mov	r3, r0
 8006498:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800649a:	7cfb      	ldrb	r3, [r7, #19]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d001      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80064a0:	7cfb      	ldrb	r3, [r7, #19]
 80064a2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d04d      	beq.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064b8:	d108      	bne.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80064ba:	4b1a      	ldr	r3, [pc, #104]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064c0:	4a18      	ldr	r2, [pc, #96]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80064c6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80064ca:	e012      	b.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80064cc:	4b15      	ldr	r3, [pc, #84]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064d2:	4a14      	ldr	r2, [pc, #80]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064d8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80064dc:	4b11      	ldr	r3, [pc, #68]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064ea:	490e      	ldr	r1, [pc, #56]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064ec:	4313      	orrs	r3, r2
 80064ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064fa:	d106      	bne.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064fc:	4b09      	ldr	r3, [pc, #36]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	4a08      	ldr	r2, [pc, #32]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006502:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006506:	60d3      	str	r3, [r2, #12]
 8006508:	e020      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800650e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006512:	d109      	bne.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006514:	4b03      	ldr	r3, [pc, #12]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	4a02      	ldr	r2, [pc, #8]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800651a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800651e:	60d3      	str	r3, [r2, #12]
 8006520:	e014      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006522:	bf00      	nop
 8006524:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800652c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006530:	d10c      	bne.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	3304      	adds	r3, #4
 8006536:	2101      	movs	r1, #1
 8006538:	4618      	mov	r0, r3
 800653a:	f000 f8b5 	bl	80066a8 <RCCEx_PLLSAI1_Config>
 800653e:	4603      	mov	r3, r0
 8006540:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006542:	7cfb      	ldrb	r3, [r7, #19]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d001      	beq.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006548:	7cfb      	ldrb	r3, [r7, #19]
 800654a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006554:	2b00      	cmp	r3, #0
 8006556:	d028      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006558:	4b4a      	ldr	r3, [pc, #296]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800655a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800655e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006566:	4947      	ldr	r1, [pc, #284]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006568:	4313      	orrs	r3, r2
 800656a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006572:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006576:	d106      	bne.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006578:	4b42      	ldr	r3, [pc, #264]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	4a41      	ldr	r2, [pc, #260]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800657e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006582:	60d3      	str	r3, [r2, #12]
 8006584:	e011      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800658a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800658e:	d10c      	bne.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	3304      	adds	r3, #4
 8006594:	2101      	movs	r1, #1
 8006596:	4618      	mov	r0, r3
 8006598:	f000 f886 	bl	80066a8 <RCCEx_PLLSAI1_Config>
 800659c:	4603      	mov	r3, r0
 800659e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80065a0:	7cfb      	ldrb	r3, [r7, #19]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d001      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80065a6:	7cfb      	ldrb	r3, [r7, #19]
 80065a8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d01e      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80065b6:	4b33      	ldr	r3, [pc, #204]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065bc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065c6:	492f      	ldr	r1, [pc, #188]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065c8:	4313      	orrs	r3, r2
 80065ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065d8:	d10c      	bne.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	3304      	adds	r3, #4
 80065de:	2102      	movs	r1, #2
 80065e0:	4618      	mov	r0, r3
 80065e2:	f000 f861 	bl	80066a8 <RCCEx_PLLSAI1_Config>
 80065e6:	4603      	mov	r3, r0
 80065e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80065ea:	7cfb      	ldrb	r3, [r7, #19]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d001      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80065f0:	7cfb      	ldrb	r3, [r7, #19]
 80065f2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00b      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006600:	4b20      	ldr	r3, [pc, #128]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006602:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006606:	f023 0204 	bic.w	r2, r3, #4
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006610:	491c      	ldr	r1, [pc, #112]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006612:	4313      	orrs	r3, r2
 8006614:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00b      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006624:	4b17      	ldr	r3, [pc, #92]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006626:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800662a:	f023 0218 	bic.w	r2, r3, #24
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006634:	4913      	ldr	r1, [pc, #76]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006636:	4313      	orrs	r3, r2
 8006638:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d017      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006648:	4b0e      	ldr	r3, [pc, #56]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800664a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800664e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006658:	490a      	ldr	r1, [pc, #40]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800665a:	4313      	orrs	r3, r2
 800665c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006666:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800666a:	d105      	bne.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800666c:	4b05      	ldr	r3, [pc, #20]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	4a04      	ldr	r2, [pc, #16]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006672:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006676:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006678:	7cbb      	ldrb	r3, [r7, #18]
}
 800667a:	4618      	mov	r0, r3
 800667c:	3718      	adds	r7, #24
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	40021000 	.word	0x40021000

08006688 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006688:	b480      	push	{r7}
 800668a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800668c:	4b05      	ldr	r3, [pc, #20]	; (80066a4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a04      	ldr	r2, [pc, #16]	; (80066a4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006692:	f043 0304 	orr.w	r3, r3, #4
 8006696:	6013      	str	r3, [r2, #0]
}
 8006698:	bf00      	nop
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	40021000 	.word	0x40021000

080066a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066b2:	2300      	movs	r3, #0
 80066b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80066b6:	4b72      	ldr	r3, [pc, #456]	; (8006880 <RCCEx_PLLSAI1_Config+0x1d8>)
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	f003 0303 	and.w	r3, r3, #3
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00e      	beq.n	80066e0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80066c2:	4b6f      	ldr	r3, [pc, #444]	; (8006880 <RCCEx_PLLSAI1_Config+0x1d8>)
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	f003 0203 	and.w	r2, r3, #3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d103      	bne.n	80066da <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
       ||
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d142      	bne.n	8006760 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	73fb      	strb	r3, [r7, #15]
 80066de:	e03f      	b.n	8006760 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2b03      	cmp	r3, #3
 80066e6:	d018      	beq.n	800671a <RCCEx_PLLSAI1_Config+0x72>
 80066e8:	2b03      	cmp	r3, #3
 80066ea:	d825      	bhi.n	8006738 <RCCEx_PLLSAI1_Config+0x90>
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d002      	beq.n	80066f6 <RCCEx_PLLSAI1_Config+0x4e>
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	d009      	beq.n	8006708 <RCCEx_PLLSAI1_Config+0x60>
 80066f4:	e020      	b.n	8006738 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80066f6:	4b62      	ldr	r3, [pc, #392]	; (8006880 <RCCEx_PLLSAI1_Config+0x1d8>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0302 	and.w	r3, r3, #2
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d11d      	bne.n	800673e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006706:	e01a      	b.n	800673e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006708:	4b5d      	ldr	r3, [pc, #372]	; (8006880 <RCCEx_PLLSAI1_Config+0x1d8>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006710:	2b00      	cmp	r3, #0
 8006712:	d116      	bne.n	8006742 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006718:	e013      	b.n	8006742 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800671a:	4b59      	ldr	r3, [pc, #356]	; (8006880 <RCCEx_PLLSAI1_Config+0x1d8>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10f      	bne.n	8006746 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006726:	4b56      	ldr	r3, [pc, #344]	; (8006880 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800672e:	2b00      	cmp	r3, #0
 8006730:	d109      	bne.n	8006746 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006736:	e006      	b.n	8006746 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	73fb      	strb	r3, [r7, #15]
      break;
 800673c:	e004      	b.n	8006748 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800673e:	bf00      	nop
 8006740:	e002      	b.n	8006748 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006742:	bf00      	nop
 8006744:	e000      	b.n	8006748 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006746:	bf00      	nop
    }

    if(status == HAL_OK)
 8006748:	7bfb      	ldrb	r3, [r7, #15]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d108      	bne.n	8006760 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800674e:	4b4c      	ldr	r3, [pc, #304]	; (8006880 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	f023 0203 	bic.w	r2, r3, #3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4949      	ldr	r1, [pc, #292]	; (8006880 <RCCEx_PLLSAI1_Config+0x1d8>)
 800675c:	4313      	orrs	r3, r2
 800675e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006760:	7bfb      	ldrb	r3, [r7, #15]
 8006762:	2b00      	cmp	r3, #0
 8006764:	f040 8086 	bne.w	8006874 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006768:	4b45      	ldr	r3, [pc, #276]	; (8006880 <RCCEx_PLLSAI1_Config+0x1d8>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a44      	ldr	r2, [pc, #272]	; (8006880 <RCCEx_PLLSAI1_Config+0x1d8>)
 800676e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006772:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006774:	f7fb ff48 	bl	8002608 <HAL_GetTick>
 8006778:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800677a:	e009      	b.n	8006790 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800677c:	f7fb ff44 	bl	8002608 <HAL_GetTick>
 8006780:	4602      	mov	r2, r0
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	2b02      	cmp	r3, #2
 8006788:	d902      	bls.n	8006790 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	73fb      	strb	r3, [r7, #15]
        break;
 800678e:	e005      	b.n	800679c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006790:	4b3b      	ldr	r3, [pc, #236]	; (8006880 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1ef      	bne.n	800677c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800679c:	7bfb      	ldrb	r3, [r7, #15]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d168      	bne.n	8006874 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d113      	bne.n	80067d0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80067a8:	4b35      	ldr	r3, [pc, #212]	; (8006880 <RCCEx_PLLSAI1_Config+0x1d8>)
 80067aa:	691a      	ldr	r2, [r3, #16]
 80067ac:	4b35      	ldr	r3, [pc, #212]	; (8006884 <RCCEx_PLLSAI1_Config+0x1dc>)
 80067ae:	4013      	ands	r3, r2
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	6892      	ldr	r2, [r2, #8]
 80067b4:	0211      	lsls	r1, r2, #8
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	68d2      	ldr	r2, [r2, #12]
 80067ba:	06d2      	lsls	r2, r2, #27
 80067bc:	4311      	orrs	r1, r2
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	6852      	ldr	r2, [r2, #4]
 80067c2:	3a01      	subs	r2, #1
 80067c4:	0112      	lsls	r2, r2, #4
 80067c6:	430a      	orrs	r2, r1
 80067c8:	492d      	ldr	r1, [pc, #180]	; (8006880 <RCCEx_PLLSAI1_Config+0x1d8>)
 80067ca:	4313      	orrs	r3, r2
 80067cc:	610b      	str	r3, [r1, #16]
 80067ce:	e02d      	b.n	800682c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d115      	bne.n	8006802 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80067d6:	4b2a      	ldr	r3, [pc, #168]	; (8006880 <RCCEx_PLLSAI1_Config+0x1d8>)
 80067d8:	691a      	ldr	r2, [r3, #16]
 80067da:	4b2b      	ldr	r3, [pc, #172]	; (8006888 <RCCEx_PLLSAI1_Config+0x1e0>)
 80067dc:	4013      	ands	r3, r2
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	6892      	ldr	r2, [r2, #8]
 80067e2:	0211      	lsls	r1, r2, #8
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	6912      	ldr	r2, [r2, #16]
 80067e8:	0852      	lsrs	r2, r2, #1
 80067ea:	3a01      	subs	r2, #1
 80067ec:	0552      	lsls	r2, r2, #21
 80067ee:	4311      	orrs	r1, r2
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	6852      	ldr	r2, [r2, #4]
 80067f4:	3a01      	subs	r2, #1
 80067f6:	0112      	lsls	r2, r2, #4
 80067f8:	430a      	orrs	r2, r1
 80067fa:	4921      	ldr	r1, [pc, #132]	; (8006880 <RCCEx_PLLSAI1_Config+0x1d8>)
 80067fc:	4313      	orrs	r3, r2
 80067fe:	610b      	str	r3, [r1, #16]
 8006800:	e014      	b.n	800682c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006802:	4b1f      	ldr	r3, [pc, #124]	; (8006880 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006804:	691a      	ldr	r2, [r3, #16]
 8006806:	4b21      	ldr	r3, [pc, #132]	; (800688c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006808:	4013      	ands	r3, r2
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	6892      	ldr	r2, [r2, #8]
 800680e:	0211      	lsls	r1, r2, #8
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	6952      	ldr	r2, [r2, #20]
 8006814:	0852      	lsrs	r2, r2, #1
 8006816:	3a01      	subs	r2, #1
 8006818:	0652      	lsls	r2, r2, #25
 800681a:	4311      	orrs	r1, r2
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	6852      	ldr	r2, [r2, #4]
 8006820:	3a01      	subs	r2, #1
 8006822:	0112      	lsls	r2, r2, #4
 8006824:	430a      	orrs	r2, r1
 8006826:	4916      	ldr	r1, [pc, #88]	; (8006880 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006828:	4313      	orrs	r3, r2
 800682a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800682c:	4b14      	ldr	r3, [pc, #80]	; (8006880 <RCCEx_PLLSAI1_Config+0x1d8>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a13      	ldr	r2, [pc, #76]	; (8006880 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006832:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006836:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006838:	f7fb fee6 	bl	8002608 <HAL_GetTick>
 800683c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800683e:	e009      	b.n	8006854 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006840:	f7fb fee2 	bl	8002608 <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	2b02      	cmp	r3, #2
 800684c:	d902      	bls.n	8006854 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	73fb      	strb	r3, [r7, #15]
          break;
 8006852:	e005      	b.n	8006860 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006854:	4b0a      	ldr	r3, [pc, #40]	; (8006880 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800685c:	2b00      	cmp	r3, #0
 800685e:	d0ef      	beq.n	8006840 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006860:	7bfb      	ldrb	r3, [r7, #15]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d106      	bne.n	8006874 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006866:	4b06      	ldr	r3, [pc, #24]	; (8006880 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006868:	691a      	ldr	r2, [r3, #16]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	699b      	ldr	r3, [r3, #24]
 800686e:	4904      	ldr	r1, [pc, #16]	; (8006880 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006870:	4313      	orrs	r3, r2
 8006872:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006874:	7bfb      	ldrb	r3, [r7, #15]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	40021000 	.word	0x40021000
 8006884:	07ff800f 	.word	0x07ff800f
 8006888:	ff9f800f 	.word	0xff9f800f
 800688c:	f9ff800f 	.word	0xf9ff800f

08006890 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800689a:	2300      	movs	r3, #0
 800689c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800689e:	4b72      	ldr	r3, [pc, #456]	; (8006a68 <RCCEx_PLLSAI2_Config+0x1d8>)
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	f003 0303 	and.w	r3, r3, #3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00e      	beq.n	80068c8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80068aa:	4b6f      	ldr	r3, [pc, #444]	; (8006a68 <RCCEx_PLLSAI2_Config+0x1d8>)
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	f003 0203 	and.w	r2, r3, #3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d103      	bne.n	80068c2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
       ||
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d142      	bne.n	8006948 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	73fb      	strb	r3, [r7, #15]
 80068c6:	e03f      	b.n	8006948 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2b03      	cmp	r3, #3
 80068ce:	d018      	beq.n	8006902 <RCCEx_PLLSAI2_Config+0x72>
 80068d0:	2b03      	cmp	r3, #3
 80068d2:	d825      	bhi.n	8006920 <RCCEx_PLLSAI2_Config+0x90>
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d002      	beq.n	80068de <RCCEx_PLLSAI2_Config+0x4e>
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d009      	beq.n	80068f0 <RCCEx_PLLSAI2_Config+0x60>
 80068dc:	e020      	b.n	8006920 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80068de:	4b62      	ldr	r3, [pc, #392]	; (8006a68 <RCCEx_PLLSAI2_Config+0x1d8>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 0302 	and.w	r3, r3, #2
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d11d      	bne.n	8006926 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068ee:	e01a      	b.n	8006926 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80068f0:	4b5d      	ldr	r3, [pc, #372]	; (8006a68 <RCCEx_PLLSAI2_Config+0x1d8>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d116      	bne.n	800692a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006900:	e013      	b.n	800692a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006902:	4b59      	ldr	r3, [pc, #356]	; (8006a68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d10f      	bne.n	800692e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800690e:	4b56      	ldr	r3, [pc, #344]	; (8006a68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006916:	2b00      	cmp	r3, #0
 8006918:	d109      	bne.n	800692e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800691e:	e006      	b.n	800692e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	73fb      	strb	r3, [r7, #15]
      break;
 8006924:	e004      	b.n	8006930 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006926:	bf00      	nop
 8006928:	e002      	b.n	8006930 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800692a:	bf00      	nop
 800692c:	e000      	b.n	8006930 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800692e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006930:	7bfb      	ldrb	r3, [r7, #15]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d108      	bne.n	8006948 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006936:	4b4c      	ldr	r3, [pc, #304]	; (8006a68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	f023 0203 	bic.w	r2, r3, #3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4949      	ldr	r1, [pc, #292]	; (8006a68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006944:	4313      	orrs	r3, r2
 8006946:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006948:	7bfb      	ldrb	r3, [r7, #15]
 800694a:	2b00      	cmp	r3, #0
 800694c:	f040 8086 	bne.w	8006a5c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006950:	4b45      	ldr	r3, [pc, #276]	; (8006a68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a44      	ldr	r2, [pc, #272]	; (8006a68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006956:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800695a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800695c:	f7fb fe54 	bl	8002608 <HAL_GetTick>
 8006960:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006962:	e009      	b.n	8006978 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006964:	f7fb fe50 	bl	8002608 <HAL_GetTick>
 8006968:	4602      	mov	r2, r0
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	2b02      	cmp	r3, #2
 8006970:	d902      	bls.n	8006978 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006972:	2303      	movs	r3, #3
 8006974:	73fb      	strb	r3, [r7, #15]
        break;
 8006976:	e005      	b.n	8006984 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006978:	4b3b      	ldr	r3, [pc, #236]	; (8006a68 <RCCEx_PLLSAI2_Config+0x1d8>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d1ef      	bne.n	8006964 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006984:	7bfb      	ldrb	r3, [r7, #15]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d168      	bne.n	8006a5c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d113      	bne.n	80069b8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006990:	4b35      	ldr	r3, [pc, #212]	; (8006a68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006992:	695a      	ldr	r2, [r3, #20]
 8006994:	4b35      	ldr	r3, [pc, #212]	; (8006a6c <RCCEx_PLLSAI2_Config+0x1dc>)
 8006996:	4013      	ands	r3, r2
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	6892      	ldr	r2, [r2, #8]
 800699c:	0211      	lsls	r1, r2, #8
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	68d2      	ldr	r2, [r2, #12]
 80069a2:	06d2      	lsls	r2, r2, #27
 80069a4:	4311      	orrs	r1, r2
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	6852      	ldr	r2, [r2, #4]
 80069aa:	3a01      	subs	r2, #1
 80069ac:	0112      	lsls	r2, r2, #4
 80069ae:	430a      	orrs	r2, r1
 80069b0:	492d      	ldr	r1, [pc, #180]	; (8006a68 <RCCEx_PLLSAI2_Config+0x1d8>)
 80069b2:	4313      	orrs	r3, r2
 80069b4:	614b      	str	r3, [r1, #20]
 80069b6:	e02d      	b.n	8006a14 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d115      	bne.n	80069ea <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80069be:	4b2a      	ldr	r3, [pc, #168]	; (8006a68 <RCCEx_PLLSAI2_Config+0x1d8>)
 80069c0:	695a      	ldr	r2, [r3, #20]
 80069c2:	4b2b      	ldr	r3, [pc, #172]	; (8006a70 <RCCEx_PLLSAI2_Config+0x1e0>)
 80069c4:	4013      	ands	r3, r2
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	6892      	ldr	r2, [r2, #8]
 80069ca:	0211      	lsls	r1, r2, #8
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	6912      	ldr	r2, [r2, #16]
 80069d0:	0852      	lsrs	r2, r2, #1
 80069d2:	3a01      	subs	r2, #1
 80069d4:	0552      	lsls	r2, r2, #21
 80069d6:	4311      	orrs	r1, r2
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	6852      	ldr	r2, [r2, #4]
 80069dc:	3a01      	subs	r2, #1
 80069de:	0112      	lsls	r2, r2, #4
 80069e0:	430a      	orrs	r2, r1
 80069e2:	4921      	ldr	r1, [pc, #132]	; (8006a68 <RCCEx_PLLSAI2_Config+0x1d8>)
 80069e4:	4313      	orrs	r3, r2
 80069e6:	614b      	str	r3, [r1, #20]
 80069e8:	e014      	b.n	8006a14 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80069ea:	4b1f      	ldr	r3, [pc, #124]	; (8006a68 <RCCEx_PLLSAI2_Config+0x1d8>)
 80069ec:	695a      	ldr	r2, [r3, #20]
 80069ee:	4b21      	ldr	r3, [pc, #132]	; (8006a74 <RCCEx_PLLSAI2_Config+0x1e4>)
 80069f0:	4013      	ands	r3, r2
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	6892      	ldr	r2, [r2, #8]
 80069f6:	0211      	lsls	r1, r2, #8
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	6952      	ldr	r2, [r2, #20]
 80069fc:	0852      	lsrs	r2, r2, #1
 80069fe:	3a01      	subs	r2, #1
 8006a00:	0652      	lsls	r2, r2, #25
 8006a02:	4311      	orrs	r1, r2
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	6852      	ldr	r2, [r2, #4]
 8006a08:	3a01      	subs	r2, #1
 8006a0a:	0112      	lsls	r2, r2, #4
 8006a0c:	430a      	orrs	r2, r1
 8006a0e:	4916      	ldr	r1, [pc, #88]	; (8006a68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a10:	4313      	orrs	r3, r2
 8006a12:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006a14:	4b14      	ldr	r3, [pc, #80]	; (8006a68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a13      	ldr	r2, [pc, #76]	; (8006a68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a20:	f7fb fdf2 	bl	8002608 <HAL_GetTick>
 8006a24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006a26:	e009      	b.n	8006a3c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006a28:	f7fb fdee 	bl	8002608 <HAL_GetTick>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d902      	bls.n	8006a3c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	73fb      	strb	r3, [r7, #15]
          break;
 8006a3a:	e005      	b.n	8006a48 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006a3c:	4b0a      	ldr	r3, [pc, #40]	; (8006a68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d0ef      	beq.n	8006a28 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006a48:	7bfb      	ldrb	r3, [r7, #15]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d106      	bne.n	8006a5c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006a4e:	4b06      	ldr	r3, [pc, #24]	; (8006a68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a50:	695a      	ldr	r2, [r3, #20]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	4904      	ldr	r1, [pc, #16]	; (8006a68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	40021000 	.word	0x40021000
 8006a6c:	07ff800f 	.word	0x07ff800f
 8006a70:	ff9f800f 	.word	0xff9f800f
 8006a74:	f9ff800f 	.word	0xf9ff800f

08006a78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d101      	bne.n	8006a8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e095      	b.n	8006bb6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d108      	bne.n	8006aa4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a9a:	d009      	beq.n	8006ab0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	61da      	str	r2, [r3, #28]
 8006aa2:	e005      	b.n	8006ab0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d106      	bne.n	8006ad0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f7fb fa68 	bl	8001fa0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2202      	movs	r2, #2
 8006ad4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ae6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006af0:	d902      	bls.n	8006af8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006af2:	2300      	movs	r3, #0
 8006af4:	60fb      	str	r3, [r7, #12]
 8006af6:	e002      	b.n	8006afe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006afc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006b06:	d007      	beq.n	8006b18 <HAL_SPI_Init+0xa0>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b10:	d002      	beq.n	8006b18 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006b28:	431a      	orrs	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	f003 0302 	and.w	r3, r3, #2
 8006b32:	431a      	orrs	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	695b      	ldr	r3, [r3, #20]
 8006b38:	f003 0301 	and.w	r3, r3, #1
 8006b3c:	431a      	orrs	r2, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	699b      	ldr	r3, [r3, #24]
 8006b42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b46:	431a      	orrs	r2, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	69db      	ldr	r3, [r3, #28]
 8006b4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b50:	431a      	orrs	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b5a:	ea42 0103 	orr.w	r1, r2, r3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b62:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	430a      	orrs	r2, r1
 8006b6c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	0c1b      	lsrs	r3, r3, #16
 8006b74:	f003 0204 	and.w	r2, r3, #4
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7c:	f003 0310 	and.w	r3, r3, #16
 8006b80:	431a      	orrs	r2, r3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b86:	f003 0308 	and.w	r3, r3, #8
 8006b8a:	431a      	orrs	r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006b94:	ea42 0103 	orr.w	r1, r2, r3
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	430a      	orrs	r2, r1
 8006ba4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3710      	adds	r7, #16
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b082      	sub	sp, #8
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d101      	bne.n	8006bd0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e049      	b.n	8006c64 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d106      	bne.n	8006bea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f7fb fa51 	bl	800208c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2202      	movs	r2, #2
 8006bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	3304      	adds	r3, #4
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	4610      	mov	r0, r2
 8006bfe:	f000 fb7b 	bl	80072f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2201      	movs	r2, #1
 8006c36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2201      	movs	r2, #1
 8006c56:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3708      	adds	r7, #8
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d101      	bne.n	8006c7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e049      	b.n	8006d12 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d106      	bne.n	8006c98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f841 	bl	8006d1a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	3304      	adds	r3, #4
 8006ca8:	4619      	mov	r1, r3
 8006caa:	4610      	mov	r0, r2
 8006cac:	f000 fb24 	bl	80072f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3708      	adds	r7, #8
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006d1a:	b480      	push	{r7}
 8006d1c:	b083      	sub	sp, #12
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006d22:	bf00      	nop
 8006d24:	370c      	adds	r7, #12
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
	...

08006d30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d109      	bne.n	8006d54 <HAL_TIM_PWM_Start+0x24>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	bf14      	ite	ne
 8006d4c:	2301      	movne	r3, #1
 8006d4e:	2300      	moveq	r3, #0
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	e03c      	b.n	8006dce <HAL_TIM_PWM_Start+0x9e>
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	2b04      	cmp	r3, #4
 8006d58:	d109      	bne.n	8006d6e <HAL_TIM_PWM_Start+0x3e>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	bf14      	ite	ne
 8006d66:	2301      	movne	r3, #1
 8006d68:	2300      	moveq	r3, #0
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	e02f      	b.n	8006dce <HAL_TIM_PWM_Start+0x9e>
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	2b08      	cmp	r3, #8
 8006d72:	d109      	bne.n	8006d88 <HAL_TIM_PWM_Start+0x58>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	bf14      	ite	ne
 8006d80:	2301      	movne	r3, #1
 8006d82:	2300      	moveq	r3, #0
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	e022      	b.n	8006dce <HAL_TIM_PWM_Start+0x9e>
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	2b0c      	cmp	r3, #12
 8006d8c:	d109      	bne.n	8006da2 <HAL_TIM_PWM_Start+0x72>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	bf14      	ite	ne
 8006d9a:	2301      	movne	r3, #1
 8006d9c:	2300      	moveq	r3, #0
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	e015      	b.n	8006dce <HAL_TIM_PWM_Start+0x9e>
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	2b10      	cmp	r3, #16
 8006da6:	d109      	bne.n	8006dbc <HAL_TIM_PWM_Start+0x8c>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	bf14      	ite	ne
 8006db4:	2301      	movne	r3, #1
 8006db6:	2300      	moveq	r3, #0
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	e008      	b.n	8006dce <HAL_TIM_PWM_Start+0x9e>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	bf14      	ite	ne
 8006dc8:	2301      	movne	r3, #1
 8006dca:	2300      	moveq	r3, #0
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d001      	beq.n	8006dd6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e09c      	b.n	8006f10 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d104      	bne.n	8006de6 <HAL_TIM_PWM_Start+0xb6>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2202      	movs	r2, #2
 8006de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006de4:	e023      	b.n	8006e2e <HAL_TIM_PWM_Start+0xfe>
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	2b04      	cmp	r3, #4
 8006dea:	d104      	bne.n	8006df6 <HAL_TIM_PWM_Start+0xc6>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2202      	movs	r2, #2
 8006df0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006df4:	e01b      	b.n	8006e2e <HAL_TIM_PWM_Start+0xfe>
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	2b08      	cmp	r3, #8
 8006dfa:	d104      	bne.n	8006e06 <HAL_TIM_PWM_Start+0xd6>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2202      	movs	r2, #2
 8006e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e04:	e013      	b.n	8006e2e <HAL_TIM_PWM_Start+0xfe>
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	2b0c      	cmp	r3, #12
 8006e0a:	d104      	bne.n	8006e16 <HAL_TIM_PWM_Start+0xe6>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2202      	movs	r2, #2
 8006e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e14:	e00b      	b.n	8006e2e <HAL_TIM_PWM_Start+0xfe>
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	2b10      	cmp	r3, #16
 8006e1a:	d104      	bne.n	8006e26 <HAL_TIM_PWM_Start+0xf6>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2202      	movs	r2, #2
 8006e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e24:	e003      	b.n	8006e2e <HAL_TIM_PWM_Start+0xfe>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2202      	movs	r2, #2
 8006e2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2201      	movs	r2, #1
 8006e34:	6839      	ldr	r1, [r7, #0]
 8006e36:	4618      	mov	r0, r3
 8006e38:	f000 fe68 	bl	8007b0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a35      	ldr	r2, [pc, #212]	; (8006f18 <HAL_TIM_PWM_Start+0x1e8>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d013      	beq.n	8006e6e <HAL_TIM_PWM_Start+0x13e>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a34      	ldr	r2, [pc, #208]	; (8006f1c <HAL_TIM_PWM_Start+0x1ec>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d00e      	beq.n	8006e6e <HAL_TIM_PWM_Start+0x13e>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a32      	ldr	r2, [pc, #200]	; (8006f20 <HAL_TIM_PWM_Start+0x1f0>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d009      	beq.n	8006e6e <HAL_TIM_PWM_Start+0x13e>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a31      	ldr	r2, [pc, #196]	; (8006f24 <HAL_TIM_PWM_Start+0x1f4>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d004      	beq.n	8006e6e <HAL_TIM_PWM_Start+0x13e>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a2f      	ldr	r2, [pc, #188]	; (8006f28 <HAL_TIM_PWM_Start+0x1f8>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d101      	bne.n	8006e72 <HAL_TIM_PWM_Start+0x142>
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e000      	b.n	8006e74 <HAL_TIM_PWM_Start+0x144>
 8006e72:	2300      	movs	r3, #0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d007      	beq.n	8006e88 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e86:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a22      	ldr	r2, [pc, #136]	; (8006f18 <HAL_TIM_PWM_Start+0x1e8>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d01d      	beq.n	8006ece <HAL_TIM_PWM_Start+0x19e>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e9a:	d018      	beq.n	8006ece <HAL_TIM_PWM_Start+0x19e>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a22      	ldr	r2, [pc, #136]	; (8006f2c <HAL_TIM_PWM_Start+0x1fc>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d013      	beq.n	8006ece <HAL_TIM_PWM_Start+0x19e>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a21      	ldr	r2, [pc, #132]	; (8006f30 <HAL_TIM_PWM_Start+0x200>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d00e      	beq.n	8006ece <HAL_TIM_PWM_Start+0x19e>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a1f      	ldr	r2, [pc, #124]	; (8006f34 <HAL_TIM_PWM_Start+0x204>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d009      	beq.n	8006ece <HAL_TIM_PWM_Start+0x19e>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a17      	ldr	r2, [pc, #92]	; (8006f1c <HAL_TIM_PWM_Start+0x1ec>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d004      	beq.n	8006ece <HAL_TIM_PWM_Start+0x19e>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a15      	ldr	r2, [pc, #84]	; (8006f20 <HAL_TIM_PWM_Start+0x1f0>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d115      	bne.n	8006efa <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	689a      	ldr	r2, [r3, #8]
 8006ed4:	4b18      	ldr	r3, [pc, #96]	; (8006f38 <HAL_TIM_PWM_Start+0x208>)
 8006ed6:	4013      	ands	r3, r2
 8006ed8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2b06      	cmp	r3, #6
 8006ede:	d015      	beq.n	8006f0c <HAL_TIM_PWM_Start+0x1dc>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ee6:	d011      	beq.n	8006f0c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f042 0201 	orr.w	r2, r2, #1
 8006ef6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ef8:	e008      	b.n	8006f0c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f042 0201 	orr.w	r2, r2, #1
 8006f08:	601a      	str	r2, [r3, #0]
 8006f0a:	e000      	b.n	8006f0e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f0e:	2300      	movs	r3, #0
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3710      	adds	r7, #16
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	40012c00 	.word	0x40012c00
 8006f1c:	40013400 	.word	0x40013400
 8006f20:	40014000 	.word	0x40014000
 8006f24:	40014400 	.word	0x40014400
 8006f28:	40014800 	.word	0x40014800
 8006f2c:	40000400 	.word	0x40000400
 8006f30:	40000800 	.word	0x40000800
 8006f34:	40000c00 	.word	0x40000c00
 8006f38:	00010007 	.word	0x00010007

08006f3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b086      	sub	sp, #24
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d101      	bne.n	8006f5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006f56:	2302      	movs	r3, #2
 8006f58:	e0ff      	b.n	800715a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2b14      	cmp	r3, #20
 8006f66:	f200 80f0 	bhi.w	800714a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006f6a:	a201      	add	r2, pc, #4	; (adr r2, 8006f70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f70:	08006fc5 	.word	0x08006fc5
 8006f74:	0800714b 	.word	0x0800714b
 8006f78:	0800714b 	.word	0x0800714b
 8006f7c:	0800714b 	.word	0x0800714b
 8006f80:	08007005 	.word	0x08007005
 8006f84:	0800714b 	.word	0x0800714b
 8006f88:	0800714b 	.word	0x0800714b
 8006f8c:	0800714b 	.word	0x0800714b
 8006f90:	08007047 	.word	0x08007047
 8006f94:	0800714b 	.word	0x0800714b
 8006f98:	0800714b 	.word	0x0800714b
 8006f9c:	0800714b 	.word	0x0800714b
 8006fa0:	08007087 	.word	0x08007087
 8006fa4:	0800714b 	.word	0x0800714b
 8006fa8:	0800714b 	.word	0x0800714b
 8006fac:	0800714b 	.word	0x0800714b
 8006fb0:	080070c9 	.word	0x080070c9
 8006fb4:	0800714b 	.word	0x0800714b
 8006fb8:	0800714b 	.word	0x0800714b
 8006fbc:	0800714b 	.word	0x0800714b
 8006fc0:	08007109 	.word	0x08007109
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	68b9      	ldr	r1, [r7, #8]
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f000 fa2e 	bl	800742c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	699a      	ldr	r2, [r3, #24]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f042 0208 	orr.w	r2, r2, #8
 8006fde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	699a      	ldr	r2, [r3, #24]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f022 0204 	bic.w	r2, r2, #4
 8006fee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	6999      	ldr	r1, [r3, #24]
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	691a      	ldr	r2, [r3, #16]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	430a      	orrs	r2, r1
 8007000:	619a      	str	r2, [r3, #24]
      break;
 8007002:	e0a5      	b.n	8007150 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68b9      	ldr	r1, [r7, #8]
 800700a:	4618      	mov	r0, r3
 800700c:	f000 fa9e 	bl	800754c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	699a      	ldr	r2, [r3, #24]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800701e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	699a      	ldr	r2, [r3, #24]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800702e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	6999      	ldr	r1, [r3, #24]
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	021a      	lsls	r2, r3, #8
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	430a      	orrs	r2, r1
 8007042:	619a      	str	r2, [r3, #24]
      break;
 8007044:	e084      	b.n	8007150 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68b9      	ldr	r1, [r7, #8]
 800704c:	4618      	mov	r0, r3
 800704e:	f000 fb07 	bl	8007660 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	69da      	ldr	r2, [r3, #28]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f042 0208 	orr.w	r2, r2, #8
 8007060:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	69da      	ldr	r2, [r3, #28]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f022 0204 	bic.w	r2, r2, #4
 8007070:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	69d9      	ldr	r1, [r3, #28]
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	691a      	ldr	r2, [r3, #16]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	430a      	orrs	r2, r1
 8007082:	61da      	str	r2, [r3, #28]
      break;
 8007084:	e064      	b.n	8007150 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	68b9      	ldr	r1, [r7, #8]
 800708c:	4618      	mov	r0, r3
 800708e:	f000 fb6f 	bl	8007770 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	69da      	ldr	r2, [r3, #28]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	69da      	ldr	r2, [r3, #28]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	69d9      	ldr	r1, [r3, #28]
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	021a      	lsls	r2, r3, #8
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	430a      	orrs	r2, r1
 80070c4:	61da      	str	r2, [r3, #28]
      break;
 80070c6:	e043      	b.n	8007150 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68b9      	ldr	r1, [r7, #8]
 80070ce:	4618      	mov	r0, r3
 80070d0:	f000 fbb8 	bl	8007844 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f042 0208 	orr.w	r2, r2, #8
 80070e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f022 0204 	bic.w	r2, r2, #4
 80070f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	691a      	ldr	r2, [r3, #16]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	430a      	orrs	r2, r1
 8007104:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007106:	e023      	b.n	8007150 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68b9      	ldr	r1, [r7, #8]
 800710e:	4618      	mov	r0, r3
 8007110:	f000 fbfc 	bl	800790c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007122:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007132:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	021a      	lsls	r2, r3, #8
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	430a      	orrs	r2, r1
 8007146:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007148:	e002      	b.n	8007150 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	75fb      	strb	r3, [r7, #23]
      break;
 800714e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2200      	movs	r2, #0
 8007154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007158:	7dfb      	ldrb	r3, [r7, #23]
}
 800715a:	4618      	mov	r0, r3
 800715c:	3718      	adds	r7, #24
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop

08007164 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800716e:	2300      	movs	r3, #0
 8007170:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007178:	2b01      	cmp	r3, #1
 800717a:	d101      	bne.n	8007180 <HAL_TIM_ConfigClockSource+0x1c>
 800717c:	2302      	movs	r3, #2
 800717e:	e0b6      	b.n	80072ee <HAL_TIM_ConfigClockSource+0x18a>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2202      	movs	r2, #2
 800718c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800719e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80071a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68ba      	ldr	r2, [r7, #8]
 80071b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071bc:	d03e      	beq.n	800723c <HAL_TIM_ConfigClockSource+0xd8>
 80071be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071c2:	f200 8087 	bhi.w	80072d4 <HAL_TIM_ConfigClockSource+0x170>
 80071c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071ca:	f000 8086 	beq.w	80072da <HAL_TIM_ConfigClockSource+0x176>
 80071ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071d2:	d87f      	bhi.n	80072d4 <HAL_TIM_ConfigClockSource+0x170>
 80071d4:	2b70      	cmp	r3, #112	; 0x70
 80071d6:	d01a      	beq.n	800720e <HAL_TIM_ConfigClockSource+0xaa>
 80071d8:	2b70      	cmp	r3, #112	; 0x70
 80071da:	d87b      	bhi.n	80072d4 <HAL_TIM_ConfigClockSource+0x170>
 80071dc:	2b60      	cmp	r3, #96	; 0x60
 80071de:	d050      	beq.n	8007282 <HAL_TIM_ConfigClockSource+0x11e>
 80071e0:	2b60      	cmp	r3, #96	; 0x60
 80071e2:	d877      	bhi.n	80072d4 <HAL_TIM_ConfigClockSource+0x170>
 80071e4:	2b50      	cmp	r3, #80	; 0x50
 80071e6:	d03c      	beq.n	8007262 <HAL_TIM_ConfigClockSource+0xfe>
 80071e8:	2b50      	cmp	r3, #80	; 0x50
 80071ea:	d873      	bhi.n	80072d4 <HAL_TIM_ConfigClockSource+0x170>
 80071ec:	2b40      	cmp	r3, #64	; 0x40
 80071ee:	d058      	beq.n	80072a2 <HAL_TIM_ConfigClockSource+0x13e>
 80071f0:	2b40      	cmp	r3, #64	; 0x40
 80071f2:	d86f      	bhi.n	80072d4 <HAL_TIM_ConfigClockSource+0x170>
 80071f4:	2b30      	cmp	r3, #48	; 0x30
 80071f6:	d064      	beq.n	80072c2 <HAL_TIM_ConfigClockSource+0x15e>
 80071f8:	2b30      	cmp	r3, #48	; 0x30
 80071fa:	d86b      	bhi.n	80072d4 <HAL_TIM_ConfigClockSource+0x170>
 80071fc:	2b20      	cmp	r3, #32
 80071fe:	d060      	beq.n	80072c2 <HAL_TIM_ConfigClockSource+0x15e>
 8007200:	2b20      	cmp	r3, #32
 8007202:	d867      	bhi.n	80072d4 <HAL_TIM_ConfigClockSource+0x170>
 8007204:	2b00      	cmp	r3, #0
 8007206:	d05c      	beq.n	80072c2 <HAL_TIM_ConfigClockSource+0x15e>
 8007208:	2b10      	cmp	r3, #16
 800720a:	d05a      	beq.n	80072c2 <HAL_TIM_ConfigClockSource+0x15e>
 800720c:	e062      	b.n	80072d4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800721e:	f000 fc55 	bl	8007acc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007230:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	68ba      	ldr	r2, [r7, #8]
 8007238:	609a      	str	r2, [r3, #8]
      break;
 800723a:	e04f      	b.n	80072dc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800724c:	f000 fc3e 	bl	8007acc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	689a      	ldr	r2, [r3, #8]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800725e:	609a      	str	r2, [r3, #8]
      break;
 8007260:	e03c      	b.n	80072dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800726e:	461a      	mov	r2, r3
 8007270:	f000 fbb2 	bl	80079d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2150      	movs	r1, #80	; 0x50
 800727a:	4618      	mov	r0, r3
 800727c:	f000 fc0b 	bl	8007a96 <TIM_ITRx_SetConfig>
      break;
 8007280:	e02c      	b.n	80072dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800728e:	461a      	mov	r2, r3
 8007290:	f000 fbd1 	bl	8007a36 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2160      	movs	r1, #96	; 0x60
 800729a:	4618      	mov	r0, r3
 800729c:	f000 fbfb 	bl	8007a96 <TIM_ITRx_SetConfig>
      break;
 80072a0:	e01c      	b.n	80072dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072ae:	461a      	mov	r2, r3
 80072b0:	f000 fb92 	bl	80079d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2140      	movs	r1, #64	; 0x40
 80072ba:	4618      	mov	r0, r3
 80072bc:	f000 fbeb 	bl	8007a96 <TIM_ITRx_SetConfig>
      break;
 80072c0:	e00c      	b.n	80072dc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4619      	mov	r1, r3
 80072cc:	4610      	mov	r0, r2
 80072ce:	f000 fbe2 	bl	8007a96 <TIM_ITRx_SetConfig>
      break;
 80072d2:	e003      	b.n	80072dc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	73fb      	strb	r3, [r7, #15]
      break;
 80072d8:	e000      	b.n	80072dc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80072da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80072ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3710      	adds	r7, #16
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
	...

080072f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b085      	sub	sp, #20
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a40      	ldr	r2, [pc, #256]	; (800740c <TIM_Base_SetConfig+0x114>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d013      	beq.n	8007338 <TIM_Base_SetConfig+0x40>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007316:	d00f      	beq.n	8007338 <TIM_Base_SetConfig+0x40>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a3d      	ldr	r2, [pc, #244]	; (8007410 <TIM_Base_SetConfig+0x118>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d00b      	beq.n	8007338 <TIM_Base_SetConfig+0x40>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a3c      	ldr	r2, [pc, #240]	; (8007414 <TIM_Base_SetConfig+0x11c>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d007      	beq.n	8007338 <TIM_Base_SetConfig+0x40>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a3b      	ldr	r2, [pc, #236]	; (8007418 <TIM_Base_SetConfig+0x120>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d003      	beq.n	8007338 <TIM_Base_SetConfig+0x40>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4a3a      	ldr	r2, [pc, #232]	; (800741c <TIM_Base_SetConfig+0x124>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d108      	bne.n	800734a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800733e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	4313      	orrs	r3, r2
 8007348:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4a2f      	ldr	r2, [pc, #188]	; (800740c <TIM_Base_SetConfig+0x114>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d01f      	beq.n	8007392 <TIM_Base_SetConfig+0x9a>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007358:	d01b      	beq.n	8007392 <TIM_Base_SetConfig+0x9a>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4a2c      	ldr	r2, [pc, #176]	; (8007410 <TIM_Base_SetConfig+0x118>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d017      	beq.n	8007392 <TIM_Base_SetConfig+0x9a>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a2b      	ldr	r2, [pc, #172]	; (8007414 <TIM_Base_SetConfig+0x11c>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d013      	beq.n	8007392 <TIM_Base_SetConfig+0x9a>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4a2a      	ldr	r2, [pc, #168]	; (8007418 <TIM_Base_SetConfig+0x120>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d00f      	beq.n	8007392 <TIM_Base_SetConfig+0x9a>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a29      	ldr	r2, [pc, #164]	; (800741c <TIM_Base_SetConfig+0x124>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d00b      	beq.n	8007392 <TIM_Base_SetConfig+0x9a>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a28      	ldr	r2, [pc, #160]	; (8007420 <TIM_Base_SetConfig+0x128>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d007      	beq.n	8007392 <TIM_Base_SetConfig+0x9a>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4a27      	ldr	r2, [pc, #156]	; (8007424 <TIM_Base_SetConfig+0x12c>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d003      	beq.n	8007392 <TIM_Base_SetConfig+0x9a>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4a26      	ldr	r2, [pc, #152]	; (8007428 <TIM_Base_SetConfig+0x130>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d108      	bne.n	80073a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007398:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	695b      	ldr	r3, [r3, #20]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	689a      	ldr	r2, [r3, #8]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a10      	ldr	r2, [pc, #64]	; (800740c <TIM_Base_SetConfig+0x114>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d00f      	beq.n	80073f0 <TIM_Base_SetConfig+0xf8>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a12      	ldr	r2, [pc, #72]	; (800741c <TIM_Base_SetConfig+0x124>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d00b      	beq.n	80073f0 <TIM_Base_SetConfig+0xf8>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a11      	ldr	r2, [pc, #68]	; (8007420 <TIM_Base_SetConfig+0x128>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d007      	beq.n	80073f0 <TIM_Base_SetConfig+0xf8>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a10      	ldr	r2, [pc, #64]	; (8007424 <TIM_Base_SetConfig+0x12c>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d003      	beq.n	80073f0 <TIM_Base_SetConfig+0xf8>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a0f      	ldr	r2, [pc, #60]	; (8007428 <TIM_Base_SetConfig+0x130>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d103      	bne.n	80073f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	691a      	ldr	r2, [r3, #16]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	615a      	str	r2, [r3, #20]
}
 80073fe:	bf00      	nop
 8007400:	3714      	adds	r7, #20
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	40012c00 	.word	0x40012c00
 8007410:	40000400 	.word	0x40000400
 8007414:	40000800 	.word	0x40000800
 8007418:	40000c00 	.word	0x40000c00
 800741c:	40013400 	.word	0x40013400
 8007420:	40014000 	.word	0x40014000
 8007424:	40014400 	.word	0x40014400
 8007428:	40014800 	.word	0x40014800

0800742c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800742c:	b480      	push	{r7}
 800742e:	b087      	sub	sp, #28
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a1b      	ldr	r3, [r3, #32]
 800743a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6a1b      	ldr	r3, [r3, #32]
 8007440:	f023 0201 	bic.w	r2, r3, #1
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	699b      	ldr	r3, [r3, #24]
 8007452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800745a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800745e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f023 0303 	bic.w	r3, r3, #3
 8007466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	4313      	orrs	r3, r2
 8007470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	f023 0302 	bic.w	r3, r3, #2
 8007478:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	697a      	ldr	r2, [r7, #20]
 8007480:	4313      	orrs	r3, r2
 8007482:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a2c      	ldr	r2, [pc, #176]	; (8007538 <TIM_OC1_SetConfig+0x10c>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d00f      	beq.n	80074ac <TIM_OC1_SetConfig+0x80>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a2b      	ldr	r2, [pc, #172]	; (800753c <TIM_OC1_SetConfig+0x110>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d00b      	beq.n	80074ac <TIM_OC1_SetConfig+0x80>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a2a      	ldr	r2, [pc, #168]	; (8007540 <TIM_OC1_SetConfig+0x114>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d007      	beq.n	80074ac <TIM_OC1_SetConfig+0x80>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a29      	ldr	r2, [pc, #164]	; (8007544 <TIM_OC1_SetConfig+0x118>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d003      	beq.n	80074ac <TIM_OC1_SetConfig+0x80>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a28      	ldr	r2, [pc, #160]	; (8007548 <TIM_OC1_SetConfig+0x11c>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d10c      	bne.n	80074c6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	f023 0308 	bic.w	r3, r3, #8
 80074b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	697a      	ldr	r2, [r7, #20]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	f023 0304 	bic.w	r3, r3, #4
 80074c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a1b      	ldr	r2, [pc, #108]	; (8007538 <TIM_OC1_SetConfig+0x10c>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d00f      	beq.n	80074ee <TIM_OC1_SetConfig+0xc2>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a1a      	ldr	r2, [pc, #104]	; (800753c <TIM_OC1_SetConfig+0x110>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d00b      	beq.n	80074ee <TIM_OC1_SetConfig+0xc2>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a19      	ldr	r2, [pc, #100]	; (8007540 <TIM_OC1_SetConfig+0x114>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d007      	beq.n	80074ee <TIM_OC1_SetConfig+0xc2>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a18      	ldr	r2, [pc, #96]	; (8007544 <TIM_OC1_SetConfig+0x118>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d003      	beq.n	80074ee <TIM_OC1_SetConfig+0xc2>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a17      	ldr	r2, [pc, #92]	; (8007548 <TIM_OC1_SetConfig+0x11c>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d111      	bne.n	8007512 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	695b      	ldr	r3, [r3, #20]
 8007502:	693a      	ldr	r2, [r7, #16]
 8007504:	4313      	orrs	r3, r2
 8007506:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	699b      	ldr	r3, [r3, #24]
 800750c:	693a      	ldr	r2, [r7, #16]
 800750e:	4313      	orrs	r3, r2
 8007510:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	693a      	ldr	r2, [r7, #16]
 8007516:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	685a      	ldr	r2, [r3, #4]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	697a      	ldr	r2, [r7, #20]
 800752a:	621a      	str	r2, [r3, #32]
}
 800752c:	bf00      	nop
 800752e:	371c      	adds	r7, #28
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr
 8007538:	40012c00 	.word	0x40012c00
 800753c:	40013400 	.word	0x40013400
 8007540:	40014000 	.word	0x40014000
 8007544:	40014400 	.word	0x40014400
 8007548:	40014800 	.word	0x40014800

0800754c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800754c:	b480      	push	{r7}
 800754e:	b087      	sub	sp, #28
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a1b      	ldr	r3, [r3, #32]
 800755a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6a1b      	ldr	r3, [r3, #32]
 8007560:	f023 0210 	bic.w	r2, r3, #16
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800757a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800757e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007586:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	021b      	lsls	r3, r3, #8
 800758e:	68fa      	ldr	r2, [r7, #12]
 8007590:	4313      	orrs	r3, r2
 8007592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	f023 0320 	bic.w	r3, r3, #32
 800759a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	011b      	lsls	r3, r3, #4
 80075a2:	697a      	ldr	r2, [r7, #20]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a28      	ldr	r2, [pc, #160]	; (800764c <TIM_OC2_SetConfig+0x100>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d003      	beq.n	80075b8 <TIM_OC2_SetConfig+0x6c>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a27      	ldr	r2, [pc, #156]	; (8007650 <TIM_OC2_SetConfig+0x104>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d10d      	bne.n	80075d4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	011b      	lsls	r3, r3, #4
 80075c6:	697a      	ldr	r2, [r7, #20]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a1d      	ldr	r2, [pc, #116]	; (800764c <TIM_OC2_SetConfig+0x100>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d00f      	beq.n	80075fc <TIM_OC2_SetConfig+0xb0>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4a1c      	ldr	r2, [pc, #112]	; (8007650 <TIM_OC2_SetConfig+0x104>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d00b      	beq.n	80075fc <TIM_OC2_SetConfig+0xb0>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4a1b      	ldr	r2, [pc, #108]	; (8007654 <TIM_OC2_SetConfig+0x108>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d007      	beq.n	80075fc <TIM_OC2_SetConfig+0xb0>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a1a      	ldr	r2, [pc, #104]	; (8007658 <TIM_OC2_SetConfig+0x10c>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d003      	beq.n	80075fc <TIM_OC2_SetConfig+0xb0>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a19      	ldr	r2, [pc, #100]	; (800765c <TIM_OC2_SetConfig+0x110>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d113      	bne.n	8007624 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007602:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800760a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	695b      	ldr	r3, [r3, #20]
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	693a      	ldr	r2, [r7, #16]
 8007614:	4313      	orrs	r3, r2
 8007616:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	699b      	ldr	r3, [r3, #24]
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	693a      	ldr	r2, [r7, #16]
 8007620:	4313      	orrs	r3, r2
 8007622:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	693a      	ldr	r2, [r7, #16]
 8007628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	685a      	ldr	r2, [r3, #4]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	697a      	ldr	r2, [r7, #20]
 800763c:	621a      	str	r2, [r3, #32]
}
 800763e:	bf00      	nop
 8007640:	371c      	adds	r7, #28
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	40012c00 	.word	0x40012c00
 8007650:	40013400 	.word	0x40013400
 8007654:	40014000 	.word	0x40014000
 8007658:	40014400 	.word	0x40014400
 800765c:	40014800 	.word	0x40014800

08007660 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007660:	b480      	push	{r7}
 8007662:	b087      	sub	sp, #28
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a1b      	ldr	r3, [r3, #32]
 800766e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a1b      	ldr	r3, [r3, #32]
 8007674:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	69db      	ldr	r3, [r3, #28]
 8007686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800768e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f023 0303 	bic.w	r3, r3, #3
 800769a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	021b      	lsls	r3, r3, #8
 80076b4:	697a      	ldr	r2, [r7, #20]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4a27      	ldr	r2, [pc, #156]	; (800775c <TIM_OC3_SetConfig+0xfc>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d003      	beq.n	80076ca <TIM_OC3_SetConfig+0x6a>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a26      	ldr	r2, [pc, #152]	; (8007760 <TIM_OC3_SetConfig+0x100>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d10d      	bne.n	80076e6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	021b      	lsls	r3, r3, #8
 80076d8:	697a      	ldr	r2, [r7, #20]
 80076da:	4313      	orrs	r3, r2
 80076dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a1c      	ldr	r2, [pc, #112]	; (800775c <TIM_OC3_SetConfig+0xfc>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d00f      	beq.n	800770e <TIM_OC3_SetConfig+0xae>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a1b      	ldr	r2, [pc, #108]	; (8007760 <TIM_OC3_SetConfig+0x100>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d00b      	beq.n	800770e <TIM_OC3_SetConfig+0xae>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a1a      	ldr	r2, [pc, #104]	; (8007764 <TIM_OC3_SetConfig+0x104>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d007      	beq.n	800770e <TIM_OC3_SetConfig+0xae>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a19      	ldr	r2, [pc, #100]	; (8007768 <TIM_OC3_SetConfig+0x108>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d003      	beq.n	800770e <TIM_OC3_SetConfig+0xae>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a18      	ldr	r2, [pc, #96]	; (800776c <TIM_OC3_SetConfig+0x10c>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d113      	bne.n	8007736 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007714:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800771c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	695b      	ldr	r3, [r3, #20]
 8007722:	011b      	lsls	r3, r3, #4
 8007724:	693a      	ldr	r2, [r7, #16]
 8007726:	4313      	orrs	r3, r2
 8007728:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	699b      	ldr	r3, [r3, #24]
 800772e:	011b      	lsls	r3, r3, #4
 8007730:	693a      	ldr	r2, [r7, #16]
 8007732:	4313      	orrs	r3, r2
 8007734:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	693a      	ldr	r2, [r7, #16]
 800773a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	685a      	ldr	r2, [r3, #4]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	697a      	ldr	r2, [r7, #20]
 800774e:	621a      	str	r2, [r3, #32]
}
 8007750:	bf00      	nop
 8007752:	371c      	adds	r7, #28
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr
 800775c:	40012c00 	.word	0x40012c00
 8007760:	40013400 	.word	0x40013400
 8007764:	40014000 	.word	0x40014000
 8007768:	40014400 	.word	0x40014400
 800776c:	40014800 	.word	0x40014800

08007770 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007770:	b480      	push	{r7}
 8007772:	b087      	sub	sp, #28
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a1b      	ldr	r3, [r3, #32]
 800777e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6a1b      	ldr	r3, [r3, #32]
 8007784:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	69db      	ldr	r3, [r3, #28]
 8007796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800779e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	021b      	lsls	r3, r3, #8
 80077b2:	68fa      	ldr	r2, [r7, #12]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	031b      	lsls	r3, r3, #12
 80077c6:	693a      	ldr	r2, [r7, #16]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a18      	ldr	r2, [pc, #96]	; (8007830 <TIM_OC4_SetConfig+0xc0>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d00f      	beq.n	80077f4 <TIM_OC4_SetConfig+0x84>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a17      	ldr	r2, [pc, #92]	; (8007834 <TIM_OC4_SetConfig+0xc4>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d00b      	beq.n	80077f4 <TIM_OC4_SetConfig+0x84>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a16      	ldr	r2, [pc, #88]	; (8007838 <TIM_OC4_SetConfig+0xc8>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d007      	beq.n	80077f4 <TIM_OC4_SetConfig+0x84>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a15      	ldr	r2, [pc, #84]	; (800783c <TIM_OC4_SetConfig+0xcc>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d003      	beq.n	80077f4 <TIM_OC4_SetConfig+0x84>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a14      	ldr	r2, [pc, #80]	; (8007840 <TIM_OC4_SetConfig+0xd0>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d109      	bne.n	8007808 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	695b      	ldr	r3, [r3, #20]
 8007800:	019b      	lsls	r3, r3, #6
 8007802:	697a      	ldr	r2, [r7, #20]
 8007804:	4313      	orrs	r3, r2
 8007806:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	697a      	ldr	r2, [r7, #20]
 800780c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	68fa      	ldr	r2, [r7, #12]
 8007812:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	685a      	ldr	r2, [r3, #4]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	693a      	ldr	r2, [r7, #16]
 8007820:	621a      	str	r2, [r3, #32]
}
 8007822:	bf00      	nop
 8007824:	371c      	adds	r7, #28
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr
 800782e:	bf00      	nop
 8007830:	40012c00 	.word	0x40012c00
 8007834:	40013400 	.word	0x40013400
 8007838:	40014000 	.word	0x40014000
 800783c:	40014400 	.word	0x40014400
 8007840:	40014800 	.word	0x40014800

08007844 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007844:	b480      	push	{r7}
 8007846:	b087      	sub	sp, #28
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a1b      	ldr	r3, [r3, #32]
 8007852:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6a1b      	ldr	r3, [r3, #32]
 8007858:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800786a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007876:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68fa      	ldr	r2, [r7, #12]
 800787e:	4313      	orrs	r3, r2
 8007880:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007888:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	041b      	lsls	r3, r3, #16
 8007890:	693a      	ldr	r2, [r7, #16]
 8007892:	4313      	orrs	r3, r2
 8007894:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4a17      	ldr	r2, [pc, #92]	; (80078f8 <TIM_OC5_SetConfig+0xb4>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d00f      	beq.n	80078be <TIM_OC5_SetConfig+0x7a>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a16      	ldr	r2, [pc, #88]	; (80078fc <TIM_OC5_SetConfig+0xb8>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d00b      	beq.n	80078be <TIM_OC5_SetConfig+0x7a>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a15      	ldr	r2, [pc, #84]	; (8007900 <TIM_OC5_SetConfig+0xbc>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d007      	beq.n	80078be <TIM_OC5_SetConfig+0x7a>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a14      	ldr	r2, [pc, #80]	; (8007904 <TIM_OC5_SetConfig+0xc0>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d003      	beq.n	80078be <TIM_OC5_SetConfig+0x7a>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a13      	ldr	r2, [pc, #76]	; (8007908 <TIM_OC5_SetConfig+0xc4>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d109      	bne.n	80078d2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	695b      	ldr	r3, [r3, #20]
 80078ca:	021b      	lsls	r3, r3, #8
 80078cc:	697a      	ldr	r2, [r7, #20]
 80078ce:	4313      	orrs	r3, r2
 80078d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	697a      	ldr	r2, [r7, #20]
 80078d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	68fa      	ldr	r2, [r7, #12]
 80078dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	685a      	ldr	r2, [r3, #4]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	693a      	ldr	r2, [r7, #16]
 80078ea:	621a      	str	r2, [r3, #32]
}
 80078ec:	bf00      	nop
 80078ee:	371c      	adds	r7, #28
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr
 80078f8:	40012c00 	.word	0x40012c00
 80078fc:	40013400 	.word	0x40013400
 8007900:	40014000 	.word	0x40014000
 8007904:	40014400 	.word	0x40014400
 8007908:	40014800 	.word	0x40014800

0800790c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800790c:	b480      	push	{r7}
 800790e:	b087      	sub	sp, #28
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a1b      	ldr	r3, [r3, #32]
 800791a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6a1b      	ldr	r3, [r3, #32]
 8007920:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800793a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800793e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	021b      	lsls	r3, r3, #8
 8007946:	68fa      	ldr	r2, [r7, #12]
 8007948:	4313      	orrs	r3, r2
 800794a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007952:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	051b      	lsls	r3, r3, #20
 800795a:	693a      	ldr	r2, [r7, #16]
 800795c:	4313      	orrs	r3, r2
 800795e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a18      	ldr	r2, [pc, #96]	; (80079c4 <TIM_OC6_SetConfig+0xb8>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d00f      	beq.n	8007988 <TIM_OC6_SetConfig+0x7c>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a17      	ldr	r2, [pc, #92]	; (80079c8 <TIM_OC6_SetConfig+0xbc>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d00b      	beq.n	8007988 <TIM_OC6_SetConfig+0x7c>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a16      	ldr	r2, [pc, #88]	; (80079cc <TIM_OC6_SetConfig+0xc0>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d007      	beq.n	8007988 <TIM_OC6_SetConfig+0x7c>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a15      	ldr	r2, [pc, #84]	; (80079d0 <TIM_OC6_SetConfig+0xc4>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d003      	beq.n	8007988 <TIM_OC6_SetConfig+0x7c>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a14      	ldr	r2, [pc, #80]	; (80079d4 <TIM_OC6_SetConfig+0xc8>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d109      	bne.n	800799c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800798e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	695b      	ldr	r3, [r3, #20]
 8007994:	029b      	lsls	r3, r3, #10
 8007996:	697a      	ldr	r2, [r7, #20]
 8007998:	4313      	orrs	r3, r2
 800799a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	697a      	ldr	r2, [r7, #20]
 80079a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	685a      	ldr	r2, [r3, #4]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	693a      	ldr	r2, [r7, #16]
 80079b4:	621a      	str	r2, [r3, #32]
}
 80079b6:	bf00      	nop
 80079b8:	371c      	adds	r7, #28
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop
 80079c4:	40012c00 	.word	0x40012c00
 80079c8:	40013400 	.word	0x40013400
 80079cc:	40014000 	.word	0x40014000
 80079d0:	40014400 	.word	0x40014400
 80079d4:	40014800 	.word	0x40014800

080079d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079d8:	b480      	push	{r7}
 80079da:	b087      	sub	sp, #28
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6a1b      	ldr	r3, [r3, #32]
 80079e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6a1b      	ldr	r3, [r3, #32]
 80079ee:	f023 0201 	bic.w	r2, r3, #1
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	699b      	ldr	r3, [r3, #24]
 80079fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	011b      	lsls	r3, r3, #4
 8007a08:	693a      	ldr	r2, [r7, #16]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	f023 030a 	bic.w	r3, r3, #10
 8007a14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a16:	697a      	ldr	r2, [r7, #20]
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	693a      	ldr	r2, [r7, #16]
 8007a22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	697a      	ldr	r2, [r7, #20]
 8007a28:	621a      	str	r2, [r3, #32]
}
 8007a2a:	bf00      	nop
 8007a2c:	371c      	adds	r7, #28
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr

08007a36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a36:	b480      	push	{r7}
 8007a38:	b087      	sub	sp, #28
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	60f8      	str	r0, [r7, #12]
 8007a3e:	60b9      	str	r1, [r7, #8]
 8007a40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	6a1b      	ldr	r3, [r3, #32]
 8007a46:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6a1b      	ldr	r3, [r3, #32]
 8007a4c:	f023 0210 	bic.w	r2, r3, #16
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	699b      	ldr	r3, [r3, #24]
 8007a58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	031b      	lsls	r3, r3, #12
 8007a66:	693a      	ldr	r2, [r7, #16]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a72:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	011b      	lsls	r3, r3, #4
 8007a78:	697a      	ldr	r2, [r7, #20]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	693a      	ldr	r2, [r7, #16]
 8007a82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	697a      	ldr	r2, [r7, #20]
 8007a88:	621a      	str	r2, [r3, #32]
}
 8007a8a:	bf00      	nop
 8007a8c:	371c      	adds	r7, #28
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr

08007a96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a96:	b480      	push	{r7}
 8007a98:	b085      	sub	sp, #20
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
 8007a9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007aae:	683a      	ldr	r2, [r7, #0]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	f043 0307 	orr.w	r3, r3, #7
 8007ab8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	68fa      	ldr	r2, [r7, #12]
 8007abe:	609a      	str	r2, [r3, #8]
}
 8007ac0:	bf00      	nop
 8007ac2:	3714      	adds	r7, #20
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b087      	sub	sp, #28
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	607a      	str	r2, [r7, #4]
 8007ad8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ae6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	021a      	lsls	r2, r3, #8
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	431a      	orrs	r2, r3
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	697a      	ldr	r2, [r7, #20]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	697a      	ldr	r2, [r7, #20]
 8007afe:	609a      	str	r2, [r3, #8]
}
 8007b00:	bf00      	nop
 8007b02:	371c      	adds	r7, #28
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b087      	sub	sp, #28
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	f003 031f 	and.w	r3, r3, #31
 8007b1e:	2201      	movs	r2, #1
 8007b20:	fa02 f303 	lsl.w	r3, r2, r3
 8007b24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6a1a      	ldr	r2, [r3, #32]
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	43db      	mvns	r3, r3
 8007b2e:	401a      	ands	r2, r3
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6a1a      	ldr	r2, [r3, #32]
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	f003 031f 	and.w	r3, r3, #31
 8007b3e:	6879      	ldr	r1, [r7, #4]
 8007b40:	fa01 f303 	lsl.w	r3, r1, r3
 8007b44:	431a      	orrs	r2, r3
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	621a      	str	r2, [r3, #32]
}
 8007b4a:	bf00      	nop
 8007b4c:	371c      	adds	r7, #28
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr
	...

08007b58 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d109      	bne.n	8007b7c <HAL_TIMEx_PWMN_Start+0x24>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	bf14      	ite	ne
 8007b74:	2301      	movne	r3, #1
 8007b76:	2300      	moveq	r3, #0
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	e022      	b.n	8007bc2 <HAL_TIMEx_PWMN_Start+0x6a>
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	2b04      	cmp	r3, #4
 8007b80:	d109      	bne.n	8007b96 <HAL_TIMEx_PWMN_Start+0x3e>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	bf14      	ite	ne
 8007b8e:	2301      	movne	r3, #1
 8007b90:	2300      	moveq	r3, #0
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	e015      	b.n	8007bc2 <HAL_TIMEx_PWMN_Start+0x6a>
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	2b08      	cmp	r3, #8
 8007b9a:	d109      	bne.n	8007bb0 <HAL_TIMEx_PWMN_Start+0x58>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	bf14      	ite	ne
 8007ba8:	2301      	movne	r3, #1
 8007baa:	2300      	moveq	r3, #0
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	e008      	b.n	8007bc2 <HAL_TIMEx_PWMN_Start+0x6a>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	bf14      	ite	ne
 8007bbc:	2301      	movne	r3, #1
 8007bbe:	2300      	moveq	r3, #0
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d001      	beq.n	8007bca <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e06e      	b.n	8007ca8 <HAL_TIMEx_PWMN_Start+0x150>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d104      	bne.n	8007bda <HAL_TIMEx_PWMN_Start+0x82>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2202      	movs	r2, #2
 8007bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bd8:	e013      	b.n	8007c02 <HAL_TIMEx_PWMN_Start+0xaa>
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	2b04      	cmp	r3, #4
 8007bde:	d104      	bne.n	8007bea <HAL_TIMEx_PWMN_Start+0x92>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2202      	movs	r2, #2
 8007be4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007be8:	e00b      	b.n	8007c02 <HAL_TIMEx_PWMN_Start+0xaa>
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	2b08      	cmp	r3, #8
 8007bee:	d104      	bne.n	8007bfa <HAL_TIMEx_PWMN_Start+0xa2>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2202      	movs	r2, #2
 8007bf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007bf8:	e003      	b.n	8007c02 <HAL_TIMEx_PWMN_Start+0xaa>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2202      	movs	r2, #2
 8007bfe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2204      	movs	r2, #4
 8007c08:	6839      	ldr	r1, [r7, #0]
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f000 f964 	bl	8007ed8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c1e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a22      	ldr	r2, [pc, #136]	; (8007cb0 <HAL_TIMEx_PWMN_Start+0x158>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d01d      	beq.n	8007c66 <HAL_TIMEx_PWMN_Start+0x10e>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c32:	d018      	beq.n	8007c66 <HAL_TIMEx_PWMN_Start+0x10e>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a1e      	ldr	r2, [pc, #120]	; (8007cb4 <HAL_TIMEx_PWMN_Start+0x15c>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d013      	beq.n	8007c66 <HAL_TIMEx_PWMN_Start+0x10e>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a1d      	ldr	r2, [pc, #116]	; (8007cb8 <HAL_TIMEx_PWMN_Start+0x160>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d00e      	beq.n	8007c66 <HAL_TIMEx_PWMN_Start+0x10e>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a1b      	ldr	r2, [pc, #108]	; (8007cbc <HAL_TIMEx_PWMN_Start+0x164>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d009      	beq.n	8007c66 <HAL_TIMEx_PWMN_Start+0x10e>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a1a      	ldr	r2, [pc, #104]	; (8007cc0 <HAL_TIMEx_PWMN_Start+0x168>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d004      	beq.n	8007c66 <HAL_TIMEx_PWMN_Start+0x10e>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a18      	ldr	r2, [pc, #96]	; (8007cc4 <HAL_TIMEx_PWMN_Start+0x16c>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d115      	bne.n	8007c92 <HAL_TIMEx_PWMN_Start+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	689a      	ldr	r2, [r3, #8]
 8007c6c:	4b16      	ldr	r3, [pc, #88]	; (8007cc8 <HAL_TIMEx_PWMN_Start+0x170>)
 8007c6e:	4013      	ands	r3, r2
 8007c70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2b06      	cmp	r3, #6
 8007c76:	d015      	beq.n	8007ca4 <HAL_TIMEx_PWMN_Start+0x14c>
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c7e:	d011      	beq.n	8007ca4 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f042 0201 	orr.w	r2, r2, #1
 8007c8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c90:	e008      	b.n	8007ca4 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f042 0201 	orr.w	r2, r2, #1
 8007ca0:	601a      	str	r2, [r3, #0]
 8007ca2:	e000      	b.n	8007ca6 <HAL_TIMEx_PWMN_Start+0x14e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ca4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ca6:	2300      	movs	r3, #0
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3710      	adds	r7, #16
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	40012c00 	.word	0x40012c00
 8007cb4:	40000400 	.word	0x40000400
 8007cb8:	40000800 	.word	0x40000800
 8007cbc:	40000c00 	.word	0x40000c00
 8007cc0:	40013400 	.word	0x40013400
 8007cc4:	40014000 	.word	0x40014000
 8007cc8:	00010007 	.word	0x00010007

08007ccc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d101      	bne.n	8007ce4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ce0:	2302      	movs	r3, #2
 8007ce2:	e068      	b.n	8007db6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2202      	movs	r2, #2
 8007cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a2e      	ldr	r2, [pc, #184]	; (8007dc4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d004      	beq.n	8007d18 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a2d      	ldr	r2, [pc, #180]	; (8007dc8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d108      	bne.n	8007d2a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007d1e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	4313      	orrs	r3, r2
 8007d28:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d30:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a1e      	ldr	r2, [pc, #120]	; (8007dc4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d01d      	beq.n	8007d8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d56:	d018      	beq.n	8007d8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a1b      	ldr	r2, [pc, #108]	; (8007dcc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d013      	beq.n	8007d8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a1a      	ldr	r2, [pc, #104]	; (8007dd0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d00e      	beq.n	8007d8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a18      	ldr	r2, [pc, #96]	; (8007dd4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d009      	beq.n	8007d8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a13      	ldr	r2, [pc, #76]	; (8007dc8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d004      	beq.n	8007d8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a14      	ldr	r2, [pc, #80]	; (8007dd8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d10c      	bne.n	8007da4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	68ba      	ldr	r2, [r7, #8]
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	68ba      	ldr	r2, [r7, #8]
 8007da2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007db4:	2300      	movs	r3, #0
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3714      	adds	r7, #20
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr
 8007dc2:	bf00      	nop
 8007dc4:	40012c00 	.word	0x40012c00
 8007dc8:	40013400 	.word	0x40013400
 8007dcc:	40000400 	.word	0x40000400
 8007dd0:	40000800 	.word	0x40000800
 8007dd4:	40000c00 	.word	0x40000c00
 8007dd8:	40014000 	.word	0x40014000

08007ddc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b085      	sub	sp, #20
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007de6:	2300      	movs	r3, #0
 8007de8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d101      	bne.n	8007df8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007df4:	2302      	movs	r3, #2
 8007df6:	e065      	b.n	8007ec4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	4313      	orrs	r3, r2
 8007e28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	695b      	ldr	r3, [r3, #20]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	699b      	ldr	r3, [r3, #24]
 8007e6c:	041b      	lsls	r3, r3, #16
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a16      	ldr	r2, [pc, #88]	; (8007ed0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d004      	beq.n	8007e86 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a14      	ldr	r2, [pc, #80]	; (8007ed4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d115      	bne.n	8007eb2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e90:	051b      	lsls	r3, r3, #20
 8007e92:	4313      	orrs	r3, r2
 8007e94:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	69db      	ldr	r3, [r3, #28]
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	6a1b      	ldr	r3, [r3, #32]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3714      	adds	r7, #20
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr
 8007ed0:	40012c00 	.word	0x40012c00
 8007ed4:	40013400 	.word	0x40013400

08007ed8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b087      	sub	sp, #28
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	60b9      	str	r1, [r7, #8]
 8007ee2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	f003 030f 	and.w	r3, r3, #15
 8007eea:	2204      	movs	r2, #4
 8007eec:	fa02 f303 	lsl.w	r3, r2, r3
 8007ef0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6a1a      	ldr	r2, [r3, #32]
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	43db      	mvns	r3, r3
 8007efa:	401a      	ands	r2, r3
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6a1a      	ldr	r2, [r3, #32]
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	f003 030f 	and.w	r3, r3, #15
 8007f0a:	6879      	ldr	r1, [r7, #4]
 8007f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8007f10:	431a      	orrs	r2, r3
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	621a      	str	r2, [r3, #32]
}
 8007f16:	bf00      	nop
 8007f18:	371c      	adds	r7, #28
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr

08007f22 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b082      	sub	sp, #8
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d101      	bne.n	8007f34 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	e042      	b.n	8007fba <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d106      	bne.n	8007f4c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f7fa f8f8 	bl	800213c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2224      	movs	r2, #36	; 0x24
 8007f50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f022 0201 	bic.w	r2, r2, #1
 8007f62:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d002      	beq.n	8007f72 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 fbb3 	bl	80086d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 f8b4 	bl	80080e0 <UART_SetConfig>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d101      	bne.n	8007f82 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e01b      	b.n	8007fba <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	685a      	ldr	r2, [r3, #4]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f90:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	689a      	ldr	r2, [r3, #8]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007fa0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f042 0201 	orr.w	r2, r2, #1
 8007fb0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 fc32 	bl	800881c <UART_CheckIdleState>
 8007fb8:	4603      	mov	r3, r0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3708      	adds	r7, #8
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b08a      	sub	sp, #40	; 0x28
 8007fc6:	af02      	add	r7, sp, #8
 8007fc8:	60f8      	str	r0, [r7, #12]
 8007fca:	60b9      	str	r1, [r7, #8]
 8007fcc:	603b      	str	r3, [r7, #0]
 8007fce:	4613      	mov	r3, r2
 8007fd0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fd8:	2b20      	cmp	r3, #32
 8007fda:	d17c      	bne.n	80080d6 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d002      	beq.n	8007fe8 <HAL_UART_Transmit+0x26>
 8007fe2:	88fb      	ldrh	r3, [r7, #6]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d101      	bne.n	8007fec <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e075      	b.n	80080d8 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2221      	movs	r2, #33	; 0x21
 8007ff8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ffc:	f7fa fb04 	bl	8002608 <HAL_GetTick>
 8008000:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	88fa      	ldrh	r2, [r7, #6]
 8008006:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	88fa      	ldrh	r2, [r7, #6]
 800800e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800801a:	d108      	bne.n	800802e <HAL_UART_Transmit+0x6c>
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	691b      	ldr	r3, [r3, #16]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d104      	bne.n	800802e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008024:	2300      	movs	r3, #0
 8008026:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	61bb      	str	r3, [r7, #24]
 800802c:	e003      	b.n	8008036 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008032:	2300      	movs	r3, #0
 8008034:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008036:	e031      	b.n	800809c <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	9300      	str	r3, [sp, #0]
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	2200      	movs	r2, #0
 8008040:	2180      	movs	r1, #128	; 0x80
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f000 fc94 	bl	8008970 <UART_WaitOnFlagUntilTimeout>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d005      	beq.n	800805a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2220      	movs	r2, #32
 8008052:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008056:	2303      	movs	r3, #3
 8008058:	e03e      	b.n	80080d8 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d10b      	bne.n	8008078 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008060:	69bb      	ldr	r3, [r7, #24]
 8008062:	881a      	ldrh	r2, [r3, #0]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800806c:	b292      	uxth	r2, r2
 800806e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	3302      	adds	r3, #2
 8008074:	61bb      	str	r3, [r7, #24]
 8008076:	e008      	b.n	800808a <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008078:	69fb      	ldr	r3, [r7, #28]
 800807a:	781a      	ldrb	r2, [r3, #0]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	b292      	uxth	r2, r2
 8008082:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	3301      	adds	r3, #1
 8008088:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008090:	b29b      	uxth	r3, r3
 8008092:	3b01      	subs	r3, #1
 8008094:	b29a      	uxth	r2, r3
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d1c7      	bne.n	8008038 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	9300      	str	r3, [sp, #0]
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	2200      	movs	r2, #0
 80080b0:	2140      	movs	r1, #64	; 0x40
 80080b2:	68f8      	ldr	r0, [r7, #12]
 80080b4:	f000 fc5c 	bl	8008970 <UART_WaitOnFlagUntilTimeout>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d005      	beq.n	80080ca <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2220      	movs	r2, #32
 80080c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80080c6:	2303      	movs	r3, #3
 80080c8:	e006      	b.n	80080d8 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2220      	movs	r2, #32
 80080ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80080d2:	2300      	movs	r3, #0
 80080d4:	e000      	b.n	80080d8 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 80080d6:	2302      	movs	r3, #2
  }
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3720      	adds	r7, #32
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080e4:	b08c      	sub	sp, #48	; 0x30
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80080ea:	2300      	movs	r3, #0
 80080ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	689a      	ldr	r2, [r3, #8]
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	691b      	ldr	r3, [r3, #16]
 80080f8:	431a      	orrs	r2, r3
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	695b      	ldr	r3, [r3, #20]
 80080fe:	431a      	orrs	r2, r3
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	69db      	ldr	r3, [r3, #28]
 8008104:	4313      	orrs	r3, r2
 8008106:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	4baa      	ldr	r3, [pc, #680]	; (80083b8 <UART_SetConfig+0x2d8>)
 8008110:	4013      	ands	r3, r2
 8008112:	697a      	ldr	r2, [r7, #20]
 8008114:	6812      	ldr	r2, [r2, #0]
 8008116:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008118:	430b      	orrs	r3, r1
 800811a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	68da      	ldr	r2, [r3, #12]
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	430a      	orrs	r2, r1
 8008130:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	699b      	ldr	r3, [r3, #24]
 8008136:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a9f      	ldr	r2, [pc, #636]	; (80083bc <UART_SetConfig+0x2dc>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d004      	beq.n	800814c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	6a1b      	ldr	r3, [r3, #32]
 8008146:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008148:	4313      	orrs	r3, r2
 800814a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008156:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800815a:	697a      	ldr	r2, [r7, #20]
 800815c:	6812      	ldr	r2, [r2, #0]
 800815e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008160:	430b      	orrs	r3, r1
 8008162:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800816a:	f023 010f 	bic.w	r1, r3, #15
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	430a      	orrs	r2, r1
 8008178:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a90      	ldr	r2, [pc, #576]	; (80083c0 <UART_SetConfig+0x2e0>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d125      	bne.n	80081d0 <UART_SetConfig+0xf0>
 8008184:	4b8f      	ldr	r3, [pc, #572]	; (80083c4 <UART_SetConfig+0x2e4>)
 8008186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800818a:	f003 0303 	and.w	r3, r3, #3
 800818e:	2b03      	cmp	r3, #3
 8008190:	d81a      	bhi.n	80081c8 <UART_SetConfig+0xe8>
 8008192:	a201      	add	r2, pc, #4	; (adr r2, 8008198 <UART_SetConfig+0xb8>)
 8008194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008198:	080081a9 	.word	0x080081a9
 800819c:	080081b9 	.word	0x080081b9
 80081a0:	080081b1 	.word	0x080081b1
 80081a4:	080081c1 	.word	0x080081c1
 80081a8:	2301      	movs	r3, #1
 80081aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081ae:	e116      	b.n	80083de <UART_SetConfig+0x2fe>
 80081b0:	2302      	movs	r3, #2
 80081b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081b6:	e112      	b.n	80083de <UART_SetConfig+0x2fe>
 80081b8:	2304      	movs	r3, #4
 80081ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081be:	e10e      	b.n	80083de <UART_SetConfig+0x2fe>
 80081c0:	2308      	movs	r3, #8
 80081c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081c6:	e10a      	b.n	80083de <UART_SetConfig+0x2fe>
 80081c8:	2310      	movs	r3, #16
 80081ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081ce:	e106      	b.n	80083de <UART_SetConfig+0x2fe>
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a7c      	ldr	r2, [pc, #496]	; (80083c8 <UART_SetConfig+0x2e8>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d138      	bne.n	800824c <UART_SetConfig+0x16c>
 80081da:	4b7a      	ldr	r3, [pc, #488]	; (80083c4 <UART_SetConfig+0x2e4>)
 80081dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081e0:	f003 030c 	and.w	r3, r3, #12
 80081e4:	2b0c      	cmp	r3, #12
 80081e6:	d82d      	bhi.n	8008244 <UART_SetConfig+0x164>
 80081e8:	a201      	add	r2, pc, #4	; (adr r2, 80081f0 <UART_SetConfig+0x110>)
 80081ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ee:	bf00      	nop
 80081f0:	08008225 	.word	0x08008225
 80081f4:	08008245 	.word	0x08008245
 80081f8:	08008245 	.word	0x08008245
 80081fc:	08008245 	.word	0x08008245
 8008200:	08008235 	.word	0x08008235
 8008204:	08008245 	.word	0x08008245
 8008208:	08008245 	.word	0x08008245
 800820c:	08008245 	.word	0x08008245
 8008210:	0800822d 	.word	0x0800822d
 8008214:	08008245 	.word	0x08008245
 8008218:	08008245 	.word	0x08008245
 800821c:	08008245 	.word	0x08008245
 8008220:	0800823d 	.word	0x0800823d
 8008224:	2300      	movs	r3, #0
 8008226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800822a:	e0d8      	b.n	80083de <UART_SetConfig+0x2fe>
 800822c:	2302      	movs	r3, #2
 800822e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008232:	e0d4      	b.n	80083de <UART_SetConfig+0x2fe>
 8008234:	2304      	movs	r3, #4
 8008236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800823a:	e0d0      	b.n	80083de <UART_SetConfig+0x2fe>
 800823c:	2308      	movs	r3, #8
 800823e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008242:	e0cc      	b.n	80083de <UART_SetConfig+0x2fe>
 8008244:	2310      	movs	r3, #16
 8008246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800824a:	e0c8      	b.n	80083de <UART_SetConfig+0x2fe>
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a5e      	ldr	r2, [pc, #376]	; (80083cc <UART_SetConfig+0x2ec>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d125      	bne.n	80082a2 <UART_SetConfig+0x1c2>
 8008256:	4b5b      	ldr	r3, [pc, #364]	; (80083c4 <UART_SetConfig+0x2e4>)
 8008258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800825c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008260:	2b30      	cmp	r3, #48	; 0x30
 8008262:	d016      	beq.n	8008292 <UART_SetConfig+0x1b2>
 8008264:	2b30      	cmp	r3, #48	; 0x30
 8008266:	d818      	bhi.n	800829a <UART_SetConfig+0x1ba>
 8008268:	2b20      	cmp	r3, #32
 800826a:	d00a      	beq.n	8008282 <UART_SetConfig+0x1a2>
 800826c:	2b20      	cmp	r3, #32
 800826e:	d814      	bhi.n	800829a <UART_SetConfig+0x1ba>
 8008270:	2b00      	cmp	r3, #0
 8008272:	d002      	beq.n	800827a <UART_SetConfig+0x19a>
 8008274:	2b10      	cmp	r3, #16
 8008276:	d008      	beq.n	800828a <UART_SetConfig+0x1aa>
 8008278:	e00f      	b.n	800829a <UART_SetConfig+0x1ba>
 800827a:	2300      	movs	r3, #0
 800827c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008280:	e0ad      	b.n	80083de <UART_SetConfig+0x2fe>
 8008282:	2302      	movs	r3, #2
 8008284:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008288:	e0a9      	b.n	80083de <UART_SetConfig+0x2fe>
 800828a:	2304      	movs	r3, #4
 800828c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008290:	e0a5      	b.n	80083de <UART_SetConfig+0x2fe>
 8008292:	2308      	movs	r3, #8
 8008294:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008298:	e0a1      	b.n	80083de <UART_SetConfig+0x2fe>
 800829a:	2310      	movs	r3, #16
 800829c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082a0:	e09d      	b.n	80083de <UART_SetConfig+0x2fe>
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a4a      	ldr	r2, [pc, #296]	; (80083d0 <UART_SetConfig+0x2f0>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d125      	bne.n	80082f8 <UART_SetConfig+0x218>
 80082ac:	4b45      	ldr	r3, [pc, #276]	; (80083c4 <UART_SetConfig+0x2e4>)
 80082ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80082b6:	2bc0      	cmp	r3, #192	; 0xc0
 80082b8:	d016      	beq.n	80082e8 <UART_SetConfig+0x208>
 80082ba:	2bc0      	cmp	r3, #192	; 0xc0
 80082bc:	d818      	bhi.n	80082f0 <UART_SetConfig+0x210>
 80082be:	2b80      	cmp	r3, #128	; 0x80
 80082c0:	d00a      	beq.n	80082d8 <UART_SetConfig+0x1f8>
 80082c2:	2b80      	cmp	r3, #128	; 0x80
 80082c4:	d814      	bhi.n	80082f0 <UART_SetConfig+0x210>
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d002      	beq.n	80082d0 <UART_SetConfig+0x1f0>
 80082ca:	2b40      	cmp	r3, #64	; 0x40
 80082cc:	d008      	beq.n	80082e0 <UART_SetConfig+0x200>
 80082ce:	e00f      	b.n	80082f0 <UART_SetConfig+0x210>
 80082d0:	2300      	movs	r3, #0
 80082d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082d6:	e082      	b.n	80083de <UART_SetConfig+0x2fe>
 80082d8:	2302      	movs	r3, #2
 80082da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082de:	e07e      	b.n	80083de <UART_SetConfig+0x2fe>
 80082e0:	2304      	movs	r3, #4
 80082e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082e6:	e07a      	b.n	80083de <UART_SetConfig+0x2fe>
 80082e8:	2308      	movs	r3, #8
 80082ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082ee:	e076      	b.n	80083de <UART_SetConfig+0x2fe>
 80082f0:	2310      	movs	r3, #16
 80082f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082f6:	e072      	b.n	80083de <UART_SetConfig+0x2fe>
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a35      	ldr	r2, [pc, #212]	; (80083d4 <UART_SetConfig+0x2f4>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d12a      	bne.n	8008358 <UART_SetConfig+0x278>
 8008302:	4b30      	ldr	r3, [pc, #192]	; (80083c4 <UART_SetConfig+0x2e4>)
 8008304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008308:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800830c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008310:	d01a      	beq.n	8008348 <UART_SetConfig+0x268>
 8008312:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008316:	d81b      	bhi.n	8008350 <UART_SetConfig+0x270>
 8008318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800831c:	d00c      	beq.n	8008338 <UART_SetConfig+0x258>
 800831e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008322:	d815      	bhi.n	8008350 <UART_SetConfig+0x270>
 8008324:	2b00      	cmp	r3, #0
 8008326:	d003      	beq.n	8008330 <UART_SetConfig+0x250>
 8008328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800832c:	d008      	beq.n	8008340 <UART_SetConfig+0x260>
 800832e:	e00f      	b.n	8008350 <UART_SetConfig+0x270>
 8008330:	2300      	movs	r3, #0
 8008332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008336:	e052      	b.n	80083de <UART_SetConfig+0x2fe>
 8008338:	2302      	movs	r3, #2
 800833a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800833e:	e04e      	b.n	80083de <UART_SetConfig+0x2fe>
 8008340:	2304      	movs	r3, #4
 8008342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008346:	e04a      	b.n	80083de <UART_SetConfig+0x2fe>
 8008348:	2308      	movs	r3, #8
 800834a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800834e:	e046      	b.n	80083de <UART_SetConfig+0x2fe>
 8008350:	2310      	movs	r3, #16
 8008352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008356:	e042      	b.n	80083de <UART_SetConfig+0x2fe>
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a17      	ldr	r2, [pc, #92]	; (80083bc <UART_SetConfig+0x2dc>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d13a      	bne.n	80083d8 <UART_SetConfig+0x2f8>
 8008362:	4b18      	ldr	r3, [pc, #96]	; (80083c4 <UART_SetConfig+0x2e4>)
 8008364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008368:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800836c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008370:	d01a      	beq.n	80083a8 <UART_SetConfig+0x2c8>
 8008372:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008376:	d81b      	bhi.n	80083b0 <UART_SetConfig+0x2d0>
 8008378:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800837c:	d00c      	beq.n	8008398 <UART_SetConfig+0x2b8>
 800837e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008382:	d815      	bhi.n	80083b0 <UART_SetConfig+0x2d0>
 8008384:	2b00      	cmp	r3, #0
 8008386:	d003      	beq.n	8008390 <UART_SetConfig+0x2b0>
 8008388:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800838c:	d008      	beq.n	80083a0 <UART_SetConfig+0x2c0>
 800838e:	e00f      	b.n	80083b0 <UART_SetConfig+0x2d0>
 8008390:	2300      	movs	r3, #0
 8008392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008396:	e022      	b.n	80083de <UART_SetConfig+0x2fe>
 8008398:	2302      	movs	r3, #2
 800839a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800839e:	e01e      	b.n	80083de <UART_SetConfig+0x2fe>
 80083a0:	2304      	movs	r3, #4
 80083a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083a6:	e01a      	b.n	80083de <UART_SetConfig+0x2fe>
 80083a8:	2308      	movs	r3, #8
 80083aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083ae:	e016      	b.n	80083de <UART_SetConfig+0x2fe>
 80083b0:	2310      	movs	r3, #16
 80083b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083b6:	e012      	b.n	80083de <UART_SetConfig+0x2fe>
 80083b8:	cfff69f3 	.word	0xcfff69f3
 80083bc:	40008000 	.word	0x40008000
 80083c0:	40013800 	.word	0x40013800
 80083c4:	40021000 	.word	0x40021000
 80083c8:	40004400 	.word	0x40004400
 80083cc:	40004800 	.word	0x40004800
 80083d0:	40004c00 	.word	0x40004c00
 80083d4:	40005000 	.word	0x40005000
 80083d8:	2310      	movs	r3, #16
 80083da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4aae      	ldr	r2, [pc, #696]	; (800869c <UART_SetConfig+0x5bc>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	f040 8097 	bne.w	8008518 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80083ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80083ee:	2b08      	cmp	r3, #8
 80083f0:	d823      	bhi.n	800843a <UART_SetConfig+0x35a>
 80083f2:	a201      	add	r2, pc, #4	; (adr r2, 80083f8 <UART_SetConfig+0x318>)
 80083f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f8:	0800841d 	.word	0x0800841d
 80083fc:	0800843b 	.word	0x0800843b
 8008400:	08008425 	.word	0x08008425
 8008404:	0800843b 	.word	0x0800843b
 8008408:	0800842b 	.word	0x0800842b
 800840c:	0800843b 	.word	0x0800843b
 8008410:	0800843b 	.word	0x0800843b
 8008414:	0800843b 	.word	0x0800843b
 8008418:	08008433 	.word	0x08008433
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800841c:	f7fd fd18 	bl	8005e50 <HAL_RCC_GetPCLK1Freq>
 8008420:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008422:	e010      	b.n	8008446 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008424:	4b9e      	ldr	r3, [pc, #632]	; (80086a0 <UART_SetConfig+0x5c0>)
 8008426:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008428:	e00d      	b.n	8008446 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800842a:	f7fd fc79 	bl	8005d20 <HAL_RCC_GetSysClockFreq>
 800842e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008430:	e009      	b.n	8008446 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008436:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008438:	e005      	b.n	8008446 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800843a:	2300      	movs	r3, #0
 800843c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800843e:	2301      	movs	r3, #1
 8008440:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008444:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008448:	2b00      	cmp	r3, #0
 800844a:	f000 8130 	beq.w	80086ae <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008452:	4a94      	ldr	r2, [pc, #592]	; (80086a4 <UART_SetConfig+0x5c4>)
 8008454:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008458:	461a      	mov	r2, r3
 800845a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008460:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	685a      	ldr	r2, [r3, #4]
 8008466:	4613      	mov	r3, r2
 8008468:	005b      	lsls	r3, r3, #1
 800846a:	4413      	add	r3, r2
 800846c:	69ba      	ldr	r2, [r7, #24]
 800846e:	429a      	cmp	r2, r3
 8008470:	d305      	bcc.n	800847e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008478:	69ba      	ldr	r2, [r7, #24]
 800847a:	429a      	cmp	r2, r3
 800847c:	d903      	bls.n	8008486 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008484:	e113      	b.n	80086ae <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008488:	2200      	movs	r2, #0
 800848a:	60bb      	str	r3, [r7, #8]
 800848c:	60fa      	str	r2, [r7, #12]
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008492:	4a84      	ldr	r2, [pc, #528]	; (80086a4 <UART_SetConfig+0x5c4>)
 8008494:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008498:	b29b      	uxth	r3, r3
 800849a:	2200      	movs	r2, #0
 800849c:	603b      	str	r3, [r7, #0]
 800849e:	607a      	str	r2, [r7, #4]
 80084a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80084a8:	f7f8 fb48 	bl	8000b3c <__aeabi_uldivmod>
 80084ac:	4602      	mov	r2, r0
 80084ae:	460b      	mov	r3, r1
 80084b0:	4610      	mov	r0, r2
 80084b2:	4619      	mov	r1, r3
 80084b4:	f04f 0200 	mov.w	r2, #0
 80084b8:	f04f 0300 	mov.w	r3, #0
 80084bc:	020b      	lsls	r3, r1, #8
 80084be:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80084c2:	0202      	lsls	r2, r0, #8
 80084c4:	6979      	ldr	r1, [r7, #20]
 80084c6:	6849      	ldr	r1, [r1, #4]
 80084c8:	0849      	lsrs	r1, r1, #1
 80084ca:	2000      	movs	r0, #0
 80084cc:	460c      	mov	r4, r1
 80084ce:	4605      	mov	r5, r0
 80084d0:	eb12 0804 	adds.w	r8, r2, r4
 80084d4:	eb43 0905 	adc.w	r9, r3, r5
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	469a      	mov	sl, r3
 80084e0:	4693      	mov	fp, r2
 80084e2:	4652      	mov	r2, sl
 80084e4:	465b      	mov	r3, fp
 80084e6:	4640      	mov	r0, r8
 80084e8:	4649      	mov	r1, r9
 80084ea:	f7f8 fb27 	bl	8000b3c <__aeabi_uldivmod>
 80084ee:	4602      	mov	r2, r0
 80084f0:	460b      	mov	r3, r1
 80084f2:	4613      	mov	r3, r2
 80084f4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80084f6:	6a3b      	ldr	r3, [r7, #32]
 80084f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80084fc:	d308      	bcc.n	8008510 <UART_SetConfig+0x430>
 80084fe:	6a3b      	ldr	r3, [r7, #32]
 8008500:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008504:	d204      	bcs.n	8008510 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	6a3a      	ldr	r2, [r7, #32]
 800850c:	60da      	str	r2, [r3, #12]
 800850e:	e0ce      	b.n	80086ae <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008510:	2301      	movs	r3, #1
 8008512:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008516:	e0ca      	b.n	80086ae <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	69db      	ldr	r3, [r3, #28]
 800851c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008520:	d166      	bne.n	80085f0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008522:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008526:	2b08      	cmp	r3, #8
 8008528:	d827      	bhi.n	800857a <UART_SetConfig+0x49a>
 800852a:	a201      	add	r2, pc, #4	; (adr r2, 8008530 <UART_SetConfig+0x450>)
 800852c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008530:	08008555 	.word	0x08008555
 8008534:	0800855d 	.word	0x0800855d
 8008538:	08008565 	.word	0x08008565
 800853c:	0800857b 	.word	0x0800857b
 8008540:	0800856b 	.word	0x0800856b
 8008544:	0800857b 	.word	0x0800857b
 8008548:	0800857b 	.word	0x0800857b
 800854c:	0800857b 	.word	0x0800857b
 8008550:	08008573 	.word	0x08008573
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008554:	f7fd fc7c 	bl	8005e50 <HAL_RCC_GetPCLK1Freq>
 8008558:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800855a:	e014      	b.n	8008586 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800855c:	f7fd fc8e 	bl	8005e7c <HAL_RCC_GetPCLK2Freq>
 8008560:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008562:	e010      	b.n	8008586 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008564:	4b4e      	ldr	r3, [pc, #312]	; (80086a0 <UART_SetConfig+0x5c0>)
 8008566:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008568:	e00d      	b.n	8008586 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800856a:	f7fd fbd9 	bl	8005d20 <HAL_RCC_GetSysClockFreq>
 800856e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008570:	e009      	b.n	8008586 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008572:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008576:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008578:	e005      	b.n	8008586 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800857a:	2300      	movs	r3, #0
 800857c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008584:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008588:	2b00      	cmp	r3, #0
 800858a:	f000 8090 	beq.w	80086ae <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008592:	4a44      	ldr	r2, [pc, #272]	; (80086a4 <UART_SetConfig+0x5c4>)
 8008594:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008598:	461a      	mov	r2, r3
 800859a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859c:	fbb3 f3f2 	udiv	r3, r3, r2
 80085a0:	005a      	lsls	r2, r3, #1
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	085b      	lsrs	r3, r3, #1
 80085a8:	441a      	add	r2, r3
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80085b2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085b4:	6a3b      	ldr	r3, [r7, #32]
 80085b6:	2b0f      	cmp	r3, #15
 80085b8:	d916      	bls.n	80085e8 <UART_SetConfig+0x508>
 80085ba:	6a3b      	ldr	r3, [r7, #32]
 80085bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085c0:	d212      	bcs.n	80085e8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80085c2:	6a3b      	ldr	r3, [r7, #32]
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	f023 030f 	bic.w	r3, r3, #15
 80085ca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80085cc:	6a3b      	ldr	r3, [r7, #32]
 80085ce:	085b      	lsrs	r3, r3, #1
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	f003 0307 	and.w	r3, r3, #7
 80085d6:	b29a      	uxth	r2, r3
 80085d8:	8bfb      	ldrh	r3, [r7, #30]
 80085da:	4313      	orrs	r3, r2
 80085dc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	8bfa      	ldrh	r2, [r7, #30]
 80085e4:	60da      	str	r2, [r3, #12]
 80085e6:	e062      	b.n	80086ae <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80085e8:	2301      	movs	r3, #1
 80085ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80085ee:	e05e      	b.n	80086ae <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80085f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80085f4:	2b08      	cmp	r3, #8
 80085f6:	d828      	bhi.n	800864a <UART_SetConfig+0x56a>
 80085f8:	a201      	add	r2, pc, #4	; (adr r2, 8008600 <UART_SetConfig+0x520>)
 80085fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085fe:	bf00      	nop
 8008600:	08008625 	.word	0x08008625
 8008604:	0800862d 	.word	0x0800862d
 8008608:	08008635 	.word	0x08008635
 800860c:	0800864b 	.word	0x0800864b
 8008610:	0800863b 	.word	0x0800863b
 8008614:	0800864b 	.word	0x0800864b
 8008618:	0800864b 	.word	0x0800864b
 800861c:	0800864b 	.word	0x0800864b
 8008620:	08008643 	.word	0x08008643
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008624:	f7fd fc14 	bl	8005e50 <HAL_RCC_GetPCLK1Freq>
 8008628:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800862a:	e014      	b.n	8008656 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800862c:	f7fd fc26 	bl	8005e7c <HAL_RCC_GetPCLK2Freq>
 8008630:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008632:	e010      	b.n	8008656 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008634:	4b1a      	ldr	r3, [pc, #104]	; (80086a0 <UART_SetConfig+0x5c0>)
 8008636:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008638:	e00d      	b.n	8008656 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800863a:	f7fd fb71 	bl	8005d20 <HAL_RCC_GetSysClockFreq>
 800863e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008640:	e009      	b.n	8008656 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008646:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008648:	e005      	b.n	8008656 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800864a:	2300      	movs	r3, #0
 800864c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008654:	bf00      	nop
    }

    if (pclk != 0U)
 8008656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008658:	2b00      	cmp	r3, #0
 800865a:	d028      	beq.n	80086ae <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008660:	4a10      	ldr	r2, [pc, #64]	; (80086a4 <UART_SetConfig+0x5c4>)
 8008662:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008666:	461a      	mov	r2, r3
 8008668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866a:	fbb3 f2f2 	udiv	r2, r3, r2
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	085b      	lsrs	r3, r3, #1
 8008674:	441a      	add	r2, r3
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	fbb2 f3f3 	udiv	r3, r2, r3
 800867e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008680:	6a3b      	ldr	r3, [r7, #32]
 8008682:	2b0f      	cmp	r3, #15
 8008684:	d910      	bls.n	80086a8 <UART_SetConfig+0x5c8>
 8008686:	6a3b      	ldr	r3, [r7, #32]
 8008688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800868c:	d20c      	bcs.n	80086a8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800868e:	6a3b      	ldr	r3, [r7, #32]
 8008690:	b29a      	uxth	r2, r3
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	60da      	str	r2, [r3, #12]
 8008698:	e009      	b.n	80086ae <UART_SetConfig+0x5ce>
 800869a:	bf00      	nop
 800869c:	40008000 	.word	0x40008000
 80086a0:	00f42400 	.word	0x00f42400
 80086a4:	08009798 	.word	0x08009798
      }
      else
      {
        ret = HAL_ERROR;
 80086a8:	2301      	movs	r3, #1
 80086aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	2201      	movs	r2, #1
 80086b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	2201      	movs	r2, #1
 80086ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	2200      	movs	r2, #0
 80086c2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	2200      	movs	r2, #0
 80086c8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80086ca:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3730      	adds	r7, #48	; 0x30
 80086d2:	46bd      	mov	sp, r7
 80086d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080086d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e4:	f003 0308 	and.w	r3, r3, #8
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d00a      	beq.n	8008702 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	430a      	orrs	r2, r1
 8008700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008706:	f003 0301 	and.w	r3, r3, #1
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00a      	beq.n	8008724 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	430a      	orrs	r2, r1
 8008722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008728:	f003 0302 	and.w	r3, r3, #2
 800872c:	2b00      	cmp	r3, #0
 800872e:	d00a      	beq.n	8008746 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	430a      	orrs	r2, r1
 8008744:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800874a:	f003 0304 	and.w	r3, r3, #4
 800874e:	2b00      	cmp	r3, #0
 8008750:	d00a      	beq.n	8008768 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	430a      	orrs	r2, r1
 8008766:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800876c:	f003 0310 	and.w	r3, r3, #16
 8008770:	2b00      	cmp	r3, #0
 8008772:	d00a      	beq.n	800878a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	430a      	orrs	r2, r1
 8008788:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800878e:	f003 0320 	and.w	r3, r3, #32
 8008792:	2b00      	cmp	r3, #0
 8008794:	d00a      	beq.n	80087ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	430a      	orrs	r2, r1
 80087aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d01a      	beq.n	80087ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	430a      	orrs	r2, r1
 80087cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087d6:	d10a      	bne.n	80087ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	430a      	orrs	r2, r1
 80087ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d00a      	beq.n	8008810 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	430a      	orrs	r2, r1
 800880e:	605a      	str	r2, [r3, #4]
  }
}
 8008810:	bf00      	nop
 8008812:	370c      	adds	r7, #12
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b098      	sub	sp, #96	; 0x60
 8008820:	af02      	add	r7, sp, #8
 8008822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800882c:	f7f9 feec 	bl	8002608 <HAL_GetTick>
 8008830:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f003 0308 	and.w	r3, r3, #8
 800883c:	2b08      	cmp	r3, #8
 800883e:	d12f      	bne.n	80088a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008840:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008844:	9300      	str	r3, [sp, #0]
 8008846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008848:	2200      	movs	r2, #0
 800884a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 f88e 	bl	8008970 <UART_WaitOnFlagUntilTimeout>
 8008854:	4603      	mov	r3, r0
 8008856:	2b00      	cmp	r3, #0
 8008858:	d022      	beq.n	80088a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008862:	e853 3f00 	ldrex	r3, [r3]
 8008866:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800886a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800886e:	653b      	str	r3, [r7, #80]	; 0x50
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	461a      	mov	r2, r3
 8008876:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008878:	647b      	str	r3, [r7, #68]	; 0x44
 800887a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800887c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800887e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008880:	e841 2300 	strex	r3, r2, [r1]
 8008884:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008888:	2b00      	cmp	r3, #0
 800888a:	d1e6      	bne.n	800885a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2220      	movs	r2, #32
 8008890:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2200      	movs	r2, #0
 8008898:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800889c:	2303      	movs	r3, #3
 800889e:	e063      	b.n	8008968 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f003 0304 	and.w	r3, r3, #4
 80088aa:	2b04      	cmp	r3, #4
 80088ac:	d149      	bne.n	8008942 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80088b2:	9300      	str	r3, [sp, #0]
 80088b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088b6:	2200      	movs	r2, #0
 80088b8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 f857 	bl	8008970 <UART_WaitOnFlagUntilTimeout>
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d03c      	beq.n	8008942 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d0:	e853 3f00 	ldrex	r3, [r3]
 80088d4:	623b      	str	r3, [r7, #32]
   return(result);
 80088d6:	6a3b      	ldr	r3, [r7, #32]
 80088d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	461a      	mov	r2, r3
 80088e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088e6:	633b      	str	r3, [r7, #48]	; 0x30
 80088e8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088ee:	e841 2300 	strex	r3, r2, [r1]
 80088f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80088f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d1e6      	bne.n	80088c8 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	3308      	adds	r3, #8
 8008900:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	e853 3f00 	ldrex	r3, [r3]
 8008908:	60fb      	str	r3, [r7, #12]
   return(result);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f023 0301 	bic.w	r3, r3, #1
 8008910:	64bb      	str	r3, [r7, #72]	; 0x48
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	3308      	adds	r3, #8
 8008918:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800891a:	61fa      	str	r2, [r7, #28]
 800891c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891e:	69b9      	ldr	r1, [r7, #24]
 8008920:	69fa      	ldr	r2, [r7, #28]
 8008922:	e841 2300 	strex	r3, r2, [r1]
 8008926:	617b      	str	r3, [r7, #20]
   return(result);
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d1e5      	bne.n	80088fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2220      	movs	r2, #32
 8008932:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2200      	movs	r2, #0
 800893a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800893e:	2303      	movs	r3, #3
 8008940:	e012      	b.n	8008968 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2220      	movs	r2, #32
 8008946:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2220      	movs	r2, #32
 800894e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008966:	2300      	movs	r3, #0
}
 8008968:	4618      	mov	r0, r3
 800896a:	3758      	adds	r7, #88	; 0x58
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	603b      	str	r3, [r7, #0]
 800897c:	4613      	mov	r3, r2
 800897e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008980:	e049      	b.n	8008a16 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008982:	69bb      	ldr	r3, [r7, #24]
 8008984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008988:	d045      	beq.n	8008a16 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800898a:	f7f9 fe3d 	bl	8002608 <HAL_GetTick>
 800898e:	4602      	mov	r2, r0
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	1ad3      	subs	r3, r2, r3
 8008994:	69ba      	ldr	r2, [r7, #24]
 8008996:	429a      	cmp	r2, r3
 8008998:	d302      	bcc.n	80089a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800899a:	69bb      	ldr	r3, [r7, #24]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d101      	bne.n	80089a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80089a0:	2303      	movs	r3, #3
 80089a2:	e048      	b.n	8008a36 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f003 0304 	and.w	r3, r3, #4
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d031      	beq.n	8008a16 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	69db      	ldr	r3, [r3, #28]
 80089b8:	f003 0308 	and.w	r3, r3, #8
 80089bc:	2b08      	cmp	r3, #8
 80089be:	d110      	bne.n	80089e2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	2208      	movs	r2, #8
 80089c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80089c8:	68f8      	ldr	r0, [r7, #12]
 80089ca:	f000 f838 	bl	8008a3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2208      	movs	r2, #8
 80089d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2200      	movs	r2, #0
 80089da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	e029      	b.n	8008a36 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	69db      	ldr	r3, [r3, #28]
 80089e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089f0:	d111      	bne.n	8008a16 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80089fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80089fc:	68f8      	ldr	r0, [r7, #12]
 80089fe:	f000 f81e 	bl	8008a3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2220      	movs	r2, #32
 8008a06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008a12:	2303      	movs	r3, #3
 8008a14:	e00f      	b.n	8008a36 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	69da      	ldr	r2, [r3, #28]
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	4013      	ands	r3, r2
 8008a20:	68ba      	ldr	r2, [r7, #8]
 8008a22:	429a      	cmp	r2, r3
 8008a24:	bf0c      	ite	eq
 8008a26:	2301      	moveq	r3, #1
 8008a28:	2300      	movne	r3, #0
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	79fb      	ldrb	r3, [r7, #7]
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d0a6      	beq.n	8008982 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a34:	2300      	movs	r3, #0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3710      	adds	r7, #16
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a3e:	b480      	push	{r7}
 8008a40:	b095      	sub	sp, #84	; 0x54
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a4e:	e853 3f00 	ldrex	r3, [r3]
 8008a52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	461a      	mov	r2, r3
 8008a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a64:	643b      	str	r3, [r7, #64]	; 0x40
 8008a66:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a6c:	e841 2300 	strex	r3, r2, [r1]
 8008a70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d1e6      	bne.n	8008a46 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	3308      	adds	r3, #8
 8008a7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a80:	6a3b      	ldr	r3, [r7, #32]
 8008a82:	e853 3f00 	ldrex	r3, [r3]
 8008a86:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a88:	69fb      	ldr	r3, [r7, #28]
 8008a8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a8e:	f023 0301 	bic.w	r3, r3, #1
 8008a92:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	3308      	adds	r3, #8
 8008a9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008aa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008aa4:	e841 2300 	strex	r3, r2, [r1]
 8008aa8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d1e3      	bne.n	8008a78 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d118      	bne.n	8008aea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	e853 3f00 	ldrex	r3, [r3]
 8008ac4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	f023 0310 	bic.w	r3, r3, #16
 8008acc:	647b      	str	r3, [r7, #68]	; 0x44
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ad6:	61bb      	str	r3, [r7, #24]
 8008ad8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ada:	6979      	ldr	r1, [r7, #20]
 8008adc:	69ba      	ldr	r2, [r7, #24]
 8008ade:	e841 2300 	strex	r3, r2, [r1]
 8008ae2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d1e6      	bne.n	8008ab8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2220      	movs	r2, #32
 8008aee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008afe:	bf00      	nop
 8008b00:	3754      	adds	r7, #84	; 0x54
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr

08008b0a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008b0a:	b480      	push	{r7}
 8008b0c:	b085      	sub	sp, #20
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d101      	bne.n	8008b20 <HAL_UARTEx_DisableFifoMode+0x16>
 8008b1c:	2302      	movs	r3, #2
 8008b1e:	e027      	b.n	8008b70 <HAL_UARTEx_DisableFifoMode+0x66>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2224      	movs	r2, #36	; 0x24
 8008b2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f022 0201 	bic.w	r2, r2, #1
 8008b46:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008b4e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	68fa      	ldr	r2, [r7, #12]
 8008b5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2220      	movs	r2, #32
 8008b62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3714      	adds	r7, #20
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d101      	bne.n	8008b94 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008b90:	2302      	movs	r3, #2
 8008b92:	e02d      	b.n	8008bf0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2224      	movs	r2, #36	; 0x24
 8008ba0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f022 0201 	bic.w	r2, r2, #1
 8008bba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	683a      	ldr	r2, [r7, #0]
 8008bcc:	430a      	orrs	r2, r1
 8008bce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 f84f 	bl	8008c74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	68fa      	ldr	r2, [r7, #12]
 8008bdc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2220      	movs	r2, #32
 8008be2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3710      	adds	r7, #16
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d101      	bne.n	8008c10 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008c0c:	2302      	movs	r3, #2
 8008c0e:	e02d      	b.n	8008c6c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2201      	movs	r2, #1
 8008c14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2224      	movs	r2, #36	; 0x24
 8008c1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f022 0201 	bic.w	r2, r2, #1
 8008c36:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	683a      	ldr	r2, [r7, #0]
 8008c48:	430a      	orrs	r2, r1
 8008c4a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 f811 	bl	8008c74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	68fa      	ldr	r2, [r7, #12]
 8008c58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2220      	movs	r2, #32
 8008c5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2200      	movs	r2, #0
 8008c66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008c6a:	2300      	movs	r3, #0
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3710      	adds	r7, #16
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b085      	sub	sp, #20
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d108      	bne.n	8008c96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008c94:	e031      	b.n	8008cfa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008c96:	2308      	movs	r3, #8
 8008c98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008c9a:	2308      	movs	r3, #8
 8008c9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	0e5b      	lsrs	r3, r3, #25
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	f003 0307 	and.w	r3, r3, #7
 8008cac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	689b      	ldr	r3, [r3, #8]
 8008cb4:	0f5b      	lsrs	r3, r3, #29
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	f003 0307 	and.w	r3, r3, #7
 8008cbc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008cbe:	7bbb      	ldrb	r3, [r7, #14]
 8008cc0:	7b3a      	ldrb	r2, [r7, #12]
 8008cc2:	4911      	ldr	r1, [pc, #68]	; (8008d08 <UARTEx_SetNbDataToProcess+0x94>)
 8008cc4:	5c8a      	ldrb	r2, [r1, r2]
 8008cc6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008cca:	7b3a      	ldrb	r2, [r7, #12]
 8008ccc:	490f      	ldr	r1, [pc, #60]	; (8008d0c <UARTEx_SetNbDataToProcess+0x98>)
 8008cce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008cd0:	fb93 f3f2 	sdiv	r3, r3, r2
 8008cd4:	b29a      	uxth	r2, r3
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008cdc:	7bfb      	ldrb	r3, [r7, #15]
 8008cde:	7b7a      	ldrb	r2, [r7, #13]
 8008ce0:	4909      	ldr	r1, [pc, #36]	; (8008d08 <UARTEx_SetNbDataToProcess+0x94>)
 8008ce2:	5c8a      	ldrb	r2, [r1, r2]
 8008ce4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008ce8:	7b7a      	ldrb	r2, [r7, #13]
 8008cea:	4908      	ldr	r1, [pc, #32]	; (8008d0c <UARTEx_SetNbDataToProcess+0x98>)
 8008cec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008cee:	fb93 f3f2 	sdiv	r3, r3, r2
 8008cf2:	b29a      	uxth	r2, r3
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008cfa:	bf00      	nop
 8008cfc:	3714      	adds	r7, #20
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr
 8008d06:	bf00      	nop
 8008d08:	080097b0 	.word	0x080097b0
 8008d0c:	080097b8 	.word	0x080097b8

08008d10 <sniprintf>:
 8008d10:	b40c      	push	{r2, r3}
 8008d12:	b530      	push	{r4, r5, lr}
 8008d14:	4b17      	ldr	r3, [pc, #92]	; (8008d74 <sniprintf+0x64>)
 8008d16:	1e0c      	subs	r4, r1, #0
 8008d18:	681d      	ldr	r5, [r3, #0]
 8008d1a:	b09d      	sub	sp, #116	; 0x74
 8008d1c:	da08      	bge.n	8008d30 <sniprintf+0x20>
 8008d1e:	238b      	movs	r3, #139	; 0x8b
 8008d20:	602b      	str	r3, [r5, #0]
 8008d22:	f04f 30ff 	mov.w	r0, #4294967295
 8008d26:	b01d      	add	sp, #116	; 0x74
 8008d28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d2c:	b002      	add	sp, #8
 8008d2e:	4770      	bx	lr
 8008d30:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008d34:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008d38:	bf14      	ite	ne
 8008d3a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008d3e:	4623      	moveq	r3, r4
 8008d40:	9304      	str	r3, [sp, #16]
 8008d42:	9307      	str	r3, [sp, #28]
 8008d44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008d48:	9002      	str	r0, [sp, #8]
 8008d4a:	9006      	str	r0, [sp, #24]
 8008d4c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008d50:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008d52:	ab21      	add	r3, sp, #132	; 0x84
 8008d54:	a902      	add	r1, sp, #8
 8008d56:	4628      	mov	r0, r5
 8008d58:	9301      	str	r3, [sp, #4]
 8008d5a:	f000 f993 	bl	8009084 <_svfiprintf_r>
 8008d5e:	1c43      	adds	r3, r0, #1
 8008d60:	bfbc      	itt	lt
 8008d62:	238b      	movlt	r3, #139	; 0x8b
 8008d64:	602b      	strlt	r3, [r5, #0]
 8008d66:	2c00      	cmp	r4, #0
 8008d68:	d0dd      	beq.n	8008d26 <sniprintf+0x16>
 8008d6a:	9b02      	ldr	r3, [sp, #8]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	701a      	strb	r2, [r3, #0]
 8008d70:	e7d9      	b.n	8008d26 <sniprintf+0x16>
 8008d72:	bf00      	nop
 8008d74:	20000058 	.word	0x20000058

08008d78 <memset>:
 8008d78:	4402      	add	r2, r0
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d100      	bne.n	8008d82 <memset+0xa>
 8008d80:	4770      	bx	lr
 8008d82:	f803 1b01 	strb.w	r1, [r3], #1
 8008d86:	e7f9      	b.n	8008d7c <memset+0x4>

08008d88 <__errno>:
 8008d88:	4b01      	ldr	r3, [pc, #4]	; (8008d90 <__errno+0x8>)
 8008d8a:	6818      	ldr	r0, [r3, #0]
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	20000058 	.word	0x20000058

08008d94 <__libc_init_array>:
 8008d94:	b570      	push	{r4, r5, r6, lr}
 8008d96:	4d0d      	ldr	r5, [pc, #52]	; (8008dcc <__libc_init_array+0x38>)
 8008d98:	4c0d      	ldr	r4, [pc, #52]	; (8008dd0 <__libc_init_array+0x3c>)
 8008d9a:	1b64      	subs	r4, r4, r5
 8008d9c:	10a4      	asrs	r4, r4, #2
 8008d9e:	2600      	movs	r6, #0
 8008da0:	42a6      	cmp	r6, r4
 8008da2:	d109      	bne.n	8008db8 <__libc_init_array+0x24>
 8008da4:	4d0b      	ldr	r5, [pc, #44]	; (8008dd4 <__libc_init_array+0x40>)
 8008da6:	4c0c      	ldr	r4, [pc, #48]	; (8008dd8 <__libc_init_array+0x44>)
 8008da8:	f000 fca4 	bl	80096f4 <_init>
 8008dac:	1b64      	subs	r4, r4, r5
 8008dae:	10a4      	asrs	r4, r4, #2
 8008db0:	2600      	movs	r6, #0
 8008db2:	42a6      	cmp	r6, r4
 8008db4:	d105      	bne.n	8008dc2 <__libc_init_array+0x2e>
 8008db6:	bd70      	pop	{r4, r5, r6, pc}
 8008db8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dbc:	4798      	blx	r3
 8008dbe:	3601      	adds	r6, #1
 8008dc0:	e7ee      	b.n	8008da0 <__libc_init_array+0xc>
 8008dc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dc6:	4798      	blx	r3
 8008dc8:	3601      	adds	r6, #1
 8008dca:	e7f2      	b.n	8008db2 <__libc_init_array+0x1e>
 8008dcc:	080097fc 	.word	0x080097fc
 8008dd0:	080097fc 	.word	0x080097fc
 8008dd4:	080097fc 	.word	0x080097fc
 8008dd8:	08009800 	.word	0x08009800

08008ddc <__retarget_lock_acquire_recursive>:
 8008ddc:	4770      	bx	lr

08008dde <__retarget_lock_release_recursive>:
 8008dde:	4770      	bx	lr

08008de0 <_free_r>:
 8008de0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008de2:	2900      	cmp	r1, #0
 8008de4:	d044      	beq.n	8008e70 <_free_r+0x90>
 8008de6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dea:	9001      	str	r0, [sp, #4]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f1a1 0404 	sub.w	r4, r1, #4
 8008df2:	bfb8      	it	lt
 8008df4:	18e4      	addlt	r4, r4, r3
 8008df6:	f000 f8df 	bl	8008fb8 <__malloc_lock>
 8008dfa:	4a1e      	ldr	r2, [pc, #120]	; (8008e74 <_free_r+0x94>)
 8008dfc:	9801      	ldr	r0, [sp, #4]
 8008dfe:	6813      	ldr	r3, [r2, #0]
 8008e00:	b933      	cbnz	r3, 8008e10 <_free_r+0x30>
 8008e02:	6063      	str	r3, [r4, #4]
 8008e04:	6014      	str	r4, [r2, #0]
 8008e06:	b003      	add	sp, #12
 8008e08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e0c:	f000 b8da 	b.w	8008fc4 <__malloc_unlock>
 8008e10:	42a3      	cmp	r3, r4
 8008e12:	d908      	bls.n	8008e26 <_free_r+0x46>
 8008e14:	6825      	ldr	r5, [r4, #0]
 8008e16:	1961      	adds	r1, r4, r5
 8008e18:	428b      	cmp	r3, r1
 8008e1a:	bf01      	itttt	eq
 8008e1c:	6819      	ldreq	r1, [r3, #0]
 8008e1e:	685b      	ldreq	r3, [r3, #4]
 8008e20:	1949      	addeq	r1, r1, r5
 8008e22:	6021      	streq	r1, [r4, #0]
 8008e24:	e7ed      	b.n	8008e02 <_free_r+0x22>
 8008e26:	461a      	mov	r2, r3
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	b10b      	cbz	r3, 8008e30 <_free_r+0x50>
 8008e2c:	42a3      	cmp	r3, r4
 8008e2e:	d9fa      	bls.n	8008e26 <_free_r+0x46>
 8008e30:	6811      	ldr	r1, [r2, #0]
 8008e32:	1855      	adds	r5, r2, r1
 8008e34:	42a5      	cmp	r5, r4
 8008e36:	d10b      	bne.n	8008e50 <_free_r+0x70>
 8008e38:	6824      	ldr	r4, [r4, #0]
 8008e3a:	4421      	add	r1, r4
 8008e3c:	1854      	adds	r4, r2, r1
 8008e3e:	42a3      	cmp	r3, r4
 8008e40:	6011      	str	r1, [r2, #0]
 8008e42:	d1e0      	bne.n	8008e06 <_free_r+0x26>
 8008e44:	681c      	ldr	r4, [r3, #0]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	6053      	str	r3, [r2, #4]
 8008e4a:	440c      	add	r4, r1
 8008e4c:	6014      	str	r4, [r2, #0]
 8008e4e:	e7da      	b.n	8008e06 <_free_r+0x26>
 8008e50:	d902      	bls.n	8008e58 <_free_r+0x78>
 8008e52:	230c      	movs	r3, #12
 8008e54:	6003      	str	r3, [r0, #0]
 8008e56:	e7d6      	b.n	8008e06 <_free_r+0x26>
 8008e58:	6825      	ldr	r5, [r4, #0]
 8008e5a:	1961      	adds	r1, r4, r5
 8008e5c:	428b      	cmp	r3, r1
 8008e5e:	bf04      	itt	eq
 8008e60:	6819      	ldreq	r1, [r3, #0]
 8008e62:	685b      	ldreq	r3, [r3, #4]
 8008e64:	6063      	str	r3, [r4, #4]
 8008e66:	bf04      	itt	eq
 8008e68:	1949      	addeq	r1, r1, r5
 8008e6a:	6021      	streq	r1, [r4, #0]
 8008e6c:	6054      	str	r4, [r2, #4]
 8008e6e:	e7ca      	b.n	8008e06 <_free_r+0x26>
 8008e70:	b003      	add	sp, #12
 8008e72:	bd30      	pop	{r4, r5, pc}
 8008e74:	2000074c 	.word	0x2000074c

08008e78 <sbrk_aligned>:
 8008e78:	b570      	push	{r4, r5, r6, lr}
 8008e7a:	4e0e      	ldr	r6, [pc, #56]	; (8008eb4 <sbrk_aligned+0x3c>)
 8008e7c:	460c      	mov	r4, r1
 8008e7e:	6831      	ldr	r1, [r6, #0]
 8008e80:	4605      	mov	r5, r0
 8008e82:	b911      	cbnz	r1, 8008e8a <sbrk_aligned+0x12>
 8008e84:	f000 fba6 	bl	80095d4 <_sbrk_r>
 8008e88:	6030      	str	r0, [r6, #0]
 8008e8a:	4621      	mov	r1, r4
 8008e8c:	4628      	mov	r0, r5
 8008e8e:	f000 fba1 	bl	80095d4 <_sbrk_r>
 8008e92:	1c43      	adds	r3, r0, #1
 8008e94:	d00a      	beq.n	8008eac <sbrk_aligned+0x34>
 8008e96:	1cc4      	adds	r4, r0, #3
 8008e98:	f024 0403 	bic.w	r4, r4, #3
 8008e9c:	42a0      	cmp	r0, r4
 8008e9e:	d007      	beq.n	8008eb0 <sbrk_aligned+0x38>
 8008ea0:	1a21      	subs	r1, r4, r0
 8008ea2:	4628      	mov	r0, r5
 8008ea4:	f000 fb96 	bl	80095d4 <_sbrk_r>
 8008ea8:	3001      	adds	r0, #1
 8008eaa:	d101      	bne.n	8008eb0 <sbrk_aligned+0x38>
 8008eac:	f04f 34ff 	mov.w	r4, #4294967295
 8008eb0:	4620      	mov	r0, r4
 8008eb2:	bd70      	pop	{r4, r5, r6, pc}
 8008eb4:	20000750 	.word	0x20000750

08008eb8 <_malloc_r>:
 8008eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ebc:	1ccd      	adds	r5, r1, #3
 8008ebe:	f025 0503 	bic.w	r5, r5, #3
 8008ec2:	3508      	adds	r5, #8
 8008ec4:	2d0c      	cmp	r5, #12
 8008ec6:	bf38      	it	cc
 8008ec8:	250c      	movcc	r5, #12
 8008eca:	2d00      	cmp	r5, #0
 8008ecc:	4607      	mov	r7, r0
 8008ece:	db01      	blt.n	8008ed4 <_malloc_r+0x1c>
 8008ed0:	42a9      	cmp	r1, r5
 8008ed2:	d905      	bls.n	8008ee0 <_malloc_r+0x28>
 8008ed4:	230c      	movs	r3, #12
 8008ed6:	603b      	str	r3, [r7, #0]
 8008ed8:	2600      	movs	r6, #0
 8008eda:	4630      	mov	r0, r6
 8008edc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ee0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008fb4 <_malloc_r+0xfc>
 8008ee4:	f000 f868 	bl	8008fb8 <__malloc_lock>
 8008ee8:	f8d8 3000 	ldr.w	r3, [r8]
 8008eec:	461c      	mov	r4, r3
 8008eee:	bb5c      	cbnz	r4, 8008f48 <_malloc_r+0x90>
 8008ef0:	4629      	mov	r1, r5
 8008ef2:	4638      	mov	r0, r7
 8008ef4:	f7ff ffc0 	bl	8008e78 <sbrk_aligned>
 8008ef8:	1c43      	adds	r3, r0, #1
 8008efa:	4604      	mov	r4, r0
 8008efc:	d155      	bne.n	8008faa <_malloc_r+0xf2>
 8008efe:	f8d8 4000 	ldr.w	r4, [r8]
 8008f02:	4626      	mov	r6, r4
 8008f04:	2e00      	cmp	r6, #0
 8008f06:	d145      	bne.n	8008f94 <_malloc_r+0xdc>
 8008f08:	2c00      	cmp	r4, #0
 8008f0a:	d048      	beq.n	8008f9e <_malloc_r+0xe6>
 8008f0c:	6823      	ldr	r3, [r4, #0]
 8008f0e:	4631      	mov	r1, r6
 8008f10:	4638      	mov	r0, r7
 8008f12:	eb04 0903 	add.w	r9, r4, r3
 8008f16:	f000 fb5d 	bl	80095d4 <_sbrk_r>
 8008f1a:	4581      	cmp	r9, r0
 8008f1c:	d13f      	bne.n	8008f9e <_malloc_r+0xe6>
 8008f1e:	6821      	ldr	r1, [r4, #0]
 8008f20:	1a6d      	subs	r5, r5, r1
 8008f22:	4629      	mov	r1, r5
 8008f24:	4638      	mov	r0, r7
 8008f26:	f7ff ffa7 	bl	8008e78 <sbrk_aligned>
 8008f2a:	3001      	adds	r0, #1
 8008f2c:	d037      	beq.n	8008f9e <_malloc_r+0xe6>
 8008f2e:	6823      	ldr	r3, [r4, #0]
 8008f30:	442b      	add	r3, r5
 8008f32:	6023      	str	r3, [r4, #0]
 8008f34:	f8d8 3000 	ldr.w	r3, [r8]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d038      	beq.n	8008fae <_malloc_r+0xf6>
 8008f3c:	685a      	ldr	r2, [r3, #4]
 8008f3e:	42a2      	cmp	r2, r4
 8008f40:	d12b      	bne.n	8008f9a <_malloc_r+0xe2>
 8008f42:	2200      	movs	r2, #0
 8008f44:	605a      	str	r2, [r3, #4]
 8008f46:	e00f      	b.n	8008f68 <_malloc_r+0xb0>
 8008f48:	6822      	ldr	r2, [r4, #0]
 8008f4a:	1b52      	subs	r2, r2, r5
 8008f4c:	d41f      	bmi.n	8008f8e <_malloc_r+0xd6>
 8008f4e:	2a0b      	cmp	r2, #11
 8008f50:	d917      	bls.n	8008f82 <_malloc_r+0xca>
 8008f52:	1961      	adds	r1, r4, r5
 8008f54:	42a3      	cmp	r3, r4
 8008f56:	6025      	str	r5, [r4, #0]
 8008f58:	bf18      	it	ne
 8008f5a:	6059      	strne	r1, [r3, #4]
 8008f5c:	6863      	ldr	r3, [r4, #4]
 8008f5e:	bf08      	it	eq
 8008f60:	f8c8 1000 	streq.w	r1, [r8]
 8008f64:	5162      	str	r2, [r4, r5]
 8008f66:	604b      	str	r3, [r1, #4]
 8008f68:	4638      	mov	r0, r7
 8008f6a:	f104 060b 	add.w	r6, r4, #11
 8008f6e:	f000 f829 	bl	8008fc4 <__malloc_unlock>
 8008f72:	f026 0607 	bic.w	r6, r6, #7
 8008f76:	1d23      	adds	r3, r4, #4
 8008f78:	1af2      	subs	r2, r6, r3
 8008f7a:	d0ae      	beq.n	8008eda <_malloc_r+0x22>
 8008f7c:	1b9b      	subs	r3, r3, r6
 8008f7e:	50a3      	str	r3, [r4, r2]
 8008f80:	e7ab      	b.n	8008eda <_malloc_r+0x22>
 8008f82:	42a3      	cmp	r3, r4
 8008f84:	6862      	ldr	r2, [r4, #4]
 8008f86:	d1dd      	bne.n	8008f44 <_malloc_r+0x8c>
 8008f88:	f8c8 2000 	str.w	r2, [r8]
 8008f8c:	e7ec      	b.n	8008f68 <_malloc_r+0xb0>
 8008f8e:	4623      	mov	r3, r4
 8008f90:	6864      	ldr	r4, [r4, #4]
 8008f92:	e7ac      	b.n	8008eee <_malloc_r+0x36>
 8008f94:	4634      	mov	r4, r6
 8008f96:	6876      	ldr	r6, [r6, #4]
 8008f98:	e7b4      	b.n	8008f04 <_malloc_r+0x4c>
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	e7cc      	b.n	8008f38 <_malloc_r+0x80>
 8008f9e:	230c      	movs	r3, #12
 8008fa0:	603b      	str	r3, [r7, #0]
 8008fa2:	4638      	mov	r0, r7
 8008fa4:	f000 f80e 	bl	8008fc4 <__malloc_unlock>
 8008fa8:	e797      	b.n	8008eda <_malloc_r+0x22>
 8008faa:	6025      	str	r5, [r4, #0]
 8008fac:	e7dc      	b.n	8008f68 <_malloc_r+0xb0>
 8008fae:	605b      	str	r3, [r3, #4]
 8008fb0:	deff      	udf	#255	; 0xff
 8008fb2:	bf00      	nop
 8008fb4:	2000074c 	.word	0x2000074c

08008fb8 <__malloc_lock>:
 8008fb8:	4801      	ldr	r0, [pc, #4]	; (8008fc0 <__malloc_lock+0x8>)
 8008fba:	f7ff bf0f 	b.w	8008ddc <__retarget_lock_acquire_recursive>
 8008fbe:	bf00      	nop
 8008fc0:	20000748 	.word	0x20000748

08008fc4 <__malloc_unlock>:
 8008fc4:	4801      	ldr	r0, [pc, #4]	; (8008fcc <__malloc_unlock+0x8>)
 8008fc6:	f7ff bf0a 	b.w	8008dde <__retarget_lock_release_recursive>
 8008fca:	bf00      	nop
 8008fcc:	20000748 	.word	0x20000748

08008fd0 <__ssputs_r>:
 8008fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fd4:	688e      	ldr	r6, [r1, #8]
 8008fd6:	461f      	mov	r7, r3
 8008fd8:	42be      	cmp	r6, r7
 8008fda:	680b      	ldr	r3, [r1, #0]
 8008fdc:	4682      	mov	sl, r0
 8008fde:	460c      	mov	r4, r1
 8008fe0:	4690      	mov	r8, r2
 8008fe2:	d82c      	bhi.n	800903e <__ssputs_r+0x6e>
 8008fe4:	898a      	ldrh	r2, [r1, #12]
 8008fe6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008fea:	d026      	beq.n	800903a <__ssputs_r+0x6a>
 8008fec:	6965      	ldr	r5, [r4, #20]
 8008fee:	6909      	ldr	r1, [r1, #16]
 8008ff0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ff4:	eba3 0901 	sub.w	r9, r3, r1
 8008ff8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ffc:	1c7b      	adds	r3, r7, #1
 8008ffe:	444b      	add	r3, r9
 8009000:	106d      	asrs	r5, r5, #1
 8009002:	429d      	cmp	r5, r3
 8009004:	bf38      	it	cc
 8009006:	461d      	movcc	r5, r3
 8009008:	0553      	lsls	r3, r2, #21
 800900a:	d527      	bpl.n	800905c <__ssputs_r+0x8c>
 800900c:	4629      	mov	r1, r5
 800900e:	f7ff ff53 	bl	8008eb8 <_malloc_r>
 8009012:	4606      	mov	r6, r0
 8009014:	b360      	cbz	r0, 8009070 <__ssputs_r+0xa0>
 8009016:	6921      	ldr	r1, [r4, #16]
 8009018:	464a      	mov	r2, r9
 800901a:	f000 faeb 	bl	80095f4 <memcpy>
 800901e:	89a3      	ldrh	r3, [r4, #12]
 8009020:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009028:	81a3      	strh	r3, [r4, #12]
 800902a:	6126      	str	r6, [r4, #16]
 800902c:	6165      	str	r5, [r4, #20]
 800902e:	444e      	add	r6, r9
 8009030:	eba5 0509 	sub.w	r5, r5, r9
 8009034:	6026      	str	r6, [r4, #0]
 8009036:	60a5      	str	r5, [r4, #8]
 8009038:	463e      	mov	r6, r7
 800903a:	42be      	cmp	r6, r7
 800903c:	d900      	bls.n	8009040 <__ssputs_r+0x70>
 800903e:	463e      	mov	r6, r7
 8009040:	6820      	ldr	r0, [r4, #0]
 8009042:	4632      	mov	r2, r6
 8009044:	4641      	mov	r1, r8
 8009046:	f000 faab 	bl	80095a0 <memmove>
 800904a:	68a3      	ldr	r3, [r4, #8]
 800904c:	1b9b      	subs	r3, r3, r6
 800904e:	60a3      	str	r3, [r4, #8]
 8009050:	6823      	ldr	r3, [r4, #0]
 8009052:	4433      	add	r3, r6
 8009054:	6023      	str	r3, [r4, #0]
 8009056:	2000      	movs	r0, #0
 8009058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800905c:	462a      	mov	r2, r5
 800905e:	f000 fad7 	bl	8009610 <_realloc_r>
 8009062:	4606      	mov	r6, r0
 8009064:	2800      	cmp	r0, #0
 8009066:	d1e0      	bne.n	800902a <__ssputs_r+0x5a>
 8009068:	6921      	ldr	r1, [r4, #16]
 800906a:	4650      	mov	r0, sl
 800906c:	f7ff feb8 	bl	8008de0 <_free_r>
 8009070:	230c      	movs	r3, #12
 8009072:	f8ca 3000 	str.w	r3, [sl]
 8009076:	89a3      	ldrh	r3, [r4, #12]
 8009078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800907c:	81a3      	strh	r3, [r4, #12]
 800907e:	f04f 30ff 	mov.w	r0, #4294967295
 8009082:	e7e9      	b.n	8009058 <__ssputs_r+0x88>

08009084 <_svfiprintf_r>:
 8009084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009088:	4698      	mov	r8, r3
 800908a:	898b      	ldrh	r3, [r1, #12]
 800908c:	061b      	lsls	r3, r3, #24
 800908e:	b09d      	sub	sp, #116	; 0x74
 8009090:	4607      	mov	r7, r0
 8009092:	460d      	mov	r5, r1
 8009094:	4614      	mov	r4, r2
 8009096:	d50e      	bpl.n	80090b6 <_svfiprintf_r+0x32>
 8009098:	690b      	ldr	r3, [r1, #16]
 800909a:	b963      	cbnz	r3, 80090b6 <_svfiprintf_r+0x32>
 800909c:	2140      	movs	r1, #64	; 0x40
 800909e:	f7ff ff0b 	bl	8008eb8 <_malloc_r>
 80090a2:	6028      	str	r0, [r5, #0]
 80090a4:	6128      	str	r0, [r5, #16]
 80090a6:	b920      	cbnz	r0, 80090b2 <_svfiprintf_r+0x2e>
 80090a8:	230c      	movs	r3, #12
 80090aa:	603b      	str	r3, [r7, #0]
 80090ac:	f04f 30ff 	mov.w	r0, #4294967295
 80090b0:	e0d0      	b.n	8009254 <_svfiprintf_r+0x1d0>
 80090b2:	2340      	movs	r3, #64	; 0x40
 80090b4:	616b      	str	r3, [r5, #20]
 80090b6:	2300      	movs	r3, #0
 80090b8:	9309      	str	r3, [sp, #36]	; 0x24
 80090ba:	2320      	movs	r3, #32
 80090bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80090c4:	2330      	movs	r3, #48	; 0x30
 80090c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800926c <_svfiprintf_r+0x1e8>
 80090ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090ce:	f04f 0901 	mov.w	r9, #1
 80090d2:	4623      	mov	r3, r4
 80090d4:	469a      	mov	sl, r3
 80090d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090da:	b10a      	cbz	r2, 80090e0 <_svfiprintf_r+0x5c>
 80090dc:	2a25      	cmp	r2, #37	; 0x25
 80090de:	d1f9      	bne.n	80090d4 <_svfiprintf_r+0x50>
 80090e0:	ebba 0b04 	subs.w	fp, sl, r4
 80090e4:	d00b      	beq.n	80090fe <_svfiprintf_r+0x7a>
 80090e6:	465b      	mov	r3, fp
 80090e8:	4622      	mov	r2, r4
 80090ea:	4629      	mov	r1, r5
 80090ec:	4638      	mov	r0, r7
 80090ee:	f7ff ff6f 	bl	8008fd0 <__ssputs_r>
 80090f2:	3001      	adds	r0, #1
 80090f4:	f000 80a9 	beq.w	800924a <_svfiprintf_r+0x1c6>
 80090f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090fa:	445a      	add	r2, fp
 80090fc:	9209      	str	r2, [sp, #36]	; 0x24
 80090fe:	f89a 3000 	ldrb.w	r3, [sl]
 8009102:	2b00      	cmp	r3, #0
 8009104:	f000 80a1 	beq.w	800924a <_svfiprintf_r+0x1c6>
 8009108:	2300      	movs	r3, #0
 800910a:	f04f 32ff 	mov.w	r2, #4294967295
 800910e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009112:	f10a 0a01 	add.w	sl, sl, #1
 8009116:	9304      	str	r3, [sp, #16]
 8009118:	9307      	str	r3, [sp, #28]
 800911a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800911e:	931a      	str	r3, [sp, #104]	; 0x68
 8009120:	4654      	mov	r4, sl
 8009122:	2205      	movs	r2, #5
 8009124:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009128:	4850      	ldr	r0, [pc, #320]	; (800926c <_svfiprintf_r+0x1e8>)
 800912a:	f7f7 f871 	bl	8000210 <memchr>
 800912e:	9a04      	ldr	r2, [sp, #16]
 8009130:	b9d8      	cbnz	r0, 800916a <_svfiprintf_r+0xe6>
 8009132:	06d0      	lsls	r0, r2, #27
 8009134:	bf44      	itt	mi
 8009136:	2320      	movmi	r3, #32
 8009138:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800913c:	0711      	lsls	r1, r2, #28
 800913e:	bf44      	itt	mi
 8009140:	232b      	movmi	r3, #43	; 0x2b
 8009142:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009146:	f89a 3000 	ldrb.w	r3, [sl]
 800914a:	2b2a      	cmp	r3, #42	; 0x2a
 800914c:	d015      	beq.n	800917a <_svfiprintf_r+0xf6>
 800914e:	9a07      	ldr	r2, [sp, #28]
 8009150:	4654      	mov	r4, sl
 8009152:	2000      	movs	r0, #0
 8009154:	f04f 0c0a 	mov.w	ip, #10
 8009158:	4621      	mov	r1, r4
 800915a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800915e:	3b30      	subs	r3, #48	; 0x30
 8009160:	2b09      	cmp	r3, #9
 8009162:	d94d      	bls.n	8009200 <_svfiprintf_r+0x17c>
 8009164:	b1b0      	cbz	r0, 8009194 <_svfiprintf_r+0x110>
 8009166:	9207      	str	r2, [sp, #28]
 8009168:	e014      	b.n	8009194 <_svfiprintf_r+0x110>
 800916a:	eba0 0308 	sub.w	r3, r0, r8
 800916e:	fa09 f303 	lsl.w	r3, r9, r3
 8009172:	4313      	orrs	r3, r2
 8009174:	9304      	str	r3, [sp, #16]
 8009176:	46a2      	mov	sl, r4
 8009178:	e7d2      	b.n	8009120 <_svfiprintf_r+0x9c>
 800917a:	9b03      	ldr	r3, [sp, #12]
 800917c:	1d19      	adds	r1, r3, #4
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	9103      	str	r1, [sp, #12]
 8009182:	2b00      	cmp	r3, #0
 8009184:	bfbb      	ittet	lt
 8009186:	425b      	neglt	r3, r3
 8009188:	f042 0202 	orrlt.w	r2, r2, #2
 800918c:	9307      	strge	r3, [sp, #28]
 800918e:	9307      	strlt	r3, [sp, #28]
 8009190:	bfb8      	it	lt
 8009192:	9204      	strlt	r2, [sp, #16]
 8009194:	7823      	ldrb	r3, [r4, #0]
 8009196:	2b2e      	cmp	r3, #46	; 0x2e
 8009198:	d10c      	bne.n	80091b4 <_svfiprintf_r+0x130>
 800919a:	7863      	ldrb	r3, [r4, #1]
 800919c:	2b2a      	cmp	r3, #42	; 0x2a
 800919e:	d134      	bne.n	800920a <_svfiprintf_r+0x186>
 80091a0:	9b03      	ldr	r3, [sp, #12]
 80091a2:	1d1a      	adds	r2, r3, #4
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	9203      	str	r2, [sp, #12]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	bfb8      	it	lt
 80091ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80091b0:	3402      	adds	r4, #2
 80091b2:	9305      	str	r3, [sp, #20]
 80091b4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800927c <_svfiprintf_r+0x1f8>
 80091b8:	7821      	ldrb	r1, [r4, #0]
 80091ba:	2203      	movs	r2, #3
 80091bc:	4650      	mov	r0, sl
 80091be:	f7f7 f827 	bl	8000210 <memchr>
 80091c2:	b138      	cbz	r0, 80091d4 <_svfiprintf_r+0x150>
 80091c4:	9b04      	ldr	r3, [sp, #16]
 80091c6:	eba0 000a 	sub.w	r0, r0, sl
 80091ca:	2240      	movs	r2, #64	; 0x40
 80091cc:	4082      	lsls	r2, r0
 80091ce:	4313      	orrs	r3, r2
 80091d0:	3401      	adds	r4, #1
 80091d2:	9304      	str	r3, [sp, #16]
 80091d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091d8:	4825      	ldr	r0, [pc, #148]	; (8009270 <_svfiprintf_r+0x1ec>)
 80091da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091de:	2206      	movs	r2, #6
 80091e0:	f7f7 f816 	bl	8000210 <memchr>
 80091e4:	2800      	cmp	r0, #0
 80091e6:	d038      	beq.n	800925a <_svfiprintf_r+0x1d6>
 80091e8:	4b22      	ldr	r3, [pc, #136]	; (8009274 <_svfiprintf_r+0x1f0>)
 80091ea:	bb1b      	cbnz	r3, 8009234 <_svfiprintf_r+0x1b0>
 80091ec:	9b03      	ldr	r3, [sp, #12]
 80091ee:	3307      	adds	r3, #7
 80091f0:	f023 0307 	bic.w	r3, r3, #7
 80091f4:	3308      	adds	r3, #8
 80091f6:	9303      	str	r3, [sp, #12]
 80091f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091fa:	4433      	add	r3, r6
 80091fc:	9309      	str	r3, [sp, #36]	; 0x24
 80091fe:	e768      	b.n	80090d2 <_svfiprintf_r+0x4e>
 8009200:	fb0c 3202 	mla	r2, ip, r2, r3
 8009204:	460c      	mov	r4, r1
 8009206:	2001      	movs	r0, #1
 8009208:	e7a6      	b.n	8009158 <_svfiprintf_r+0xd4>
 800920a:	2300      	movs	r3, #0
 800920c:	3401      	adds	r4, #1
 800920e:	9305      	str	r3, [sp, #20]
 8009210:	4619      	mov	r1, r3
 8009212:	f04f 0c0a 	mov.w	ip, #10
 8009216:	4620      	mov	r0, r4
 8009218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800921c:	3a30      	subs	r2, #48	; 0x30
 800921e:	2a09      	cmp	r2, #9
 8009220:	d903      	bls.n	800922a <_svfiprintf_r+0x1a6>
 8009222:	2b00      	cmp	r3, #0
 8009224:	d0c6      	beq.n	80091b4 <_svfiprintf_r+0x130>
 8009226:	9105      	str	r1, [sp, #20]
 8009228:	e7c4      	b.n	80091b4 <_svfiprintf_r+0x130>
 800922a:	fb0c 2101 	mla	r1, ip, r1, r2
 800922e:	4604      	mov	r4, r0
 8009230:	2301      	movs	r3, #1
 8009232:	e7f0      	b.n	8009216 <_svfiprintf_r+0x192>
 8009234:	ab03      	add	r3, sp, #12
 8009236:	9300      	str	r3, [sp, #0]
 8009238:	462a      	mov	r2, r5
 800923a:	4b0f      	ldr	r3, [pc, #60]	; (8009278 <_svfiprintf_r+0x1f4>)
 800923c:	a904      	add	r1, sp, #16
 800923e:	4638      	mov	r0, r7
 8009240:	f3af 8000 	nop.w
 8009244:	1c42      	adds	r2, r0, #1
 8009246:	4606      	mov	r6, r0
 8009248:	d1d6      	bne.n	80091f8 <_svfiprintf_r+0x174>
 800924a:	89ab      	ldrh	r3, [r5, #12]
 800924c:	065b      	lsls	r3, r3, #25
 800924e:	f53f af2d 	bmi.w	80090ac <_svfiprintf_r+0x28>
 8009252:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009254:	b01d      	add	sp, #116	; 0x74
 8009256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800925a:	ab03      	add	r3, sp, #12
 800925c:	9300      	str	r3, [sp, #0]
 800925e:	462a      	mov	r2, r5
 8009260:	4b05      	ldr	r3, [pc, #20]	; (8009278 <_svfiprintf_r+0x1f4>)
 8009262:	a904      	add	r1, sp, #16
 8009264:	4638      	mov	r0, r7
 8009266:	f000 f879 	bl	800935c <_printf_i>
 800926a:	e7eb      	b.n	8009244 <_svfiprintf_r+0x1c0>
 800926c:	080097c0 	.word	0x080097c0
 8009270:	080097ca 	.word	0x080097ca
 8009274:	00000000 	.word	0x00000000
 8009278:	08008fd1 	.word	0x08008fd1
 800927c:	080097c6 	.word	0x080097c6

08009280 <_printf_common>:
 8009280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009284:	4616      	mov	r6, r2
 8009286:	4699      	mov	r9, r3
 8009288:	688a      	ldr	r2, [r1, #8]
 800928a:	690b      	ldr	r3, [r1, #16]
 800928c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009290:	4293      	cmp	r3, r2
 8009292:	bfb8      	it	lt
 8009294:	4613      	movlt	r3, r2
 8009296:	6033      	str	r3, [r6, #0]
 8009298:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800929c:	4607      	mov	r7, r0
 800929e:	460c      	mov	r4, r1
 80092a0:	b10a      	cbz	r2, 80092a6 <_printf_common+0x26>
 80092a2:	3301      	adds	r3, #1
 80092a4:	6033      	str	r3, [r6, #0]
 80092a6:	6823      	ldr	r3, [r4, #0]
 80092a8:	0699      	lsls	r1, r3, #26
 80092aa:	bf42      	ittt	mi
 80092ac:	6833      	ldrmi	r3, [r6, #0]
 80092ae:	3302      	addmi	r3, #2
 80092b0:	6033      	strmi	r3, [r6, #0]
 80092b2:	6825      	ldr	r5, [r4, #0]
 80092b4:	f015 0506 	ands.w	r5, r5, #6
 80092b8:	d106      	bne.n	80092c8 <_printf_common+0x48>
 80092ba:	f104 0a19 	add.w	sl, r4, #25
 80092be:	68e3      	ldr	r3, [r4, #12]
 80092c0:	6832      	ldr	r2, [r6, #0]
 80092c2:	1a9b      	subs	r3, r3, r2
 80092c4:	42ab      	cmp	r3, r5
 80092c6:	dc26      	bgt.n	8009316 <_printf_common+0x96>
 80092c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80092cc:	1e13      	subs	r3, r2, #0
 80092ce:	6822      	ldr	r2, [r4, #0]
 80092d0:	bf18      	it	ne
 80092d2:	2301      	movne	r3, #1
 80092d4:	0692      	lsls	r2, r2, #26
 80092d6:	d42b      	bmi.n	8009330 <_printf_common+0xb0>
 80092d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80092dc:	4649      	mov	r1, r9
 80092de:	4638      	mov	r0, r7
 80092e0:	47c0      	blx	r8
 80092e2:	3001      	adds	r0, #1
 80092e4:	d01e      	beq.n	8009324 <_printf_common+0xa4>
 80092e6:	6823      	ldr	r3, [r4, #0]
 80092e8:	6922      	ldr	r2, [r4, #16]
 80092ea:	f003 0306 	and.w	r3, r3, #6
 80092ee:	2b04      	cmp	r3, #4
 80092f0:	bf02      	ittt	eq
 80092f2:	68e5      	ldreq	r5, [r4, #12]
 80092f4:	6833      	ldreq	r3, [r6, #0]
 80092f6:	1aed      	subeq	r5, r5, r3
 80092f8:	68a3      	ldr	r3, [r4, #8]
 80092fa:	bf0c      	ite	eq
 80092fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009300:	2500      	movne	r5, #0
 8009302:	4293      	cmp	r3, r2
 8009304:	bfc4      	itt	gt
 8009306:	1a9b      	subgt	r3, r3, r2
 8009308:	18ed      	addgt	r5, r5, r3
 800930a:	2600      	movs	r6, #0
 800930c:	341a      	adds	r4, #26
 800930e:	42b5      	cmp	r5, r6
 8009310:	d11a      	bne.n	8009348 <_printf_common+0xc8>
 8009312:	2000      	movs	r0, #0
 8009314:	e008      	b.n	8009328 <_printf_common+0xa8>
 8009316:	2301      	movs	r3, #1
 8009318:	4652      	mov	r2, sl
 800931a:	4649      	mov	r1, r9
 800931c:	4638      	mov	r0, r7
 800931e:	47c0      	blx	r8
 8009320:	3001      	adds	r0, #1
 8009322:	d103      	bne.n	800932c <_printf_common+0xac>
 8009324:	f04f 30ff 	mov.w	r0, #4294967295
 8009328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800932c:	3501      	adds	r5, #1
 800932e:	e7c6      	b.n	80092be <_printf_common+0x3e>
 8009330:	18e1      	adds	r1, r4, r3
 8009332:	1c5a      	adds	r2, r3, #1
 8009334:	2030      	movs	r0, #48	; 0x30
 8009336:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800933a:	4422      	add	r2, r4
 800933c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009340:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009344:	3302      	adds	r3, #2
 8009346:	e7c7      	b.n	80092d8 <_printf_common+0x58>
 8009348:	2301      	movs	r3, #1
 800934a:	4622      	mov	r2, r4
 800934c:	4649      	mov	r1, r9
 800934e:	4638      	mov	r0, r7
 8009350:	47c0      	blx	r8
 8009352:	3001      	adds	r0, #1
 8009354:	d0e6      	beq.n	8009324 <_printf_common+0xa4>
 8009356:	3601      	adds	r6, #1
 8009358:	e7d9      	b.n	800930e <_printf_common+0x8e>
	...

0800935c <_printf_i>:
 800935c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009360:	7e0f      	ldrb	r7, [r1, #24]
 8009362:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009364:	2f78      	cmp	r7, #120	; 0x78
 8009366:	4691      	mov	r9, r2
 8009368:	4680      	mov	r8, r0
 800936a:	460c      	mov	r4, r1
 800936c:	469a      	mov	sl, r3
 800936e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009372:	d807      	bhi.n	8009384 <_printf_i+0x28>
 8009374:	2f62      	cmp	r7, #98	; 0x62
 8009376:	d80a      	bhi.n	800938e <_printf_i+0x32>
 8009378:	2f00      	cmp	r7, #0
 800937a:	f000 80d4 	beq.w	8009526 <_printf_i+0x1ca>
 800937e:	2f58      	cmp	r7, #88	; 0x58
 8009380:	f000 80c0 	beq.w	8009504 <_printf_i+0x1a8>
 8009384:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009388:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800938c:	e03a      	b.n	8009404 <_printf_i+0xa8>
 800938e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009392:	2b15      	cmp	r3, #21
 8009394:	d8f6      	bhi.n	8009384 <_printf_i+0x28>
 8009396:	a101      	add	r1, pc, #4	; (adr r1, 800939c <_printf_i+0x40>)
 8009398:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800939c:	080093f5 	.word	0x080093f5
 80093a0:	08009409 	.word	0x08009409
 80093a4:	08009385 	.word	0x08009385
 80093a8:	08009385 	.word	0x08009385
 80093ac:	08009385 	.word	0x08009385
 80093b0:	08009385 	.word	0x08009385
 80093b4:	08009409 	.word	0x08009409
 80093b8:	08009385 	.word	0x08009385
 80093bc:	08009385 	.word	0x08009385
 80093c0:	08009385 	.word	0x08009385
 80093c4:	08009385 	.word	0x08009385
 80093c8:	0800950d 	.word	0x0800950d
 80093cc:	08009435 	.word	0x08009435
 80093d0:	080094c7 	.word	0x080094c7
 80093d4:	08009385 	.word	0x08009385
 80093d8:	08009385 	.word	0x08009385
 80093dc:	0800952f 	.word	0x0800952f
 80093e0:	08009385 	.word	0x08009385
 80093e4:	08009435 	.word	0x08009435
 80093e8:	08009385 	.word	0x08009385
 80093ec:	08009385 	.word	0x08009385
 80093f0:	080094cf 	.word	0x080094cf
 80093f4:	682b      	ldr	r3, [r5, #0]
 80093f6:	1d1a      	adds	r2, r3, #4
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	602a      	str	r2, [r5, #0]
 80093fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009400:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009404:	2301      	movs	r3, #1
 8009406:	e09f      	b.n	8009548 <_printf_i+0x1ec>
 8009408:	6820      	ldr	r0, [r4, #0]
 800940a:	682b      	ldr	r3, [r5, #0]
 800940c:	0607      	lsls	r7, r0, #24
 800940e:	f103 0104 	add.w	r1, r3, #4
 8009412:	6029      	str	r1, [r5, #0]
 8009414:	d501      	bpl.n	800941a <_printf_i+0xbe>
 8009416:	681e      	ldr	r6, [r3, #0]
 8009418:	e003      	b.n	8009422 <_printf_i+0xc6>
 800941a:	0646      	lsls	r6, r0, #25
 800941c:	d5fb      	bpl.n	8009416 <_printf_i+0xba>
 800941e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009422:	2e00      	cmp	r6, #0
 8009424:	da03      	bge.n	800942e <_printf_i+0xd2>
 8009426:	232d      	movs	r3, #45	; 0x2d
 8009428:	4276      	negs	r6, r6
 800942a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800942e:	485a      	ldr	r0, [pc, #360]	; (8009598 <_printf_i+0x23c>)
 8009430:	230a      	movs	r3, #10
 8009432:	e012      	b.n	800945a <_printf_i+0xfe>
 8009434:	682b      	ldr	r3, [r5, #0]
 8009436:	6820      	ldr	r0, [r4, #0]
 8009438:	1d19      	adds	r1, r3, #4
 800943a:	6029      	str	r1, [r5, #0]
 800943c:	0605      	lsls	r5, r0, #24
 800943e:	d501      	bpl.n	8009444 <_printf_i+0xe8>
 8009440:	681e      	ldr	r6, [r3, #0]
 8009442:	e002      	b.n	800944a <_printf_i+0xee>
 8009444:	0641      	lsls	r1, r0, #25
 8009446:	d5fb      	bpl.n	8009440 <_printf_i+0xe4>
 8009448:	881e      	ldrh	r6, [r3, #0]
 800944a:	4853      	ldr	r0, [pc, #332]	; (8009598 <_printf_i+0x23c>)
 800944c:	2f6f      	cmp	r7, #111	; 0x6f
 800944e:	bf0c      	ite	eq
 8009450:	2308      	moveq	r3, #8
 8009452:	230a      	movne	r3, #10
 8009454:	2100      	movs	r1, #0
 8009456:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800945a:	6865      	ldr	r5, [r4, #4]
 800945c:	60a5      	str	r5, [r4, #8]
 800945e:	2d00      	cmp	r5, #0
 8009460:	bfa2      	ittt	ge
 8009462:	6821      	ldrge	r1, [r4, #0]
 8009464:	f021 0104 	bicge.w	r1, r1, #4
 8009468:	6021      	strge	r1, [r4, #0]
 800946a:	b90e      	cbnz	r6, 8009470 <_printf_i+0x114>
 800946c:	2d00      	cmp	r5, #0
 800946e:	d04b      	beq.n	8009508 <_printf_i+0x1ac>
 8009470:	4615      	mov	r5, r2
 8009472:	fbb6 f1f3 	udiv	r1, r6, r3
 8009476:	fb03 6711 	mls	r7, r3, r1, r6
 800947a:	5dc7      	ldrb	r7, [r0, r7]
 800947c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009480:	4637      	mov	r7, r6
 8009482:	42bb      	cmp	r3, r7
 8009484:	460e      	mov	r6, r1
 8009486:	d9f4      	bls.n	8009472 <_printf_i+0x116>
 8009488:	2b08      	cmp	r3, #8
 800948a:	d10b      	bne.n	80094a4 <_printf_i+0x148>
 800948c:	6823      	ldr	r3, [r4, #0]
 800948e:	07de      	lsls	r6, r3, #31
 8009490:	d508      	bpl.n	80094a4 <_printf_i+0x148>
 8009492:	6923      	ldr	r3, [r4, #16]
 8009494:	6861      	ldr	r1, [r4, #4]
 8009496:	4299      	cmp	r1, r3
 8009498:	bfde      	ittt	le
 800949a:	2330      	movle	r3, #48	; 0x30
 800949c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80094a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80094a4:	1b52      	subs	r2, r2, r5
 80094a6:	6122      	str	r2, [r4, #16]
 80094a8:	f8cd a000 	str.w	sl, [sp]
 80094ac:	464b      	mov	r3, r9
 80094ae:	aa03      	add	r2, sp, #12
 80094b0:	4621      	mov	r1, r4
 80094b2:	4640      	mov	r0, r8
 80094b4:	f7ff fee4 	bl	8009280 <_printf_common>
 80094b8:	3001      	adds	r0, #1
 80094ba:	d14a      	bne.n	8009552 <_printf_i+0x1f6>
 80094bc:	f04f 30ff 	mov.w	r0, #4294967295
 80094c0:	b004      	add	sp, #16
 80094c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094c6:	6823      	ldr	r3, [r4, #0]
 80094c8:	f043 0320 	orr.w	r3, r3, #32
 80094cc:	6023      	str	r3, [r4, #0]
 80094ce:	4833      	ldr	r0, [pc, #204]	; (800959c <_printf_i+0x240>)
 80094d0:	2778      	movs	r7, #120	; 0x78
 80094d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80094d6:	6823      	ldr	r3, [r4, #0]
 80094d8:	6829      	ldr	r1, [r5, #0]
 80094da:	061f      	lsls	r7, r3, #24
 80094dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80094e0:	d402      	bmi.n	80094e8 <_printf_i+0x18c>
 80094e2:	065f      	lsls	r7, r3, #25
 80094e4:	bf48      	it	mi
 80094e6:	b2b6      	uxthmi	r6, r6
 80094e8:	07df      	lsls	r7, r3, #31
 80094ea:	bf48      	it	mi
 80094ec:	f043 0320 	orrmi.w	r3, r3, #32
 80094f0:	6029      	str	r1, [r5, #0]
 80094f2:	bf48      	it	mi
 80094f4:	6023      	strmi	r3, [r4, #0]
 80094f6:	b91e      	cbnz	r6, 8009500 <_printf_i+0x1a4>
 80094f8:	6823      	ldr	r3, [r4, #0]
 80094fa:	f023 0320 	bic.w	r3, r3, #32
 80094fe:	6023      	str	r3, [r4, #0]
 8009500:	2310      	movs	r3, #16
 8009502:	e7a7      	b.n	8009454 <_printf_i+0xf8>
 8009504:	4824      	ldr	r0, [pc, #144]	; (8009598 <_printf_i+0x23c>)
 8009506:	e7e4      	b.n	80094d2 <_printf_i+0x176>
 8009508:	4615      	mov	r5, r2
 800950a:	e7bd      	b.n	8009488 <_printf_i+0x12c>
 800950c:	682b      	ldr	r3, [r5, #0]
 800950e:	6826      	ldr	r6, [r4, #0]
 8009510:	6961      	ldr	r1, [r4, #20]
 8009512:	1d18      	adds	r0, r3, #4
 8009514:	6028      	str	r0, [r5, #0]
 8009516:	0635      	lsls	r5, r6, #24
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	d501      	bpl.n	8009520 <_printf_i+0x1c4>
 800951c:	6019      	str	r1, [r3, #0]
 800951e:	e002      	b.n	8009526 <_printf_i+0x1ca>
 8009520:	0670      	lsls	r0, r6, #25
 8009522:	d5fb      	bpl.n	800951c <_printf_i+0x1c0>
 8009524:	8019      	strh	r1, [r3, #0]
 8009526:	2300      	movs	r3, #0
 8009528:	6123      	str	r3, [r4, #16]
 800952a:	4615      	mov	r5, r2
 800952c:	e7bc      	b.n	80094a8 <_printf_i+0x14c>
 800952e:	682b      	ldr	r3, [r5, #0]
 8009530:	1d1a      	adds	r2, r3, #4
 8009532:	602a      	str	r2, [r5, #0]
 8009534:	681d      	ldr	r5, [r3, #0]
 8009536:	6862      	ldr	r2, [r4, #4]
 8009538:	2100      	movs	r1, #0
 800953a:	4628      	mov	r0, r5
 800953c:	f7f6 fe68 	bl	8000210 <memchr>
 8009540:	b108      	cbz	r0, 8009546 <_printf_i+0x1ea>
 8009542:	1b40      	subs	r0, r0, r5
 8009544:	6060      	str	r0, [r4, #4]
 8009546:	6863      	ldr	r3, [r4, #4]
 8009548:	6123      	str	r3, [r4, #16]
 800954a:	2300      	movs	r3, #0
 800954c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009550:	e7aa      	b.n	80094a8 <_printf_i+0x14c>
 8009552:	6923      	ldr	r3, [r4, #16]
 8009554:	462a      	mov	r2, r5
 8009556:	4649      	mov	r1, r9
 8009558:	4640      	mov	r0, r8
 800955a:	47d0      	blx	sl
 800955c:	3001      	adds	r0, #1
 800955e:	d0ad      	beq.n	80094bc <_printf_i+0x160>
 8009560:	6823      	ldr	r3, [r4, #0]
 8009562:	079b      	lsls	r3, r3, #30
 8009564:	d413      	bmi.n	800958e <_printf_i+0x232>
 8009566:	68e0      	ldr	r0, [r4, #12]
 8009568:	9b03      	ldr	r3, [sp, #12]
 800956a:	4298      	cmp	r0, r3
 800956c:	bfb8      	it	lt
 800956e:	4618      	movlt	r0, r3
 8009570:	e7a6      	b.n	80094c0 <_printf_i+0x164>
 8009572:	2301      	movs	r3, #1
 8009574:	4632      	mov	r2, r6
 8009576:	4649      	mov	r1, r9
 8009578:	4640      	mov	r0, r8
 800957a:	47d0      	blx	sl
 800957c:	3001      	adds	r0, #1
 800957e:	d09d      	beq.n	80094bc <_printf_i+0x160>
 8009580:	3501      	adds	r5, #1
 8009582:	68e3      	ldr	r3, [r4, #12]
 8009584:	9903      	ldr	r1, [sp, #12]
 8009586:	1a5b      	subs	r3, r3, r1
 8009588:	42ab      	cmp	r3, r5
 800958a:	dcf2      	bgt.n	8009572 <_printf_i+0x216>
 800958c:	e7eb      	b.n	8009566 <_printf_i+0x20a>
 800958e:	2500      	movs	r5, #0
 8009590:	f104 0619 	add.w	r6, r4, #25
 8009594:	e7f5      	b.n	8009582 <_printf_i+0x226>
 8009596:	bf00      	nop
 8009598:	080097d1 	.word	0x080097d1
 800959c:	080097e2 	.word	0x080097e2

080095a0 <memmove>:
 80095a0:	4288      	cmp	r0, r1
 80095a2:	b510      	push	{r4, lr}
 80095a4:	eb01 0402 	add.w	r4, r1, r2
 80095a8:	d902      	bls.n	80095b0 <memmove+0x10>
 80095aa:	4284      	cmp	r4, r0
 80095ac:	4623      	mov	r3, r4
 80095ae:	d807      	bhi.n	80095c0 <memmove+0x20>
 80095b0:	1e43      	subs	r3, r0, #1
 80095b2:	42a1      	cmp	r1, r4
 80095b4:	d008      	beq.n	80095c8 <memmove+0x28>
 80095b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80095be:	e7f8      	b.n	80095b2 <memmove+0x12>
 80095c0:	4402      	add	r2, r0
 80095c2:	4601      	mov	r1, r0
 80095c4:	428a      	cmp	r2, r1
 80095c6:	d100      	bne.n	80095ca <memmove+0x2a>
 80095c8:	bd10      	pop	{r4, pc}
 80095ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80095ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80095d2:	e7f7      	b.n	80095c4 <memmove+0x24>

080095d4 <_sbrk_r>:
 80095d4:	b538      	push	{r3, r4, r5, lr}
 80095d6:	4d06      	ldr	r5, [pc, #24]	; (80095f0 <_sbrk_r+0x1c>)
 80095d8:	2300      	movs	r3, #0
 80095da:	4604      	mov	r4, r0
 80095dc:	4608      	mov	r0, r1
 80095de:	602b      	str	r3, [r5, #0]
 80095e0:	f7f8 ff38 	bl	8002454 <_sbrk>
 80095e4:	1c43      	adds	r3, r0, #1
 80095e6:	d102      	bne.n	80095ee <_sbrk_r+0x1a>
 80095e8:	682b      	ldr	r3, [r5, #0]
 80095ea:	b103      	cbz	r3, 80095ee <_sbrk_r+0x1a>
 80095ec:	6023      	str	r3, [r4, #0]
 80095ee:	bd38      	pop	{r3, r4, r5, pc}
 80095f0:	20000744 	.word	0x20000744

080095f4 <memcpy>:
 80095f4:	440a      	add	r2, r1
 80095f6:	4291      	cmp	r1, r2
 80095f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80095fc:	d100      	bne.n	8009600 <memcpy+0xc>
 80095fe:	4770      	bx	lr
 8009600:	b510      	push	{r4, lr}
 8009602:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009606:	f803 4f01 	strb.w	r4, [r3, #1]!
 800960a:	4291      	cmp	r1, r2
 800960c:	d1f9      	bne.n	8009602 <memcpy+0xe>
 800960e:	bd10      	pop	{r4, pc}

08009610 <_realloc_r>:
 8009610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009614:	4680      	mov	r8, r0
 8009616:	4614      	mov	r4, r2
 8009618:	460e      	mov	r6, r1
 800961a:	b921      	cbnz	r1, 8009626 <_realloc_r+0x16>
 800961c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009620:	4611      	mov	r1, r2
 8009622:	f7ff bc49 	b.w	8008eb8 <_malloc_r>
 8009626:	b92a      	cbnz	r2, 8009634 <_realloc_r+0x24>
 8009628:	f7ff fbda 	bl	8008de0 <_free_r>
 800962c:	4625      	mov	r5, r4
 800962e:	4628      	mov	r0, r5
 8009630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009634:	f000 f81b 	bl	800966e <_malloc_usable_size_r>
 8009638:	4284      	cmp	r4, r0
 800963a:	4607      	mov	r7, r0
 800963c:	d802      	bhi.n	8009644 <_realloc_r+0x34>
 800963e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009642:	d812      	bhi.n	800966a <_realloc_r+0x5a>
 8009644:	4621      	mov	r1, r4
 8009646:	4640      	mov	r0, r8
 8009648:	f7ff fc36 	bl	8008eb8 <_malloc_r>
 800964c:	4605      	mov	r5, r0
 800964e:	2800      	cmp	r0, #0
 8009650:	d0ed      	beq.n	800962e <_realloc_r+0x1e>
 8009652:	42bc      	cmp	r4, r7
 8009654:	4622      	mov	r2, r4
 8009656:	4631      	mov	r1, r6
 8009658:	bf28      	it	cs
 800965a:	463a      	movcs	r2, r7
 800965c:	f7ff ffca 	bl	80095f4 <memcpy>
 8009660:	4631      	mov	r1, r6
 8009662:	4640      	mov	r0, r8
 8009664:	f7ff fbbc 	bl	8008de0 <_free_r>
 8009668:	e7e1      	b.n	800962e <_realloc_r+0x1e>
 800966a:	4635      	mov	r5, r6
 800966c:	e7df      	b.n	800962e <_realloc_r+0x1e>

0800966e <_malloc_usable_size_r>:
 800966e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009672:	1f18      	subs	r0, r3, #4
 8009674:	2b00      	cmp	r3, #0
 8009676:	bfbc      	itt	lt
 8009678:	580b      	ldrlt	r3, [r1, r0]
 800967a:	18c0      	addlt	r0, r0, r3
 800967c:	4770      	bx	lr
	...

08009680 <trunc>:
 8009680:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 8009684:	ec5c bb10 	vmov	fp, ip, d0
 8009688:	f3cc 500a 	ubfx	r0, ip, #20, #11
 800968c:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 8009690:	2913      	cmp	r1, #19
 8009692:	4664      	mov	r4, ip
 8009694:	dc11      	bgt.n	80096ba <trunc+0x3a>
 8009696:	2900      	cmp	r1, #0
 8009698:	bfa7      	ittee	ge
 800969a:	4b15      	ldrge	r3, [pc, #84]	; (80096f0 <trunc+0x70>)
 800969c:	fa43 f101 	asrge.w	r1, r3, r1
 80096a0:	2200      	movlt	r2, #0
 80096a2:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 80096a6:	bfa4      	itt	ge
 80096a8:	2200      	movge	r2, #0
 80096aa:	ea01 030c 	andge.w	r3, r1, ip
 80096ae:	4693      	mov	fp, r2
 80096b0:	469c      	mov	ip, r3
 80096b2:	ec4c bb10 	vmov	d0, fp, ip
 80096b6:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 80096ba:	2933      	cmp	r1, #51	; 0x33
 80096bc:	dd0d      	ble.n	80096da <trunc+0x5a>
 80096be:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80096c2:	d1f6      	bne.n	80096b2 <trunc+0x32>
 80096c4:	4663      	mov	r3, ip
 80096c6:	ee10 2a10 	vmov	r2, s0
 80096ca:	ee10 0a10 	vmov	r0, s0
 80096ce:	4621      	mov	r1, r4
 80096d0:	f7f6 fdf4 	bl	80002bc <__adddf3>
 80096d4:	4683      	mov	fp, r0
 80096d6:	468c      	mov	ip, r1
 80096d8:	e7eb      	b.n	80096b2 <trunc+0x32>
 80096da:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 80096de:	f04f 33ff 	mov.w	r3, #4294967295
 80096e2:	40c3      	lsrs	r3, r0
 80096e4:	ea2b 0603 	bic.w	r6, fp, r3
 80096e8:	46b3      	mov	fp, r6
 80096ea:	46a4      	mov	ip, r4
 80096ec:	e7e1      	b.n	80096b2 <trunc+0x32>
 80096ee:	bf00      	nop
 80096f0:	fff00000 	.word	0xfff00000

080096f4 <_init>:
 80096f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096f6:	bf00      	nop
 80096f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096fa:	bc08      	pop	{r3}
 80096fc:	469e      	mov	lr, r3
 80096fe:	4770      	bx	lr

08009700 <_fini>:
 8009700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009702:	bf00      	nop
 8009704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009706:	bc08      	pop	{r3}
 8009708:	469e      	mov	lr, r3
 800970a:	4770      	bx	lr

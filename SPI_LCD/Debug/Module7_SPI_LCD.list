
Module7_SPI_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2c4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000910  0800a484  0800a484  0001a484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad94  0800ad94  00020058  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad94  0800ad94  0001ad94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad9c  0800ad9c  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad9c  0800ad9c  0001ad9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ada0  0800ada0  0001ada0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  0800ada4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001260  20000058  0800adfc  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200012b8  0800adfc  000212b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002508d  00000000  00000000  000200cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004348  00000000  00000000  00045158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002068  00000000  00000000  000494a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001961  00000000  00000000  0004b508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e8ad  00000000  00000000  0004ce69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026c4c  00000000  00000000  0007b716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00131e83  00000000  00000000  000a2362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008b64  00000000  00000000  001d41e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  001dcd4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000058 	.word	0x20000058
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800a46c 	.word	0x0800a46c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	0800a46c 	.word	0x0800a46c

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	f103 0208 	add.w	r2, r3, #8
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	f04f 32ff 	mov.w	r2, #4294967295
 8000524:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	f103 0208 	add.w	r2, r3, #8
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	f103 0208 	add.w	r2, r3, #8
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr

0800054c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2200      	movs	r2, #0
 8000558:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800055a:	bf00      	nop
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr

08000566 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000566:	b480      	push	{r7}
 8000568:	b085      	sub	sp, #20
 800056a:	af00      	add	r7, sp, #0
 800056c:	6078      	str	r0, [r7, #4]
 800056e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000576:	68bb      	ldr	r3, [r7, #8]
 8000578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800057c:	d103      	bne.n	8000586 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	691b      	ldr	r3, [r3, #16]
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	e00c      	b.n	80005a0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	3308      	adds	r3, #8
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	e002      	b.n	8000594 <vListInsert+0x2e>
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	685b      	ldr	r3, [r3, #4]
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	68ba      	ldr	r2, [r7, #8]
 800059c:	429a      	cmp	r2, r3
 800059e:	d2f6      	bcs.n	800058e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	685a      	ldr	r2, [r3, #4]
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	683a      	ldr	r2, [r7, #0]
 80005ae:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	68fa      	ldr	r2, [r7, #12]
 80005b4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	683a      	ldr	r2, [r7, #0]
 80005ba:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	1c5a      	adds	r2, r3, #1
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	601a      	str	r2, [r3, #0]
}
 80005cc:	bf00      	nop
 80005ce:	3714      	adds	r7, #20
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	691b      	ldr	r3, [r3, #16]
 80005e4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	6892      	ldr	r2, [r2, #8]
 80005ee:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	6852      	ldr	r2, [r2, #4]
 80005f8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	685b      	ldr	r3, [r3, #4]
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	429a      	cmp	r2, r3
 8000602:	d103      	bne.n	800060c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	689a      	ldr	r2, [r3, #8]
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2200      	movs	r2, #0
 8000610:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	1e5a      	subs	r2, r3, #1
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	681b      	ldr	r3, [r3, #0]
}
 8000620:	4618      	mov	r0, r3
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800062c:	b580      	push	{r7, lr}
 800062e:	b08c      	sub	sp, #48	; 0x30
 8000630:	af04      	add	r7, sp, #16
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	603b      	str	r3, [r7, #0]
 8000638:	4613      	mov	r3, r2
 800063a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800063c:	88fb      	ldrh	r3, [r7, #6]
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	4618      	mov	r0, r3
 8000642:	f001 f943 	bl	80018cc <pvPortMalloc>
 8000646:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d013      	beq.n	8000676 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800064e:	2054      	movs	r0, #84	; 0x54
 8000650:	f001 f93c 	bl	80018cc <pvPortMalloc>
 8000654:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8000656:	69fb      	ldr	r3, [r7, #28]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d008      	beq.n	800066e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800065c:	2254      	movs	r2, #84	; 0x54
 800065e:	2100      	movs	r1, #0
 8000660:	69f8      	ldr	r0, [r7, #28]
 8000662:	f009 fed7 	bl	800a414 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000666:	69fb      	ldr	r3, [r7, #28]
 8000668:	697a      	ldr	r2, [r7, #20]
 800066a:	631a      	str	r2, [r3, #48]	; 0x30
 800066c:	e005      	b.n	800067a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800066e:	6978      	ldr	r0, [r7, #20]
 8000670:	f001 f9e6 	bl	8001a40 <vPortFree>
 8000674:	e001      	b.n	800067a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d013      	beq.n	80006a8 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000680:	88fa      	ldrh	r2, [r7, #6]
 8000682:	2300      	movs	r3, #0
 8000684:	9303      	str	r3, [sp, #12]
 8000686:	69fb      	ldr	r3, [r7, #28]
 8000688:	9302      	str	r3, [sp, #8]
 800068a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	68b9      	ldr	r1, [r7, #8]
 8000696:	68f8      	ldr	r0, [r7, #12]
 8000698:	f000 f80e 	bl	80006b8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800069c:	69f8      	ldr	r0, [r7, #28]
 800069e:	f000 f891 	bl	80007c4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80006a2:	2301      	movs	r3, #1
 80006a4:	61bb      	str	r3, [r7, #24]
 80006a6:	e002      	b.n	80006ae <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80006a8:	f04f 33ff 	mov.w	r3, #4294967295
 80006ac:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80006ae:	69bb      	ldr	r3, [r7, #24]
    }
 80006b0:	4618      	mov	r0, r3
 80006b2:	3720      	adds	r7, #32
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b088      	sub	sp, #32
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
 80006c4:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80006c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80006d0:	3b01      	subs	r3, #1
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	4413      	add	r3, r2
 80006d6:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80006d8:	69bb      	ldr	r3, [r7, #24]
 80006da:	f023 0307 	bic.w	r3, r3, #7
 80006de:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80006e0:	69bb      	ldr	r3, [r7, #24]
 80006e2:	f003 0307 	and.w	r3, r3, #7
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d00a      	beq.n	8000700 <prvInitialiseNewTask+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80006ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006ee:	f383 8811 	msr	BASEPRI, r3
 80006f2:	f3bf 8f6f 	isb	sy
 80006f6:	f3bf 8f4f 	dsb	sy
 80006fa:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80006fc:	bf00      	nop
 80006fe:	e7fe      	b.n	80006fe <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d01e      	beq.n	8000744 <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000706:	2300      	movs	r3, #0
 8000708:	61fb      	str	r3, [r7, #28]
 800070a:	e012      	b.n	8000732 <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800070c:	68ba      	ldr	r2, [r7, #8]
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	4413      	add	r3, r2
 8000712:	7819      	ldrb	r1, [r3, #0]
 8000714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	4413      	add	r3, r2
 800071a:	3334      	adds	r3, #52	; 0x34
 800071c:	460a      	mov	r2, r1
 800071e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000720:	68ba      	ldr	r2, [r7, #8]
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	4413      	add	r3, r2
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d006      	beq.n	800073a <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800072c:	69fb      	ldr	r3, [r7, #28]
 800072e:	3301      	adds	r3, #1
 8000730:	61fb      	str	r3, [r7, #28]
 8000732:	69fb      	ldr	r3, [r7, #28]
 8000734:	2b0f      	cmp	r3, #15
 8000736:	d9e9      	bls.n	800070c <prvInitialiseNewTask+0x54>
 8000738:	e000      	b.n	800073c <prvInitialiseNewTask+0x84>
            {
                break;
 800073a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800073c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800073e:	2200      	movs	r2, #0
 8000740:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000746:	2b06      	cmp	r3, #6
 8000748:	d90a      	bls.n	8000760 <prvInitialiseNewTask+0xa8>
        __asm volatile
 800074a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800074e:	f383 8811 	msr	BASEPRI, r3
 8000752:	f3bf 8f6f 	isb	sy
 8000756:	f3bf 8f4f 	dsb	sy
 800075a:	613b      	str	r3, [r7, #16]
    }
 800075c:	bf00      	nop
 800075e:	e7fe      	b.n	800075e <prvInitialiseNewTask+0xa6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000762:	2b06      	cmp	r3, #6
 8000764:	d901      	bls.n	800076a <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000766:	2306      	movs	r3, #6
 8000768:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800076a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800076c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800076e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000772:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000774:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000778:	3304      	adds	r3, #4
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff fee6 	bl	800054c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000782:	3318      	adds	r3, #24
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff fee1 	bl	800054c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800078a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800078c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800078e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000792:	f1c3 0207 	rsb	r2, r3, #7
 8000796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000798:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800079a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800079c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800079e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80007a0:	683a      	ldr	r2, [r7, #0]
 80007a2:	68f9      	ldr	r1, [r7, #12]
 80007a4:	69b8      	ldr	r0, [r7, #24]
 80007a6:	f000 fe3f 	bl	8001428 <pxPortInitialiseStack>
 80007aa:	4602      	mov	r2, r0
 80007ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007ae:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80007b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d002      	beq.n	80007bc <prvInitialiseNewTask+0x104>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80007b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80007ba:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80007bc:	bf00      	nop
 80007be:	3720      	adds	r7, #32
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80007cc:	f000 ff5c 	bl	8001688 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80007d0:	4b3e      	ldr	r3, [pc, #248]	; (80008cc <prvAddNewTaskToReadyList+0x108>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	3301      	adds	r3, #1
 80007d6:	4a3d      	ldr	r2, [pc, #244]	; (80008cc <prvAddNewTaskToReadyList+0x108>)
 80007d8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80007da:	4b3d      	ldr	r3, [pc, #244]	; (80008d0 <prvAddNewTaskToReadyList+0x10c>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d109      	bne.n	80007f6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80007e2:	4a3b      	ldr	r2, [pc, #236]	; (80008d0 <prvAddNewTaskToReadyList+0x10c>)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80007e8:	4b38      	ldr	r3, [pc, #224]	; (80008cc <prvAddNewTaskToReadyList+0x108>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d110      	bne.n	8000812 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80007f0:	f000 fb9e 	bl	8000f30 <prvInitialiseTaskLists>
 80007f4:	e00d      	b.n	8000812 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80007f6:	4b37      	ldr	r3, [pc, #220]	; (80008d4 <prvAddNewTaskToReadyList+0x110>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d109      	bne.n	8000812 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80007fe:	4b34      	ldr	r3, [pc, #208]	; (80008d0 <prvAddNewTaskToReadyList+0x10c>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000808:	429a      	cmp	r2, r3
 800080a:	d802      	bhi.n	8000812 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800080c:	4a30      	ldr	r2, [pc, #192]	; (80008d0 <prvAddNewTaskToReadyList+0x10c>)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000812:	4b31      	ldr	r3, [pc, #196]	; (80008d8 <prvAddNewTaskToReadyList+0x114>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	3301      	adds	r3, #1
 8000818:	4a2f      	ldr	r2, [pc, #188]	; (80008d8 <prvAddNewTaskToReadyList+0x114>)
 800081a:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000820:	2201      	movs	r2, #1
 8000822:	409a      	lsls	r2, r3
 8000824:	4b2d      	ldr	r3, [pc, #180]	; (80008dc <prvAddNewTaskToReadyList+0x118>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4313      	orrs	r3, r2
 800082a:	4a2c      	ldr	r2, [pc, #176]	; (80008dc <prvAddNewTaskToReadyList+0x118>)
 800082c:	6013      	str	r3, [r2, #0]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000832:	492b      	ldr	r1, [pc, #172]	; (80008e0 <prvAddNewTaskToReadyList+0x11c>)
 8000834:	4613      	mov	r3, r2
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	4413      	add	r3, r2
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	440b      	add	r3, r1
 800083e:	3304      	adds	r3, #4
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	68fa      	ldr	r2, [r7, #12]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	689a      	ldr	r2, [r3, #8]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	689b      	ldr	r3, [r3, #8]
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	3204      	adds	r2, #4
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	1d1a      	adds	r2, r3, #4
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000868:	4613      	mov	r3, r2
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	4413      	add	r3, r2
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	4a1b      	ldr	r2, [pc, #108]	; (80008e0 <prvAddNewTaskToReadyList+0x11c>)
 8000872:	441a      	add	r2, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	615a      	str	r2, [r3, #20]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800087c:	4918      	ldr	r1, [pc, #96]	; (80008e0 <prvAddNewTaskToReadyList+0x11c>)
 800087e:	4613      	mov	r3, r2
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	4413      	add	r3, r2
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	440b      	add	r3, r1
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	1c59      	adds	r1, r3, #1
 800088c:	4814      	ldr	r0, [pc, #80]	; (80008e0 <prvAddNewTaskToReadyList+0x11c>)
 800088e:	4613      	mov	r3, r2
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	4413      	add	r3, r2
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	4403      	add	r3, r0
 8000898:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800089a:	f000 ff25 	bl	80016e8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800089e:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <prvAddNewTaskToReadyList+0x110>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d00e      	beq.n	80008c4 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80008a6:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <prvAddNewTaskToReadyList+0x10c>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d207      	bcs.n	80008c4 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80008b4:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <prvAddNewTaskToReadyList+0x120>)
 80008b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	f3bf 8f4f 	dsb	sy
 80008c0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80008c4:	bf00      	nop
 80008c6:	3710      	adds	r7, #16
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000174 	.word	0x20000174
 80008d0:	20000074 	.word	0x20000074
 80008d4:	20000180 	.word	0x20000180
 80008d8:	20000190 	.word	0x20000190
 80008dc:	2000017c 	.word	0x2000017c
 80008e0:	20000078 	.word	0x20000078
 80008e4:	e000ed04 	.word	0xe000ed04

080008e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d017      	beq.n	800092a <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80008fa:	4b13      	ldr	r3, [pc, #76]	; (8000948 <vTaskDelay+0x60>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d00a      	beq.n	8000918 <vTaskDelay+0x30>
        __asm volatile
 8000902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000906:	f383 8811 	msr	BASEPRI, r3
 800090a:	f3bf 8f6f 	isb	sy
 800090e:	f3bf 8f4f 	dsb	sy
 8000912:	60bb      	str	r3, [r7, #8]
    }
 8000914:	bf00      	nop
 8000916:	e7fe      	b.n	8000916 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8000918:	f000 f866 	bl	80009e8 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800091c:	2100      	movs	r1, #0
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f000 fd02 	bl	8001328 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8000924:	f000 f86e 	bl	8000a04 <xTaskResumeAll>
 8000928:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d107      	bne.n	8000940 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <vTaskDelay+0x64>)
 8000932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	f3bf 8f4f 	dsb	sy
 800093c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000940:	bf00      	nop
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	2000019c 	.word	0x2000019c
 800094c:	e000ed04 	.word	0xe000ed04

08000950 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8000956:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <vTaskStartScheduler+0x7c>)
 8000958:	9301      	str	r3, [sp, #4]
 800095a:	2300      	movs	r3, #0
 800095c:	9300      	str	r3, [sp, #0]
 800095e:	2300      	movs	r3, #0
 8000960:	2280      	movs	r2, #128	; 0x80
 8000962:	491b      	ldr	r1, [pc, #108]	; (80009d0 <vTaskStartScheduler+0x80>)
 8000964:	481b      	ldr	r0, [pc, #108]	; (80009d4 <vTaskStartScheduler+0x84>)
 8000966:	f7ff fe61 	bl	800062c <xTaskCreate>
 800096a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d116      	bne.n	80009a0 <vTaskStartScheduler+0x50>
        __asm volatile
 8000972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000976:	f383 8811 	msr	BASEPRI, r3
 800097a:	f3bf 8f6f 	isb	sy
 800097e:	f3bf 8f4f 	dsb	sy
 8000982:	60bb      	str	r3, [r7, #8]
    }
 8000984:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8000986:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <vTaskStartScheduler+0x88>)
 8000988:	f04f 32ff 	mov.w	r2, #4294967295
 800098c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800098e:	4b13      	ldr	r3, [pc, #76]	; (80009dc <vTaskStartScheduler+0x8c>)
 8000990:	2201      	movs	r2, #1
 8000992:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <vTaskStartScheduler+0x90>)
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800099a:	f000 fdd3 	bl	8001544 <xPortStartScheduler>
 800099e:	e00e      	b.n	80009be <vTaskStartScheduler+0x6e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009a6:	d10a      	bne.n	80009be <vTaskStartScheduler+0x6e>
        __asm volatile
 80009a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009ac:	f383 8811 	msr	BASEPRI, r3
 80009b0:	f3bf 8f6f 	isb	sy
 80009b4:	f3bf 8f4f 	dsb	sy
 80009b8:	607b      	str	r3, [r7, #4]
    }
 80009ba:	bf00      	nop
 80009bc:	e7fe      	b.n	80009bc <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <vTaskStartScheduler+0x94>)
 80009c0:	681b      	ldr	r3, [r3, #0]
}
 80009c2:	bf00      	nop
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000198 	.word	0x20000198
 80009d0:	0800a484 	.word	0x0800a484
 80009d4:	08000f01 	.word	0x08000f01
 80009d8:	20000194 	.word	0x20000194
 80009dc:	20000180 	.word	0x20000180
 80009e0:	20000178 	.word	0x20000178
 80009e4:	20000000 	.word	0x20000000

080009e8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80009ec:	4b04      	ldr	r3, [pc, #16]	; (8000a00 <vTaskSuspendAll+0x18>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	3301      	adds	r3, #1
 80009f2:	4a03      	ldr	r2, [pc, #12]	; (8000a00 <vTaskSuspendAll+0x18>)
 80009f4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	2000019c 	.word	0x2000019c

08000a04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b088      	sub	sp, #32
 8000a08:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8000a12:	4b71      	ldr	r3, [pc, #452]	; (8000bd8 <xTaskResumeAll+0x1d4>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d10a      	bne.n	8000a30 <xTaskResumeAll+0x2c>
        __asm volatile
 8000a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a1e:	f383 8811 	msr	BASEPRI, r3
 8000a22:	f3bf 8f6f 	isb	sy
 8000a26:	f3bf 8f4f 	dsb	sy
 8000a2a:	607b      	str	r3, [r7, #4]
    }
 8000a2c:	bf00      	nop
 8000a2e:	e7fe      	b.n	8000a2e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000a30:	f000 fe2a 	bl	8001688 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000a34:	4b68      	ldr	r3, [pc, #416]	; (8000bd8 <xTaskResumeAll+0x1d4>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	3b01      	subs	r3, #1
 8000a3a:	4a67      	ldr	r2, [pc, #412]	; (8000bd8 <xTaskResumeAll+0x1d4>)
 8000a3c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000a3e:	4b66      	ldr	r3, [pc, #408]	; (8000bd8 <xTaskResumeAll+0x1d4>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	f040 80c0 	bne.w	8000bc8 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000a48:	4b64      	ldr	r3, [pc, #400]	; (8000bdc <xTaskResumeAll+0x1d8>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	f000 80bb 	beq.w	8000bc8 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000a52:	e08a      	b.n	8000b6a <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000a54:	4b62      	ldr	r3, [pc, #392]	; (8000be0 <xTaskResumeAll+0x1dc>)
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	68db      	ldr	r3, [r3, #12]
 8000a5a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000a5c:	69fb      	ldr	r3, [r7, #28]
 8000a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	69db      	ldr	r3, [r3, #28]
 8000a66:	69fa      	ldr	r2, [r7, #28]
 8000a68:	6a12      	ldr	r2, [r2, #32]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	69fb      	ldr	r3, [r7, #28]
 8000a6e:	6a1b      	ldr	r3, [r3, #32]
 8000a70:	69fa      	ldr	r2, [r7, #28]
 8000a72:	69d2      	ldr	r2, [r2, #28]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	685a      	ldr	r2, [r3, #4]
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	3318      	adds	r3, #24
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d103      	bne.n	8000a8a <xTaskResumeAll+0x86>
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	6a1a      	ldr	r2, [r3, #32]
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	629a      	str	r2, [r3, #40]	; 0x28
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	1e5a      	subs	r2, r3, #1
 8000a96:	693b      	ldr	r3, [r7, #16]
 8000a98:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	695b      	ldr	r3, [r3, #20]
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	69fa      	ldr	r2, [r7, #28]
 8000aa6:	68d2      	ldr	r2, [r2, #12]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	68db      	ldr	r3, [r3, #12]
 8000aae:	69fa      	ldr	r2, [r7, #28]
 8000ab0:	6892      	ldr	r2, [r2, #8]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	685a      	ldr	r2, [r3, #4]
 8000ab8:	69fb      	ldr	r3, [r7, #28]
 8000aba:	3304      	adds	r3, #4
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d103      	bne.n	8000ac8 <xTaskResumeAll+0xc4>
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	68da      	ldr	r2, [r3, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	69fb      	ldr	r3, [r7, #28]
 8000aca:	2200      	movs	r2, #0
 8000acc:	615a      	str	r2, [r3, #20]
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	1e5a      	subs	r2, r3, #1
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8000ad8:	69fb      	ldr	r3, [r7, #28]
 8000ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000adc:	2201      	movs	r2, #1
 8000ade:	409a      	lsls	r2, r3
 8000ae0:	4b40      	ldr	r3, [pc, #256]	; (8000be4 <xTaskResumeAll+0x1e0>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	4a3f      	ldr	r2, [pc, #252]	; (8000be4 <xTaskResumeAll+0x1e0>)
 8000ae8:	6013      	str	r3, [r2, #0]
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000aee:	493e      	ldr	r1, [pc, #248]	; (8000be8 <xTaskResumeAll+0x1e4>)
 8000af0:	4613      	mov	r3, r2
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	4413      	add	r3, r2
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	440b      	add	r3, r1
 8000afa:	3304      	adds	r3, #4
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	69fb      	ldr	r3, [r7, #28]
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	689a      	ldr	r2, [r3, #8]
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	69fa      	ldr	r2, [r7, #28]
 8000b14:	3204      	adds	r2, #4
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	1d1a      	adds	r2, r3, #4
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b24:	4613      	mov	r3, r2
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	4413      	add	r3, r2
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	4a2e      	ldr	r2, [pc, #184]	; (8000be8 <xTaskResumeAll+0x1e4>)
 8000b2e:	441a      	add	r2, r3
 8000b30:	69fb      	ldr	r3, [r7, #28]
 8000b32:	615a      	str	r2, [r3, #20]
 8000b34:	69fb      	ldr	r3, [r7, #28]
 8000b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b38:	492b      	ldr	r1, [pc, #172]	; (8000be8 <xTaskResumeAll+0x1e4>)
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	4413      	add	r3, r2
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	440b      	add	r3, r1
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	1c59      	adds	r1, r3, #1
 8000b48:	4827      	ldr	r0, [pc, #156]	; (8000be8 <xTaskResumeAll+0x1e4>)
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	4413      	add	r3, r2
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	4403      	add	r3, r0
 8000b54:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b5a:	4b24      	ldr	r3, [pc, #144]	; (8000bec <xTaskResumeAll+0x1e8>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d302      	bcc.n	8000b6a <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8000b64:	4b22      	ldr	r3, [pc, #136]	; (8000bf0 <xTaskResumeAll+0x1ec>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000b6a:	4b1d      	ldr	r3, [pc, #116]	; (8000be0 <xTaskResumeAll+0x1dc>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f47f af70 	bne.w	8000a54 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000b7a:	f000 fa57 	bl	800102c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000b7e:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <xTaskResumeAll+0x1f0>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d010      	beq.n	8000bac <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000b8a:	f000 f847 	bl	8000c1c <xTaskIncrementTick>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d002      	beq.n	8000b9a <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8000b94:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <xTaskResumeAll+0x1ec>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	3b01      	subs	r3, #1
 8000b9e:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d1f1      	bne.n	8000b8a <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8000ba6:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <xTaskResumeAll+0x1f0>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000bac:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <xTaskResumeAll+0x1ec>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d009      	beq.n	8000bc8 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <xTaskResumeAll+0x1f4>)
 8000bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	f3bf 8f4f 	dsb	sy
 8000bc4:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000bc8:	f000 fd8e 	bl	80016e8 <vPortExitCritical>

    return xAlreadyYielded;
 8000bcc:	69bb      	ldr	r3, [r7, #24]
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3720      	adds	r7, #32
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	2000019c 	.word	0x2000019c
 8000bdc:	20000174 	.word	0x20000174
 8000be0:	20000134 	.word	0x20000134
 8000be4:	2000017c 	.word	0x2000017c
 8000be8:	20000078 	.word	0x20000078
 8000bec:	20000074 	.word	0x20000074
 8000bf0:	20000188 	.word	0x20000188
 8000bf4:	20000184 	.word	0x20000184
 8000bf8:	e000ed04 	.word	0xe000ed04

08000bfc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8000c02:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <xTaskGetTickCount+0x1c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8000c08:	687b      	ldr	r3, [r7, #4]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000178 	.word	0x20000178

08000c1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08a      	sub	sp, #40	; 0x28
 8000c20:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000c22:	2300      	movs	r3, #0
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000c26:	4b7d      	ldr	r3, [pc, #500]	; (8000e1c <xTaskIncrementTick+0x200>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	f040 80ec 	bne.w	8000e08 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000c30:	4b7b      	ldr	r3, [pc, #492]	; (8000e20 <xTaskIncrementTick+0x204>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	3301      	adds	r3, #1
 8000c36:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000c38:	4a79      	ldr	r2, [pc, #484]	; (8000e20 <xTaskIncrementTick+0x204>)
 8000c3a:	6a3b      	ldr	r3, [r7, #32]
 8000c3c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000c3e:	6a3b      	ldr	r3, [r7, #32]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d120      	bne.n	8000c86 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8000c44:	4b77      	ldr	r3, [pc, #476]	; (8000e24 <xTaskIncrementTick+0x208>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d00a      	beq.n	8000c64 <xTaskIncrementTick+0x48>
        __asm volatile
 8000c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c52:	f383 8811 	msr	BASEPRI, r3
 8000c56:	f3bf 8f6f 	isb	sy
 8000c5a:	f3bf 8f4f 	dsb	sy
 8000c5e:	607b      	str	r3, [r7, #4]
    }
 8000c60:	bf00      	nop
 8000c62:	e7fe      	b.n	8000c62 <xTaskIncrementTick+0x46>
 8000c64:	4b6f      	ldr	r3, [pc, #444]	; (8000e24 <xTaskIncrementTick+0x208>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	61fb      	str	r3, [r7, #28]
 8000c6a:	4b6f      	ldr	r3, [pc, #444]	; (8000e28 <xTaskIncrementTick+0x20c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a6d      	ldr	r2, [pc, #436]	; (8000e24 <xTaskIncrementTick+0x208>)
 8000c70:	6013      	str	r3, [r2, #0]
 8000c72:	4a6d      	ldr	r2, [pc, #436]	; (8000e28 <xTaskIncrementTick+0x20c>)
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	6013      	str	r3, [r2, #0]
 8000c78:	4b6c      	ldr	r3, [pc, #432]	; (8000e2c <xTaskIncrementTick+0x210>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	4a6b      	ldr	r2, [pc, #428]	; (8000e2c <xTaskIncrementTick+0x210>)
 8000c80:	6013      	str	r3, [r2, #0]
 8000c82:	f000 f9d3 	bl	800102c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000c86:	4b6a      	ldr	r3, [pc, #424]	; (8000e30 <xTaskIncrementTick+0x214>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	6a3a      	ldr	r2, [r7, #32]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	f0c0 80a6 	bcc.w	8000dde <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000c92:	4b64      	ldr	r3, [pc, #400]	; (8000e24 <xTaskIncrementTick+0x208>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d104      	bne.n	8000ca6 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000c9c:	4b64      	ldr	r3, [pc, #400]	; (8000e30 <xTaskIncrementTick+0x214>)
 8000c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca2:	601a      	str	r2, [r3, #0]
                    break;
 8000ca4:	e09b      	b.n	8000dde <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000ca6:	4b5f      	ldr	r3, [pc, #380]	; (8000e24 <xTaskIncrementTick+0x208>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	68db      	ldr	r3, [r3, #12]
 8000cae:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8000cb6:	6a3a      	ldr	r2, [r7, #32]
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d203      	bcs.n	8000cc6 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000cbe:	4a5c      	ldr	r2, [pc, #368]	; (8000e30 <xTaskIncrementTick+0x214>)
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8000cc4:	e08b      	b.n	8000dde <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	68d2      	ldr	r2, [r2, #12]
 8000cd4:	609a      	str	r2, [r3, #8]
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	68db      	ldr	r3, [r3, #12]
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	6892      	ldr	r2, [r2, #8]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	685a      	ldr	r2, [r3, #4]
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	3304      	adds	r3, #4
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d103      	bne.n	8000cf4 <xTaskIncrementTick+0xd8>
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	68da      	ldr	r2, [r3, #12]
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	615a      	str	r2, [r3, #20]
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	1e5a      	subs	r2, r3, #1
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d01e      	beq.n	8000d4a <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	69db      	ldr	r3, [r3, #28]
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	6a12      	ldr	r2, [r2, #32]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	6a1b      	ldr	r3, [r3, #32]
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	69d2      	ldr	r2, [r2, #28]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	685a      	ldr	r2, [r3, #4]
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	3318      	adds	r3, #24
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d103      	bne.n	8000d3a <xTaskIncrementTick+0x11e>
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	6a1a      	ldr	r2, [r3, #32]
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	629a      	str	r2, [r3, #40]	; 0x28
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	1e5a      	subs	r2, r3, #1
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d4e:	2201      	movs	r2, #1
 8000d50:	409a      	lsls	r2, r3
 8000d52:	4b38      	ldr	r3, [pc, #224]	; (8000e34 <xTaskIncrementTick+0x218>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	4a36      	ldr	r2, [pc, #216]	; (8000e34 <xTaskIncrementTick+0x218>)
 8000d5a:	6013      	str	r3, [r2, #0]
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d60:	4935      	ldr	r1, [pc, #212]	; (8000e38 <xTaskIncrementTick+0x21c>)
 8000d62:	4613      	mov	r3, r2
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	4413      	add	r3, r2
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	440b      	add	r3, r1
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	68ba      	ldr	r2, [r7, #8]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	689a      	ldr	r2, [r3, #8]
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	60da      	str	r2, [r3, #12]
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	3204      	adds	r2, #4
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	1d1a      	adds	r2, r3, #4
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	609a      	str	r2, [r3, #8]
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d96:	4613      	mov	r3, r2
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	4413      	add	r3, r2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	4a26      	ldr	r2, [pc, #152]	; (8000e38 <xTaskIncrementTick+0x21c>)
 8000da0:	441a      	add	r2, r3
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	615a      	str	r2, [r3, #20]
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000daa:	4923      	ldr	r1, [pc, #140]	; (8000e38 <xTaskIncrementTick+0x21c>)
 8000dac:	4613      	mov	r3, r2
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	4413      	add	r3, r2
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	440b      	add	r3, r1
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	1c59      	adds	r1, r3, #1
 8000dba:	481f      	ldr	r0, [pc, #124]	; (8000e38 <xTaskIncrementTick+0x21c>)
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	4413      	add	r3, r2
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	4403      	add	r3, r0
 8000dc6:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <xTaskIncrementTick+0x220>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	f67f af5d 	bls.w	8000c92 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000ddc:	e759      	b.n	8000c92 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000dde:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <xTaskIncrementTick+0x220>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000de4:	4914      	ldr	r1, [pc, #80]	; (8000e38 <xTaskIncrementTick+0x21c>)
 8000de6:	4613      	mov	r3, r2
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	4413      	add	r3, r2
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	440b      	add	r3, r1
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d901      	bls.n	8000dfa <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8000df6:	2301      	movs	r3, #1
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8000dfa:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <xTaskIncrementTick+0x224>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d007      	beq.n	8000e12 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8000e02:	2301      	movs	r3, #1
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
 8000e06:	e004      	b.n	8000e12 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000e08:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <xTaskIncrementTick+0x228>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	4a0d      	ldr	r2, [pc, #52]	; (8000e44 <xTaskIncrementTick+0x228>)
 8000e10:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8000e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3728      	adds	r7, #40	; 0x28
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	2000019c 	.word	0x2000019c
 8000e20:	20000178 	.word	0x20000178
 8000e24:	2000012c 	.word	0x2000012c
 8000e28:	20000130 	.word	0x20000130
 8000e2c:	2000018c 	.word	0x2000018c
 8000e30:	20000194 	.word	0x20000194
 8000e34:	2000017c 	.word	0x2000017c
 8000e38:	20000078 	.word	0x20000078
 8000e3c:	20000074 	.word	0x20000074
 8000e40:	20000188 	.word	0x20000188
 8000e44:	20000184 	.word	0x20000184

08000e48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b087      	sub	sp, #28
 8000e4c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000e4e:	4b27      	ldr	r3, [pc, #156]	; (8000eec <vTaskSwitchContext+0xa4>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d003      	beq.n	8000e5e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8000e56:	4b26      	ldr	r3, [pc, #152]	; (8000ef0 <vTaskSwitchContext+0xa8>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8000e5c:	e03f      	b.n	8000ede <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8000e5e:	4b24      	ldr	r3, [pc, #144]	; (8000ef0 <vTaskSwitchContext+0xa8>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000e64:	4b23      	ldr	r3, [pc, #140]	; (8000ef4 <vTaskSwitchContext+0xac>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	fab3 f383 	clz	r3, r3
 8000e70:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8000e72:	7afb      	ldrb	r3, [r7, #11]
 8000e74:	f1c3 031f 	rsb	r3, r3, #31
 8000e78:	617b      	str	r3, [r7, #20]
 8000e7a:	491f      	ldr	r1, [pc, #124]	; (8000ef8 <vTaskSwitchContext+0xb0>)
 8000e7c:	697a      	ldr	r2, [r7, #20]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	4413      	add	r3, r2
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	440b      	add	r3, r1
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d10a      	bne.n	8000ea4 <vTaskSwitchContext+0x5c>
        __asm volatile
 8000e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e92:	f383 8811 	msr	BASEPRI, r3
 8000e96:	f3bf 8f6f 	isb	sy
 8000e9a:	f3bf 8f4f 	dsb	sy
 8000e9e:	607b      	str	r3, [r7, #4]
    }
 8000ea0:	bf00      	nop
 8000ea2:	e7fe      	b.n	8000ea2 <vTaskSwitchContext+0x5a>
 8000ea4:	697a      	ldr	r2, [r7, #20]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	4413      	add	r3, r2
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	4a12      	ldr	r2, [pc, #72]	; (8000ef8 <vTaskSwitchContext+0xb0>)
 8000eb0:	4413      	add	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	685a      	ldr	r2, [r3, #4]
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	685a      	ldr	r2, [r3, #4]
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	3308      	adds	r3, #8
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d104      	bne.n	8000ed4 <vTaskSwitchContext+0x8c>
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	685a      	ldr	r2, [r3, #4]
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	4a08      	ldr	r2, [pc, #32]	; (8000efc <vTaskSwitchContext+0xb4>)
 8000edc:	6013      	str	r3, [r2, #0]
}
 8000ede:	bf00      	nop
 8000ee0:	371c      	adds	r7, #28
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	2000019c 	.word	0x2000019c
 8000ef0:	20000188 	.word	0x20000188
 8000ef4:	2000017c 	.word	0x2000017c
 8000ef8:	20000078 	.word	0x20000078
 8000efc:	20000074 	.word	0x20000074

08000f00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8000f08:	f000 f852 	bl	8000fb0 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <prvIdleTask+0x28>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d9f9      	bls.n	8000f08 <prvIdleTask+0x8>
            {
                taskYIELD();
 8000f14:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <prvIdleTask+0x2c>)
 8000f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	f3bf 8f4f 	dsb	sy
 8000f20:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8000f24:	e7f0      	b.n	8000f08 <prvIdleTask+0x8>
 8000f26:	bf00      	nop
 8000f28:	20000078 	.word	0x20000078
 8000f2c:	e000ed04 	.word	0xe000ed04

08000f30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	e00c      	b.n	8000f56 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	4413      	add	r3, r2
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	4a12      	ldr	r2, [pc, #72]	; (8000f90 <prvInitialiseTaskLists+0x60>)
 8000f48:	4413      	add	r3, r2
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff fade 	bl	800050c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3301      	adds	r3, #1
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b06      	cmp	r3, #6
 8000f5a:	d9ef      	bls.n	8000f3c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8000f5c:	480d      	ldr	r0, [pc, #52]	; (8000f94 <prvInitialiseTaskLists+0x64>)
 8000f5e:	f7ff fad5 	bl	800050c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8000f62:	480d      	ldr	r0, [pc, #52]	; (8000f98 <prvInitialiseTaskLists+0x68>)
 8000f64:	f7ff fad2 	bl	800050c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8000f68:	480c      	ldr	r0, [pc, #48]	; (8000f9c <prvInitialiseTaskLists+0x6c>)
 8000f6a:	f7ff facf 	bl	800050c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8000f6e:	480c      	ldr	r0, [pc, #48]	; (8000fa0 <prvInitialiseTaskLists+0x70>)
 8000f70:	f7ff facc 	bl	800050c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8000f74:	480b      	ldr	r0, [pc, #44]	; (8000fa4 <prvInitialiseTaskLists+0x74>)
 8000f76:	f7ff fac9 	bl	800050c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <prvInitialiseTaskLists+0x78>)
 8000f7c:	4a05      	ldr	r2, [pc, #20]	; (8000f94 <prvInitialiseTaskLists+0x64>)
 8000f7e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000f80:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <prvInitialiseTaskLists+0x7c>)
 8000f82:	4a05      	ldr	r2, [pc, #20]	; (8000f98 <prvInitialiseTaskLists+0x68>)
 8000f84:	601a      	str	r2, [r3, #0]
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000078 	.word	0x20000078
 8000f94:	20000104 	.word	0x20000104
 8000f98:	20000118 	.word	0x20000118
 8000f9c:	20000134 	.word	0x20000134
 8000fa0:	20000148 	.word	0x20000148
 8000fa4:	20000160 	.word	0x20000160
 8000fa8:	2000012c 	.word	0x2000012c
 8000fac:	20000130 	.word	0x20000130

08000fb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000fb6:	e019      	b.n	8000fec <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8000fb8:	f000 fb66 	bl	8001688 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000fbc:	4b10      	ldr	r3, [pc, #64]	; (8001000 <prvCheckTasksWaitingTermination+0x50>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3304      	adds	r3, #4
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fb05 	bl	80005d8 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8000fce:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <prvCheckTasksWaitingTermination+0x54>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	4a0b      	ldr	r2, [pc, #44]	; (8001004 <prvCheckTasksWaitingTermination+0x54>)
 8000fd6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <prvCheckTasksWaitingTermination+0x58>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <prvCheckTasksWaitingTermination+0x58>)
 8000fe0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8000fe2:	f000 fb81 	bl	80016e8 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f000 f810 	bl	800100c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <prvCheckTasksWaitingTermination+0x58>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d1e1      	bne.n	8000fb8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8000ff4:	bf00      	nop
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000148 	.word	0x20000148
 8001004:	20000174 	.word	0x20000174
 8001008:	2000015c 	.word	0x2000015c

0800100c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001018:	4618      	mov	r0, r3
 800101a:	f000 fd11 	bl	8001a40 <vPortFree>
            vPortFree( pxTCB );
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f000 fd0e 	bl	8001a40 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001030:	4b0a      	ldr	r3, [pc, #40]	; (800105c <prvResetNextTaskUnblockTime+0x30>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d104      	bne.n	8001044 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800103a:	4b09      	ldr	r3, [pc, #36]	; (8001060 <prvResetNextTaskUnblockTime+0x34>)
 800103c:	f04f 32ff 	mov.w	r2, #4294967295
 8001040:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001042:	e005      	b.n	8001050 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <prvResetNextTaskUnblockTime+0x30>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <prvResetNextTaskUnblockTime+0x34>)
 800104e:	6013      	str	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	2000012c 	.word	0x2000012c
 8001060:	20000194 	.word	0x20000194

08001064 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8001064:	b580      	push	{r7, lr}
 8001066:	b092      	sub	sp, #72	; 0x48
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
 8001070:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8001072:	2301      	movs	r3, #1
 8001074:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d10a      	bne.n	8001092 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 800107c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001080:	f383 8811 	msr	BASEPRI, r3
 8001084:	f3bf 8f6f 	isb	sy
 8001088:	f3bf 8f4f 	dsb	sy
 800108c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800108e:	bf00      	nop
 8001090:	e7fe      	b.n	8001090 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d00a      	beq.n	80010ae <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8001098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800109c:	f383 8811 	msr	BASEPRI, r3
 80010a0:	f3bf 8f6f 	isb	sy
 80010a4:	f3bf 8f4f 	dsb	sy
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80010aa:	bf00      	nop
 80010ac:	e7fe      	b.n	80010ac <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80010ae:	f000 fbcd 	bl	800184c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	643b      	str	r3, [r7, #64]	; 0x40

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80010b6:	f3ef 8211 	mrs	r2, BASEPRI
 80010ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010be:	f383 8811 	msr	BASEPRI, r3
 80010c2:	f3bf 8f6f 	isb	sy
 80010c6:	f3bf 8f4f 	dsb	sy
 80010ca:	623a      	str	r2, [r7, #32]
 80010cc:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80010ce:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80010d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 80010d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d007      	beq.n	80010e8 <xTaskGenericNotifyFromISR+0x84>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80010d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	3312      	adds	r3, #18
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	4413      	add	r3, r2
 80010e2:	685a      	ldr	r2, [r3, #4]
 80010e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010e6:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80010e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	4413      	add	r3, r2
 80010ee:	3350      	adds	r3, #80	; 0x50
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80010f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	4413      	add	r3, r2
 80010fc:	3350      	adds	r3, #80	; 0x50
 80010fe:	2202      	movs	r2, #2
 8001100:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8001102:	78fb      	ldrb	r3, [r7, #3]
 8001104:	2b04      	cmp	r3, #4
 8001106:	d841      	bhi.n	800118c <xTaskGenericNotifyFromISR+0x128>
 8001108:	a201      	add	r2, pc, #4	; (adr r2, 8001110 <xTaskGenericNotifyFromISR+0xac>)
 800110a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800110e:	bf00      	nop
 8001110:	080011ab 	.word	0x080011ab
 8001114:	08001125 	.word	0x08001125
 8001118:	08001143 	.word	0x08001143
 800111c:	0800115f 	.word	0x0800115f
 8001120:	0800116f 	.word	0x0800116f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8001124:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	3312      	adds	r3, #18
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	4413      	add	r3, r2
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	431a      	orrs	r2, r3
 8001134:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	3312      	adds	r3, #18
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	440b      	add	r3, r1
 800113e:	605a      	str	r2, [r3, #4]
                    break;
 8001140:	e036      	b.n	80011b0 <xTaskGenericNotifyFromISR+0x14c>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8001142:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	3312      	adds	r3, #18
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	1c5a      	adds	r2, r3, #1
 8001150:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	3312      	adds	r3, #18
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	440b      	add	r3, r1
 800115a:	605a      	str	r2, [r3, #4]
                    break;
 800115c:	e028      	b.n	80011b0 <xTaskGenericNotifyFromISR+0x14c>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800115e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	3312      	adds	r3, #18
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	4413      	add	r3, r2
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	605a      	str	r2, [r3, #4]
                    break;
 800116c:	e020      	b.n	80011b0 <xTaskGenericNotifyFromISR+0x14c>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800116e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001172:	2b02      	cmp	r3, #2
 8001174:	d007      	beq.n	8001186 <xTaskGenericNotifyFromISR+0x122>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001176:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	3312      	adds	r3, #18
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	4413      	add	r3, r2
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8001184:	e014      	b.n	80011b0 <xTaskGenericNotifyFromISR+0x14c>
                        xReturn = pdFAIL;
 8001186:	2300      	movs	r3, #0
 8001188:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 800118a:	e011      	b.n	80011b0 <xTaskGenericNotifyFromISR+0x14c>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800118c:	4b5f      	ldr	r3, [pc, #380]	; (800130c <xTaskGenericNotifyFromISR+0x2a8>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d00c      	beq.n	80011ae <xTaskGenericNotifyFromISR+0x14a>
        __asm volatile
 8001194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001198:	f383 8811 	msr	BASEPRI, r3
 800119c:	f3bf 8f6f 	isb	sy
 80011a0:	f3bf 8f4f 	dsb	sy
 80011a4:	61bb      	str	r3, [r7, #24]
    }
 80011a6:	bf00      	nop
 80011a8:	e7fe      	b.n	80011a8 <xTaskGenericNotifyFromISR+0x144>
                    break;
 80011aa:	bf00      	nop
 80011ac:	e000      	b.n	80011b0 <xTaskGenericNotifyFromISR+0x14c>
                    break;
 80011ae:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80011b0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	f040 809e 	bne.w	80012f6 <xTaskGenericNotifyFromISR+0x292>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80011ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d00a      	beq.n	80011d8 <xTaskGenericNotifyFromISR+0x174>
        __asm volatile
 80011c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011c6:	f383 8811 	msr	BASEPRI, r3
 80011ca:	f3bf 8f6f 	isb	sy
 80011ce:	f3bf 8f4f 	dsb	sy
 80011d2:	617b      	str	r3, [r7, #20]
    }
 80011d4:	bf00      	nop
 80011d6:	e7fe      	b.n	80011d6 <xTaskGenericNotifyFromISR+0x172>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80011d8:	4b4d      	ldr	r3, [pc, #308]	; (8001310 <xTaskGenericNotifyFromISR+0x2ac>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d15e      	bne.n	800129e <xTaskGenericNotifyFromISR+0x23a>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80011e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	633b      	str	r3, [r7, #48]	; 0x30
 80011e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80011ec:	68d2      	ldr	r2, [r2, #12]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80011f6:	6892      	ldr	r2, [r2, #8]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001200:	3304      	adds	r3, #4
 8001202:	429a      	cmp	r2, r3
 8001204:	d103      	bne.n	800120e <xTaskGenericNotifyFromISR+0x1aa>
 8001206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001208:	68da      	ldr	r2, [r3, #12]
 800120a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001210:	2200      	movs	r2, #0
 8001212:	615a      	str	r2, [r3, #20]
 8001214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	1e5a      	subs	r2, r3, #1
 800121a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800121c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800121e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001222:	2201      	movs	r2, #1
 8001224:	409a      	lsls	r2, r3
 8001226:	4b3b      	ldr	r3, [pc, #236]	; (8001314 <xTaskGenericNotifyFromISR+0x2b0>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4313      	orrs	r3, r2
 800122c:	4a39      	ldr	r2, [pc, #228]	; (8001314 <xTaskGenericNotifyFromISR+0x2b0>)
 800122e:	6013      	str	r3, [r2, #0]
 8001230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001234:	4938      	ldr	r1, [pc, #224]	; (8001318 <xTaskGenericNotifyFromISR+0x2b4>)
 8001236:	4613      	mov	r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4413      	add	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	440b      	add	r3, r1
 8001240:	3304      	adds	r3, #4
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001248:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800124e:	689a      	ldr	r2, [r3, #8]
 8001250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001252:	60da      	str	r2, [r3, #12]
 8001254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800125a:	3204      	adds	r2, #4
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001260:	1d1a      	adds	r2, r3, #4
 8001262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800126a:	4613      	mov	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4413      	add	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	4a29      	ldr	r2, [pc, #164]	; (8001318 <xTaskGenericNotifyFromISR+0x2b4>)
 8001274:	441a      	add	r2, r3
 8001276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001278:	615a      	str	r2, [r3, #20]
 800127a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800127c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800127e:	4926      	ldr	r1, [pc, #152]	; (8001318 <xTaskGenericNotifyFromISR+0x2b4>)
 8001280:	4613      	mov	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4413      	add	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	440b      	add	r3, r1
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	1c59      	adds	r1, r3, #1
 800128e:	4822      	ldr	r0, [pc, #136]	; (8001318 <xTaskGenericNotifyFromISR+0x2b4>)
 8001290:	4613      	mov	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4403      	add	r3, r0
 800129a:	6019      	str	r1, [r3, #0]
 800129c:	e01b      	b.n	80012d6 <xTaskGenericNotifyFromISR+0x272>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800129e:	4b1f      	ldr	r3, [pc, #124]	; (800131c <xTaskGenericNotifyFromISR+0x2b8>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	637b      	str	r3, [r7, #52]	; 0x34
 80012a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012a8:	61da      	str	r2, [r3, #28]
 80012aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ac:	689a      	ldr	r2, [r3, #8]
 80012ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012b0:	621a      	str	r2, [r3, #32]
 80012b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80012b8:	3218      	adds	r2, #24
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012be:	f103 0218 	add.w	r2, r3, #24
 80012c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012c8:	4a14      	ldr	r2, [pc, #80]	; (800131c <xTaskGenericNotifyFromISR+0x2b8>)
 80012ca:	629a      	str	r2, [r3, #40]	; 0x28
 80012cc:	4b13      	ldr	r3, [pc, #76]	; (800131c <xTaskGenericNotifyFromISR+0x2b8>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	3301      	adds	r3, #1
 80012d2:	4a12      	ldr	r2, [pc, #72]	; (800131c <xTaskGenericNotifyFromISR+0x2b8>)
 80012d4:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80012d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012da:	4b11      	ldr	r3, [pc, #68]	; (8001320 <xTaskGenericNotifyFromISR+0x2bc>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d908      	bls.n	80012f6 <xTaskGenericNotifyFromISR+0x292>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 80012e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d002      	beq.n	80012f0 <xTaskGenericNotifyFromISR+0x28c>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 80012ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012ec:	2201      	movs	r2, #1
 80012ee:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <xTaskGenericNotifyFromISR+0x2c0>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012f8:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001300:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8001302:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 8001304:	4618      	mov	r0, r3
 8001306:	3748      	adds	r7, #72	; 0x48
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000178 	.word	0x20000178
 8001310:	2000019c 	.word	0x2000019c
 8001314:	2000017c 	.word	0x2000017c
 8001318:	20000078 	.word	0x20000078
 800131c:	20000134 	.word	0x20000134
 8001320:	20000074 	.word	0x20000074
 8001324:	20000188 	.word	0x20000188

08001328 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001332:	4b36      	ldr	r3, [pc, #216]	; (800140c <prvAddCurrentTaskToDelayedList+0xe4>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001338:	4b35      	ldr	r3, [pc, #212]	; (8001410 <prvAddCurrentTaskToDelayedList+0xe8>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	3304      	adds	r3, #4
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff f94a 	bl	80005d8 <uxListRemove>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d10b      	bne.n	8001362 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800134a:	4b31      	ldr	r3, [pc, #196]	; (8001410 <prvAddCurrentTaskToDelayedList+0xe8>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001350:	2201      	movs	r2, #1
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43da      	mvns	r2, r3
 8001358:	4b2e      	ldr	r3, [pc, #184]	; (8001414 <prvAddCurrentTaskToDelayedList+0xec>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4013      	ands	r3, r2
 800135e:	4a2d      	ldr	r2, [pc, #180]	; (8001414 <prvAddCurrentTaskToDelayedList+0xec>)
 8001360:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001368:	d124      	bne.n	80013b4 <prvAddCurrentTaskToDelayedList+0x8c>
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d021      	beq.n	80013b4 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001370:	4b29      	ldr	r3, [pc, #164]	; (8001418 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	4b26      	ldr	r3, [pc, #152]	; (8001410 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	4b24      	ldr	r3, [pc, #144]	; (8001410 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	6892      	ldr	r2, [r2, #8]
 8001386:	60da      	str	r2, [r3, #12]
 8001388:	4b21      	ldr	r3, [pc, #132]	; (8001410 <prvAddCurrentTaskToDelayedList+0xe8>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	3204      	adds	r2, #4
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	4b1e      	ldr	r3, [pc, #120]	; (8001410 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	1d1a      	adds	r2, r3, #4
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	4b1c      	ldr	r3, [pc, #112]	; (8001410 <prvAddCurrentTaskToDelayedList+0xe8>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a1d      	ldr	r2, [pc, #116]	; (8001418 <prvAddCurrentTaskToDelayedList+0xf0>)
 80013a4:	615a      	str	r2, [r3, #20]
 80013a6:	4b1c      	ldr	r3, [pc, #112]	; (8001418 <prvAddCurrentTaskToDelayedList+0xf0>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	3301      	adds	r3, #1
 80013ac:	4a1a      	ldr	r2, [pc, #104]	; (8001418 <prvAddCurrentTaskToDelayedList+0xf0>)
 80013ae:	6013      	str	r3, [r2, #0]
 80013b0:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80013b2:	e026      	b.n	8001402 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80013b4:	697a      	ldr	r2, [r7, #20]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80013bc:	4b14      	ldr	r3, [pc, #80]	; (8001410 <prvAddCurrentTaskToDelayedList+0xe8>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	68fa      	ldr	r2, [r7, #12]
 80013c2:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80013c4:	68fa      	ldr	r2, [r7, #12]
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d209      	bcs.n	80013e0 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80013cc:	4b13      	ldr	r3, [pc, #76]	; (800141c <prvAddCurrentTaskToDelayedList+0xf4>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <prvAddCurrentTaskToDelayedList+0xe8>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	3304      	adds	r3, #4
 80013d6:	4619      	mov	r1, r3
 80013d8:	4610      	mov	r0, r2
 80013da:	f7ff f8c4 	bl	8000566 <vListInsert>
}
 80013de:	e010      	b.n	8001402 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80013e0:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <prvAddCurrentTaskToDelayedList+0xf8>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <prvAddCurrentTaskToDelayedList+0xe8>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	3304      	adds	r3, #4
 80013ea:	4619      	mov	r1, r3
 80013ec:	4610      	mov	r0, r2
 80013ee:	f7ff f8ba 	bl	8000566 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80013f2:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <prvAddCurrentTaskToDelayedList+0xfc>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d202      	bcs.n	8001402 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80013fc:	4a09      	ldr	r2, [pc, #36]	; (8001424 <prvAddCurrentTaskToDelayedList+0xfc>)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6013      	str	r3, [r2, #0]
}
 8001402:	bf00      	nop
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000178 	.word	0x20000178
 8001410:	20000074 	.word	0x20000074
 8001414:	2000017c 	.word	0x2000017c
 8001418:	20000160 	.word	0x20000160
 800141c:	20000130 	.word	0x20000130
 8001420:	2000012c 	.word	0x2000012c
 8001424:	20000194 	.word	0x20000194

08001428 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	3b04      	subs	r3, #4
 8001438:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001440:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	3b04      	subs	r3, #4
 8001446:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	f023 0201 	bic.w	r2, r3, #1
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	3b04      	subs	r3, #4
 8001456:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001458:	4a0c      	ldr	r2, [pc, #48]	; (800148c <pxPortInitialiseStack+0x64>)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	3b14      	subs	r3, #20
 8001462:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	3b04      	subs	r3, #4
 800146e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f06f 0202 	mvn.w	r2, #2
 8001476:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	3b20      	subs	r3, #32
 800147c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800147e:	68fb      	ldr	r3, [r7, #12]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	08001491 	.word	0x08001491

08001490 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800149a:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <prvTaskExitError+0x54>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a2:	d00a      	beq.n	80014ba <prvTaskExitError+0x2a>
        __asm volatile
 80014a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014a8:	f383 8811 	msr	BASEPRI, r3
 80014ac:	f3bf 8f6f 	isb	sy
 80014b0:	f3bf 8f4f 	dsb	sy
 80014b4:	60fb      	str	r3, [r7, #12]
    }
 80014b6:	bf00      	nop
 80014b8:	e7fe      	b.n	80014b8 <prvTaskExitError+0x28>
        __asm volatile
 80014ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014be:	f383 8811 	msr	BASEPRI, r3
 80014c2:	f3bf 8f6f 	isb	sy
 80014c6:	f3bf 8f4f 	dsb	sy
 80014ca:	60bb      	str	r3, [r7, #8]
    }
 80014cc:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80014ce:	bf00      	nop
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d0fc      	beq.n	80014d0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80014d6:	bf00      	nop
 80014d8:	bf00      	nop
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	20000004 	.word	0x20000004
	...

080014f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80014f0:	4b07      	ldr	r3, [pc, #28]	; (8001510 <pxCurrentTCBConst2>)
 80014f2:	6819      	ldr	r1, [r3, #0]
 80014f4:	6808      	ldr	r0, [r1, #0]
 80014f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014fa:	f380 8809 	msr	PSP, r0
 80014fe:	f3bf 8f6f 	isb	sy
 8001502:	f04f 0000 	mov.w	r0, #0
 8001506:	f380 8811 	msr	BASEPRI, r0
 800150a:	4770      	bx	lr
 800150c:	f3af 8000 	nop.w

08001510 <pxCurrentTCBConst2>:
 8001510:	20000074 	.word	0x20000074
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001514:	bf00      	nop
 8001516:	bf00      	nop

08001518 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8001518:	4808      	ldr	r0, [pc, #32]	; (800153c <prvPortStartFirstTask+0x24>)
 800151a:	6800      	ldr	r0, [r0, #0]
 800151c:	6800      	ldr	r0, [r0, #0]
 800151e:	f380 8808 	msr	MSP, r0
 8001522:	f04f 0000 	mov.w	r0, #0
 8001526:	f380 8814 	msr	CONTROL, r0
 800152a:	b662      	cpsie	i
 800152c:	b661      	cpsie	f
 800152e:	f3bf 8f4f 	dsb	sy
 8001532:	f3bf 8f6f 	isb	sy
 8001536:	df00      	svc	0
 8001538:	bf00      	nop
 800153a:	0000      	.short	0x0000
 800153c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001540:	bf00      	nop
 8001542:	bf00      	nop

08001544 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800154a:	4b46      	ldr	r3, [pc, #280]	; (8001664 <xPortStartScheduler+0x120>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a46      	ldr	r2, [pc, #280]	; (8001668 <xPortStartScheduler+0x124>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d10a      	bne.n	800156a <xPortStartScheduler+0x26>
        __asm volatile
 8001554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001558:	f383 8811 	msr	BASEPRI, r3
 800155c:	f3bf 8f6f 	isb	sy
 8001560:	f3bf 8f4f 	dsb	sy
 8001564:	613b      	str	r3, [r7, #16]
    }
 8001566:	bf00      	nop
 8001568:	e7fe      	b.n	8001568 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800156a:	4b3e      	ldr	r3, [pc, #248]	; (8001664 <xPortStartScheduler+0x120>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a3f      	ldr	r2, [pc, #252]	; (800166c <xPortStartScheduler+0x128>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d10a      	bne.n	800158a <xPortStartScheduler+0x46>
        __asm volatile
 8001574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001578:	f383 8811 	msr	BASEPRI, r3
 800157c:	f3bf 8f6f 	isb	sy
 8001580:	f3bf 8f4f 	dsb	sy
 8001584:	60fb      	str	r3, [r7, #12]
    }
 8001586:	bf00      	nop
 8001588:	e7fe      	b.n	8001588 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800158a:	4b39      	ldr	r3, [pc, #228]	; (8001670 <xPortStartScheduler+0x12c>)
 800158c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	b2db      	uxtb	r3, r3
 8001594:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	22ff      	movs	r2, #255	; 0xff
 800159a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80015a4:	78fb      	ldrb	r3, [r7, #3]
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	4b31      	ldr	r3, [pc, #196]	; (8001674 <xPortStartScheduler+0x130>)
 80015b0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80015b2:	4b31      	ldr	r3, [pc, #196]	; (8001678 <xPortStartScheduler+0x134>)
 80015b4:	2207      	movs	r2, #7
 80015b6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80015b8:	e009      	b.n	80015ce <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 80015ba:	4b2f      	ldr	r3, [pc, #188]	; (8001678 <xPortStartScheduler+0x134>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	3b01      	subs	r3, #1
 80015c0:	4a2d      	ldr	r2, [pc, #180]	; (8001678 <xPortStartScheduler+0x134>)
 80015c2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80015c4:	78fb      	ldrb	r3, [r7, #3]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80015ce:	78fb      	ldrb	r3, [r7, #3]
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015d6:	2b80      	cmp	r3, #128	; 0x80
 80015d8:	d0ef      	beq.n	80015ba <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80015da:	4b27      	ldr	r3, [pc, #156]	; (8001678 <xPortStartScheduler+0x134>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f1c3 0307 	rsb	r3, r3, #7
 80015e2:	2b04      	cmp	r3, #4
 80015e4:	d00a      	beq.n	80015fc <xPortStartScheduler+0xb8>
        __asm volatile
 80015e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015ea:	f383 8811 	msr	BASEPRI, r3
 80015ee:	f3bf 8f6f 	isb	sy
 80015f2:	f3bf 8f4f 	dsb	sy
 80015f6:	60bb      	str	r3, [r7, #8]
    }
 80015f8:	bf00      	nop
 80015fa:	e7fe      	b.n	80015fa <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80015fc:	4b1e      	ldr	r3, [pc, #120]	; (8001678 <xPortStartScheduler+0x134>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	021b      	lsls	r3, r3, #8
 8001602:	4a1d      	ldr	r2, [pc, #116]	; (8001678 <xPortStartScheduler+0x134>)
 8001604:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001606:	4b1c      	ldr	r3, [pc, #112]	; (8001678 <xPortStartScheduler+0x134>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800160e:	4a1a      	ldr	r2, [pc, #104]	; (8001678 <xPortStartScheduler+0x134>)
 8001610:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	b2da      	uxtb	r2, r3
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800161a:	4b18      	ldr	r3, [pc, #96]	; (800167c <xPortStartScheduler+0x138>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a17      	ldr	r2, [pc, #92]	; (800167c <xPortStartScheduler+0x138>)
 8001620:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001624:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001626:	4b15      	ldr	r3, [pc, #84]	; (800167c <xPortStartScheduler+0x138>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a14      	ldr	r2, [pc, #80]	; (800167c <xPortStartScheduler+0x138>)
 800162c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001630:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001632:	f000 f8db 	bl	80017ec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001636:	4b12      	ldr	r3, [pc, #72]	; (8001680 <xPortStartScheduler+0x13c>)
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800163c:	f000 f8fa 	bl	8001834 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001640:	4b10      	ldr	r3, [pc, #64]	; (8001684 <xPortStartScheduler+0x140>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a0f      	ldr	r2, [pc, #60]	; (8001684 <xPortStartScheduler+0x140>)
 8001646:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800164a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800164c:	f7ff ff64 	bl	8001518 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001650:	f7ff fbfa 	bl	8000e48 <vTaskSwitchContext>
    prvTaskExitError();
 8001654:	f7ff ff1c 	bl	8001490 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	e000ed00 	.word	0xe000ed00
 8001668:	410fc271 	.word	0x410fc271
 800166c:	410fc270 	.word	0x410fc270
 8001670:	e000e400 	.word	0xe000e400
 8001674:	200001a0 	.word	0x200001a0
 8001678:	200001a4 	.word	0x200001a4
 800167c:	e000ed20 	.word	0xe000ed20
 8001680:	20000004 	.word	0x20000004
 8001684:	e000ef34 	.word	0xe000ef34

08001688 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
        __asm volatile
 800168e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001692:	f383 8811 	msr	BASEPRI, r3
 8001696:	f3bf 8f6f 	isb	sy
 800169a:	f3bf 8f4f 	dsb	sy
 800169e:	607b      	str	r3, [r7, #4]
    }
 80016a0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80016a2:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <vPortEnterCritical+0x58>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	3301      	adds	r3, #1
 80016a8:	4a0d      	ldr	r2, [pc, #52]	; (80016e0 <vPortEnterCritical+0x58>)
 80016aa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80016ac:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <vPortEnterCritical+0x58>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d10f      	bne.n	80016d4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <vPortEnterCritical+0x5c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00a      	beq.n	80016d4 <vPortEnterCritical+0x4c>
        __asm volatile
 80016be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016c2:	f383 8811 	msr	BASEPRI, r3
 80016c6:	f3bf 8f6f 	isb	sy
 80016ca:	f3bf 8f4f 	dsb	sy
 80016ce:	603b      	str	r3, [r7, #0]
    }
 80016d0:	bf00      	nop
 80016d2:	e7fe      	b.n	80016d2 <vPortEnterCritical+0x4a>
    }
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	20000004 	.word	0x20000004
 80016e4:	e000ed04 	.word	0xe000ed04

080016e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80016ee:	4b12      	ldr	r3, [pc, #72]	; (8001738 <vPortExitCritical+0x50>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d10a      	bne.n	800170c <vPortExitCritical+0x24>
        __asm volatile
 80016f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016fa:	f383 8811 	msr	BASEPRI, r3
 80016fe:	f3bf 8f6f 	isb	sy
 8001702:	f3bf 8f4f 	dsb	sy
 8001706:	607b      	str	r3, [r7, #4]
    }
 8001708:	bf00      	nop
 800170a:	e7fe      	b.n	800170a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800170c:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <vPortExitCritical+0x50>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	3b01      	subs	r3, #1
 8001712:	4a09      	ldr	r2, [pc, #36]	; (8001738 <vPortExitCritical+0x50>)
 8001714:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001716:	4b08      	ldr	r3, [pc, #32]	; (8001738 <vPortExitCritical+0x50>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d105      	bne.n	800172a <vPortExitCritical+0x42>
 800171e:	2300      	movs	r3, #0
 8001720:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	f383 8811 	msr	BASEPRI, r3
    }
 8001728:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	20000004 	.word	0x20000004
 800173c:	00000000 	.word	0x00000000

08001740 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001740:	f3ef 8009 	mrs	r0, PSP
 8001744:	f3bf 8f6f 	isb	sy
 8001748:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <pxCurrentTCBConst>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	f01e 0f10 	tst.w	lr, #16
 8001750:	bf08      	it	eq
 8001752:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001756:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800175a:	6010      	str	r0, [r2, #0]
 800175c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001760:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001764:	f380 8811 	msr	BASEPRI, r0
 8001768:	f3bf 8f4f 	dsb	sy
 800176c:	f3bf 8f6f 	isb	sy
 8001770:	f7ff fb6a 	bl	8000e48 <vTaskSwitchContext>
 8001774:	f04f 0000 	mov.w	r0, #0
 8001778:	f380 8811 	msr	BASEPRI, r0
 800177c:	bc09      	pop	{r0, r3}
 800177e:	6819      	ldr	r1, [r3, #0]
 8001780:	6808      	ldr	r0, [r1, #0]
 8001782:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001786:	f01e 0f10 	tst.w	lr, #16
 800178a:	bf08      	it	eq
 800178c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001790:	f380 8809 	msr	PSP, r0
 8001794:	f3bf 8f6f 	isb	sy
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	f3af 8000 	nop.w

080017a0 <pxCurrentTCBConst>:
 80017a0:	20000074 	.word	0x20000074
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80017a4:	bf00      	nop
 80017a6:	bf00      	nop

080017a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
        __asm volatile
 80017ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017b2:	f383 8811 	msr	BASEPRI, r3
 80017b6:	f3bf 8f6f 	isb	sy
 80017ba:	f3bf 8f4f 	dsb	sy
 80017be:	607b      	str	r3, [r7, #4]
    }
 80017c0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80017c2:	f7ff fa2b 	bl	8000c1c <xTaskIncrementTick>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <SysTick_Handler+0x40>)
 80017ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	2300      	movs	r3, #0
 80017d6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	f383 8811 	msr	BASEPRI, r3
    }
 80017de:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	e000ed04 	.word	0xe000ed04

080017ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80017f0:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <vPortSetupTimerInterrupt+0x34>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80017f6:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <vPortSetupTimerInterrupt+0x38>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80017fc:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <vPortSetupTimerInterrupt+0x3c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a0a      	ldr	r2, [pc, #40]	; (800182c <vPortSetupTimerInterrupt+0x40>)
 8001802:	fba2 2303 	umull	r2, r3, r2, r3
 8001806:	099b      	lsrs	r3, r3, #6
 8001808:	4a09      	ldr	r2, [pc, #36]	; (8001830 <vPortSetupTimerInterrupt+0x44>)
 800180a:	3b01      	subs	r3, #1
 800180c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800180e:	4b04      	ldr	r3, [pc, #16]	; (8001820 <vPortSetupTimerInterrupt+0x34>)
 8001810:	2207      	movs	r2, #7
 8001812:	601a      	str	r2, [r3, #0]
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000e010 	.word	0xe000e010
 8001824:	e000e018 	.word	0xe000e018
 8001828:	2000004c 	.word	0x2000004c
 800182c:	10624dd3 	.word	0x10624dd3
 8001830:	e000e014 	.word	0xe000e014

08001834 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8001834:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001844 <vPortEnableVFP+0x10>
 8001838:	6801      	ldr	r1, [r0, #0]
 800183a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800183e:	6001      	str	r1, [r0, #0]
 8001840:	4770      	bx	lr
 8001842:	0000      	.short	0x0000
 8001844:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8001848:	bf00      	nop
 800184a:	bf00      	nop

0800184c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8001852:	f3ef 8305 	mrs	r3, IPSR
 8001856:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2b0f      	cmp	r3, #15
 800185c:	d914      	bls.n	8001888 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800185e:	4a17      	ldr	r2, [pc, #92]	; (80018bc <vPortValidateInterruptPriority+0x70>)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	4413      	add	r3, r2
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001868:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <vPortValidateInterruptPriority+0x74>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	7afa      	ldrb	r2, [r7, #11]
 800186e:	429a      	cmp	r2, r3
 8001870:	d20a      	bcs.n	8001888 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8001872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001876:	f383 8811 	msr	BASEPRI, r3
 800187a:	f3bf 8f6f 	isb	sy
 800187e:	f3bf 8f4f 	dsb	sy
 8001882:	607b      	str	r3, [r7, #4]
    }
 8001884:	bf00      	nop
 8001886:	e7fe      	b.n	8001886 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001888:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <vPortValidateInterruptPriority+0x78>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001890:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <vPortValidateInterruptPriority+0x7c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	429a      	cmp	r2, r3
 8001896:	d90a      	bls.n	80018ae <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8001898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800189c:	f383 8811 	msr	BASEPRI, r3
 80018a0:	f3bf 8f6f 	isb	sy
 80018a4:	f3bf 8f4f 	dsb	sy
 80018a8:	603b      	str	r3, [r7, #0]
    }
 80018aa:	bf00      	nop
 80018ac:	e7fe      	b.n	80018ac <vPortValidateInterruptPriority+0x60>
    }
 80018ae:	bf00      	nop
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	e000e3f0 	.word	0xe000e3f0
 80018c0:	200001a0 	.word	0x200001a0
 80018c4:	e000ed0c 	.word	0xe000ed0c
 80018c8:	200001a4 	.word	0x200001a4

080018cc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08a      	sub	sp, #40	; 0x28
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80018d8:	f7ff f886 	bl	80009e8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80018dc:	4b53      	ldr	r3, [pc, #332]	; (8001a2c <pvPortMalloc+0x160>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d101      	bne.n	80018e8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80018e4:	f000 f908 	bl	8001af8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d012      	beq.n	8001914 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80018ee:	2208      	movs	r2, #8
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	3308      	adds	r3, #8
 80018fa:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	43db      	mvns	r3, r3
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	429a      	cmp	r2, r3
 8001904:	d804      	bhi.n	8001910 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	4413      	add	r3, r2
 800190c:	607b      	str	r3, [r7, #4]
 800190e:	e001      	b.n	8001914 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	db70      	blt.n	80019fc <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d06d      	beq.n	80019fc <pvPortMalloc+0x130>
 8001920:	4b43      	ldr	r3, [pc, #268]	; (8001a30 <pvPortMalloc+0x164>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	429a      	cmp	r2, r3
 8001928:	d868      	bhi.n	80019fc <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800192a:	4b42      	ldr	r3, [pc, #264]	; (8001a34 <pvPortMalloc+0x168>)
 800192c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800192e:	4b41      	ldr	r3, [pc, #260]	; (8001a34 <pvPortMalloc+0x168>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001934:	e004      	b.n	8001940 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	429a      	cmp	r2, r3
 8001948:	d903      	bls.n	8001952 <pvPortMalloc+0x86>
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f1      	bne.n	8001936 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001952:	4b36      	ldr	r3, [pc, #216]	; (8001a2c <pvPortMalloc+0x160>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001958:	429a      	cmp	r2, r3
 800195a:	d04f      	beq.n	80019fc <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800195c:	6a3b      	ldr	r3, [r7, #32]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2208      	movs	r2, #8
 8001962:	4413      	add	r3, r2
 8001964:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	6a3b      	ldr	r3, [r7, #32]
 800196c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	1ad2      	subs	r2, r2, r3
 8001976:	2308      	movs	r3, #8
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	429a      	cmp	r2, r3
 800197c:	d91f      	bls.n	80019be <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800197e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4413      	add	r3, r2
 8001984:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	2b00      	cmp	r3, #0
 800198e:	d00a      	beq.n	80019a6 <pvPortMalloc+0xda>
        __asm volatile
 8001990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001994:	f383 8811 	msr	BASEPRI, r3
 8001998:	f3bf 8f6f 	isb	sy
 800199c:	f3bf 8f4f 	dsb	sy
 80019a0:	613b      	str	r3, [r7, #16]
    }
 80019a2:	bf00      	nop
 80019a4:	e7fe      	b.n	80019a4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	1ad2      	subs	r2, r2, r3
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80019b8:	6978      	ldr	r0, [r7, #20]
 80019ba:	f000 f8f9 	bl	8001bb0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80019be:	4b1c      	ldr	r3, [pc, #112]	; (8001a30 <pvPortMalloc+0x164>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	4a19      	ldr	r2, [pc, #100]	; (8001a30 <pvPortMalloc+0x164>)
 80019ca:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80019cc:	4b18      	ldr	r3, [pc, #96]	; (8001a30 <pvPortMalloc+0x164>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <pvPortMalloc+0x16c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d203      	bcs.n	80019e0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80019d8:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <pvPortMalloc+0x164>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a16      	ldr	r2, [pc, #88]	; (8001a38 <pvPortMalloc+0x16c>)
 80019de:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80019e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80019e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ea:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80019f2:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <pvPortMalloc+0x170>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	3301      	adds	r3, #1
 80019f8:	4a10      	ldr	r2, [pc, #64]	; (8001a3c <pvPortMalloc+0x170>)
 80019fa:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80019fc:	f7ff f802 	bl	8000a04 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d00a      	beq.n	8001a20 <pvPortMalloc+0x154>
        __asm volatile
 8001a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a0e:	f383 8811 	msr	BASEPRI, r3
 8001a12:	f3bf 8f6f 	isb	sy
 8001a16:	f3bf 8f4f 	dsb	sy
 8001a1a:	60fb      	str	r3, [r7, #12]
    }
 8001a1c:	bf00      	nop
 8001a1e:	e7fe      	b.n	8001a1e <pvPortMalloc+0x152>
    return pvReturn;
 8001a20:	69fb      	ldr	r3, [r7, #28]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3728      	adds	r7, #40	; 0x28
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000d68 	.word	0x20000d68
 8001a30:	20000d6c 	.word	0x20000d6c
 8001a34:	20000d60 	.word	0x20000d60
 8001a38:	20000d70 	.word	0x20000d70
 8001a3c:	20000d74 	.word	0x20000d74

08001a40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d049      	beq.n	8001ae6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8001a52:	2308      	movs	r3, #8
 8001a54:	425b      	negs	r3, r3
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	4413      	add	r3, r2
 8001a5a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	db0a      	blt.n	8001a7e <vPortFree+0x3e>
        __asm volatile
 8001a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a6c:	f383 8811 	msr	BASEPRI, r3
 8001a70:	f3bf 8f6f 	isb	sy
 8001a74:	f3bf 8f4f 	dsb	sy
 8001a78:	60fb      	str	r3, [r7, #12]
    }
 8001a7a:	bf00      	nop
 8001a7c:	e7fe      	b.n	8001a7c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d00a      	beq.n	8001a9c <vPortFree+0x5c>
        __asm volatile
 8001a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a8a:	f383 8811 	msr	BASEPRI, r3
 8001a8e:	f3bf 8f6f 	isb	sy
 8001a92:	f3bf 8f4f 	dsb	sy
 8001a96:	60bb      	str	r3, [r7, #8]
    }
 8001a98:	bf00      	nop
 8001a9a:	e7fe      	b.n	8001a9a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	0fdb      	lsrs	r3, r3, #31
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d01c      	beq.n	8001ae6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d118      	bne.n	8001ae6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8001ac0:	f7fe ff92 	bl	80009e8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <vPortFree+0xb0>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4413      	add	r3, r2
 8001ace:	4a08      	ldr	r2, [pc, #32]	; (8001af0 <vPortFree+0xb0>)
 8001ad0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001ad2:	6938      	ldr	r0, [r7, #16]
 8001ad4:	f000 f86c 	bl	8001bb0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8001ad8:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <vPortFree+0xb4>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	3301      	adds	r3, #1
 8001ade:	4a05      	ldr	r2, [pc, #20]	; (8001af4 <vPortFree+0xb4>)
 8001ae0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8001ae2:	f7fe ff8f 	bl	8000a04 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8001ae6:	bf00      	nop
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000d6c 	.word	0x20000d6c
 8001af4:	20000d78 	.word	0x20000d78

08001af8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001afe:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001b02:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8001b04:	4b25      	ldr	r3, [pc, #148]	; (8001b9c <prvHeapInit+0xa4>)
 8001b06:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00c      	beq.n	8001b2c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	3307      	adds	r3, #7
 8001b16:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f023 0307 	bic.w	r3, r3, #7
 8001b1e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8001b20:	68ba      	ldr	r2, [r7, #8]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	4a1d      	ldr	r2, [pc, #116]	; (8001b9c <prvHeapInit+0xa4>)
 8001b28:	4413      	add	r3, r2
 8001b2a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001b30:	4a1b      	ldr	r2, [pc, #108]	; (8001ba0 <prvHeapInit+0xa8>)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8001b36:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <prvHeapInit+0xa8>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	4413      	add	r3, r2
 8001b42:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8001b44:	2208      	movs	r2, #8
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	1a9b      	subs	r3, r3, r2
 8001b4a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f023 0307 	bic.w	r3, r3, #7
 8001b52:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4a13      	ldr	r2, [pc, #76]	; (8001ba4 <prvHeapInit+0xac>)
 8001b58:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8001b5a:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <prvHeapInit+0xac>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8001b62:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <prvHeapInit+0xac>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	1ad2      	subs	r2, r2, r3
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001b78:	4b0a      	ldr	r3, [pc, #40]	; (8001ba4 <prvHeapInit+0xac>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	4a08      	ldr	r2, [pc, #32]	; (8001ba8 <prvHeapInit+0xb0>)
 8001b86:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	4a07      	ldr	r2, [pc, #28]	; (8001bac <prvHeapInit+0xb4>)
 8001b8e:	6013      	str	r3, [r2, #0]
}
 8001b90:	bf00      	nop
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	200001a8 	.word	0x200001a8
 8001ba0:	20000d60 	.word	0x20000d60
 8001ba4:	20000d68 	.word	0x20000d68
 8001ba8:	20000d70 	.word	0x20000d70
 8001bac:	20000d6c 	.word	0x20000d6c

08001bb0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001bb8:	4b28      	ldr	r3, [pc, #160]	; (8001c5c <prvInsertBlockIntoFreeList+0xac>)
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	e002      	b.n	8001bc4 <prvInsertBlockIntoFreeList+0x14>
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d8f7      	bhi.n	8001bbe <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	4413      	add	r3, r2
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d108      	bne.n	8001bf2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	685a      	ldr	r2, [r3, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	441a      	add	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	441a      	add	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d118      	bne.n	8001c38 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <prvInsertBlockIntoFreeList+0xb0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d00d      	beq.n	8001c2e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	441a      	add	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	e008      	b.n	8001c40 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <prvInsertBlockIntoFreeList+0xb0>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	e003      	b.n	8001c40 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d002      	beq.n	8001c4e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001c4e:	bf00      	nop
 8001c50:	3714      	adds	r7, #20
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	20000d60 	.word	0x20000d60
 8001c60:	20000d68 	.word	0x20000d68

08001c64 <ST7735_Reset>:


}

static void ST7735_Reset()
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  TFT_RES_L();
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2110      	movs	r1, #16
 8001c6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c70:	f003 fa1c 	bl	80050ac <HAL_GPIO_WritePin>
  HAL_Delay(20);
 8001c74:	2014      	movs	r0, #20
 8001c76:	f001 fec9 	bl	8003a0c <HAL_Delay>
  TFT_RES_H();
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	2110      	movs	r1, #16
 8001c7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c82:	f003 fa13 	bl	80050ac <HAL_GPIO_WritePin>
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
  TFT_DC_C();
 8001c96:	2200      	movs	r2, #0
 8001c98:	2104      	movs	r1, #4
 8001c9a:	4807      	ldr	r0, [pc, #28]	; (8001cb8 <ST7735_WriteCommand+0x2c>)
 8001c9c:	f003 fa06 	bl	80050ac <HAL_GPIO_WritePin>
#ifdef USE_SPI_DMA
  HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, &cmd, sizeof(cmd));
  //while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
#else
  HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001ca0:	1df9      	adds	r1, r7, #7
 8001ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	4804      	ldr	r0, [pc, #16]	; (8001cbc <ST7735_WriteCommand+0x30>)
 8001caa:	f006 fb8a 	bl	80083c2 <HAL_SPI_Transmit>
#endif
}
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	48000400 	.word	0x48000400
 8001cbc:	20000f28 	.word	0x20000f28

08001cc0 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  TFT_DC_D();
 8001cca:	2201      	movs	r2, #1
 8001ccc:	2104      	movs	r1, #4
 8001cce:	4807      	ldr	r0, [pc, #28]	; (8001cec <ST7735_WriteData+0x2c>)
 8001cd0:	f003 f9ec 	bl	80050ac <HAL_GPIO_WritePin>
#ifdef USE_SPI_DMA
  HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, buff, buff_size);
  while(hspi1.State == HAL_SPI_STATE_BUSY_TX);

#else
  HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cdc:	6879      	ldr	r1, [r7, #4]
 8001cde:	4804      	ldr	r0, [pc, #16]	; (8001cf0 <ST7735_WriteData+0x30>)
 8001ce0:	f006 fb6f 	bl	80083c2 <HAL_SPI_Transmit>
#endif
}
 8001ce4:	bf00      	nop
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	48000400 	.word	0x48000400
 8001cf0:	20000f28 	.word	0x20000f28

08001cf4 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	1c5a      	adds	r2, r3, #1
 8001d00:	607a      	str	r2, [r7, #4]
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	73fb      	strb	r3, [r7, #15]
    while(numCommands--)
 8001d06:	e034      	b.n	8001d72 <ST7735_ExecuteCommandList+0x7e>
    {
      uint8_t cmd = *addr++;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	1c5a      	adds	r2, r3, #1
 8001d0c:	607a      	str	r2, [r7, #4]
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8001d12:	7afb      	ldrb	r3, [r7, #11]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ffb9 	bl	8001c8c <ST7735_WriteCommand>

        numArgs = *addr++;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	1c5a      	adds	r2, r3, #1
 8001d1e:	607a      	str	r2, [r7, #4]
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8001d24:	7abb      	ldrb	r3, [r7, #10]
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d2c:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8001d2e:	7abb      	ldrb	r3, [r7, #10]
 8001d30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d34:	72bb      	strb	r3, [r7, #10]
        if(numArgs)
 8001d36:	7abb      	ldrb	r3, [r7, #10]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d008      	beq.n	8001d4e <ST7735_ExecuteCommandList+0x5a>
        {
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8001d3c:	7abb      	ldrb	r3, [r7, #10]
 8001d3e:	4619      	mov	r1, r3
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff ffbd 	bl	8001cc0 <ST7735_WriteData>
            addr += numArgs;
 8001d46:	7abb      	ldrb	r3, [r7, #10]
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	607b      	str	r3, [r7, #4]
        }

        if(ms)
 8001d4e:	89bb      	ldrh	r3, [r7, #12]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00e      	beq.n	8001d72 <ST7735_ExecuteCommandList+0x7e>
        {
            ms = *addr++;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	1c5a      	adds	r2, r3, #1
 8001d58:	607a      	str	r2, [r7, #4]
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8001d5e:	89bb      	ldrh	r3, [r7, #12]
 8001d60:	2bff      	cmp	r3, #255	; 0xff
 8001d62:	d102      	bne.n	8001d6a <ST7735_ExecuteCommandList+0x76>
 8001d64:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001d68:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8001d6a:	89bb      	ldrh	r3, [r7, #12]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f001 fe4d 	bl	8003a0c <HAL_Delay>
    while(numCommands--)
 8001d72:	7bfb      	ldrb	r3, [r7, #15]
 8001d74:	1e5a      	subs	r2, r3, #1
 8001d76:	73fa      	strb	r2, [r7, #15]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1c5      	bne.n	8001d08 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8001d7c:	bf00      	nop
 8001d7e:	bf00      	nop
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8001d88:	b590      	push	{r4, r7, lr}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4604      	mov	r4, r0
 8001d90:	4608      	mov	r0, r1
 8001d92:	4611      	mov	r1, r2
 8001d94:	461a      	mov	r2, r3
 8001d96:	4623      	mov	r3, r4
 8001d98:	71fb      	strb	r3, [r7, #7]
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	71bb      	strb	r3, [r7, #6]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	717b      	strb	r3, [r7, #5]
 8001da2:	4613      	mov	r3, r2
 8001da4:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001da6:	202a      	movs	r0, #42	; 0x2a
 8001da8:	f7ff ff70 	bl	8001c8c <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8001dac:	2300      	movs	r3, #0
 8001dae:	733b      	strb	r3, [r7, #12]
 8001db0:	4b17      	ldr	r3, [pc, #92]	; (8001e10 <ST7735_SetAddressWindow+0x88>)
 8001db2:	781a      	ldrb	r2, [r3, #0]
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	4413      	add	r3, r2
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	737b      	strb	r3, [r7, #13]
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	73bb      	strb	r3, [r7, #14]
 8001dc0:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <ST7735_SetAddressWindow+0x88>)
 8001dc2:	781a      	ldrb	r2, [r3, #0]
 8001dc4:	797b      	ldrb	r3, [r7, #5]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001dcc:	f107 030c 	add.w	r3, r7, #12
 8001dd0:	2104      	movs	r1, #4
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff ff74 	bl	8001cc0 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001dd8:	202b      	movs	r0, #43	; 0x2b
 8001dda:	f7ff ff57 	bl	8001c8c <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8001dde:	4b0d      	ldr	r3, [pc, #52]	; (8001e14 <ST7735_SetAddressWindow+0x8c>)
 8001de0:	781a      	ldrb	r2, [r3, #0]
 8001de2:	79bb      	ldrb	r3, [r7, #6]
 8001de4:	4413      	add	r3, r2
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8001dea:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <ST7735_SetAddressWindow+0x8c>)
 8001dec:	781a      	ldrb	r2, [r3, #0]
 8001dee:	793b      	ldrb	r3, [r7, #4]
 8001df0:	4413      	add	r3, r2
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001df6:	f107 030c 	add.w	r3, r7, #12
 8001dfa:	2104      	movs	r1, #4
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff ff5f 	bl	8001cc0 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001e02:	202c      	movs	r0, #44	; 0x2c
 8001e04:	f7ff ff42 	bl	8001c8c <ST7735_WriteCommand>
}
 8001e08:	bf00      	nop
 8001e0a:	3714      	adds	r7, #20
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd90      	pop	{r4, r7, pc}
 8001e10:	20000014 	.word	0x20000014
 8001e14:	20000015 	.word	0x20000015

08001e18 <ST7735_WriteChar>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001e18:	b082      	sub	sp, #8
 8001e1a:	b590      	push	{r4, r7, lr}
 8001e1c:	b089      	sub	sp, #36	; 0x24
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	637b      	str	r3, [r7, #52]	; 0x34
 8001e22:	4603      	mov	r3, r0
 8001e24:	80fb      	strh	r3, [r7, #6]
 8001e26:	460b      	mov	r3, r1
 8001e28:	80bb      	strh	r3, [r7, #4]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8001e2e:	88fb      	ldrh	r3, [r7, #6]
 8001e30:	b2d8      	uxtb	r0, r3
 8001e32:	88bb      	ldrh	r3, [r7, #4]
 8001e34:	b2d9      	uxtb	r1, r3
 8001e36:	88fb      	ldrh	r3, [r7, #6]
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001e3e:	4413      	add	r3, r2
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	3b01      	subs	r3, #1
 8001e44:	b2dc      	uxtb	r4, r3
 8001e46:	88bb      	ldrh	r3, [r7, #4]
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001e4e:	4413      	add	r3, r2
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	3b01      	subs	r3, #1
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	4622      	mov	r2, r4
 8001e58:	f7ff ff96 	bl	8001d88 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++)
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	61fb      	str	r3, [r7, #28]
 8001e60:	e043      	b.n	8001eea <ST7735_WriteChar+0xd2>
    {
        b = font.data[(ch - 32) * font.height + i];
 8001e62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e64:	78fb      	ldrb	r3, [r7, #3]
 8001e66:	3b20      	subs	r3, #32
 8001e68:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8001e6c:	fb01 f303 	mul.w	r3, r1, r3
 8001e70:	4619      	mov	r1, r3
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	440b      	add	r3, r1
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	4413      	add	r3, r2
 8001e7a:	881b      	ldrh	r3, [r3, #0]
 8001e7c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++)
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61bb      	str	r3, [r7, #24]
 8001e82:	e029      	b.n	8001ed8 <ST7735_WriteChar+0xc0>
        {
            if((b << j) & 0x8000)
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00e      	beq.n	8001eb2 <ST7735_WriteChar+0x9a>
            {
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001e94:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001e96:	0a1b      	lsrs	r3, r3, #8
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	743b      	strb	r3, [r7, #16]
 8001e9e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8001ea4:	f107 0310 	add.w	r3, r7, #16
 8001ea8:	2102      	movs	r1, #2
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff ff08 	bl	8001cc0 <ST7735_WriteData>
 8001eb0:	e00f      	b.n	8001ed2 <ST7735_WriteChar+0xba>
            }
            else
            {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001eb2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001eb6:	0a1b      	lsrs	r3, r3, #8
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	733b      	strb	r3, [r7, #12]
 8001ebe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8001ec6:	f107 030c 	add.w	r3, r7, #12
 8001eca:	2102      	movs	r1, #2
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff fef7 	bl	8001cc0 <ST7735_WriteData>
        for(j = 0; j < font.width; j++)
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	61bb      	str	r3, [r7, #24]
 8001ed8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001edc:	461a      	mov	r2, r3
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d3cf      	bcc.n	8001e84 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++)
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	61fb      	str	r3, [r7, #28]
 8001eea:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001eee:	461a      	mov	r2, r3
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d3b5      	bcc.n	8001e62 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8001ef6:	bf00      	nop
 8001ef8:	bf00      	nop
 8001efa:	3724      	adds	r7, #36	; 0x24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001f02:	b002      	add	sp, #8
 8001f04:	4770      	bx	lr
	...

08001f08 <ST7735_Init>:

void ST7735_Init()
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  //ST7735_GPIO_Init();
    TFT_CS_L();
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2104      	movs	r1, #4
 8001f10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f14:	f003 f8ca 	bl	80050ac <HAL_GPIO_WritePin>

    ST7735_Reset();
 8001f18:	f7ff fea4 	bl	8001c64 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8001f1c:	4808      	ldr	r0, [pc, #32]	; (8001f40 <ST7735_Init+0x38>)
 8001f1e:	f7ff fee9 	bl	8001cf4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8001f22:	4808      	ldr	r0, [pc, #32]	; (8001f44 <ST7735_Init+0x3c>)
 8001f24:	f7ff fee6 	bl	8001cf4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8001f28:	4807      	ldr	r0, [pc, #28]	; (8001f48 <ST7735_Init+0x40>)
 8001f2a:	f7ff fee3 	bl	8001cf4 <ST7735_ExecuteCommandList>
    TFT_CS_H();
 8001f2e:	2201      	movs	r2, #1
 8001f30:	2104      	movs	r1, #4
 8001f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f36:	f003 f8b9 	bl	80050ac <HAL_GPIO_WritePin>
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	0800acac 	.word	0x0800acac
 8001f44:	0800ace8 	.word	0x0800ace8
 8001f48:	0800acf8 	.word	0x0800acf8

08001f4c <ST7735_DrawString>:

    TFT_CS_H();
}

void ST7735_DrawString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b086      	sub	sp, #24
 8001f52:	af04      	add	r7, sp, #16
 8001f54:	603a      	str	r2, [r7, #0]
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	4603      	mov	r3, r0
 8001f5a:	80fb      	strh	r3, [r7, #6]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	80bb      	strh	r3, [r7, #4]
  TFT_CS_L();
 8001f60:	2200      	movs	r2, #0
 8001f62:	2104      	movs	r1, #4
 8001f64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f68:	f003 f8a0 	bl	80050ac <HAL_GPIO_WritePin>

    while(*str)
 8001f6c:	e033      	b.n	8001fd6 <ST7735_DrawString+0x8a>
    {
        if(x + font.width >= _width)
 8001f6e:	88fb      	ldrh	r3, [r7, #6]
 8001f70:	7d3a      	ldrb	r2, [r7, #20]
 8001f72:	4413      	add	r3, r2
 8001f74:	4a21      	ldr	r2, [pc, #132]	; (8001ffc <ST7735_DrawString+0xb0>)
 8001f76:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	db16      	blt.n	8001fac <ST7735_DrawString+0x60>
        {
            x = 0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8001f82:	7d7b      	ldrb	r3, [r7, #21]
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	88bb      	ldrh	r3, [r7, #4]
 8001f88:	4413      	add	r3, r2
 8001f8a:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height)
 8001f8c:	88bb      	ldrh	r3, [r7, #4]
 8001f8e:	7d7a      	ldrb	r2, [r7, #21]
 8001f90:	4413      	add	r3, r2
 8001f92:	4a1b      	ldr	r2, [pc, #108]	; (8002000 <ST7735_DrawString+0xb4>)
 8001f94:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	da21      	bge.n	8001fe0 <ST7735_DrawString+0x94>
            {
                break;
            }

            if(*str == ' ')
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b20      	cmp	r3, #32
 8001fa2:	d103      	bne.n	8001fac <ST7735_DrawString+0x60>
            {
                // skip spaces in the beginning of the new line
                str++;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	603b      	str	r3, [r7, #0]
                continue;
 8001faa:	e014      	b.n	8001fd6 <ST7735_DrawString+0x8a>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	781a      	ldrb	r2, [r3, #0]
 8001fb0:	88b9      	ldrh	r1, [r7, #4]
 8001fb2:	88f8      	ldrh	r0, [r7, #6]
 8001fb4:	8c3b      	ldrh	r3, [r7, #32]
 8001fb6:	9302      	str	r3, [sp, #8]
 8001fb8:	8bbb      	ldrh	r3, [r7, #28]
 8001fba:	9301      	str	r3, [sp, #4]
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	f7ff ff29 	bl	8001e18 <ST7735_WriteChar>
        x += font.width;
 8001fc6:	7d3b      	ldrb	r3, [r7, #20]
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	88fb      	ldrh	r3, [r7, #6]
 8001fcc:	4413      	add	r3, r2
 8001fce:	80fb      	strh	r3, [r7, #6]
        str++;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	603b      	str	r3, [r7, #0]
    while(*str)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1c7      	bne.n	8001f6e <ST7735_DrawString+0x22>
 8001fde:	e000      	b.n	8001fe2 <ST7735_DrawString+0x96>
                break;
 8001fe0:	bf00      	nop
    }
    TFT_CS_H();
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	2104      	movs	r1, #4
 8001fe6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fea:	f003 f85f 	bl	80050ac <HAL_GPIO_WritePin>
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ff8:	b002      	add	sp, #8
 8001ffa:	4770      	bx	lr
 8001ffc:	20000012 	.word	0x20000012
 8002000:	20000010 	.word	0x20000010

08002004 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8002004:	b590      	push	{r4, r7, lr}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	4604      	mov	r4, r0
 800200c:	4608      	mov	r0, r1
 800200e:	4611      	mov	r1, r2
 8002010:	461a      	mov	r2, r3
 8002012:	4623      	mov	r3, r4
 8002014:	80fb      	strh	r3, [r7, #6]
 8002016:	4603      	mov	r3, r0
 8002018:	80bb      	strh	r3, [r7, #4]
 800201a:	460b      	mov	r3, r1
 800201c:	807b      	strh	r3, [r7, #2]
 800201e:	4613      	mov	r3, r2
 8002020:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= _width) || (y >= _height)) return;
 8002022:	88fb      	ldrh	r3, [r7, #6]
 8002024:	4a3b      	ldr	r2, [pc, #236]	; (8002114 <ST7735_FillRectangle+0x110>)
 8002026:	f9b2 2000 	ldrsh.w	r2, [r2]
 800202a:	4293      	cmp	r3, r2
 800202c:	da6e      	bge.n	800210c <ST7735_FillRectangle+0x108>
 800202e:	88bb      	ldrh	r3, [r7, #4]
 8002030:	4a39      	ldr	r2, [pc, #228]	; (8002118 <ST7735_FillRectangle+0x114>)
 8002032:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002036:	4293      	cmp	r3, r2
 8002038:	da68      	bge.n	800210c <ST7735_FillRectangle+0x108>
    if((x + w - 1) >= _width) w = _width - x;
 800203a:	88fa      	ldrh	r2, [r7, #6]
 800203c:	887b      	ldrh	r3, [r7, #2]
 800203e:	4413      	add	r3, r2
 8002040:	4a34      	ldr	r2, [pc, #208]	; (8002114 <ST7735_FillRectangle+0x110>)
 8002042:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002046:	4293      	cmp	r3, r2
 8002048:	dd06      	ble.n	8002058 <ST7735_FillRectangle+0x54>
 800204a:	4b32      	ldr	r3, [pc, #200]	; (8002114 <ST7735_FillRectangle+0x110>)
 800204c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002050:	b29a      	uxth	r2, r3
 8002052:	88fb      	ldrh	r3, [r7, #6]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8002058:	88ba      	ldrh	r2, [r7, #4]
 800205a:	883b      	ldrh	r3, [r7, #0]
 800205c:	4413      	add	r3, r2
 800205e:	4a2e      	ldr	r2, [pc, #184]	; (8002118 <ST7735_FillRectangle+0x114>)
 8002060:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002064:	4293      	cmp	r3, r2
 8002066:	dd06      	ble.n	8002076 <ST7735_FillRectangle+0x72>
 8002068:	4b2b      	ldr	r3, [pc, #172]	; (8002118 <ST7735_FillRectangle+0x114>)
 800206a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800206e:	b29a      	uxth	r2, r3
 8002070:	88bb      	ldrh	r3, [r7, #4]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	803b      	strh	r3, [r7, #0]

    TFT_CS_L();
 8002076:	2200      	movs	r2, #0
 8002078:	2104      	movs	r1, #4
 800207a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800207e:	f003 f815 	bl	80050ac <HAL_GPIO_WritePin>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002082:	88fb      	ldrh	r3, [r7, #6]
 8002084:	b2d8      	uxtb	r0, r3
 8002086:	88bb      	ldrh	r3, [r7, #4]
 8002088:	b2d9      	uxtb	r1, r3
 800208a:	88fb      	ldrh	r3, [r7, #6]
 800208c:	b2da      	uxtb	r2, r3
 800208e:	887b      	ldrh	r3, [r7, #2]
 8002090:	b2db      	uxtb	r3, r3
 8002092:	4413      	add	r3, r2
 8002094:	b2db      	uxtb	r3, r3
 8002096:	3b01      	subs	r3, #1
 8002098:	b2dc      	uxtb	r4, r3
 800209a:	88bb      	ldrh	r3, [r7, #4]
 800209c:	b2da      	uxtb	r2, r3
 800209e:	883b      	ldrh	r3, [r7, #0]
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	4413      	add	r3, r2
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	3b01      	subs	r3, #1
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	4622      	mov	r2, r4
 80020ac:	f7ff fe6c 	bl	8001d88 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80020b0:	8c3b      	ldrh	r3, [r7, #32]
 80020b2:	0a1b      	lsrs	r3, r3, #8
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	733b      	strb	r3, [r7, #12]
 80020ba:	8c3b      	ldrh	r3, [r7, #32]
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	737b      	strb	r3, [r7, #13]
    TFT_DC_D();
 80020c0:	2201      	movs	r2, #1
 80020c2:	2104      	movs	r1, #4
 80020c4:	4815      	ldr	r0, [pc, #84]	; (800211c <ST7735_FillRectangle+0x118>)
 80020c6:	f002 fff1 	bl	80050ac <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 80020ca:	883b      	ldrh	r3, [r7, #0]
 80020cc:	80bb      	strh	r3, [r7, #4]
 80020ce:	e013      	b.n	80020f8 <ST7735_FillRectangle+0xf4>
    {
        for(x = w; x > 0; x--)
 80020d0:	887b      	ldrh	r3, [r7, #2]
 80020d2:	80fb      	strh	r3, [r7, #6]
 80020d4:	e00a      	b.n	80020ec <ST7735_FillRectangle+0xe8>
        {
#ifdef USE_SPI_DMA
          HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, data, sizeof(data));
          //while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
#else
          HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80020d6:	f107 010c 	add.w	r1, r7, #12
 80020da:	f04f 33ff 	mov.w	r3, #4294967295
 80020de:	2202      	movs	r2, #2
 80020e0:	480f      	ldr	r0, [pc, #60]	; (8002120 <ST7735_FillRectangle+0x11c>)
 80020e2:	f006 f96e 	bl	80083c2 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--)
 80020e6:	88fb      	ldrh	r3, [r7, #6]
 80020e8:	3b01      	subs	r3, #1
 80020ea:	80fb      	strh	r3, [r7, #6]
 80020ec:	88fb      	ldrh	r3, [r7, #6]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f1      	bne.n	80020d6 <ST7735_FillRectangle+0xd2>
    for(y = h; y > 0; y--)
 80020f2:	88bb      	ldrh	r3, [r7, #4]
 80020f4:	3b01      	subs	r3, #1
 80020f6:	80bb      	strh	r3, [r7, #4]
 80020f8:	88bb      	ldrh	r3, [r7, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1e8      	bne.n	80020d0 <ST7735_FillRectangle+0xcc>
#endif
        }
    }
    TFT_CS_H();
 80020fe:	2201      	movs	r2, #1
 8002100:	2104      	movs	r1, #4
 8002102:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002106:	f002 ffd1 	bl	80050ac <HAL_GPIO_WritePin>
 800210a:	e000      	b.n	800210e <ST7735_FillRectangle+0x10a>
    if((x >= _width) || (y >= _height)) return;
 800210c:	bf00      	nop
}
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	bd90      	pop	{r4, r7, pc}
 8002114:	20000012 	.word	0x20000012
 8002118:	20000010 	.word	0x20000010
 800211c:	48000400 	.word	0x48000400
 8002120:	20000f28 	.word	0x20000f28

08002124 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af02      	add	r7, sp, #8
 800212a:	4603      	mov	r3, r0
 800212c:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, _width, _height, color);
 800212e:	4b09      	ldr	r3, [pc, #36]	; (8002154 <ST7735_FillScreen+0x30>)
 8002130:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002134:	b29a      	uxth	r2, r3
 8002136:	4b08      	ldr	r3, [pc, #32]	; (8002158 <ST7735_FillScreen+0x34>)
 8002138:	f9b3 3000 	ldrsh.w	r3, [r3]
 800213c:	b299      	uxth	r1, r3
 800213e:	88fb      	ldrh	r3, [r7, #6]
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	460b      	mov	r3, r1
 8002144:	2100      	movs	r1, #0
 8002146:	2000      	movs	r0, #0
 8002148:	f7ff ff5c 	bl	8002004 <ST7735_FillRectangle>
}
 800214c:	bf00      	nop
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20000012 	.word	0x20000012
 8002158:	20000010 	.word	0x20000010

0800215c <ST7735_Backlight_On>:
    ST7735_WriteCommand(invert ? ST7735_INVON : ST7735_INVOFF);
    TFT_CS_H();
}

void ST7735_Backlight_On(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  TFT_BL_H();
 8002160:	2201      	movs	r2, #1
 8002162:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002166:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800216a:	f002 ff9f 	bl	80050ac <HAL_GPIO_WritePin>
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
	...

08002174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002174:	b5b0      	push	{r4, r5, r7, lr}
 8002176:	b090      	sub	sp, #64	; 0x40
 8002178:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
BaseType_t flag;
BaseType_t flag_uart;
BaseType_t flag_tempSensor;
BaseType_t flag_lcd;
char msg_lcd2[] = "Hello World - Display on SPI TFT LCD!\n";
 800217a:	4b40      	ldr	r3, [pc, #256]	; (800227c <main+0x108>)
 800217c:	463c      	mov	r4, r7
 800217e:	461d      	mov	r5, r3
 8002180:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002182:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002184:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002186:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002188:	e895 0003 	ldmia.w	r5, {r0, r1}
 800218c:	6020      	str	r0, [r4, #0]
 800218e:	3404      	adds	r4, #4
 8002190:	8021      	strh	r1, [r4, #0]
 8002192:	3402      	adds	r4, #2
 8002194:	0c0b      	lsrs	r3, r1, #16
 8002196:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002198:	f001 fbff 	bl	800399a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800219c:	f000 f886 	bl	80022ac <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80021a0:	f000 f8e2 	bl	8002368 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021a4:	f000 fc34 	bl	8002a10 <MX_GPIO_Init>
  MX_ADC1_Init();
 80021a8:	f000 f90e 	bl	80023c8 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 80021ac:	f000 f970 	bl	8002490 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 80021b0:	f000 f9a6 	bl	8002500 <MX_I2C1_Init>
  MX_I2C2_Init();
 80021b4:	f000 f9e2 	bl	800257c <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 80021b8:	f000 fa1e 	bl	80025f8 <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 80021bc:	f000 fa72 	bl	80026a4 <MX_SPI1_Init>
  MX_SPI3_Init();
 80021c0:	f000 faae 	bl	8002720 <MX_SPI3_Init>
  MX_UART4_Init();
 80021c4:	f000 faea 	bl	800279c <MX_UART4_Init>
  MX_USART1_UART_Init();
 80021c8:	f000 fb34 	bl	8002834 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80021cc:	f000 fb7e 	bl	80028cc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80021d0:	f000 fbca 	bl	8002968 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 80021d4:	f000 fc14 	bl	8002a00 <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
 MyLED2_init();
 80021d8:	f000 fd6c 	bl	8002cb4 <MyLED2_init>
 MyButton_init();
 80021dc:	f000 fd9c 	bl	8002d18 <MyButton_init>
 MyUART1_init();
 80021e0:	f000 fde2 	bl	8002da8 <MyUART1_init>
 //BSP_TSENSOR_Init();
 ST7735_Init();
 80021e4:	f7ff fe90 	bl	8001f08 <ST7735_Init>
 ST7735_Backlight_On();
 80021e8:	f7ff ffb8 	bl	800215c <ST7735_Backlight_On>

ST7735_FillScreen(ST7735_RED);
 80021ec:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80021f0:	f7ff ff98 	bl	8002124 <ST7735_FillScreen>
//ST7735_DrawString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor);
ST7735_DrawString(0, 0, msg_lcd2, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80021f4:	4b22      	ldr	r3, [pc, #136]	; (8002280 <main+0x10c>)
 80021f6:	4639      	mov	r1, r7
 80021f8:	2200      	movs	r2, #0
 80021fa:	9202      	str	r2, [sp, #8]
 80021fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002200:	9201      	str	r2, [sp, #4]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	9200      	str	r2, [sp, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	460a      	mov	r2, r1
 800220a:	2100      	movs	r1, #0
 800220c:	2000      	movs	r0, #0
 800220e:	f7ff fe9d 	bl	8001f4c <ST7735_DrawString>



 HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), 1000);
 8002212:	481c      	ldr	r0, [pc, #112]	; (8002284 <main+0x110>)
 8002214:	f7fd fff4 	bl	8000200 <strlen>
 8002218:	4603      	mov	r3, r0
 800221a:	b29a      	uxth	r2, r3
 800221c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002220:	4918      	ldr	r1, [pc, #96]	; (8002284 <main+0x110>)
 8002222:	4819      	ldr	r0, [pc, #100]	; (8002288 <main+0x114>)
 8002224:	f006 feaa 	bl	8008f7c <HAL_UART_Transmit>

 flag = xTaskCreate(SOS_Transmit, "SOS_Transmit", 200, (void *) 300, 3, &pSOS_Transmit);
 8002228:	4b18      	ldr	r3, [pc, #96]	; (800228c <main+0x118>)
 800222a:	9301      	str	r3, [sp, #4]
 800222c:	2303      	movs	r3, #3
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002234:	22c8      	movs	r2, #200	; 0xc8
 8002236:	4916      	ldr	r1, [pc, #88]	; (8002290 <main+0x11c>)
 8002238:	4816      	ldr	r0, [pc, #88]	; (8002294 <main+0x120>)
 800223a:	f7fe f9f7 	bl	800062c <xTaskCreate>
 800223e:	62f8      	str	r0, [r7, #44]	; 0x2c
 if(flag!=pdPASS)
 8002240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002242:	2b01      	cmp	r3, #1
 8002244:	d001      	beq.n	800224a <main+0xd6>
 {
	 Error_Handler();
 8002246:	f000 fef3 	bl	8003030 <Error_Handler>
 }
 LastWakeTime=xTaskGetTickCount();
 800224a:	f7fe fcd7 	bl	8000bfc <xTaskGetTickCount>
 800224e:	4603      	mov	r3, r0
 8002250:	4a11      	ldr	r2, [pc, #68]	; (8002298 <main+0x124>)
 8002252:	6013      	str	r3, [r2, #0]
 if(flag_tempSensor!=pdPASS)
  {
 	 Error_Handler();
  }*/

 flag_lcd = xTaskCreate(LCDDisplay, "LCDDisplay", 200, "\r\nDisplaying on LCD!!!\r\n", 3, &pLCDDisplay);
 8002254:	4b11      	ldr	r3, [pc, #68]	; (800229c <main+0x128>)
 8002256:	9301      	str	r3, [sp, #4]
 8002258:	2303      	movs	r3, #3
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <main+0x12c>)
 800225e:	22c8      	movs	r2, #200	; 0xc8
 8002260:	4910      	ldr	r1, [pc, #64]	; (80022a4 <main+0x130>)
 8002262:	4811      	ldr	r0, [pc, #68]	; (80022a8 <main+0x134>)
 8002264:	f7fe f9e2 	bl	800062c <xTaskCreate>
 8002268:	62b8      	str	r0, [r7, #40]	; 0x28
  if(flag_lcd!=pdPASS)
 800226a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226c:	2b01      	cmp	r3, #1
 800226e:	d001      	beq.n	8002274 <main+0x100>
   {
  	 Error_Handler();
 8002270:	f000 fede 	bl	8003030 <Error_Handler>
   }
 //start Scheduler
 vTaskStartScheduler();
 8002274:	f7fe fb6c 	bl	8000950 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002278:	e7fe      	b.n	8002278 <main+0x104>
 800227a:	bf00      	nop
 800227c:	0800a4c4 	.word	0x0800a4c4
 8002280:	20000008 	.word	0x20000008
 8002284:	20000018 	.word	0x20000018
 8002288:	20001084 	.word	0x20001084
 800228c:	20000d7c 	.word	0x20000d7c
 8002290:	0800a48c 	.word	0x0800a48c
 8002294:	08002e69 	.word	0x08002e69
 8002298:	20000d80 	.word	0x20000d80
 800229c:	20000d8c 	.word	0x20000d8c
 80022a0:	0800a49c 	.word	0x0800a49c
 80022a4:	0800a4b8 	.word	0x0800a4b8
 80022a8:	08002f55 	.word	0x08002f55

080022ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b096      	sub	sp, #88	; 0x58
 80022b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022b2:	f107 0314 	add.w	r3, r7, #20
 80022b6:	2244      	movs	r2, #68	; 0x44
 80022b8:	2100      	movs	r1, #0
 80022ba:	4618      	mov	r0, r3
 80022bc:	f008 f8aa 	bl	800a414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022c0:	463b      	mov	r3, r7
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	605a      	str	r2, [r3, #4]
 80022c8:	609a      	str	r2, [r3, #8]
 80022ca:	60da      	str	r2, [r3, #12]
 80022cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80022ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80022d2:	f004 fafd 	bl	80068d0 <HAL_PWREx_ControlVoltageScaling>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80022dc:	f000 fea8 	bl	8003030 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80022e0:	f004 fac6 	bl	8006870 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80022e4:	4b1f      	ldr	r3, [pc, #124]	; (8002364 <SystemClock_Config+0xb8>)
 80022e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ea:	4a1e      	ldr	r2, [pc, #120]	; (8002364 <SystemClock_Config+0xb8>)
 80022ec:	f023 0318 	bic.w	r3, r3, #24
 80022f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 80022f4:	2316      	movs	r3, #22
 80022f6:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80022f8:	2301      	movs	r3, #1
 80022fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002300:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002302:	2340      	movs	r3, #64	; 0x40
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002306:	2301      	movs	r3, #1
 8002308:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800230a:	2300      	movs	r3, #0
 800230c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800230e:	2360      	movs	r3, #96	; 0x60
 8002310:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002312:	2300      	movs	r3, #0
 8002314:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002316:	f107 0314 	add.w	r3, r7, #20
 800231a:	4618      	mov	r0, r3
 800231c:	f004 fb7c 	bl	8006a18 <HAL_RCC_OscConfig>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8002326:	f000 fe83 	bl	8003030 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800232a:	230f      	movs	r3, #15
 800232c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800232e:	2301      	movs	r3, #1
 8002330:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002332:	2300      	movs	r3, #0
 8002334:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002336:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800233a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 800233c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002340:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002342:	463b      	mov	r3, r7
 8002344:	2100      	movs	r1, #0
 8002346:	4618      	mov	r0, r3
 8002348:	f004 ff80 	bl	800724c <HAL_RCC_ClockConfig>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002352:	f000 fe6d 	bl	8003030 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002356:	f005 fd99 	bl	8007e8c <HAL_RCCEx_EnableMSIPLLMode>
}
 800235a:	bf00      	nop
 800235c:	3758      	adds	r7, #88	; 0x58
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40021000 	.word	0x40021000

08002368 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b0a6      	sub	sp, #152	; 0x98
 800236c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800236e:	1d3b      	adds	r3, r7, #4
 8002370:	2294      	movs	r2, #148	; 0x94
 8002372:	2100      	movs	r1, #0
 8002374:	4618      	mov	r0, r3
 8002376:	f008 f84d 	bl	800a414 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 800237a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800237e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002380:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002384:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002388:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800238c:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800238e:	2301      	movs	r3, #1
 8002390:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002392:	2301      	movs	r3, #1
 8002394:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002396:	2318      	movs	r3, #24
 8002398:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800239a:	2302      	movs	r3, #2
 800239c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800239e:	2302      	movs	r3, #2
 80023a0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80023a2:	2302      	movs	r3, #2
 80023a4:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80023a6:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80023aa:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023ac:	1d3b      	adds	r3, r7, #4
 80023ae:	4618      	mov	r0, r3
 80023b0:	f005 fa3c 	bl	800782c <HAL_RCCEx_PeriphCLKConfig>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80023ba:	f000 fe39 	bl	8003030 <Error_Handler>
  }
}
 80023be:	bf00      	nop
 80023c0:	3798      	adds	r7, #152	; 0x98
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
	...

080023c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80023ce:	463b      	mov	r3, r7
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	60da      	str	r2, [r3, #12]
 80023da:	611a      	str	r2, [r3, #16]
 80023dc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80023de:	4b29      	ldr	r3, [pc, #164]	; (8002484 <MX_ADC1_Init+0xbc>)
 80023e0:	4a29      	ldr	r2, [pc, #164]	; (8002488 <MX_ADC1_Init+0xc0>)
 80023e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80023e4:	4b27      	ldr	r3, [pc, #156]	; (8002484 <MX_ADC1_Init+0xbc>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80023ea:	4b26      	ldr	r3, [pc, #152]	; (8002484 <MX_ADC1_Init+0xbc>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023f0:	4b24      	ldr	r3, [pc, #144]	; (8002484 <MX_ADC1_Init+0xbc>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80023f6:	4b23      	ldr	r3, [pc, #140]	; (8002484 <MX_ADC1_Init+0xbc>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80023fc:	4b21      	ldr	r3, [pc, #132]	; (8002484 <MX_ADC1_Init+0xbc>)
 80023fe:	2204      	movs	r2, #4
 8002400:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002402:	4b20      	ldr	r3, [pc, #128]	; (8002484 <MX_ADC1_Init+0xbc>)
 8002404:	2200      	movs	r2, #0
 8002406:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002408:	4b1e      	ldr	r3, [pc, #120]	; (8002484 <MX_ADC1_Init+0xbc>)
 800240a:	2200      	movs	r2, #0
 800240c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800240e:	4b1d      	ldr	r3, [pc, #116]	; (8002484 <MX_ADC1_Init+0xbc>)
 8002410:	2201      	movs	r2, #1
 8002412:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002414:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <MX_ADC1_Init+0xbc>)
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800241c:	4b19      	ldr	r3, [pc, #100]	; (8002484 <MX_ADC1_Init+0xbc>)
 800241e:	2200      	movs	r2, #0
 8002420:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002422:	4b18      	ldr	r3, [pc, #96]	; (8002484 <MX_ADC1_Init+0xbc>)
 8002424:	2200      	movs	r2, #0
 8002426:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002428:	4b16      	ldr	r3, [pc, #88]	; (8002484 <MX_ADC1_Init+0xbc>)
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002430:	4b14      	ldr	r3, [pc, #80]	; (8002484 <MX_ADC1_Init+0xbc>)
 8002432:	2200      	movs	r2, #0
 8002434:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002436:	4b13      	ldr	r3, [pc, #76]	; (8002484 <MX_ADC1_Init+0xbc>)
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800243e:	4811      	ldr	r0, [pc, #68]	; (8002484 <MX_ADC1_Init+0xbc>)
 8002440:	f001 fca8 	bl	8003d94 <HAL_ADC_Init>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800244a:	f000 fdf1 	bl	8003030 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800244e:	4b0f      	ldr	r3, [pc, #60]	; (800248c <MX_ADC1_Init+0xc4>)
 8002450:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002452:	2306      	movs	r3, #6
 8002454:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002456:	2300      	movs	r3, #0
 8002458:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800245a:	237f      	movs	r3, #127	; 0x7f
 800245c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800245e:	2304      	movs	r3, #4
 8002460:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002462:	2300      	movs	r3, #0
 8002464:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002466:	463b      	mov	r3, r7
 8002468:	4619      	mov	r1, r3
 800246a:	4806      	ldr	r0, [pc, #24]	; (8002484 <MX_ADC1_Init+0xbc>)
 800246c:	f001 fdd8 	bl	8004020 <HAL_ADC_ConfigChannel>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002476:	f000 fddb 	bl	8003030 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800247a:	bf00      	nop
 800247c:	3718      	adds	r7, #24
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000d90 	.word	0x20000d90
 8002488:	50040000 	.word	0x50040000
 800248c:	04300002 	.word	0x04300002

08002490 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8002494:	4b18      	ldr	r3, [pc, #96]	; (80024f8 <MX_DFSDM1_Init+0x68>)
 8002496:	4a19      	ldr	r2, [pc, #100]	; (80024fc <MX_DFSDM1_Init+0x6c>)
 8002498:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 800249a:	4b17      	ldr	r3, [pc, #92]	; (80024f8 <MX_DFSDM1_Init+0x68>)
 800249c:	2201      	movs	r2, #1
 800249e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80024a0:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <MX_DFSDM1_Init+0x68>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 80024a6:	4b14      	ldr	r3, [pc, #80]	; (80024f8 <MX_DFSDM1_Init+0x68>)
 80024a8:	2202      	movs	r2, #2
 80024aa:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80024ac:	4b12      	ldr	r3, [pc, #72]	; (80024f8 <MX_DFSDM1_Init+0x68>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80024b2:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <MX_DFSDM1_Init+0x68>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80024b8:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <MX_DFSDM1_Init+0x68>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80024be:	4b0e      	ldr	r3, [pc, #56]	; (80024f8 <MX_DFSDM1_Init+0x68>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80024c4:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <MX_DFSDM1_Init+0x68>)
 80024c6:	2204      	movs	r2, #4
 80024c8:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80024ca:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <MX_DFSDM1_Init+0x68>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80024d0:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <MX_DFSDM1_Init+0x68>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80024d6:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <MX_DFSDM1_Init+0x68>)
 80024d8:	2200      	movs	r2, #0
 80024da:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80024dc:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <MX_DFSDM1_Init+0x68>)
 80024de:	2200      	movs	r2, #0
 80024e0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80024e2:	4805      	ldr	r0, [pc, #20]	; (80024f8 <MX_DFSDM1_Init+0x68>)
 80024e4:	f002 fa7a 	bl	80049dc <HAL_DFSDM_ChannelInit>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 80024ee:	f000 fd9f 	bl	8003030 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20000df8 	.word	0x20000df8
 80024fc:	40016040 	.word	0x40016040

08002500 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002504:	4b1b      	ldr	r3, [pc, #108]	; (8002574 <MX_I2C1_Init+0x74>)
 8002506:	4a1c      	ldr	r2, [pc, #112]	; (8002578 <MX_I2C1_Init+0x78>)
 8002508:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800250a:	4b1a      	ldr	r3, [pc, #104]	; (8002574 <MX_I2C1_Init+0x74>)
 800250c:	f640 6214 	movw	r2, #3604	; 0xe14
 8002510:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002512:	4b18      	ldr	r3, [pc, #96]	; (8002574 <MX_I2C1_Init+0x74>)
 8002514:	2200      	movs	r2, #0
 8002516:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002518:	4b16      	ldr	r3, [pc, #88]	; (8002574 <MX_I2C1_Init+0x74>)
 800251a:	2201      	movs	r2, #1
 800251c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800251e:	4b15      	ldr	r3, [pc, #84]	; (8002574 <MX_I2C1_Init+0x74>)
 8002520:	2200      	movs	r2, #0
 8002522:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002524:	4b13      	ldr	r3, [pc, #76]	; (8002574 <MX_I2C1_Init+0x74>)
 8002526:	2200      	movs	r2, #0
 8002528:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800252a:	4b12      	ldr	r3, [pc, #72]	; (8002574 <MX_I2C1_Init+0x74>)
 800252c:	2200      	movs	r2, #0
 800252e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002530:	4b10      	ldr	r3, [pc, #64]	; (8002574 <MX_I2C1_Init+0x74>)
 8002532:	2200      	movs	r2, #0
 8002534:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002536:	4b0f      	ldr	r3, [pc, #60]	; (8002574 <MX_I2C1_Init+0x74>)
 8002538:	2200      	movs	r2, #0
 800253a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800253c:	480d      	ldr	r0, [pc, #52]	; (8002574 <MX_I2C1_Init+0x74>)
 800253e:	f002 fde5 	bl	800510c <HAL_I2C_Init>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002548:	f000 fd72 	bl	8003030 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800254c:	2100      	movs	r1, #0
 800254e:	4809      	ldr	r0, [pc, #36]	; (8002574 <MX_I2C1_Init+0x74>)
 8002550:	f003 fc21 	bl	8005d96 <HAL_I2CEx_ConfigAnalogFilter>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800255a:	f000 fd69 	bl	8003030 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800255e:	2100      	movs	r1, #0
 8002560:	4804      	ldr	r0, [pc, #16]	; (8002574 <MX_I2C1_Init+0x74>)
 8002562:	f003 fc63 	bl	8005e2c <HAL_I2CEx_ConfigDigitalFilter>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800256c:	f000 fd60 	bl	8003030 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002570:	bf00      	nop
 8002572:	bd80      	pop	{r7, pc}
 8002574:	20000e30 	.word	0x20000e30
 8002578:	40005400 	.word	0x40005400

0800257c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002580:	4b1b      	ldr	r3, [pc, #108]	; (80025f0 <MX_I2C2_Init+0x74>)
 8002582:	4a1c      	ldr	r2, [pc, #112]	; (80025f4 <MX_I2C2_Init+0x78>)
 8002584:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8002586:	4b1a      	ldr	r3, [pc, #104]	; (80025f0 <MX_I2C2_Init+0x74>)
 8002588:	f640 6214 	movw	r2, #3604	; 0xe14
 800258c:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800258e:	4b18      	ldr	r3, [pc, #96]	; (80025f0 <MX_I2C2_Init+0x74>)
 8002590:	2200      	movs	r2, #0
 8002592:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002594:	4b16      	ldr	r3, [pc, #88]	; (80025f0 <MX_I2C2_Init+0x74>)
 8002596:	2201      	movs	r2, #1
 8002598:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800259a:	4b15      	ldr	r3, [pc, #84]	; (80025f0 <MX_I2C2_Init+0x74>)
 800259c:	2200      	movs	r2, #0
 800259e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80025a0:	4b13      	ldr	r3, [pc, #76]	; (80025f0 <MX_I2C2_Init+0x74>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80025a6:	4b12      	ldr	r3, [pc, #72]	; (80025f0 <MX_I2C2_Init+0x74>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025ac:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <MX_I2C2_Init+0x74>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025b2:	4b0f      	ldr	r3, [pc, #60]	; (80025f0 <MX_I2C2_Init+0x74>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80025b8:	480d      	ldr	r0, [pc, #52]	; (80025f0 <MX_I2C2_Init+0x74>)
 80025ba:	f002 fda7 	bl	800510c <HAL_I2C_Init>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80025c4:	f000 fd34 	bl	8003030 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80025c8:	2100      	movs	r1, #0
 80025ca:	4809      	ldr	r0, [pc, #36]	; (80025f0 <MX_I2C2_Init+0x74>)
 80025cc:	f003 fbe3 	bl	8005d96 <HAL_I2CEx_ConfigAnalogFilter>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80025d6:	f000 fd2b 	bl	8003030 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80025da:	2100      	movs	r1, #0
 80025dc:	4804      	ldr	r0, [pc, #16]	; (80025f0 <MX_I2C2_Init+0x74>)
 80025de:	f003 fc25 	bl	8005e2c <HAL_I2CEx_ConfigDigitalFilter>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80025e8:	f000 fd22 	bl	8003030 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80025ec:	bf00      	nop
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	20000e84 	.word	0x20000e84
 80025f4:	40005800 	.word	0x40005800

080025f8 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 80025fe:	1d3b      	adds	r3, r7, #4
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	60da      	str	r2, [r3, #12]
 800260a:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 800260c:	4b23      	ldr	r3, [pc, #140]	; (800269c <MX_OCTOSPI1_Init+0xa4>)
 800260e:	4a24      	ldr	r2, [pc, #144]	; (80026a0 <MX_OCTOSPI1_Init+0xa8>)
 8002610:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8002612:	4b22      	ldr	r3, [pc, #136]	; (800269c <MX_OCTOSPI1_Init+0xa4>)
 8002614:	2201      	movs	r2, #1
 8002616:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8002618:	4b20      	ldr	r3, [pc, #128]	; (800269c <MX_OCTOSPI1_Init+0xa4>)
 800261a:	2200      	movs	r2, #0
 800261c:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 800261e:	4b1f      	ldr	r3, [pc, #124]	; (800269c <MX_OCTOSPI1_Init+0xa4>)
 8002620:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002624:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8002626:	4b1d      	ldr	r3, [pc, #116]	; (800269c <MX_OCTOSPI1_Init+0xa4>)
 8002628:	2220      	movs	r2, #32
 800262a:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 800262c:	4b1b      	ldr	r3, [pc, #108]	; (800269c <MX_OCTOSPI1_Init+0xa4>)
 800262e:	2201      	movs	r2, #1
 8002630:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8002632:	4b1a      	ldr	r3, [pc, #104]	; (800269c <MX_OCTOSPI1_Init+0xa4>)
 8002634:	2200      	movs	r2, #0
 8002636:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8002638:	4b18      	ldr	r3, [pc, #96]	; (800269c <MX_OCTOSPI1_Init+0xa4>)
 800263a:	2200      	movs	r2, #0
 800263c:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 800263e:	4b17      	ldr	r3, [pc, #92]	; (800269c <MX_OCTOSPI1_Init+0xa4>)
 8002640:	2201      	movs	r2, #1
 8002642:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8002644:	4b15      	ldr	r3, [pc, #84]	; (800269c <MX_OCTOSPI1_Init+0xa4>)
 8002646:	2200      	movs	r2, #0
 8002648:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800264a:	4b14      	ldr	r3, [pc, #80]	; (800269c <MX_OCTOSPI1_Init+0xa4>)
 800264c:	2200      	movs	r2, #0
 800264e:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8002650:	4b12      	ldr	r3, [pc, #72]	; (800269c <MX_OCTOSPI1_Init+0xa4>)
 8002652:	2200      	movs	r2, #0
 8002654:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8002656:	4b11      	ldr	r3, [pc, #68]	; (800269c <MX_OCTOSPI1_Init+0xa4>)
 8002658:	2208      	movs	r2, #8
 800265a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 800265c:	480f      	ldr	r0, [pc, #60]	; (800269c <MX_OCTOSPI1_Init+0xa4>)
 800265e:	f003 fc31 	bl	8005ec4 <HAL_OSPI_Init>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8002668:	f000 fce2 	bl	8003030 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 800266c:	2301      	movs	r3, #1
 800266e:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8002670:	2301      	movs	r3, #1
 8002672:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8002674:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002678:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800267a:	1d3b      	adds	r3, r7, #4
 800267c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002680:	4619      	mov	r1, r3
 8002682:	4806      	ldr	r0, [pc, #24]	; (800269c <MX_OCTOSPI1_Init+0xa4>)
 8002684:	f003 fcd8 	bl	8006038 <HAL_OSPIM_Config>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 800268e:	f000 fccf 	bl	8003030 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8002692:	bf00      	nop
 8002694:	3718      	adds	r7, #24
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000ed8 	.word	0x20000ed8
 80026a0:	a0001000 	.word	0xa0001000

080026a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80026a8:	4b1b      	ldr	r3, [pc, #108]	; (8002718 <MX_SPI1_Init+0x74>)
 80026aa:	4a1c      	ldr	r2, [pc, #112]	; (800271c <MX_SPI1_Init+0x78>)
 80026ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80026ae:	4b1a      	ldr	r3, [pc, #104]	; (8002718 <MX_SPI1_Init+0x74>)
 80026b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80026b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80026b6:	4b18      	ldr	r3, [pc, #96]	; (8002718 <MX_SPI1_Init+0x74>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80026bc:	4b16      	ldr	r3, [pc, #88]	; (8002718 <MX_SPI1_Init+0x74>)
 80026be:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80026c2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026c4:	4b14      	ldr	r3, [pc, #80]	; (8002718 <MX_SPI1_Init+0x74>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026ca:	4b13      	ldr	r3, [pc, #76]	; (8002718 <MX_SPI1_Init+0x74>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80026d0:	4b11      	ldr	r3, [pc, #68]	; (8002718 <MX_SPI1_Init+0x74>)
 80026d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026d8:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <MX_SPI1_Init+0x74>)
 80026da:	2200      	movs	r2, #0
 80026dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026de:	4b0e      	ldr	r3, [pc, #56]	; (8002718 <MX_SPI1_Init+0x74>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80026e4:	4b0c      	ldr	r3, [pc, #48]	; (8002718 <MX_SPI1_Init+0x74>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026ea:	4b0b      	ldr	r3, [pc, #44]	; (8002718 <MX_SPI1_Init+0x74>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80026f0:	4b09      	ldr	r3, [pc, #36]	; (8002718 <MX_SPI1_Init+0x74>)
 80026f2:	2207      	movs	r2, #7
 80026f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80026f6:	4b08      	ldr	r3, [pc, #32]	; (8002718 <MX_SPI1_Init+0x74>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <MX_SPI1_Init+0x74>)
 80026fe:	2208      	movs	r2, #8
 8002700:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002702:	4805      	ldr	r0, [pc, #20]	; (8002718 <MX_SPI1_Init+0x74>)
 8002704:	f005 fdba 	bl	800827c <HAL_SPI_Init>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800270e:	f000 fc8f 	bl	8003030 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	20000f28 	.word	0x20000f28
 800271c:	40013000 	.word	0x40013000

08002720 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002724:	4b1b      	ldr	r3, [pc, #108]	; (8002794 <MX_SPI3_Init+0x74>)
 8002726:	4a1c      	ldr	r2, [pc, #112]	; (8002798 <MX_SPI3_Init+0x78>)
 8002728:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800272a:	4b1a      	ldr	r3, [pc, #104]	; (8002794 <MX_SPI3_Init+0x74>)
 800272c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002730:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002732:	4b18      	ldr	r3, [pc, #96]	; (8002794 <MX_SPI3_Init+0x74>)
 8002734:	2200      	movs	r2, #0
 8002736:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8002738:	4b16      	ldr	r3, [pc, #88]	; (8002794 <MX_SPI3_Init+0x74>)
 800273a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800273e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002740:	4b14      	ldr	r3, [pc, #80]	; (8002794 <MX_SPI3_Init+0x74>)
 8002742:	2200      	movs	r2, #0
 8002744:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002746:	4b13      	ldr	r3, [pc, #76]	; (8002794 <MX_SPI3_Init+0x74>)
 8002748:	2200      	movs	r2, #0
 800274a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800274c:	4b11      	ldr	r3, [pc, #68]	; (8002794 <MX_SPI3_Init+0x74>)
 800274e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002752:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002754:	4b0f      	ldr	r3, [pc, #60]	; (8002794 <MX_SPI3_Init+0x74>)
 8002756:	2208      	movs	r2, #8
 8002758:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800275a:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <MX_SPI3_Init+0x74>)
 800275c:	2200      	movs	r2, #0
 800275e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002760:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <MX_SPI3_Init+0x74>)
 8002762:	2200      	movs	r2, #0
 8002764:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002766:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <MX_SPI3_Init+0x74>)
 8002768:	2200      	movs	r2, #0
 800276a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800276c:	4b09      	ldr	r3, [pc, #36]	; (8002794 <MX_SPI3_Init+0x74>)
 800276e:	2207      	movs	r2, #7
 8002770:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002772:	4b08      	ldr	r3, [pc, #32]	; (8002794 <MX_SPI3_Init+0x74>)
 8002774:	2200      	movs	r2, #0
 8002776:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002778:	4b06      	ldr	r3, [pc, #24]	; (8002794 <MX_SPI3_Init+0x74>)
 800277a:	2208      	movs	r2, #8
 800277c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800277e:	4805      	ldr	r0, [pc, #20]	; (8002794 <MX_SPI3_Init+0x74>)
 8002780:	f005 fd7c 	bl	800827c <HAL_SPI_Init>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800278a:	f000 fc51 	bl	8003030 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800278e:	bf00      	nop
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	20000f8c 	.word	0x20000f8c
 8002798:	40003c00 	.word	0x40003c00

0800279c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80027a0:	4b22      	ldr	r3, [pc, #136]	; (800282c <MX_UART4_Init+0x90>)
 80027a2:	4a23      	ldr	r2, [pc, #140]	; (8002830 <MX_UART4_Init+0x94>)
 80027a4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80027a6:	4b21      	ldr	r3, [pc, #132]	; (800282c <MX_UART4_Init+0x90>)
 80027a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027ac:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80027ae:	4b1f      	ldr	r3, [pc, #124]	; (800282c <MX_UART4_Init+0x90>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80027b4:	4b1d      	ldr	r3, [pc, #116]	; (800282c <MX_UART4_Init+0x90>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80027ba:	4b1c      	ldr	r3, [pc, #112]	; (800282c <MX_UART4_Init+0x90>)
 80027bc:	2200      	movs	r2, #0
 80027be:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80027c0:	4b1a      	ldr	r3, [pc, #104]	; (800282c <MX_UART4_Init+0x90>)
 80027c2:	220c      	movs	r2, #12
 80027c4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027c6:	4b19      	ldr	r3, [pc, #100]	; (800282c <MX_UART4_Init+0x90>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80027cc:	4b17      	ldr	r3, [pc, #92]	; (800282c <MX_UART4_Init+0x90>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027d2:	4b16      	ldr	r3, [pc, #88]	; (800282c <MX_UART4_Init+0x90>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80027d8:	4b14      	ldr	r3, [pc, #80]	; (800282c <MX_UART4_Init+0x90>)
 80027da:	2200      	movs	r2, #0
 80027dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027de:	4b13      	ldr	r3, [pc, #76]	; (800282c <MX_UART4_Init+0x90>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80027e4:	4811      	ldr	r0, [pc, #68]	; (800282c <MX_UART4_Init+0x90>)
 80027e6:	f006 fb79 	bl	8008edc <HAL_UART_Init>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80027f0:	f000 fc1e 	bl	8003030 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027f4:	2100      	movs	r1, #0
 80027f6:	480d      	ldr	r0, [pc, #52]	; (800282c <MX_UART4_Init+0x90>)
 80027f8:	f007 fd41 	bl	800a27e <HAL_UARTEx_SetTxFifoThreshold>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002802:	f000 fc15 	bl	8003030 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002806:	2100      	movs	r1, #0
 8002808:	4808      	ldr	r0, [pc, #32]	; (800282c <MX_UART4_Init+0x90>)
 800280a:	f007 fd76 	bl	800a2fa <HAL_UARTEx_SetRxFifoThreshold>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002814:	f000 fc0c 	bl	8003030 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002818:	4804      	ldr	r0, [pc, #16]	; (800282c <MX_UART4_Init+0x90>)
 800281a:	f007 fcf7 	bl	800a20c <HAL_UARTEx_DisableFifoMode>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002824:	f000 fc04 	bl	8003030 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002828:	bf00      	nop
 800282a:	bd80      	pop	{r7, pc}
 800282c:	20000ff0 	.word	0x20000ff0
 8002830:	40004c00 	.word	0x40004c00

08002834 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002838:	4b22      	ldr	r3, [pc, #136]	; (80028c4 <MX_USART1_UART_Init+0x90>)
 800283a:	4a23      	ldr	r2, [pc, #140]	; (80028c8 <MX_USART1_UART_Init+0x94>)
 800283c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800283e:	4b21      	ldr	r3, [pc, #132]	; (80028c4 <MX_USART1_UART_Init+0x90>)
 8002840:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002844:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002846:	4b1f      	ldr	r3, [pc, #124]	; (80028c4 <MX_USART1_UART_Init+0x90>)
 8002848:	2200      	movs	r2, #0
 800284a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800284c:	4b1d      	ldr	r3, [pc, #116]	; (80028c4 <MX_USART1_UART_Init+0x90>)
 800284e:	2200      	movs	r2, #0
 8002850:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002852:	4b1c      	ldr	r3, [pc, #112]	; (80028c4 <MX_USART1_UART_Init+0x90>)
 8002854:	2200      	movs	r2, #0
 8002856:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002858:	4b1a      	ldr	r3, [pc, #104]	; (80028c4 <MX_USART1_UART_Init+0x90>)
 800285a:	220c      	movs	r2, #12
 800285c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800285e:	4b19      	ldr	r3, [pc, #100]	; (80028c4 <MX_USART1_UART_Init+0x90>)
 8002860:	2200      	movs	r2, #0
 8002862:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002864:	4b17      	ldr	r3, [pc, #92]	; (80028c4 <MX_USART1_UART_Init+0x90>)
 8002866:	2200      	movs	r2, #0
 8002868:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800286a:	4b16      	ldr	r3, [pc, #88]	; (80028c4 <MX_USART1_UART_Init+0x90>)
 800286c:	2200      	movs	r2, #0
 800286e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002870:	4b14      	ldr	r3, [pc, #80]	; (80028c4 <MX_USART1_UART_Init+0x90>)
 8002872:	2200      	movs	r2, #0
 8002874:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002876:	4b13      	ldr	r3, [pc, #76]	; (80028c4 <MX_USART1_UART_Init+0x90>)
 8002878:	2200      	movs	r2, #0
 800287a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800287c:	4811      	ldr	r0, [pc, #68]	; (80028c4 <MX_USART1_UART_Init+0x90>)
 800287e:	f006 fb2d 	bl	8008edc <HAL_UART_Init>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002888:	f000 fbd2 	bl	8003030 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800288c:	2100      	movs	r1, #0
 800288e:	480d      	ldr	r0, [pc, #52]	; (80028c4 <MX_USART1_UART_Init+0x90>)
 8002890:	f007 fcf5 	bl	800a27e <HAL_UARTEx_SetTxFifoThreshold>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800289a:	f000 fbc9 	bl	8003030 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800289e:	2100      	movs	r1, #0
 80028a0:	4808      	ldr	r0, [pc, #32]	; (80028c4 <MX_USART1_UART_Init+0x90>)
 80028a2:	f007 fd2a 	bl	800a2fa <HAL_UARTEx_SetRxFifoThreshold>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80028ac:	f000 fbc0 	bl	8003030 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80028b0:	4804      	ldr	r0, [pc, #16]	; (80028c4 <MX_USART1_UART_Init+0x90>)
 80028b2:	f007 fcab 	bl	800a20c <HAL_UARTEx_DisableFifoMode>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80028bc:	f000 fbb8 	bl	8003030 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028c0:	bf00      	nop
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	20001084 	.word	0x20001084
 80028c8:	40013800 	.word	0x40013800

080028cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80028d0:	4b23      	ldr	r3, [pc, #140]	; (8002960 <MX_USART2_UART_Init+0x94>)
 80028d2:	4a24      	ldr	r2, [pc, #144]	; (8002964 <MX_USART2_UART_Init+0x98>)
 80028d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80028d6:	4b22      	ldr	r3, [pc, #136]	; (8002960 <MX_USART2_UART_Init+0x94>)
 80028d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028de:	4b20      	ldr	r3, [pc, #128]	; (8002960 <MX_USART2_UART_Init+0x94>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028e4:	4b1e      	ldr	r3, [pc, #120]	; (8002960 <MX_USART2_UART_Init+0x94>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028ea:	4b1d      	ldr	r3, [pc, #116]	; (8002960 <MX_USART2_UART_Init+0x94>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028f0:	4b1b      	ldr	r3, [pc, #108]	; (8002960 <MX_USART2_UART_Init+0x94>)
 80028f2:	220c      	movs	r2, #12
 80028f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80028f6:	4b1a      	ldr	r3, [pc, #104]	; (8002960 <MX_USART2_UART_Init+0x94>)
 80028f8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80028fc:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028fe:	4b18      	ldr	r3, [pc, #96]	; (8002960 <MX_USART2_UART_Init+0x94>)
 8002900:	2200      	movs	r2, #0
 8002902:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002904:	4b16      	ldr	r3, [pc, #88]	; (8002960 <MX_USART2_UART_Init+0x94>)
 8002906:	2200      	movs	r2, #0
 8002908:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800290a:	4b15      	ldr	r3, [pc, #84]	; (8002960 <MX_USART2_UART_Init+0x94>)
 800290c:	2200      	movs	r2, #0
 800290e:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002910:	4b13      	ldr	r3, [pc, #76]	; (8002960 <MX_USART2_UART_Init+0x94>)
 8002912:	2200      	movs	r2, #0
 8002914:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002916:	4812      	ldr	r0, [pc, #72]	; (8002960 <MX_USART2_UART_Init+0x94>)
 8002918:	f006 fae0 	bl	8008edc <HAL_UART_Init>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8002922:	f000 fb85 	bl	8003030 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002926:	2100      	movs	r1, #0
 8002928:	480d      	ldr	r0, [pc, #52]	; (8002960 <MX_USART2_UART_Init+0x94>)
 800292a:	f007 fca8 	bl	800a27e <HAL_UARTEx_SetTxFifoThreshold>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8002934:	f000 fb7c 	bl	8003030 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002938:	2100      	movs	r1, #0
 800293a:	4809      	ldr	r0, [pc, #36]	; (8002960 <MX_USART2_UART_Init+0x94>)
 800293c:	f007 fcdd 	bl	800a2fa <HAL_UARTEx_SetRxFifoThreshold>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8002946:	f000 fb73 	bl	8003030 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800294a:	4805      	ldr	r0, [pc, #20]	; (8002960 <MX_USART2_UART_Init+0x94>)
 800294c:	f007 fc5e 	bl	800a20c <HAL_UARTEx_DisableFifoMode>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8002956:	f000 fb6b 	bl	8003030 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800295a:	bf00      	nop
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	20001118 	.word	0x20001118
 8002964:	40004400 	.word	0x40004400

08002968 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800296c:	4b22      	ldr	r3, [pc, #136]	; (80029f8 <MX_USART3_UART_Init+0x90>)
 800296e:	4a23      	ldr	r2, [pc, #140]	; (80029fc <MX_USART3_UART_Init+0x94>)
 8002970:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002972:	4b21      	ldr	r3, [pc, #132]	; (80029f8 <MX_USART3_UART_Init+0x90>)
 8002974:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002978:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800297a:	4b1f      	ldr	r3, [pc, #124]	; (80029f8 <MX_USART3_UART_Init+0x90>)
 800297c:	2200      	movs	r2, #0
 800297e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002980:	4b1d      	ldr	r3, [pc, #116]	; (80029f8 <MX_USART3_UART_Init+0x90>)
 8002982:	2200      	movs	r2, #0
 8002984:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002986:	4b1c      	ldr	r3, [pc, #112]	; (80029f8 <MX_USART3_UART_Init+0x90>)
 8002988:	2200      	movs	r2, #0
 800298a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800298c:	4b1a      	ldr	r3, [pc, #104]	; (80029f8 <MX_USART3_UART_Init+0x90>)
 800298e:	220c      	movs	r2, #12
 8002990:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002992:	4b19      	ldr	r3, [pc, #100]	; (80029f8 <MX_USART3_UART_Init+0x90>)
 8002994:	2200      	movs	r2, #0
 8002996:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002998:	4b17      	ldr	r3, [pc, #92]	; (80029f8 <MX_USART3_UART_Init+0x90>)
 800299a:	2200      	movs	r2, #0
 800299c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800299e:	4b16      	ldr	r3, [pc, #88]	; (80029f8 <MX_USART3_UART_Init+0x90>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029a4:	4b14      	ldr	r3, [pc, #80]	; (80029f8 <MX_USART3_UART_Init+0x90>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029aa:	4b13      	ldr	r3, [pc, #76]	; (80029f8 <MX_USART3_UART_Init+0x90>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80029b0:	4811      	ldr	r0, [pc, #68]	; (80029f8 <MX_USART3_UART_Init+0x90>)
 80029b2:	f006 fa93 	bl	8008edc <HAL_UART_Init>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80029bc:	f000 fb38 	bl	8003030 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029c0:	2100      	movs	r1, #0
 80029c2:	480d      	ldr	r0, [pc, #52]	; (80029f8 <MX_USART3_UART_Init+0x90>)
 80029c4:	f007 fc5b 	bl	800a27e <HAL_UARTEx_SetTxFifoThreshold>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80029ce:	f000 fb2f 	bl	8003030 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029d2:	2100      	movs	r1, #0
 80029d4:	4808      	ldr	r0, [pc, #32]	; (80029f8 <MX_USART3_UART_Init+0x90>)
 80029d6:	f007 fc90 	bl	800a2fa <HAL_UARTEx_SetRxFifoThreshold>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80029e0:	f000 fb26 	bl	8003030 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80029e4:	4804      	ldr	r0, [pc, #16]	; (80029f8 <MX_USART3_UART_Init+0x90>)
 80029e6:	f007 fc11 	bl	800a20c <HAL_UARTEx_DisableFifoMode>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80029f0:	f000 fb1e 	bl	8003030 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80029f4:	bf00      	nop
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	200011ac 	.word	0x200011ac
 80029fc:	40004800 	.word	0x40004800

08002a00 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002a04:	bf00      	nop
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
	...

08002a10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08c      	sub	sp, #48	; 0x30
 8002a14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a16:	f107 031c 	add.w	r3, r7, #28
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	605a      	str	r2, [r3, #4]
 8002a20:	609a      	str	r2, [r3, #8]
 8002a22:	60da      	str	r2, [r3, #12]
 8002a24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a26:	4b9e      	ldr	r3, [pc, #632]	; (8002ca0 <MX_GPIO_Init+0x290>)
 8002a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a2a:	4a9d      	ldr	r2, [pc, #628]	; (8002ca0 <MX_GPIO_Init+0x290>)
 8002a2c:	f043 0310 	orr.w	r3, r3, #16
 8002a30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a32:	4b9b      	ldr	r3, [pc, #620]	; (8002ca0 <MX_GPIO_Init+0x290>)
 8002a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a36:	f003 0310 	and.w	r3, r3, #16
 8002a3a:	61bb      	str	r3, [r7, #24]
 8002a3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a3e:	4b98      	ldr	r3, [pc, #608]	; (8002ca0 <MX_GPIO_Init+0x290>)
 8002a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a42:	4a97      	ldr	r2, [pc, #604]	; (8002ca0 <MX_GPIO_Init+0x290>)
 8002a44:	f043 0304 	orr.w	r3, r3, #4
 8002a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a4a:	4b95      	ldr	r3, [pc, #596]	; (8002ca0 <MX_GPIO_Init+0x290>)
 8002a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4e:	f003 0304 	and.w	r3, r3, #4
 8002a52:	617b      	str	r3, [r7, #20]
 8002a54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a56:	4b92      	ldr	r3, [pc, #584]	; (8002ca0 <MX_GPIO_Init+0x290>)
 8002a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a5a:	4a91      	ldr	r2, [pc, #580]	; (8002ca0 <MX_GPIO_Init+0x290>)
 8002a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a62:	4b8f      	ldr	r3, [pc, #572]	; (8002ca0 <MX_GPIO_Init+0x290>)
 8002a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a6a:	613b      	str	r3, [r7, #16]
 8002a6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a6e:	4b8c      	ldr	r3, [pc, #560]	; (8002ca0 <MX_GPIO_Init+0x290>)
 8002a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a72:	4a8b      	ldr	r2, [pc, #556]	; (8002ca0 <MX_GPIO_Init+0x290>)
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a7a:	4b89      	ldr	r3, [pc, #548]	; (8002ca0 <MX_GPIO_Init+0x290>)
 8002a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	60fb      	str	r3, [r7, #12]
 8002a84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a86:	4b86      	ldr	r3, [pc, #536]	; (8002ca0 <MX_GPIO_Init+0x290>)
 8002a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a8a:	4a85      	ldr	r2, [pc, #532]	; (8002ca0 <MX_GPIO_Init+0x290>)
 8002a8c:	f043 0302 	orr.w	r3, r3, #2
 8002a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a92:	4b83      	ldr	r3, [pc, #524]	; (8002ca0 <MX_GPIO_Init+0x290>)
 8002a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	60bb      	str	r3, [r7, #8]
 8002a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a9e:	4b80      	ldr	r3, [pc, #512]	; (8002ca0 <MX_GPIO_Init+0x290>)
 8002aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa2:	4a7f      	ldr	r2, [pc, #508]	; (8002ca0 <MX_GPIO_Init+0x290>)
 8002aa4:	f043 0308 	orr.w	r3, r3, #8
 8002aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aaa:	4b7d      	ldr	r3, [pc, #500]	; (8002ca0 <MX_GPIO_Init+0x290>)
 8002aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aae:	f003 0308 	and.w	r3, r3, #8
 8002ab2:	607b      	str	r3, [r7, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f240 1105 	movw	r1, #261	; 0x105
 8002abc:	4879      	ldr	r0, [pc, #484]	; (8002ca4 <MX_GPIO_Init+0x294>)
 8002abe:	f002 faf5 	bl	80050ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f248 111c 	movw	r1, #33052	; 0x811c
 8002ac8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002acc:	f002 faee 	bl	80050ac <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f24f 0134 	movw	r1, #61492	; 0xf034
 8002ad6:	4874      	ldr	r0, [pc, #464]	; (8002ca8 <MX_GPIO_Init+0x298>)
 8002ad8:	f002 fae8 	bl	80050ac <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8002adc:	2200      	movs	r2, #0
 8002ade:	f242 0183 	movw	r1, #8323	; 0x2083
 8002ae2:	4872      	ldr	r0, [pc, #456]	; (8002cac <MX_GPIO_Init+0x29c>)
 8002ae4:	f002 fae2 	bl	80050ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f44f 7110 	mov.w	r1, #576	; 0x240
 8002aee:	4870      	ldr	r0, [pc, #448]	; (8002cb0 <MX_GPIO_Init+0x2a0>)
 8002af0:	f002 fadc 	bl	80050ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8002af4:	f240 1305 	movw	r3, #261	; 0x105
 8002af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002afa:	2301      	movs	r3, #1
 8002afc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afe:	2300      	movs	r3, #0
 8002b00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b02:	2300      	movs	r3, #0
 8002b04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b06:	f107 031c 	add.w	r3, r7, #28
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4865      	ldr	r0, [pc, #404]	; (8002ca4 <MX_GPIO_Init+0x294>)
 8002b0e:	f002 f93b 	bl	8004d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8002b12:	237a      	movs	r3, #122	; 0x7a
 8002b14:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b16:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002b1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b20:	f107 031c 	add.w	r3, r7, #28
 8002b24:	4619      	mov	r1, r3
 8002b26:	485f      	ldr	r0, [pc, #380]	; (8002ca4 <MX_GPIO_Init+0x294>)
 8002b28:	f002 f92e 	bl	8004d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8002b2c:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8002b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b32:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002b36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b3c:	f107 031c 	add.w	r3, r7, #28
 8002b40:	4619      	mov	r1, r3
 8002b42:	485b      	ldr	r0, [pc, #364]	; (8002cb0 <MX_GPIO_Init+0x2a0>)
 8002b44:	f002 f920 	bl	8004d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8002b48:	f248 131c 	movw	r3, #33052	; 0x811c
 8002b4c:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b56:	2300      	movs	r3, #0
 8002b58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b5a:	f107 031c 	add.w	r3, r7, #28
 8002b5e:	4619      	mov	r1, r3
 8002b60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b64:	f002 f910 	bl	8004d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b6c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002b70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8002b76:	f107 031c 	add.w	r3, r7, #28
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	484a      	ldr	r0, [pc, #296]	; (8002ca8 <MX_GPIO_Init+0x298>)
 8002b7e:	f002 f903 	bl	8004d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8002b82:	2302      	movs	r3, #2
 8002b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b86:	2302      	movs	r3, #2
 8002b88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b92:	2302      	movs	r3, #2
 8002b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8002b96:	f107 031c 	add.w	r3, r7, #28
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4842      	ldr	r0, [pc, #264]	; (8002ca8 <MX_GPIO_Init+0x298>)
 8002b9e:	f002 f8f3 	bl	8004d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 8002ba2:	f24b 0334 	movw	r3, #45108	; 0xb034
 8002ba6:	61fb      	str	r3, [r7, #28]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bac:	2300      	movs	r3, #0
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bb4:	f107 031c 	add.w	r3, r7, #28
 8002bb8:	4619      	mov	r1, r3
 8002bba:	483b      	ldr	r0, [pc, #236]	; (8002ca8 <MX_GPIO_Init+0x298>)
 8002bbc:	f002 f8e4 	bl	8004d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8002bc0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8002bd2:	f107 031c 	add.w	r3, r7, #28
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4833      	ldr	r0, [pc, #204]	; (8002ca8 <MX_GPIO_Init+0x298>)
 8002bda:	f002 f8d5 	bl	8004d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8002bde:	f64d 4304 	movw	r3, #56324	; 0xdc04
 8002be2:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002be4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002be8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bea:	2300      	movs	r3, #0
 8002bec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bee:	f107 031c 	add.w	r3, r7, #28
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	482d      	ldr	r0, [pc, #180]	; (8002cac <MX_GPIO_Init+0x29c>)
 8002bf6:	f002 f8c7 	bl	8004d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8002bfa:	f242 0383 	movw	r3, #8323	; 0x2083
 8002bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c00:	2301      	movs	r3, #1
 8002c02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c04:	2300      	movs	r3, #0
 8002c06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c0c:	f107 031c 	add.w	r3, r7, #28
 8002c10:	4619      	mov	r1, r3
 8002c12:	4826      	ldr	r0, [pc, #152]	; (8002cac <MX_GPIO_Init+0x29c>)
 8002c14:	f002 f8b8 	bl	8004d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8002c18:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c22:	2300      	movs	r3, #0
 8002c24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c26:	2300      	movs	r3, #0
 8002c28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c2a:	f107 031c 	add.w	r3, r7, #28
 8002c2e:	4619      	mov	r1, r3
 8002c30:	481f      	ldr	r0, [pc, #124]	; (8002cb0 <MX_GPIO_Init+0x2a0>)
 8002c32:	f002 f8a9 	bl	8004d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8002c36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002c44:	f107 031c 	add.w	r3, r7, #28
 8002c48:	4619      	mov	r1, r3
 8002c4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c4e:	f002 f89b 	bl	8004d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8002c52:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c58:	2302      	movs	r3, #2
 8002c5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c60:	2303      	movs	r3, #3
 8002c62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002c64:	230a      	movs	r3, #10
 8002c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c68:	f107 031c 	add.w	r3, r7, #28
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c72:	f002 f889 	bl	8004d88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002c76:	2200      	movs	r2, #0
 8002c78:	2100      	movs	r1, #0
 8002c7a:	2017      	movs	r0, #23
 8002c7c:	f001 fe84 	bl	8004988 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002c80:	2017      	movs	r0, #23
 8002c82:	f001 fe9d 	bl	80049c0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8002c86:	2200      	movs	r2, #0
 8002c88:	2106      	movs	r1, #6
 8002c8a:	2028      	movs	r0, #40	; 0x28
 8002c8c:	f001 fe7c 	bl	8004988 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c90:	2028      	movs	r0, #40	; 0x28
 8002c92:	f001 fe95 	bl	80049c0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c96:	bf00      	nop
 8002c98:	3730      	adds	r7, #48	; 0x30
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	48001000 	.word	0x48001000
 8002ca8:	48000400 	.word	0x48000400
 8002cac:	48000c00 	.word	0x48000c00
 8002cb0:	48000800 	.word	0x48000800

08002cb4 <MyLED2_init>:

/* USER CODE BEGIN 4 */
static void MyLED2_init(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  //Configure the MODE register
  //01:general purpose output
  //MODER Bit 29 and Bit 28
  //Reset both bits 28 and 29 to 0
	GPIOB->MODER &=~(0x3 <<28);
 8002cb8:	4b16      	ldr	r3, [pc, #88]	; (8002d14 <MyLED2_init+0x60>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a15      	ldr	r2, [pc, #84]	; (8002d14 <MyLED2_init+0x60>)
 8002cbe:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002cc2:	6013      	str	r3, [r2, #0]
  //Set the values to 1
	GPIOB->MODER |=(0x1 <<28);
 8002cc4:	4b13      	ldr	r3, [pc, #76]	; (8002d14 <MyLED2_init+0x60>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a12      	ldr	r2, [pc, #72]	; (8002d14 <MyLED2_init+0x60>)
 8002cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cce:	6013      	str	r3, [r2, #0]

  //Configure the output type register
  //0:Push-Pull
  //OTYPER Bit 14 to 0
	GPIOB->OTYPER &=~(1<<14);
 8002cd0:	4b10      	ldr	r3, [pc, #64]	; (8002d14 <MyLED2_init+0x60>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	4a0f      	ldr	r2, [pc, #60]	; (8002d14 <MyLED2_init+0x60>)
 8002cd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cda:	6053      	str	r3, [r2, #4]

  //Configure the speed register
  //11:Very high speed
  //OSPEEDR Bit 29 and Bit 28
  //Reset both bits 28 and 29 to 0
	GPIOB->OSPEEDR &=~(0x3 <<28);
 8002cdc:	4b0d      	ldr	r3, [pc, #52]	; (8002d14 <MyLED2_init+0x60>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	4a0c      	ldr	r2, [pc, #48]	; (8002d14 <MyLED2_init+0x60>)
 8002ce2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002ce6:	6093      	str	r3, [r2, #8]
  //Set the values to 1
	GPIOB->OSPEEDR |=(0x1 <<28);
 8002ce8:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <MyLED2_init+0x60>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	4a09      	ldr	r2, [pc, #36]	; (8002d14 <MyLED2_init+0x60>)
 8002cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf2:	6093      	str	r3, [r2, #8]

  //Configure pull-up/pull-down register
  //00: no pull-up/pull-down
  //PUPDR Bit 29 and Bit 28
  //Reset both bits 28 and 29 to 0
	GPIOB->PUPDR &=~(0x3 <<28);
 8002cf4:	4b07      	ldr	r3, [pc, #28]	; (8002d14 <MyLED2_init+0x60>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	4a06      	ldr	r2, [pc, #24]	; (8002d14 <MyLED2_init+0x60>)
 8002cfa:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002cfe:	60d3      	str	r3, [r2, #12]
  //Set the values to 0
	GPIOB->PUPDR |=(0x0 <<28);
 8002d00:	4b04      	ldr	r3, [pc, #16]	; (8002d14 <MyLED2_init+0x60>)
 8002d02:	4a04      	ldr	r2, [pc, #16]	; (8002d14 <MyLED2_init+0x60>)
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	60d3      	str	r3, [r2, #12]

}
 8002d08:	bf00      	nop
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	48000400 	.word	0x48000400

08002d18 <MyButton_init>:

static void MyButton_init(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
  //Button is Port C, Pin 13, EXTI13
  //Configure SYSCLK
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d1e:	4b1d      	ldr	r3, [pc, #116]	; (8002d94 <MyButton_init+0x7c>)
 8002d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d22:	4a1c      	ldr	r2, [pc, #112]	; (8002d94 <MyButton_init+0x7c>)
 8002d24:	f043 0301 	orr.w	r3, r3, #1
 8002d28:	6613      	str	r3, [r2, #96]	; 0x60
 8002d2a:	4b1a      	ldr	r3, [pc, #104]	; (8002d94 <MyButton_init+0x7c>)
 8002d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	607b      	str	r3, [r7, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]

  //Configure the MODE register
  //00:input mode
  //MODER Bit 27 and Bit 26
  //Reset both bits 27 and 26 to 0
	GPIOC->MODER &=~(0x3 <<26);
 8002d36:	4b18      	ldr	r3, [pc, #96]	; (8002d98 <MyButton_init+0x80>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a17      	ldr	r2, [pc, #92]	; (8002d98 <MyButton_init+0x80>)
 8002d3c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002d40:	6013      	str	r3, [r2, #0]

  //Configure pull-up/pull-down register
  //00: no pull-up/pull-down
  //PUPDR Bit 27 and Bit 26
  //Reset both bits 27 and 26 to 0
	GPIOC->PUPDR &=~(0x3 <<26);
 8002d42:	4b15      	ldr	r3, [pc, #84]	; (8002d98 <MyButton_init+0x80>)
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	4a14      	ldr	r2, [pc, #80]	; (8002d98 <MyButton_init+0x80>)
 8002d48:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002d4c:	60d3      	str	r3, [r2, #12]
  //Set the values to 0
	GPIOC->PUPDR |=(0x0 <<26);
 8002d4e:	4b12      	ldr	r3, [pc, #72]	; (8002d98 <MyButton_init+0x80>)
 8002d50:	4a11      	ldr	r2, [pc, #68]	; (8002d98 <MyButton_init+0x80>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	60d3      	str	r3, [r2, #12]

  //sysconfig Register
  //EXTI13, Choose port C
  //Configure the External Interrupt Configuration Register
  //SYSCFG_EXTICR4 :only 2nd bit in EXTICR[3] is set to 1
	SYSCFG->EXTICR[3]|=(0x1<<5);
 8002d56:	4b11      	ldr	r3, [pc, #68]	; (8002d9c <MyButton_init+0x84>)
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	4a10      	ldr	r2, [pc, #64]	; (8002d9c <MyButton_init+0x84>)
 8002d5c:	f043 0320 	orr.w	r3, r3, #32
 8002d60:	6153      	str	r3, [r2, #20]

  //Configure the falling trigger selection register
  //EXTI_FTSR
	EXTI->FTSR1 |=(0x1 <<13) ;
 8002d62:	4b0f      	ldr	r3, [pc, #60]	; (8002da0 <MyButton_init+0x88>)
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	4a0e      	ldr	r2, [pc, #56]	; (8002da0 <MyButton_init+0x88>)
 8002d68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d6c:	60d3      	str	r3, [r2, #12]

  //Configure the Interrupt Mask Register
  //EXTI_IMR
	EXTI->IMR1 |=(0x1 <<13);
 8002d6e:	4b0c      	ldr	r3, [pc, #48]	; (8002da0 <MyButton_init+0x88>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a0b      	ldr	r2, [pc, #44]	; (8002da0 <MyButton_init+0x88>)
 8002d74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d78:	6013      	str	r3, [r2, #0]

  //Configure NVIC Set Enable Register
  //NVIC_ISER
  //NVIC->ISER[] Register no. & location based on position
  //NVIC->ISER[(((uint32_t)EXTI15_10_IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)EXTI15_10_IRQn) & 0x1FUL));
	NVIC->ISER[1] |= (0x1 << 8);
 8002d7a:	4b0a      	ldr	r3, [pc, #40]	; (8002da4 <MyButton_init+0x8c>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	4a09      	ldr	r2, [pc, #36]	; (8002da4 <MyButton_init+0x8c>)
 8002d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d84:	6053      	str	r3, [r2, #4]
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	40021000 	.word	0x40021000
 8002d98:	48000800 	.word	0x48000800
 8002d9c:	40010000 	.word	0x40010000
 8002da0:	40010400 	.word	0x40010400
 8002da4:	e000e100 	.word	0xe000e100

08002da8 <MyUART1_init>:

static void MyUART1_init(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
	//configure UART1 manually excluding Baud Rate Register
	//configuring M bits-Bits 12,28 to 0,0 for 1 start bit, 8 data bits, n stop bits in USART_CR1 register
	huart1.Instance->CR1 &=~(0x1 <<12);
 8002dac:	4b22      	ldr	r3, [pc, #136]	; (8002e38 <MyUART1_init+0x90>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	4b21      	ldr	r3, [pc, #132]	; (8002e38 <MyUART1_init+0x90>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002dba:	601a      	str	r2, [r3, #0]
	huart1.Instance->CR1 &=~(0x1 <<28);
 8002dbc:	4b1e      	ldr	r3, [pc, #120]	; (8002e38 <MyUART1_init+0x90>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	4b1d      	ldr	r3, [pc, #116]	; (8002e38 <MyUART1_init+0x90>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002dca:	601a      	str	r2, [r3, #0]
	//configuring Bit 15 to 1 for oversampling by 8 in USART_CR1 register
	huart1.Instance->CR1 |=(0x1 <<15);
 8002dcc:	4b1a      	ldr	r3, [pc, #104]	; (8002e38 <MyUART1_init+0x90>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	4b19      	ldr	r3, [pc, #100]	; (8002e38 <MyUART1_init+0x90>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dda:	601a      	str	r2, [r3, #0]
	//configuring Bit 10 to 0 to disable parity control in USART_CR1 register
	huart1.Instance->CR1 &=~(0x1 <<10);
 8002ddc:	4b16      	ldr	r3, [pc, #88]	; (8002e38 <MyUART1_init+0x90>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	4b15      	ldr	r3, [pc, #84]	; (8002e38 <MyUART1_init+0x90>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dea:	601a      	str	r2, [r3, #0]
	//configuring Bit 0 to 1 to enable UART in USART_CR1 register
	huart1.Instance->CR1 |=(0x1 <<0);
 8002dec:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <MyUART1_init+0x90>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	4b11      	ldr	r3, [pc, #68]	; (8002e38 <MyUART1_init+0x90>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f042 0201 	orr.w	r2, r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]
	//configuring Bit 3 to 1 to enable Transmitter in USART_CR1 register
	huart1.Instance->CR1 |=(0x1 <<3);
 8002dfc:	4b0e      	ldr	r3, [pc, #56]	; (8002e38 <MyUART1_init+0x90>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	4b0d      	ldr	r3, [pc, #52]	; (8002e38 <MyUART1_init+0x90>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0208 	orr.w	r2, r2, #8
 8002e0a:	601a      	str	r2, [r3, #0]
	//configuring Bit 2 to 1 to enable Receiver in USART_CR1 register
	huart1.Instance->CR1 |=(0x1 <<2);
 8002e0c:	4b0a      	ldr	r3, [pc, #40]	; (8002e38 <MyUART1_init+0x90>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	4b09      	ldr	r3, [pc, #36]	; (8002e38 <MyUART1_init+0x90>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0204 	orr.w	r2, r2, #4
 8002e1a:	601a      	str	r2, [r3, #0]
	//configuring Bits 12,13 to 0,0 for 1 stop bit in USART_CR2 register
	huart1.Instance->CR2 &=(0x3 <<12);
 8002e1c:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <MyUART1_init+0x90>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <MyUART1_init+0x90>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8002e2a:	605a      	str	r2, [r3, #4]

}
 8002e2c:	bf00      	nop
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	20001084 	.word	0x20001084

08002e3c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af02      	add	r7, sp, #8
 8002e42:	4603      	mov	r3, r0
 8002e44:	80fb      	strh	r3, [r7, #6]
	//activate the message transmission once a button is pushed
	xTaskNotifyFromISR(pUART_SendMsg, 0, eNoAction, NULL);
 8002e46:	4b07      	ldr	r3, [pc, #28]	; (8002e64 <HAL_GPIO_EXTI_Callback+0x28>)
 8002e48:	6818      	ldr	r0, [r3, #0]
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	9301      	str	r3, [sp, #4]
 8002e4e:	2300      	movs	r3, #0
 8002e50:	9300      	str	r3, [sp, #0]
 8002e52:	2300      	movs	r3, #0
 8002e54:	2200      	movs	r2, #0
 8002e56:	2100      	movs	r1, #0
 8002e58:	f7fe f904 	bl	8001064 <xTaskGenericNotifyFromISR>
}
 8002e5c:	bf00      	nop
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	20000d84 	.word	0x20000d84

08002e68 <SOS_Transmit>:
static void SOS_Transmit(void *parameter)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  repeat = 2;
 8002e70:	4b36      	ldr	r3, [pc, #216]	; (8002f4c <SOS_Transmit+0xe4>)
 8002e72:	2202      	movs	r2, #2
 8002e74:	701a      	strb	r2, [r3, #0]
	      //while(repeat>0)
	      while(1)
		  {

	        //sending 's'
	        for(int i=0; i<3; i++)
 8002e76:	2300      	movs	r3, #0
 8002e78:	613b      	str	r3, [r7, #16]
 8002e7a:	e016      	b.n	8002eaa <SOS_Transmit+0x42>
	           {
		        //turning up the led for a dot
		        //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET); or
		        //write a 1 to Bit 14 of GPIOB ODR(output data register)
		          GPIOB->ODR |=(1<<14);
 8002e7c:	4b34      	ldr	r3, [pc, #208]	; (8002f50 <SOS_Transmit+0xe8>)
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	4a33      	ldr	r2, [pc, #204]	; (8002f50 <SOS_Transmit+0xe8>)
 8002e82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e86:	6153      	str	r3, [r2, #20]
		          //HAL_Delay(300);
		          vTaskDelay(300);
 8002e88:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002e8c:	f7fd fd2c 	bl	80008e8 <vTaskDelay>

	            //turning the led off for spacing
		        //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET); or
		        //write a 0 to Bit 14 of GPIOB ODR(output data register)
		          GPIOB->ODR &=~(1<<14);
 8002e90:	4b2f      	ldr	r3, [pc, #188]	; (8002f50 <SOS_Transmit+0xe8>)
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	4a2e      	ldr	r2, [pc, #184]	; (8002f50 <SOS_Transmit+0xe8>)
 8002e96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e9a:	6153      	str	r3, [r2, #20]
		          vTaskDelay(300);
 8002e9c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002ea0:	f7fd fd22 	bl	80008e8 <vTaskDelay>
	        for(int i=0; i<3; i++)
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	dde5      	ble.n	8002e7c <SOS_Transmit+0x14>
	            }
	         //3 time units between characters
	         // HAL_Delay(300*2);
	         vTaskDelay(300*2);
 8002eb0:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002eb4:	f7fd fd18 	bl	80008e8 <vTaskDelay>

	         //sending 'o'
	         for(int i=0; i<3; i++)
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	e016      	b.n	8002eec <SOS_Transmit+0x84>
	 	       {
	 		    //turning up the led for a dash
	 		    //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
		        //write a 1 to Bit 14 of GPIOB ODR(output data register)
		  	    GPIOB->ODR |=(1<<14);
 8002ebe:	4b24      	ldr	r3, [pc, #144]	; (8002f50 <SOS_Transmit+0xe8>)
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	4a23      	ldr	r2, [pc, #140]	; (8002f50 <SOS_Transmit+0xe8>)
 8002ec4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ec8:	6153      	str	r3, [r2, #20]
	 		    //HAL_Delay(300*3);
		  	    vTaskDelay(300*3);
 8002eca:	f44f 7061 	mov.w	r0, #900	; 0x384
 8002ece:	f7fd fd0b 	bl	80008e8 <vTaskDelay>
	 	        //turning the led off for spacing
	 		    //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
	 		    //write a 0 to Bit 14 of GPIOB ODR(output data register)
	 		    GPIOB->ODR &=~(1<<14);
 8002ed2:	4b1f      	ldr	r3, [pc, #124]	; (8002f50 <SOS_Transmit+0xe8>)
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	4a1e      	ldr	r2, [pc, #120]	; (8002f50 <SOS_Transmit+0xe8>)
 8002ed8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002edc:	6153      	str	r3, [r2, #20]
	 		    //HAL_Delay(300);
	 		    vTaskDelay(300);
 8002ede:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002ee2:	f7fd fd01 	bl	80008e8 <vTaskDelay>
	         for(int i=0; i<3; i++)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	dde5      	ble.n	8002ebe <SOS_Transmit+0x56>
	 	       }
	 	     //3 time units between characters
	         //HAL_Delay(300*2);
	         vTaskDelay(300*2);
 8002ef2:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002ef6:	f7fd fcf7 	bl	80008e8 <vTaskDelay>
	         //sending 's'
	         for(int i=0; i<3; i++)
 8002efa:	2300      	movs	r3, #0
 8002efc:	617b      	str	r3, [r7, #20]
 8002efe:	e016      	b.n	8002f2e <SOS_Transmit+0xc6>
	 		  {
	 			  //turning up the led for a dot
	 			  //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
		         //write a 1 to Bit 14 of GPIOB ODR(output data register)
		  		  GPIOB->ODR |=(1<<14);
 8002f00:	4b13      	ldr	r3, [pc, #76]	; (8002f50 <SOS_Transmit+0xe8>)
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	4a12      	ldr	r2, [pc, #72]	; (8002f50 <SOS_Transmit+0xe8>)
 8002f06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f0a:	6153      	str	r3, [r2, #20]
		       // HAL_Delay(300);
		  		vTaskDelay(300);
 8002f0c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002f10:	f7fd fcea 	bl	80008e8 <vTaskDelay>
	 		      //turning the led off for spacing
	 			  //HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
		          //write a 0 to Bit 14 of GPIOB ODR(output data register)
		          GPIOB->ODR &=~(1<<14);
 8002f14:	4b0e      	ldr	r3, [pc, #56]	; (8002f50 <SOS_Transmit+0xe8>)
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	4a0d      	ldr	r2, [pc, #52]	; (8002f50 <SOS_Transmit+0xe8>)
 8002f1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f1e:	6153      	str	r3, [r2, #20]
		        //HAL_Delay(300);
		          vTaskDelay(300);
 8002f20:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002f24:	f7fd fce0 	bl	80008e8 <vTaskDelay>
	         for(int i=0; i<3; i++)
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	617b      	str	r3, [r7, #20]
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	dde5      	ble.n	8002f00 <SOS_Transmit+0x98>
	 		  }
	         //7 time units between words
	 	     // HAL_Delay(300*6);
	         vTaskDelay(300*6);
 8002f34:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8002f38:	f7fd fcd6 	bl	80008e8 <vTaskDelay>
             repeat--;
 8002f3c:	4b03      	ldr	r3, [pc, #12]	; (8002f4c <SOS_Transmit+0xe4>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	3b01      	subs	r3, #1
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	4b01      	ldr	r3, [pc, #4]	; (8002f4c <SOS_Transmit+0xe4>)
 8002f46:	701a      	strb	r2, [r3, #0]
	        for(int i=0; i<3; i++)
 8002f48:	e795      	b.n	8002e76 <SOS_Transmit+0xe>
 8002f4a:	bf00      	nop
 8002f4c:	20000d88 	.word	0x20000d88
 8002f50:	48000400 	.word	0x48000400

08002f54 <LCDDisplay>:

	  return tmp_f;
}

static void LCDDisplay(void *parameter)
{
 8002f54:	b5b0      	push	{r4, r5, r7, lr}
 8002f56:	b094      	sub	sp, #80	; 0x50
 8002f58:	af04      	add	r7, sp, #16
 8002f5a:	6078      	str	r0, [r7, #4]
   char msg_lcd[] = "Hello World - Display on SPI TFT LCD from task!\n";
 8002f5c:	4b29      	ldr	r3, [pc, #164]	; (8003004 <LCDDisplay+0xb0>)
 8002f5e:	f107 040c 	add.w	r4, r7, #12
 8002f62:	461d      	mov	r5, r3
 8002f64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f70:	682b      	ldr	r3, [r5, #0]
 8002f72:	7023      	strb	r3, [r4, #0]

   while(1){
	   ST7735_FillScreen(ST7735_GREEN);
 8002f74:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8002f78:	f7ff f8d4 	bl	8002124 <ST7735_FillScreen>
	   //ST7735_DrawString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor);
	   ST7735_DrawString(0, 0, msg_lcd, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002f7c:	4b22      	ldr	r3, [pc, #136]	; (8003008 <LCDDisplay+0xb4>)
 8002f7e:	f107 010c 	add.w	r1, r7, #12
 8002f82:	2200      	movs	r2, #0
 8002f84:	9202      	str	r2, [sp, #8]
 8002f86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f8a:	9201      	str	r2, [sp, #4]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	9200      	str	r2, [sp, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	460a      	mov	r2, r1
 8002f94:	2100      	movs	r1, #0
 8002f96:	2000      	movs	r0, #0
 8002f98:	f7fe ffd8 	bl	8001f4c <ST7735_DrawString>
	   vTaskDelay(5000);
 8002f9c:	f241 3088 	movw	r0, #5000	; 0x1388
 8002fa0:	f7fd fca2 	bl	80008e8 <vTaskDelay>
	   ST7735_FillScreen(ST7735_BLUE);
 8002fa4:	201f      	movs	r0, #31
 8002fa6:	f7ff f8bd 	bl	8002124 <ST7735_FillScreen>
	   ST7735_DrawString(0, 0, msg_lcd, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002faa:	4b17      	ldr	r3, [pc, #92]	; (8003008 <LCDDisplay+0xb4>)
 8002fac:	f107 010c 	add.w	r1, r7, #12
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	9202      	str	r2, [sp, #8]
 8002fb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fb8:	9201      	str	r2, [sp, #4]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	9200      	str	r2, [sp, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	460a      	mov	r2, r1
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	f7fe ffc1 	bl	8001f4c <ST7735_DrawString>
	   vTaskDelay(5000);
 8002fca:	f241 3088 	movw	r0, #5000	; 0x1388
 8002fce:	f7fd fc8b 	bl	80008e8 <vTaskDelay>
	   ST7735_FillScreen(ST7735_RED);
 8002fd2:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002fd6:	f7ff f8a5 	bl	8002124 <ST7735_FillScreen>
	   ST7735_DrawString(0, 0, msg_lcd, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002fda:	4b0b      	ldr	r3, [pc, #44]	; (8003008 <LCDDisplay+0xb4>)
 8002fdc:	f107 010c 	add.w	r1, r7, #12
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	9202      	str	r2, [sp, #8]
 8002fe4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fe8:	9201      	str	r2, [sp, #4]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	9200      	str	r2, [sp, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	460a      	mov	r2, r1
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	f7fe ffa9 	bl	8001f4c <ST7735_DrawString>
	   vTaskDelay(5000);
 8002ffa:	f241 3088 	movw	r0, #5000	; 0x1388
 8002ffe:	f7fd fc73 	bl	80008e8 <vTaskDelay>
	   ST7735_FillScreen(ST7735_GREEN);
 8003002:	e7b7      	b.n	8002f74 <LCDDisplay+0x20>
 8003004:	0800a50c 	.word	0x0800a50c
 8003008:	20000008 	.word	0x20000008

0800300c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a04      	ldr	r2, [pc, #16]	; (800302c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d101      	bne.n	8003022 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800301e:	f000 fcd5 	bl	80039cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003022:	bf00      	nop
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40001000 	.word	0x40001000

08003030 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003034:	b672      	cpsid	i
}
 8003036:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003038:	e7fe      	b.n	8003038 <Error_Handler+0x8>
	...

0800303c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003042:	4b0f      	ldr	r3, [pc, #60]	; (8003080 <HAL_MspInit+0x44>)
 8003044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003046:	4a0e      	ldr	r2, [pc, #56]	; (8003080 <HAL_MspInit+0x44>)
 8003048:	f043 0301 	orr.w	r3, r3, #1
 800304c:	6613      	str	r3, [r2, #96]	; 0x60
 800304e:	4b0c      	ldr	r3, [pc, #48]	; (8003080 <HAL_MspInit+0x44>)
 8003050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	607b      	str	r3, [r7, #4]
 8003058:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800305a:	4b09      	ldr	r3, [pc, #36]	; (8003080 <HAL_MspInit+0x44>)
 800305c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305e:	4a08      	ldr	r2, [pc, #32]	; (8003080 <HAL_MspInit+0x44>)
 8003060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003064:	6593      	str	r3, [r2, #88]	; 0x58
 8003066:	4b06      	ldr	r3, [pc, #24]	; (8003080 <HAL_MspInit+0x44>)
 8003068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306e:	603b      	str	r3, [r7, #0]
 8003070:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	40021000 	.word	0x40021000

08003084 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b08a      	sub	sp, #40	; 0x28
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800308c:	f107 0314 	add.w	r3, r7, #20
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	605a      	str	r2, [r3, #4]
 8003096:	609a      	str	r2, [r3, #8]
 8003098:	60da      	str	r2, [r3, #12]
 800309a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a15      	ldr	r2, [pc, #84]	; (80030f8 <HAL_ADC_MspInit+0x74>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d123      	bne.n	80030ee <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80030a6:	4b15      	ldr	r3, [pc, #84]	; (80030fc <HAL_ADC_MspInit+0x78>)
 80030a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030aa:	4a14      	ldr	r2, [pc, #80]	; (80030fc <HAL_ADC_MspInit+0x78>)
 80030ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030b2:	4b12      	ldr	r3, [pc, #72]	; (80030fc <HAL_ADC_MspInit+0x78>)
 80030b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030ba:	613b      	str	r3, [r7, #16]
 80030bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030be:	4b0f      	ldr	r3, [pc, #60]	; (80030fc <HAL_ADC_MspInit+0x78>)
 80030c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c2:	4a0e      	ldr	r2, [pc, #56]	; (80030fc <HAL_ADC_MspInit+0x78>)
 80030c4:	f043 0304 	orr.w	r3, r3, #4
 80030c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030ca:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <HAL_ADC_MspInit+0x78>)
 80030cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ce:	f003 0304 	and.w	r3, r3, #4
 80030d2:	60fb      	str	r3, [r7, #12]
 80030d4:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80030d6:	233f      	movs	r3, #63	; 0x3f
 80030d8:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80030da:	230b      	movs	r3, #11
 80030dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030de:	2300      	movs	r3, #0
 80030e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030e2:	f107 0314 	add.w	r3, r7, #20
 80030e6:	4619      	mov	r1, r3
 80030e8:	4805      	ldr	r0, [pc, #20]	; (8003100 <HAL_ADC_MspInit+0x7c>)
 80030ea:	f001 fe4d 	bl	8004d88 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80030ee:	bf00      	nop
 80030f0:	3728      	adds	r7, #40	; 0x28
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	50040000 	.word	0x50040000
 80030fc:	40021000 	.word	0x40021000
 8003100:	48000800 	.word	0x48000800

08003104 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b0ae      	sub	sp, #184	; 0xb8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800310c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	605a      	str	r2, [r3, #4]
 8003116:	609a      	str	r2, [r3, #8]
 8003118:	60da      	str	r2, [r3, #12]
 800311a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800311c:	f107 0310 	add.w	r3, r7, #16
 8003120:	2294      	movs	r2, #148	; 0x94
 8003122:	2100      	movs	r1, #0
 8003124:	4618      	mov	r0, r3
 8003126:	f007 f975 	bl	800a414 <memset>
  if(DFSDM1_Init == 0)
 800312a:	4b25      	ldr	r3, [pc, #148]	; (80031c0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d142      	bne.n	80031b8 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8003132:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003136:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8003138:	2300      	movs	r3, #0
 800313a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800313e:	f107 0310 	add.w	r3, r7, #16
 8003142:	4618      	mov	r0, r3
 8003144:	f004 fb72 	bl	800782c <HAL_RCCEx_PeriphCLKConfig>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800314e:	f7ff ff6f 	bl	8003030 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8003152:	4b1c      	ldr	r3, [pc, #112]	; (80031c4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003156:	4a1b      	ldr	r2, [pc, #108]	; (80031c4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003158:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800315c:	6613      	str	r3, [r2, #96]	; 0x60
 800315e:	4b19      	ldr	r3, [pc, #100]	; (80031c4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003162:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800316a:	4b16      	ldr	r3, [pc, #88]	; (80031c4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800316c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800316e:	4a15      	ldr	r2, [pc, #84]	; (80031c4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003170:	f043 0310 	orr.w	r3, r3, #16
 8003174:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003176:	4b13      	ldr	r3, [pc, #76]	; (80031c4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800317a:	f003 0310 	and.w	r3, r3, #16
 800317e:	60bb      	str	r3, [r7, #8]
 8003180:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8003182:	f44f 7320 	mov.w	r3, #640	; 0x280
 8003186:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800318a:	2302      	movs	r3, #2
 800318c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003190:	2300      	movs	r3, #0
 8003192:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003196:	2300      	movs	r3, #0
 8003198:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800319c:	2306      	movs	r3, #6
 800319e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031a2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80031a6:	4619      	mov	r1, r3
 80031a8:	4807      	ldr	r0, [pc, #28]	; (80031c8 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80031aa:	f001 fded 	bl	8004d88 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80031ae:	4b04      	ldr	r3, [pc, #16]	; (80031c0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	3301      	adds	r3, #1
 80031b4:	4a02      	ldr	r2, [pc, #8]	; (80031c0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80031b6:	6013      	str	r3, [r2, #0]
  }

}
 80031b8:	bf00      	nop
 80031ba:	37b8      	adds	r7, #184	; 0xb8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	20001240 	.word	0x20001240
 80031c4:	40021000 	.word	0x40021000
 80031c8:	48001000 	.word	0x48001000

080031cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b0b0      	sub	sp, #192	; 0xc0
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	605a      	str	r2, [r3, #4]
 80031de:	609a      	str	r2, [r3, #8]
 80031e0:	60da      	str	r2, [r3, #12]
 80031e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031e4:	f107 0318 	add.w	r3, r7, #24
 80031e8:	2294      	movs	r2, #148	; 0x94
 80031ea:	2100      	movs	r1, #0
 80031ec:	4618      	mov	r0, r3
 80031ee:	f007 f911 	bl	800a414 <memset>
  if(hi2c->Instance==I2C1)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a4a      	ldr	r2, [pc, #296]	; (8003320 <HAL_I2C_MspInit+0x154>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d13c      	bne.n	8003276 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80031fc:	2340      	movs	r3, #64	; 0x40
 80031fe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003200:	2300      	movs	r3, #0
 8003202:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003204:	f107 0318 	add.w	r3, r7, #24
 8003208:	4618      	mov	r0, r3
 800320a:	f004 fb0f 	bl	800782c <HAL_RCCEx_PeriphCLKConfig>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003214:	f7ff ff0c 	bl	8003030 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003218:	4b42      	ldr	r3, [pc, #264]	; (8003324 <HAL_I2C_MspInit+0x158>)
 800321a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800321c:	4a41      	ldr	r2, [pc, #260]	; (8003324 <HAL_I2C_MspInit+0x158>)
 800321e:	f043 0302 	orr.w	r3, r3, #2
 8003222:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003224:	4b3f      	ldr	r3, [pc, #252]	; (8003324 <HAL_I2C_MspInit+0x158>)
 8003226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	617b      	str	r3, [r7, #20]
 800322e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8003230:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003234:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003238:	2312      	movs	r3, #18
 800323a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800323e:	2301      	movs	r3, #1
 8003240:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003244:	2303      	movs	r3, #3
 8003246:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800324a:	2304      	movs	r3, #4
 800324c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003250:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003254:	4619      	mov	r1, r3
 8003256:	4834      	ldr	r0, [pc, #208]	; (8003328 <HAL_I2C_MspInit+0x15c>)
 8003258:	f001 fd96 	bl	8004d88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800325c:	4b31      	ldr	r3, [pc, #196]	; (8003324 <HAL_I2C_MspInit+0x158>)
 800325e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003260:	4a30      	ldr	r2, [pc, #192]	; (8003324 <HAL_I2C_MspInit+0x158>)
 8003262:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003266:	6593      	str	r3, [r2, #88]	; 0x58
 8003268:	4b2e      	ldr	r3, [pc, #184]	; (8003324 <HAL_I2C_MspInit+0x158>)
 800326a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003270:	613b      	str	r3, [r7, #16]
 8003272:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003274:	e050      	b.n	8003318 <HAL_I2C_MspInit+0x14c>
  else if(hi2c->Instance==I2C2)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a2c      	ldr	r2, [pc, #176]	; (800332c <HAL_I2C_MspInit+0x160>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d14b      	bne.n	8003318 <HAL_I2C_MspInit+0x14c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003280:	2380      	movs	r3, #128	; 0x80
 8003282:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003284:	2300      	movs	r3, #0
 8003286:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003288:	f107 0318 	add.w	r3, r7, #24
 800328c:	4618      	mov	r0, r3
 800328e:	f004 facd 	bl	800782c <HAL_RCCEx_PeriphCLKConfig>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8003298:	f7ff feca 	bl	8003030 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800329c:	4b21      	ldr	r3, [pc, #132]	; (8003324 <HAL_I2C_MspInit+0x158>)
 800329e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a0:	4a20      	ldr	r2, [pc, #128]	; (8003324 <HAL_I2C_MspInit+0x158>)
 80032a2:	f043 0302 	orr.w	r3, r3, #2
 80032a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032a8:	4b1e      	ldr	r3, [pc, #120]	; (8003324 <HAL_I2C_MspInit+0x158>)
 80032aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80032b4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80032b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032bc:	2312      	movs	r3, #18
 80032be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032c2:	2301      	movs	r3, #1
 80032c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032c8:	2303      	movs	r3, #3
 80032ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80032ce:	2304      	movs	r3, #4
 80032d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032d4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80032d8:	4619      	mov	r1, r3
 80032da:	4813      	ldr	r0, [pc, #76]	; (8003328 <HAL_I2C_MspInit+0x15c>)
 80032dc:	f001 fd54 	bl	8004d88 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80032e0:	4b10      	ldr	r3, [pc, #64]	; (8003324 <HAL_I2C_MspInit+0x158>)
 80032e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e4:	4a0f      	ldr	r2, [pc, #60]	; (8003324 <HAL_I2C_MspInit+0x158>)
 80032e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032ea:	6593      	str	r3, [r2, #88]	; 0x58
 80032ec:	4b0d      	ldr	r3, [pc, #52]	; (8003324 <HAL_I2C_MspInit+0x158>)
 80032ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032f4:	60bb      	str	r3, [r7, #8]
 80032f6:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 6, 0);
 80032f8:	2200      	movs	r2, #0
 80032fa:	2106      	movs	r1, #6
 80032fc:	2021      	movs	r0, #33	; 0x21
 80032fe:	f001 fb43 	bl	8004988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8003302:	2021      	movs	r0, #33	; 0x21
 8003304:	f001 fb5c 	bl	80049c0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 6, 0);
 8003308:	2200      	movs	r2, #0
 800330a:	2106      	movs	r1, #6
 800330c:	2022      	movs	r0, #34	; 0x22
 800330e:	f001 fb3b 	bl	8004988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8003312:	2022      	movs	r0, #34	; 0x22
 8003314:	f001 fb54 	bl	80049c0 <HAL_NVIC_EnableIRQ>
}
 8003318:	bf00      	nop
 800331a:	37c0      	adds	r7, #192	; 0xc0
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	40005400 	.word	0x40005400
 8003324:	40021000 	.word	0x40021000
 8003328:	48000400 	.word	0x48000400
 800332c:	40005800 	.word	0x40005800

08003330 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b0b0      	sub	sp, #192	; 0xc0
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003338:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	605a      	str	r2, [r3, #4]
 8003342:	609a      	str	r2, [r3, #8]
 8003344:	60da      	str	r2, [r3, #12]
 8003346:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003348:	f107 0318 	add.w	r3, r7, #24
 800334c:	2294      	movs	r2, #148	; 0x94
 800334e:	2100      	movs	r1, #0
 8003350:	4618      	mov	r0, r3
 8003352:	f007 f85f 	bl	800a414 <memset>
  if(hospi->Instance==OCTOSPI1)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a28      	ldr	r2, [pc, #160]	; (80033fc <HAL_OSPI_MspInit+0xcc>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d149      	bne.n	80033f4 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8003360:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003364:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8003366:	2300      	movs	r3, #0
 8003368:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800336c:	f107 0318 	add.w	r3, r7, #24
 8003370:	4618      	mov	r0, r3
 8003372:	f004 fa5b 	bl	800782c <HAL_RCCEx_PeriphCLKConfig>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 800337c:	f7ff fe58 	bl	8003030 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8003380:	4b1f      	ldr	r3, [pc, #124]	; (8003400 <HAL_OSPI_MspInit+0xd0>)
 8003382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003384:	4a1e      	ldr	r2, [pc, #120]	; (8003400 <HAL_OSPI_MspInit+0xd0>)
 8003386:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800338a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800338c:	4b1c      	ldr	r3, [pc, #112]	; (8003400 <HAL_OSPI_MspInit+0xd0>)
 800338e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003390:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003394:	617b      	str	r3, [r7, #20]
 8003396:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8003398:	4b19      	ldr	r3, [pc, #100]	; (8003400 <HAL_OSPI_MspInit+0xd0>)
 800339a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800339c:	4a18      	ldr	r2, [pc, #96]	; (8003400 <HAL_OSPI_MspInit+0xd0>)
 800339e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a2:	6513      	str	r3, [r2, #80]	; 0x50
 80033a4:	4b16      	ldr	r3, [pc, #88]	; (8003400 <HAL_OSPI_MspInit+0xd0>)
 80033a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ac:	613b      	str	r3, [r7, #16]
 80033ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80033b0:	4b13      	ldr	r3, [pc, #76]	; (8003400 <HAL_OSPI_MspInit+0xd0>)
 80033b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b4:	4a12      	ldr	r2, [pc, #72]	; (8003400 <HAL_OSPI_MspInit+0xd0>)
 80033b6:	f043 0310 	orr.w	r3, r3, #16
 80033ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033bc:	4b10      	ldr	r3, [pc, #64]	; (8003400 <HAL_OSPI_MspInit+0xd0>)
 80033be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033c0:	f003 0310 	and.w	r3, r3, #16
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80033c8:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80033cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d0:	2302      	movs	r3, #2
 80033d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d6:	2300      	movs	r3, #0
 80033d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033dc:	2303      	movs	r3, #3
 80033de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80033e2:	230a      	movs	r3, #10
 80033e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033e8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80033ec:	4619      	mov	r1, r3
 80033ee:	4805      	ldr	r0, [pc, #20]	; (8003404 <HAL_OSPI_MspInit+0xd4>)
 80033f0:	f001 fcca 	bl	8004d88 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 80033f4:	bf00      	nop
 80033f6:	37c0      	adds	r7, #192	; 0xc0
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	a0001000 	.word	0xa0001000
 8003400:	40021000 	.word	0x40021000
 8003404:	48001000 	.word	0x48001000

08003408 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b08c      	sub	sp, #48	; 0x30
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003410:	f107 031c 	add.w	r3, r7, #28
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	605a      	str	r2, [r3, #4]
 800341a:	609a      	str	r2, [r3, #8]
 800341c:	60da      	str	r2, [r3, #12]
 800341e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a2f      	ldr	r2, [pc, #188]	; (80034e4 <HAL_SPI_MspInit+0xdc>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d129      	bne.n	800347e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800342a:	4b2f      	ldr	r3, [pc, #188]	; (80034e8 <HAL_SPI_MspInit+0xe0>)
 800342c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800342e:	4a2e      	ldr	r2, [pc, #184]	; (80034e8 <HAL_SPI_MspInit+0xe0>)
 8003430:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003434:	6613      	str	r3, [r2, #96]	; 0x60
 8003436:	4b2c      	ldr	r3, [pc, #176]	; (80034e8 <HAL_SPI_MspInit+0xe0>)
 8003438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800343a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800343e:	61bb      	str	r3, [r7, #24]
 8003440:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003442:	4b29      	ldr	r3, [pc, #164]	; (80034e8 <HAL_SPI_MspInit+0xe0>)
 8003444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003446:	4a28      	ldr	r2, [pc, #160]	; (80034e8 <HAL_SPI_MspInit+0xe0>)
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800344e:	4b26      	ldr	r3, [pc, #152]	; (80034e8 <HAL_SPI_MspInit+0xe0>)
 8003450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800345a:	23e0      	movs	r3, #224	; 0xe0
 800345c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800345e:	2302      	movs	r3, #2
 8003460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003462:	2300      	movs	r3, #0
 8003464:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003466:	2303      	movs	r3, #3
 8003468:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800346a:	2305      	movs	r3, #5
 800346c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800346e:	f107 031c 	add.w	r3, r7, #28
 8003472:	4619      	mov	r1, r3
 8003474:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003478:	f001 fc86 	bl	8004d88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800347c:	e02d      	b.n	80034da <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a1a      	ldr	r2, [pc, #104]	; (80034ec <HAL_SPI_MspInit+0xe4>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d128      	bne.n	80034da <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003488:	4b17      	ldr	r3, [pc, #92]	; (80034e8 <HAL_SPI_MspInit+0xe0>)
 800348a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800348c:	4a16      	ldr	r2, [pc, #88]	; (80034e8 <HAL_SPI_MspInit+0xe0>)
 800348e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003492:	6593      	str	r3, [r2, #88]	; 0x58
 8003494:	4b14      	ldr	r3, [pc, #80]	; (80034e8 <HAL_SPI_MspInit+0xe0>)
 8003496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003498:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800349c:	613b      	str	r3, [r7, #16]
 800349e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034a0:	4b11      	ldr	r3, [pc, #68]	; (80034e8 <HAL_SPI_MspInit+0xe0>)
 80034a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034a4:	4a10      	ldr	r2, [pc, #64]	; (80034e8 <HAL_SPI_MspInit+0xe0>)
 80034a6:	f043 0304 	orr.w	r3, r3, #4
 80034aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034ac:	4b0e      	ldr	r3, [pc, #56]	; (80034e8 <HAL_SPI_MspInit+0xe0>)
 80034ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80034b8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80034bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034be:	2302      	movs	r3, #2
 80034c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c2:	2300      	movs	r3, #0
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034c6:	2303      	movs	r3, #3
 80034c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80034ca:	2306      	movs	r3, #6
 80034cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034ce:	f107 031c 	add.w	r3, r7, #28
 80034d2:	4619      	mov	r1, r3
 80034d4:	4806      	ldr	r0, [pc, #24]	; (80034f0 <HAL_SPI_MspInit+0xe8>)
 80034d6:	f001 fc57 	bl	8004d88 <HAL_GPIO_Init>
}
 80034da:	bf00      	nop
 80034dc:	3730      	adds	r7, #48	; 0x30
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	40013000 	.word	0x40013000
 80034e8:	40021000 	.word	0x40021000
 80034ec:	40003c00 	.word	0x40003c00
 80034f0:	48000800 	.word	0x48000800

080034f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b0b4      	sub	sp, #208	; 0xd0
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034fc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	605a      	str	r2, [r3, #4]
 8003506:	609a      	str	r2, [r3, #8]
 8003508:	60da      	str	r2, [r3, #12]
 800350a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800350c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003510:	2294      	movs	r2, #148	; 0x94
 8003512:	2100      	movs	r1, #0
 8003514:	4618      	mov	r0, r3
 8003516:	f006 ff7d 	bl	800a414 <memset>
  if(huart->Instance==UART4)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a87      	ldr	r2, [pc, #540]	; (800373c <HAL_UART_MspInit+0x248>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d13c      	bne.n	800359e <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003524:	2308      	movs	r3, #8
 8003526:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003528:	2300      	movs	r3, #0
 800352a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800352c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003530:	4618      	mov	r0, r3
 8003532:	f004 f97b 	bl	800782c <HAL_RCCEx_PeriphCLKConfig>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800353c:	f7ff fd78 	bl	8003030 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003540:	4b7f      	ldr	r3, [pc, #508]	; (8003740 <HAL_UART_MspInit+0x24c>)
 8003542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003544:	4a7e      	ldr	r2, [pc, #504]	; (8003740 <HAL_UART_MspInit+0x24c>)
 8003546:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800354a:	6593      	str	r3, [r2, #88]	; 0x58
 800354c:	4b7c      	ldr	r3, [pc, #496]	; (8003740 <HAL_UART_MspInit+0x24c>)
 800354e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003550:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003554:	627b      	str	r3, [r7, #36]	; 0x24
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003558:	4b79      	ldr	r3, [pc, #484]	; (8003740 <HAL_UART_MspInit+0x24c>)
 800355a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800355c:	4a78      	ldr	r2, [pc, #480]	; (8003740 <HAL_UART_MspInit+0x24c>)
 800355e:	f043 0301 	orr.w	r3, r3, #1
 8003562:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003564:	4b76      	ldr	r3, [pc, #472]	; (8003740 <HAL_UART_MspInit+0x24c>)
 8003566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	623b      	str	r3, [r7, #32]
 800356e:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8003570:	2303      	movs	r3, #3
 8003572:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003576:	2302      	movs	r3, #2
 8003578:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357c:	2300      	movs	r3, #0
 800357e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003582:	2303      	movs	r3, #3
 8003584:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003588:	2308      	movs	r3, #8
 800358a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800358e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003592:	4619      	mov	r1, r3
 8003594:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003598:	f001 fbf6 	bl	8004d88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800359c:	e0ca      	b.n	8003734 <HAL_UART_MspInit+0x240>
  else if(huart->Instance==USART1)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a68      	ldr	r2, [pc, #416]	; (8003744 <HAL_UART_MspInit+0x250>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d143      	bne.n	8003630 <HAL_UART_MspInit+0x13c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80035a8:	2301      	movs	r3, #1
 80035aa:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80035ac:	2300      	movs	r3, #0
 80035ae:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035b4:	4618      	mov	r0, r3
 80035b6:	f004 f939 	bl	800782c <HAL_RCCEx_PeriphCLKConfig>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80035c0:	f7ff fd36 	bl	8003030 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80035c4:	4b5e      	ldr	r3, [pc, #376]	; (8003740 <HAL_UART_MspInit+0x24c>)
 80035c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c8:	4a5d      	ldr	r2, [pc, #372]	; (8003740 <HAL_UART_MspInit+0x24c>)
 80035ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035ce:	6613      	str	r3, [r2, #96]	; 0x60
 80035d0:	4b5b      	ldr	r3, [pc, #364]	; (8003740 <HAL_UART_MspInit+0x24c>)
 80035d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035d8:	61fb      	str	r3, [r7, #28]
 80035da:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035dc:	4b58      	ldr	r3, [pc, #352]	; (8003740 <HAL_UART_MspInit+0x24c>)
 80035de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e0:	4a57      	ldr	r2, [pc, #348]	; (8003740 <HAL_UART_MspInit+0x24c>)
 80035e2:	f043 0302 	orr.w	r3, r3, #2
 80035e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035e8:	4b55      	ldr	r3, [pc, #340]	; (8003740 <HAL_UART_MspInit+0x24c>)
 80035ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ec:	f003 0302 	and.w	r3, r3, #2
 80035f0:	61bb      	str	r3, [r7, #24]
 80035f2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80035f4:	23c0      	movs	r3, #192	; 0xc0
 80035f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035fa:	2302      	movs	r3, #2
 80035fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003600:	2300      	movs	r3, #0
 8003602:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003606:	2303      	movs	r3, #3
 8003608:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800360c:	2307      	movs	r3, #7
 800360e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003612:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003616:	4619      	mov	r1, r3
 8003618:	484b      	ldr	r0, [pc, #300]	; (8003748 <HAL_UART_MspInit+0x254>)
 800361a:	f001 fbb5 	bl	8004d88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 800361e:	2200      	movs	r2, #0
 8003620:	2106      	movs	r1, #6
 8003622:	2025      	movs	r0, #37	; 0x25
 8003624:	f001 f9b0 	bl	8004988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003628:	2025      	movs	r0, #37	; 0x25
 800362a:	f001 f9c9 	bl	80049c0 <HAL_NVIC_EnableIRQ>
}
 800362e:	e081      	b.n	8003734 <HAL_UART_MspInit+0x240>
  else if(huart->Instance==USART2)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a45      	ldr	r2, [pc, #276]	; (800374c <HAL_UART_MspInit+0x258>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d13b      	bne.n	80036b2 <HAL_UART_MspInit+0x1be>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800363a:	2302      	movs	r3, #2
 800363c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800363e:	2300      	movs	r3, #0
 8003640:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003642:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003646:	4618      	mov	r0, r3
 8003648:	f004 f8f0 	bl	800782c <HAL_RCCEx_PeriphCLKConfig>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <HAL_UART_MspInit+0x162>
      Error_Handler();
 8003652:	f7ff fced 	bl	8003030 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003656:	4b3a      	ldr	r3, [pc, #232]	; (8003740 <HAL_UART_MspInit+0x24c>)
 8003658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800365a:	4a39      	ldr	r2, [pc, #228]	; (8003740 <HAL_UART_MspInit+0x24c>)
 800365c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003660:	6593      	str	r3, [r2, #88]	; 0x58
 8003662:	4b37      	ldr	r3, [pc, #220]	; (8003740 <HAL_UART_MspInit+0x24c>)
 8003664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366a:	617b      	str	r3, [r7, #20]
 800366c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800366e:	4b34      	ldr	r3, [pc, #208]	; (8003740 <HAL_UART_MspInit+0x24c>)
 8003670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003672:	4a33      	ldr	r2, [pc, #204]	; (8003740 <HAL_UART_MspInit+0x24c>)
 8003674:	f043 0308 	orr.w	r3, r3, #8
 8003678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800367a:	4b31      	ldr	r3, [pc, #196]	; (8003740 <HAL_UART_MspInit+0x24c>)
 800367c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800367e:	f003 0308 	and.w	r3, r3, #8
 8003682:	613b      	str	r3, [r7, #16]
 8003684:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8003686:	2378      	movs	r3, #120	; 0x78
 8003688:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368c:	2302      	movs	r3, #2
 800368e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003692:	2300      	movs	r3, #0
 8003694:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003698:	2303      	movs	r3, #3
 800369a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800369e:	2307      	movs	r3, #7
 80036a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036a4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80036a8:	4619      	mov	r1, r3
 80036aa:	4829      	ldr	r0, [pc, #164]	; (8003750 <HAL_UART_MspInit+0x25c>)
 80036ac:	f001 fb6c 	bl	8004d88 <HAL_GPIO_Init>
}
 80036b0:	e040      	b.n	8003734 <HAL_UART_MspInit+0x240>
  else if(huart->Instance==USART3)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a27      	ldr	r2, [pc, #156]	; (8003754 <HAL_UART_MspInit+0x260>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d13b      	bne.n	8003734 <HAL_UART_MspInit+0x240>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80036bc:	2304      	movs	r3, #4
 80036be:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80036c0:	2300      	movs	r3, #0
 80036c2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036c8:	4618      	mov	r0, r3
 80036ca:	f004 f8af 	bl	800782c <HAL_RCCEx_PeriphCLKConfig>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <HAL_UART_MspInit+0x1e4>
      Error_Handler();
 80036d4:	f7ff fcac 	bl	8003030 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80036d8:	4b19      	ldr	r3, [pc, #100]	; (8003740 <HAL_UART_MspInit+0x24c>)
 80036da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036dc:	4a18      	ldr	r2, [pc, #96]	; (8003740 <HAL_UART_MspInit+0x24c>)
 80036de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036e2:	6593      	str	r3, [r2, #88]	; 0x58
 80036e4:	4b16      	ldr	r3, [pc, #88]	; (8003740 <HAL_UART_MspInit+0x24c>)
 80036e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036f0:	4b13      	ldr	r3, [pc, #76]	; (8003740 <HAL_UART_MspInit+0x24c>)
 80036f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036f4:	4a12      	ldr	r2, [pc, #72]	; (8003740 <HAL_UART_MspInit+0x24c>)
 80036f6:	f043 0308 	orr.w	r3, r3, #8
 80036fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036fc:	4b10      	ldr	r3, [pc, #64]	; (8003740 <HAL_UART_MspInit+0x24c>)
 80036fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003700:	f003 0308 	and.w	r3, r3, #8
 8003704:	60bb      	str	r3, [r7, #8]
 8003706:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8003708:	f44f 7340 	mov.w	r3, #768	; 0x300
 800370c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003710:	2302      	movs	r3, #2
 8003712:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003716:	2300      	movs	r3, #0
 8003718:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800371c:	2303      	movs	r3, #3
 800371e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003722:	2307      	movs	r3, #7
 8003724:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003728:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800372c:	4619      	mov	r1, r3
 800372e:	4808      	ldr	r0, [pc, #32]	; (8003750 <HAL_UART_MspInit+0x25c>)
 8003730:	f001 fb2a 	bl	8004d88 <HAL_GPIO_Init>
}
 8003734:	bf00      	nop
 8003736:	37d0      	adds	r7, #208	; 0xd0
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	40004c00 	.word	0x40004c00
 8003740:	40021000 	.word	0x40021000
 8003744:	40013800 	.word	0x40013800
 8003748:	48000400 	.word	0x48000400
 800374c:	40004400 	.word	0x40004400
 8003750:	48000c00 	.word	0x48000c00
 8003754:	40004800 	.word	0x40004800

08003758 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b08e      	sub	sp, #56	; 0x38
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003760:	2300      	movs	r3, #0
 8003762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003766:	4b34      	ldr	r3, [pc, #208]	; (8003838 <HAL_InitTick+0xe0>)
 8003768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376a:	4a33      	ldr	r2, [pc, #204]	; (8003838 <HAL_InitTick+0xe0>)
 800376c:	f043 0310 	orr.w	r3, r3, #16
 8003770:	6593      	str	r3, [r2, #88]	; 0x58
 8003772:	4b31      	ldr	r3, [pc, #196]	; (8003838 <HAL_InitTick+0xe0>)
 8003774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003776:	f003 0310 	and.w	r3, r3, #16
 800377a:	60fb      	str	r3, [r7, #12]
 800377c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800377e:	f107 0210 	add.w	r2, r7, #16
 8003782:	f107 0314 	add.w	r3, r7, #20
 8003786:	4611      	mov	r1, r2
 8003788:	4618      	mov	r0, r3
 800378a:	f003 ff5d 	bl	8007648 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800378e:	6a3b      	ldr	r3, [r7, #32]
 8003790:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003794:	2b00      	cmp	r3, #0
 8003796:	d103      	bne.n	80037a0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003798:	f003 ff2a 	bl	80075f0 <HAL_RCC_GetPCLK1Freq>
 800379c:	6378      	str	r0, [r7, #52]	; 0x34
 800379e:	e004      	b.n	80037aa <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80037a0:	f003 ff26 	bl	80075f0 <HAL_RCC_GetPCLK1Freq>
 80037a4:	4603      	mov	r3, r0
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80037aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ac:	4a23      	ldr	r2, [pc, #140]	; (800383c <HAL_InitTick+0xe4>)
 80037ae:	fba2 2303 	umull	r2, r3, r2, r3
 80037b2:	0c9b      	lsrs	r3, r3, #18
 80037b4:	3b01      	subs	r3, #1
 80037b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80037b8:	4b21      	ldr	r3, [pc, #132]	; (8003840 <HAL_InitTick+0xe8>)
 80037ba:	4a22      	ldr	r2, [pc, #136]	; (8003844 <HAL_InitTick+0xec>)
 80037bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80037be:	4b20      	ldr	r3, [pc, #128]	; (8003840 <HAL_InitTick+0xe8>)
 80037c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80037c4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80037c6:	4a1e      	ldr	r2, [pc, #120]	; (8003840 <HAL_InitTick+0xe8>)
 80037c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ca:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80037cc:	4b1c      	ldr	r3, [pc, #112]	; (8003840 <HAL_InitTick+0xe8>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037d2:	4b1b      	ldr	r3, [pc, #108]	; (8003840 <HAL_InitTick+0xe8>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037d8:	4b19      	ldr	r3, [pc, #100]	; (8003840 <HAL_InitTick+0xe8>)
 80037da:	2200      	movs	r2, #0
 80037dc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80037de:	4818      	ldr	r0, [pc, #96]	; (8003840 <HAL_InitTick+0xe8>)
 80037e0:	f005 f8c8 	bl	8008974 <HAL_TIM_Base_Init>
 80037e4:	4603      	mov	r3, r0
 80037e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80037ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d11b      	bne.n	800382a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80037f2:	4813      	ldr	r0, [pc, #76]	; (8003840 <HAL_InitTick+0xe8>)
 80037f4:	f005 f920 	bl	8008a38 <HAL_TIM_Base_Start_IT>
 80037f8:	4603      	mov	r3, r0
 80037fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80037fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003802:	2b00      	cmp	r3, #0
 8003804:	d111      	bne.n	800382a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003806:	2036      	movs	r0, #54	; 0x36
 8003808:	f001 f8da 	bl	80049c0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b0f      	cmp	r3, #15
 8003810:	d808      	bhi.n	8003824 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003812:	2200      	movs	r2, #0
 8003814:	6879      	ldr	r1, [r7, #4]
 8003816:	2036      	movs	r0, #54	; 0x36
 8003818:	f001 f8b6 	bl	8004988 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800381c:	4a0a      	ldr	r2, [pc, #40]	; (8003848 <HAL_InitTick+0xf0>)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6013      	str	r3, [r2, #0]
 8003822:	e002      	b.n	800382a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800382a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800382e:	4618      	mov	r0, r3
 8003830:	3738      	adds	r7, #56	; 0x38
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	40021000 	.word	0x40021000
 800383c:	431bde83 	.word	0x431bde83
 8003840:	20001244 	.word	0x20001244
 8003844:	40001000 	.word	0x40001000
 8003848:	20000050 	.word	0x20000050

0800384c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003850:	e7fe      	b.n	8003850 <NMI_Handler+0x4>

08003852 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003852:	b480      	push	{r7}
 8003854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003856:	e7fe      	b.n	8003856 <HardFault_Handler+0x4>

08003858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800385c:	e7fe      	b.n	800385c <MemManage_Handler+0x4>

0800385e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800385e:	b480      	push	{r7}
 8003860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003862:	e7fe      	b.n	8003862 <BusFault_Handler+0x4>

08003864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003868:	e7fe      	b.n	8003868 <UsageFault_Handler+0x4>

0800386a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800386a:	b480      	push	{r7}
 800386c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800386e:	bf00      	nop
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 800387c:	2020      	movs	r0, #32
 800387e:	f001 fc2d 	bl	80050dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8003882:	2040      	movs	r0, #64	; 0x40
 8003884:	f001 fc2a 	bl	80050dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8003888:	2080      	movs	r0, #128	; 0x80
 800388a:	f001 fc27 	bl	80050dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800388e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003892:	f001 fc23 	bl	80050dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003896:	bf00      	nop
 8003898:	bd80      	pop	{r7, pc}
	...

0800389c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80038a0:	4802      	ldr	r0, [pc, #8]	; (80038ac <I2C2_EV_IRQHandler+0x10>)
 80038a2:	f001 fcce 	bl	8005242 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80038a6:	bf00      	nop
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	20000e84 	.word	0x20000e84

080038b0 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80038b4:	4802      	ldr	r0, [pc, #8]	; (80038c0 <I2C2_ER_IRQHandler+0x10>)
 80038b6:	f001 fcde 	bl	8005276 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80038ba:	bf00      	nop
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	20000e84 	.word	0x20000e84

080038c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80038c8:	4802      	ldr	r0, [pc, #8]	; (80038d4 <USART1_IRQHandler+0x10>)
 80038ca:	f005 fbe7 	bl	800909c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80038ce:	bf00      	nop
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	20001084 	.word	0x20001084

080038d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 80038dc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80038e0:	f001 fbfc 	bl	80050dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80038e4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80038e8:	f001 fbf8 	bl	80050dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 80038ec:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80038f0:	f001 fbf4 	bl	80050dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80038f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80038f8:	f001 fbf0 	bl	80050dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80038fc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003900:	f001 fbec 	bl	80050dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8003904:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003908:	f001 fbe8 	bl	80050dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800390c:	bf00      	nop
 800390e:	bd80      	pop	{r7, pc}

08003910 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003914:	4802      	ldr	r0, [pc, #8]	; (8003920 <TIM6_DAC_IRQHandler+0x10>)
 8003916:	f005 f8ff 	bl	8008b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800391a:	bf00      	nop
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	20001244 	.word	0x20001244

08003924 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003928:	4b06      	ldr	r3, [pc, #24]	; (8003944 <SystemInit+0x20>)
 800392a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800392e:	4a05      	ldr	r2, [pc, #20]	; (8003944 <SystemInit+0x20>)
 8003930:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003934:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003938:	bf00      	nop
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	e000ed00 	.word	0xe000ed00

08003948 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003948:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003980 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800394c:	f7ff ffea 	bl	8003924 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003950:	480c      	ldr	r0, [pc, #48]	; (8003984 <LoopForever+0x6>)
  ldr r1, =_edata
 8003952:	490d      	ldr	r1, [pc, #52]	; (8003988 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003954:	4a0d      	ldr	r2, [pc, #52]	; (800398c <LoopForever+0xe>)
  movs r3, #0
 8003956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003958:	e002      	b.n	8003960 <LoopCopyDataInit>

0800395a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800395a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800395c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800395e:	3304      	adds	r3, #4

08003960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003964:	d3f9      	bcc.n	800395a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003966:	4a0a      	ldr	r2, [pc, #40]	; (8003990 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003968:	4c0a      	ldr	r4, [pc, #40]	; (8003994 <LoopForever+0x16>)
  movs r3, #0
 800396a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800396c:	e001      	b.n	8003972 <LoopFillZerobss>

0800396e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800396e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003970:	3204      	adds	r2, #4

08003972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003974:	d3fb      	bcc.n	800396e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003976:	f006 fd55 	bl	800a424 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800397a:	f7fe fbfb 	bl	8002174 <main>

0800397e <LoopForever>:

LoopForever:
    b LoopForever
 800397e:	e7fe      	b.n	800397e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003980:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8003984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003988:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 800398c:	0800ada4 	.word	0x0800ada4
  ldr r2, =_sbss
 8003990:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8003994:	200012b8 	.word	0x200012b8

08003998 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003998:	e7fe      	b.n	8003998 <ADC1_IRQHandler>

0800399a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b082      	sub	sp, #8
 800399e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80039a0:	2300      	movs	r3, #0
 80039a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039a4:	2003      	movs	r0, #3
 80039a6:	f000 ffe4 	bl	8004972 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80039aa:	200f      	movs	r0, #15
 80039ac:	f7ff fed4 	bl	8003758 <HAL_InitTick>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d002      	beq.n	80039bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	71fb      	strb	r3, [r7, #7]
 80039ba:	e001      	b.n	80039c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80039bc:	f7ff fb3e 	bl	800303c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80039c0:	79fb      	ldrb	r3, [r7, #7]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
	...

080039cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80039d0:	4b06      	ldr	r3, [pc, #24]	; (80039ec <HAL_IncTick+0x20>)
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	461a      	mov	r2, r3
 80039d6:	4b06      	ldr	r3, [pc, #24]	; (80039f0 <HAL_IncTick+0x24>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4413      	add	r3, r2
 80039dc:	4a04      	ldr	r2, [pc, #16]	; (80039f0 <HAL_IncTick+0x24>)
 80039de:	6013      	str	r3, [r2, #0]
}
 80039e0:	bf00      	nop
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	20000054 	.word	0x20000054
 80039f0:	20001290 	.word	0x20001290

080039f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
  return uwTick;
 80039f8:	4b03      	ldr	r3, [pc, #12]	; (8003a08 <HAL_GetTick+0x14>)
 80039fa:	681b      	ldr	r3, [r3, #0]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	20001290 	.word	0x20001290

08003a0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a14:	f7ff ffee 	bl	80039f4 <HAL_GetTick>
 8003a18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a24:	d005      	beq.n	8003a32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003a26:	4b0a      	ldr	r3, [pc, #40]	; (8003a50 <HAL_Delay+0x44>)
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4413      	add	r3, r2
 8003a30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a32:	bf00      	nop
 8003a34:	f7ff ffde 	bl	80039f4 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d8f7      	bhi.n	8003a34 <HAL_Delay+0x28>
  {
  }
}
 8003a44:	bf00      	nop
 8003a46:	bf00      	nop
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	20000054 	.word	0x20000054

08003a54 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	609a      	str	r2, [r3, #8]
}
 8003a6e:	bf00      	nop
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
 8003a82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	609a      	str	r2, [r3, #8]
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b087      	sub	sp, #28
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
 8003ac8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	3360      	adds	r3, #96	; 0x60
 8003ace:	461a      	mov	r2, r3
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	4b08      	ldr	r3, [pc, #32]	; (8003b00 <LL_ADC_SetOffset+0x44>)
 8003ade:	4013      	ands	r3, r2
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	4313      	orrs	r3, r2
 8003aec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003af4:	bf00      	nop
 8003af6:	371c      	adds	r7, #28
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	03fff000 	.word	0x03fff000

08003b04 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3360      	adds	r3, #96	; 0x60
 8003b12:	461a      	mov	r2, r3
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3714      	adds	r7, #20
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b087      	sub	sp, #28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	3360      	adds	r3, #96	; 0x60
 8003b40:	461a      	mov	r2, r3
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	4413      	add	r3, r2
 8003b48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	431a      	orrs	r2, r3
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003b5a:	bf00      	nop
 8003b5c:	371c      	adds	r7, #28
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b083      	sub	sp, #12
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
 8003b6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	615a      	str	r2, [r3, #20]
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	3330      	adds	r3, #48	; 0x30
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	0a1b      	lsrs	r3, r3, #8
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	f003 030c 	and.w	r3, r3, #12
 8003ba8:	4413      	add	r3, r2
 8003baa:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	f003 031f 	and.w	r3, r3, #31
 8003bb6:	211f      	movs	r1, #31
 8003bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bbc:	43db      	mvns	r3, r3
 8003bbe:	401a      	ands	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	0e9b      	lsrs	r3, r3, #26
 8003bc4:	f003 011f 	and.w	r1, r3, #31
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	f003 031f 	and.w	r3, r3, #31
 8003bce:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003bd8:	bf00      	nop
 8003bda:	371c      	adds	r7, #28
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b087      	sub	sp, #28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	3314      	adds	r3, #20
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	0e5b      	lsrs	r3, r3, #25
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	4413      	add	r3, r2
 8003c02:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	0d1b      	lsrs	r3, r3, #20
 8003c0c:	f003 031f 	and.w	r3, r3, #31
 8003c10:	2107      	movs	r1, #7
 8003c12:	fa01 f303 	lsl.w	r3, r1, r3
 8003c16:	43db      	mvns	r3, r3
 8003c18:	401a      	ands	r2, r3
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	0d1b      	lsrs	r3, r3, #20
 8003c1e:	f003 031f 	and.w	r3, r3, #31
 8003c22:	6879      	ldr	r1, [r7, #4]
 8003c24:	fa01 f303 	lsl.w	r3, r1, r3
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003c2e:	bf00      	nop
 8003c30:	371c      	adds	r7, #28
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
	...

08003c3c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c54:	43db      	mvns	r3, r3
 8003c56:	401a      	ands	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f003 0318 	and.w	r3, r3, #24
 8003c5e:	4908      	ldr	r1, [pc, #32]	; (8003c80 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003c60:	40d9      	lsrs	r1, r3
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	400b      	ands	r3, r1
 8003c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003c72:	bf00      	nop
 8003c74:	3714      	adds	r7, #20
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	0007ffff 	.word	0x0007ffff

08003c84 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003c94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	6093      	str	r3, [r2, #8]
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cbc:	d101      	bne.n	8003cc2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e000      	b.n	8003cc4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003ce0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ce4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d0c:	d101      	bne.n	8003d12 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e000      	b.n	8003d14 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d101      	bne.n	8003d38 <LL_ADC_IsEnabled+0x18>
 8003d34:	2301      	movs	r3, #1
 8003d36:	e000      	b.n	8003d3a <LL_ADC_IsEnabled+0x1a>
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003d46:	b480      	push	{r7}
 8003d48:	b083      	sub	sp, #12
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 0304 	and.w	r3, r3, #4
 8003d56:	2b04      	cmp	r3, #4
 8003d58:	d101      	bne.n	8003d5e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e000      	b.n	8003d60 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f003 0308 	and.w	r3, r3, #8
 8003d7c:	2b08      	cmp	r3, #8
 8003d7e:	d101      	bne.n	8003d84 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003d80:	2301      	movs	r3, #1
 8003d82:	e000      	b.n	8003d86 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
	...

08003d94 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b088      	sub	sp, #32
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003da0:	2300      	movs	r3, #0
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e129      	b.n	8004002 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d109      	bne.n	8003dd0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7ff f961 	bl	8003084 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7ff ff67 	bl	8003ca8 <LL_ADC_IsDeepPowerDownEnabled>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d004      	beq.n	8003dea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7ff ff4d 	bl	8003c84 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7ff ff82 	bl	8003cf8 <LL_ADC_IsInternalRegulatorEnabled>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d115      	bne.n	8003e26 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7ff ff66 	bl	8003cd0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e04:	4b81      	ldr	r3, [pc, #516]	; (800400c <HAL_ADC_Init+0x278>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	099b      	lsrs	r3, r3, #6
 8003e0a:	4a81      	ldr	r2, [pc, #516]	; (8004010 <HAL_ADC_Init+0x27c>)
 8003e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e10:	099b      	lsrs	r3, r3, #6
 8003e12:	3301      	adds	r3, #1
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003e18:	e002      	b.n	8003e20 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1f9      	bne.n	8003e1a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff ff64 	bl	8003cf8 <LL_ADC_IsInternalRegulatorEnabled>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10d      	bne.n	8003e52 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3a:	f043 0210 	orr.w	r2, r3, #16
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e46:	f043 0201 	orr.w	r2, r3, #1
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7ff ff75 	bl	8003d46 <LL_ADC_REG_IsConversionOngoing>
 8003e5c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e62:	f003 0310 	and.w	r3, r3, #16
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f040 80c2 	bne.w	8003ff0 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f040 80be 	bne.w	8003ff0 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e78:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003e7c:	f043 0202 	orr.w	r2, r3, #2
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7ff ff49 	bl	8003d20 <LL_ADC_IsEnabled>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10b      	bne.n	8003eac <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e94:	485f      	ldr	r0, [pc, #380]	; (8004014 <HAL_ADC_Init+0x280>)
 8003e96:	f7ff ff43 	bl	8003d20 <LL_ADC_IsEnabled>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d105      	bne.n	8003eac <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	485c      	ldr	r0, [pc, #368]	; (8004018 <HAL_ADC_Init+0x284>)
 8003ea8:	f7ff fdd4 	bl	8003a54 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	7e5b      	ldrb	r3, [r3, #25]
 8003eb0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003eb6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003ebc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003ec2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003eca:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d106      	bne.n	8003ee8 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	045b      	lsls	r3, r3, #17
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d009      	beq.n	8003f04 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68da      	ldr	r2, [r3, #12]
 8003f0a:	4b44      	ldr	r3, [pc, #272]	; (800401c <HAL_ADC_Init+0x288>)
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6812      	ldr	r2, [r2, #0]
 8003f12:	69b9      	ldr	r1, [r7, #24]
 8003f14:	430b      	orrs	r3, r1
 8003f16:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7ff ff25 	bl	8003d6c <LL_ADC_INJ_IsConversionOngoing>
 8003f22:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d140      	bne.n	8003fac <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d13d      	bne.n	8003fac <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	7e1b      	ldrb	r3, [r3, #24]
 8003f38:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003f3a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f42:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003f44:	4313      	orrs	r3, r2
 8003f46:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f52:	f023 0306 	bic.w	r3, r3, #6
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	6812      	ldr	r2, [r2, #0]
 8003f5a:	69b9      	ldr	r1, [r7, #24]
 8003f5c:	430b      	orrs	r3, r1
 8003f5e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d118      	bne.n	8003f9c <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003f74:	f023 0304 	bic.w	r3, r3, #4
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f80:	4311      	orrs	r1, r2
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003f86:	4311      	orrs	r1, r2
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f042 0201 	orr.w	r2, r2, #1
 8003f98:	611a      	str	r2, [r3, #16]
 8003f9a:	e007      	b.n	8003fac <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	691a      	ldr	r2, [r3, #16]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 0201 	bic.w	r2, r2, #1
 8003faa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d10c      	bne.n	8003fce <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fba:	f023 010f 	bic.w	r1, r3, #15
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	1e5a      	subs	r2, r3, #1
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	631a      	str	r2, [r3, #48]	; 0x30
 8003fcc:	e007      	b.n	8003fde <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 020f 	bic.w	r2, r2, #15
 8003fdc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe2:	f023 0303 	bic.w	r3, r3, #3
 8003fe6:	f043 0201 	orr.w	r2, r3, #1
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	659a      	str	r2, [r3, #88]	; 0x58
 8003fee:	e007      	b.n	8004000 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff4:	f043 0210 	orr.w	r2, r3, #16
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004000:	7ffb      	ldrb	r3, [r7, #31]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3720      	adds	r7, #32
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	2000004c 	.word	0x2000004c
 8004010:	053e2d63 	.word	0x053e2d63
 8004014:	50040000 	.word	0x50040000
 8004018:	50040300 	.word	0x50040300
 800401c:	fff0c007 	.word	0xfff0c007

08004020 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b0b6      	sub	sp, #216	; 0xd8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800402a:	2300      	movs	r3, #0
 800402c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004030:	2300      	movs	r3, #0
 8004032:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800403a:	2b01      	cmp	r3, #1
 800403c:	d101      	bne.n	8004042 <HAL_ADC_ConfigChannel+0x22>
 800403e:	2302      	movs	r3, #2
 8004040:	e3d5      	b.n	80047ee <HAL_ADC_ConfigChannel+0x7ce>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	f7ff fe79 	bl	8003d46 <LL_ADC_REG_IsConversionOngoing>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	f040 83ba 	bne.w	80047d0 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2b05      	cmp	r3, #5
 800406a:	d824      	bhi.n	80040b6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	3b02      	subs	r3, #2
 8004072:	2b03      	cmp	r3, #3
 8004074:	d81b      	bhi.n	80040ae <HAL_ADC_ConfigChannel+0x8e>
 8004076:	a201      	add	r2, pc, #4	; (adr r2, 800407c <HAL_ADC_ConfigChannel+0x5c>)
 8004078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800407c:	0800408d 	.word	0x0800408d
 8004080:	08004095 	.word	0x08004095
 8004084:	0800409d 	.word	0x0800409d
 8004088:	080040a5 	.word	0x080040a5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800408c:	230c      	movs	r3, #12
 800408e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004092:	e010      	b.n	80040b6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8004094:	2312      	movs	r3, #18
 8004096:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800409a:	e00c      	b.n	80040b6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800409c:	2318      	movs	r3, #24
 800409e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80040a2:	e008      	b.n	80040b6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80040a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80040ac:	e003      	b.n	80040b6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80040ae:	2306      	movs	r3, #6
 80040b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80040b4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6818      	ldr	r0, [r3, #0]
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	461a      	mov	r2, r3
 80040c0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80040c4:	f7ff fd62 	bl	8003b8c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7ff fe3a 	bl	8003d46 <LL_ADC_REG_IsConversionOngoing>
 80040d2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4618      	mov	r0, r3
 80040dc:	f7ff fe46 	bl	8003d6c <LL_ADC_INJ_IsConversionOngoing>
 80040e0:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80040e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f040 81bf 	bne.w	800446c <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80040ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f040 81ba 	bne.w	800446c <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004100:	d10f      	bne.n	8004122 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6818      	ldr	r0, [r3, #0]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2200      	movs	r2, #0
 800410c:	4619      	mov	r1, r3
 800410e:	f7ff fd69 	bl	8003be4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800411a:	4618      	mov	r0, r3
 800411c:	f7ff fd23 	bl	8003b66 <LL_ADC_SetSamplingTimeCommonConfig>
 8004120:	e00e      	b.n	8004140 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6818      	ldr	r0, [r3, #0]
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	6819      	ldr	r1, [r3, #0]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	461a      	mov	r2, r3
 8004130:	f7ff fd58 	bl	8003be4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2100      	movs	r1, #0
 800413a:	4618      	mov	r0, r3
 800413c:	f7ff fd13 	bl	8003b66 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	695a      	ldr	r2, [r3, #20]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	08db      	lsrs	r3, r3, #3
 800414c:	f003 0303 	and.w	r3, r3, #3
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	fa02 f303 	lsl.w	r3, r2, r3
 8004156:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	2b04      	cmp	r3, #4
 8004160:	d00a      	beq.n	8004178 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6818      	ldr	r0, [r3, #0]
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	6919      	ldr	r1, [r3, #16]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004172:	f7ff fca3 	bl	8003abc <LL_ADC_SetOffset>
 8004176:	e179      	b.n	800446c <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2100      	movs	r1, #0
 800417e:	4618      	mov	r0, r3
 8004180:	f7ff fcc0 	bl	8003b04 <LL_ADC_GetOffsetChannel>
 8004184:	4603      	mov	r3, r0
 8004186:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10a      	bne.n	80041a4 <HAL_ADC_ConfigChannel+0x184>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2100      	movs	r1, #0
 8004194:	4618      	mov	r0, r3
 8004196:	f7ff fcb5 	bl	8003b04 <LL_ADC_GetOffsetChannel>
 800419a:	4603      	mov	r3, r0
 800419c:	0e9b      	lsrs	r3, r3, #26
 800419e:	f003 021f 	and.w	r2, r3, #31
 80041a2:	e01e      	b.n	80041e2 <HAL_ADC_ConfigChannel+0x1c2>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2100      	movs	r1, #0
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff fcaa 	bl	8003b04 <LL_ADC_GetOffsetChannel>
 80041b0:	4603      	mov	r3, r0
 80041b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80041ba:	fa93 f3a3 	rbit	r3, r3
 80041be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80041c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80041c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80041ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80041d2:	2320      	movs	r3, #32
 80041d4:	e004      	b.n	80041e0 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80041d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80041da:	fab3 f383 	clz	r3, r3
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d105      	bne.n	80041fa <HAL_ADC_ConfigChannel+0x1da>
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	0e9b      	lsrs	r3, r3, #26
 80041f4:	f003 031f 	and.w	r3, r3, #31
 80041f8:	e018      	b.n	800422c <HAL_ADC_ConfigChannel+0x20c>
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004202:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004206:	fa93 f3a3 	rbit	r3, r3
 800420a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 800420e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004212:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004216:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800421e:	2320      	movs	r3, #32
 8004220:	e004      	b.n	800422c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8004222:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004226:	fab3 f383 	clz	r3, r3
 800422a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800422c:	429a      	cmp	r2, r3
 800422e:	d106      	bne.n	800423e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2200      	movs	r2, #0
 8004236:	2100      	movs	r1, #0
 8004238:	4618      	mov	r0, r3
 800423a:	f7ff fc79 	bl	8003b30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2101      	movs	r1, #1
 8004244:	4618      	mov	r0, r3
 8004246:	f7ff fc5d 	bl	8003b04 <LL_ADC_GetOffsetChannel>
 800424a:	4603      	mov	r3, r0
 800424c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10a      	bne.n	800426a <HAL_ADC_ConfigChannel+0x24a>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2101      	movs	r1, #1
 800425a:	4618      	mov	r0, r3
 800425c:	f7ff fc52 	bl	8003b04 <LL_ADC_GetOffsetChannel>
 8004260:	4603      	mov	r3, r0
 8004262:	0e9b      	lsrs	r3, r3, #26
 8004264:	f003 021f 	and.w	r2, r3, #31
 8004268:	e01e      	b.n	80042a8 <HAL_ADC_ConfigChannel+0x288>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2101      	movs	r1, #1
 8004270:	4618      	mov	r0, r3
 8004272:	f7ff fc47 	bl	8003b04 <LL_ADC_GetOffsetChannel>
 8004276:	4603      	mov	r3, r0
 8004278:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004280:	fa93 f3a3 	rbit	r3, r3
 8004284:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004288:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800428c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004290:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8004298:	2320      	movs	r3, #32
 800429a:	e004      	b.n	80042a6 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 800429c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80042a0:	fab3 f383 	clz	r3, r3
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d105      	bne.n	80042c0 <HAL_ADC_ConfigChannel+0x2a0>
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	0e9b      	lsrs	r3, r3, #26
 80042ba:	f003 031f 	and.w	r3, r3, #31
 80042be:	e018      	b.n	80042f2 <HAL_ADC_ConfigChannel+0x2d2>
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80042cc:	fa93 f3a3 	rbit	r3, r3
 80042d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80042d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80042dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80042e4:	2320      	movs	r3, #32
 80042e6:	e004      	b.n	80042f2 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80042e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80042ec:	fab3 f383 	clz	r3, r3
 80042f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d106      	bne.n	8004304 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2200      	movs	r2, #0
 80042fc:	2101      	movs	r1, #1
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff fc16 	bl	8003b30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2102      	movs	r1, #2
 800430a:	4618      	mov	r0, r3
 800430c:	f7ff fbfa 	bl	8003b04 <LL_ADC_GetOffsetChannel>
 8004310:	4603      	mov	r3, r0
 8004312:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10a      	bne.n	8004330 <HAL_ADC_ConfigChannel+0x310>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2102      	movs	r1, #2
 8004320:	4618      	mov	r0, r3
 8004322:	f7ff fbef 	bl	8003b04 <LL_ADC_GetOffsetChannel>
 8004326:	4603      	mov	r3, r0
 8004328:	0e9b      	lsrs	r3, r3, #26
 800432a:	f003 021f 	and.w	r2, r3, #31
 800432e:	e01e      	b.n	800436e <HAL_ADC_ConfigChannel+0x34e>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2102      	movs	r1, #2
 8004336:	4618      	mov	r0, r3
 8004338:	f7ff fbe4 	bl	8003b04 <LL_ADC_GetOffsetChannel>
 800433c:	4603      	mov	r3, r0
 800433e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004342:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004346:	fa93 f3a3 	rbit	r3, r3
 800434a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800434e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004352:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004356:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800435e:	2320      	movs	r3, #32
 8004360:	e004      	b.n	800436c <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8004362:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004366:	fab3 f383 	clz	r3, r3
 800436a:	b2db      	uxtb	r3, r3
 800436c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004376:	2b00      	cmp	r3, #0
 8004378:	d105      	bne.n	8004386 <HAL_ADC_ConfigChannel+0x366>
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	0e9b      	lsrs	r3, r3, #26
 8004380:	f003 031f 	and.w	r3, r3, #31
 8004384:	e014      	b.n	80043b0 <HAL_ADC_ConfigChannel+0x390>
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800438e:	fa93 f3a3 	rbit	r3, r3
 8004392:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004394:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004396:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800439a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80043a2:	2320      	movs	r3, #32
 80043a4:	e004      	b.n	80043b0 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80043a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043aa:	fab3 f383 	clz	r3, r3
 80043ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d106      	bne.n	80043c2 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2200      	movs	r2, #0
 80043ba:	2102      	movs	r1, #2
 80043bc:	4618      	mov	r0, r3
 80043be:	f7ff fbb7 	bl	8003b30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2103      	movs	r1, #3
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7ff fb9b 	bl	8003b04 <LL_ADC_GetOffsetChannel>
 80043ce:	4603      	mov	r3, r0
 80043d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d10a      	bne.n	80043ee <HAL_ADC_ConfigChannel+0x3ce>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2103      	movs	r1, #3
 80043de:	4618      	mov	r0, r3
 80043e0:	f7ff fb90 	bl	8003b04 <LL_ADC_GetOffsetChannel>
 80043e4:	4603      	mov	r3, r0
 80043e6:	0e9b      	lsrs	r3, r3, #26
 80043e8:	f003 021f 	and.w	r2, r3, #31
 80043ec:	e017      	b.n	800441e <HAL_ADC_ConfigChannel+0x3fe>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2103      	movs	r1, #3
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7ff fb85 	bl	8003b04 <LL_ADC_GetOffsetChannel>
 80043fa:	4603      	mov	r3, r0
 80043fc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004400:	fa93 f3a3 	rbit	r3, r3
 8004404:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004408:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800440a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800440c:	2b00      	cmp	r3, #0
 800440e:	d101      	bne.n	8004414 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8004410:	2320      	movs	r3, #32
 8004412:	e003      	b.n	800441c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8004414:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004416:	fab3 f383 	clz	r3, r3
 800441a:	b2db      	uxtb	r3, r3
 800441c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004426:	2b00      	cmp	r3, #0
 8004428:	d105      	bne.n	8004436 <HAL_ADC_ConfigChannel+0x416>
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	0e9b      	lsrs	r3, r3, #26
 8004430:	f003 031f 	and.w	r3, r3, #31
 8004434:	e011      	b.n	800445a <HAL_ADC_ConfigChannel+0x43a>
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800443c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800443e:	fa93 f3a3 	rbit	r3, r3
 8004442:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004444:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004446:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004448:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800444e:	2320      	movs	r3, #32
 8004450:	e003      	b.n	800445a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8004452:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004454:	fab3 f383 	clz	r3, r3
 8004458:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800445a:	429a      	cmp	r2, r3
 800445c:	d106      	bne.n	800446c <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2200      	movs	r2, #0
 8004464:	2103      	movs	r1, #3
 8004466:	4618      	mov	r0, r3
 8004468:	f7ff fb62 	bl	8003b30 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4618      	mov	r0, r3
 8004472:	f7ff fc55 	bl	8003d20 <LL_ADC_IsEnabled>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	f040 813f 	bne.w	80046fc <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6818      	ldr	r0, [r3, #0]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	6819      	ldr	r1, [r3, #0]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	461a      	mov	r2, r3
 800448c:	f7ff fbd6 	bl	8003c3c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	4a8e      	ldr	r2, [pc, #568]	; (80046d0 <HAL_ADC_ConfigChannel+0x6b0>)
 8004496:	4293      	cmp	r3, r2
 8004498:	f040 8130 	bne.w	80046fc <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10b      	bne.n	80044c4 <HAL_ADC_ConfigChannel+0x4a4>
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	0e9b      	lsrs	r3, r3, #26
 80044b2:	3301      	adds	r3, #1
 80044b4:	f003 031f 	and.w	r3, r3, #31
 80044b8:	2b09      	cmp	r3, #9
 80044ba:	bf94      	ite	ls
 80044bc:	2301      	movls	r3, #1
 80044be:	2300      	movhi	r3, #0
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	e019      	b.n	80044f8 <HAL_ADC_ConfigChannel+0x4d8>
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044cc:	fa93 f3a3 	rbit	r3, r3
 80044d0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80044d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80044d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80044dc:	2320      	movs	r3, #32
 80044de:	e003      	b.n	80044e8 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80044e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044e2:	fab3 f383 	clz	r3, r3
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	3301      	adds	r3, #1
 80044ea:	f003 031f 	and.w	r3, r3, #31
 80044ee:	2b09      	cmp	r3, #9
 80044f0:	bf94      	ite	ls
 80044f2:	2301      	movls	r3, #1
 80044f4:	2300      	movhi	r3, #0
 80044f6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d079      	beq.n	80045f0 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004504:	2b00      	cmp	r3, #0
 8004506:	d107      	bne.n	8004518 <HAL_ADC_ConfigChannel+0x4f8>
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	0e9b      	lsrs	r3, r3, #26
 800450e:	3301      	adds	r3, #1
 8004510:	069b      	lsls	r3, r3, #26
 8004512:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004516:	e015      	b.n	8004544 <HAL_ADC_ConfigChannel+0x524>
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800451e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004520:	fa93 f3a3 	rbit	r3, r3
 8004524:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004526:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004528:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800452a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8004530:	2320      	movs	r3, #32
 8004532:	e003      	b.n	800453c <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8004534:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004536:	fab3 f383 	clz	r3, r3
 800453a:	b2db      	uxtb	r3, r3
 800453c:	3301      	adds	r3, #1
 800453e:	069b      	lsls	r3, r3, #26
 8004540:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800454c:	2b00      	cmp	r3, #0
 800454e:	d109      	bne.n	8004564 <HAL_ADC_ConfigChannel+0x544>
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	0e9b      	lsrs	r3, r3, #26
 8004556:	3301      	adds	r3, #1
 8004558:	f003 031f 	and.w	r3, r3, #31
 800455c:	2101      	movs	r1, #1
 800455e:	fa01 f303 	lsl.w	r3, r1, r3
 8004562:	e017      	b.n	8004594 <HAL_ADC_ConfigChannel+0x574>
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800456a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800456c:	fa93 f3a3 	rbit	r3, r3
 8004570:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004574:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004576:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004578:	2b00      	cmp	r3, #0
 800457a:	d101      	bne.n	8004580 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 800457c:	2320      	movs	r3, #32
 800457e:	e003      	b.n	8004588 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8004580:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004582:	fab3 f383 	clz	r3, r3
 8004586:	b2db      	uxtb	r3, r3
 8004588:	3301      	adds	r3, #1
 800458a:	f003 031f 	and.w	r3, r3, #31
 800458e:	2101      	movs	r1, #1
 8004590:	fa01 f303 	lsl.w	r3, r1, r3
 8004594:	ea42 0103 	orr.w	r1, r2, r3
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10a      	bne.n	80045ba <HAL_ADC_ConfigChannel+0x59a>
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	0e9b      	lsrs	r3, r3, #26
 80045aa:	3301      	adds	r3, #1
 80045ac:	f003 021f 	and.w	r2, r3, #31
 80045b0:	4613      	mov	r3, r2
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	4413      	add	r3, r2
 80045b6:	051b      	lsls	r3, r3, #20
 80045b8:	e018      	b.n	80045ec <HAL_ADC_ConfigChannel+0x5cc>
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045c2:	fa93 f3a3 	rbit	r3, r3
 80045c6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80045c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ca:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80045cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80045d2:	2320      	movs	r3, #32
 80045d4:	e003      	b.n	80045de <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80045d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d8:	fab3 f383 	clz	r3, r3
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	3301      	adds	r3, #1
 80045e0:	f003 021f 	and.w	r2, r3, #31
 80045e4:	4613      	mov	r3, r2
 80045e6:	005b      	lsls	r3, r3, #1
 80045e8:	4413      	add	r3, r2
 80045ea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045ec:	430b      	orrs	r3, r1
 80045ee:	e080      	b.n	80046f2 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d107      	bne.n	800460c <HAL_ADC_ConfigChannel+0x5ec>
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	0e9b      	lsrs	r3, r3, #26
 8004602:	3301      	adds	r3, #1
 8004604:	069b      	lsls	r3, r3, #26
 8004606:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800460a:	e015      	b.n	8004638 <HAL_ADC_ConfigChannel+0x618>
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004614:	fa93 f3a3 	rbit	r3, r3
 8004618:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800461e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8004624:	2320      	movs	r3, #32
 8004626:	e003      	b.n	8004630 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8004628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800462a:	fab3 f383 	clz	r3, r3
 800462e:	b2db      	uxtb	r3, r3
 8004630:	3301      	adds	r3, #1
 8004632:	069b      	lsls	r3, r3, #26
 8004634:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004640:	2b00      	cmp	r3, #0
 8004642:	d109      	bne.n	8004658 <HAL_ADC_ConfigChannel+0x638>
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	0e9b      	lsrs	r3, r3, #26
 800464a:	3301      	adds	r3, #1
 800464c:	f003 031f 	and.w	r3, r3, #31
 8004650:	2101      	movs	r1, #1
 8004652:	fa01 f303 	lsl.w	r3, r1, r3
 8004656:	e017      	b.n	8004688 <HAL_ADC_ConfigChannel+0x668>
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	fa93 f3a3 	rbit	r3, r3
 8004664:	61bb      	str	r3, [r7, #24]
  return result;
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800466a:	6a3b      	ldr	r3, [r7, #32]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d101      	bne.n	8004674 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8004670:	2320      	movs	r3, #32
 8004672:	e003      	b.n	800467c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	fab3 f383 	clz	r3, r3
 800467a:	b2db      	uxtb	r3, r3
 800467c:	3301      	adds	r3, #1
 800467e:	f003 031f 	and.w	r3, r3, #31
 8004682:	2101      	movs	r1, #1
 8004684:	fa01 f303 	lsl.w	r3, r1, r3
 8004688:	ea42 0103 	orr.w	r1, r2, r3
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004694:	2b00      	cmp	r3, #0
 8004696:	d10d      	bne.n	80046b4 <HAL_ADC_ConfigChannel+0x694>
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	0e9b      	lsrs	r3, r3, #26
 800469e:	3301      	adds	r3, #1
 80046a0:	f003 021f 	and.w	r2, r3, #31
 80046a4:	4613      	mov	r3, r2
 80046a6:	005b      	lsls	r3, r3, #1
 80046a8:	4413      	add	r3, r2
 80046aa:	3b1e      	subs	r3, #30
 80046ac:	051b      	lsls	r3, r3, #20
 80046ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80046b2:	e01d      	b.n	80046f0 <HAL_ADC_ConfigChannel+0x6d0>
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	fa93 f3a3 	rbit	r3, r3
 80046c0:	60fb      	str	r3, [r7, #12]
  return result;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d103      	bne.n	80046d4 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80046cc:	2320      	movs	r3, #32
 80046ce:	e005      	b.n	80046dc <HAL_ADC_ConfigChannel+0x6bc>
 80046d0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	fab3 f383 	clz	r3, r3
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	3301      	adds	r3, #1
 80046de:	f003 021f 	and.w	r2, r3, #31
 80046e2:	4613      	mov	r3, r2
 80046e4:	005b      	lsls	r3, r3, #1
 80046e6:	4413      	add	r3, r2
 80046e8:	3b1e      	subs	r3, #30
 80046ea:	051b      	lsls	r3, r3, #20
 80046ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046f0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046f6:	4619      	mov	r1, r3
 80046f8:	f7ff fa74 	bl	8003be4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	4b3d      	ldr	r3, [pc, #244]	; (80047f8 <HAL_ADC_ConfigChannel+0x7d8>)
 8004702:	4013      	ands	r3, r2
 8004704:	2b00      	cmp	r3, #0
 8004706:	d06c      	beq.n	80047e2 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004708:	483c      	ldr	r0, [pc, #240]	; (80047fc <HAL_ADC_ConfigChannel+0x7dc>)
 800470a:	f7ff f9c9 	bl	8003aa0 <LL_ADC_GetCommonPathInternalCh>
 800470e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a3a      	ldr	r2, [pc, #232]	; (8004800 <HAL_ADC_ConfigChannel+0x7e0>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d127      	bne.n	800476c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800471c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004720:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d121      	bne.n	800476c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a35      	ldr	r2, [pc, #212]	; (8004804 <HAL_ADC_ConfigChannel+0x7e4>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d157      	bne.n	80047e2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004732:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004736:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800473a:	4619      	mov	r1, r3
 800473c:	482f      	ldr	r0, [pc, #188]	; (80047fc <HAL_ADC_ConfigChannel+0x7dc>)
 800473e:	f7ff f99c 	bl	8003a7a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004742:	4b31      	ldr	r3, [pc, #196]	; (8004808 <HAL_ADC_ConfigChannel+0x7e8>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	099b      	lsrs	r3, r3, #6
 8004748:	4a30      	ldr	r2, [pc, #192]	; (800480c <HAL_ADC_ConfigChannel+0x7ec>)
 800474a:	fba2 2303 	umull	r2, r3, r2, r3
 800474e:	099b      	lsrs	r3, r3, #6
 8004750:	1c5a      	adds	r2, r3, #1
 8004752:	4613      	mov	r3, r2
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	4413      	add	r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800475c:	e002      	b.n	8004764 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	3b01      	subs	r3, #1
 8004762:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1f9      	bne.n	800475e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800476a:	e03a      	b.n	80047e2 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a27      	ldr	r2, [pc, #156]	; (8004810 <HAL_ADC_ConfigChannel+0x7f0>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d113      	bne.n	800479e <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004776:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800477a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10d      	bne.n	800479e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a1f      	ldr	r2, [pc, #124]	; (8004804 <HAL_ADC_ConfigChannel+0x7e4>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d12a      	bne.n	80047e2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800478c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004790:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004794:	4619      	mov	r1, r3
 8004796:	4819      	ldr	r0, [pc, #100]	; (80047fc <HAL_ADC_ConfigChannel+0x7dc>)
 8004798:	f7ff f96f 	bl	8003a7a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800479c:	e021      	b.n	80047e2 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a1c      	ldr	r2, [pc, #112]	; (8004814 <HAL_ADC_ConfigChannel+0x7f4>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d11c      	bne.n	80047e2 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80047a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80047ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d116      	bne.n	80047e2 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a12      	ldr	r2, [pc, #72]	; (8004804 <HAL_ADC_ConfigChannel+0x7e4>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d111      	bne.n	80047e2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80047c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80047c6:	4619      	mov	r1, r3
 80047c8:	480c      	ldr	r0, [pc, #48]	; (80047fc <HAL_ADC_ConfigChannel+0x7dc>)
 80047ca:	f7ff f956 	bl	8003a7a <LL_ADC_SetCommonPathInternalCh>
 80047ce:	e008      	b.n	80047e2 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d4:	f043 0220 	orr.w	r2, r3, #32
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80047ea:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	37d8      	adds	r7, #216	; 0xd8
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	80080000 	.word	0x80080000
 80047fc:	50040300 	.word	0x50040300
 8004800:	c7520000 	.word	0xc7520000
 8004804:	50040000 	.word	0x50040000
 8004808:	2000004c 	.word	0x2000004c
 800480c:	053e2d63 	.word	0x053e2d63
 8004810:	cb840000 	.word	0xcb840000
 8004814:	80000001 	.word	0x80000001

08004818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f003 0307 	and.w	r3, r3, #7
 8004826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004828:	4b0c      	ldr	r3, [pc, #48]	; (800485c <__NVIC_SetPriorityGrouping+0x44>)
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004834:	4013      	ands	r3, r2
 8004836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004840:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800484a:	4a04      	ldr	r2, [pc, #16]	; (800485c <__NVIC_SetPriorityGrouping+0x44>)
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	60d3      	str	r3, [r2, #12]
}
 8004850:	bf00      	nop
 8004852:	3714      	adds	r7, #20
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	e000ed00 	.word	0xe000ed00

08004860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004860:	b480      	push	{r7}
 8004862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004864:	4b04      	ldr	r3, [pc, #16]	; (8004878 <__NVIC_GetPriorityGrouping+0x18>)
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	0a1b      	lsrs	r3, r3, #8
 800486a:	f003 0307 	and.w	r3, r3, #7
}
 800486e:	4618      	mov	r0, r3
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr
 8004878:	e000ed00 	.word	0xe000ed00

0800487c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	4603      	mov	r3, r0
 8004884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800488a:	2b00      	cmp	r3, #0
 800488c:	db0b      	blt.n	80048a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800488e:	79fb      	ldrb	r3, [r7, #7]
 8004890:	f003 021f 	and.w	r2, r3, #31
 8004894:	4907      	ldr	r1, [pc, #28]	; (80048b4 <__NVIC_EnableIRQ+0x38>)
 8004896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800489a:	095b      	lsrs	r3, r3, #5
 800489c:	2001      	movs	r0, #1
 800489e:	fa00 f202 	lsl.w	r2, r0, r2
 80048a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	e000e100 	.word	0xe000e100

080048b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	4603      	mov	r3, r0
 80048c0:	6039      	str	r1, [r7, #0]
 80048c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	db0a      	blt.n	80048e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	b2da      	uxtb	r2, r3
 80048d0:	490c      	ldr	r1, [pc, #48]	; (8004904 <__NVIC_SetPriority+0x4c>)
 80048d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048d6:	0112      	lsls	r2, r2, #4
 80048d8:	b2d2      	uxtb	r2, r2
 80048da:	440b      	add	r3, r1
 80048dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048e0:	e00a      	b.n	80048f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	b2da      	uxtb	r2, r3
 80048e6:	4908      	ldr	r1, [pc, #32]	; (8004908 <__NVIC_SetPriority+0x50>)
 80048e8:	79fb      	ldrb	r3, [r7, #7]
 80048ea:	f003 030f 	and.w	r3, r3, #15
 80048ee:	3b04      	subs	r3, #4
 80048f0:	0112      	lsls	r2, r2, #4
 80048f2:	b2d2      	uxtb	r2, r2
 80048f4:	440b      	add	r3, r1
 80048f6:	761a      	strb	r2, [r3, #24]
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr
 8004904:	e000e100 	.word	0xe000e100
 8004908:	e000ed00 	.word	0xe000ed00

0800490c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800490c:	b480      	push	{r7}
 800490e:	b089      	sub	sp, #36	; 0x24
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f003 0307 	and.w	r3, r3, #7
 800491e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	f1c3 0307 	rsb	r3, r3, #7
 8004926:	2b04      	cmp	r3, #4
 8004928:	bf28      	it	cs
 800492a:	2304      	movcs	r3, #4
 800492c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	3304      	adds	r3, #4
 8004932:	2b06      	cmp	r3, #6
 8004934:	d902      	bls.n	800493c <NVIC_EncodePriority+0x30>
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	3b03      	subs	r3, #3
 800493a:	e000      	b.n	800493e <NVIC_EncodePriority+0x32>
 800493c:	2300      	movs	r3, #0
 800493e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004940:	f04f 32ff 	mov.w	r2, #4294967295
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	fa02 f303 	lsl.w	r3, r2, r3
 800494a:	43da      	mvns	r2, r3
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	401a      	ands	r2, r3
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004954:	f04f 31ff 	mov.w	r1, #4294967295
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	fa01 f303 	lsl.w	r3, r1, r3
 800495e:	43d9      	mvns	r1, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004964:	4313      	orrs	r3, r2
         );
}
 8004966:	4618      	mov	r0, r3
 8004968:	3724      	adds	r7, #36	; 0x24
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr

08004972 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b082      	sub	sp, #8
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f7ff ff4c 	bl	8004818 <__NVIC_SetPriorityGrouping>
}
 8004980:	bf00      	nop
 8004982:	3708      	adds	r7, #8
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	4603      	mov	r3, r0
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
 8004994:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004996:	2300      	movs	r3, #0
 8004998:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800499a:	f7ff ff61 	bl	8004860 <__NVIC_GetPriorityGrouping>
 800499e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	68b9      	ldr	r1, [r7, #8]
 80049a4:	6978      	ldr	r0, [r7, #20]
 80049a6:	f7ff ffb1 	bl	800490c <NVIC_EncodePriority>
 80049aa:	4602      	mov	r2, r0
 80049ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049b0:	4611      	mov	r1, r2
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7ff ff80 	bl	80048b8 <__NVIC_SetPriority>
}
 80049b8:	bf00      	nop
 80049ba:	3718      	adds	r7, #24
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	4603      	mov	r3, r0
 80049c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7ff ff54 	bl	800487c <__NVIC_EnableIRQ>
}
 80049d4:	bf00      	nop
 80049d6:	3708      	adds	r7, #8
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e0ac      	b.n	8004b48 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 f8b2 	bl	8004b5c <DFSDM_GetChannelFromInstance>
 80049f8:	4603      	mov	r3, r0
 80049fa:	4a55      	ldr	r2, [pc, #340]	; (8004b50 <HAL_DFSDM_ChannelInit+0x174>)
 80049fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e09f      	b.n	8004b48 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f7fe fb7b 	bl	8003104 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8004a0e:	4b51      	ldr	r3, [pc, #324]	; (8004b54 <HAL_DFSDM_ChannelInit+0x178>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	3301      	adds	r3, #1
 8004a14:	4a4f      	ldr	r2, [pc, #316]	; (8004b54 <HAL_DFSDM_ChannelInit+0x178>)
 8004a16:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8004a18:	4b4e      	ldr	r3, [pc, #312]	; (8004b54 <HAL_DFSDM_ChannelInit+0x178>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d125      	bne.n	8004a6c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004a20:	4b4d      	ldr	r3, [pc, #308]	; (8004b58 <HAL_DFSDM_ChannelInit+0x17c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a4c      	ldr	r2, [pc, #304]	; (8004b58 <HAL_DFSDM_ChannelInit+0x17c>)
 8004a26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a2a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8004a2c:	4b4a      	ldr	r3, [pc, #296]	; (8004b58 <HAL_DFSDM_ChannelInit+0x17c>)
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	4948      	ldr	r1, [pc, #288]	; (8004b58 <HAL_DFSDM_ChannelInit+0x17c>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8004a3a:	4b47      	ldr	r3, [pc, #284]	; (8004b58 <HAL_DFSDM_ChannelInit+0x17c>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a46      	ldr	r2, [pc, #280]	; (8004b58 <HAL_DFSDM_ChannelInit+0x17c>)
 8004a40:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8004a44:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	791b      	ldrb	r3, [r3, #4]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d108      	bne.n	8004a60 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8004a4e:	4b42      	ldr	r3, [pc, #264]	; (8004b58 <HAL_DFSDM_ChannelInit+0x17c>)
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	3b01      	subs	r3, #1
 8004a58:	041b      	lsls	r3, r3, #16
 8004a5a:	493f      	ldr	r1, [pc, #252]	; (8004b58 <HAL_DFSDM_ChannelInit+0x17c>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004a60:	4b3d      	ldr	r3, [pc, #244]	; (8004b58 <HAL_DFSDM_ChannelInit+0x17c>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a3c      	ldr	r2, [pc, #240]	; (8004b58 <HAL_DFSDM_ChannelInit+0x17c>)
 8004a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a6a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8004a7a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	6819      	ldr	r1, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004a8a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004a90:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f022 020f 	bic.w	r2, r2, #15
 8004aa8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6819      	ldr	r1, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	689a      	ldr	r2, [r3, #8]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8004ad0:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	6899      	ldr	r1, [r3, #8]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f002 0207 	and.w	r2, r2, #7
 8004afc:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6859      	ldr	r1, [r3, #4]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b08:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004b10:	431a      	orrs	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	430a      	orrs	r2, r1
 8004b18:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b28:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 f810 	bl	8004b5c <DFSDM_GetChannelFromInstance>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	4904      	ldr	r1, [pc, #16]	; (8004b50 <HAL_DFSDM_ChannelInit+0x174>)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3708      	adds	r7, #8
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	20001298 	.word	0x20001298
 8004b54:	20001294 	.word	0x20001294
 8004b58:	40016000 	.word	0x40016000

08004b5c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a1c      	ldr	r2, [pc, #112]	; (8004bd8 <DFSDM_GetChannelFromInstance+0x7c>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d102      	bne.n	8004b72 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	60fb      	str	r3, [r7, #12]
 8004b70:	e02b      	b.n	8004bca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a19      	ldr	r2, [pc, #100]	; (8004bdc <DFSDM_GetChannelFromInstance+0x80>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d102      	bne.n	8004b80 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	60fb      	str	r3, [r7, #12]
 8004b7e:	e024      	b.n	8004bca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a17      	ldr	r2, [pc, #92]	; (8004be0 <DFSDM_GetChannelFromInstance+0x84>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d102      	bne.n	8004b8e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8004b88:	2302      	movs	r3, #2
 8004b8a:	60fb      	str	r3, [r7, #12]
 8004b8c:	e01d      	b.n	8004bca <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a14      	ldr	r2, [pc, #80]	; (8004be4 <DFSDM_GetChannelFromInstance+0x88>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d102      	bne.n	8004b9c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8004b96:	2304      	movs	r3, #4
 8004b98:	60fb      	str	r3, [r7, #12]
 8004b9a:	e016      	b.n	8004bca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a12      	ldr	r2, [pc, #72]	; (8004be8 <DFSDM_GetChannelFromInstance+0x8c>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d102      	bne.n	8004baa <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8004ba4:	2305      	movs	r3, #5
 8004ba6:	60fb      	str	r3, [r7, #12]
 8004ba8:	e00f      	b.n	8004bca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a0f      	ldr	r2, [pc, #60]	; (8004bec <DFSDM_GetChannelFromInstance+0x90>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d102      	bne.n	8004bb8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8004bb2:	2306      	movs	r3, #6
 8004bb4:	60fb      	str	r3, [r7, #12]
 8004bb6:	e008      	b.n	8004bca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a0d      	ldr	r2, [pc, #52]	; (8004bf0 <DFSDM_GetChannelFromInstance+0x94>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d102      	bne.n	8004bc6 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8004bc0:	2307      	movs	r3, #7
 8004bc2:	60fb      	str	r3, [r7, #12]
 8004bc4:	e001      	b.n	8004bca <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8004bca:	68fb      	ldr	r3, [r7, #12]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3714      	adds	r7, #20
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr
 8004bd8:	40016000 	.word	0x40016000
 8004bdc:	40016020 	.word	0x40016020
 8004be0:	40016040 	.word	0x40016040
 8004be4:	40016080 	.word	0x40016080
 8004be8:	400160a0 	.word	0x400160a0
 8004bec:	400160c0 	.word	0x400160c0
 8004bf0:	400160e0 	.word	0x400160e0

08004bf4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d008      	beq.n	8004c1e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2204      	movs	r2, #4
 8004c10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e040      	b.n	8004ca0 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f022 020e 	bic.w	r2, r2, #14
 8004c2c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c3c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f022 0201 	bic.w	r2, r2, #1
 8004c4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c52:	f003 021c 	and.w	r2, r3, #28
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	2101      	movs	r1, #1
 8004c5c:	fa01 f202 	lsl.w	r2, r1, r2
 8004c60:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004c6a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00c      	beq.n	8004c8e <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c82:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004c8c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004c9e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d005      	beq.n	8004cd0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2204      	movs	r2, #4
 8004cc8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	73fb      	strb	r3, [r7, #15]
 8004cce:	e047      	b.n	8004d60 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f022 020e 	bic.w	r2, r2, #14
 8004cde:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 0201 	bic.w	r2, r2, #1
 8004cee:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cfa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cfe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d04:	f003 021c 	and.w	r2, r3, #28
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0c:	2101      	movs	r1, #1
 8004d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8004d12:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004d1c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00c      	beq.n	8004d40 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d34:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004d3e:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d003      	beq.n	8004d60 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	4798      	blx	r3
    }
  }
  return status;
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b083      	sub	sp, #12
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004d78:	b2db      	uxtb	r3, r3
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
	...

08004d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b087      	sub	sp, #28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d92:	2300      	movs	r3, #0
 8004d94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d96:	e166      	b.n	8005066 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	2101      	movs	r1, #1
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	fa01 f303 	lsl.w	r3, r1, r3
 8004da4:	4013      	ands	r3, r2
 8004da6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f000 8158 	beq.w	8005060 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f003 0303 	and.w	r3, r3, #3
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d005      	beq.n	8004dc8 <HAL_GPIO_Init+0x40>
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f003 0303 	and.w	r3, r3, #3
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d130      	bne.n	8004e2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	005b      	lsls	r3, r3, #1
 8004dd2:	2203      	movs	r2, #3
 8004dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd8:	43db      	mvns	r3, r3
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	4013      	ands	r3, r2
 8004dde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	68da      	ldr	r2, [r3, #12]
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	005b      	lsls	r3, r3, #1
 8004de8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004dfe:	2201      	movs	r2, #1
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	fa02 f303 	lsl.w	r3, r2, r3
 8004e06:	43db      	mvns	r3, r3
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	091b      	lsrs	r3, r3, #4
 8004e14:	f003 0201 	and.w	r2, r3, #1
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f003 0303 	and.w	r3, r3, #3
 8004e32:	2b03      	cmp	r3, #3
 8004e34:	d017      	beq.n	8004e66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	005b      	lsls	r3, r3, #1
 8004e40:	2203      	movs	r2, #3
 8004e42:	fa02 f303 	lsl.w	r3, r2, r3
 8004e46:	43db      	mvns	r3, r3
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	689a      	ldr	r2, [r3, #8]
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	005b      	lsls	r3, r3, #1
 8004e56:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f003 0303 	and.w	r3, r3, #3
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d123      	bne.n	8004eba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	08da      	lsrs	r2, r3, #3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	3208      	adds	r2, #8
 8004e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	f003 0307 	and.w	r3, r3, #7
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	220f      	movs	r2, #15
 8004e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8e:	43db      	mvns	r3, r3
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	4013      	ands	r3, r2
 8004e94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	691a      	ldr	r2, [r3, #16]
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f003 0307 	and.w	r3, r3, #7
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	08da      	lsrs	r2, r3, #3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	3208      	adds	r2, #8
 8004eb4:	6939      	ldr	r1, [r7, #16]
 8004eb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	005b      	lsls	r3, r3, #1
 8004ec4:	2203      	movs	r2, #3
 8004ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eca:	43db      	mvns	r3, r3
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	4013      	ands	r3, r2
 8004ed0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f003 0203 	and.w	r2, r3, #3
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	005b      	lsls	r3, r3, #1
 8004ede:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f000 80b2 	beq.w	8005060 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004efc:	4b61      	ldr	r3, [pc, #388]	; (8005084 <HAL_GPIO_Init+0x2fc>)
 8004efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f00:	4a60      	ldr	r2, [pc, #384]	; (8005084 <HAL_GPIO_Init+0x2fc>)
 8004f02:	f043 0301 	orr.w	r3, r3, #1
 8004f06:	6613      	str	r3, [r2, #96]	; 0x60
 8004f08:	4b5e      	ldr	r3, [pc, #376]	; (8005084 <HAL_GPIO_Init+0x2fc>)
 8004f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	60bb      	str	r3, [r7, #8]
 8004f12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004f14:	4a5c      	ldr	r2, [pc, #368]	; (8005088 <HAL_GPIO_Init+0x300>)
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	089b      	lsrs	r3, r3, #2
 8004f1a:	3302      	adds	r3, #2
 8004f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f003 0303 	and.w	r3, r3, #3
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	220f      	movs	r2, #15
 8004f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f30:	43db      	mvns	r3, r3
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	4013      	ands	r3, r2
 8004f36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004f3e:	d02b      	beq.n	8004f98 <HAL_GPIO_Init+0x210>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a52      	ldr	r2, [pc, #328]	; (800508c <HAL_GPIO_Init+0x304>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d025      	beq.n	8004f94 <HAL_GPIO_Init+0x20c>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a51      	ldr	r2, [pc, #324]	; (8005090 <HAL_GPIO_Init+0x308>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d01f      	beq.n	8004f90 <HAL_GPIO_Init+0x208>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a50      	ldr	r2, [pc, #320]	; (8005094 <HAL_GPIO_Init+0x30c>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d019      	beq.n	8004f8c <HAL_GPIO_Init+0x204>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a4f      	ldr	r2, [pc, #316]	; (8005098 <HAL_GPIO_Init+0x310>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d013      	beq.n	8004f88 <HAL_GPIO_Init+0x200>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a4e      	ldr	r2, [pc, #312]	; (800509c <HAL_GPIO_Init+0x314>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d00d      	beq.n	8004f84 <HAL_GPIO_Init+0x1fc>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a4d      	ldr	r2, [pc, #308]	; (80050a0 <HAL_GPIO_Init+0x318>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d007      	beq.n	8004f80 <HAL_GPIO_Init+0x1f8>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a4c      	ldr	r2, [pc, #304]	; (80050a4 <HAL_GPIO_Init+0x31c>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d101      	bne.n	8004f7c <HAL_GPIO_Init+0x1f4>
 8004f78:	2307      	movs	r3, #7
 8004f7a:	e00e      	b.n	8004f9a <HAL_GPIO_Init+0x212>
 8004f7c:	2308      	movs	r3, #8
 8004f7e:	e00c      	b.n	8004f9a <HAL_GPIO_Init+0x212>
 8004f80:	2306      	movs	r3, #6
 8004f82:	e00a      	b.n	8004f9a <HAL_GPIO_Init+0x212>
 8004f84:	2305      	movs	r3, #5
 8004f86:	e008      	b.n	8004f9a <HAL_GPIO_Init+0x212>
 8004f88:	2304      	movs	r3, #4
 8004f8a:	e006      	b.n	8004f9a <HAL_GPIO_Init+0x212>
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e004      	b.n	8004f9a <HAL_GPIO_Init+0x212>
 8004f90:	2302      	movs	r3, #2
 8004f92:	e002      	b.n	8004f9a <HAL_GPIO_Init+0x212>
 8004f94:	2301      	movs	r3, #1
 8004f96:	e000      	b.n	8004f9a <HAL_GPIO_Init+0x212>
 8004f98:	2300      	movs	r3, #0
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	f002 0203 	and.w	r2, r2, #3
 8004fa0:	0092      	lsls	r2, r2, #2
 8004fa2:	4093      	lsls	r3, r2
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004faa:	4937      	ldr	r1, [pc, #220]	; (8005088 <HAL_GPIO_Init+0x300>)
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	089b      	lsrs	r3, r3, #2
 8004fb0:	3302      	adds	r3, #2
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004fb8:	4b3b      	ldr	r3, [pc, #236]	; (80050a8 <HAL_GPIO_Init+0x320>)
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	43db      	mvns	r3, r3
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d003      	beq.n	8004fdc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004fdc:	4a32      	ldr	r2, [pc, #200]	; (80050a8 <HAL_GPIO_Init+0x320>)
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004fe2:	4b31      	ldr	r3, [pc, #196]	; (80050a8 <HAL_GPIO_Init+0x320>)
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	43db      	mvns	r3, r3
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	4013      	ands	r3, r2
 8004ff0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d003      	beq.n	8005006 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	4313      	orrs	r3, r2
 8005004:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005006:	4a28      	ldr	r2, [pc, #160]	; (80050a8 <HAL_GPIO_Init+0x320>)
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800500c:	4b26      	ldr	r3, [pc, #152]	; (80050a8 <HAL_GPIO_Init+0x320>)
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	43db      	mvns	r3, r3
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	4013      	ands	r3, r2
 800501a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d003      	beq.n	8005030 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	4313      	orrs	r3, r2
 800502e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005030:	4a1d      	ldr	r2, [pc, #116]	; (80050a8 <HAL_GPIO_Init+0x320>)
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005036:	4b1c      	ldr	r3, [pc, #112]	; (80050a8 <HAL_GPIO_Init+0x320>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	43db      	mvns	r3, r3
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	4013      	ands	r3, r2
 8005044:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	4313      	orrs	r3, r2
 8005058:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800505a:	4a13      	ldr	r2, [pc, #76]	; (80050a8 <HAL_GPIO_Init+0x320>)
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	3301      	adds	r3, #1
 8005064:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	fa22 f303 	lsr.w	r3, r2, r3
 8005070:	2b00      	cmp	r3, #0
 8005072:	f47f ae91 	bne.w	8004d98 <HAL_GPIO_Init+0x10>
  }
}
 8005076:	bf00      	nop
 8005078:	bf00      	nop
 800507a:	371c      	adds	r7, #28
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	40021000 	.word	0x40021000
 8005088:	40010000 	.word	0x40010000
 800508c:	48000400 	.word	0x48000400
 8005090:	48000800 	.word	0x48000800
 8005094:	48000c00 	.word	0x48000c00
 8005098:	48001000 	.word	0x48001000
 800509c:	48001400 	.word	0x48001400
 80050a0:	48001800 	.word	0x48001800
 80050a4:	48001c00 	.word	0x48001c00
 80050a8:	40010400 	.word	0x40010400

080050ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	460b      	mov	r3, r1
 80050b6:	807b      	strh	r3, [r7, #2]
 80050b8:	4613      	mov	r3, r2
 80050ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050bc:	787b      	ldrb	r3, [r7, #1]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d003      	beq.n	80050ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80050c2:	887a      	ldrh	r2, [r7, #2]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80050c8:	e002      	b.n	80050d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80050ca:	887a      	ldrh	r2, [r7, #2]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	4603      	mov	r3, r0
 80050e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80050e6:	4b08      	ldr	r3, [pc, #32]	; (8005108 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050e8:	695a      	ldr	r2, [r3, #20]
 80050ea:	88fb      	ldrh	r3, [r7, #6]
 80050ec:	4013      	ands	r3, r2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d006      	beq.n	8005100 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80050f2:	4a05      	ldr	r2, [pc, #20]	; (8005108 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050f4:	88fb      	ldrh	r3, [r7, #6]
 80050f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80050f8:	88fb      	ldrh	r3, [r7, #6]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7fd fe9e 	bl	8002e3c <HAL_GPIO_EXTI_Callback>
  }
}
 8005100:	bf00      	nop
 8005102:	3708      	adds	r7, #8
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	40010400 	.word	0x40010400

0800510c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e08d      	b.n	800523a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d106      	bne.n	8005138 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7fe f84a 	bl	80031cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2224      	movs	r2, #36	; 0x24
 800513c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f022 0201 	bic.w	r2, r2, #1
 800514e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685a      	ldr	r2, [r3, #4]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800515c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	689a      	ldr	r2, [r3, #8]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800516c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	2b01      	cmp	r3, #1
 8005174:	d107      	bne.n	8005186 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	689a      	ldr	r2, [r3, #8]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005182:	609a      	str	r2, [r3, #8]
 8005184:	e006      	b.n	8005194 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689a      	ldr	r2, [r3, #8]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005192:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	2b02      	cmp	r3, #2
 800519a:	d108      	bne.n	80051ae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051aa:	605a      	str	r2, [r3, #4]
 80051ac:	e007      	b.n	80051be <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	685a      	ldr	r2, [r3, #4]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	6812      	ldr	r2, [r2, #0]
 80051c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80051cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68da      	ldr	r2, [r3, #12]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	691a      	ldr	r2, [r3, #16]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	430a      	orrs	r2, r1
 80051fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	69d9      	ldr	r1, [r3, #28]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a1a      	ldr	r2, [r3, #32]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	430a      	orrs	r2, r1
 800520a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f042 0201 	orr.w	r2, r2, #1
 800521a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2220      	movs	r2, #32
 8005226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3708      	adds	r7, #8
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b084      	sub	sp, #16
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800525e:	2b00      	cmp	r3, #0
 8005260:	d005      	beq.n	800526e <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	68f9      	ldr	r1, [r7, #12]
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	4798      	blx	r3
  }
}
 800526e:	bf00      	nop
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b086      	sub	sp, #24
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00f      	beq.n	80052b8 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00a      	beq.n	80052b8 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a6:	f043 0201 	orr.w	r2, r3, #1
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052b6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00f      	beq.n	80052e2 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00a      	beq.n	80052e2 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d0:	f043 0208 	orr.w	r2, r3, #8
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052e0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00f      	beq.n	800530c <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00a      	beq.n	800530c <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052fa:	f043 0202 	orr.w	r2, r3, #2
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f44f 7200 	mov.w	r2, #512	; 0x200
 800530a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005310:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f003 030b 	and.w	r3, r3, #11
 8005318:	2b00      	cmp	r3, #0
 800531a:	d003      	beq.n	8005324 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800531c:	68f9      	ldr	r1, [r7, #12]
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 fb82 	bl	8005a28 <I2C_ITError>
  }
}
 8005324:	bf00      	nop
 8005326:	3718      	adds	r7, #24
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	460b      	mov	r3, r1
 800535e:	70fb      	strb	r3, [r7, #3]
 8005360:	4613      	mov	r3, r2
 8005362:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005364:	bf00      	nop
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053bc:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d101      	bne.n	80053d0 <I2C_Slave_ISR_IT+0x24>
 80053cc:	2302      	movs	r3, #2
 80053ce:	e0e1      	b.n	8005594 <I2C_Slave_ISR_IT+0x1e8>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	f003 0320 	and.w	r3, r3, #32
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d008      	beq.n	80053f4 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d003      	beq.n	80053f4 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80053ec:	6939      	ldr	r1, [r7, #16]
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f000 f9b4 	bl	800575c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	f003 0310 	and.w	r3, r3, #16
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d04b      	beq.n	8005496 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005404:	2b00      	cmp	r3, #0
 8005406:	d046      	beq.n	8005496 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800540c:	b29b      	uxth	r3, r3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d128      	bne.n	8005464 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b28      	cmp	r3, #40	; 0x28
 800541c:	d108      	bne.n	8005430 <I2C_Slave_ISR_IT+0x84>
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005424:	d104      	bne.n	8005430 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005426:	6939      	ldr	r1, [r7, #16]
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f000 faa9 	bl	8005980 <I2C_ITListenCplt>
 800542e:	e031      	b.n	8005494 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005436:	b2db      	uxtb	r3, r3
 8005438:	2b29      	cmp	r3, #41	; 0x29
 800543a:	d10e      	bne.n	800545a <I2C_Slave_ISR_IT+0xae>
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005442:	d00a      	beq.n	800545a <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2210      	movs	r2, #16
 800544a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f000 fc02 	bl	8005c56 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f000 f926 	bl	80056a4 <I2C_ITSlaveSeqCplt>
 8005458:	e01c      	b.n	8005494 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2210      	movs	r2, #16
 8005460:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005462:	e08f      	b.n	8005584 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2210      	movs	r2, #16
 800546a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005470:	f043 0204 	orr.w	r2, r3, #4
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <I2C_Slave_ISR_IT+0xda>
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005484:	d17e      	bne.n	8005584 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800548a:	4619      	mov	r1, r3
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f000 facb 	bl	8005a28 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005492:	e077      	b.n	8005584 <I2C_Slave_ISR_IT+0x1d8>
 8005494:	e076      	b.n	8005584 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	f003 0304 	and.w	r3, r3, #4
 800549c:	2b00      	cmp	r3, #0
 800549e:	d02f      	beq.n	8005500 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d02a      	beq.n	8005500 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d018      	beq.n	80054e6 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054be:	b2d2      	uxtb	r2, r2
 80054c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c6:	1c5a      	adds	r2, r3, #1
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054d0:	3b01      	subs	r3, #1
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054dc:	b29b      	uxth	r3, r3
 80054de:	3b01      	subs	r3, #1
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d14b      	bne.n	8005588 <I2C_Slave_ISR_IT+0x1dc>
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054f6:	d047      	beq.n	8005588 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f000 f8d3 	bl	80056a4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80054fe:	e043      	b.n	8005588 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	f003 0308 	and.w	r3, r3, #8
 8005506:	2b00      	cmp	r3, #0
 8005508:	d009      	beq.n	800551e <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005510:	2b00      	cmp	r3, #0
 8005512:	d004      	beq.n	800551e <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005514:	6939      	ldr	r1, [r7, #16]
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	f000 f840 	bl	800559c <I2C_ITAddrCplt>
 800551c:	e035      	b.n	800558a <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	f003 0302 	and.w	r3, r3, #2
 8005524:	2b00      	cmp	r3, #0
 8005526:	d030      	beq.n	800558a <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800552e:	2b00      	cmp	r3, #0
 8005530:	d02b      	beq.n	800558a <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005536:	b29b      	uxth	r3, r3
 8005538:	2b00      	cmp	r3, #0
 800553a:	d018      	beq.n	800556e <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005540:	781a      	ldrb	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554c:	1c5a      	adds	r2, r3, #1
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005556:	b29b      	uxth	r3, r3
 8005558:	3b01      	subs	r3, #1
 800555a:	b29a      	uxth	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005564:	3b01      	subs	r3, #1
 8005566:	b29a      	uxth	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	851a      	strh	r2, [r3, #40]	; 0x28
 800556c:	e00d      	b.n	800558a <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005574:	d002      	beq.n	800557c <I2C_Slave_ISR_IT+0x1d0>
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d106      	bne.n	800558a <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f000 f891 	bl	80056a4 <I2C_ITSlaveSeqCplt>
 8005582:	e002      	b.n	800558a <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8005584:	bf00      	nop
 8005586:	e000      	b.n	800558a <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8005588:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3718      	adds	r7, #24
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80055b2:	2b28      	cmp	r3, #40	; 0x28
 80055b4:	d16a      	bne.n	800568c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	699b      	ldr	r3, [r3, #24]
 80055bc:	0c1b      	lsrs	r3, r3, #16
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	f003 0301 	and.w	r3, r3, #1
 80055c4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	0c1b      	lsrs	r3, r3, #16
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80055d4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	b29b      	uxth	r3, r3
 80055de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055e2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80055f0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d138      	bne.n	800566c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80055fa:	897b      	ldrh	r3, [r7, #10]
 80055fc:	09db      	lsrs	r3, r3, #7
 80055fe:	b29a      	uxth	r2, r3
 8005600:	89bb      	ldrh	r3, [r7, #12]
 8005602:	4053      	eors	r3, r2
 8005604:	b29b      	uxth	r3, r3
 8005606:	f003 0306 	and.w	r3, r3, #6
 800560a:	2b00      	cmp	r3, #0
 800560c:	d11c      	bne.n	8005648 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800560e:	897b      	ldrh	r3, [r7, #10]
 8005610:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005616:	1c5a      	adds	r2, r3, #1
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005620:	2b02      	cmp	r3, #2
 8005622:	d13b      	bne.n	800569c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2208      	movs	r2, #8
 8005630:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800563a:	89ba      	ldrh	r2, [r7, #12]
 800563c:	7bfb      	ldrb	r3, [r7, #15]
 800563e:	4619      	mov	r1, r3
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f7ff fe87 	bl	8005354 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005646:	e029      	b.n	800569c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005648:	893b      	ldrh	r3, [r7, #8]
 800564a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800564c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 fb42 	bl	8005cda <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800565e:	89ba      	ldrh	r2, [r7, #12]
 8005660:	7bfb      	ldrb	r3, [r7, #15]
 8005662:	4619      	mov	r1, r3
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f7ff fe75 	bl	8005354 <HAL_I2C_AddrCallback>
}
 800566a:	e017      	b.n	800569c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800566c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 fb32 	bl	8005cda <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800567e:	89ba      	ldrh	r2, [r7, #12]
 8005680:	7bfb      	ldrb	r3, [r7, #15]
 8005682:	4619      	mov	r1, r3
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f7ff fe65 	bl	8005354 <HAL_I2C_AddrCallback>
}
 800568a:	e007      	b.n	800569c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2208      	movs	r2, #8
 8005692:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800569c:	bf00      	nop
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d008      	beq.n	80056d8 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80056d4:	601a      	str	r2, [r3, #0]
 80056d6:	e00c      	b.n	80056f2 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d007      	beq.n	80056f2 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80056f0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b29      	cmp	r3, #41	; 0x29
 80056fc:	d112      	bne.n	8005724 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2228      	movs	r2, #40	; 0x28
 8005702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2221      	movs	r2, #33	; 0x21
 800570a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800570c:	2101      	movs	r1, #1
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 fae3 	bl	8005cda <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f7ff fe05 	bl	800532c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005722:	e017      	b.n	8005754 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b2a      	cmp	r3, #42	; 0x2a
 800572e:	d111      	bne.n	8005754 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2228      	movs	r2, #40	; 0x28
 8005734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2222      	movs	r2, #34	; 0x22
 800573c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800573e:	2102      	movs	r1, #2
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 faca 	bl	8005cda <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7ff fdf6 	bl	8005340 <HAL_I2C_SlaveRxCpltCallback>
}
 8005754:	bf00      	nop
 8005756:	3710      	adds	r7, #16
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b086      	sub	sp, #24
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005778:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2220      	movs	r2, #32
 8005780:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005782:	7bfb      	ldrb	r3, [r7, #15]
 8005784:	2b21      	cmp	r3, #33	; 0x21
 8005786:	d002      	beq.n	800578e <I2C_ITSlaveCplt+0x32>
 8005788:	7bfb      	ldrb	r3, [r7, #15]
 800578a:	2b29      	cmp	r3, #41	; 0x29
 800578c:	d108      	bne.n	80057a0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800578e:	f248 0101 	movw	r1, #32769	; 0x8001
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 faa1 	bl	8005cda <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2221      	movs	r2, #33	; 0x21
 800579c:	631a      	str	r2, [r3, #48]	; 0x30
 800579e:	e019      	b.n	80057d4 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80057a0:	7bfb      	ldrb	r3, [r7, #15]
 80057a2:	2b22      	cmp	r3, #34	; 0x22
 80057a4:	d002      	beq.n	80057ac <I2C_ITSlaveCplt+0x50>
 80057a6:	7bfb      	ldrb	r3, [r7, #15]
 80057a8:	2b2a      	cmp	r3, #42	; 0x2a
 80057aa:	d108      	bne.n	80057be <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80057ac:	f248 0102 	movw	r1, #32770	; 0x8002
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 fa92 	bl	8005cda <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2222      	movs	r2, #34	; 0x22
 80057ba:	631a      	str	r2, [r3, #48]	; 0x30
 80057bc:	e00a      	b.n	80057d4 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80057be:	7bfb      	ldrb	r3, [r7, #15]
 80057c0:	2b28      	cmp	r3, #40	; 0x28
 80057c2:	d107      	bne.n	80057d4 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80057c4:	f248 0103 	movw	r1, #32771	; 0x8003
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 fa86 	bl	8005cda <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057e2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	6859      	ldr	r1, [r3, #4]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	4b62      	ldr	r3, [pc, #392]	; (8005978 <I2C_ITSlaveCplt+0x21c>)
 80057f0:	400b      	ands	r3, r1
 80057f2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 fa2e 	bl	8005c56 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d013      	beq.n	800582c <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005812:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005818:	2b00      	cmp	r3, #0
 800581a:	d01f      	beq.n	800585c <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	b29a      	uxth	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	855a      	strh	r2, [r3, #42]	; 0x2a
 800582a:	e017      	b.n	800585c <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d012      	beq.n	800585c <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005844:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800584a:	2b00      	cmp	r3, #0
 800584c:	d006      	beq.n	800585c <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	b29a      	uxth	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	f003 0304 	and.w	r3, r3, #4
 8005862:	2b00      	cmp	r3, #0
 8005864:	d020      	beq.n	80058a8 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f023 0304 	bic.w	r3, r3, #4
 800586c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	b2d2      	uxtb	r2, r2
 800587a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005880:	1c5a      	adds	r2, r3, #1
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00c      	beq.n	80058a8 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005892:	3b01      	subs	r3, #1
 8005894:	b29a      	uxth	r2, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800589e:	b29b      	uxth	r3, r3
 80058a0:	3b01      	subs	r3, #1
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d005      	beq.n	80058be <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b6:	f043 0204 	orr.w	r2, r3, #4
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d010      	beq.n	80058f6 <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d8:	4619      	mov	r1, r3
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f8a4 	bl	8005a28 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b28      	cmp	r3, #40	; 0x28
 80058ea:	d141      	bne.n	8005970 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80058ec:	6979      	ldr	r1, [r7, #20]
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f846 	bl	8005980 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80058f4:	e03c      	b.n	8005970 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80058fe:	d014      	beq.n	800592a <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f7ff fecf 	bl	80056a4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a1c      	ldr	r2, [pc, #112]	; (800597c <I2C_ITSlaveCplt+0x220>)
 800590a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2220      	movs	r2, #32
 8005910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f7ff fd24 	bl	8005370 <HAL_I2C_ListenCpltCallback>
}
 8005928:	e022      	b.n	8005970 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b22      	cmp	r3, #34	; 0x22
 8005934:	d10e      	bne.n	8005954 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2220      	movs	r2, #32
 800593a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f7ff fcf7 	bl	8005340 <HAL_I2C_SlaveRxCpltCallback>
}
 8005952:	e00d      	b.n	8005970 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2220      	movs	r2, #32
 8005958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f7ff fcde 	bl	800532c <HAL_I2C_SlaveTxCpltCallback>
}
 8005970:	bf00      	nop
 8005972:	3718      	adds	r7, #24
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	fe00e800 	.word	0xfe00e800
 800597c:	ffff0000 	.word	0xffff0000

08005980 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a25      	ldr	r2, [pc, #148]	; (8005a24 <I2C_ITListenCplt+0xa4>)
 800598e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2220      	movs	r2, #32
 800599a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	f003 0304 	and.w	r3, r3, #4
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d022      	beq.n	80059fc <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c0:	b2d2      	uxtb	r2, r2
 80059c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c8:	1c5a      	adds	r2, r3, #1
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d012      	beq.n	80059fc <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059da:	3b01      	subs	r3, #1
 80059dc:	b29a      	uxth	r2, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	3b01      	subs	r3, #1
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f4:	f043 0204 	orr.w	r2, r3, #4
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80059fc:	f248 0103 	movw	r1, #32771	; 0x8003
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 f96a 	bl	8005cda <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2210      	movs	r2, #16
 8005a0c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7ff fcaa 	bl	8005370 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005a1c:	bf00      	nop
 8005a1e:	3708      	adds	r7, #8
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	ffff0000 	.word	0xffff0000

08005a28 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a38:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a6d      	ldr	r2, [pc, #436]	; (8005bfc <I2C_ITError+0x1d4>)
 8005a46:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	431a      	orrs	r2, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005a5a:	7bfb      	ldrb	r3, [r7, #15]
 8005a5c:	2b28      	cmp	r3, #40	; 0x28
 8005a5e:	d005      	beq.n	8005a6c <I2C_ITError+0x44>
 8005a60:	7bfb      	ldrb	r3, [r7, #15]
 8005a62:	2b29      	cmp	r3, #41	; 0x29
 8005a64:	d002      	beq.n	8005a6c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005a66:	7bfb      	ldrb	r3, [r7, #15]
 8005a68:	2b2a      	cmp	r3, #42	; 0x2a
 8005a6a:	d10b      	bne.n	8005a84 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005a6c:	2103      	movs	r1, #3
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f933 	bl	8005cda <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2228      	movs	r2, #40	; 0x28
 8005a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a60      	ldr	r2, [pc, #384]	; (8005c00 <I2C_ITError+0x1d8>)
 8005a80:	635a      	str	r2, [r3, #52]	; 0x34
 8005a82:	e030      	b.n	8005ae6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005a84:	f248 0103 	movw	r1, #32771	; 0x8003
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 f926 	bl	8005cda <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f8e1 	bl	8005c56 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	2b60      	cmp	r3, #96	; 0x60
 8005a9e:	d01f      	beq.n	8005ae0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	f003 0320 	and.w	r3, r3, #32
 8005ab2:	2b20      	cmp	r3, #32
 8005ab4:	d114      	bne.n	8005ae0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	f003 0310 	and.w	r3, r3, #16
 8005ac0:	2b10      	cmp	r3, #16
 8005ac2:	d109      	bne.n	8005ad8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2210      	movs	r2, #16
 8005aca:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad0:	f043 0204 	orr.w	r2, r3, #4
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2220      	movs	r2, #32
 8005ade:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aea:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d039      	beq.n	8005b68 <I2C_ITError+0x140>
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	2b11      	cmp	r3, #17
 8005af8:	d002      	beq.n	8005b00 <I2C_ITError+0xd8>
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	2b21      	cmp	r3, #33	; 0x21
 8005afe:	d133      	bne.n	8005b68 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b0e:	d107      	bne.n	8005b20 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b1e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b24:	4618      	mov	r0, r3
 8005b26:	f7ff f920 	bl	8004d6a <HAL_DMA_GetState>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d017      	beq.n	8005b60 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b34:	4a33      	ldr	r2, [pc, #204]	; (8005c04 <I2C_ITError+0x1dc>)
 8005b36:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7ff f8b1 	bl	8004cac <HAL_DMA_Abort_IT>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d04d      	beq.n	8005bec <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b5a:	4610      	mov	r0, r2
 8005b5c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005b5e:	e045      	b.n	8005bec <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 f851 	bl	8005c08 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005b66:	e041      	b.n	8005bec <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d039      	beq.n	8005be4 <I2C_ITError+0x1bc>
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	2b12      	cmp	r3, #18
 8005b74:	d002      	beq.n	8005b7c <I2C_ITError+0x154>
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	2b22      	cmp	r3, #34	; 0x22
 8005b7a:	d133      	bne.n	8005be4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b8a:	d107      	bne.n	8005b9c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b9a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7ff f8e2 	bl	8004d6a <HAL_DMA_GetState>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d017      	beq.n	8005bdc <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb0:	4a14      	ldr	r2, [pc, #80]	; (8005c04 <I2C_ITError+0x1dc>)
 8005bb2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7ff f873 	bl	8004cac <HAL_DMA_Abort_IT>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d011      	beq.n	8005bf0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005bd6:	4610      	mov	r0, r2
 8005bd8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005bda:	e009      	b.n	8005bf0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 f813 	bl	8005c08 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005be2:	e005      	b.n	8005bf0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 f80f 	bl	8005c08 <I2C_TreatErrorCallback>
  }
}
 8005bea:	e002      	b.n	8005bf2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005bec:	bf00      	nop
 8005bee:	e000      	b.n	8005bf2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005bf0:	bf00      	nop
}
 8005bf2:	bf00      	nop
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	ffff0000 	.word	0xffff0000
 8005c00:	080053ad 	.word	0x080053ad
 8005c04:	08005c9f 	.word	0x08005c9f

08005c08 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b60      	cmp	r3, #96	; 0x60
 8005c1a:	d10e      	bne.n	8005c3a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2220      	movs	r2, #32
 8005c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f7ff fbb0 	bl	8005398 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005c38:	e009      	b.n	8005c4e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f7ff fb9b 	bl	8005384 <HAL_I2C_ErrorCallback>
}
 8005c4e:	bf00      	nop
 8005c50:	3708      	adds	r7, #8
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005c56:	b480      	push	{r7}
 8005c58:	b083      	sub	sp, #12
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	f003 0302 	and.w	r3, r3, #2
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d103      	bne.n	8005c74 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2200      	movs	r2, #0
 8005c72:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d007      	beq.n	8005c92 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	699a      	ldr	r2, [r3, #24]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f042 0201 	orr.w	r2, r2, #1
 8005c90:	619a      	str	r2, [r3, #24]
  }
}
 8005c92:	bf00      	nop
 8005c94:	370c      	adds	r7, #12
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr

08005c9e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b084      	sub	sp, #16
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005caa:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d003      	beq.n	8005cbc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb8:	2200      	movs	r2, #0
 8005cba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d003      	beq.n	8005ccc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc8:	2200      	movs	r2, #0
 8005cca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f7ff ff9b 	bl	8005c08 <I2C_TreatErrorCallback>
}
 8005cd2:	bf00      	nop
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b085      	sub	sp, #20
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005cea:	887b      	ldrh	r3, [r7, #2]
 8005cec:	f003 0301 	and.w	r3, r3, #1
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00f      	beq.n	8005d14 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005cfa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005d08:	2b28      	cmp	r3, #40	; 0x28
 8005d0a:	d003      	beq.n	8005d14 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005d12:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005d14:	887b      	ldrh	r3, [r7, #2]
 8005d16:	f003 0302 	and.w	r3, r3, #2
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00f      	beq.n	8005d3e <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8005d24:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005d32:	2b28      	cmp	r3, #40	; 0x28
 8005d34:	d003      	beq.n	8005d3e <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005d3c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005d3e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	da03      	bge.n	8005d4e <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005d4c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005d4e:	887b      	ldrh	r3, [r7, #2]
 8005d50:	2b10      	cmp	r3, #16
 8005d52:	d103      	bne.n	8005d5c <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005d5a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005d5c:	887b      	ldrh	r3, [r7, #2]
 8005d5e:	2b20      	cmp	r3, #32
 8005d60:	d103      	bne.n	8005d6a <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f043 0320 	orr.w	r3, r3, #32
 8005d68:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005d6a:	887b      	ldrh	r3, [r7, #2]
 8005d6c:	2b40      	cmp	r3, #64	; 0x40
 8005d6e:	d103      	bne.n	8005d78 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d76:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6819      	ldr	r1, [r3, #0]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	43da      	mvns	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	400a      	ands	r2, r1
 8005d88:	601a      	str	r2, [r3, #0]
}
 8005d8a:	bf00      	nop
 8005d8c:	3714      	adds	r7, #20
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b083      	sub	sp, #12
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
 8005d9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	2b20      	cmp	r3, #32
 8005daa:	d138      	bne.n	8005e1e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d101      	bne.n	8005dba <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005db6:	2302      	movs	r3, #2
 8005db8:	e032      	b.n	8005e20 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2224      	movs	r2, #36	; 0x24
 8005dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f022 0201 	bic.w	r2, r2, #1
 8005dd8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005de8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	6819      	ldr	r1, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	683a      	ldr	r2, [r7, #0]
 8005df6:	430a      	orrs	r2, r1
 8005df8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f042 0201 	orr.w	r2, r2, #1
 8005e08:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2220      	movs	r2, #32
 8005e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	e000      	b.n	8005e20 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005e1e:	2302      	movs	r3, #2
  }
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b20      	cmp	r3, #32
 8005e40:	d139      	bne.n	8005eb6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d101      	bne.n	8005e50 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	e033      	b.n	8005eb8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2224      	movs	r2, #36	; 0x24
 8005e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f022 0201 	bic.w	r2, r2, #1
 8005e6e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005e7e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	021b      	lsls	r3, r3, #8
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f042 0201 	orr.w	r2, r2, #1
 8005ea0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	e000      	b.n	8005eb8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005eb6:	2302      	movs	r3, #2
  }
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3714      	adds	r7, #20
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af02      	add	r7, sp, #8
 8005eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8005ed0:	f7fd fd90 	bl	80039f4 <HAL_GetTick>
 8005ed4:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d102      	bne.n	8005ee2 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	73fb      	strb	r3, [r7, #15]
 8005ee0:	e092      	b.n	8006008 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f040 808b 	bne.w	8006008 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f7fd fa1c 	bl	8003330 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8005ef8:	f241 3188 	movw	r1, #5000	; 0x1388
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 f88b 	bl	8006018 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	689a      	ldr	r2, [r3, #8]
 8005f08:	4b42      	ldr	r3, [pc, #264]	; (8006014 <HAL_OSPI_Init+0x150>)
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	68d1      	ldr	r1, [r2, #12]
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	6912      	ldr	r2, [r2, #16]
 8005f14:	3a01      	subs	r2, #1
 8005f16:	0412      	lsls	r2, r2, #16
 8005f18:	4311      	orrs	r1, r2
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	6952      	ldr	r2, [r2, #20]
 8005f1e:	3a01      	subs	r2, #1
 8005f20:	0212      	lsls	r2, r2, #8
 8005f22:	4311      	orrs	r1, r2
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005f28:	4311      	orrs	r1, r2
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	69d2      	ldr	r2, [r2, #28]
 8005f2e:	4311      	orrs	r1, r2
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	6812      	ldr	r2, [r2, #0]
 8005f34:	430b      	orrs	r3, r1
 8005f36:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	0412      	lsls	r2, r2, #16
 8005f42:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	3b01      	subs	r3, #1
 8005f54:	021a      	lsls	r2, r3, #8
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f62:	9300      	str	r3, [sp, #0]
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	2200      	movs	r2, #0
 8005f68:	2120      	movs	r1, #32
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 fb98 	bl	80066a0 <OSPI_WaitFlagStateUntilTimeout>
 8005f70:	4603      	mov	r3, r0
 8005f72:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d146      	bne.n	8006008 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a1b      	ldr	r3, [r3, #32]
 8005f88:	1e5a      	subs	r2, r3, #1
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	689a      	ldr	r2, [r3, #8]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	430a      	orrs	r2, r1
 8005fa6:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005fb0:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fbc:	431a      	orrs	r2, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f042 0201 	orr.w	r2, r2, #1
 8005fd6:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	d107      	bne.n	8005ff0 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	689a      	ldr	r2, [r3, #8]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f042 0202 	orr.w	r2, r2, #2
 8005fee:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ff8:	d103      	bne.n	8006002 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	645a      	str	r2, [r3, #68]	; 0x44
 8006000:	e002      	b.n	8006008 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2202      	movs	r2, #2
 8006006:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8006008:	7bfb      	ldrb	r3, [r7, #15]
}
 800600a:	4618      	mov	r0, r3
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	f8e0f8f4 	.word	0xf8e0f8f4

08006018 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	370c      	adds	r7, #12
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
	...

08006038 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b092      	sub	sp, #72	; 0x48
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006044:	2300      	movs	r3, #0
 8006046:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800604a:	2300      	movs	r3, #0
 800604c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a08      	ldr	r2, [pc, #32]	; (8006078 <HAL_OSPIM_Config+0x40>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d105      	bne.n	8006066 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800605a:	2300      	movs	r3, #0
 800605c:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 800605e:	2301      	movs	r3, #1
 8006060:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8006064:	e004      	b.n	8006070 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8006066:	2301      	movs	r3, #1
 8006068:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 800606a:	2300      	movs	r3, #0
 800606c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8006070:	2300      	movs	r3, #0
 8006072:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006076:	e01f      	b.n	80060b8 <HAL_OSPIM_Config+0x80>
 8006078:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 800607c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006080:	3301      	adds	r3, #1
 8006082:	b2d8      	uxtb	r0, r3
 8006084:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006088:	f107 0114 	add.w	r1, r7, #20
 800608c:	4613      	mov	r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	4413      	add	r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	440b      	add	r3, r1
 8006096:	4619      	mov	r1, r3
 8006098:	f000 fb3a 	bl	8006710 <OSPIM_GetConfig>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d005      	beq.n	80060ae <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2208      	movs	r2, #8
 80060ac:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80060ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80060b2:	3301      	adds	r3, #1
 80060b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80060b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d9dd      	bls.n	800607c <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 80060c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f040 82de 	bne.w	8006686 <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80060ca:	4bc6      	ldr	r3, [pc, #792]	; (80063e4 <HAL_OSPIM_Config+0x3ac>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0301 	and.w	r3, r3, #1
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00b      	beq.n	80060ee <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80060d6:	4bc3      	ldr	r3, [pc, #780]	; (80063e4 <HAL_OSPIM_Config+0x3ac>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4ac2      	ldr	r2, [pc, #776]	; (80063e4 <HAL_OSPIM_Config+0x3ac>)
 80060dc:	f023 0301 	bic.w	r3, r3, #1
 80060e0:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80060e2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80060e6:	f043 0301 	orr.w	r3, r3, #1
 80060ea:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80060ee:	4bbe      	ldr	r3, [pc, #760]	; (80063e8 <HAL_OSPIM_Config+0x3b0>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00b      	beq.n	8006112 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80060fa:	4bbb      	ldr	r3, [pc, #748]	; (80063e8 <HAL_OSPIM_Config+0x3b0>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4aba      	ldr	r2, [pc, #744]	; (80063e8 <HAL_OSPIM_Config+0x3b0>)
 8006100:	f023 0301 	bic.w	r3, r3, #1
 8006104:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8006106:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800610a:	f043 0302 	orr.w	r3, r3, #2
 800610e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8006112:	49b6      	ldr	r1, [pc, #728]	; (80063ec <HAL_OSPIM_Config+0x3b4>)
 8006114:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006116:	4613      	mov	r3, r2
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	4413      	add	r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	3348      	adds	r3, #72	; 0x48
 8006120:	443b      	add	r3, r7
 8006122:	3b2c      	subs	r3, #44	; 0x2c
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	3b01      	subs	r3, #1
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	440b      	add	r3, r1
 800612c:	6859      	ldr	r1, [r3, #4]
 800612e:	48af      	ldr	r0, [pc, #700]	; (80063ec <HAL_OSPIM_Config+0x3b4>)
 8006130:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006132:	4613      	mov	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	3348      	adds	r3, #72	; 0x48
 800613c:	443b      	add	r3, r7
 800613e:	3b2c      	subs	r3, #44	; 0x2c
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	3b01      	subs	r3, #1
 8006144:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4403      	add	r3, r0
 800614c:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 800614e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006150:	4613      	mov	r3, r2
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4413      	add	r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	3348      	adds	r3, #72	; 0x48
 800615a:	443b      	add	r3, r7
 800615c:	3b34      	subs	r3, #52	; 0x34
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	f000 80a1 	beq.w	80062a8 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8006166:	49a1      	ldr	r1, [pc, #644]	; (80063ec <HAL_OSPIM_Config+0x3b4>)
 8006168:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800616a:	4613      	mov	r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4413      	add	r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	3348      	adds	r3, #72	; 0x48
 8006174:	443b      	add	r3, r7
 8006176:	3b34      	subs	r3, #52	; 0x34
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	3b01      	subs	r3, #1
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	440b      	add	r3, r1
 8006180:	6859      	ldr	r1, [r3, #4]
 8006182:	489a      	ldr	r0, [pc, #616]	; (80063ec <HAL_OSPIM_Config+0x3b4>)
 8006184:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006186:	4613      	mov	r3, r2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	4413      	add	r3, r2
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	3348      	adds	r3, #72	; 0x48
 8006190:	443b      	add	r3, r7
 8006192:	3b34      	subs	r3, #52	; 0x34
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	3b01      	subs	r3, #1
 8006198:	f021 0201 	bic.w	r2, r1, #1
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	4403      	add	r3, r0
 80061a0:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80061a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061a4:	4613      	mov	r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4413      	add	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	3348      	adds	r3, #72	; 0x48
 80061ae:	443b      	add	r3, r7
 80061b0:	3b30      	subs	r3, #48	; 0x30
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d01d      	beq.n	80061f4 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80061b8:	498c      	ldr	r1, [pc, #560]	; (80063ec <HAL_OSPIM_Config+0x3b4>)
 80061ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061bc:	4613      	mov	r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4413      	add	r3, r2
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	3348      	adds	r3, #72	; 0x48
 80061c6:	443b      	add	r3, r7
 80061c8:	3b30      	subs	r3, #48	; 0x30
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	3b01      	subs	r3, #1
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	440b      	add	r3, r1
 80061d2:	6859      	ldr	r1, [r3, #4]
 80061d4:	4885      	ldr	r0, [pc, #532]	; (80063ec <HAL_OSPIM_Config+0x3b4>)
 80061d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061d8:	4613      	mov	r3, r2
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	4413      	add	r3, r2
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	3348      	adds	r3, #72	; 0x48
 80061e2:	443b      	add	r3, r7
 80061e4:	3b30      	subs	r3, #48	; 0x30
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	3b01      	subs	r3, #1
 80061ea:	f021 0210 	bic.w	r2, r1, #16
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4403      	add	r3, r0
 80061f2:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80061f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061f6:	4613      	mov	r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	4413      	add	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	3348      	adds	r3, #72	; 0x48
 8006200:	443b      	add	r3, r7
 8006202:	3b28      	subs	r3, #40	; 0x28
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d021      	beq.n	800624e <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800620a:	4978      	ldr	r1, [pc, #480]	; (80063ec <HAL_OSPIM_Config+0x3b4>)
 800620c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800620e:	4613      	mov	r3, r2
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4413      	add	r3, r2
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	3348      	adds	r3, #72	; 0x48
 8006218:	443b      	add	r3, r7
 800621a:	3b28      	subs	r3, #40	; 0x28
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	3b01      	subs	r3, #1
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	440b      	add	r3, r1
 8006228:	6859      	ldr	r1, [r3, #4]
 800622a:	4870      	ldr	r0, [pc, #448]	; (80063ec <HAL_OSPIM_Config+0x3b4>)
 800622c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800622e:	4613      	mov	r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4413      	add	r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	3348      	adds	r3, #72	; 0x48
 8006238:	443b      	add	r3, r7
 800623a:	3b28      	subs	r3, #40	; 0x28
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	3b01      	subs	r3, #1
 8006240:	f003 0301 	and.w	r3, r3, #1
 8006244:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4403      	add	r3, r0
 800624c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800624e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006250:	4613      	mov	r3, r2
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	4413      	add	r3, r2
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	3348      	adds	r3, #72	; 0x48
 800625a:	443b      	add	r3, r7
 800625c:	3b24      	subs	r3, #36	; 0x24
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d021      	beq.n	80062a8 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8006264:	4961      	ldr	r1, [pc, #388]	; (80063ec <HAL_OSPIM_Config+0x3b4>)
 8006266:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006268:	4613      	mov	r3, r2
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	4413      	add	r3, r2
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	3348      	adds	r3, #72	; 0x48
 8006272:	443b      	add	r3, r7
 8006274:	3b24      	subs	r3, #36	; 0x24
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	3b01      	subs	r3, #1
 800627a:	f003 0301 	and.w	r3, r3, #1
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	440b      	add	r3, r1
 8006282:	6859      	ldr	r1, [r3, #4]
 8006284:	4859      	ldr	r0, [pc, #356]	; (80063ec <HAL_OSPIM_Config+0x3b4>)
 8006286:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006288:	4613      	mov	r3, r2
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	4413      	add	r3, r2
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	3348      	adds	r3, #72	; 0x48
 8006292:	443b      	add	r3, r7
 8006294:	3b24      	subs	r3, #36	; 0x24
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	3b01      	subs	r3, #1
 800629a:	f003 0301 	and.w	r3, r3, #1
 800629e:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	4403      	add	r3, r0
 80062a6:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	6819      	ldr	r1, [r3, #0]
 80062ac:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80062b0:	4613      	mov	r3, r2
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	4413      	add	r3, r2
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	3348      	adds	r3, #72	; 0x48
 80062ba:	443b      	add	r3, r7
 80062bc:	3b34      	subs	r3, #52	; 0x34
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4299      	cmp	r1, r3
 80062c2:	d038      	beq.n	8006336 <HAL_OSPIM_Config+0x2fe>
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	6859      	ldr	r1, [r3, #4]
 80062c8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80062cc:	4613      	mov	r3, r2
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4413      	add	r3, r2
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	3348      	adds	r3, #72	; 0x48
 80062d6:	443b      	add	r3, r7
 80062d8:	3b30      	subs	r3, #48	; 0x30
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4299      	cmp	r1, r3
 80062de:	d02a      	beq.n	8006336 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	6899      	ldr	r1, [r3, #8]
 80062e4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80062e8:	4613      	mov	r3, r2
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	4413      	add	r3, r2
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	3348      	adds	r3, #72	; 0x48
 80062f2:	443b      	add	r3, r7
 80062f4:	3b2c      	subs	r3, #44	; 0x2c
 80062f6:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80062f8:	4299      	cmp	r1, r3
 80062fa:	d01c      	beq.n	8006336 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	68d9      	ldr	r1, [r3, #12]
 8006300:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006304:	4613      	mov	r3, r2
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	4413      	add	r3, r2
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	3348      	adds	r3, #72	; 0x48
 800630e:	443b      	add	r3, r7
 8006310:	3b28      	subs	r3, #40	; 0x28
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4299      	cmp	r1, r3
 8006316:	d00e      	beq.n	8006336 <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	6919      	ldr	r1, [r3, #16]
 800631c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006320:	4613      	mov	r3, r2
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	4413      	add	r3, r2
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	3348      	adds	r3, #72	; 0x48
 800632a:	443b      	add	r3, r7
 800632c:	3b24      	subs	r3, #36	; 0x24
 800632e:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006330:	4299      	cmp	r1, r3
 8006332:	f040 80d3 	bne.w	80064dc <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8006336:	492d      	ldr	r1, [pc, #180]	; (80063ec <HAL_OSPIM_Config+0x3b4>)
 8006338:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800633c:	4613      	mov	r3, r2
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	4413      	add	r3, r2
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	3348      	adds	r3, #72	; 0x48
 8006346:	443b      	add	r3, r7
 8006348:	3b34      	subs	r3, #52	; 0x34
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	3b01      	subs	r3, #1
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	440b      	add	r3, r1
 8006352:	6859      	ldr	r1, [r3, #4]
 8006354:	4825      	ldr	r0, [pc, #148]	; (80063ec <HAL_OSPIM_Config+0x3b4>)
 8006356:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800635a:	4613      	mov	r3, r2
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	4413      	add	r3, r2
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	3348      	adds	r3, #72	; 0x48
 8006364:	443b      	add	r3, r7
 8006366:	3b34      	subs	r3, #52	; 0x34
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	3b01      	subs	r3, #1
 800636c:	f021 0201 	bic.w	r2, r1, #1
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	4403      	add	r3, r0
 8006374:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8006376:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800637a:	4613      	mov	r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	4413      	add	r3, r2
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	3348      	adds	r3, #72	; 0x48
 8006384:	443b      	add	r3, r7
 8006386:	3b30      	subs	r3, #48	; 0x30
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d01f      	beq.n	80063ce <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800638e:	4917      	ldr	r1, [pc, #92]	; (80063ec <HAL_OSPIM_Config+0x3b4>)
 8006390:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006394:	4613      	mov	r3, r2
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	4413      	add	r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	3348      	adds	r3, #72	; 0x48
 800639e:	443b      	add	r3, r7
 80063a0:	3b30      	subs	r3, #48	; 0x30
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	3b01      	subs	r3, #1
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	440b      	add	r3, r1
 80063aa:	6859      	ldr	r1, [r3, #4]
 80063ac:	480f      	ldr	r0, [pc, #60]	; (80063ec <HAL_OSPIM_Config+0x3b4>)
 80063ae:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80063b2:	4613      	mov	r3, r2
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	4413      	add	r3, r2
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	3348      	adds	r3, #72	; 0x48
 80063bc:	443b      	add	r3, r7
 80063be:	3b30      	subs	r3, #48	; 0x30
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	3b01      	subs	r3, #1
 80063c4:	f021 0210 	bic.w	r2, r1, #16
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	4403      	add	r3, r0
 80063cc:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80063ce:	4907      	ldr	r1, [pc, #28]	; (80063ec <HAL_OSPIM_Config+0x3b4>)
 80063d0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80063d4:	4613      	mov	r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	3348      	adds	r3, #72	; 0x48
 80063de:	443b      	add	r3, r7
 80063e0:	3b2c      	subs	r3, #44	; 0x2c
 80063e2:	e005      	b.n	80063f0 <HAL_OSPIM_Config+0x3b8>
 80063e4:	a0001000 	.word	0xa0001000
 80063e8:	a0001400 	.word	0xa0001400
 80063ec:	50061c00 	.word	0x50061c00
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	3b01      	subs	r3, #1
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	440b      	add	r3, r1
 80063f8:	6859      	ldr	r1, [r3, #4]
 80063fa:	48a6      	ldr	r0, [pc, #664]	; (8006694 <HAL_OSPIM_Config+0x65c>)
 80063fc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006400:	4613      	mov	r3, r2
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	4413      	add	r3, r2
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	3348      	adds	r3, #72	; 0x48
 800640a:	443b      	add	r3, r7
 800640c:	3b2c      	subs	r3, #44	; 0x2c
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	3b01      	subs	r3, #1
 8006412:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	4403      	add	r3, r0
 800641a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800641c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006420:	4613      	mov	r3, r2
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	4413      	add	r3, r2
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	3348      	adds	r3, #72	; 0x48
 800642a:	443b      	add	r3, r7
 800642c:	3b28      	subs	r3, #40	; 0x28
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d023      	beq.n	800647c <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006434:	4997      	ldr	r1, [pc, #604]	; (8006694 <HAL_OSPIM_Config+0x65c>)
 8006436:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800643a:	4613      	mov	r3, r2
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	4413      	add	r3, r2
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	3348      	adds	r3, #72	; 0x48
 8006444:	443b      	add	r3, r7
 8006446:	3b28      	subs	r3, #40	; 0x28
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	3b01      	subs	r3, #1
 800644c:	f003 0301 	and.w	r3, r3, #1
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	440b      	add	r3, r1
 8006454:	6859      	ldr	r1, [r3, #4]
 8006456:	488f      	ldr	r0, [pc, #572]	; (8006694 <HAL_OSPIM_Config+0x65c>)
 8006458:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800645c:	4613      	mov	r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4413      	add	r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	3348      	adds	r3, #72	; 0x48
 8006466:	443b      	add	r3, r7
 8006468:	3b28      	subs	r3, #40	; 0x28
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	3b01      	subs	r3, #1
 800646e:	f003 0301 	and.w	r3, r3, #1
 8006472:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	4403      	add	r3, r0
 800647a:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800647c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006480:	4613      	mov	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4413      	add	r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	3348      	adds	r3, #72	; 0x48
 800648a:	443b      	add	r3, r7
 800648c:	3b24      	subs	r3, #36	; 0x24
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d023      	beq.n	80064dc <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006494:	497f      	ldr	r1, [pc, #508]	; (8006694 <HAL_OSPIM_Config+0x65c>)
 8006496:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800649a:	4613      	mov	r3, r2
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	4413      	add	r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	3348      	adds	r3, #72	; 0x48
 80064a4:	443b      	add	r3, r7
 80064a6:	3b24      	subs	r3, #36	; 0x24
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	3b01      	subs	r3, #1
 80064ac:	f003 0301 	and.w	r3, r3, #1
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	440b      	add	r3, r1
 80064b4:	6859      	ldr	r1, [r3, #4]
 80064b6:	4877      	ldr	r0, [pc, #476]	; (8006694 <HAL_OSPIM_Config+0x65c>)
 80064b8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80064bc:	4613      	mov	r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	4413      	add	r3, r2
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	3348      	adds	r3, #72	; 0x48
 80064c6:	443b      	add	r3, r7
 80064c8:	3b24      	subs	r3, #36	; 0x24
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	3b01      	subs	r3, #1
 80064ce:	f003 0301 	and.w	r3, r3, #1
 80064d2:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4403      	add	r3, r0
 80064da:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80064dc:	4a6d      	ldr	r2, [pc, #436]	; (8006694 <HAL_OSPIM_Config+0x65c>)
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	3b01      	subs	r3, #1
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	4413      	add	r3, r2
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064f0:	025b      	lsls	r3, r3, #9
 80064f2:	431a      	orrs	r2, r3
 80064f4:	4967      	ldr	r1, [pc, #412]	; (8006694 <HAL_OSPIM_Config+0x65c>)
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	3b01      	subs	r3, #1
 80064fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	440b      	add	r3, r1
 8006504:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8006506:	4a63      	ldr	r2, [pc, #396]	; (8006694 <HAL_OSPIM_Config+0x65c>)
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	3b01      	subs	r3, #1
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	4413      	add	r3, r2
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f023 0203 	bic.w	r2, r3, #3
 8006518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800651a:	005b      	lsls	r3, r3, #1
 800651c:	431a      	orrs	r2, r3
 800651e:	495d      	ldr	r1, [pc, #372]	; (8006694 <HAL_OSPIM_Config+0x65c>)
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	3b01      	subs	r3, #1
 8006526:	f042 0201 	orr.w	r2, r2, #1
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	440b      	add	r3, r1
 800652e:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d014      	beq.n	8006562 <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8006538:	4a56      	ldr	r2, [pc, #344]	; (8006694 <HAL_OSPIM_Config+0x65c>)
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	3b01      	subs	r3, #1
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	4413      	add	r3, r2
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800654a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800654c:	015b      	lsls	r3, r3, #5
 800654e:	431a      	orrs	r2, r3
 8006550:	4950      	ldr	r1, [pc, #320]	; (8006694 <HAL_OSPIM_Config+0x65c>)
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	3b01      	subs	r3, #1
 8006558:	f042 0210 	orr.w	r2, r2, #16
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	440b      	add	r3, r1
 8006560:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d019      	beq.n	80065a2 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800656e:	4a49      	ldr	r2, [pc, #292]	; (8006694 <HAL_OSPIM_Config+0x65c>)
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	3b01      	subs	r3, #1
 8006576:	f003 0301 	and.w	r3, r3, #1
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4413      	add	r3, r2
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006586:	049b      	lsls	r3, r3, #18
 8006588:	431a      	orrs	r2, r3
 800658a:	4942      	ldr	r1, [pc, #264]	; (8006694 <HAL_OSPIM_Config+0x65c>)
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	3b01      	subs	r3, #1
 8006592:	f003 0301 	and.w	r3, r3, #1
 8006596:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	440b      	add	r3, r1
 800659e:	605a      	str	r2, [r3, #4]
 80065a0:	e01c      	b.n	80065dc <HAL_OSPIM_Config+0x5a4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d018      	beq.n	80065dc <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80065aa:	4a3a      	ldr	r2, [pc, #232]	; (8006694 <HAL_OSPIM_Config+0x65c>)
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	3b01      	subs	r3, #1
 80065b2:	f003 0301 	and.w	r3, r3, #1
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	4413      	add	r3, r2
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80065c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065c2:	069b      	lsls	r3, r3, #26
 80065c4:	431a      	orrs	r2, r3
 80065c6:	4933      	ldr	r1, [pc, #204]	; (8006694 <HAL_OSPIM_Config+0x65c>)
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	3b01      	subs	r3, #1
 80065ce:	f003 0301 	and.w	r3, r3, #1
 80065d2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	440b      	add	r3, r1
 80065da:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d019      	beq.n	800661c <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80065e8:	4a2a      	ldr	r2, [pc, #168]	; (8006694 <HAL_OSPIM_Config+0x65c>)
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	3b01      	subs	r3, #1
 80065f0:	f003 0301 	and.w	r3, r3, #1
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	4413      	add	r3, r2
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80065fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006600:	049b      	lsls	r3, r3, #18
 8006602:	431a      	orrs	r2, r3
 8006604:	4923      	ldr	r1, [pc, #140]	; (8006694 <HAL_OSPIM_Config+0x65c>)
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	3b01      	subs	r3, #1
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	440b      	add	r3, r1
 8006618:	605a      	str	r2, [r3, #4]
 800661a:	e01c      	b.n	8006656 <HAL_OSPIM_Config+0x61e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d018      	beq.n	8006656 <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006624:	4a1b      	ldr	r2, [pc, #108]	; (8006694 <HAL_OSPIM_Config+0x65c>)
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	3b01      	subs	r3, #1
 800662c:	f003 0301 	and.w	r3, r3, #1
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	4413      	add	r3, r2
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800663a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800663c:	069b      	lsls	r3, r3, #26
 800663e:	431a      	orrs	r2, r3
 8006640:	4914      	ldr	r1, [pc, #80]	; (8006694 <HAL_OSPIM_Config+0x65c>)
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	3b01      	subs	r3, #1
 8006648:	f003 0301 	and.w	r3, r3, #1
 800664c:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	440b      	add	r3, r1
 8006654:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8006656:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800665a:	f003 0301 	and.w	r3, r3, #1
 800665e:	2b00      	cmp	r3, #0
 8006660:	d005      	beq.n	800666e <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8006662:	4b0d      	ldr	r3, [pc, #52]	; (8006698 <HAL_OSPIM_Config+0x660>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a0c      	ldr	r2, [pc, #48]	; (8006698 <HAL_OSPIM_Config+0x660>)
 8006668:	f043 0301 	orr.w	r3, r3, #1
 800666c:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 800666e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006672:	f003 0302 	and.w	r3, r3, #2
 8006676:	2b00      	cmp	r3, #0
 8006678:	d005      	beq.n	8006686 <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800667a:	4b08      	ldr	r3, [pc, #32]	; (800669c <HAL_OSPIM_Config+0x664>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a07      	ldr	r2, [pc, #28]	; (800669c <HAL_OSPIM_Config+0x664>)
 8006680:	f043 0301 	orr.w	r3, r3, #1
 8006684:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8006686:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800668a:	4618      	mov	r0, r3
 800668c:	3748      	adds	r7, #72	; 0x48
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	50061c00 	.word	0x50061c00
 8006698:	a0001000 	.word	0xa0001000
 800669c:	a0001400 	.word	0xa0001400

080066a0 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	603b      	str	r3, [r7, #0]
 80066ac:	4613      	mov	r3, r2
 80066ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80066b0:	e01a      	b.n	80066e8 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b8:	d016      	beq.n	80066e8 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066ba:	f7fd f99b 	bl	80039f4 <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	69ba      	ldr	r2, [r7, #24]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d302      	bcc.n	80066d0 <OSPI_WaitFlagStateUntilTimeout+0x30>
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10b      	bne.n	80066e8 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066d6:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066dc:	f043 0201 	orr.w	r2, r3, #1
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e00e      	b.n	8006706 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6a1a      	ldr	r2, [r3, #32]
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	4013      	ands	r3, r2
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	bf14      	ite	ne
 80066f6:	2301      	movne	r3, #1
 80066f8:	2300      	moveq	r3, #0
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	461a      	mov	r2, r3
 80066fe:	79fb      	ldrb	r3, [r7, #7]
 8006700:	429a      	cmp	r2, r3
 8006702:	d1d6      	bne.n	80066b2 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
	...

08006710 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8006710:	b480      	push	{r7}
 8006712:	b087      	sub	sp, #28
 8006714:	af00      	add	r7, sp, #0
 8006716:	4603      	mov	r3, r0
 8006718:	6039      	str	r1, [r7, #0]
 800671a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800671c:	2300      	movs	r3, #0
 800671e:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8006720:	2300      	movs	r3, #0
 8006722:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8006724:	79fb      	ldrb	r3, [r7, #7]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d005      	beq.n	8006736 <OSPIM_GetConfig+0x26>
 800672a:	79fb      	ldrb	r3, [r7, #7]
 800672c:	2b02      	cmp	r3, #2
 800672e:	d802      	bhi.n	8006736 <OSPIM_GetConfig+0x26>
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d102      	bne.n	800673c <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	75fb      	strb	r3, [r7, #23]
 800673a:	e08e      	b.n	800685a <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	2200      	movs	r2, #0
 8006740:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	2200      	movs	r2, #0
 8006746:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	2200      	movs	r2, #0
 800674c:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	2200      	movs	r2, #0
 8006752:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	2200      	movs	r2, #0
 8006758:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800675a:	79fb      	ldrb	r3, [r7, #7]
 800675c:	2b02      	cmp	r3, #2
 800675e:	d101      	bne.n	8006764 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8006760:	4b41      	ldr	r3, [pc, #260]	; (8006868 <OSPIM_GetConfig+0x158>)
 8006762:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8006764:	2300      	movs	r3, #0
 8006766:	60fb      	str	r3, [r7, #12]
 8006768:	e074      	b.n	8006854 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 800676a:	4a40      	ldr	r2, [pc, #256]	; (800686c <OSPIM_GetConfig+0x15c>)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	4413      	add	r3, r2
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	f003 0301 	and.w	r3, r3, #1
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00a      	beq.n	8006796 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8006780:	68ba      	ldr	r2, [r7, #8]
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	4053      	eors	r3, r2
 8006786:	f003 0302 	and.w	r3, r3, #2
 800678a:	2b00      	cmp	r3, #0
 800678c:	d103      	bne.n	8006796 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	1c5a      	adds	r2, r3, #1
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	f003 0310 	and.w	r3, r3, #16
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00a      	beq.n	80067b6 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	4053      	eors	r3, r2
 80067a6:	f003 0320 	and.w	r3, r3, #32
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d103      	bne.n	80067b6 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	1c5a      	adds	r2, r3, #1
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00a      	beq.n	80067d6 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	4053      	eors	r3, r2
 80067c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d103      	bne.n	80067d6 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	1c5a      	adds	r2, r3, #1
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d018      	beq.n	8006812 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	4053      	eors	r3, r2
 80067e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d111      	bne.n	8006812 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d106      	bne.n	8006806 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	3301      	adds	r3, #1
 80067fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	60da      	str	r2, [r3, #12]
 8006804:	e005      	b.n	8006812 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	3301      	adds	r3, #1
 800680a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d018      	beq.n	800684e <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	4053      	eors	r3, r2
 8006822:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006826:	2b00      	cmp	r3, #0
 8006828:	d111      	bne.n	800684e <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d106      	bne.n	8006842 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	3301      	adds	r3, #1
 8006838:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	611a      	str	r2, [r3, #16]
 8006840:	e005      	b.n	800684e <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	3301      	adds	r3, #1
 8006846:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	3301      	adds	r3, #1
 8006852:	60fb      	str	r3, [r7, #12]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2b01      	cmp	r3, #1
 8006858:	d987      	bls.n	800676a <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 800685a:	7dfb      	ldrb	r3, [r7, #23]
}
 800685c:	4618      	mov	r0, r3
 800685e:	371c      	adds	r7, #28
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr
 8006868:	04040222 	.word	0x04040222
 800686c:	50061c00 	.word	0x50061c00

08006870 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006870:	b480      	push	{r7}
 8006872:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006874:	4b05      	ldr	r3, [pc, #20]	; (800688c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a04      	ldr	r2, [pc, #16]	; (800688c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800687a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800687e:	6013      	str	r3, [r2, #0]
}
 8006880:	bf00      	nop
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	40007000 	.word	0x40007000

08006890 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006890:	b480      	push	{r7}
 8006892:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006894:	4b0d      	ldr	r3, [pc, #52]	; (80068cc <HAL_PWREx_GetVoltageRange+0x3c>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800689c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068a0:	d102      	bne.n	80068a8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80068a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068a6:	e00b      	b.n	80068c0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80068a8:	4b08      	ldr	r3, [pc, #32]	; (80068cc <HAL_PWREx_GetVoltageRange+0x3c>)
 80068aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068b6:	d102      	bne.n	80068be <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80068b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068bc:	e000      	b.n	80068c0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80068be:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	40007000 	.word	0x40007000

080068d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d141      	bne.n	8006962 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80068de:	4b4b      	ldr	r3, [pc, #300]	; (8006a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80068e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068ea:	d131      	bne.n	8006950 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80068ec:	4b47      	ldr	r3, [pc, #284]	; (8006a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068f2:	4a46      	ldr	r2, [pc, #280]	; (8006a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80068fc:	4b43      	ldr	r3, [pc, #268]	; (8006a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006904:	4a41      	ldr	r2, [pc, #260]	; (8006a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006906:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800690a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800690c:	4b40      	ldr	r3, [pc, #256]	; (8006a10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2232      	movs	r2, #50	; 0x32
 8006912:	fb02 f303 	mul.w	r3, r2, r3
 8006916:	4a3f      	ldr	r2, [pc, #252]	; (8006a14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006918:	fba2 2303 	umull	r2, r3, r2, r3
 800691c:	0c9b      	lsrs	r3, r3, #18
 800691e:	3301      	adds	r3, #1
 8006920:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006922:	e002      	b.n	800692a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	3b01      	subs	r3, #1
 8006928:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800692a:	4b38      	ldr	r3, [pc, #224]	; (8006a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006936:	d102      	bne.n	800693e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1f2      	bne.n	8006924 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800693e:	4b33      	ldr	r3, [pc, #204]	; (8006a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006940:	695b      	ldr	r3, [r3, #20]
 8006942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800694a:	d158      	bne.n	80069fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800694c:	2303      	movs	r3, #3
 800694e:	e057      	b.n	8006a00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006950:	4b2e      	ldr	r3, [pc, #184]	; (8006a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006952:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006956:	4a2d      	ldr	r2, [pc, #180]	; (8006a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006958:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800695c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006960:	e04d      	b.n	80069fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006968:	d141      	bne.n	80069ee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800696a:	4b28      	ldr	r3, [pc, #160]	; (8006a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006976:	d131      	bne.n	80069dc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006978:	4b24      	ldr	r3, [pc, #144]	; (8006a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800697a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800697e:	4a23      	ldr	r2, [pc, #140]	; (8006a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006984:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006988:	4b20      	ldr	r3, [pc, #128]	; (8006a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006990:	4a1e      	ldr	r2, [pc, #120]	; (8006a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006992:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006996:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8006998:	4b1d      	ldr	r3, [pc, #116]	; (8006a10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2232      	movs	r2, #50	; 0x32
 800699e:	fb02 f303 	mul.w	r3, r2, r3
 80069a2:	4a1c      	ldr	r2, [pc, #112]	; (8006a14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80069a4:	fba2 2303 	umull	r2, r3, r2, r3
 80069a8:	0c9b      	lsrs	r3, r3, #18
 80069aa:	3301      	adds	r3, #1
 80069ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80069ae:	e002      	b.n	80069b6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	3b01      	subs	r3, #1
 80069b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80069b6:	4b15      	ldr	r3, [pc, #84]	; (8006a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069c2:	d102      	bne.n	80069ca <HAL_PWREx_ControlVoltageScaling+0xfa>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1f2      	bne.n	80069b0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80069ca:	4b10      	ldr	r3, [pc, #64]	; (8006a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069cc:	695b      	ldr	r3, [r3, #20]
 80069ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069d6:	d112      	bne.n	80069fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80069d8:	2303      	movs	r3, #3
 80069da:	e011      	b.n	8006a00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80069dc:	4b0b      	ldr	r3, [pc, #44]	; (8006a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069e2:	4a0a      	ldr	r2, [pc, #40]	; (8006a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80069ec:	e007      	b.n	80069fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80069ee:	4b07      	ldr	r3, [pc, #28]	; (8006a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80069f6:	4a05      	ldr	r2, [pc, #20]	; (8006a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80069fc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3714      	adds	r7, #20
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr
 8006a0c:	40007000 	.word	0x40007000
 8006a10:	2000004c 	.word	0x2000004c
 8006a14:	431bde83 	.word	0x431bde83

08006a18 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b088      	sub	sp, #32
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d102      	bne.n	8006a2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	f000 bc08 	b.w	800723c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a2c:	4b96      	ldr	r3, [pc, #600]	; (8006c88 <HAL_RCC_OscConfig+0x270>)
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f003 030c 	and.w	r3, r3, #12
 8006a34:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a36:	4b94      	ldr	r3, [pc, #592]	; (8006c88 <HAL_RCC_OscConfig+0x270>)
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	f003 0303 	and.w	r3, r3, #3
 8006a3e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 0310 	and.w	r3, r3, #16
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 80e4 	beq.w	8006c16 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d007      	beq.n	8006a64 <HAL_RCC_OscConfig+0x4c>
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	2b0c      	cmp	r3, #12
 8006a58:	f040 808b 	bne.w	8006b72 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	f040 8087 	bne.w	8006b72 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006a64:	4b88      	ldr	r3, [pc, #544]	; (8006c88 <HAL_RCC_OscConfig+0x270>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 0302 	and.w	r3, r3, #2
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d005      	beq.n	8006a7c <HAL_RCC_OscConfig+0x64>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	699b      	ldr	r3, [r3, #24]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d101      	bne.n	8006a7c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e3df      	b.n	800723c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6a1a      	ldr	r2, [r3, #32]
 8006a80:	4b81      	ldr	r3, [pc, #516]	; (8006c88 <HAL_RCC_OscConfig+0x270>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 0308 	and.w	r3, r3, #8
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d004      	beq.n	8006a96 <HAL_RCC_OscConfig+0x7e>
 8006a8c:	4b7e      	ldr	r3, [pc, #504]	; (8006c88 <HAL_RCC_OscConfig+0x270>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a94:	e005      	b.n	8006aa2 <HAL_RCC_OscConfig+0x8a>
 8006a96:	4b7c      	ldr	r3, [pc, #496]	; (8006c88 <HAL_RCC_OscConfig+0x270>)
 8006a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a9c:	091b      	lsrs	r3, r3, #4
 8006a9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d223      	bcs.n	8006aee <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a1b      	ldr	r3, [r3, #32]
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f000 fdfe 	bl	80076ac <RCC_SetFlashLatencyFromMSIRange>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d001      	beq.n	8006aba <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e3c0      	b.n	800723c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006aba:	4b73      	ldr	r3, [pc, #460]	; (8006c88 <HAL_RCC_OscConfig+0x270>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a72      	ldr	r2, [pc, #456]	; (8006c88 <HAL_RCC_OscConfig+0x270>)
 8006ac0:	f043 0308 	orr.w	r3, r3, #8
 8006ac4:	6013      	str	r3, [r2, #0]
 8006ac6:	4b70      	ldr	r3, [pc, #448]	; (8006c88 <HAL_RCC_OscConfig+0x270>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
 8006ad2:	496d      	ldr	r1, [pc, #436]	; (8006c88 <HAL_RCC_OscConfig+0x270>)
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006ad8:	4b6b      	ldr	r3, [pc, #428]	; (8006c88 <HAL_RCC_OscConfig+0x270>)
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	69db      	ldr	r3, [r3, #28]
 8006ae4:	021b      	lsls	r3, r3, #8
 8006ae6:	4968      	ldr	r1, [pc, #416]	; (8006c88 <HAL_RCC_OscConfig+0x270>)
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	604b      	str	r3, [r1, #4]
 8006aec:	e025      	b.n	8006b3a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006aee:	4b66      	ldr	r3, [pc, #408]	; (8006c88 <HAL_RCC_OscConfig+0x270>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a65      	ldr	r2, [pc, #404]	; (8006c88 <HAL_RCC_OscConfig+0x270>)
 8006af4:	f043 0308 	orr.w	r3, r3, #8
 8006af8:	6013      	str	r3, [r2, #0]
 8006afa:	4b63      	ldr	r3, [pc, #396]	; (8006c88 <HAL_RCC_OscConfig+0x270>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a1b      	ldr	r3, [r3, #32]
 8006b06:	4960      	ldr	r1, [pc, #384]	; (8006c88 <HAL_RCC_OscConfig+0x270>)
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006b0c:	4b5e      	ldr	r3, [pc, #376]	; (8006c88 <HAL_RCC_OscConfig+0x270>)
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	69db      	ldr	r3, [r3, #28]
 8006b18:	021b      	lsls	r3, r3, #8
 8006b1a:	495b      	ldr	r1, [pc, #364]	; (8006c88 <HAL_RCC_OscConfig+0x270>)
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d109      	bne.n	8006b3a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f000 fdbe 	bl	80076ac <RCC_SetFlashLatencyFromMSIRange>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d001      	beq.n	8006b3a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e380      	b.n	800723c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006b3a:	f000 fcc1 	bl	80074c0 <HAL_RCC_GetSysClockFreq>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	4b51      	ldr	r3, [pc, #324]	; (8006c88 <HAL_RCC_OscConfig+0x270>)
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	091b      	lsrs	r3, r3, #4
 8006b46:	f003 030f 	and.w	r3, r3, #15
 8006b4a:	4950      	ldr	r1, [pc, #320]	; (8006c8c <HAL_RCC_OscConfig+0x274>)
 8006b4c:	5ccb      	ldrb	r3, [r1, r3]
 8006b4e:	f003 031f 	and.w	r3, r3, #31
 8006b52:	fa22 f303 	lsr.w	r3, r2, r3
 8006b56:	4a4e      	ldr	r2, [pc, #312]	; (8006c90 <HAL_RCC_OscConfig+0x278>)
 8006b58:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006b5a:	4b4e      	ldr	r3, [pc, #312]	; (8006c94 <HAL_RCC_OscConfig+0x27c>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7fc fdfa 	bl	8003758 <HAL_InitTick>
 8006b64:	4603      	mov	r3, r0
 8006b66:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006b68:	7bfb      	ldrb	r3, [r7, #15]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d052      	beq.n	8006c14 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006b6e:	7bfb      	ldrb	r3, [r7, #15]
 8006b70:	e364      	b.n	800723c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d032      	beq.n	8006be0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006b7a:	4b43      	ldr	r3, [pc, #268]	; (8006c88 <HAL_RCC_OscConfig+0x270>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a42      	ldr	r2, [pc, #264]	; (8006c88 <HAL_RCC_OscConfig+0x270>)
 8006b80:	f043 0301 	orr.w	r3, r3, #1
 8006b84:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006b86:	f7fc ff35 	bl	80039f4 <HAL_GetTick>
 8006b8a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006b8c:	e008      	b.n	8006ba0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006b8e:	f7fc ff31 	bl	80039f4 <HAL_GetTick>
 8006b92:	4602      	mov	r2, r0
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d901      	bls.n	8006ba0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e34d      	b.n	800723c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006ba0:	4b39      	ldr	r3, [pc, #228]	; (8006c88 <HAL_RCC_OscConfig+0x270>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0302 	and.w	r3, r3, #2
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d0f0      	beq.n	8006b8e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006bac:	4b36      	ldr	r3, [pc, #216]	; (8006c88 <HAL_RCC_OscConfig+0x270>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a35      	ldr	r2, [pc, #212]	; (8006c88 <HAL_RCC_OscConfig+0x270>)
 8006bb2:	f043 0308 	orr.w	r3, r3, #8
 8006bb6:	6013      	str	r3, [r2, #0]
 8006bb8:	4b33      	ldr	r3, [pc, #204]	; (8006c88 <HAL_RCC_OscConfig+0x270>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6a1b      	ldr	r3, [r3, #32]
 8006bc4:	4930      	ldr	r1, [pc, #192]	; (8006c88 <HAL_RCC_OscConfig+0x270>)
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006bca:	4b2f      	ldr	r3, [pc, #188]	; (8006c88 <HAL_RCC_OscConfig+0x270>)
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	69db      	ldr	r3, [r3, #28]
 8006bd6:	021b      	lsls	r3, r3, #8
 8006bd8:	492b      	ldr	r1, [pc, #172]	; (8006c88 <HAL_RCC_OscConfig+0x270>)
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	604b      	str	r3, [r1, #4]
 8006bde:	e01a      	b.n	8006c16 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006be0:	4b29      	ldr	r3, [pc, #164]	; (8006c88 <HAL_RCC_OscConfig+0x270>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a28      	ldr	r2, [pc, #160]	; (8006c88 <HAL_RCC_OscConfig+0x270>)
 8006be6:	f023 0301 	bic.w	r3, r3, #1
 8006bea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006bec:	f7fc ff02 	bl	80039f4 <HAL_GetTick>
 8006bf0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006bf2:	e008      	b.n	8006c06 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006bf4:	f7fc fefe 	bl	80039f4 <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d901      	bls.n	8006c06 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	e31a      	b.n	800723c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006c06:	4b20      	ldr	r3, [pc, #128]	; (8006c88 <HAL_RCC_OscConfig+0x270>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 0302 	and.w	r3, r3, #2
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1f0      	bne.n	8006bf4 <HAL_RCC_OscConfig+0x1dc>
 8006c12:	e000      	b.n	8006c16 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006c14:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 0301 	and.w	r3, r3, #1
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d073      	beq.n	8006d0a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	2b08      	cmp	r3, #8
 8006c26:	d005      	beq.n	8006c34 <HAL_RCC_OscConfig+0x21c>
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	2b0c      	cmp	r3, #12
 8006c2c:	d10e      	bne.n	8006c4c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	2b03      	cmp	r3, #3
 8006c32:	d10b      	bne.n	8006c4c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c34:	4b14      	ldr	r3, [pc, #80]	; (8006c88 <HAL_RCC_OscConfig+0x270>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d063      	beq.n	8006d08 <HAL_RCC_OscConfig+0x2f0>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d15f      	bne.n	8006d08 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e2f7      	b.n	800723c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c54:	d106      	bne.n	8006c64 <HAL_RCC_OscConfig+0x24c>
 8006c56:	4b0c      	ldr	r3, [pc, #48]	; (8006c88 <HAL_RCC_OscConfig+0x270>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a0b      	ldr	r2, [pc, #44]	; (8006c88 <HAL_RCC_OscConfig+0x270>)
 8006c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c60:	6013      	str	r3, [r2, #0]
 8006c62:	e025      	b.n	8006cb0 <HAL_RCC_OscConfig+0x298>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c6c:	d114      	bne.n	8006c98 <HAL_RCC_OscConfig+0x280>
 8006c6e:	4b06      	ldr	r3, [pc, #24]	; (8006c88 <HAL_RCC_OscConfig+0x270>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a05      	ldr	r2, [pc, #20]	; (8006c88 <HAL_RCC_OscConfig+0x270>)
 8006c74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c78:	6013      	str	r3, [r2, #0]
 8006c7a:	4b03      	ldr	r3, [pc, #12]	; (8006c88 <HAL_RCC_OscConfig+0x270>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a02      	ldr	r2, [pc, #8]	; (8006c88 <HAL_RCC_OscConfig+0x270>)
 8006c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c84:	6013      	str	r3, [r2, #0]
 8006c86:	e013      	b.n	8006cb0 <HAL_RCC_OscConfig+0x298>
 8006c88:	40021000 	.word	0x40021000
 8006c8c:	0800ad24 	.word	0x0800ad24
 8006c90:	2000004c 	.word	0x2000004c
 8006c94:	20000050 	.word	0x20000050
 8006c98:	4ba0      	ldr	r3, [pc, #640]	; (8006f1c <HAL_RCC_OscConfig+0x504>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a9f      	ldr	r2, [pc, #636]	; (8006f1c <HAL_RCC_OscConfig+0x504>)
 8006c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ca2:	6013      	str	r3, [r2, #0]
 8006ca4:	4b9d      	ldr	r3, [pc, #628]	; (8006f1c <HAL_RCC_OscConfig+0x504>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a9c      	ldr	r2, [pc, #624]	; (8006f1c <HAL_RCC_OscConfig+0x504>)
 8006caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d013      	beq.n	8006ce0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cb8:	f7fc fe9c 	bl	80039f4 <HAL_GetTick>
 8006cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006cbe:	e008      	b.n	8006cd2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cc0:	f7fc fe98 	bl	80039f4 <HAL_GetTick>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	2b64      	cmp	r3, #100	; 0x64
 8006ccc:	d901      	bls.n	8006cd2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e2b4      	b.n	800723c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006cd2:	4b92      	ldr	r3, [pc, #584]	; (8006f1c <HAL_RCC_OscConfig+0x504>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d0f0      	beq.n	8006cc0 <HAL_RCC_OscConfig+0x2a8>
 8006cde:	e014      	b.n	8006d0a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ce0:	f7fc fe88 	bl	80039f4 <HAL_GetTick>
 8006ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006ce6:	e008      	b.n	8006cfa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ce8:	f7fc fe84 	bl	80039f4 <HAL_GetTick>
 8006cec:	4602      	mov	r2, r0
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	2b64      	cmp	r3, #100	; 0x64
 8006cf4:	d901      	bls.n	8006cfa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e2a0      	b.n	800723c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006cfa:	4b88      	ldr	r3, [pc, #544]	; (8006f1c <HAL_RCC_OscConfig+0x504>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d1f0      	bne.n	8006ce8 <HAL_RCC_OscConfig+0x2d0>
 8006d06:	e000      	b.n	8006d0a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0302 	and.w	r3, r3, #2
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d060      	beq.n	8006dd8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	2b04      	cmp	r3, #4
 8006d1a:	d005      	beq.n	8006d28 <HAL_RCC_OscConfig+0x310>
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	2b0c      	cmp	r3, #12
 8006d20:	d119      	bne.n	8006d56 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d116      	bne.n	8006d56 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d28:	4b7c      	ldr	r3, [pc, #496]	; (8006f1c <HAL_RCC_OscConfig+0x504>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d005      	beq.n	8006d40 <HAL_RCC_OscConfig+0x328>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d101      	bne.n	8006d40 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e27d      	b.n	800723c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d40:	4b76      	ldr	r3, [pc, #472]	; (8006f1c <HAL_RCC_OscConfig+0x504>)
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	061b      	lsls	r3, r3, #24
 8006d4e:	4973      	ldr	r1, [pc, #460]	; (8006f1c <HAL_RCC_OscConfig+0x504>)
 8006d50:	4313      	orrs	r3, r2
 8006d52:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d54:	e040      	b.n	8006dd8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d023      	beq.n	8006da6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d5e:	4b6f      	ldr	r3, [pc, #444]	; (8006f1c <HAL_RCC_OscConfig+0x504>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a6e      	ldr	r2, [pc, #440]	; (8006f1c <HAL_RCC_OscConfig+0x504>)
 8006d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d6a:	f7fc fe43 	bl	80039f4 <HAL_GetTick>
 8006d6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d70:	e008      	b.n	8006d84 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d72:	f7fc fe3f 	bl	80039f4 <HAL_GetTick>
 8006d76:	4602      	mov	r2, r0
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d901      	bls.n	8006d84 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006d80:	2303      	movs	r3, #3
 8006d82:	e25b      	b.n	800723c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d84:	4b65      	ldr	r3, [pc, #404]	; (8006f1c <HAL_RCC_OscConfig+0x504>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d0f0      	beq.n	8006d72 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d90:	4b62      	ldr	r3, [pc, #392]	; (8006f1c <HAL_RCC_OscConfig+0x504>)
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	061b      	lsls	r3, r3, #24
 8006d9e:	495f      	ldr	r1, [pc, #380]	; (8006f1c <HAL_RCC_OscConfig+0x504>)
 8006da0:	4313      	orrs	r3, r2
 8006da2:	604b      	str	r3, [r1, #4]
 8006da4:	e018      	b.n	8006dd8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006da6:	4b5d      	ldr	r3, [pc, #372]	; (8006f1c <HAL_RCC_OscConfig+0x504>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a5c      	ldr	r2, [pc, #368]	; (8006f1c <HAL_RCC_OscConfig+0x504>)
 8006dac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006db0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006db2:	f7fc fe1f 	bl	80039f4 <HAL_GetTick>
 8006db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006db8:	e008      	b.n	8006dcc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006dba:	f7fc fe1b 	bl	80039f4 <HAL_GetTick>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d901      	bls.n	8006dcc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	e237      	b.n	800723c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006dcc:	4b53      	ldr	r3, [pc, #332]	; (8006f1c <HAL_RCC_OscConfig+0x504>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d1f0      	bne.n	8006dba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 0308 	and.w	r3, r3, #8
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d03c      	beq.n	8006e5e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	695b      	ldr	r3, [r3, #20]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d01c      	beq.n	8006e26 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006dec:	4b4b      	ldr	r3, [pc, #300]	; (8006f1c <HAL_RCC_OscConfig+0x504>)
 8006dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006df2:	4a4a      	ldr	r2, [pc, #296]	; (8006f1c <HAL_RCC_OscConfig+0x504>)
 8006df4:	f043 0301 	orr.w	r3, r3, #1
 8006df8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dfc:	f7fc fdfa 	bl	80039f4 <HAL_GetTick>
 8006e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006e02:	e008      	b.n	8006e16 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e04:	f7fc fdf6 	bl	80039f4 <HAL_GetTick>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	1ad3      	subs	r3, r2, r3
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	d901      	bls.n	8006e16 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006e12:	2303      	movs	r3, #3
 8006e14:	e212      	b.n	800723c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006e16:	4b41      	ldr	r3, [pc, #260]	; (8006f1c <HAL_RCC_OscConfig+0x504>)
 8006e18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e1c:	f003 0302 	and.w	r3, r3, #2
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d0ef      	beq.n	8006e04 <HAL_RCC_OscConfig+0x3ec>
 8006e24:	e01b      	b.n	8006e5e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e26:	4b3d      	ldr	r3, [pc, #244]	; (8006f1c <HAL_RCC_OscConfig+0x504>)
 8006e28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e2c:	4a3b      	ldr	r2, [pc, #236]	; (8006f1c <HAL_RCC_OscConfig+0x504>)
 8006e2e:	f023 0301 	bic.w	r3, r3, #1
 8006e32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e36:	f7fc fddd 	bl	80039f4 <HAL_GetTick>
 8006e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006e3c:	e008      	b.n	8006e50 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e3e:	f7fc fdd9 	bl	80039f4 <HAL_GetTick>
 8006e42:	4602      	mov	r2, r0
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	d901      	bls.n	8006e50 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	e1f5      	b.n	800723c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006e50:	4b32      	ldr	r3, [pc, #200]	; (8006f1c <HAL_RCC_OscConfig+0x504>)
 8006e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e56:	f003 0302 	and.w	r3, r3, #2
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1ef      	bne.n	8006e3e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0304 	and.w	r3, r3, #4
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	f000 80a6 	beq.w	8006fb8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006e70:	4b2a      	ldr	r3, [pc, #168]	; (8006f1c <HAL_RCC_OscConfig+0x504>)
 8006e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10d      	bne.n	8006e98 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e7c:	4b27      	ldr	r3, [pc, #156]	; (8006f1c <HAL_RCC_OscConfig+0x504>)
 8006e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e80:	4a26      	ldr	r2, [pc, #152]	; (8006f1c <HAL_RCC_OscConfig+0x504>)
 8006e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e86:	6593      	str	r3, [r2, #88]	; 0x58
 8006e88:	4b24      	ldr	r3, [pc, #144]	; (8006f1c <HAL_RCC_OscConfig+0x504>)
 8006e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e90:	60bb      	str	r3, [r7, #8]
 8006e92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e94:	2301      	movs	r3, #1
 8006e96:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e98:	4b21      	ldr	r3, [pc, #132]	; (8006f20 <HAL_RCC_OscConfig+0x508>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d118      	bne.n	8006ed6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ea4:	4b1e      	ldr	r3, [pc, #120]	; (8006f20 <HAL_RCC_OscConfig+0x508>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a1d      	ldr	r2, [pc, #116]	; (8006f20 <HAL_RCC_OscConfig+0x508>)
 8006eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006eae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006eb0:	f7fc fda0 	bl	80039f4 <HAL_GetTick>
 8006eb4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006eb6:	e008      	b.n	8006eca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006eb8:	f7fc fd9c 	bl	80039f4 <HAL_GetTick>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d901      	bls.n	8006eca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	e1b8      	b.n	800723c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006eca:	4b15      	ldr	r3, [pc, #84]	; (8006f20 <HAL_RCC_OscConfig+0x508>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d0f0      	beq.n	8006eb8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d108      	bne.n	8006ef0 <HAL_RCC_OscConfig+0x4d8>
 8006ede:	4b0f      	ldr	r3, [pc, #60]	; (8006f1c <HAL_RCC_OscConfig+0x504>)
 8006ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ee4:	4a0d      	ldr	r2, [pc, #52]	; (8006f1c <HAL_RCC_OscConfig+0x504>)
 8006ee6:	f043 0301 	orr.w	r3, r3, #1
 8006eea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006eee:	e029      	b.n	8006f44 <HAL_RCC_OscConfig+0x52c>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	2b05      	cmp	r3, #5
 8006ef6:	d115      	bne.n	8006f24 <HAL_RCC_OscConfig+0x50c>
 8006ef8:	4b08      	ldr	r3, [pc, #32]	; (8006f1c <HAL_RCC_OscConfig+0x504>)
 8006efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006efe:	4a07      	ldr	r2, [pc, #28]	; (8006f1c <HAL_RCC_OscConfig+0x504>)
 8006f00:	f043 0304 	orr.w	r3, r3, #4
 8006f04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006f08:	4b04      	ldr	r3, [pc, #16]	; (8006f1c <HAL_RCC_OscConfig+0x504>)
 8006f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f0e:	4a03      	ldr	r2, [pc, #12]	; (8006f1c <HAL_RCC_OscConfig+0x504>)
 8006f10:	f043 0301 	orr.w	r3, r3, #1
 8006f14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006f18:	e014      	b.n	8006f44 <HAL_RCC_OscConfig+0x52c>
 8006f1a:	bf00      	nop
 8006f1c:	40021000 	.word	0x40021000
 8006f20:	40007000 	.word	0x40007000
 8006f24:	4b9d      	ldr	r3, [pc, #628]	; (800719c <HAL_RCC_OscConfig+0x784>)
 8006f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f2a:	4a9c      	ldr	r2, [pc, #624]	; (800719c <HAL_RCC_OscConfig+0x784>)
 8006f2c:	f023 0301 	bic.w	r3, r3, #1
 8006f30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006f34:	4b99      	ldr	r3, [pc, #612]	; (800719c <HAL_RCC_OscConfig+0x784>)
 8006f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f3a:	4a98      	ldr	r2, [pc, #608]	; (800719c <HAL_RCC_OscConfig+0x784>)
 8006f3c:	f023 0304 	bic.w	r3, r3, #4
 8006f40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d016      	beq.n	8006f7a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f4c:	f7fc fd52 	bl	80039f4 <HAL_GetTick>
 8006f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f52:	e00a      	b.n	8006f6a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f54:	f7fc fd4e 	bl	80039f4 <HAL_GetTick>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d901      	bls.n	8006f6a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006f66:	2303      	movs	r3, #3
 8006f68:	e168      	b.n	800723c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f6a:	4b8c      	ldr	r3, [pc, #560]	; (800719c <HAL_RCC_OscConfig+0x784>)
 8006f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f70:	f003 0302 	and.w	r3, r3, #2
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d0ed      	beq.n	8006f54 <HAL_RCC_OscConfig+0x53c>
 8006f78:	e015      	b.n	8006fa6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f7a:	f7fc fd3b 	bl	80039f4 <HAL_GetTick>
 8006f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006f80:	e00a      	b.n	8006f98 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f82:	f7fc fd37 	bl	80039f4 <HAL_GetTick>
 8006f86:	4602      	mov	r2, r0
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	1ad3      	subs	r3, r2, r3
 8006f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d901      	bls.n	8006f98 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006f94:	2303      	movs	r3, #3
 8006f96:	e151      	b.n	800723c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006f98:	4b80      	ldr	r3, [pc, #512]	; (800719c <HAL_RCC_OscConfig+0x784>)
 8006f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f9e:	f003 0302 	and.w	r3, r3, #2
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d1ed      	bne.n	8006f82 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006fa6:	7ffb      	ldrb	r3, [r7, #31]
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d105      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fac:	4b7b      	ldr	r3, [pc, #492]	; (800719c <HAL_RCC_OscConfig+0x784>)
 8006fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fb0:	4a7a      	ldr	r2, [pc, #488]	; (800719c <HAL_RCC_OscConfig+0x784>)
 8006fb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fb6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 0320 	and.w	r3, r3, #32
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d03c      	beq.n	800703e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d01c      	beq.n	8007006 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006fcc:	4b73      	ldr	r3, [pc, #460]	; (800719c <HAL_RCC_OscConfig+0x784>)
 8006fce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006fd2:	4a72      	ldr	r2, [pc, #456]	; (800719c <HAL_RCC_OscConfig+0x784>)
 8006fd4:	f043 0301 	orr.w	r3, r3, #1
 8006fd8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fdc:	f7fc fd0a 	bl	80039f4 <HAL_GetTick>
 8006fe0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006fe2:	e008      	b.n	8006ff6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006fe4:	f7fc fd06 	bl	80039f4 <HAL_GetTick>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	d901      	bls.n	8006ff6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e122      	b.n	800723c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006ff6:	4b69      	ldr	r3, [pc, #420]	; (800719c <HAL_RCC_OscConfig+0x784>)
 8006ff8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ffc:	f003 0302 	and.w	r3, r3, #2
 8007000:	2b00      	cmp	r3, #0
 8007002:	d0ef      	beq.n	8006fe4 <HAL_RCC_OscConfig+0x5cc>
 8007004:	e01b      	b.n	800703e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007006:	4b65      	ldr	r3, [pc, #404]	; (800719c <HAL_RCC_OscConfig+0x784>)
 8007008:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800700c:	4a63      	ldr	r2, [pc, #396]	; (800719c <HAL_RCC_OscConfig+0x784>)
 800700e:	f023 0301 	bic.w	r3, r3, #1
 8007012:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007016:	f7fc fced 	bl	80039f4 <HAL_GetTick>
 800701a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800701c:	e008      	b.n	8007030 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800701e:	f7fc fce9 	bl	80039f4 <HAL_GetTick>
 8007022:	4602      	mov	r2, r0
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	1ad3      	subs	r3, r2, r3
 8007028:	2b02      	cmp	r3, #2
 800702a:	d901      	bls.n	8007030 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800702c:	2303      	movs	r3, #3
 800702e:	e105      	b.n	800723c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007030:	4b5a      	ldr	r3, [pc, #360]	; (800719c <HAL_RCC_OscConfig+0x784>)
 8007032:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007036:	f003 0302 	and.w	r3, r3, #2
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1ef      	bne.n	800701e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007042:	2b00      	cmp	r3, #0
 8007044:	f000 80f9 	beq.w	800723a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800704c:	2b02      	cmp	r3, #2
 800704e:	f040 80cf 	bne.w	80071f0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007052:	4b52      	ldr	r3, [pc, #328]	; (800719c <HAL_RCC_OscConfig+0x784>)
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	f003 0203 	and.w	r2, r3, #3
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007062:	429a      	cmp	r2, r3
 8007064:	d12c      	bne.n	80070c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007070:	3b01      	subs	r3, #1
 8007072:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007074:	429a      	cmp	r2, r3
 8007076:	d123      	bne.n	80070c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007082:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007084:	429a      	cmp	r2, r3
 8007086:	d11b      	bne.n	80070c0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007092:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007094:	429a      	cmp	r2, r3
 8007096:	d113      	bne.n	80070c0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070a2:	085b      	lsrs	r3, r3, #1
 80070a4:	3b01      	subs	r3, #1
 80070a6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d109      	bne.n	80070c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b6:	085b      	lsrs	r3, r3, #1
 80070b8:	3b01      	subs	r3, #1
 80070ba:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80070bc:	429a      	cmp	r2, r3
 80070be:	d071      	beq.n	80071a4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	2b0c      	cmp	r3, #12
 80070c4:	d068      	beq.n	8007198 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80070c6:	4b35      	ldr	r3, [pc, #212]	; (800719c <HAL_RCC_OscConfig+0x784>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d105      	bne.n	80070de <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80070d2:	4b32      	ldr	r3, [pc, #200]	; (800719c <HAL_RCC_OscConfig+0x784>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d001      	beq.n	80070e2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	e0ac      	b.n	800723c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80070e2:	4b2e      	ldr	r3, [pc, #184]	; (800719c <HAL_RCC_OscConfig+0x784>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a2d      	ldr	r2, [pc, #180]	; (800719c <HAL_RCC_OscConfig+0x784>)
 80070e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070ec:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80070ee:	f7fc fc81 	bl	80039f4 <HAL_GetTick>
 80070f2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80070f4:	e008      	b.n	8007108 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070f6:	f7fc fc7d 	bl	80039f4 <HAL_GetTick>
 80070fa:	4602      	mov	r2, r0
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	2b02      	cmp	r3, #2
 8007102:	d901      	bls.n	8007108 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8007104:	2303      	movs	r3, #3
 8007106:	e099      	b.n	800723c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007108:	4b24      	ldr	r3, [pc, #144]	; (800719c <HAL_RCC_OscConfig+0x784>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007110:	2b00      	cmp	r3, #0
 8007112:	d1f0      	bne.n	80070f6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007114:	4b21      	ldr	r3, [pc, #132]	; (800719c <HAL_RCC_OscConfig+0x784>)
 8007116:	68da      	ldr	r2, [r3, #12]
 8007118:	4b21      	ldr	r3, [pc, #132]	; (80071a0 <HAL_RCC_OscConfig+0x788>)
 800711a:	4013      	ands	r3, r2
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007124:	3a01      	subs	r2, #1
 8007126:	0112      	lsls	r2, r2, #4
 8007128:	4311      	orrs	r1, r2
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800712e:	0212      	lsls	r2, r2, #8
 8007130:	4311      	orrs	r1, r2
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007136:	0852      	lsrs	r2, r2, #1
 8007138:	3a01      	subs	r2, #1
 800713a:	0552      	lsls	r2, r2, #21
 800713c:	4311      	orrs	r1, r2
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007142:	0852      	lsrs	r2, r2, #1
 8007144:	3a01      	subs	r2, #1
 8007146:	0652      	lsls	r2, r2, #25
 8007148:	4311      	orrs	r1, r2
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800714e:	06d2      	lsls	r2, r2, #27
 8007150:	430a      	orrs	r2, r1
 8007152:	4912      	ldr	r1, [pc, #72]	; (800719c <HAL_RCC_OscConfig+0x784>)
 8007154:	4313      	orrs	r3, r2
 8007156:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007158:	4b10      	ldr	r3, [pc, #64]	; (800719c <HAL_RCC_OscConfig+0x784>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a0f      	ldr	r2, [pc, #60]	; (800719c <HAL_RCC_OscConfig+0x784>)
 800715e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007162:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007164:	4b0d      	ldr	r3, [pc, #52]	; (800719c <HAL_RCC_OscConfig+0x784>)
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	4a0c      	ldr	r2, [pc, #48]	; (800719c <HAL_RCC_OscConfig+0x784>)
 800716a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800716e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007170:	f7fc fc40 	bl	80039f4 <HAL_GetTick>
 8007174:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007176:	e008      	b.n	800718a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007178:	f7fc fc3c 	bl	80039f4 <HAL_GetTick>
 800717c:	4602      	mov	r2, r0
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	2b02      	cmp	r3, #2
 8007184:	d901      	bls.n	800718a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8007186:	2303      	movs	r3, #3
 8007188:	e058      	b.n	800723c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800718a:	4b04      	ldr	r3, [pc, #16]	; (800719c <HAL_RCC_OscConfig+0x784>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007192:	2b00      	cmp	r3, #0
 8007194:	d0f0      	beq.n	8007178 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007196:	e050      	b.n	800723a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	e04f      	b.n	800723c <HAL_RCC_OscConfig+0x824>
 800719c:	40021000 	.word	0x40021000
 80071a0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071a4:	4b27      	ldr	r3, [pc, #156]	; (8007244 <HAL_RCC_OscConfig+0x82c>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d144      	bne.n	800723a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80071b0:	4b24      	ldr	r3, [pc, #144]	; (8007244 <HAL_RCC_OscConfig+0x82c>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a23      	ldr	r2, [pc, #140]	; (8007244 <HAL_RCC_OscConfig+0x82c>)
 80071b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80071bc:	4b21      	ldr	r3, [pc, #132]	; (8007244 <HAL_RCC_OscConfig+0x82c>)
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	4a20      	ldr	r2, [pc, #128]	; (8007244 <HAL_RCC_OscConfig+0x82c>)
 80071c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80071c8:	f7fc fc14 	bl	80039f4 <HAL_GetTick>
 80071cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071ce:	e008      	b.n	80071e2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071d0:	f7fc fc10 	bl	80039f4 <HAL_GetTick>
 80071d4:	4602      	mov	r2, r0
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d901      	bls.n	80071e2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	e02c      	b.n	800723c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071e2:	4b18      	ldr	r3, [pc, #96]	; (8007244 <HAL_RCC_OscConfig+0x82c>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d0f0      	beq.n	80071d0 <HAL_RCC_OscConfig+0x7b8>
 80071ee:	e024      	b.n	800723a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	2b0c      	cmp	r3, #12
 80071f4:	d01f      	beq.n	8007236 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071f6:	4b13      	ldr	r3, [pc, #76]	; (8007244 <HAL_RCC_OscConfig+0x82c>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a12      	ldr	r2, [pc, #72]	; (8007244 <HAL_RCC_OscConfig+0x82c>)
 80071fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007200:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007202:	f7fc fbf7 	bl	80039f4 <HAL_GetTick>
 8007206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007208:	e008      	b.n	800721c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800720a:	f7fc fbf3 	bl	80039f4 <HAL_GetTick>
 800720e:	4602      	mov	r2, r0
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	1ad3      	subs	r3, r2, r3
 8007214:	2b02      	cmp	r3, #2
 8007216:	d901      	bls.n	800721c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8007218:	2303      	movs	r3, #3
 800721a:	e00f      	b.n	800723c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800721c:	4b09      	ldr	r3, [pc, #36]	; (8007244 <HAL_RCC_OscConfig+0x82c>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d1f0      	bne.n	800720a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007228:	4b06      	ldr	r3, [pc, #24]	; (8007244 <HAL_RCC_OscConfig+0x82c>)
 800722a:	68da      	ldr	r2, [r3, #12]
 800722c:	4905      	ldr	r1, [pc, #20]	; (8007244 <HAL_RCC_OscConfig+0x82c>)
 800722e:	4b06      	ldr	r3, [pc, #24]	; (8007248 <HAL_RCC_OscConfig+0x830>)
 8007230:	4013      	ands	r3, r2
 8007232:	60cb      	str	r3, [r1, #12]
 8007234:	e001      	b.n	800723a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e000      	b.n	800723c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3720      	adds	r7, #32
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}
 8007244:	40021000 	.word	0x40021000
 8007248:	feeefffc 	.word	0xfeeefffc

0800724c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b086      	sub	sp, #24
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007256:	2300      	movs	r3, #0
 8007258:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d101      	bne.n	8007264 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	e11d      	b.n	80074a0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007264:	4b90      	ldr	r3, [pc, #576]	; (80074a8 <HAL_RCC_ClockConfig+0x25c>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 030f 	and.w	r3, r3, #15
 800726c:	683a      	ldr	r2, [r7, #0]
 800726e:	429a      	cmp	r2, r3
 8007270:	d910      	bls.n	8007294 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007272:	4b8d      	ldr	r3, [pc, #564]	; (80074a8 <HAL_RCC_ClockConfig+0x25c>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f023 020f 	bic.w	r2, r3, #15
 800727a:	498b      	ldr	r1, [pc, #556]	; (80074a8 <HAL_RCC_ClockConfig+0x25c>)
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	4313      	orrs	r3, r2
 8007280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007282:	4b89      	ldr	r3, [pc, #548]	; (80074a8 <HAL_RCC_ClockConfig+0x25c>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 030f 	and.w	r3, r3, #15
 800728a:	683a      	ldr	r2, [r7, #0]
 800728c:	429a      	cmp	r2, r3
 800728e:	d001      	beq.n	8007294 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	e105      	b.n	80074a0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 0302 	and.w	r3, r3, #2
 800729c:	2b00      	cmp	r3, #0
 800729e:	d010      	beq.n	80072c2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	689a      	ldr	r2, [r3, #8]
 80072a4:	4b81      	ldr	r3, [pc, #516]	; (80074ac <HAL_RCC_ClockConfig+0x260>)
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d908      	bls.n	80072c2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072b0:	4b7e      	ldr	r3, [pc, #504]	; (80074ac <HAL_RCC_ClockConfig+0x260>)
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	497b      	ldr	r1, [pc, #492]	; (80074ac <HAL_RCC_ClockConfig+0x260>)
 80072be:	4313      	orrs	r3, r2
 80072c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f003 0301 	and.w	r3, r3, #1
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d079      	beq.n	80073c2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	2b03      	cmp	r3, #3
 80072d4:	d11e      	bne.n	8007314 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80072d6:	4b75      	ldr	r3, [pc, #468]	; (80074ac <HAL_RCC_ClockConfig+0x260>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d101      	bne.n	80072e6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e0dc      	b.n	80074a0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80072e6:	f000 fa3b 	bl	8007760 <RCC_GetSysClockFreqFromPLLSource>
 80072ea:	4603      	mov	r3, r0
 80072ec:	4a70      	ldr	r2, [pc, #448]	; (80074b0 <HAL_RCC_ClockConfig+0x264>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d946      	bls.n	8007380 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80072f2:	4b6e      	ldr	r3, [pc, #440]	; (80074ac <HAL_RCC_ClockConfig+0x260>)
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d140      	bne.n	8007380 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80072fe:	4b6b      	ldr	r3, [pc, #428]	; (80074ac <HAL_RCC_ClockConfig+0x260>)
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007306:	4a69      	ldr	r2, [pc, #420]	; (80074ac <HAL_RCC_ClockConfig+0x260>)
 8007308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800730c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800730e:	2380      	movs	r3, #128	; 0x80
 8007310:	617b      	str	r3, [r7, #20]
 8007312:	e035      	b.n	8007380 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	2b02      	cmp	r3, #2
 800731a:	d107      	bne.n	800732c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800731c:	4b63      	ldr	r3, [pc, #396]	; (80074ac <HAL_RCC_ClockConfig+0x260>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007324:	2b00      	cmp	r3, #0
 8007326:	d115      	bne.n	8007354 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	e0b9      	b.n	80074a0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d107      	bne.n	8007344 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007334:	4b5d      	ldr	r3, [pc, #372]	; (80074ac <HAL_RCC_ClockConfig+0x260>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 0302 	and.w	r3, r3, #2
 800733c:	2b00      	cmp	r3, #0
 800733e:	d109      	bne.n	8007354 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	e0ad      	b.n	80074a0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007344:	4b59      	ldr	r3, [pc, #356]	; (80074ac <HAL_RCC_ClockConfig+0x260>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800734c:	2b00      	cmp	r3, #0
 800734e:	d101      	bne.n	8007354 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	e0a5      	b.n	80074a0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8007354:	f000 f8b4 	bl	80074c0 <HAL_RCC_GetSysClockFreq>
 8007358:	4603      	mov	r3, r0
 800735a:	4a55      	ldr	r2, [pc, #340]	; (80074b0 <HAL_RCC_ClockConfig+0x264>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d90f      	bls.n	8007380 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8007360:	4b52      	ldr	r3, [pc, #328]	; (80074ac <HAL_RCC_ClockConfig+0x260>)
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d109      	bne.n	8007380 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800736c:	4b4f      	ldr	r3, [pc, #316]	; (80074ac <HAL_RCC_ClockConfig+0x260>)
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007374:	4a4d      	ldr	r2, [pc, #308]	; (80074ac <HAL_RCC_ClockConfig+0x260>)
 8007376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800737a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800737c:	2380      	movs	r3, #128	; 0x80
 800737e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007380:	4b4a      	ldr	r3, [pc, #296]	; (80074ac <HAL_RCC_ClockConfig+0x260>)
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	f023 0203 	bic.w	r2, r3, #3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	4947      	ldr	r1, [pc, #284]	; (80074ac <HAL_RCC_ClockConfig+0x260>)
 800738e:	4313      	orrs	r3, r2
 8007390:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007392:	f7fc fb2f 	bl	80039f4 <HAL_GetTick>
 8007396:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007398:	e00a      	b.n	80073b0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800739a:	f7fc fb2b 	bl	80039f4 <HAL_GetTick>
 800739e:	4602      	mov	r2, r0
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	1ad3      	subs	r3, r2, r3
 80073a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d901      	bls.n	80073b0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80073ac:	2303      	movs	r3, #3
 80073ae:	e077      	b.n	80074a0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073b0:	4b3e      	ldr	r3, [pc, #248]	; (80074ac <HAL_RCC_ClockConfig+0x260>)
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	f003 020c 	and.w	r2, r3, #12
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	429a      	cmp	r2, r3
 80073c0:	d1eb      	bne.n	800739a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	2b80      	cmp	r3, #128	; 0x80
 80073c6:	d105      	bne.n	80073d4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80073c8:	4b38      	ldr	r3, [pc, #224]	; (80074ac <HAL_RCC_ClockConfig+0x260>)
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	4a37      	ldr	r2, [pc, #220]	; (80074ac <HAL_RCC_ClockConfig+0x260>)
 80073ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073d2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 0302 	and.w	r3, r3, #2
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d010      	beq.n	8007402 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	689a      	ldr	r2, [r3, #8]
 80073e4:	4b31      	ldr	r3, [pc, #196]	; (80074ac <HAL_RCC_ClockConfig+0x260>)
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d208      	bcs.n	8007402 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073f0:	4b2e      	ldr	r3, [pc, #184]	; (80074ac <HAL_RCC_ClockConfig+0x260>)
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	492b      	ldr	r1, [pc, #172]	; (80074ac <HAL_RCC_ClockConfig+0x260>)
 80073fe:	4313      	orrs	r3, r2
 8007400:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007402:	4b29      	ldr	r3, [pc, #164]	; (80074a8 <HAL_RCC_ClockConfig+0x25c>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f003 030f 	and.w	r3, r3, #15
 800740a:	683a      	ldr	r2, [r7, #0]
 800740c:	429a      	cmp	r2, r3
 800740e:	d210      	bcs.n	8007432 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007410:	4b25      	ldr	r3, [pc, #148]	; (80074a8 <HAL_RCC_ClockConfig+0x25c>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f023 020f 	bic.w	r2, r3, #15
 8007418:	4923      	ldr	r1, [pc, #140]	; (80074a8 <HAL_RCC_ClockConfig+0x25c>)
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	4313      	orrs	r3, r2
 800741e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007420:	4b21      	ldr	r3, [pc, #132]	; (80074a8 <HAL_RCC_ClockConfig+0x25c>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 030f 	and.w	r3, r3, #15
 8007428:	683a      	ldr	r2, [r7, #0]
 800742a:	429a      	cmp	r2, r3
 800742c:	d001      	beq.n	8007432 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e036      	b.n	80074a0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 0304 	and.w	r3, r3, #4
 800743a:	2b00      	cmp	r3, #0
 800743c:	d008      	beq.n	8007450 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800743e:	4b1b      	ldr	r3, [pc, #108]	; (80074ac <HAL_RCC_ClockConfig+0x260>)
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	4918      	ldr	r1, [pc, #96]	; (80074ac <HAL_RCC_ClockConfig+0x260>)
 800744c:	4313      	orrs	r3, r2
 800744e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 0308 	and.w	r3, r3, #8
 8007458:	2b00      	cmp	r3, #0
 800745a:	d009      	beq.n	8007470 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800745c:	4b13      	ldr	r3, [pc, #76]	; (80074ac <HAL_RCC_ClockConfig+0x260>)
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	00db      	lsls	r3, r3, #3
 800746a:	4910      	ldr	r1, [pc, #64]	; (80074ac <HAL_RCC_ClockConfig+0x260>)
 800746c:	4313      	orrs	r3, r2
 800746e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007470:	f000 f826 	bl	80074c0 <HAL_RCC_GetSysClockFreq>
 8007474:	4602      	mov	r2, r0
 8007476:	4b0d      	ldr	r3, [pc, #52]	; (80074ac <HAL_RCC_ClockConfig+0x260>)
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	091b      	lsrs	r3, r3, #4
 800747c:	f003 030f 	and.w	r3, r3, #15
 8007480:	490c      	ldr	r1, [pc, #48]	; (80074b4 <HAL_RCC_ClockConfig+0x268>)
 8007482:	5ccb      	ldrb	r3, [r1, r3]
 8007484:	f003 031f 	and.w	r3, r3, #31
 8007488:	fa22 f303 	lsr.w	r3, r2, r3
 800748c:	4a0a      	ldr	r2, [pc, #40]	; (80074b8 <HAL_RCC_ClockConfig+0x26c>)
 800748e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007490:	4b0a      	ldr	r3, [pc, #40]	; (80074bc <HAL_RCC_ClockConfig+0x270>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4618      	mov	r0, r3
 8007496:	f7fc f95f 	bl	8003758 <HAL_InitTick>
 800749a:	4603      	mov	r3, r0
 800749c:	73fb      	strb	r3, [r7, #15]

  return status;
 800749e:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3718      	adds	r7, #24
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	40022000 	.word	0x40022000
 80074ac:	40021000 	.word	0x40021000
 80074b0:	04c4b400 	.word	0x04c4b400
 80074b4:	0800ad24 	.word	0x0800ad24
 80074b8:	2000004c 	.word	0x2000004c
 80074bc:	20000050 	.word	0x20000050

080074c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b089      	sub	sp, #36	; 0x24
 80074c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80074c6:	2300      	movs	r3, #0
 80074c8:	61fb      	str	r3, [r7, #28]
 80074ca:	2300      	movs	r3, #0
 80074cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074ce:	4b3e      	ldr	r3, [pc, #248]	; (80075c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	f003 030c 	and.w	r3, r3, #12
 80074d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80074d8:	4b3b      	ldr	r3, [pc, #236]	; (80075c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	f003 0303 	and.w	r3, r3, #3
 80074e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d005      	beq.n	80074f4 <HAL_RCC_GetSysClockFreq+0x34>
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	2b0c      	cmp	r3, #12
 80074ec:	d121      	bne.n	8007532 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d11e      	bne.n	8007532 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80074f4:	4b34      	ldr	r3, [pc, #208]	; (80075c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f003 0308 	and.w	r3, r3, #8
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d107      	bne.n	8007510 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007500:	4b31      	ldr	r3, [pc, #196]	; (80075c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007502:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007506:	0a1b      	lsrs	r3, r3, #8
 8007508:	f003 030f 	and.w	r3, r3, #15
 800750c:	61fb      	str	r3, [r7, #28]
 800750e:	e005      	b.n	800751c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007510:	4b2d      	ldr	r3, [pc, #180]	; (80075c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	091b      	lsrs	r3, r3, #4
 8007516:	f003 030f 	and.w	r3, r3, #15
 800751a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800751c:	4a2b      	ldr	r2, [pc, #172]	; (80075cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007524:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10d      	bne.n	8007548 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007530:	e00a      	b.n	8007548 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	2b04      	cmp	r3, #4
 8007536:	d102      	bne.n	800753e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007538:	4b25      	ldr	r3, [pc, #148]	; (80075d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800753a:	61bb      	str	r3, [r7, #24]
 800753c:	e004      	b.n	8007548 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	2b08      	cmp	r3, #8
 8007542:	d101      	bne.n	8007548 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007544:	4b23      	ldr	r3, [pc, #140]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8007546:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	2b0c      	cmp	r3, #12
 800754c:	d134      	bne.n	80075b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800754e:	4b1e      	ldr	r3, [pc, #120]	; (80075c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	f003 0303 	and.w	r3, r3, #3
 8007556:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	2b02      	cmp	r3, #2
 800755c:	d003      	beq.n	8007566 <HAL_RCC_GetSysClockFreq+0xa6>
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	2b03      	cmp	r3, #3
 8007562:	d003      	beq.n	800756c <HAL_RCC_GetSysClockFreq+0xac>
 8007564:	e005      	b.n	8007572 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007566:	4b1a      	ldr	r3, [pc, #104]	; (80075d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8007568:	617b      	str	r3, [r7, #20]
      break;
 800756a:	e005      	b.n	8007578 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800756c:	4b19      	ldr	r3, [pc, #100]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800756e:	617b      	str	r3, [r7, #20]
      break;
 8007570:	e002      	b.n	8007578 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	617b      	str	r3, [r7, #20]
      break;
 8007576:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007578:	4b13      	ldr	r3, [pc, #76]	; (80075c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	091b      	lsrs	r3, r3, #4
 800757e:	f003 030f 	and.w	r3, r3, #15
 8007582:	3301      	adds	r3, #1
 8007584:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007586:	4b10      	ldr	r3, [pc, #64]	; (80075c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	0a1b      	lsrs	r3, r3, #8
 800758c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007590:	697a      	ldr	r2, [r7, #20]
 8007592:	fb03 f202 	mul.w	r2, r3, r2
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	fbb2 f3f3 	udiv	r3, r2, r3
 800759c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800759e:	4b0a      	ldr	r3, [pc, #40]	; (80075c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	0e5b      	lsrs	r3, r3, #25
 80075a4:	f003 0303 	and.w	r3, r3, #3
 80075a8:	3301      	adds	r3, #1
 80075aa:	005b      	lsls	r3, r3, #1
 80075ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80075b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80075b8:	69bb      	ldr	r3, [r7, #24]
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3724      	adds	r7, #36	; 0x24
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr
 80075c6:	bf00      	nop
 80075c8:	40021000 	.word	0x40021000
 80075cc:	0800ad3c 	.word	0x0800ad3c
 80075d0:	00f42400 	.word	0x00f42400
 80075d4:	007a1200 	.word	0x007a1200

080075d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075d8:	b480      	push	{r7}
 80075da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075dc:	4b03      	ldr	r3, [pc, #12]	; (80075ec <HAL_RCC_GetHCLKFreq+0x14>)
 80075de:	681b      	ldr	r3, [r3, #0]
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
 80075ea:	bf00      	nop
 80075ec:	2000004c 	.word	0x2000004c

080075f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80075f4:	f7ff fff0 	bl	80075d8 <HAL_RCC_GetHCLKFreq>
 80075f8:	4602      	mov	r2, r0
 80075fa:	4b06      	ldr	r3, [pc, #24]	; (8007614 <HAL_RCC_GetPCLK1Freq+0x24>)
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	0a1b      	lsrs	r3, r3, #8
 8007600:	f003 0307 	and.w	r3, r3, #7
 8007604:	4904      	ldr	r1, [pc, #16]	; (8007618 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007606:	5ccb      	ldrb	r3, [r1, r3]
 8007608:	f003 031f 	and.w	r3, r3, #31
 800760c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007610:	4618      	mov	r0, r3
 8007612:	bd80      	pop	{r7, pc}
 8007614:	40021000 	.word	0x40021000
 8007618:	0800ad34 	.word	0x0800ad34

0800761c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007620:	f7ff ffda 	bl	80075d8 <HAL_RCC_GetHCLKFreq>
 8007624:	4602      	mov	r2, r0
 8007626:	4b06      	ldr	r3, [pc, #24]	; (8007640 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	0adb      	lsrs	r3, r3, #11
 800762c:	f003 0307 	and.w	r3, r3, #7
 8007630:	4904      	ldr	r1, [pc, #16]	; (8007644 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007632:	5ccb      	ldrb	r3, [r1, r3]
 8007634:	f003 031f 	and.w	r3, r3, #31
 8007638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800763c:	4618      	mov	r0, r3
 800763e:	bd80      	pop	{r7, pc}
 8007640:	40021000 	.word	0x40021000
 8007644:	0800ad34 	.word	0x0800ad34

08007648 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	220f      	movs	r2, #15
 8007656:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8007658:	4b12      	ldr	r3, [pc, #72]	; (80076a4 <HAL_RCC_GetClockConfig+0x5c>)
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	f003 0203 	and.w	r2, r3, #3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8007664:	4b0f      	ldr	r3, [pc, #60]	; (80076a4 <HAL_RCC_GetClockConfig+0x5c>)
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007670:	4b0c      	ldr	r3, [pc, #48]	; (80076a4 <HAL_RCC_GetClockConfig+0x5c>)
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800767c:	4b09      	ldr	r3, [pc, #36]	; (80076a4 <HAL_RCC_GetClockConfig+0x5c>)
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	08db      	lsrs	r3, r3, #3
 8007682:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800768a:	4b07      	ldr	r3, [pc, #28]	; (80076a8 <HAL_RCC_GetClockConfig+0x60>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 020f 	and.w	r2, r3, #15
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	601a      	str	r2, [r3, #0]
}
 8007696:	bf00      	nop
 8007698:	370c      	adds	r7, #12
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	40021000 	.word	0x40021000
 80076a8:	40022000 	.word	0x40022000

080076ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b086      	sub	sp, #24
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80076b4:	2300      	movs	r3, #0
 80076b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80076b8:	4b27      	ldr	r3, [pc, #156]	; (8007758 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80076ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d003      	beq.n	80076cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80076c4:	f7ff f8e4 	bl	8006890 <HAL_PWREx_GetVoltageRange>
 80076c8:	6178      	str	r0, [r7, #20]
 80076ca:	e014      	b.n	80076f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80076cc:	4b22      	ldr	r3, [pc, #136]	; (8007758 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80076ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076d0:	4a21      	ldr	r2, [pc, #132]	; (8007758 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80076d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076d6:	6593      	str	r3, [r2, #88]	; 0x58
 80076d8:	4b1f      	ldr	r3, [pc, #124]	; (8007758 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80076da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076e0:	60fb      	str	r3, [r7, #12]
 80076e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80076e4:	f7ff f8d4 	bl	8006890 <HAL_PWREx_GetVoltageRange>
 80076e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80076ea:	4b1b      	ldr	r3, [pc, #108]	; (8007758 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80076ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ee:	4a1a      	ldr	r2, [pc, #104]	; (8007758 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80076f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076f4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076fc:	d10b      	bne.n	8007716 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2b80      	cmp	r3, #128	; 0x80
 8007702:	d913      	bls.n	800772c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2ba0      	cmp	r3, #160	; 0xa0
 8007708:	d902      	bls.n	8007710 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800770a:	2302      	movs	r3, #2
 800770c:	613b      	str	r3, [r7, #16]
 800770e:	e00d      	b.n	800772c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007710:	2301      	movs	r3, #1
 8007712:	613b      	str	r3, [r7, #16]
 8007714:	e00a      	b.n	800772c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2b7f      	cmp	r3, #127	; 0x7f
 800771a:	d902      	bls.n	8007722 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800771c:	2302      	movs	r3, #2
 800771e:	613b      	str	r3, [r7, #16]
 8007720:	e004      	b.n	800772c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2b70      	cmp	r3, #112	; 0x70
 8007726:	d101      	bne.n	800772c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007728:	2301      	movs	r3, #1
 800772a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800772c:	4b0b      	ldr	r3, [pc, #44]	; (800775c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f023 020f 	bic.w	r2, r3, #15
 8007734:	4909      	ldr	r1, [pc, #36]	; (800775c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	4313      	orrs	r3, r2
 800773a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800773c:	4b07      	ldr	r3, [pc, #28]	; (800775c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f003 030f 	and.w	r3, r3, #15
 8007744:	693a      	ldr	r2, [r7, #16]
 8007746:	429a      	cmp	r2, r3
 8007748:	d001      	beq.n	800774e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	e000      	b.n	8007750 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800774e:	2300      	movs	r3, #0
}
 8007750:	4618      	mov	r0, r3
 8007752:	3718      	adds	r7, #24
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	40021000 	.word	0x40021000
 800775c:	40022000 	.word	0x40022000

08007760 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007760:	b480      	push	{r7}
 8007762:	b087      	sub	sp, #28
 8007764:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007766:	4b2d      	ldr	r3, [pc, #180]	; (800781c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	f003 0303 	and.w	r3, r3, #3
 800776e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2b03      	cmp	r3, #3
 8007774:	d00b      	beq.n	800778e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2b03      	cmp	r3, #3
 800777a:	d825      	bhi.n	80077c8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2b01      	cmp	r3, #1
 8007780:	d008      	beq.n	8007794 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2b02      	cmp	r3, #2
 8007786:	d11f      	bne.n	80077c8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8007788:	4b25      	ldr	r3, [pc, #148]	; (8007820 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800778a:	613b      	str	r3, [r7, #16]
    break;
 800778c:	e01f      	b.n	80077ce <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800778e:	4b25      	ldr	r3, [pc, #148]	; (8007824 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8007790:	613b      	str	r3, [r7, #16]
    break;
 8007792:	e01c      	b.n	80077ce <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007794:	4b21      	ldr	r3, [pc, #132]	; (800781c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f003 0308 	and.w	r3, r3, #8
 800779c:	2b00      	cmp	r3, #0
 800779e:	d107      	bne.n	80077b0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80077a0:	4b1e      	ldr	r3, [pc, #120]	; (800781c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80077a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077a6:	0a1b      	lsrs	r3, r3, #8
 80077a8:	f003 030f 	and.w	r3, r3, #15
 80077ac:	617b      	str	r3, [r7, #20]
 80077ae:	e005      	b.n	80077bc <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80077b0:	4b1a      	ldr	r3, [pc, #104]	; (800781c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	091b      	lsrs	r3, r3, #4
 80077b6:	f003 030f 	and.w	r3, r3, #15
 80077ba:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80077bc:	4a1a      	ldr	r2, [pc, #104]	; (8007828 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077c4:	613b      	str	r3, [r7, #16]
    break;
 80077c6:	e002      	b.n	80077ce <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80077c8:	2300      	movs	r3, #0
 80077ca:	613b      	str	r3, [r7, #16]
    break;
 80077cc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80077ce:	4b13      	ldr	r3, [pc, #76]	; (800781c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	091b      	lsrs	r3, r3, #4
 80077d4:	f003 030f 	and.w	r3, r3, #15
 80077d8:	3301      	adds	r3, #1
 80077da:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80077dc:	4b0f      	ldr	r3, [pc, #60]	; (800781c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	0a1b      	lsrs	r3, r3, #8
 80077e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077e6:	693a      	ldr	r2, [r7, #16]
 80077e8:	fb03 f202 	mul.w	r2, r3, r2
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80077f2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80077f4:	4b09      	ldr	r3, [pc, #36]	; (800781c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	0e5b      	lsrs	r3, r3, #25
 80077fa:	f003 0303 	and.w	r3, r3, #3
 80077fe:	3301      	adds	r3, #1
 8007800:	005b      	lsls	r3, r3, #1
 8007802:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8007804:	693a      	ldr	r2, [r7, #16]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	fbb2 f3f3 	udiv	r3, r2, r3
 800780c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800780e:	683b      	ldr	r3, [r7, #0]
}
 8007810:	4618      	mov	r0, r3
 8007812:	371c      	adds	r7, #28
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr
 800781c:	40021000 	.word	0x40021000
 8007820:	00f42400 	.word	0x00f42400
 8007824:	007a1200 	.word	0x007a1200
 8007828:	0800ad3c 	.word	0x0800ad3c

0800782c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b086      	sub	sp, #24
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007834:	2300      	movs	r3, #0
 8007836:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007838:	2300      	movs	r3, #0
 800783a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007844:	2b00      	cmp	r3, #0
 8007846:	d040      	beq.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800784c:	2b80      	cmp	r3, #128	; 0x80
 800784e:	d02a      	beq.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007850:	2b80      	cmp	r3, #128	; 0x80
 8007852:	d825      	bhi.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007854:	2b60      	cmp	r3, #96	; 0x60
 8007856:	d026      	beq.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007858:	2b60      	cmp	r3, #96	; 0x60
 800785a:	d821      	bhi.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800785c:	2b40      	cmp	r3, #64	; 0x40
 800785e:	d006      	beq.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8007860:	2b40      	cmp	r3, #64	; 0x40
 8007862:	d81d      	bhi.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007864:	2b00      	cmp	r3, #0
 8007866:	d009      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8007868:	2b20      	cmp	r3, #32
 800786a:	d010      	beq.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800786c:	e018      	b.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800786e:	4b89      	ldr	r3, [pc, #548]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	4a88      	ldr	r2, [pc, #544]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007878:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800787a:	e015      	b.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	3304      	adds	r3, #4
 8007880:	2100      	movs	r1, #0
 8007882:	4618      	mov	r0, r3
 8007884:	f000 fb12 	bl	8007eac <RCCEx_PLLSAI1_Config>
 8007888:	4603      	mov	r3, r0
 800788a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800788c:	e00c      	b.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	3320      	adds	r3, #32
 8007892:	2100      	movs	r1, #0
 8007894:	4618      	mov	r0, r3
 8007896:	f000 fbfd 	bl	8008094 <RCCEx_PLLSAI2_Config>
 800789a:	4603      	mov	r3, r0
 800789c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800789e:	e003      	b.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078a0:	2301      	movs	r3, #1
 80078a2:	74fb      	strb	r3, [r7, #19]
      break;
 80078a4:	e000      	b.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80078a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078a8:	7cfb      	ldrb	r3, [r7, #19]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d10b      	bne.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80078ae:	4b79      	ldr	r3, [pc, #484]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80078b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80078b4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078bc:	4975      	ldr	r1, [pc, #468]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80078be:	4313      	orrs	r3, r2
 80078c0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80078c4:	e001      	b.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078c6:	7cfb      	ldrb	r3, [r7, #19]
 80078c8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d047      	beq.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078de:	d030      	beq.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80078e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078e4:	d82a      	bhi.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80078e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078ea:	d02a      	beq.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80078ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078f0:	d824      	bhi.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80078f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078f6:	d008      	beq.n	800790a <HAL_RCCEx_PeriphCLKConfig+0xde>
 80078f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078fc:	d81e      	bhi.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00a      	beq.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8007902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007906:	d010      	beq.n	800792a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007908:	e018      	b.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800790a:	4b62      	ldr	r3, [pc, #392]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	4a61      	ldr	r2, [pc, #388]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007914:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007916:	e015      	b.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	3304      	adds	r3, #4
 800791c:	2100      	movs	r1, #0
 800791e:	4618      	mov	r0, r3
 8007920:	f000 fac4 	bl	8007eac <RCCEx_PLLSAI1_Config>
 8007924:	4603      	mov	r3, r0
 8007926:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007928:	e00c      	b.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	3320      	adds	r3, #32
 800792e:	2100      	movs	r1, #0
 8007930:	4618      	mov	r0, r3
 8007932:	f000 fbaf 	bl	8008094 <RCCEx_PLLSAI2_Config>
 8007936:	4603      	mov	r3, r0
 8007938:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800793a:	e003      	b.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	74fb      	strb	r3, [r7, #19]
      break;
 8007940:	e000      	b.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8007942:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007944:	7cfb      	ldrb	r3, [r7, #19]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10b      	bne.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800794a:	4b52      	ldr	r3, [pc, #328]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800794c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007950:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007958:	494e      	ldr	r1, [pc, #312]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800795a:	4313      	orrs	r3, r2
 800795c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8007960:	e001      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007962:	7cfb      	ldrb	r3, [r7, #19]
 8007964:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800796e:	2b00      	cmp	r3, #0
 8007970:	f000 809f 	beq.w	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007974:	2300      	movs	r3, #0
 8007976:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007978:	4b46      	ldr	r3, [pc, #280]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800797a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800797c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007980:	2b00      	cmp	r3, #0
 8007982:	d101      	bne.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007984:	2301      	movs	r3, #1
 8007986:	e000      	b.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8007988:	2300      	movs	r3, #0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00d      	beq.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800798e:	4b41      	ldr	r3, [pc, #260]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007992:	4a40      	ldr	r2, [pc, #256]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007998:	6593      	str	r3, [r2, #88]	; 0x58
 800799a:	4b3e      	ldr	r3, [pc, #248]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800799c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800799e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079a2:	60bb      	str	r3, [r7, #8]
 80079a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079a6:	2301      	movs	r3, #1
 80079a8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80079aa:	4b3b      	ldr	r3, [pc, #236]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a3a      	ldr	r2, [pc, #232]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80079b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80079b6:	f7fc f81d 	bl	80039f4 <HAL_GetTick>
 80079ba:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80079bc:	e009      	b.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079be:	f7fc f819 	bl	80039f4 <HAL_GetTick>
 80079c2:	4602      	mov	r2, r0
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	2b02      	cmp	r3, #2
 80079ca:	d902      	bls.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80079cc:	2303      	movs	r3, #3
 80079ce:	74fb      	strb	r3, [r7, #19]
        break;
 80079d0:	e005      	b.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80079d2:	4b31      	ldr	r3, [pc, #196]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d0ef      	beq.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80079de:	7cfb      	ldrb	r3, [r7, #19]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d15b      	bne.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80079e4:	4b2b      	ldr	r3, [pc, #172]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80079e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079ee:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d01f      	beq.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079fc:	697a      	ldr	r2, [r7, #20]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d019      	beq.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007a02:	4b24      	ldr	r3, [pc, #144]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a0c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a0e:	4b21      	ldr	r3, [pc, #132]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a14:	4a1f      	ldr	r2, [pc, #124]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a1e:	4b1d      	ldr	r3, [pc, #116]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a24:	4a1b      	ldr	r2, [pc, #108]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007a2e:	4a19      	ldr	r2, [pc, #100]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	f003 0301 	and.w	r3, r3, #1
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d016      	beq.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a40:	f7fb ffd8 	bl	80039f4 <HAL_GetTick>
 8007a44:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a46:	e00b      	b.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a48:	f7fb ffd4 	bl	80039f4 <HAL_GetTick>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d902      	bls.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8007a5a:	2303      	movs	r3, #3
 8007a5c:	74fb      	strb	r3, [r7, #19]
            break;
 8007a5e:	e006      	b.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a60:	4b0c      	ldr	r3, [pc, #48]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a66:	f003 0302 	and.w	r3, r3, #2
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d0ec      	beq.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8007a6e:	7cfb      	ldrb	r3, [r7, #19]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d10c      	bne.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a74:	4b07      	ldr	r3, [pc, #28]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a84:	4903      	ldr	r1, [pc, #12]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a86:	4313      	orrs	r3, r2
 8007a88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007a8c:	e008      	b.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007a8e:	7cfb      	ldrb	r3, [r7, #19]
 8007a90:	74bb      	strb	r3, [r7, #18]
 8007a92:	e005      	b.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8007a94:	40021000 	.word	0x40021000
 8007a98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a9c:	7cfb      	ldrb	r3, [r7, #19]
 8007a9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007aa0:	7c7b      	ldrb	r3, [r7, #17]
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d105      	bne.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007aa6:	4ba0      	ldr	r3, [pc, #640]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aaa:	4a9f      	ldr	r2, [pc, #636]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007aac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ab0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f003 0301 	and.w	r3, r3, #1
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d00a      	beq.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007abe:	4b9a      	ldr	r3, [pc, #616]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ac4:	f023 0203 	bic.w	r2, r3, #3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007acc:	4996      	ldr	r1, [pc, #600]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 0302 	and.w	r3, r3, #2
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00a      	beq.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007ae0:	4b91      	ldr	r3, [pc, #580]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ae6:	f023 020c 	bic.w	r2, r3, #12
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aee:	498e      	ldr	r1, [pc, #568]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007af0:	4313      	orrs	r3, r2
 8007af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 0304 	and.w	r3, r3, #4
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00a      	beq.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007b02:	4b89      	ldr	r3, [pc, #548]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b08:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b10:	4985      	ldr	r1, [pc, #532]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b12:	4313      	orrs	r3, r2
 8007b14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f003 0308 	and.w	r3, r3, #8
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d00a      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007b24:	4b80      	ldr	r3, [pc, #512]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b2a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b32:	497d      	ldr	r1, [pc, #500]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b34:	4313      	orrs	r3, r2
 8007b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f003 0310 	and.w	r3, r3, #16
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00a      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007b46:	4b78      	ldr	r3, [pc, #480]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b54:	4974      	ldr	r1, [pc, #464]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b56:	4313      	orrs	r3, r2
 8007b58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f003 0320 	and.w	r3, r3, #32
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00a      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007b68:	4b6f      	ldr	r3, [pc, #444]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b6e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b76:	496c      	ldr	r1, [pc, #432]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d00a      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b8a:	4b67      	ldr	r3, [pc, #412]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b90:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b98:	4963      	ldr	r1, [pc, #396]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00a      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007bac:	4b5e      	ldr	r3, [pc, #376]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bb2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bba:	495b      	ldr	r1, [pc, #364]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00a      	beq.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007bce:	4b56      	ldr	r3, [pc, #344]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bd4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bdc:	4952      	ldr	r1, [pc, #328]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007bde:	4313      	orrs	r3, r2
 8007be0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00a      	beq.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007bf0:	4b4d      	ldr	r3, [pc, #308]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bf6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bfe:	494a      	ldr	r1, [pc, #296]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c00:	4313      	orrs	r3, r2
 8007c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00a      	beq.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007c12:	4b45      	ldr	r3, [pc, #276]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c20:	4941      	ldr	r1, [pc, #260]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c22:	4313      	orrs	r3, r2
 8007c24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d00a      	beq.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c34:	4b3c      	ldr	r3, [pc, #240]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c3a:	f023 0203 	bic.w	r2, r3, #3
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c42:	4939      	ldr	r1, [pc, #228]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c44:	4313      	orrs	r3, r2
 8007c46:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d028      	beq.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c56:	4b34      	ldr	r3, [pc, #208]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c5c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c64:	4930      	ldr	r1, [pc, #192]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c66:	4313      	orrs	r3, r2
 8007c68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c74:	d106      	bne.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c76:	4b2c      	ldr	r3, [pc, #176]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	4a2b      	ldr	r2, [pc, #172]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c80:	60d3      	str	r3, [r2, #12]
 8007c82:	e011      	b.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c8c:	d10c      	bne.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	3304      	adds	r3, #4
 8007c92:	2101      	movs	r1, #1
 8007c94:	4618      	mov	r0, r3
 8007c96:	f000 f909 	bl	8007eac <RCCEx_PLLSAI1_Config>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007c9e:	7cfb      	ldrb	r3, [r7, #19]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d001      	beq.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8007ca4:	7cfb      	ldrb	r3, [r7, #19]
 8007ca6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d04d      	beq.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cbc:	d108      	bne.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8007cbe:	4b1a      	ldr	r3, [pc, #104]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007cc4:	4a18      	ldr	r2, [pc, #96]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007cca:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8007cce:	e012      	b.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8007cd0:	4b15      	ldr	r3, [pc, #84]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007cd6:	4a14      	ldr	r2, [pc, #80]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cdc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8007ce0:	4b11      	ldr	r3, [pc, #68]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ce6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cee:	490e      	ldr	r1, [pc, #56]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cfe:	d106      	bne.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d00:	4b09      	ldr	r3, [pc, #36]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	4a08      	ldr	r2, [pc, #32]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d0a:	60d3      	str	r3, [r2, #12]
 8007d0c:	e020      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d16:	d109      	bne.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007d18:	4b03      	ldr	r3, [pc, #12]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	4a02      	ldr	r2, [pc, #8]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007d1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d22:	60d3      	str	r3, [r2, #12]
 8007d24:	e014      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007d26:	bf00      	nop
 8007d28:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d34:	d10c      	bne.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	3304      	adds	r3, #4
 8007d3a:	2101      	movs	r1, #1
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f000 f8b5 	bl	8007eac <RCCEx_PLLSAI1_Config>
 8007d42:	4603      	mov	r3, r0
 8007d44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007d46:	7cfb      	ldrb	r3, [r7, #19]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d001      	beq.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8007d4c:	7cfb      	ldrb	r3, [r7, #19]
 8007d4e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d028      	beq.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007d5c:	4b4a      	ldr	r3, [pc, #296]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d6a:	4947      	ldr	r1, [pc, #284]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d7a:	d106      	bne.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d7c:	4b42      	ldr	r3, [pc, #264]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	4a41      	ldr	r2, [pc, #260]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d86:	60d3      	str	r3, [r2, #12]
 8007d88:	e011      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d92:	d10c      	bne.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	3304      	adds	r3, #4
 8007d98:	2101      	movs	r1, #1
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f000 f886 	bl	8007eac <RCCEx_PLLSAI1_Config>
 8007da0:	4603      	mov	r3, r0
 8007da2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007da4:	7cfb      	ldrb	r3, [r7, #19]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d001      	beq.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8007daa:	7cfb      	ldrb	r3, [r7, #19]
 8007dac:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d01e      	beq.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007dba:	4b33      	ldr	r3, [pc, #204]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dc0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dca:	492f      	ldr	r1, [pc, #188]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ddc:	d10c      	bne.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	3304      	adds	r3, #4
 8007de2:	2102      	movs	r1, #2
 8007de4:	4618      	mov	r0, r3
 8007de6:	f000 f861 	bl	8007eac <RCCEx_PLLSAI1_Config>
 8007dea:	4603      	mov	r3, r0
 8007dec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007dee:	7cfb      	ldrb	r3, [r7, #19]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d001      	beq.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8007df4:	7cfb      	ldrb	r3, [r7, #19]
 8007df6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d00b      	beq.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007e04:	4b20      	ldr	r3, [pc, #128]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e0a:	f023 0204 	bic.w	r2, r3, #4
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e14:	491c      	ldr	r1, [pc, #112]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e16:	4313      	orrs	r3, r2
 8007e18:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d00b      	beq.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007e28:	4b17      	ldr	r3, [pc, #92]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e2e:	f023 0218 	bic.w	r2, r3, #24
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e38:	4913      	ldr	r1, [pc, #76]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d017      	beq.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007e4c:	4b0e      	ldr	r3, [pc, #56]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e52:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e5c:	490a      	ldr	r1, [pc, #40]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e6e:	d105      	bne.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e70:	4b05      	ldr	r3, [pc, #20]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	4a04      	ldr	r2, [pc, #16]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e7a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007e7c:	7cbb      	ldrb	r3, [r7, #18]
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3718      	adds	r7, #24
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	40021000 	.word	0x40021000

08007e8c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007e90:	4b05      	ldr	r3, [pc, #20]	; (8007ea8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a04      	ldr	r2, [pc, #16]	; (8007ea8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007e96:	f043 0304 	orr.w	r3, r3, #4
 8007e9a:	6013      	str	r3, [r2, #0]
}
 8007e9c:	bf00      	nop
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr
 8007ea6:	bf00      	nop
 8007ea8:	40021000 	.word	0x40021000

08007eac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007eba:	4b72      	ldr	r3, [pc, #456]	; (8008084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007ebc:	68db      	ldr	r3, [r3, #12]
 8007ebe:	f003 0303 	and.w	r3, r3, #3
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00e      	beq.n	8007ee4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007ec6:	4b6f      	ldr	r3, [pc, #444]	; (8008084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	f003 0203 	and.w	r2, r3, #3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d103      	bne.n	8007ede <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
       ||
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d142      	bne.n	8007f64 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	73fb      	strb	r3, [r7, #15]
 8007ee2:	e03f      	b.n	8007f64 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2b03      	cmp	r3, #3
 8007eea:	d018      	beq.n	8007f1e <RCCEx_PLLSAI1_Config+0x72>
 8007eec:	2b03      	cmp	r3, #3
 8007eee:	d825      	bhi.n	8007f3c <RCCEx_PLLSAI1_Config+0x90>
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d002      	beq.n	8007efa <RCCEx_PLLSAI1_Config+0x4e>
 8007ef4:	2b02      	cmp	r3, #2
 8007ef6:	d009      	beq.n	8007f0c <RCCEx_PLLSAI1_Config+0x60>
 8007ef8:	e020      	b.n	8007f3c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007efa:	4b62      	ldr	r3, [pc, #392]	; (8008084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f003 0302 	and.w	r3, r3, #2
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d11d      	bne.n	8007f42 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8007f06:	2301      	movs	r3, #1
 8007f08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007f0a:	e01a      	b.n	8007f42 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007f0c:	4b5d      	ldr	r3, [pc, #372]	; (8008084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d116      	bne.n	8007f46 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007f1c:	e013      	b.n	8007f46 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007f1e:	4b59      	ldr	r3, [pc, #356]	; (8008084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d10f      	bne.n	8007f4a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007f2a:	4b56      	ldr	r3, [pc, #344]	; (8008084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d109      	bne.n	8007f4a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007f3a:	e006      	b.n	8007f4a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	73fb      	strb	r3, [r7, #15]
      break;
 8007f40:	e004      	b.n	8007f4c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007f42:	bf00      	nop
 8007f44:	e002      	b.n	8007f4c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007f46:	bf00      	nop
 8007f48:	e000      	b.n	8007f4c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007f4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8007f4c:	7bfb      	ldrb	r3, [r7, #15]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d108      	bne.n	8007f64 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8007f52:	4b4c      	ldr	r3, [pc, #304]	; (8008084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007f54:	68db      	ldr	r3, [r3, #12]
 8007f56:	f023 0203 	bic.w	r2, r3, #3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4949      	ldr	r1, [pc, #292]	; (8008084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007f60:	4313      	orrs	r3, r2
 8007f62:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007f64:	7bfb      	ldrb	r3, [r7, #15]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	f040 8086 	bne.w	8008078 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007f6c:	4b45      	ldr	r3, [pc, #276]	; (8008084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a44      	ldr	r2, [pc, #272]	; (8008084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007f72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007f76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f78:	f7fb fd3c 	bl	80039f4 <HAL_GetTick>
 8007f7c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007f7e:	e009      	b.n	8007f94 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007f80:	f7fb fd38 	bl	80039f4 <HAL_GetTick>
 8007f84:	4602      	mov	r2, r0
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	1ad3      	subs	r3, r2, r3
 8007f8a:	2b02      	cmp	r3, #2
 8007f8c:	d902      	bls.n	8007f94 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	73fb      	strb	r3, [r7, #15]
        break;
 8007f92:	e005      	b.n	8007fa0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007f94:	4b3b      	ldr	r3, [pc, #236]	; (8008084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d1ef      	bne.n	8007f80 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007fa0:	7bfb      	ldrb	r3, [r7, #15]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d168      	bne.n	8008078 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d113      	bne.n	8007fd4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007fac:	4b35      	ldr	r3, [pc, #212]	; (8008084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007fae:	691a      	ldr	r2, [r3, #16]
 8007fb0:	4b35      	ldr	r3, [pc, #212]	; (8008088 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007fb2:	4013      	ands	r3, r2
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	6892      	ldr	r2, [r2, #8]
 8007fb8:	0211      	lsls	r1, r2, #8
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	68d2      	ldr	r2, [r2, #12]
 8007fbe:	06d2      	lsls	r2, r2, #27
 8007fc0:	4311      	orrs	r1, r2
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	6852      	ldr	r2, [r2, #4]
 8007fc6:	3a01      	subs	r2, #1
 8007fc8:	0112      	lsls	r2, r2, #4
 8007fca:	430a      	orrs	r2, r1
 8007fcc:	492d      	ldr	r1, [pc, #180]	; (8008084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	610b      	str	r3, [r1, #16]
 8007fd2:	e02d      	b.n	8008030 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d115      	bne.n	8008006 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007fda:	4b2a      	ldr	r3, [pc, #168]	; (8008084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007fdc:	691a      	ldr	r2, [r3, #16]
 8007fde:	4b2b      	ldr	r3, [pc, #172]	; (800808c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007fe0:	4013      	ands	r3, r2
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	6892      	ldr	r2, [r2, #8]
 8007fe6:	0211      	lsls	r1, r2, #8
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	6912      	ldr	r2, [r2, #16]
 8007fec:	0852      	lsrs	r2, r2, #1
 8007fee:	3a01      	subs	r2, #1
 8007ff0:	0552      	lsls	r2, r2, #21
 8007ff2:	4311      	orrs	r1, r2
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	6852      	ldr	r2, [r2, #4]
 8007ff8:	3a01      	subs	r2, #1
 8007ffa:	0112      	lsls	r2, r2, #4
 8007ffc:	430a      	orrs	r2, r1
 8007ffe:	4921      	ldr	r1, [pc, #132]	; (8008084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008000:	4313      	orrs	r3, r2
 8008002:	610b      	str	r3, [r1, #16]
 8008004:	e014      	b.n	8008030 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008006:	4b1f      	ldr	r3, [pc, #124]	; (8008084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008008:	691a      	ldr	r2, [r3, #16]
 800800a:	4b21      	ldr	r3, [pc, #132]	; (8008090 <RCCEx_PLLSAI1_Config+0x1e4>)
 800800c:	4013      	ands	r3, r2
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	6892      	ldr	r2, [r2, #8]
 8008012:	0211      	lsls	r1, r2, #8
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	6952      	ldr	r2, [r2, #20]
 8008018:	0852      	lsrs	r2, r2, #1
 800801a:	3a01      	subs	r2, #1
 800801c:	0652      	lsls	r2, r2, #25
 800801e:	4311      	orrs	r1, r2
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	6852      	ldr	r2, [r2, #4]
 8008024:	3a01      	subs	r2, #1
 8008026:	0112      	lsls	r2, r2, #4
 8008028:	430a      	orrs	r2, r1
 800802a:	4916      	ldr	r1, [pc, #88]	; (8008084 <RCCEx_PLLSAI1_Config+0x1d8>)
 800802c:	4313      	orrs	r3, r2
 800802e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008030:	4b14      	ldr	r3, [pc, #80]	; (8008084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a13      	ldr	r2, [pc, #76]	; (8008084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008036:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800803a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800803c:	f7fb fcda 	bl	80039f4 <HAL_GetTick>
 8008040:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008042:	e009      	b.n	8008058 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008044:	f7fb fcd6 	bl	80039f4 <HAL_GetTick>
 8008048:	4602      	mov	r2, r0
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	1ad3      	subs	r3, r2, r3
 800804e:	2b02      	cmp	r3, #2
 8008050:	d902      	bls.n	8008058 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8008052:	2303      	movs	r3, #3
 8008054:	73fb      	strb	r3, [r7, #15]
          break;
 8008056:	e005      	b.n	8008064 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008058:	4b0a      	ldr	r3, [pc, #40]	; (8008084 <RCCEx_PLLSAI1_Config+0x1d8>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008060:	2b00      	cmp	r3, #0
 8008062:	d0ef      	beq.n	8008044 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8008064:	7bfb      	ldrb	r3, [r7, #15]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d106      	bne.n	8008078 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800806a:	4b06      	ldr	r3, [pc, #24]	; (8008084 <RCCEx_PLLSAI1_Config+0x1d8>)
 800806c:	691a      	ldr	r2, [r3, #16]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	699b      	ldr	r3, [r3, #24]
 8008072:	4904      	ldr	r1, [pc, #16]	; (8008084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008074:	4313      	orrs	r3, r2
 8008076:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008078:	7bfb      	ldrb	r3, [r7, #15]
}
 800807a:	4618      	mov	r0, r3
 800807c:	3710      	adds	r7, #16
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	40021000 	.word	0x40021000
 8008088:	07ff800f 	.word	0x07ff800f
 800808c:	ff9f800f 	.word	0xff9f800f
 8008090:	f9ff800f 	.word	0xf9ff800f

08008094 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800809e:	2300      	movs	r3, #0
 80080a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80080a2:	4b72      	ldr	r3, [pc, #456]	; (800826c <RCCEx_PLLSAI2_Config+0x1d8>)
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	f003 0303 	and.w	r3, r3, #3
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d00e      	beq.n	80080cc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80080ae:	4b6f      	ldr	r3, [pc, #444]	; (800826c <RCCEx_PLLSAI2_Config+0x1d8>)
 80080b0:	68db      	ldr	r3, [r3, #12]
 80080b2:	f003 0203 	and.w	r2, r3, #3
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d103      	bne.n	80080c6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
       ||
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d142      	bne.n	800814c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	73fb      	strb	r3, [r7, #15]
 80080ca:	e03f      	b.n	800814c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2b03      	cmp	r3, #3
 80080d2:	d018      	beq.n	8008106 <RCCEx_PLLSAI2_Config+0x72>
 80080d4:	2b03      	cmp	r3, #3
 80080d6:	d825      	bhi.n	8008124 <RCCEx_PLLSAI2_Config+0x90>
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d002      	beq.n	80080e2 <RCCEx_PLLSAI2_Config+0x4e>
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d009      	beq.n	80080f4 <RCCEx_PLLSAI2_Config+0x60>
 80080e0:	e020      	b.n	8008124 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80080e2:	4b62      	ldr	r3, [pc, #392]	; (800826c <RCCEx_PLLSAI2_Config+0x1d8>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 0302 	and.w	r3, r3, #2
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d11d      	bne.n	800812a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80080f2:	e01a      	b.n	800812a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80080f4:	4b5d      	ldr	r3, [pc, #372]	; (800826c <RCCEx_PLLSAI2_Config+0x1d8>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d116      	bne.n	800812e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8008100:	2301      	movs	r3, #1
 8008102:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008104:	e013      	b.n	800812e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008106:	4b59      	ldr	r3, [pc, #356]	; (800826c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800810e:	2b00      	cmp	r3, #0
 8008110:	d10f      	bne.n	8008132 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008112:	4b56      	ldr	r3, [pc, #344]	; (800826c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800811a:	2b00      	cmp	r3, #0
 800811c:	d109      	bne.n	8008132 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008122:	e006      	b.n	8008132 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8008124:	2301      	movs	r3, #1
 8008126:	73fb      	strb	r3, [r7, #15]
      break;
 8008128:	e004      	b.n	8008134 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800812a:	bf00      	nop
 800812c:	e002      	b.n	8008134 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800812e:	bf00      	nop
 8008130:	e000      	b.n	8008134 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008132:	bf00      	nop
    }

    if(status == HAL_OK)
 8008134:	7bfb      	ldrb	r3, [r7, #15]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d108      	bne.n	800814c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800813a:	4b4c      	ldr	r3, [pc, #304]	; (800826c <RCCEx_PLLSAI2_Config+0x1d8>)
 800813c:	68db      	ldr	r3, [r3, #12]
 800813e:	f023 0203 	bic.w	r2, r3, #3
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4949      	ldr	r1, [pc, #292]	; (800826c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008148:	4313      	orrs	r3, r2
 800814a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800814c:	7bfb      	ldrb	r3, [r7, #15]
 800814e:	2b00      	cmp	r3, #0
 8008150:	f040 8086 	bne.w	8008260 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008154:	4b45      	ldr	r3, [pc, #276]	; (800826c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a44      	ldr	r2, [pc, #272]	; (800826c <RCCEx_PLLSAI2_Config+0x1d8>)
 800815a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800815e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008160:	f7fb fc48 	bl	80039f4 <HAL_GetTick>
 8008164:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008166:	e009      	b.n	800817c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008168:	f7fb fc44 	bl	80039f4 <HAL_GetTick>
 800816c:	4602      	mov	r2, r0
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	2b02      	cmp	r3, #2
 8008174:	d902      	bls.n	800817c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8008176:	2303      	movs	r3, #3
 8008178:	73fb      	strb	r3, [r7, #15]
        break;
 800817a:	e005      	b.n	8008188 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800817c:	4b3b      	ldr	r3, [pc, #236]	; (800826c <RCCEx_PLLSAI2_Config+0x1d8>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008184:	2b00      	cmp	r3, #0
 8008186:	d1ef      	bne.n	8008168 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8008188:	7bfb      	ldrb	r3, [r7, #15]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d168      	bne.n	8008260 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d113      	bne.n	80081bc <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008194:	4b35      	ldr	r3, [pc, #212]	; (800826c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008196:	695a      	ldr	r2, [r3, #20]
 8008198:	4b35      	ldr	r3, [pc, #212]	; (8008270 <RCCEx_PLLSAI2_Config+0x1dc>)
 800819a:	4013      	ands	r3, r2
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	6892      	ldr	r2, [r2, #8]
 80081a0:	0211      	lsls	r1, r2, #8
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	68d2      	ldr	r2, [r2, #12]
 80081a6:	06d2      	lsls	r2, r2, #27
 80081a8:	4311      	orrs	r1, r2
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	6852      	ldr	r2, [r2, #4]
 80081ae:	3a01      	subs	r2, #1
 80081b0:	0112      	lsls	r2, r2, #4
 80081b2:	430a      	orrs	r2, r1
 80081b4:	492d      	ldr	r1, [pc, #180]	; (800826c <RCCEx_PLLSAI2_Config+0x1d8>)
 80081b6:	4313      	orrs	r3, r2
 80081b8:	614b      	str	r3, [r1, #20]
 80081ba:	e02d      	b.n	8008218 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d115      	bne.n	80081ee <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80081c2:	4b2a      	ldr	r3, [pc, #168]	; (800826c <RCCEx_PLLSAI2_Config+0x1d8>)
 80081c4:	695a      	ldr	r2, [r3, #20]
 80081c6:	4b2b      	ldr	r3, [pc, #172]	; (8008274 <RCCEx_PLLSAI2_Config+0x1e0>)
 80081c8:	4013      	ands	r3, r2
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	6892      	ldr	r2, [r2, #8]
 80081ce:	0211      	lsls	r1, r2, #8
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	6912      	ldr	r2, [r2, #16]
 80081d4:	0852      	lsrs	r2, r2, #1
 80081d6:	3a01      	subs	r2, #1
 80081d8:	0552      	lsls	r2, r2, #21
 80081da:	4311      	orrs	r1, r2
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	6852      	ldr	r2, [r2, #4]
 80081e0:	3a01      	subs	r2, #1
 80081e2:	0112      	lsls	r2, r2, #4
 80081e4:	430a      	orrs	r2, r1
 80081e6:	4921      	ldr	r1, [pc, #132]	; (800826c <RCCEx_PLLSAI2_Config+0x1d8>)
 80081e8:	4313      	orrs	r3, r2
 80081ea:	614b      	str	r3, [r1, #20]
 80081ec:	e014      	b.n	8008218 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80081ee:	4b1f      	ldr	r3, [pc, #124]	; (800826c <RCCEx_PLLSAI2_Config+0x1d8>)
 80081f0:	695a      	ldr	r2, [r3, #20]
 80081f2:	4b21      	ldr	r3, [pc, #132]	; (8008278 <RCCEx_PLLSAI2_Config+0x1e4>)
 80081f4:	4013      	ands	r3, r2
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	6892      	ldr	r2, [r2, #8]
 80081fa:	0211      	lsls	r1, r2, #8
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	6952      	ldr	r2, [r2, #20]
 8008200:	0852      	lsrs	r2, r2, #1
 8008202:	3a01      	subs	r2, #1
 8008204:	0652      	lsls	r2, r2, #25
 8008206:	4311      	orrs	r1, r2
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	6852      	ldr	r2, [r2, #4]
 800820c:	3a01      	subs	r2, #1
 800820e:	0112      	lsls	r2, r2, #4
 8008210:	430a      	orrs	r2, r1
 8008212:	4916      	ldr	r1, [pc, #88]	; (800826c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008214:	4313      	orrs	r3, r2
 8008216:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008218:	4b14      	ldr	r3, [pc, #80]	; (800826c <RCCEx_PLLSAI2_Config+0x1d8>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a13      	ldr	r2, [pc, #76]	; (800826c <RCCEx_PLLSAI2_Config+0x1d8>)
 800821e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008222:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008224:	f7fb fbe6 	bl	80039f4 <HAL_GetTick>
 8008228:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800822a:	e009      	b.n	8008240 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800822c:	f7fb fbe2 	bl	80039f4 <HAL_GetTick>
 8008230:	4602      	mov	r2, r0
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	1ad3      	subs	r3, r2, r3
 8008236:	2b02      	cmp	r3, #2
 8008238:	d902      	bls.n	8008240 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800823a:	2303      	movs	r3, #3
 800823c:	73fb      	strb	r3, [r7, #15]
          break;
 800823e:	e005      	b.n	800824c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008240:	4b0a      	ldr	r3, [pc, #40]	; (800826c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008248:	2b00      	cmp	r3, #0
 800824a:	d0ef      	beq.n	800822c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800824c:	7bfb      	ldrb	r3, [r7, #15]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d106      	bne.n	8008260 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008252:	4b06      	ldr	r3, [pc, #24]	; (800826c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008254:	695a      	ldr	r2, [r3, #20]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	699b      	ldr	r3, [r3, #24]
 800825a:	4904      	ldr	r1, [pc, #16]	; (800826c <RCCEx_PLLSAI2_Config+0x1d8>)
 800825c:	4313      	orrs	r3, r2
 800825e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008260:	7bfb      	ldrb	r3, [r7, #15]
}
 8008262:	4618      	mov	r0, r3
 8008264:	3710      	adds	r7, #16
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	40021000 	.word	0x40021000
 8008270:	07ff800f 	.word	0x07ff800f
 8008274:	ff9f800f 	.word	0xff9f800f
 8008278:	f9ff800f 	.word	0xf9ff800f

0800827c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d101      	bne.n	800828e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	e095      	b.n	80083ba <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008292:	2b00      	cmp	r3, #0
 8008294:	d108      	bne.n	80082a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800829e:	d009      	beq.n	80082b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	61da      	str	r2, [r3, #28]
 80082a6:	e005      	b.n	80082b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d106      	bne.n	80082d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f7fb f89a 	bl	8003408 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2202      	movs	r2, #2
 80082d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082ea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80082f4:	d902      	bls.n	80082fc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80082f6:	2300      	movs	r3, #0
 80082f8:	60fb      	str	r3, [r7, #12]
 80082fa:	e002      	b.n	8008302 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80082fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008300:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800830a:	d007      	beq.n	800831c <HAL_SPI_Init+0xa0>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008314:	d002      	beq.n	800831c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800832c:	431a      	orrs	r2, r3
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	f003 0302 	and.w	r3, r3, #2
 8008336:	431a      	orrs	r2, r3
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	695b      	ldr	r3, [r3, #20]
 800833c:	f003 0301 	and.w	r3, r3, #1
 8008340:	431a      	orrs	r2, r3
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	699b      	ldr	r3, [r3, #24]
 8008346:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800834a:	431a      	orrs	r2, r3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	69db      	ldr	r3, [r3, #28]
 8008350:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008354:	431a      	orrs	r2, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a1b      	ldr	r3, [r3, #32]
 800835a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800835e:	ea42 0103 	orr.w	r1, r2, r3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008366:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	430a      	orrs	r2, r1
 8008370:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	699b      	ldr	r3, [r3, #24]
 8008376:	0c1b      	lsrs	r3, r3, #16
 8008378:	f003 0204 	and.w	r2, r3, #4
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008380:	f003 0310 	and.w	r3, r3, #16
 8008384:	431a      	orrs	r2, r3
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800838a:	f003 0308 	and.w	r3, r3, #8
 800838e:	431a      	orrs	r2, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008398:	ea42 0103 	orr.w	r1, r2, r3
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	430a      	orrs	r2, r1
 80083a8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2200      	movs	r2, #0
 80083ae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3710      	adds	r7, #16
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}

080083c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083c2:	b580      	push	{r7, lr}
 80083c4:	b088      	sub	sp, #32
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	60f8      	str	r0, [r7, #12]
 80083ca:	60b9      	str	r1, [r7, #8]
 80083cc:	603b      	str	r3, [r7, #0]
 80083ce:	4613      	mov	r3, r2
 80083d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80083d2:	2300      	movs	r3, #0
 80083d4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d101      	bne.n	80083e4 <HAL_SPI_Transmit+0x22>
 80083e0:	2302      	movs	r3, #2
 80083e2:	e15f      	b.n	80086a4 <HAL_SPI_Transmit+0x2e2>
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80083ec:	f7fb fb02 	bl	80039f4 <HAL_GetTick>
 80083f0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80083f2:	88fb      	ldrh	r3, [r7, #6]
 80083f4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d002      	beq.n	8008408 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008402:	2302      	movs	r3, #2
 8008404:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008406:	e148      	b.n	800869a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d002      	beq.n	8008414 <HAL_SPI_Transmit+0x52>
 800840e:	88fb      	ldrh	r3, [r7, #6]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d102      	bne.n	800841a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008418:	e13f      	b.n	800869a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2203      	movs	r2, #3
 800841e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2200      	movs	r2, #0
 8008426:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	68ba      	ldr	r2, [r7, #8]
 800842c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	88fa      	ldrh	r2, [r7, #6]
 8008432:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	88fa      	ldrh	r2, [r7, #6]
 8008438:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2200      	movs	r2, #0
 800843e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2200      	movs	r2, #0
 8008444:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2200      	movs	r2, #0
 800844c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2200      	movs	r2, #0
 8008454:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2200      	movs	r2, #0
 800845a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008464:	d10f      	bne.n	8008486 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008474:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008484:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008490:	2b40      	cmp	r3, #64	; 0x40
 8008492:	d007      	beq.n	80084a4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80084ac:	d94f      	bls.n	800854e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d002      	beq.n	80084bc <HAL_SPI_Transmit+0xfa>
 80084b6:	8afb      	ldrh	r3, [r7, #22]
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d142      	bne.n	8008542 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c0:	881a      	ldrh	r2, [r3, #0]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084cc:	1c9a      	adds	r2, r3, #2
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	3b01      	subs	r3, #1
 80084da:	b29a      	uxth	r2, r3
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80084e0:	e02f      	b.n	8008542 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	f003 0302 	and.w	r3, r3, #2
 80084ec:	2b02      	cmp	r3, #2
 80084ee:	d112      	bne.n	8008516 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f4:	881a      	ldrh	r2, [r3, #0]
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008500:	1c9a      	adds	r2, r3, #2
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800850a:	b29b      	uxth	r3, r3
 800850c:	3b01      	subs	r3, #1
 800850e:	b29a      	uxth	r2, r3
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008514:	e015      	b.n	8008542 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008516:	f7fb fa6d 	bl	80039f4 <HAL_GetTick>
 800851a:	4602      	mov	r2, r0
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	1ad3      	subs	r3, r2, r3
 8008520:	683a      	ldr	r2, [r7, #0]
 8008522:	429a      	cmp	r2, r3
 8008524:	d803      	bhi.n	800852e <HAL_SPI_Transmit+0x16c>
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800852c:	d102      	bne.n	8008534 <HAL_SPI_Transmit+0x172>
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d106      	bne.n	8008542 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8008534:	2303      	movs	r3, #3
 8008536:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2201      	movs	r2, #1
 800853c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8008540:	e0ab      	b.n	800869a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008546:	b29b      	uxth	r3, r3
 8008548:	2b00      	cmp	r3, #0
 800854a:	d1ca      	bne.n	80084e2 <HAL_SPI_Transmit+0x120>
 800854c:	e080      	b.n	8008650 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d002      	beq.n	800855c <HAL_SPI_Transmit+0x19a>
 8008556:	8afb      	ldrh	r3, [r7, #22]
 8008558:	2b01      	cmp	r3, #1
 800855a:	d174      	bne.n	8008646 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008560:	b29b      	uxth	r3, r3
 8008562:	2b01      	cmp	r3, #1
 8008564:	d912      	bls.n	800858c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800856a:	881a      	ldrh	r2, [r3, #0]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008576:	1c9a      	adds	r2, r3, #2
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008580:	b29b      	uxth	r3, r3
 8008582:	3b02      	subs	r3, #2
 8008584:	b29a      	uxth	r2, r3
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	87da      	strh	r2, [r3, #62]	; 0x3e
 800858a:	e05c      	b.n	8008646 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	330c      	adds	r3, #12
 8008596:	7812      	ldrb	r2, [r2, #0]
 8008598:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800859e:	1c5a      	adds	r2, r3, #1
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	3b01      	subs	r3, #1
 80085ac:	b29a      	uxth	r2, r3
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80085b2:	e048      	b.n	8008646 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	f003 0302 	and.w	r3, r3, #2
 80085be:	2b02      	cmp	r3, #2
 80085c0:	d12b      	bne.n	800861a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d912      	bls.n	80085f2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d0:	881a      	ldrh	r2, [r3, #0]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085dc:	1c9a      	adds	r2, r3, #2
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	3b02      	subs	r3, #2
 80085ea:	b29a      	uxth	r2, r3
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80085f0:	e029      	b.n	8008646 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	330c      	adds	r3, #12
 80085fc:	7812      	ldrb	r2, [r2, #0]
 80085fe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008604:	1c5a      	adds	r2, r3, #1
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800860e:	b29b      	uxth	r3, r3
 8008610:	3b01      	subs	r3, #1
 8008612:	b29a      	uxth	r2, r3
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008618:	e015      	b.n	8008646 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800861a:	f7fb f9eb 	bl	80039f4 <HAL_GetTick>
 800861e:	4602      	mov	r2, r0
 8008620:	69bb      	ldr	r3, [r7, #24]
 8008622:	1ad3      	subs	r3, r2, r3
 8008624:	683a      	ldr	r2, [r7, #0]
 8008626:	429a      	cmp	r2, r3
 8008628:	d803      	bhi.n	8008632 <HAL_SPI_Transmit+0x270>
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008630:	d102      	bne.n	8008638 <HAL_SPI_Transmit+0x276>
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d106      	bne.n	8008646 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8008638:	2303      	movs	r3, #3
 800863a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2201      	movs	r2, #1
 8008640:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8008644:	e029      	b.n	800869a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800864a:	b29b      	uxth	r3, r3
 800864c:	2b00      	cmp	r3, #0
 800864e:	d1b1      	bne.n	80085b4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008650:	69ba      	ldr	r2, [r7, #24]
 8008652:	6839      	ldr	r1, [r7, #0]
 8008654:	68f8      	ldr	r0, [r7, #12]
 8008656:	f000 f947 	bl	80088e8 <SPI_EndRxTxTransaction>
 800865a:	4603      	mov	r3, r0
 800865c:	2b00      	cmp	r3, #0
 800865e:	d002      	beq.n	8008666 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2220      	movs	r2, #32
 8008664:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d10a      	bne.n	8008684 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800866e:	2300      	movs	r3, #0
 8008670:	613b      	str	r3, [r7, #16]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	613b      	str	r3, [r7, #16]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	613b      	str	r3, [r7, #16]
 8008682:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008688:	2b00      	cmp	r3, #0
 800868a:	d002      	beq.n	8008692 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800868c:	2301      	movs	r3, #1
 800868e:	77fb      	strb	r3, [r7, #31]
 8008690:	e003      	b.n	800869a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2201      	movs	r2, #1
 8008696:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2200      	movs	r2, #0
 800869e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80086a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3720      	adds	r7, #32
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b088      	sub	sp, #32
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	603b      	str	r3, [r7, #0]
 80086b8:	4613      	mov	r3, r2
 80086ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80086bc:	f7fb f99a 	bl	80039f4 <HAL_GetTick>
 80086c0:	4602      	mov	r2, r0
 80086c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c4:	1a9b      	subs	r3, r3, r2
 80086c6:	683a      	ldr	r2, [r7, #0]
 80086c8:	4413      	add	r3, r2
 80086ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80086cc:	f7fb f992 	bl	80039f4 <HAL_GetTick>
 80086d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80086d2:	4b39      	ldr	r3, [pc, #228]	; (80087b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	015b      	lsls	r3, r3, #5
 80086d8:	0d1b      	lsrs	r3, r3, #20
 80086da:	69fa      	ldr	r2, [r7, #28]
 80086dc:	fb02 f303 	mul.w	r3, r2, r3
 80086e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80086e2:	e054      	b.n	800878e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ea:	d050      	beq.n	800878e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80086ec:	f7fb f982 	bl	80039f4 <HAL_GetTick>
 80086f0:	4602      	mov	r2, r0
 80086f2:	69bb      	ldr	r3, [r7, #24]
 80086f4:	1ad3      	subs	r3, r2, r3
 80086f6:	69fa      	ldr	r2, [r7, #28]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d902      	bls.n	8008702 <SPI_WaitFlagStateUntilTimeout+0x56>
 80086fc:	69fb      	ldr	r3, [r7, #28]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d13d      	bne.n	800877e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	685a      	ldr	r2, [r3, #4]
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008710:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800871a:	d111      	bne.n	8008740 <SPI_WaitFlagStateUntilTimeout+0x94>
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008724:	d004      	beq.n	8008730 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800872e:	d107      	bne.n	8008740 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800873e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008744:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008748:	d10f      	bne.n	800876a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008758:	601a      	str	r2, [r3, #0]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008768:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2201      	movs	r2, #1
 800876e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2200      	movs	r2, #0
 8008776:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800877a:	2303      	movs	r3, #3
 800877c:	e017      	b.n	80087ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d101      	bne.n	8008788 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008784:	2300      	movs	r3, #0
 8008786:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	3b01      	subs	r3, #1
 800878c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	689a      	ldr	r2, [r3, #8]
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	4013      	ands	r3, r2
 8008798:	68ba      	ldr	r2, [r7, #8]
 800879a:	429a      	cmp	r2, r3
 800879c:	bf0c      	ite	eq
 800879e:	2301      	moveq	r3, #1
 80087a0:	2300      	movne	r3, #0
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	461a      	mov	r2, r3
 80087a6:	79fb      	ldrb	r3, [r7, #7]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d19b      	bne.n	80086e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3720      	adds	r7, #32
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop
 80087b8:	2000004c 	.word	0x2000004c

080087bc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b08a      	sub	sp, #40	; 0x28
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	607a      	str	r2, [r7, #4]
 80087c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80087ca:	2300      	movs	r3, #0
 80087cc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80087ce:	f7fb f911 	bl	80039f4 <HAL_GetTick>
 80087d2:	4602      	mov	r2, r0
 80087d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d6:	1a9b      	subs	r3, r3, r2
 80087d8:	683a      	ldr	r2, [r7, #0]
 80087da:	4413      	add	r3, r2
 80087dc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80087de:	f7fb f909 	bl	80039f4 <HAL_GetTick>
 80087e2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	330c      	adds	r3, #12
 80087ea:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80087ec:	4b3d      	ldr	r3, [pc, #244]	; (80088e4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	4613      	mov	r3, r2
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	4413      	add	r3, r2
 80087f6:	00da      	lsls	r2, r3, #3
 80087f8:	1ad3      	subs	r3, r2, r3
 80087fa:	0d1b      	lsrs	r3, r3, #20
 80087fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087fe:	fb02 f303 	mul.w	r3, r2, r3
 8008802:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008804:	e060      	b.n	80088c8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800880c:	d107      	bne.n	800881e <SPI_WaitFifoStateUntilTimeout+0x62>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d104      	bne.n	800881e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008814:	69fb      	ldr	r3, [r7, #28]
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	b2db      	uxtb	r3, r3
 800881a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800881c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008824:	d050      	beq.n	80088c8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008826:	f7fb f8e5 	bl	80039f4 <HAL_GetTick>
 800882a:	4602      	mov	r2, r0
 800882c:	6a3b      	ldr	r3, [r7, #32]
 800882e:	1ad3      	subs	r3, r2, r3
 8008830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008832:	429a      	cmp	r2, r3
 8008834:	d902      	bls.n	800883c <SPI_WaitFifoStateUntilTimeout+0x80>
 8008836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008838:	2b00      	cmp	r3, #0
 800883a:	d13d      	bne.n	80088b8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	685a      	ldr	r2, [r3, #4]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800884a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008854:	d111      	bne.n	800887a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800885e:	d004      	beq.n	800886a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008868:	d107      	bne.n	800887a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008878:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800887e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008882:	d10f      	bne.n	80088a4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	681a      	ldr	r2, [r3, #0]
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008892:	601a      	str	r2, [r3, #0]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80088a2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80088b4:	2303      	movs	r3, #3
 80088b6:	e010      	b.n	80088da <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d101      	bne.n	80088c2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80088be:	2300      	movs	r3, #0
 80088c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80088c2:	69bb      	ldr	r3, [r7, #24]
 80088c4:	3b01      	subs	r3, #1
 80088c6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	689a      	ldr	r2, [r3, #8]
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	4013      	ands	r3, r2
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d196      	bne.n	8008806 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3728      	adds	r7, #40	; 0x28
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop
 80088e4:	2000004c 	.word	0x2000004c

080088e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b086      	sub	sp, #24
 80088ec:	af02      	add	r7, sp, #8
 80088ee:	60f8      	str	r0, [r7, #12]
 80088f0:	60b9      	str	r1, [r7, #8]
 80088f2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	9300      	str	r3, [sp, #0]
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008900:	68f8      	ldr	r0, [r7, #12]
 8008902:	f7ff ff5b 	bl	80087bc <SPI_WaitFifoStateUntilTimeout>
 8008906:	4603      	mov	r3, r0
 8008908:	2b00      	cmp	r3, #0
 800890a:	d007      	beq.n	800891c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008910:	f043 0220 	orr.w	r2, r3, #32
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008918:	2303      	movs	r3, #3
 800891a:	e027      	b.n	800896c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	9300      	str	r3, [sp, #0]
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	2200      	movs	r2, #0
 8008924:	2180      	movs	r1, #128	; 0x80
 8008926:	68f8      	ldr	r0, [r7, #12]
 8008928:	f7ff fec0 	bl	80086ac <SPI_WaitFlagStateUntilTimeout>
 800892c:	4603      	mov	r3, r0
 800892e:	2b00      	cmp	r3, #0
 8008930:	d007      	beq.n	8008942 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008936:	f043 0220 	orr.w	r2, r3, #32
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800893e:	2303      	movs	r3, #3
 8008940:	e014      	b.n	800896c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	9300      	str	r3, [sp, #0]
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	2200      	movs	r2, #0
 800894a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800894e:	68f8      	ldr	r0, [r7, #12]
 8008950:	f7ff ff34 	bl	80087bc <SPI_WaitFifoStateUntilTimeout>
 8008954:	4603      	mov	r3, r0
 8008956:	2b00      	cmp	r3, #0
 8008958:	d007      	beq.n	800896a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800895e:	f043 0220 	orr.w	r2, r3, #32
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008966:	2303      	movs	r3, #3
 8008968:	e000      	b.n	800896c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800896a:	2300      	movs	r3, #0
}
 800896c:	4618      	mov	r0, r3
 800896e:	3710      	adds	r7, #16
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b082      	sub	sp, #8
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d101      	bne.n	8008986 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008982:	2301      	movs	r3, #1
 8008984:	e049      	b.n	8008a1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800898c:	b2db      	uxtb	r3, r3
 800898e:	2b00      	cmp	r3, #0
 8008990:	d106      	bne.n	80089a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2200      	movs	r2, #0
 8008996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 f841 	bl	8008a22 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2202      	movs	r2, #2
 80089a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	3304      	adds	r3, #4
 80089b0:	4619      	mov	r1, r3
 80089b2:	4610      	mov	r0, r2
 80089b4:	f000 f9da 	bl	8008d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2201      	movs	r2, #1
 80089bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2201      	movs	r2, #1
 80089c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2201      	movs	r2, #1
 80089cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2201      	movs	r2, #1
 80089d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2201      	movs	r2, #1
 80089dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2201      	movs	r2, #1
 80089e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2201      	movs	r2, #1
 80089ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2201      	movs	r2, #1
 80089f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2201      	movs	r2, #1
 8008a04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a18:	2300      	movs	r3, #0
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3708      	adds	r7, #8
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008a22:	b480      	push	{r7}
 8008a24:	b083      	sub	sp, #12
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008a2a:	bf00      	nop
 8008a2c:	370c      	adds	r7, #12
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr
	...

08008a38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b085      	sub	sp, #20
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d001      	beq.n	8008a50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	e04f      	b.n	8008af0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2202      	movs	r2, #2
 8008a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	68da      	ldr	r2, [r3, #12]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f042 0201 	orr.w	r2, r2, #1
 8008a66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a23      	ldr	r2, [pc, #140]	; (8008afc <HAL_TIM_Base_Start_IT+0xc4>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d01d      	beq.n	8008aae <HAL_TIM_Base_Start_IT+0x76>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a7a:	d018      	beq.n	8008aae <HAL_TIM_Base_Start_IT+0x76>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a1f      	ldr	r2, [pc, #124]	; (8008b00 <HAL_TIM_Base_Start_IT+0xc8>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d013      	beq.n	8008aae <HAL_TIM_Base_Start_IT+0x76>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a1e      	ldr	r2, [pc, #120]	; (8008b04 <HAL_TIM_Base_Start_IT+0xcc>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d00e      	beq.n	8008aae <HAL_TIM_Base_Start_IT+0x76>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a1c      	ldr	r2, [pc, #112]	; (8008b08 <HAL_TIM_Base_Start_IT+0xd0>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d009      	beq.n	8008aae <HAL_TIM_Base_Start_IT+0x76>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a1b      	ldr	r2, [pc, #108]	; (8008b0c <HAL_TIM_Base_Start_IT+0xd4>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d004      	beq.n	8008aae <HAL_TIM_Base_Start_IT+0x76>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a19      	ldr	r2, [pc, #100]	; (8008b10 <HAL_TIM_Base_Start_IT+0xd8>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d115      	bne.n	8008ada <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	689a      	ldr	r2, [r3, #8]
 8008ab4:	4b17      	ldr	r3, [pc, #92]	; (8008b14 <HAL_TIM_Base_Start_IT+0xdc>)
 8008ab6:	4013      	ands	r3, r2
 8008ab8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2b06      	cmp	r3, #6
 8008abe:	d015      	beq.n	8008aec <HAL_TIM_Base_Start_IT+0xb4>
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ac6:	d011      	beq.n	8008aec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	681a      	ldr	r2, [r3, #0]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f042 0201 	orr.w	r2, r2, #1
 8008ad6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ad8:	e008      	b.n	8008aec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	681a      	ldr	r2, [r3, #0]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f042 0201 	orr.w	r2, r2, #1
 8008ae8:	601a      	str	r2, [r3, #0]
 8008aea:	e000      	b.n	8008aee <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008aee:	2300      	movs	r3, #0
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3714      	adds	r7, #20
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr
 8008afc:	40012c00 	.word	0x40012c00
 8008b00:	40000400 	.word	0x40000400
 8008b04:	40000800 	.word	0x40000800
 8008b08:	40000c00 	.word	0x40000c00
 8008b0c:	40013400 	.word	0x40013400
 8008b10:	40014000 	.word	0x40014000
 8008b14:	00010007 	.word	0x00010007

08008b18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	68db      	ldr	r3, [r3, #12]
 8008b26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	691b      	ldr	r3, [r3, #16]
 8008b2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	f003 0302 	and.w	r3, r3, #2
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d020      	beq.n	8008b7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f003 0302 	and.w	r3, r3, #2
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d01b      	beq.n	8008b7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f06f 0202 	mvn.w	r2, #2
 8008b4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2201      	movs	r2, #1
 8008b52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	699b      	ldr	r3, [r3, #24]
 8008b5a:	f003 0303 	and.w	r3, r3, #3
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d003      	beq.n	8008b6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 f8e4 	bl	8008d30 <HAL_TIM_IC_CaptureCallback>
 8008b68:	e005      	b.n	8008b76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 f8d6 	bl	8008d1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 f8e7 	bl	8008d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	f003 0304 	and.w	r3, r3, #4
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d020      	beq.n	8008bc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f003 0304 	and.w	r3, r3, #4
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d01b      	beq.n	8008bc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f06f 0204 	mvn.w	r2, #4
 8008b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2202      	movs	r2, #2
 8008b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	699b      	ldr	r3, [r3, #24]
 8008ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d003      	beq.n	8008bb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 f8be 	bl	8008d30 <HAL_TIM_IC_CaptureCallback>
 8008bb4:	e005      	b.n	8008bc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 f8b0 	bl	8008d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 f8c1 	bl	8008d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	f003 0308 	and.w	r3, r3, #8
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d020      	beq.n	8008c14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f003 0308 	and.w	r3, r3, #8
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d01b      	beq.n	8008c14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f06f 0208 	mvn.w	r2, #8
 8008be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2204      	movs	r2, #4
 8008bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	69db      	ldr	r3, [r3, #28]
 8008bf2:	f003 0303 	and.w	r3, r3, #3
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d003      	beq.n	8008c02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 f898 	bl	8008d30 <HAL_TIM_IC_CaptureCallback>
 8008c00:	e005      	b.n	8008c0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 f88a 	bl	8008d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 f89b 	bl	8008d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2200      	movs	r2, #0
 8008c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	f003 0310 	and.w	r3, r3, #16
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d020      	beq.n	8008c60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f003 0310 	and.w	r3, r3, #16
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d01b      	beq.n	8008c60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f06f 0210 	mvn.w	r2, #16
 8008c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2208      	movs	r2, #8
 8008c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	69db      	ldr	r3, [r3, #28]
 8008c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d003      	beq.n	8008c4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 f872 	bl	8008d30 <HAL_TIM_IC_CaptureCallback>
 8008c4c:	e005      	b.n	8008c5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 f864 	bl	8008d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 f875 	bl	8008d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	f003 0301 	and.w	r3, r3, #1
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d00c      	beq.n	8008c84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f003 0301 	and.w	r3, r3, #1
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d007      	beq.n	8008c84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f06f 0201 	mvn.w	r2, #1
 8008c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f7fa f9c4 	bl	800300c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d00c      	beq.n	8008ca8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d007      	beq.n	8008ca8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 f906 	bl	8008eb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d00c      	beq.n	8008ccc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d007      	beq.n	8008ccc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 f8fe 	bl	8008ec8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d00c      	beq.n	8008cf0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d007      	beq.n	8008cf0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 f834 	bl	8008d58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	f003 0320 	and.w	r3, r3, #32
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00c      	beq.n	8008d14 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f003 0320 	and.w	r3, r3, #32
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d007      	beq.n	8008d14 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f06f 0220 	mvn.w	r2, #32
 8008d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 f8c6 	bl	8008ea0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d14:	bf00      	nop
 8008d16:	3710      	adds	r7, #16
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008d24:	bf00      	nop
 8008d26:	370c      	adds	r7, #12
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008d38:	bf00      	nop
 8008d3a:	370c      	adds	r7, #12
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b083      	sub	sp, #12
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008d4c:	bf00      	nop
 8008d4e:	370c      	adds	r7, #12
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d60:	bf00      	nop
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	4a40      	ldr	r2, [pc, #256]	; (8008e80 <TIM_Base_SetConfig+0x114>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d013      	beq.n	8008dac <TIM_Base_SetConfig+0x40>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d8a:	d00f      	beq.n	8008dac <TIM_Base_SetConfig+0x40>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	4a3d      	ldr	r2, [pc, #244]	; (8008e84 <TIM_Base_SetConfig+0x118>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d00b      	beq.n	8008dac <TIM_Base_SetConfig+0x40>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	4a3c      	ldr	r2, [pc, #240]	; (8008e88 <TIM_Base_SetConfig+0x11c>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d007      	beq.n	8008dac <TIM_Base_SetConfig+0x40>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	4a3b      	ldr	r2, [pc, #236]	; (8008e8c <TIM_Base_SetConfig+0x120>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d003      	beq.n	8008dac <TIM_Base_SetConfig+0x40>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	4a3a      	ldr	r2, [pc, #232]	; (8008e90 <TIM_Base_SetConfig+0x124>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d108      	bne.n	8008dbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008db2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	68fa      	ldr	r2, [r7, #12]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4a2f      	ldr	r2, [pc, #188]	; (8008e80 <TIM_Base_SetConfig+0x114>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d01f      	beq.n	8008e06 <TIM_Base_SetConfig+0x9a>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dcc:	d01b      	beq.n	8008e06 <TIM_Base_SetConfig+0x9a>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	4a2c      	ldr	r2, [pc, #176]	; (8008e84 <TIM_Base_SetConfig+0x118>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d017      	beq.n	8008e06 <TIM_Base_SetConfig+0x9a>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	4a2b      	ldr	r2, [pc, #172]	; (8008e88 <TIM_Base_SetConfig+0x11c>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d013      	beq.n	8008e06 <TIM_Base_SetConfig+0x9a>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	4a2a      	ldr	r2, [pc, #168]	; (8008e8c <TIM_Base_SetConfig+0x120>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d00f      	beq.n	8008e06 <TIM_Base_SetConfig+0x9a>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	4a29      	ldr	r2, [pc, #164]	; (8008e90 <TIM_Base_SetConfig+0x124>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d00b      	beq.n	8008e06 <TIM_Base_SetConfig+0x9a>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4a28      	ldr	r2, [pc, #160]	; (8008e94 <TIM_Base_SetConfig+0x128>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d007      	beq.n	8008e06 <TIM_Base_SetConfig+0x9a>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4a27      	ldr	r2, [pc, #156]	; (8008e98 <TIM_Base_SetConfig+0x12c>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d003      	beq.n	8008e06 <TIM_Base_SetConfig+0x9a>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	4a26      	ldr	r2, [pc, #152]	; (8008e9c <TIM_Base_SetConfig+0x130>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d108      	bne.n	8008e18 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	68db      	ldr	r3, [r3, #12]
 8008e12:	68fa      	ldr	r2, [r7, #12]
 8008e14:	4313      	orrs	r3, r2
 8008e16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	695b      	ldr	r3, [r3, #20]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	68fa      	ldr	r2, [r7, #12]
 8008e2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	689a      	ldr	r2, [r3, #8]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	4a10      	ldr	r2, [pc, #64]	; (8008e80 <TIM_Base_SetConfig+0x114>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d00f      	beq.n	8008e64 <TIM_Base_SetConfig+0xf8>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	4a12      	ldr	r2, [pc, #72]	; (8008e90 <TIM_Base_SetConfig+0x124>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d00b      	beq.n	8008e64 <TIM_Base_SetConfig+0xf8>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	4a11      	ldr	r2, [pc, #68]	; (8008e94 <TIM_Base_SetConfig+0x128>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d007      	beq.n	8008e64 <TIM_Base_SetConfig+0xf8>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	4a10      	ldr	r2, [pc, #64]	; (8008e98 <TIM_Base_SetConfig+0x12c>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d003      	beq.n	8008e64 <TIM_Base_SetConfig+0xf8>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	4a0f      	ldr	r2, [pc, #60]	; (8008e9c <TIM_Base_SetConfig+0x130>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d103      	bne.n	8008e6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	691a      	ldr	r2, [r3, #16]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	615a      	str	r2, [r3, #20]
}
 8008e72:	bf00      	nop
 8008e74:	3714      	adds	r7, #20
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	40012c00 	.word	0x40012c00
 8008e84:	40000400 	.word	0x40000400
 8008e88:	40000800 	.word	0x40000800
 8008e8c:	40000c00 	.word	0x40000c00
 8008e90:	40013400 	.word	0x40013400
 8008e94:	40014000 	.word	0x40014000
 8008e98:	40014400 	.word	0x40014400
 8008e9c:	40014800 	.word	0x40014800

08008ea0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ea8:	bf00      	nop
 8008eaa:	370c      	adds	r7, #12
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr

08008eb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ebc:	bf00      	nop
 8008ebe:	370c      	adds	r7, #12
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008ed0:	bf00      	nop
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d101      	bne.n	8008eee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008eea:	2301      	movs	r3, #1
 8008eec:	e042      	b.n	8008f74 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d106      	bne.n	8008f06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f7fa faf7 	bl	80034f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2224      	movs	r2, #36	; 0x24
 8008f0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f022 0201 	bic.w	r2, r2, #1
 8008f1c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d002      	beq.n	8008f2c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 fef8 	bl	8009d1c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 fbf9 	bl	8009724 <UART_SetConfig>
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d101      	bne.n	8008f3c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	e01b      	b.n	8008f74 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	685a      	ldr	r2, [r3, #4]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008f4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	689a      	ldr	r2, [r3, #8]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008f5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f042 0201 	orr.w	r2, r2, #1
 8008f6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 ff77 	bl	8009e60 <UART_CheckIdleState>
 8008f72:	4603      	mov	r3, r0
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3708      	adds	r7, #8
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b08a      	sub	sp, #40	; 0x28
 8008f80:	af02      	add	r7, sp, #8
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	603b      	str	r3, [r7, #0]
 8008f88:	4613      	mov	r3, r2
 8008f8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f92:	2b20      	cmp	r3, #32
 8008f94:	d17c      	bne.n	8009090 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d002      	beq.n	8008fa2 <HAL_UART_Transmit+0x26>
 8008f9c:	88fb      	ldrh	r3, [r7, #6]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d101      	bne.n	8008fa6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e075      	b.n	8009092 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2221      	movs	r2, #33	; 0x21
 8008fb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008fb6:	f7fa fd1d 	bl	80039f4 <HAL_GetTick>
 8008fba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	88fa      	ldrh	r2, [r7, #6]
 8008fc0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	88fa      	ldrh	r2, [r7, #6]
 8008fc8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fd4:	d108      	bne.n	8008fe8 <HAL_UART_Transmit+0x6c>
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	691b      	ldr	r3, [r3, #16]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d104      	bne.n	8008fe8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	61bb      	str	r3, [r7, #24]
 8008fe6:	e003      	b.n	8008ff0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008fec:	2300      	movs	r3, #0
 8008fee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008ff0:	e031      	b.n	8009056 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	9300      	str	r3, [sp, #0]
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	2180      	movs	r1, #128	; 0x80
 8008ffc:	68f8      	ldr	r0, [r7, #12]
 8008ffe:	f000 ffd9 	bl	8009fb4 <UART_WaitOnFlagUntilTimeout>
 8009002:	4603      	mov	r3, r0
 8009004:	2b00      	cmp	r3, #0
 8009006:	d005      	beq.n	8009014 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2220      	movs	r2, #32
 800900c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8009010:	2303      	movs	r3, #3
 8009012:	e03e      	b.n	8009092 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8009014:	69fb      	ldr	r3, [r7, #28]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d10b      	bne.n	8009032 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	881a      	ldrh	r2, [r3, #0]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009026:	b292      	uxth	r2, r2
 8009028:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800902a:	69bb      	ldr	r3, [r7, #24]
 800902c:	3302      	adds	r3, #2
 800902e:	61bb      	str	r3, [r7, #24]
 8009030:	e008      	b.n	8009044 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009032:	69fb      	ldr	r3, [r7, #28]
 8009034:	781a      	ldrb	r2, [r3, #0]
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	b292      	uxth	r2, r2
 800903c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	3301      	adds	r3, #1
 8009042:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800904a:	b29b      	uxth	r3, r3
 800904c:	3b01      	subs	r3, #1
 800904e:	b29a      	uxth	r2, r3
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800905c:	b29b      	uxth	r3, r3
 800905e:	2b00      	cmp	r3, #0
 8009060:	d1c7      	bne.n	8008ff2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	9300      	str	r3, [sp, #0]
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	2200      	movs	r2, #0
 800906a:	2140      	movs	r1, #64	; 0x40
 800906c:	68f8      	ldr	r0, [r7, #12]
 800906e:	f000 ffa1 	bl	8009fb4 <UART_WaitOnFlagUntilTimeout>
 8009072:	4603      	mov	r3, r0
 8009074:	2b00      	cmp	r3, #0
 8009076:	d005      	beq.n	8009084 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2220      	movs	r2, #32
 800907c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8009080:	2303      	movs	r3, #3
 8009082:	e006      	b.n	8009092 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2220      	movs	r2, #32
 8009088:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800908c:	2300      	movs	r3, #0
 800908e:	e000      	b.n	8009092 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8009090:	2302      	movs	r3, #2
  }
}
 8009092:	4618      	mov	r0, r3
 8009094:	3720      	adds	r7, #32
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
	...

0800909c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b0ba      	sub	sp, #232	; 0xe8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	69db      	ldr	r3, [r3, #28]
 80090aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80090c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80090c6:	f640 030f 	movw	r3, #2063	; 0x80f
 80090ca:	4013      	ands	r3, r2
 80090cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80090d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d11b      	bne.n	8009110 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80090d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090dc:	f003 0320 	and.w	r3, r3, #32
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d015      	beq.n	8009110 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80090e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090e8:	f003 0320 	and.w	r3, r3, #32
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d105      	bne.n	80090fc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80090f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d009      	beq.n	8009110 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009100:	2b00      	cmp	r3, #0
 8009102:	f000 82e3 	beq.w	80096cc <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	4798      	blx	r3
      }
      return;
 800910e:	e2dd      	b.n	80096cc <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8009110:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009114:	2b00      	cmp	r3, #0
 8009116:	f000 8123 	beq.w	8009360 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800911a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800911e:	4b8d      	ldr	r3, [pc, #564]	; (8009354 <HAL_UART_IRQHandler+0x2b8>)
 8009120:	4013      	ands	r3, r2
 8009122:	2b00      	cmp	r3, #0
 8009124:	d106      	bne.n	8009134 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009126:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800912a:	4b8b      	ldr	r3, [pc, #556]	; (8009358 <HAL_UART_IRQHandler+0x2bc>)
 800912c:	4013      	ands	r3, r2
 800912e:	2b00      	cmp	r3, #0
 8009130:	f000 8116 	beq.w	8009360 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009138:	f003 0301 	and.w	r3, r3, #1
 800913c:	2b00      	cmp	r3, #0
 800913e:	d011      	beq.n	8009164 <HAL_UART_IRQHandler+0xc8>
 8009140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009148:	2b00      	cmp	r3, #0
 800914a:	d00b      	beq.n	8009164 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2201      	movs	r2, #1
 8009152:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800915a:	f043 0201 	orr.w	r2, r3, #1
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009168:	f003 0302 	and.w	r3, r3, #2
 800916c:	2b00      	cmp	r3, #0
 800916e:	d011      	beq.n	8009194 <HAL_UART_IRQHandler+0xf8>
 8009170:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009174:	f003 0301 	and.w	r3, r3, #1
 8009178:	2b00      	cmp	r3, #0
 800917a:	d00b      	beq.n	8009194 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2202      	movs	r2, #2
 8009182:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800918a:	f043 0204 	orr.w	r2, r3, #4
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009198:	f003 0304 	and.w	r3, r3, #4
 800919c:	2b00      	cmp	r3, #0
 800919e:	d011      	beq.n	80091c4 <HAL_UART_IRQHandler+0x128>
 80091a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091a4:	f003 0301 	and.w	r3, r3, #1
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d00b      	beq.n	80091c4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	2204      	movs	r2, #4
 80091b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091ba:	f043 0202 	orr.w	r2, r3, #2
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80091c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091c8:	f003 0308 	and.w	r3, r3, #8
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d017      	beq.n	8009200 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80091d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091d4:	f003 0320 	and.w	r3, r3, #32
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d105      	bne.n	80091e8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80091dc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80091e0:	4b5c      	ldr	r3, [pc, #368]	; (8009354 <HAL_UART_IRQHandler+0x2b8>)
 80091e2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d00b      	beq.n	8009200 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2208      	movs	r2, #8
 80091ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091f6:	f043 0208 	orr.w	r2, r3, #8
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009204:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009208:	2b00      	cmp	r3, #0
 800920a:	d012      	beq.n	8009232 <HAL_UART_IRQHandler+0x196>
 800920c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009210:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009214:	2b00      	cmp	r3, #0
 8009216:	d00c      	beq.n	8009232 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009220:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009228:	f043 0220 	orr.w	r2, r3, #32
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009238:	2b00      	cmp	r3, #0
 800923a:	f000 8249 	beq.w	80096d0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800923e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009242:	f003 0320 	and.w	r3, r3, #32
 8009246:	2b00      	cmp	r3, #0
 8009248:	d013      	beq.n	8009272 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800924a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800924e:	f003 0320 	and.w	r3, r3, #32
 8009252:	2b00      	cmp	r3, #0
 8009254:	d105      	bne.n	8009262 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800925a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800925e:	2b00      	cmp	r3, #0
 8009260:	d007      	beq.n	8009272 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009266:	2b00      	cmp	r3, #0
 8009268:	d003      	beq.n	8009272 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009278:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009286:	2b40      	cmp	r3, #64	; 0x40
 8009288:	d005      	beq.n	8009296 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800928a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800928e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009292:	2b00      	cmp	r3, #0
 8009294:	d054      	beq.n	8009340 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 fef3 	bl	800a082 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092a6:	2b40      	cmp	r3, #64	; 0x40
 80092a8:	d146      	bne.n	8009338 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	3308      	adds	r3, #8
 80092b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80092b8:	e853 3f00 	ldrex	r3, [r3]
 80092bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80092c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	3308      	adds	r3, #8
 80092d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80092d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80092da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80092e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80092e6:	e841 2300 	strex	r3, r2, [r1]
 80092ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80092ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d1d9      	bne.n	80092aa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d017      	beq.n	8009330 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009306:	4a15      	ldr	r2, [pc, #84]	; (800935c <HAL_UART_IRQHandler+0x2c0>)
 8009308:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009310:	4618      	mov	r0, r3
 8009312:	f7fb fccb 	bl	8004cac <HAL_DMA_Abort_IT>
 8009316:	4603      	mov	r3, r0
 8009318:	2b00      	cmp	r3, #0
 800931a:	d019      	beq.n	8009350 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800932a:	4610      	mov	r0, r2
 800932c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800932e:	e00f      	b.n	8009350 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 f9e1 	bl	80096f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009336:	e00b      	b.n	8009350 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 f9dd 	bl	80096f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800933e:	e007      	b.n	8009350 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f000 f9d9 	bl	80096f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2200      	movs	r2, #0
 800934a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800934e:	e1bf      	b.n	80096d0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009350:	bf00      	nop
    return;
 8009352:	e1bd      	b.n	80096d0 <HAL_UART_IRQHandler+0x634>
 8009354:	10000001 	.word	0x10000001
 8009358:	04000120 	.word	0x04000120
 800935c:	0800a14f 	.word	0x0800a14f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009364:	2b01      	cmp	r3, #1
 8009366:	f040 8153 	bne.w	8009610 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800936a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800936e:	f003 0310 	and.w	r3, r3, #16
 8009372:	2b00      	cmp	r3, #0
 8009374:	f000 814c 	beq.w	8009610 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800937c:	f003 0310 	and.w	r3, r3, #16
 8009380:	2b00      	cmp	r3, #0
 8009382:	f000 8145 	beq.w	8009610 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2210      	movs	r2, #16
 800938c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	689b      	ldr	r3, [r3, #8]
 8009394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009398:	2b40      	cmp	r3, #64	; 0x40
 800939a:	f040 80bb 	bne.w	8009514 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80093ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	f000 818f 	beq.w	80096d4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80093bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80093c0:	429a      	cmp	r2, r3
 80093c2:	f080 8187 	bcs.w	80096d4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80093cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f003 0320 	and.w	r3, r3, #32
 80093de:	2b00      	cmp	r3, #0
 80093e0:	f040 8087 	bne.w	80094f2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80093f0:	e853 3f00 	ldrex	r3, [r3]
 80093f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80093f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80093fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009400:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	461a      	mov	r2, r3
 800940a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800940e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009412:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009416:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800941a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800941e:	e841 2300 	strex	r3, r2, [r1]
 8009422:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009426:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800942a:	2b00      	cmp	r3, #0
 800942c:	d1da      	bne.n	80093e4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	3308      	adds	r3, #8
 8009434:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009436:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009438:	e853 3f00 	ldrex	r3, [r3]
 800943c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800943e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009440:	f023 0301 	bic.w	r3, r3, #1
 8009444:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	3308      	adds	r3, #8
 800944e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009452:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009456:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009458:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800945a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800945e:	e841 2300 	strex	r3, r2, [r1]
 8009462:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009464:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009466:	2b00      	cmp	r3, #0
 8009468:	d1e1      	bne.n	800942e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	3308      	adds	r3, #8
 8009470:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009472:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009474:	e853 3f00 	ldrex	r3, [r3]
 8009478:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800947a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800947c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009480:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	3308      	adds	r3, #8
 800948a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800948e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009490:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009492:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009494:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009496:	e841 2300 	strex	r3, r2, [r1]
 800949a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800949c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d1e3      	bne.n	800946a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2220      	movs	r2, #32
 80094a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094b8:	e853 3f00 	ldrex	r3, [r3]
 80094bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80094be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094c0:	f023 0310 	bic.w	r3, r3, #16
 80094c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	461a      	mov	r2, r3
 80094ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80094d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80094d4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80094d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80094da:	e841 2300 	strex	r3, r2, [r1]
 80094de:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80094e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d1e4      	bne.n	80094b0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094ec:	4618      	mov	r0, r3
 80094ee:	f7fb fb81 	bl	8004bf4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2202      	movs	r2, #2
 80094f6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009504:	b29b      	uxth	r3, r3
 8009506:	1ad3      	subs	r3, r2, r3
 8009508:	b29b      	uxth	r3, r3
 800950a:	4619      	mov	r1, r3
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 f8fd 	bl	800970c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009512:	e0df      	b.n	80096d4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009520:	b29b      	uxth	r3, r3
 8009522:	1ad3      	subs	r3, r2, r3
 8009524:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800952e:	b29b      	uxth	r3, r3
 8009530:	2b00      	cmp	r3, #0
 8009532:	f000 80d1 	beq.w	80096d8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8009536:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800953a:	2b00      	cmp	r3, #0
 800953c:	f000 80cc 	beq.w	80096d8 <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009548:	e853 3f00 	ldrex	r3, [r3]
 800954c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800954e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009550:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009554:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	461a      	mov	r2, r3
 800955e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009562:	647b      	str	r3, [r7, #68]	; 0x44
 8009564:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009566:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009568:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800956a:	e841 2300 	strex	r3, r2, [r1]
 800956e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009572:	2b00      	cmp	r3, #0
 8009574:	d1e4      	bne.n	8009540 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	3308      	adds	r3, #8
 800957c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800957e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009580:	e853 3f00 	ldrex	r3, [r3]
 8009584:	623b      	str	r3, [r7, #32]
   return(result);
 8009586:	6a3b      	ldr	r3, [r7, #32]
 8009588:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800958c:	f023 0301 	bic.w	r3, r3, #1
 8009590:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	3308      	adds	r3, #8
 800959a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800959e:	633a      	str	r2, [r7, #48]	; 0x30
 80095a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095a6:	e841 2300 	strex	r3, r2, [r1]
 80095aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80095ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d1e1      	bne.n	8009576 <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2220      	movs	r2, #32
 80095b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2200      	movs	r2, #0
 80095be:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	e853 3f00 	ldrex	r3, [r3]
 80095d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f023 0310 	bic.w	r3, r3, #16
 80095da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	461a      	mov	r2, r3
 80095e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80095e8:	61fb      	str	r3, [r7, #28]
 80095ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ec:	69b9      	ldr	r1, [r7, #24]
 80095ee:	69fa      	ldr	r2, [r7, #28]
 80095f0:	e841 2300 	strex	r3, r2, [r1]
 80095f4:	617b      	str	r3, [r7, #20]
   return(result);
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d1e4      	bne.n	80095c6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2202      	movs	r2, #2
 8009600:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009602:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009606:	4619      	mov	r1, r3
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 f87f 	bl	800970c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800960e:	e063      	b.n	80096d8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009614:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009618:	2b00      	cmp	r3, #0
 800961a:	d00e      	beq.n	800963a <HAL_UART_IRQHandler+0x59e>
 800961c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009620:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009624:	2b00      	cmp	r3, #0
 8009626:	d008      	beq.n	800963a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009630:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f000 fdcc 	bl	800a1d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009638:	e051      	b.n	80096de <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800963a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800963e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009642:	2b00      	cmp	r3, #0
 8009644:	d014      	beq.n	8009670 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800964a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800964e:	2b00      	cmp	r3, #0
 8009650:	d105      	bne.n	800965e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009652:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009656:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800965a:	2b00      	cmp	r3, #0
 800965c:	d008      	beq.n	8009670 <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009662:	2b00      	cmp	r3, #0
 8009664:	d03a      	beq.n	80096dc <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	4798      	blx	r3
    }
    return;
 800966e:	e035      	b.n	80096dc <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009678:	2b00      	cmp	r3, #0
 800967a:	d009      	beq.n	8009690 <HAL_UART_IRQHandler+0x5f4>
 800967c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009684:	2b00      	cmp	r3, #0
 8009686:	d003      	beq.n	8009690 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f000 fd76 	bl	800a17a <UART_EndTransmit_IT>
    return;
 800968e:	e026      	b.n	80096de <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009694:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009698:	2b00      	cmp	r3, #0
 800969a:	d009      	beq.n	80096b0 <HAL_UART_IRQHandler+0x614>
 800969c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d003      	beq.n	80096b0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f000 fda5 	bl	800a1f8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80096ae:	e016      	b.n	80096de <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80096b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d010      	beq.n	80096de <HAL_UART_IRQHandler+0x642>
 80096bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	da0c      	bge.n	80096de <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f000 fd8d 	bl	800a1e4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80096ca:	e008      	b.n	80096de <HAL_UART_IRQHandler+0x642>
      return;
 80096cc:	bf00      	nop
 80096ce:	e006      	b.n	80096de <HAL_UART_IRQHandler+0x642>
    return;
 80096d0:	bf00      	nop
 80096d2:	e004      	b.n	80096de <HAL_UART_IRQHandler+0x642>
      return;
 80096d4:	bf00      	nop
 80096d6:	e002      	b.n	80096de <HAL_UART_IRQHandler+0x642>
      return;
 80096d8:	bf00      	nop
 80096da:	e000      	b.n	80096de <HAL_UART_IRQHandler+0x642>
    return;
 80096dc:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 80096de:	37e8      	adds	r7, #232	; 0xe8
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80096ec:	bf00      	nop
 80096ee:	370c      	adds	r7, #12
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009700:	bf00      	nop
 8009702:	370c      	adds	r7, #12
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr

0800970c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	460b      	mov	r3, r1
 8009716:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009718:	bf00      	nop
 800971a:	370c      	adds	r7, #12
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009728:	b08c      	sub	sp, #48	; 0x30
 800972a:	af00      	add	r7, sp, #0
 800972c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800972e:	2300      	movs	r3, #0
 8009730:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	689a      	ldr	r2, [r3, #8]
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	691b      	ldr	r3, [r3, #16]
 800973c:	431a      	orrs	r2, r3
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	695b      	ldr	r3, [r3, #20]
 8009742:	431a      	orrs	r2, r3
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	69db      	ldr	r3, [r3, #28]
 8009748:	4313      	orrs	r3, r2
 800974a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	4baa      	ldr	r3, [pc, #680]	; (80099fc <UART_SetConfig+0x2d8>)
 8009754:	4013      	ands	r3, r2
 8009756:	697a      	ldr	r2, [r7, #20]
 8009758:	6812      	ldr	r2, [r2, #0]
 800975a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800975c:	430b      	orrs	r3, r1
 800975e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	68da      	ldr	r2, [r3, #12]
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	430a      	orrs	r2, r1
 8009774:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	699b      	ldr	r3, [r3, #24]
 800977a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a9f      	ldr	r2, [pc, #636]	; (8009a00 <UART_SetConfig+0x2dc>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d004      	beq.n	8009790 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	6a1b      	ldr	r3, [r3, #32]
 800978a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800978c:	4313      	orrs	r3, r2
 800978e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	689b      	ldr	r3, [r3, #8]
 8009796:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800979a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800979e:	697a      	ldr	r2, [r7, #20]
 80097a0:	6812      	ldr	r2, [r2, #0]
 80097a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80097a4:	430b      	orrs	r3, r1
 80097a6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ae:	f023 010f 	bic.w	r1, r3, #15
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	430a      	orrs	r2, r1
 80097bc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4a90      	ldr	r2, [pc, #576]	; (8009a04 <UART_SetConfig+0x2e0>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d125      	bne.n	8009814 <UART_SetConfig+0xf0>
 80097c8:	4b8f      	ldr	r3, [pc, #572]	; (8009a08 <UART_SetConfig+0x2e4>)
 80097ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097ce:	f003 0303 	and.w	r3, r3, #3
 80097d2:	2b03      	cmp	r3, #3
 80097d4:	d81a      	bhi.n	800980c <UART_SetConfig+0xe8>
 80097d6:	a201      	add	r2, pc, #4	; (adr r2, 80097dc <UART_SetConfig+0xb8>)
 80097d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097dc:	080097ed 	.word	0x080097ed
 80097e0:	080097fd 	.word	0x080097fd
 80097e4:	080097f5 	.word	0x080097f5
 80097e8:	08009805 	.word	0x08009805
 80097ec:	2301      	movs	r3, #1
 80097ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097f2:	e116      	b.n	8009a22 <UART_SetConfig+0x2fe>
 80097f4:	2302      	movs	r3, #2
 80097f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80097fa:	e112      	b.n	8009a22 <UART_SetConfig+0x2fe>
 80097fc:	2304      	movs	r3, #4
 80097fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009802:	e10e      	b.n	8009a22 <UART_SetConfig+0x2fe>
 8009804:	2308      	movs	r3, #8
 8009806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800980a:	e10a      	b.n	8009a22 <UART_SetConfig+0x2fe>
 800980c:	2310      	movs	r3, #16
 800980e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009812:	e106      	b.n	8009a22 <UART_SetConfig+0x2fe>
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4a7c      	ldr	r2, [pc, #496]	; (8009a0c <UART_SetConfig+0x2e8>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d138      	bne.n	8009890 <UART_SetConfig+0x16c>
 800981e:	4b7a      	ldr	r3, [pc, #488]	; (8009a08 <UART_SetConfig+0x2e4>)
 8009820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009824:	f003 030c 	and.w	r3, r3, #12
 8009828:	2b0c      	cmp	r3, #12
 800982a:	d82d      	bhi.n	8009888 <UART_SetConfig+0x164>
 800982c:	a201      	add	r2, pc, #4	; (adr r2, 8009834 <UART_SetConfig+0x110>)
 800982e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009832:	bf00      	nop
 8009834:	08009869 	.word	0x08009869
 8009838:	08009889 	.word	0x08009889
 800983c:	08009889 	.word	0x08009889
 8009840:	08009889 	.word	0x08009889
 8009844:	08009879 	.word	0x08009879
 8009848:	08009889 	.word	0x08009889
 800984c:	08009889 	.word	0x08009889
 8009850:	08009889 	.word	0x08009889
 8009854:	08009871 	.word	0x08009871
 8009858:	08009889 	.word	0x08009889
 800985c:	08009889 	.word	0x08009889
 8009860:	08009889 	.word	0x08009889
 8009864:	08009881 	.word	0x08009881
 8009868:	2300      	movs	r3, #0
 800986a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800986e:	e0d8      	b.n	8009a22 <UART_SetConfig+0x2fe>
 8009870:	2302      	movs	r3, #2
 8009872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009876:	e0d4      	b.n	8009a22 <UART_SetConfig+0x2fe>
 8009878:	2304      	movs	r3, #4
 800987a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800987e:	e0d0      	b.n	8009a22 <UART_SetConfig+0x2fe>
 8009880:	2308      	movs	r3, #8
 8009882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009886:	e0cc      	b.n	8009a22 <UART_SetConfig+0x2fe>
 8009888:	2310      	movs	r3, #16
 800988a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800988e:	e0c8      	b.n	8009a22 <UART_SetConfig+0x2fe>
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4a5e      	ldr	r2, [pc, #376]	; (8009a10 <UART_SetConfig+0x2ec>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d125      	bne.n	80098e6 <UART_SetConfig+0x1c2>
 800989a:	4b5b      	ldr	r3, [pc, #364]	; (8009a08 <UART_SetConfig+0x2e4>)
 800989c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80098a4:	2b30      	cmp	r3, #48	; 0x30
 80098a6:	d016      	beq.n	80098d6 <UART_SetConfig+0x1b2>
 80098a8:	2b30      	cmp	r3, #48	; 0x30
 80098aa:	d818      	bhi.n	80098de <UART_SetConfig+0x1ba>
 80098ac:	2b20      	cmp	r3, #32
 80098ae:	d00a      	beq.n	80098c6 <UART_SetConfig+0x1a2>
 80098b0:	2b20      	cmp	r3, #32
 80098b2:	d814      	bhi.n	80098de <UART_SetConfig+0x1ba>
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d002      	beq.n	80098be <UART_SetConfig+0x19a>
 80098b8:	2b10      	cmp	r3, #16
 80098ba:	d008      	beq.n	80098ce <UART_SetConfig+0x1aa>
 80098bc:	e00f      	b.n	80098de <UART_SetConfig+0x1ba>
 80098be:	2300      	movs	r3, #0
 80098c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098c4:	e0ad      	b.n	8009a22 <UART_SetConfig+0x2fe>
 80098c6:	2302      	movs	r3, #2
 80098c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098cc:	e0a9      	b.n	8009a22 <UART_SetConfig+0x2fe>
 80098ce:	2304      	movs	r3, #4
 80098d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098d4:	e0a5      	b.n	8009a22 <UART_SetConfig+0x2fe>
 80098d6:	2308      	movs	r3, #8
 80098d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098dc:	e0a1      	b.n	8009a22 <UART_SetConfig+0x2fe>
 80098de:	2310      	movs	r3, #16
 80098e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80098e4:	e09d      	b.n	8009a22 <UART_SetConfig+0x2fe>
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4a4a      	ldr	r2, [pc, #296]	; (8009a14 <UART_SetConfig+0x2f0>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d125      	bne.n	800993c <UART_SetConfig+0x218>
 80098f0:	4b45      	ldr	r3, [pc, #276]	; (8009a08 <UART_SetConfig+0x2e4>)
 80098f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80098fa:	2bc0      	cmp	r3, #192	; 0xc0
 80098fc:	d016      	beq.n	800992c <UART_SetConfig+0x208>
 80098fe:	2bc0      	cmp	r3, #192	; 0xc0
 8009900:	d818      	bhi.n	8009934 <UART_SetConfig+0x210>
 8009902:	2b80      	cmp	r3, #128	; 0x80
 8009904:	d00a      	beq.n	800991c <UART_SetConfig+0x1f8>
 8009906:	2b80      	cmp	r3, #128	; 0x80
 8009908:	d814      	bhi.n	8009934 <UART_SetConfig+0x210>
 800990a:	2b00      	cmp	r3, #0
 800990c:	d002      	beq.n	8009914 <UART_SetConfig+0x1f0>
 800990e:	2b40      	cmp	r3, #64	; 0x40
 8009910:	d008      	beq.n	8009924 <UART_SetConfig+0x200>
 8009912:	e00f      	b.n	8009934 <UART_SetConfig+0x210>
 8009914:	2300      	movs	r3, #0
 8009916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800991a:	e082      	b.n	8009a22 <UART_SetConfig+0x2fe>
 800991c:	2302      	movs	r3, #2
 800991e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009922:	e07e      	b.n	8009a22 <UART_SetConfig+0x2fe>
 8009924:	2304      	movs	r3, #4
 8009926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800992a:	e07a      	b.n	8009a22 <UART_SetConfig+0x2fe>
 800992c:	2308      	movs	r3, #8
 800992e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009932:	e076      	b.n	8009a22 <UART_SetConfig+0x2fe>
 8009934:	2310      	movs	r3, #16
 8009936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800993a:	e072      	b.n	8009a22 <UART_SetConfig+0x2fe>
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4a35      	ldr	r2, [pc, #212]	; (8009a18 <UART_SetConfig+0x2f4>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d12a      	bne.n	800999c <UART_SetConfig+0x278>
 8009946:	4b30      	ldr	r3, [pc, #192]	; (8009a08 <UART_SetConfig+0x2e4>)
 8009948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800994c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009950:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009954:	d01a      	beq.n	800998c <UART_SetConfig+0x268>
 8009956:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800995a:	d81b      	bhi.n	8009994 <UART_SetConfig+0x270>
 800995c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009960:	d00c      	beq.n	800997c <UART_SetConfig+0x258>
 8009962:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009966:	d815      	bhi.n	8009994 <UART_SetConfig+0x270>
 8009968:	2b00      	cmp	r3, #0
 800996a:	d003      	beq.n	8009974 <UART_SetConfig+0x250>
 800996c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009970:	d008      	beq.n	8009984 <UART_SetConfig+0x260>
 8009972:	e00f      	b.n	8009994 <UART_SetConfig+0x270>
 8009974:	2300      	movs	r3, #0
 8009976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800997a:	e052      	b.n	8009a22 <UART_SetConfig+0x2fe>
 800997c:	2302      	movs	r3, #2
 800997e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009982:	e04e      	b.n	8009a22 <UART_SetConfig+0x2fe>
 8009984:	2304      	movs	r3, #4
 8009986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800998a:	e04a      	b.n	8009a22 <UART_SetConfig+0x2fe>
 800998c:	2308      	movs	r3, #8
 800998e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009992:	e046      	b.n	8009a22 <UART_SetConfig+0x2fe>
 8009994:	2310      	movs	r3, #16
 8009996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800999a:	e042      	b.n	8009a22 <UART_SetConfig+0x2fe>
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a17      	ldr	r2, [pc, #92]	; (8009a00 <UART_SetConfig+0x2dc>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d13a      	bne.n	8009a1c <UART_SetConfig+0x2f8>
 80099a6:	4b18      	ldr	r3, [pc, #96]	; (8009a08 <UART_SetConfig+0x2e4>)
 80099a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80099b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80099b4:	d01a      	beq.n	80099ec <UART_SetConfig+0x2c8>
 80099b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80099ba:	d81b      	bhi.n	80099f4 <UART_SetConfig+0x2d0>
 80099bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099c0:	d00c      	beq.n	80099dc <UART_SetConfig+0x2b8>
 80099c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099c6:	d815      	bhi.n	80099f4 <UART_SetConfig+0x2d0>
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d003      	beq.n	80099d4 <UART_SetConfig+0x2b0>
 80099cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099d0:	d008      	beq.n	80099e4 <UART_SetConfig+0x2c0>
 80099d2:	e00f      	b.n	80099f4 <UART_SetConfig+0x2d0>
 80099d4:	2300      	movs	r3, #0
 80099d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099da:	e022      	b.n	8009a22 <UART_SetConfig+0x2fe>
 80099dc:	2302      	movs	r3, #2
 80099de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099e2:	e01e      	b.n	8009a22 <UART_SetConfig+0x2fe>
 80099e4:	2304      	movs	r3, #4
 80099e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099ea:	e01a      	b.n	8009a22 <UART_SetConfig+0x2fe>
 80099ec:	2308      	movs	r3, #8
 80099ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099f2:	e016      	b.n	8009a22 <UART_SetConfig+0x2fe>
 80099f4:	2310      	movs	r3, #16
 80099f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099fa:	e012      	b.n	8009a22 <UART_SetConfig+0x2fe>
 80099fc:	cfff69f3 	.word	0xcfff69f3
 8009a00:	40008000 	.word	0x40008000
 8009a04:	40013800 	.word	0x40013800
 8009a08:	40021000 	.word	0x40021000
 8009a0c:	40004400 	.word	0x40004400
 8009a10:	40004800 	.word	0x40004800
 8009a14:	40004c00 	.word	0x40004c00
 8009a18:	40005000 	.word	0x40005000
 8009a1c:	2310      	movs	r3, #16
 8009a1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4aae      	ldr	r2, [pc, #696]	; (8009ce0 <UART_SetConfig+0x5bc>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	f040 8097 	bne.w	8009b5c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009a2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009a32:	2b08      	cmp	r3, #8
 8009a34:	d823      	bhi.n	8009a7e <UART_SetConfig+0x35a>
 8009a36:	a201      	add	r2, pc, #4	; (adr r2, 8009a3c <UART_SetConfig+0x318>)
 8009a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a3c:	08009a61 	.word	0x08009a61
 8009a40:	08009a7f 	.word	0x08009a7f
 8009a44:	08009a69 	.word	0x08009a69
 8009a48:	08009a7f 	.word	0x08009a7f
 8009a4c:	08009a6f 	.word	0x08009a6f
 8009a50:	08009a7f 	.word	0x08009a7f
 8009a54:	08009a7f 	.word	0x08009a7f
 8009a58:	08009a7f 	.word	0x08009a7f
 8009a5c:	08009a77 	.word	0x08009a77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a60:	f7fd fdc6 	bl	80075f0 <HAL_RCC_GetPCLK1Freq>
 8009a64:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009a66:	e010      	b.n	8009a8a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a68:	4b9e      	ldr	r3, [pc, #632]	; (8009ce4 <UART_SetConfig+0x5c0>)
 8009a6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009a6c:	e00d      	b.n	8009a8a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a6e:	f7fd fd27 	bl	80074c0 <HAL_RCC_GetSysClockFreq>
 8009a72:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009a74:	e009      	b.n	8009a8a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009a7c:	e005      	b.n	8009a8a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009a82:	2301      	movs	r3, #1
 8009a84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009a88:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	f000 8130 	beq.w	8009cf2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a96:	4a94      	ldr	r2, [pc, #592]	; (8009ce8 <UART_SetConfig+0x5c4>)
 8009a98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a9c:	461a      	mov	r2, r3
 8009a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009aa4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	685a      	ldr	r2, [r3, #4]
 8009aaa:	4613      	mov	r3, r2
 8009aac:	005b      	lsls	r3, r3, #1
 8009aae:	4413      	add	r3, r2
 8009ab0:	69ba      	ldr	r2, [r7, #24]
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d305      	bcc.n	8009ac2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009abc:	69ba      	ldr	r2, [r7, #24]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d903      	bls.n	8009aca <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009ac8:	e113      	b.n	8009cf2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009acc:	2200      	movs	r2, #0
 8009ace:	60bb      	str	r3, [r7, #8]
 8009ad0:	60fa      	str	r2, [r7, #12]
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad6:	4a84      	ldr	r2, [pc, #528]	; (8009ce8 <UART_SetConfig+0x5c4>)
 8009ad8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	2200      	movs	r2, #0
 8009ae0:	603b      	str	r3, [r7, #0]
 8009ae2:	607a      	str	r2, [r7, #4]
 8009ae4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ae8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009aec:	f7f6 fb90 	bl	8000210 <__aeabi_uldivmod>
 8009af0:	4602      	mov	r2, r0
 8009af2:	460b      	mov	r3, r1
 8009af4:	4610      	mov	r0, r2
 8009af6:	4619      	mov	r1, r3
 8009af8:	f04f 0200 	mov.w	r2, #0
 8009afc:	f04f 0300 	mov.w	r3, #0
 8009b00:	020b      	lsls	r3, r1, #8
 8009b02:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009b06:	0202      	lsls	r2, r0, #8
 8009b08:	6979      	ldr	r1, [r7, #20]
 8009b0a:	6849      	ldr	r1, [r1, #4]
 8009b0c:	0849      	lsrs	r1, r1, #1
 8009b0e:	2000      	movs	r0, #0
 8009b10:	460c      	mov	r4, r1
 8009b12:	4605      	mov	r5, r0
 8009b14:	eb12 0804 	adds.w	r8, r2, r4
 8009b18:	eb43 0905 	adc.w	r9, r3, r5
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	2200      	movs	r2, #0
 8009b22:	469a      	mov	sl, r3
 8009b24:	4693      	mov	fp, r2
 8009b26:	4652      	mov	r2, sl
 8009b28:	465b      	mov	r3, fp
 8009b2a:	4640      	mov	r0, r8
 8009b2c:	4649      	mov	r1, r9
 8009b2e:	f7f6 fb6f 	bl	8000210 <__aeabi_uldivmod>
 8009b32:	4602      	mov	r2, r0
 8009b34:	460b      	mov	r3, r1
 8009b36:	4613      	mov	r3, r2
 8009b38:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009b3a:	6a3b      	ldr	r3, [r7, #32]
 8009b3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b40:	d308      	bcc.n	8009b54 <UART_SetConfig+0x430>
 8009b42:	6a3b      	ldr	r3, [r7, #32]
 8009b44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b48:	d204      	bcs.n	8009b54 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	6a3a      	ldr	r2, [r7, #32]
 8009b50:	60da      	str	r2, [r3, #12]
 8009b52:	e0ce      	b.n	8009cf2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009b54:	2301      	movs	r3, #1
 8009b56:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009b5a:	e0ca      	b.n	8009cf2 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	69db      	ldr	r3, [r3, #28]
 8009b60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b64:	d166      	bne.n	8009c34 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009b66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009b6a:	2b08      	cmp	r3, #8
 8009b6c:	d827      	bhi.n	8009bbe <UART_SetConfig+0x49a>
 8009b6e:	a201      	add	r2, pc, #4	; (adr r2, 8009b74 <UART_SetConfig+0x450>)
 8009b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b74:	08009b99 	.word	0x08009b99
 8009b78:	08009ba1 	.word	0x08009ba1
 8009b7c:	08009ba9 	.word	0x08009ba9
 8009b80:	08009bbf 	.word	0x08009bbf
 8009b84:	08009baf 	.word	0x08009baf
 8009b88:	08009bbf 	.word	0x08009bbf
 8009b8c:	08009bbf 	.word	0x08009bbf
 8009b90:	08009bbf 	.word	0x08009bbf
 8009b94:	08009bb7 	.word	0x08009bb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b98:	f7fd fd2a 	bl	80075f0 <HAL_RCC_GetPCLK1Freq>
 8009b9c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009b9e:	e014      	b.n	8009bca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ba0:	f7fd fd3c 	bl	800761c <HAL_RCC_GetPCLK2Freq>
 8009ba4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009ba6:	e010      	b.n	8009bca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ba8:	4b4e      	ldr	r3, [pc, #312]	; (8009ce4 <UART_SetConfig+0x5c0>)
 8009baa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009bac:	e00d      	b.n	8009bca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009bae:	f7fd fc87 	bl	80074c0 <HAL_RCC_GetSysClockFreq>
 8009bb2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009bb4:	e009      	b.n	8009bca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009bbc:	e005      	b.n	8009bca <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009bc8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	f000 8090 	beq.w	8009cf2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd6:	4a44      	ldr	r2, [pc, #272]	; (8009ce8 <UART_SetConfig+0x5c4>)
 8009bd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009bdc:	461a      	mov	r2, r3
 8009bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009be4:	005a      	lsls	r2, r3, #1
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	085b      	lsrs	r3, r3, #1
 8009bec:	441a      	add	r2, r3
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bf6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009bf8:	6a3b      	ldr	r3, [r7, #32]
 8009bfa:	2b0f      	cmp	r3, #15
 8009bfc:	d916      	bls.n	8009c2c <UART_SetConfig+0x508>
 8009bfe:	6a3b      	ldr	r3, [r7, #32]
 8009c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c04:	d212      	bcs.n	8009c2c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c06:	6a3b      	ldr	r3, [r7, #32]
 8009c08:	b29b      	uxth	r3, r3
 8009c0a:	f023 030f 	bic.w	r3, r3, #15
 8009c0e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c10:	6a3b      	ldr	r3, [r7, #32]
 8009c12:	085b      	lsrs	r3, r3, #1
 8009c14:	b29b      	uxth	r3, r3
 8009c16:	f003 0307 	and.w	r3, r3, #7
 8009c1a:	b29a      	uxth	r2, r3
 8009c1c:	8bfb      	ldrh	r3, [r7, #30]
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	8bfa      	ldrh	r2, [r7, #30]
 8009c28:	60da      	str	r2, [r3, #12]
 8009c2a:	e062      	b.n	8009cf2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009c32:	e05e      	b.n	8009cf2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009c34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009c38:	2b08      	cmp	r3, #8
 8009c3a:	d828      	bhi.n	8009c8e <UART_SetConfig+0x56a>
 8009c3c:	a201      	add	r2, pc, #4	; (adr r2, 8009c44 <UART_SetConfig+0x520>)
 8009c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c42:	bf00      	nop
 8009c44:	08009c69 	.word	0x08009c69
 8009c48:	08009c71 	.word	0x08009c71
 8009c4c:	08009c79 	.word	0x08009c79
 8009c50:	08009c8f 	.word	0x08009c8f
 8009c54:	08009c7f 	.word	0x08009c7f
 8009c58:	08009c8f 	.word	0x08009c8f
 8009c5c:	08009c8f 	.word	0x08009c8f
 8009c60:	08009c8f 	.word	0x08009c8f
 8009c64:	08009c87 	.word	0x08009c87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c68:	f7fd fcc2 	bl	80075f0 <HAL_RCC_GetPCLK1Freq>
 8009c6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009c6e:	e014      	b.n	8009c9a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c70:	f7fd fcd4 	bl	800761c <HAL_RCC_GetPCLK2Freq>
 8009c74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009c76:	e010      	b.n	8009c9a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c78:	4b1a      	ldr	r3, [pc, #104]	; (8009ce4 <UART_SetConfig+0x5c0>)
 8009c7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009c7c:	e00d      	b.n	8009c9a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c7e:	f7fd fc1f 	bl	80074c0 <HAL_RCC_GetSysClockFreq>
 8009c82:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009c84:	e009      	b.n	8009c9a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009c8c:	e005      	b.n	8009c9a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009c92:	2301      	movs	r3, #1
 8009c94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009c98:	bf00      	nop
    }

    if (pclk != 0U)
 8009c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d028      	beq.n	8009cf2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca4:	4a10      	ldr	r2, [pc, #64]	; (8009ce8 <UART_SetConfig+0x5c4>)
 8009ca6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009caa:	461a      	mov	r2, r3
 8009cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cae:	fbb3 f2f2 	udiv	r2, r3, r2
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	085b      	lsrs	r3, r3, #1
 8009cb8:	441a      	add	r2, r3
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cc2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cc4:	6a3b      	ldr	r3, [r7, #32]
 8009cc6:	2b0f      	cmp	r3, #15
 8009cc8:	d910      	bls.n	8009cec <UART_SetConfig+0x5c8>
 8009cca:	6a3b      	ldr	r3, [r7, #32]
 8009ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cd0:	d20c      	bcs.n	8009cec <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009cd2:	6a3b      	ldr	r3, [r7, #32]
 8009cd4:	b29a      	uxth	r2, r3
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	60da      	str	r2, [r3, #12]
 8009cdc:	e009      	b.n	8009cf2 <UART_SetConfig+0x5ce>
 8009cde:	bf00      	nop
 8009ce0:	40008000 	.word	0x40008000
 8009ce4:	00f42400 	.word	0x00f42400
 8009ce8:	0800ad6c 	.word	0x0800ad6c
      }
      else
      {
        ret = HAL_ERROR;
 8009cec:	2301      	movs	r3, #1
 8009cee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	2200      	movs	r2, #0
 8009d06:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009d0e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3730      	adds	r7, #48	; 0x30
 8009d16:	46bd      	mov	sp, r7
 8009d18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009d1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b083      	sub	sp, #12
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d28:	f003 0308 	and.w	r3, r3, #8
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d00a      	beq.n	8009d46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	430a      	orrs	r2, r1
 8009d44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d4a:	f003 0301 	and.w	r3, r3, #1
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d00a      	beq.n	8009d68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	430a      	orrs	r2, r1
 8009d66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d6c:	f003 0302 	and.w	r3, r3, #2
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d00a      	beq.n	8009d8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	430a      	orrs	r2, r1
 8009d88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d8e:	f003 0304 	and.w	r3, r3, #4
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d00a      	beq.n	8009dac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	685b      	ldr	r3, [r3, #4]
 8009d9c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	430a      	orrs	r2, r1
 8009daa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009db0:	f003 0310 	and.w	r3, r3, #16
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d00a      	beq.n	8009dce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	689b      	ldr	r3, [r3, #8]
 8009dbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	430a      	orrs	r2, r1
 8009dcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dd2:	f003 0320 	and.w	r3, r3, #32
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d00a      	beq.n	8009df0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	430a      	orrs	r2, r1
 8009dee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d01a      	beq.n	8009e32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	430a      	orrs	r2, r1
 8009e10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e1a:	d10a      	bne.n	8009e32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	430a      	orrs	r2, r1
 8009e30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d00a      	beq.n	8009e54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	430a      	orrs	r2, r1
 8009e52:	605a      	str	r2, [r3, #4]
  }
}
 8009e54:	bf00      	nop
 8009e56:	370c      	adds	r7, #12
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr

08009e60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b098      	sub	sp, #96	; 0x60
 8009e64:	af02      	add	r7, sp, #8
 8009e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e70:	f7f9 fdc0 	bl	80039f4 <HAL_GetTick>
 8009e74:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f003 0308 	and.w	r3, r3, #8
 8009e80:	2b08      	cmp	r3, #8
 8009e82:	d12f      	bne.n	8009ee4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e88:	9300      	str	r3, [sp, #0]
 8009e8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 f88e 	bl	8009fb4 <UART_WaitOnFlagUntilTimeout>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d022      	beq.n	8009ee4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea6:	e853 3f00 	ldrex	r3, [r3]
 8009eaa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009eb2:	653b      	str	r3, [r7, #80]	; 0x50
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	461a      	mov	r2, r3
 8009eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ebc:	647b      	str	r3, [r7, #68]	; 0x44
 8009ebe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009ec2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ec4:	e841 2300 	strex	r3, r2, [r1]
 8009ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d1e6      	bne.n	8009e9e <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2220      	movs	r2, #32
 8009ed4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ee0:	2303      	movs	r3, #3
 8009ee2:	e063      	b.n	8009fac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f003 0304 	and.w	r3, r3, #4
 8009eee:	2b04      	cmp	r3, #4
 8009ef0:	d149      	bne.n	8009f86 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ef2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ef6:	9300      	str	r3, [sp, #0]
 8009ef8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009efa:	2200      	movs	r2, #0
 8009efc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f000 f857 	bl	8009fb4 <UART_WaitOnFlagUntilTimeout>
 8009f06:	4603      	mov	r3, r0
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d03c      	beq.n	8009f86 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f14:	e853 3f00 	ldrex	r3, [r3]
 8009f18:	623b      	str	r3, [r7, #32]
   return(result);
 8009f1a:	6a3b      	ldr	r3, [r7, #32]
 8009f1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009f20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	461a      	mov	r2, r3
 8009f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f2a:	633b      	str	r3, [r7, #48]	; 0x30
 8009f2c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f32:	e841 2300 	strex	r3, r2, [r1]
 8009f36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d1e6      	bne.n	8009f0c <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	3308      	adds	r3, #8
 8009f44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	e853 3f00 	ldrex	r3, [r3]
 8009f4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	f023 0301 	bic.w	r3, r3, #1
 8009f54:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	3308      	adds	r3, #8
 8009f5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f5e:	61fa      	str	r2, [r7, #28]
 8009f60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f62:	69b9      	ldr	r1, [r7, #24]
 8009f64:	69fa      	ldr	r2, [r7, #28]
 8009f66:	e841 2300 	strex	r3, r2, [r1]
 8009f6a:	617b      	str	r3, [r7, #20]
   return(result);
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d1e5      	bne.n	8009f3e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2220      	movs	r2, #32
 8009f76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f82:	2303      	movs	r3, #3
 8009f84:	e012      	b.n	8009fac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2220      	movs	r2, #32
 8009f8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2220      	movs	r2, #32
 8009f92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009faa:	2300      	movs	r3, #0
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3758      	adds	r7, #88	; 0x58
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	60b9      	str	r1, [r7, #8]
 8009fbe:	603b      	str	r3, [r7, #0]
 8009fc0:	4613      	mov	r3, r2
 8009fc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fc4:	e049      	b.n	800a05a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009fc6:	69bb      	ldr	r3, [r7, #24]
 8009fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fcc:	d045      	beq.n	800a05a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fce:	f7f9 fd11 	bl	80039f4 <HAL_GetTick>
 8009fd2:	4602      	mov	r2, r0
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	1ad3      	subs	r3, r2, r3
 8009fd8:	69ba      	ldr	r2, [r7, #24]
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d302      	bcc.n	8009fe4 <UART_WaitOnFlagUntilTimeout+0x30>
 8009fde:	69bb      	ldr	r3, [r7, #24]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d101      	bne.n	8009fe8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009fe4:	2303      	movs	r3, #3
 8009fe6:	e048      	b.n	800a07a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f003 0304 	and.w	r3, r3, #4
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d031      	beq.n	800a05a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	69db      	ldr	r3, [r3, #28]
 8009ffc:	f003 0308 	and.w	r3, r3, #8
 800a000:	2b08      	cmp	r3, #8
 800a002:	d110      	bne.n	800a026 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	2208      	movs	r2, #8
 800a00a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a00c:	68f8      	ldr	r0, [r7, #12]
 800a00e:	f000 f838 	bl	800a082 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2208      	movs	r2, #8
 800a016:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2200      	movs	r2, #0
 800a01e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800a022:	2301      	movs	r3, #1
 800a024:	e029      	b.n	800a07a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	69db      	ldr	r3, [r3, #28]
 800a02c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a030:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a034:	d111      	bne.n	800a05a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a03e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a040:	68f8      	ldr	r0, [r7, #12]
 800a042:	f000 f81e 	bl	800a082 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2220      	movs	r2, #32
 800a04a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2200      	movs	r2, #0
 800a052:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a056:	2303      	movs	r3, #3
 800a058:	e00f      	b.n	800a07a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	69da      	ldr	r2, [r3, #28]
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	4013      	ands	r3, r2
 800a064:	68ba      	ldr	r2, [r7, #8]
 800a066:	429a      	cmp	r2, r3
 800a068:	bf0c      	ite	eq
 800a06a:	2301      	moveq	r3, #1
 800a06c:	2300      	movne	r3, #0
 800a06e:	b2db      	uxtb	r3, r3
 800a070:	461a      	mov	r2, r3
 800a072:	79fb      	ldrb	r3, [r7, #7]
 800a074:	429a      	cmp	r2, r3
 800a076:	d0a6      	beq.n	8009fc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a078:	2300      	movs	r3, #0
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3710      	adds	r7, #16
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}

0800a082 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a082:	b480      	push	{r7}
 800a084:	b095      	sub	sp, #84	; 0x54
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a092:	e853 3f00 	ldrex	r3, [r3]
 800a096:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a09e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0a8:	643b      	str	r3, [r7, #64]	; 0x40
 800a0aa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a0ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a0b0:	e841 2300 	strex	r3, r2, [r1]
 800a0b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d1e6      	bne.n	800a08a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	3308      	adds	r3, #8
 800a0c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c4:	6a3b      	ldr	r3, [r7, #32]
 800a0c6:	e853 3f00 	ldrex	r3, [r3]
 800a0ca:	61fb      	str	r3, [r7, #28]
   return(result);
 800a0cc:	69fb      	ldr	r3, [r7, #28]
 800a0ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a0d2:	f023 0301 	bic.w	r3, r3, #1
 800a0d6:	64bb      	str	r3, [r7, #72]	; 0x48
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	3308      	adds	r3, #8
 800a0de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a0e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a0e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a0e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0e8:	e841 2300 	strex	r3, r2, [r1]
 800a0ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d1e3      	bne.n	800a0bc <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d118      	bne.n	800a12e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	e853 3f00 	ldrex	r3, [r3]
 800a108:	60bb      	str	r3, [r7, #8]
   return(result);
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	f023 0310 	bic.w	r3, r3, #16
 800a110:	647b      	str	r3, [r7, #68]	; 0x44
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	461a      	mov	r2, r3
 800a118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a11a:	61bb      	str	r3, [r7, #24]
 800a11c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a11e:	6979      	ldr	r1, [r7, #20]
 800a120:	69ba      	ldr	r2, [r7, #24]
 800a122:	e841 2300 	strex	r3, r2, [r1]
 800a126:	613b      	str	r3, [r7, #16]
   return(result);
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d1e6      	bne.n	800a0fc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2220      	movs	r2, #32
 800a132:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2200      	movs	r2, #0
 800a13a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2200      	movs	r2, #0
 800a140:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a142:	bf00      	nop
 800a144:	3754      	adds	r7, #84	; 0x54
 800a146:	46bd      	mov	sp, r7
 800a148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14c:	4770      	bx	lr

0800a14e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a14e:	b580      	push	{r7, lr}
 800a150:	b084      	sub	sp, #16
 800a152:	af00      	add	r7, sp, #0
 800a154:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a15a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2200      	movs	r2, #0
 800a160:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2200      	movs	r2, #0
 800a168:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a16c:	68f8      	ldr	r0, [r7, #12]
 800a16e:	f7ff fac3 	bl	80096f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a172:	bf00      	nop
 800a174:	3710      	adds	r7, #16
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}

0800a17a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a17a:	b580      	push	{r7, lr}
 800a17c:	b088      	sub	sp, #32
 800a17e:	af00      	add	r7, sp, #0
 800a180:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	e853 3f00 	ldrex	r3, [r3]
 800a18e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a196:	61fb      	str	r3, [r7, #28]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	461a      	mov	r2, r3
 800a19e:	69fb      	ldr	r3, [r7, #28]
 800a1a0:	61bb      	str	r3, [r7, #24]
 800a1a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a4:	6979      	ldr	r1, [r7, #20]
 800a1a6:	69ba      	ldr	r2, [r7, #24]
 800a1a8:	e841 2300 	strex	r3, r2, [r1]
 800a1ac:	613b      	str	r3, [r7, #16]
   return(result);
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d1e6      	bne.n	800a182 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2220      	movs	r2, #32
 800a1b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f7ff fa8e 	bl	80096e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1c8:	bf00      	nop
 800a1ca:	3720      	adds	r7, #32
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b083      	sub	sp, #12
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a1d8:	bf00      	nop
 800a1da:	370c      	adds	r7, #12
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr

0800a1e4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b083      	sub	sp, #12
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a1ec:	bf00      	nop
 800a1ee:	370c      	adds	r7, #12
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr

0800a1f8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a200:	bf00      	nop
 800a202:	370c      	adds	r7, #12
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr

0800a20c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b085      	sub	sp, #20
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	d101      	bne.n	800a222 <HAL_UARTEx_DisableFifoMode+0x16>
 800a21e:	2302      	movs	r3, #2
 800a220:	e027      	b.n	800a272 <HAL_UARTEx_DisableFifoMode+0x66>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2201      	movs	r2, #1
 800a226:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2224      	movs	r2, #36	; 0x24
 800a22e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	681a      	ldr	r2, [r3, #0]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f022 0201 	bic.w	r2, r2, #1
 800a248:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a250:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2200      	movs	r2, #0
 800a256:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	68fa      	ldr	r2, [r7, #12]
 800a25e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2220      	movs	r2, #32
 800a264:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2200      	movs	r2, #0
 800a26c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a270:	2300      	movs	r3, #0
}
 800a272:	4618      	mov	r0, r3
 800a274:	3714      	adds	r7, #20
 800a276:	46bd      	mov	sp, r7
 800a278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27c:	4770      	bx	lr

0800a27e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a27e:	b580      	push	{r7, lr}
 800a280:	b084      	sub	sp, #16
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
 800a286:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a28e:	2b01      	cmp	r3, #1
 800a290:	d101      	bne.n	800a296 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a292:	2302      	movs	r3, #2
 800a294:	e02d      	b.n	800a2f2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2201      	movs	r2, #1
 800a29a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2224      	movs	r2, #36	; 0x24
 800a2a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	681a      	ldr	r2, [r3, #0]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f022 0201 	bic.w	r2, r2, #1
 800a2bc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	689b      	ldr	r3, [r3, #8]
 800a2c4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	683a      	ldr	r2, [r7, #0]
 800a2ce:	430a      	orrs	r2, r1
 800a2d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f000 f850 	bl	800a378 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	68fa      	ldr	r2, [r7, #12]
 800a2de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2220      	movs	r2, #32
 800a2e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a2f0:	2300      	movs	r3, #0
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3710      	adds	r7, #16
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}

0800a2fa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a2fa:	b580      	push	{r7, lr}
 800a2fc:	b084      	sub	sp, #16
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
 800a302:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a30a:	2b01      	cmp	r3, #1
 800a30c:	d101      	bne.n	800a312 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a30e:	2302      	movs	r3, #2
 800a310:	e02d      	b.n	800a36e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2201      	movs	r2, #1
 800a316:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2224      	movs	r2, #36	; 0x24
 800a31e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f022 0201 	bic.w	r2, r2, #1
 800a338:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	689b      	ldr	r3, [r3, #8]
 800a340:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	683a      	ldr	r2, [r7, #0]
 800a34a:	430a      	orrs	r2, r1
 800a34c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f000 f812 	bl	800a378 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	68fa      	ldr	r2, [r7, #12]
 800a35a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2220      	movs	r2, #32
 800a360:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2200      	movs	r2, #0
 800a368:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a36c:	2300      	movs	r3, #0
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3710      	adds	r7, #16
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
	...

0800a378 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a378:	b480      	push	{r7}
 800a37a:	b085      	sub	sp, #20
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a384:	2b00      	cmp	r3, #0
 800a386:	d108      	bne.n	800a39a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2201      	movs	r2, #1
 800a38c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2201      	movs	r2, #1
 800a394:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a398:	e031      	b.n	800a3fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a39a:	2308      	movs	r3, #8
 800a39c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a39e:	2308      	movs	r3, #8
 800a3a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	689b      	ldr	r3, [r3, #8]
 800a3a8:	0e5b      	lsrs	r3, r3, #25
 800a3aa:	b2db      	uxtb	r3, r3
 800a3ac:	f003 0307 	and.w	r3, r3, #7
 800a3b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	689b      	ldr	r3, [r3, #8]
 800a3b8:	0f5b      	lsrs	r3, r3, #29
 800a3ba:	b2db      	uxtb	r3, r3
 800a3bc:	f003 0307 	and.w	r3, r3, #7
 800a3c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a3c2:	7bbb      	ldrb	r3, [r7, #14]
 800a3c4:	7b3a      	ldrb	r2, [r7, #12]
 800a3c6:	4911      	ldr	r1, [pc, #68]	; (800a40c <UARTEx_SetNbDataToProcess+0x94>)
 800a3c8:	5c8a      	ldrb	r2, [r1, r2]
 800a3ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a3ce:	7b3a      	ldrb	r2, [r7, #12]
 800a3d0:	490f      	ldr	r1, [pc, #60]	; (800a410 <UARTEx_SetNbDataToProcess+0x98>)
 800a3d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a3d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a3d8:	b29a      	uxth	r2, r3
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a3e0:	7bfb      	ldrb	r3, [r7, #15]
 800a3e2:	7b7a      	ldrb	r2, [r7, #13]
 800a3e4:	4909      	ldr	r1, [pc, #36]	; (800a40c <UARTEx_SetNbDataToProcess+0x94>)
 800a3e6:	5c8a      	ldrb	r2, [r1, r2]
 800a3e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a3ec:	7b7a      	ldrb	r2, [r7, #13]
 800a3ee:	4908      	ldr	r1, [pc, #32]	; (800a410 <UARTEx_SetNbDataToProcess+0x98>)
 800a3f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a3f2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a3f6:	b29a      	uxth	r2, r3
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a3fe:	bf00      	nop
 800a400:	3714      	adds	r7, #20
 800a402:	46bd      	mov	sp, r7
 800a404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a408:	4770      	bx	lr
 800a40a:	bf00      	nop
 800a40c:	0800ad84 	.word	0x0800ad84
 800a410:	0800ad8c 	.word	0x0800ad8c

0800a414 <memset>:
 800a414:	4402      	add	r2, r0
 800a416:	4603      	mov	r3, r0
 800a418:	4293      	cmp	r3, r2
 800a41a:	d100      	bne.n	800a41e <memset+0xa>
 800a41c:	4770      	bx	lr
 800a41e:	f803 1b01 	strb.w	r1, [r3], #1
 800a422:	e7f9      	b.n	800a418 <memset+0x4>

0800a424 <__libc_init_array>:
 800a424:	b570      	push	{r4, r5, r6, lr}
 800a426:	4d0d      	ldr	r5, [pc, #52]	; (800a45c <__libc_init_array+0x38>)
 800a428:	4c0d      	ldr	r4, [pc, #52]	; (800a460 <__libc_init_array+0x3c>)
 800a42a:	1b64      	subs	r4, r4, r5
 800a42c:	10a4      	asrs	r4, r4, #2
 800a42e:	2600      	movs	r6, #0
 800a430:	42a6      	cmp	r6, r4
 800a432:	d109      	bne.n	800a448 <__libc_init_array+0x24>
 800a434:	4d0b      	ldr	r5, [pc, #44]	; (800a464 <__libc_init_array+0x40>)
 800a436:	4c0c      	ldr	r4, [pc, #48]	; (800a468 <__libc_init_array+0x44>)
 800a438:	f000 f818 	bl	800a46c <_init>
 800a43c:	1b64      	subs	r4, r4, r5
 800a43e:	10a4      	asrs	r4, r4, #2
 800a440:	2600      	movs	r6, #0
 800a442:	42a6      	cmp	r6, r4
 800a444:	d105      	bne.n	800a452 <__libc_init_array+0x2e>
 800a446:	bd70      	pop	{r4, r5, r6, pc}
 800a448:	f855 3b04 	ldr.w	r3, [r5], #4
 800a44c:	4798      	blx	r3
 800a44e:	3601      	adds	r6, #1
 800a450:	e7ee      	b.n	800a430 <__libc_init_array+0xc>
 800a452:	f855 3b04 	ldr.w	r3, [r5], #4
 800a456:	4798      	blx	r3
 800a458:	3601      	adds	r6, #1
 800a45a:	e7f2      	b.n	800a442 <__libc_init_array+0x1e>
 800a45c:	0800ad9c 	.word	0x0800ad9c
 800a460:	0800ad9c 	.word	0x0800ad9c
 800a464:	0800ad9c 	.word	0x0800ad9c
 800a468:	0800ada0 	.word	0x0800ada0

0800a46c <_init>:
 800a46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a46e:	bf00      	nop
 800a470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a472:	bc08      	pop	{r3}
 800a474:	469e      	mov	lr, r3
 800a476:	4770      	bx	lr

0800a478 <_fini>:
 800a478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a47a:	bf00      	nop
 800a47c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a47e:	bc08      	pop	{r3}
 800a480:	469e      	mov	lr, r3
 800a482:	4770      	bx	lr
